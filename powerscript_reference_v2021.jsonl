{"page": 1, "text": "PowerScript Reference\nAppeon PowerBuilder\u00ae 2021\n"}
{"page": 2, "text": "Contents\n1 PowerScript Topics ..............................................................................................  33\n1.1 Language Basics .......................................................................................  33\n1.1.1 Comments ........................................................................................ 33\n1.1.2 Identifier names ...............................................................................  34\n1.1.3 Labels ..............................................................................................  35\n1.1.4 Special ASCII characters ................................................................. 36\n1.1.5 NULL values ....................................................................................  37\n1.1.6 Reserved words ............................................................................... 39\n1.1.7 Pronouns .......................................................................................... 40\n1.1.7.1 Parent pronoun ...................................................................... 40\n1.1.7.2 This pronoun .......................................................................... 42\n1.1.7.3 Super pronoun ....................................................................... 43\n1.1.8 Statement continuation .................................................................... 43\n1.1.9 Statement separation ....................................................................... 45\n1.1.10 White space ................................................................................... 45\n1.1.11 Conditional compilation .................................................................. 46\n1.2 Datatypes ................................................................................................... 48\n1.2.1 Standard datatypes .......................................................................... 48\n1.2.2 The Any datatype ............................................................................  53\n1.2.3 System object datatypes .................................................................  55\n1.2.4 Enumerated datatypes ..................................................................... 56\n1.3 Declarations ...............................................................................................  56\n1.3.1 Declaring variables ..........................................................................  56\n1.3.1.1 Where to declare variables ...................................................  57\n1.3.1.2 About using variables ............................................................ 58\n1.3.1.3 Syntax of a variable declaration ............................................ 60\n1.3.2 Declaring constants .........................................................................  67\n1.3.3 Declaring arrays ............................................................................... 68\n1.3.3.1 Values for array elements .....................................................  71\n1.3.3.2 Size of variable-size arrays ...................................................  72\n1.3.3.3 More about arrays .................................................................  73\n1.3.4 Declaring external functions ............................................................  76\n1.3.4.1 Datatypes for external function arguments ............................ 80\n1.3.4.2 Calling external functions ......................................................  82\n1.3.4.3 Defining source for external functions ................................... 82\n1.3.5 Declaring DBMS stored procedures as remote procedure calls ......  83\n1.4 Operators and Expressions .......................................................................  84\n1.4.1 Operators in PowerBuilder ..............................................................  85\n1.4.1.1 Arithmetic operators in PowerBuilder ....................................  85\n1.4.1.2 Relational operators in PowerBuilder ....................................  87\n1.4.1.3 Concatenation operator in PowerBuilder ............................... 88\n1.4.2 Operator precedence in PowerBuilder expressions ......................... 89\n1.4.3 Datatype of PowerBuilder expressions ............................................ 90\n1.4.3.1 Numeric datatypes in PowerBuilder ......................................  90\n1.4.3.2 String and char datatypes in PowerBuilder ...........................  92\n1.5 Structures and Objects .............................................................................. 93\n"}
{"page": 3, "text": "1.5.1 About structures ............................................................................... 93\n1.5.2 About objects ................................................................................... 94\n1.5.2.1 About user objects ................................................................. 95\n1.5.2.2 Instantiating objects ............................................................... 96\n1.5.2.3 Using ancestors and descendants ........................................  97\n1.5.2.4 Garbage collection ................................................................. 97\n1.5.2.5 User objects that behave like structures ...............................  98\n1.5.3 Assignment for objects and structures ............................................  99\n1.5.3.1 Assignment for structures ...................................................... 99\n1.5.3.2 Assignment for objects ........................................................ 100\n1.5.3.3 Assignment for autoinstantiated user objects ...................... 100\n1.6 Calling Functions and Events .................................................................. 102\n1.6.1 About functions and events ........................................................... 102\n1.6.2 Finding and executing functions and events .................................  104\n1.6.2.1 Finding functions .................................................................  104\n1.6.2.2 Finding events .....................................................................  105\n1.6.3 Triggering versus posting functions and events ............................  105\n1.6.4 Static versus dynamic calls ...........................................................  107\n1.6.4.1 Static calls ...........................................................................  107\n1.6.4.2 Dynamic calls ......................................................................  108\n1.6.5 Overloading, overriding, and extending functions and events .......  112\n1.6.5.1 Overloading and overriding functions .................................. 112\n1.6.5.2 Extending and overriding events .........................................  113\n1.6.6 Passing arguments to functions and events .................................. 114\n1.6.6.1 Passing objects ...................................................................  114\n1.6.6.2 Passing structures ............................................................... 115\n1.6.6.3 Passing arrays ..................................................................... 115\n1.6.7 Using return values .......................................................................  116\n1.6.7.1 Functions .............................................................................  116\n1.6.7.2 Events .................................................................................. 116\n1.6.7.3 Using cascaded calling and return values ........................... 117\n1.6.8 Syntax for calling PowerBuilder functions and events ...................  117\n1.6.9 Calling functions and events in an object's ancestor .....................  120\n2 Statements, Events, and Functions ................................................................... 124\n2.1 PowerScript Statements ..........................................................................  124\n2.1.1 Assignment ....................................................................................  124\n2.1.2 CALL .............................................................................................. 126\n2.1.3 CHOOSE CASE ............................................................................  127\n2.1.4 CONTINUE ....................................................................................  128\n2.1.5 CREATE ........................................................................................  129\n2.1.6 DESTROY ...................................................................................... 132\n2.1.7 DO...LOOP ..................................................................................... 133\n2.1.8 EXIT ............................................................................................... 135\n2.1.9 FOR...NEXT ................................................................................... 135\n2.1.10 GOTO ..........................................................................................  137\n2.1.11 HALT ............................................................................................ 138\n2.1.12 IF...THEN ..................................................................................... 139\n2.1.13 RETURN ...................................................................................... 141\n"}
{"page": 4, "text": "2.1.14 THROW .......................................................................................  141\n2.1.15 THROWS ..................................................................................... 142\n2.1.16 TRY...CATCH...FINALLY...END TRY ..........................................  143\n2.2 SQL Statements ......................................................................................  144\n2.2.1 Using SQL in scripts ...................................................................... 144\n2.2.1.1 CLOSE Cursor ..................................................................... 147\n2.2.1.2 CLOSE Procedure ............................................................... 148\n2.2.1.3 COMMIT ..............................................................................  148\n2.2.1.4 CONNECT ...........................................................................  149\n2.2.1.5 DECLARE Cursor ................................................................ 150\n2.2.1.6 DECLARE Procedure ..........................................................  151\n2.2.1.7 DELETE ............................................................................... 152\n2.2.1.8 DELETE Where Current of Cursor ...................................... 153\n2.2.1.9 DISCONNECT .....................................................................  154\n2.2.1.10 EXECUTE .......................................................................... 154\n2.2.1.11 FETCH ............................................................................... 155\n2.2.1.12 INSERT .............................................................................. 156\n2.2.1.13 OPEN Cursor ..................................................................... 157\n2.2.1.14 ROLLBACK ........................................................................ 157\n2.2.1.15 SELECT ............................................................................. 158\n2.2.1.16 SELECTBLOB ...................................................................  159\n2.2.1.17 UPDATE ............................................................................  160\n2.2.1.18 UPDATEBLOB ................................................................... 161\n2.2.1.19 UPDATE Where Current of Cursor ...................................  162\n2.2.2 Using dynamic SQL ....................................................................... 163\n2.2.2.1 Dynamic SQL Format 1 ....................................................... 166\n2.2.2.2 Dynamic SQL Format 2 ....................................................... 167\n2.2.2.3 Dynamic SQL Format 3 ....................................................... 168\n2.2.2.4 Dynamic SQL Format 4 ....................................................... 170\n2.3 PowerScript Events .................................................................................. 175\n2.3.1 About events .................................................................................. 175\n2.3.2 Activate ..........................................................................................  178\n2.3.3 AddressChange .............................................................................  179\n2.3.4 BeginDownload .............................................................................. 179\n2.3.5 BeginDrag ...................................................................................... 180\n2.3.5.1 Syntax 1: For ListView controls ........................................... 180\n2.3.5.2 Syntax 2: For TreeView controls .........................................  182\n2.3.6 BeginLabelEdit ............................................................................... 183\n2.3.6.1 Syntax 1: For ListView controls ........................................... 183\n2.3.6.2 Syntax 2: For TreeView controls .........................................  184\n2.3.7 BeginLogScan ................................................................................ 185\n2.3.8 BeginRightDrag .............................................................................. 186\n2.3.8.1 Syntax 1: For ListView controls ........................................... 186\n2.3.8.2 Syntax 2: For TreeView controls .........................................  187\n2.3.9 BeginSync ...................................................................................... 188\n2.3.10 BeginUpload ................................................................................  189\n2.3.11 CategoryCollapsed ......................................................................  190\n2.3.12 CategoryExpanded ......................................................................  190\n"}
{"page": 5, "text": "2.3.13 CategorySelectionChanged .........................................................  191\n2.3.14 CategorySelectionChanging ........................................................  192\n2.3.15 CertificateError ............................................................................. 193\n2.3.16 Clicked .........................................................................................  194\n2.3.16.1 Syntax 1: For menus ......................................................... 195\n2.3.16.2 Syntax 2: For ListView and Toolbar controls ..................... 195\n2.3.16.3 Syntax 3: For Tab controls ................................................ 197\n2.3.16.4 Syntax 4: For TreeView controls .......................................  198\n2.3.16.5 Syntax 5: For windows and progress bars ........................  199\n2.3.16.6 Syntax 6: For Ribbon controls ........................................... 200\n2.3.16.7 Syntax 7: For other controls .............................................. 203\n2.3.17 Close ............................................................................................ 204\n2.3.17.1 Syntax 1: For the application object ..................................  204\n2.3.17.2 Syntax 2: For OLE controls ............................................... 205\n2.3.17.3 Syntax 3: For windows ...................................................... 205\n2.3.18 CloseQuery .................................................................................. 206\n2.3.19 CloseUp .......................................................................................  207\n2.3.20 ColumnClick ................................................................................. 208\n2.3.21 ConnectMobiLink .........................................................................  209\n2.3.22 Constructor ..................................................................................  210\n2.3.23 DataChange ................................................................................. 211\n2.3.24 DateChanged ............................................................................... 212\n2.3.25 DateSelected ...............................................................................  212\n2.3.26 DBError ........................................................................................ 213\n2.3.27 DBNotification ..............................................................................  215\n2.3.28 Deactivate .................................................................................... 217\n2.3.29 DeleteAllItems .............................................................................. 218\n2.3.30 DeleteItem .................................................................................... 218\n2.3.30.1 Syntax 1: For ListView controls ......................................... 219\n2.3.30.2 Syntax 2: For TreeView controls .......................................  219\n2.3.31 Destructor ....................................................................................  220\n2.3.32 DisconnectMobiLink ..................................................................... 221\n2.3.33 DisplayMessage ........................................................................... 221\n2.3.34 DoubleClicked .............................................................................. 222\n2.3.34.1 Syntax 1: For ListBox, PictureListBox, ListView, and Tab\ncontrols ............................................................................................. 222\n2.3.34.2 Syntax 2: For TreeView controls .......................................  224\n2.3.34.3 Syntax 3: For windows ...................................................... 224\n2.3.34.4 Syntax 4: For other controls .............................................. 226\n2.3.35 DownloadingStart ......................................................................... 226\n2.3.36 DownloadingStateChanged .........................................................  227\n2.3.37 DragDrop .....................................................................................  228\n2.3.37.1 Syntax 1: For ListBox, PictureListBox, ListView, and Tab\ncontrols ............................................................................................. 229\n2.3.37.2 Syntax 2: For TreeView controls .......................................  230\n2.3.37.3 Syntax 3: For windows and other controls ........................  231\n2.3.38 DragEnter ..................................................................................... 233\n2.3.39 DragLeave ...................................................................................  234\n"}
{"page": 6, "text": "2.3.40 DragWithin ...................................................................................  235\n2.3.40.1 Syntax 1: For ListBox, PictureListBox, ListView, and Tab\ncontrols ............................................................................................. 236\n2.3.40.2 Syntax 2: For TreeView controls .......................................  237\n2.3.40.3 Syntax 3: For windows and other controls ........................  238\n2.3.41 DropDown .................................................................................... 239\n2.3.42 EndDownload ............................................................................... 239\n2.3.43 EndLabelEdit ................................................................................ 240\n2.3.43.1 Syntax 1: For ListView controls ......................................... 240\n2.3.43.2 Syntax 2: For TreeView controls .......................................  241\n2.3.44 EndLogScan ................................................................................  242\n2.3.45 EndSync ....................................................................................... 243\n2.3.46 EndUpload ...................................................................................  243\n2.3.47 Error ............................................................................................. 244\n2.3.47.1 Syntax 1: for Connection, DataWindow, DataStore, OLE,\nOLEObject, OLETxnObject .............................................................. 244\n2.3.47.2 Syntax 2: for CompressorObject objects ........................... 247\n2.3.47.3 Syntax 3: for ExtractorObject objects ................................  248\n2.3.48 ErrorMessage ..............................................................................  249\n2.3.49 EvaluateJavascriptFinished .........................................................  250\n2.3.50 ExternalException ........................................................................  251\n2.3.51 FileExists ...................................................................................... 253\n2.3.52 FileMessage ................................................................................. 254\n2.3.53 Finished .......................................................................................  255\n2.3.54 Gesture ........................................................................................  255\n2.3.55 GetFocus .....................................................................................  257\n2.3.56 Help .............................................................................................. 259\n2.3.57 Hide .............................................................................................. 260\n2.3.58 HotLinkAlarm ...............................................................................  260\n2.3.59 Idle ...............................................................................................  261\n2.3.60 InputFieldSelected .......................................................................  261\n2.3.61 InsertItem ..................................................................................... 262\n2.3.62 ItemActivate .................................................................................  263\n2.3.63 ItemChanged ...............................................................................  264\n2.3.64 ItemChanging ............................................................................... 265\n2.3.65 ItemCollapsed ..............................................................................  266\n2.3.66 ItemCollapsing .............................................................................  267\n2.3.67 ItemExpanded .............................................................................. 268\n2.3.68 ItemExpanding .............................................................................  269\n2.3.69 ItemPopulate ................................................................................ 270\n2.3.70 ItemUnselected ............................................................................  271\n2.3.71 Key ............................................................................................... 271\n2.3.72 LineDown ..................................................................................... 273\n2.3.73 LineLeft ........................................................................................  274\n2.3.74 LineRight ...................................................................................... 275\n2.3.75 LineUp .......................................................................................... 276\n2.3.76 LoseFocus ...................................................................................  277\n2.3.77 Modified .......................................................................................  279\n"}
{"page": 7, "text": "2.3.77.1 Syntax 1: For Ribbon controls ........................................... 279\n2.3.77.2 Syntax 2: For all other controls .........................................  280\n2.3.78 MouseDown .................................................................................  281\n2.3.78.1 Syntax 1: For RichTextEdit controls ..................................  281\n2.3.78.2 Syntax 2: For windows ...................................................... 282\n2.3.79 MouseMove .................................................................................  283\n2.3.79.1 Syntax 1: For RichTextEdit controls ..................................  284\n2.3.79.2 Syntax 2: For windows ...................................................... 284\n2.3.80 MouseUp ...................................................................................... 287\n2.3.80.1 Syntax 1: For RichTextEdit controls ..................................  287\n2.3.80.2 Syntax 2: For windows ...................................................... 288\n2.3.81 Moved ..........................................................................................  289\n2.3.82 NavigationError ............................................................................  290\n2.3.83 NavigationProgressIndex ............................................................. 291\n2.3.84 NavigationStart ............................................................................  292\n2.3.85 NavigationStateChanged .............................................................  293\n2.3.86 Notify ............................................................................................ 294\n2.3.87 Open ............................................................................................  295\n2.3.87.1 Syntax 1: For the application object ..................................  295\n2.3.87.2 Syntax 2: For windows ...................................................... 296\n2.3.88 Other ............................................................................................ 298\n2.3.89 PageDown ...................................................................................  298\n2.3.90 PageLeft ....................................................................................... 300\n2.3.91 PageRight ....................................................................................  301\n2.3.92 PageUp ........................................................................................ 302\n2.3.93 PictureSelected ............................................................................ 303\n2.3.94 PipeEnd .......................................................................................  303\n2.3.95 PipeMeter ..................................................................................... 304\n2.3.96 PipeStart ......................................................................................  305\n2.3.97 PrintFooter (obsolete) .................................................................. 306\n2.3.98 PrintHeader (obsolete) ................................................................. 306\n2.3.99 PdfPrintFinished ........................................................................... 307\n2.3.100 ProcessingFile ...........................................................................  308\n2.3.101 ProgressIndex ............................................................................ 308\n2.3.102 PropertyChanged ....................................................................... 309\n2.3.103 PropertyRequestEdit .................................................................. 310\n2.3.104 RButtonDown ............................................................................. 311\n2.3.104.1 Syntax 1: For controls and windows, except\nRichTextEdit ..................................................................................... 311\n2.3.104.2 Syntax 2: For RichTextEdit controls ................................  312\n2.3.105 RButtonUp .................................................................................  313\n2.3.106 RecognitionResult ...................................................................... 314\n2.3.107 RemoteExec ..............................................................................  314\n2.3.108 RemoteHotLinkStart ................................................................... 315\n2.3.109 RemoteHotLinkStop ................................................................... 316\n2.3.110 RemoteRequest .........................................................................  316\n2.3.111 RemoteSend ..............................................................................  317\n2.3.112 Rename .....................................................................................  317\n"}
{"page": 8, "text": "2.3.113 Resize ........................................................................................ 318\n2.3.114 ResourceRedirect ......................................................................  319\n2.3.115 RightClicked ............................................................................... 320\n2.3.115.1 Syntax 1: For ListView and Tab controls ......................... 320\n2.3.115.2 Syntax 2: For TreeView controls .....................................  321\n2.3.116 RightDoubleClicked .................................................................... 322\n2.3.116.1 Syntax 1: For ListView and Tab controls ......................... 322\n2.3.116.2 Syntax 2: For TreeView controls .....................................  323\n2.3.117 Save ........................................................................................... 324\n2.3.118 SaveObject ................................................................................  325\n2.3.119 Selected ..................................................................................... 326\n2.3.119.1 Syntax 1: For Ribbon controls ......................................... 326\n2.3.119.2 Syntax 2: for all other controls ......................................... 329\n2.3.120 SelectionChanged ...................................................................... 330\n2.3.120.1 Syntax 1: For Listboxes ................................................... 330\n2.3.120.2 Syntax 2: For Tab controls .............................................. 331\n2.3.120.3 Syntax 3: For TreeView controls .....................................  332\n2.3.120.4 Syntax 4: For Ribbon controls ......................................... 333\n2.3.121 SelectionChanging ..................................................................... 334\n2.3.121.1 Syntax 1: For Tab controls .............................................. 334\n2.3.121.2 Syntax 2: For TreeView controls .....................................  335\n2.3.122 Show .......................................................................................... 336\n2.3.123 SizeCompleted ........................................................................... 337\n2.3.124 Sort ............................................................................................  338\n2.3.124.1 Syntax 1: For ListView controls ....................................... 338\n2.3.124.2 Syntax 2: For TreeView controls .....................................  339\n2.3.125 SQLPreview ...............................................................................  340\n2.3.126 Start ...........................................................................................  342\n2.3.126.1 Syntax 1: for Animation controls ...................................... 342\n2.3.126.2 Syntax 2: for CompressorObject and ExtractorObject\nobjects .............................................................................................. 342\n2.3.127 Stop ............................................................................................ 343\n2.3.128 Stroke ......................................................................................... 343\n2.3.129 SyncPreview ..............................................................................  344\n2.3.130 SystemError ...............................................................................  345\n2.3.131 SystemKey ................................................................................. 346\n2.3.132 Timer .......................................................................................... 347\n2.3.133 TitleTextChanged ....................................................................... 348\n2.3.134 ToolbarMoved ............................................................................  349\n2.3.135 UploadAck .................................................................................. 350\n2.3.136 UserString .................................................................................. 351\n2.3.137 ValueChanged ...........................................................................  352\n2.3.138 ViewChange ............................................................................... 353\n2.3.139 WaitForUploadAck .....................................................................  353\n2.3.140 WarningMessage .......................................................................  354\n2.4 PowerScript Functions ............................................................................. 355\n2.4.1 Abs ................................................................................................. 355\n2.4.2 ACos ..............................................................................................  356\n"}
{"page": 9, "text": "2.4.3 AccessToken .................................................................................  357\n2.4.4 Activate ..........................................................................................  358\n2.4.5 AddCategory .................................................................................. 359\n2.4.6 AddColumn ....................................................................................  360\n2.4.7 AddData ......................................................................................... 361\n2.4.7.1 Syntax 1: For all graph types except scatter .......................  362\n2.4.7.2 Syntax 2: For scatter graphs ............................................... 363\n2.4.8 AddItem .......................................................................................... 364\n2.4.8.1 Syntax 1: For ListBox and DropDownListBox controls ........  364\n2.4.8.2 Syntax 2: For PictureListBox, DropDownPictureListBox,\nand RibbonComboBoxItem controls ................................................ 365\n2.4.8.3 Syntax 3: For ListView controls ........................................... 367\n2.4.8.4 Syntax 4: For ListView controls ........................................... 368\n2.4.9 AddItemArray .................................................................................  369\n2.4.10 AddItemBlob ................................................................................  371\n2.4.11 AddItemBoolean ..........................................................................  373\n2.4.12 AddItemDate ................................................................................  375\n2.4.13 AddItemDateTime ........................................................................  376\n2.4.14 AddItemNull .................................................................................  380\n2.4.15 AddItemNumber ........................................................................... 382\n2.4.16 AddItemObject .............................................................................  385\n2.4.17 AddItemString ..............................................................................  387\n2.4.18 AddItemTime ................................................................................ 389\n2.4.19 AddLargePicture ..........................................................................  391\n2.4.20 AddMasterSeparatorItem ............................................................. 392\n2.4.21 AddPicture ...................................................................................  393\n2.4.22 AddSeparatorItem ........................................................................ 394\n2.4.23 AddSeries ....................................................................................  395\n2.4.24 AddSmallPicture ..........................................................................  397\n2.4.25 AddStatePicture ...........................................................................  398\n2.4.26 AddToLibraryList .......................................................................... 399\n2.4.27 AppendParam ..............................................................................  400\n2.4.28 ApplyTheme ................................................................................. 401\n2.4.29 Arrange ........................................................................................  403\n2.4.30 ArrangeSheets .............................................................................  403\n2.4.31 Asc ............................................................................................... 405\n2.4.32 AscA ............................................................................................. 405\n2.4.33 ASin .............................................................................................  407\n2.4.34 AsymmetricDecrypt ...................................................................... 408\n2.4.35 AsymmetricEncrypt ......................................................................  409\n2.4.36 AsymmetricGenerateKey .............................................................  411\n2.4.37 AsymmetricSign ...........................................................................  412\n2.4.38 AsymmetricVerifySign .................................................................. 413\n2.4.39 ATan ............................................................................................  415\n2.4.40 Base32Decode ............................................................................  416\n2.4.41 Base32Encode ............................................................................. 417\n2.4.42 Base64Decode ............................................................................  418\n2.4.43 Base64Encode ............................................................................. 419\n"}
{"page": 10, "text": "2.4.44 Base64UrlDecode ........................................................................ 420\n2.4.45 Base64UrlEncode ........................................................................  421\n2.4.46 Beep ............................................................................................. 422\n2.4.47 BeginSession ...............................................................................  423\n2.4.48 BeginTransaction (obsolete) ........................................................ 424\n2.4.49 Blob .............................................................................................. 426\n2.4.50 BlobEdit ........................................................................................ 428\n2.4.51 BlobMid ........................................................................................ 429\n2.4.52 BuildModel ...................................................................................  430\n2.4.53 Byte .............................................................................................. 433\n2.4.54 Cancel .......................................................................................... 434\n2.4.54.1 Syntax 1: for Pipeline objects ............................................ 434\n2.4.54.2 Syntax 2: for CompressorObject and ExtractorObject\nobjects .............................................................................................. 434\n2.4.55 CancelDownload .......................................................................... 435\n2.4.56 CancelSync .................................................................................. 436\n2.4.57 CanUndo ...................................................................................... 437\n2.4.58 CategoryCount ............................................................................. 438\n2.4.59 CategoryName ............................................................................. 438\n2.4.60 Ceiling .......................................................................................... 439\n2.4.61 ChangeDirectory ..........................................................................  440\n2.4.62 ChangeMenu ...............................................................................  441\n2.4.63 Char .............................................................................................  442\n2.4.64 CharA ........................................................................................... 442\n2.4.65 Check ........................................................................................... 443\n2.4.66 ChooseColor ................................................................................  444\n2.4.67 ClassList ......................................................................................  445\n2.4.68 ClassName ..................................................................................  446\n2.4.68.1 Syntax 1: For any object ...................................................  446\n2.4.68.2 Syntax 2: For variables .....................................................  448\n2.4.69 Clear ............................................................................................  448\n2.4.69.1 Syntax 1: For selected text ................................................ 448\n2.4.69.2 Syntax 2: For RichTextEdit controls ..................................  450\n2.4.69.3 Syntax 3: For JSONPackage objects ................................  451\n2.4.70 ClearAll ........................................................................................  452\n2.4.71 ClearBoldDates ............................................................................ 452\n2.4.72 ClearHeaders ............................................................................... 453\n2.4.72.1 Syntax 1: for TokenRequest objects .................................  453\n2.4.72.2 Syntax 2: for OAuthRequest objects .................................  454\n2.4.73 ClearParams ................................................................................  455\n2.4.74 ClearRecentItems ........................................................................  456\n2.4.75 ClearRequestHeaders .................................................................. 457\n2.4.76 Clipboard ...................................................................................... 458\n2.4.76.1 Syntax 1: For text .............................................................. 458\n2.4.76.2 Syntax 2: For bitmaps of graphs .......................................  459\n2.4.77 Close ............................................................................................ 460\n2.4.77.1 Syntax 1: For windows ...................................................... 460\n2.4.77.2 Syntax 2: For OLEStorage objects .................................... 462\n"}
{"page": 11, "text": "2.4.77.3 Syntax 3: For OLEStream objects ..................................... 462\n2.4.77.4 Syntax 4: For trace files ....................................................  463\n2.4.78 CloseChannel ..............................................................................  464\n2.4.79 CloseTab ...................................................................................... 465\n2.4.80 CloseUserObject .......................................................................... 466\n2.4.81 CloseWithReturn .......................................................................... 467\n2.4.82 CollapseItem ................................................................................  470\n2.4.83 CommandParm ............................................................................ 471\n2.4.84 CommitDocking ............................................................................ 472\n2.4.85 CommitTransaction (obsolete) ..................................................... 473\n2.4.86 Compress ..................................................................................... 474\n2.4.87 ConnectToNewObject .................................................................. 477\n2.4.88 ConnectToNewRemoteObject .....................................................  479\n2.4.89 ConnectToObject .........................................................................  480\n2.4.90 ConnectToRemoteObject ............................................................. 483\n2.4.91 ConnectToServer (obsolete) ........................................................ 485\n2.4.92 ContainsKey ................................................................................. 487\n2.4.93 ContainsPath ...............................................................................  490\n2.4.94 Copy ............................................................................................. 491\n2.4.95 CopyRTF ...................................................................................... 493\n2.4.96 Cos ............................................................................................... 494\n2.4.97 Cpu ..............................................................................................  495\n2.4.98 CreateDirectory ............................................................................ 495\n2.4.99 CreateInstance ............................................................................. 496\n2.4.99.1 Syntax 1: for TransactionServer objects ............................ 496\n2.4.99.2 Syntax 2: for DotNetAssembly objects ..............................  498\n2.4.100 CreateJsonArray ........................................................................  500\n2.4.101 CreateJsonObject ......................................................................  500\n2.4.102 CreatePage ................................................................................ 501\n2.4.103 Cut .............................................................................................  502\n2.4.104 DataCount .................................................................................. 503\n2.4.105 DataSource ................................................................................  504\n2.4.106 Date ...........................................................................................  506\n2.4.106.1 Syntax 1: For DateTime data and blobs .......................... 506\n2.4.106.2 Syntax 2: For strings .......................................................  507\n2.4.106.3 Syntax 3: For combining numbers into a date .................  509\n2.4.107 DateTime ...................................................................................  509\n2.4.107.1 Syntax 1: For creating DateTime values .........................  510\n2.4.107.2 Syntax 2: For extracting DateTime values from blobs .....  511\n2.4.107.3 Syntax 3: For extracting DateTime values from strings ...  511\n2.4.108 Day ............................................................................................. 512\n2.4.109 DayName ................................................................................... 513\n2.4.110 DayNumber ................................................................................ 514\n2.4.111 DaysAfter ...................................................................................  515\n2.4.112 DBHandle ................................................................................... 516\n2.4.113 DebugBreak ...............................................................................  517\n2.4.114 Dec ............................................................................................. 517\n2.4.115 DeleteCategory ..........................................................................  518\n"}
{"page": 12, "text": "2.4.115.1 Syntax 1: for Graph controls ...........................................  518\n2.4.115.2 Syntax 2: for RibbonBar controls ..................................... 519\n2.4.116 DeleteCheckBox ........................................................................  520\n2.4.117 DeleteColumn ............................................................................  521\n2.4.118 DeleteColumns ..........................................................................  522\n2.4.119 DeleteComboBox ....................................................................... 522\n2.4.120 DeleteData ................................................................................. 523\n2.4.121 DeleteGroup ............................................................................... 524\n2.4.122 DeleteItem .................................................................................. 525\n2.4.122.1 Syntax 1: For ListBox, DropDownListBox, and\nRibbonComboBoxItem controls .......................................................  526\n2.4.122.2 Syntax 2: For ListView controls ....................................... 527\n2.4.122.3 Syntax 3: For TreeView controls .....................................  528\n2.4.122.4 Syntax 4: For RibbonMenu controls ................................  529\n2.4.122.5 Syntax 5: For RibbonBar controls ...................................  530\n2.4.123 DeleteItems ................................................................................ 531\n2.4.124 DeleteLargeButton .....................................................................  531\n2.4.125 DeleteLargePicture ....................................................................  532\n2.4.126 DeleteLargePictures ................................................................... 533\n2.4.127 DeleteMasterItem ....................................................................... 534\n2.4.128 DeletePanel ...............................................................................  535\n2.4.129 DeletePicture .............................................................................  536\n2.4.130 DeletePictures ............................................................................ 537\n2.4.131 DeleteRecentItem ......................................................................  538\n2.4.132 DeleteSeries ..............................................................................  539\n2.4.133 DeleteSmallButton .....................................................................  540\n2.4.134 DeleteSmallPicture ..................................................................... 541\n2.4.135 DeleteSmallPictures ................................................................... 541\n2.4.136 DeleteStatePicture .....................................................................  542\n2.4.137 DeleteStatePictures ...................................................................  543\n2.4.138 DeleteTabButton ........................................................................  543\n2.4.139 DestroyModel ............................................................................. 544\n2.4.140 DirectoryExists ...........................................................................  545\n2.4.141 DirList ......................................................................................... 546\n2.4.142 DirSelect ....................................................................................  548\n2.4.143 Disable ....................................................................................... 549\n2.4.144 DisableCommit ........................................................................... 550\n2.4.145 DisconnectObject ....................................................................... 551\n2.4.146 DisconnectServer ....................................................................... 552\n2.4.147 Double ........................................................................................ 553\n2.4.148 DoVerb ....................................................................................... 554\n2.4.149 Drag ...........................................................................................  555\n2.4.150 DraggedObject (obsolete) .......................................................... 556\n2.4.151 Draw ........................................................................................... 557\n2.4.152 EditLabel .................................................................................... 559\n2.4.152.1 Syntax 1: For editing a label in a ListView ....................... 559\n2.4.152.2 Syntax 2: For editing a label in a TreeView ..................... 560\n2.4.153 Enable ........................................................................................ 560\n"}
{"page": 13, "text": "2.4.154 EnableCommit ...........................................................................  561\n2.4.155 EntryList ..................................................................................... 562\n2.4.156 EvaluateJavascriptAsync ...........................................................  564\n2.4.157 EvaluateJavascriptSync ............................................................. 565\n2.4.158 ExecRemote ..............................................................................  567\n2.4.158.1 Syntax 1: For sending single commands ......................... 567\n2.4.158.2 Syntax 2: For commands over an opened channel .........  568\n2.4.159 Exp ............................................................................................. 570\n2.4.160 ExpandAll ................................................................................... 570\n2.4.161 ExpandItem ................................................................................ 571\n2.4.162 ExportJSON ...............................................................................  572\n2.4.163 ExportXML .................................................................................  573\n2.4.164 ExportToJSONFile .....................................................................  574\n2.4.165 ExportToXMLFile .......................................................................  575\n2.4.166 Extract ........................................................................................ 576\n2.4.167 Fact ............................................................................................ 579\n2.4.168 FileClose .................................................................................... 579\n2.4.169 FileCopy ..................................................................................... 580\n2.4.170 FileDelete ................................................................................... 581\n2.4.171 FileEncoding ..............................................................................  582\n2.4.172 FileExists .................................................................................... 583\n2.4.173 FileLength ..................................................................................  584\n2.4.174 FileLength64 ..............................................................................  585\n2.4.175 FileMove ....................................................................................  586\n2.4.176 FileOpen ....................................................................................  587\n2.4.177 FileRead ..................................................................................... 591\n2.4.178 FileReadEx ................................................................................  592\n2.4.179 FileSeek ..................................................................................... 594\n2.4.180 FileSeek64 ................................................................................. 596\n2.4.181 FileWrite ..................................................................................... 597\n2.4.182 FileWriteEx ................................................................................. 599\n2.4.183 Fill ..............................................................................................  600\n2.4.184 FillA ............................................................................................ 601\n2.4.185 FillW (obsolete) .......................................................................... 602\n2.4.186 Find ............................................................................................ 602\n2.4.187 FindCategory .............................................................................  604\n2.4.188 FindClassDefinition ....................................................................  605\n2.4.189 FindFunctionDefinition ...............................................................  606\n2.4.190 FindItem ..................................................................................... 607\n2.4.190.1 Syntax 1: For ListBox, DropDownListBox, and\nRibbonComboBoxItem controls .......................................................  607\n2.4.190.2 Syntax 2: For ListView controls ....................................... 608\n2.4.190.3 Syntax 3: For ListView controls ....................................... 610\n2.4.190.4 Syntax 4: For TreeView controls .....................................  611\n2.4.191 FindMatchingFunction ................................................................ 613\n2.4.192 FindNext ..................................................................................... 615\n2.4.193 FindSeries .................................................................................. 616\n2.4.194 FindTypeDefinition .....................................................................  617\n"}
{"page": 14, "text": "2.4.195 FromAnsi .................................................................................... 619\n2.4.196 FromUnicode .............................................................................  619\n2.4.197 GarbageCollect ..........................................................................  620\n2.4.198 GarbageCollectGetTimeLimit ..................................................... 621\n2.4.199 GarbageCollectSetTimeLimit .....................................................  621\n2.4.200 GetAccessToken ........................................................................ 622\n2.4.201 GetActiveCategory ..................................................................... 623\n2.4.202 GetActiveSheet ..........................................................................  624\n2.4.203 GetAlignment .............................................................................  625\n2.4.204 GetApplication ............................................................................ 626\n2.4.205 GetApplicationButton .................................................................  626\n2.4.206 GetArgElement ..........................................................................  627\n2.4.207 GetAutomationNativePointer ...................................................... 628\n2.4.208 GetBestHeight ............................................................................ 629\n2.4.209 GetBody ..................................................................................... 630\n2.4.209.1 Syntax 1: for TokenResponse objects ............................. 630\n2.4.209.2 Syntax 2: for OAuthRequest objects ...............................  631\n2.4.209.3 Syntax 3: for ResourceResponse objects ........................ 632\n2.4.210 GetBoxPictureList ......................................................................  633\n2.4.211 GetByte ...................................................................................... 634\n2.4.212 GetByteArray .............................................................................  635\n2.4.213 GetCategory ............................................................................... 636\n2.4.214 GetCategoryByIndex .................................................................. 637\n2.4.215 GetCategoryCount .....................................................................  638\n2.4.216 GetCategoryIndex ...................................................................... 639\n2.4.217 GetCertificateLabel (obsolete) ...................................................  640\n2.4.218 GetCheckBox ............................................................................. 642\n2.4.219 GetChildCount ...........................................................................  643\n2.4.220 GetChildItem ..............................................................................  645\n2.4.221 GetChildItemByIndex .................................................................  647\n2.4.222 GetChildItemCount ..................................................................... 648\n2.4.223 GetChildKey ............................................................................... 649\n2.4.224 GetChildrenList ..........................................................................  650\n2.4.225 GetColumn ................................................................................. 652\n2.4.226 GetComboBox ...........................................................................  653\n2.4.227 GetCommandDDE .....................................................................  654\n2.4.228 GetCommandDDEOrigin ............................................................ 655\n2.4.229 GetCommandString ...................................................................  656\n2.4.230 GetCompanyName ....................................................................  657\n2.4.231 GetContextKeywords .................................................................  658\n2.4.232 GetContextService ..................................................................... 659\n2.4.233 GetCredentialAttribute (obsolete) ..............................................  661\n2.4.234 GetCurrentDirectory ................................................................... 663\n2.4.235 GetData ...................................................................................... 663\n2.4.235.1 Syntax 1: For data points in graphs ................................  664\n2.4.235.2 Syntax 2: For EditMask controls ...................................... 665\n2.4.235.3 Syntax 3: For data in an OLE server ............................... 666\n2.4.236 GetDataDDE ..............................................................................  668\n"}
{"page": 15, "text": "2.4.237 GetDataDDEOrigin ..................................................................... 669\n2.4.238 GetDataLabelling .......................................................................  670\n2.4.239 GetDataPieExplode .................................................................... 671\n2.4.240 GetDataStyle .............................................................................. 672\n2.4.240.1 Syntax 1: For the colors of a data point ..........................  673\n2.4.240.2 Syntax 2: For the line style and width used by a data\npoint .................................................................................................  674\n2.4.240.3 Syntax 3: For the fill pattern or symbol of a data point ..... 676\n2.4.241 GetDataTransparency ................................................................ 677\n2.4.242 GetDataValue ............................................................................  679\n2.4.243 GetDateLimits ............................................................................  680\n2.4.244 GetDbmlsyncPath ......................................................................  682\n2.4.245 GetDisplayRange ....................................................................... 682\n2.4.246 GetDotNetCoreVersion ..............................................................  684\n2.4.247 GetDynamicDate ........................................................................ 685\n2.4.248 GetDynamicDateTime ................................................................ 687\n2.4.249 GetDynamicDecimal ..................................................................  688\n2.4.250 GetDynamicNumber ................................................................... 689\n2.4.251 GetDynamicString ...................................................................... 690\n2.4.252 GetDynamicTime .......................................................................  691\n2.4.253 GetEnvironment .........................................................................  692\n2.4.254 GetExpiresIn ..............................................................................  693\n2.4.255 GetFileOpenName .....................................................................  694\n2.4.256 GetFileSaveName ...................................................................... 698\n2.4.257 GetFilesCount ............................................................................  700\n2.4.258 GetFilesList ................................................................................  701\n2.4.259 GetFirstSheet ............................................................................. 702\n2.4.260 GetFixesVersion ........................................................................  703\n2.4.261 GetFocus ...................................................................................  704\n2.4.262 GetFolder ................................................................................... 705\n2.4.263 GetGroup ...................................................................................  706\n2.4.264 GetGlobalProperty (obsolete) ....................................................  707\n2.4.265 GetHeader .................................................................................  709\n2.4.265.1 Syntax 1: for TokenRequest objects ................................ 709\n2.4.265.2 Syntax 2: for TokenResponse objects ............................. 709\n2.4.265.3 Syntax 3: for OAuthRequest objects ...............................  710\n2.4.265.4 Syntax 4: for ResourceResponse objects ........................ 711\n2.4.266 GetHeaders ................................................................................ 712\n2.4.266.1 Syntax 1: for TokenRequest objects ................................ 712\n2.4.266.2 Syntax 2: for TokenResponse objects ............................. 713\n2.4.266.3 Syntax 3: for OAuthRequest objects ...............................  714\n2.4.266.4 Syntax 4: for ResourceResponse objects ........................ 715\n2.4.267 GetHostObject ...........................................................................  716\n2.4.268 GetHttpResponseHeaders ......................................................... 717\n2.4.269 GetHttpResponseStatusCode .................................................... 717\n2.4.270 GetHttpResponseStatusText .....................................................  718\n2.4.271 GetInstalledRuntimes ................................................................. 719\n2.4.272 GetItem ......................................................................................  719\n"}
{"page": 16, "text": "2.4.272.1 Syntax 1: For ListView controls ....................................... 720\n2.4.272.2 Syntax 2: For ListView controls ....................................... 721\n2.4.272.3 Syntax 3: For TreeView controls .....................................  722\n2.4.272.4 Syntax 4: For RibbonMenu controls ................................  723\n2.4.272.5 Syntax 5: For RibbonBar controls ...................................  724\n2.4.273 GetItemArray .............................................................................. 725\n2.4.273.1 Syntax 1 ........................................................................... 725\n2.4.273.2 Syntax 2 ........................................................................... 728\n2.4.274 GetItemArrayJSONString ........................................................... 729\n2.4.274.1 Syntax 1 ........................................................................... 729\n2.4.274.2 Syntax 2 ........................................................................... 730\n2.4.274.3 Syntax 3 ........................................................................... 732\n2.4.275 GetItemAtPointer .......................................................................  733\n2.4.276 GetItemBlob ...............................................................................  734\n2.4.276.1 Syntax 1 ........................................................................... 734\n2.4.276.2 Syntax 2 ........................................................................... 735\n2.4.276.3 Syntax 3 ........................................................................... 736\n2.4.277 GetItemBoolean .........................................................................  738\n2.4.277.1 Syntax 1 ........................................................................... 738\n2.4.277.2 Syntax 2 ........................................................................... 739\n2.4.277.3 Syntax 3 ........................................................................... 740\n2.4.278 GetItemByTag ............................................................................ 742\n2.4.279 GetItemByPath ........................................................................... 743\n2.4.280 GetItemCount ............................................................................. 745\n2.4.281 GetItemDate ............................................................................... 747\n2.4.281.1 Syntax 1 ........................................................................... 747\n2.4.281.2 Syntax 2 ........................................................................... 748\n2.4.281.3 Syntax 3 ........................................................................... 749\n2.4.282 GetItemDateTime ....................................................................... 751\n2.4.282.1 Syntax 1 ........................................................................... 751\n2.4.282.2 Syntax 2 ........................................................................... 752\n2.4.282.3 Syntax 3 ........................................................................... 753\n2.4.283 GetItemNumber .........................................................................  755\n2.4.283.1 Syntax 1 ........................................................................... 755\n2.4.283.2 Syntax 2 ........................................................................... 756\n2.4.283.3 Syntax 3 ........................................................................... 757\n2.4.284 GetItemObject ............................................................................ 759\n2.4.284.1 Syntax 1 ........................................................................... 759\n2.4.284.2 Syntax 2 ........................................................................... 760\n2.4.285 GetItemObjectJSONString ......................................................... 762\n2.4.285.1 Syntax 1 ........................................................................... 762\n2.4.285.2 Syntax 2 ........................................................................... 763\n2.4.285.3 Syntax 3 ........................................................................... 764\n2.4.286 GetItemParent ............................................................................ 766\n2.4.287 GetItemString ............................................................................. 767\n2.4.287.1 Syntax 1 ........................................................................... 767\n2.4.287.2 Syntax 2 ........................................................................... 768\n2.4.287.3 Syntax 3 ........................................................................... 770\n"}
{"page": 17, "text": "2.4.288 GetItemTime ..............................................................................  771\n2.4.288.1 Syntax 1 ........................................................................... 771\n2.4.288.2 Syntax 2 ........................................................................... 772\n2.4.288.3 Syntax 3 ........................................................................... 773\n2.4.289 GetItemType ..............................................................................  775\n2.4.290 GetJsonBlob ..............................................................................  780\n2.4.291 GetJsonString ............................................................................  781\n2.4.292 GetJWTToken ............................................................................ 783\n2.4.293 GetKey ....................................................................................... 785\n2.4.294 GetLargeButton .......................................................................... 786\n2.4.295 GetLastReturn ............................................................................ 787\n2.4.296 GetLibraryList ............................................................................. 788\n2.4.297 GetMajorVersion ........................................................................  788\n2.4.298 GetMasterItem ...........................................................................  790\n2.4.299 GetMasterItemCount .................................................................. 791\n2.4.300 GetMenu ....................................................................................  793\n2.4.301 GetMenuByButtonHandle ..........................................................  794\n2.4.302 GetMessage ............................................................................... 795\n2.4.303 GetMinorVersion ........................................................................  796\n2.4.304 GetName .................................................................................... 797\n2.4.305 GetNativePointer ........................................................................ 798\n2.4.306 GetNextSheet ............................................................................  800\n2.4.307 GetNumberType ........................................................................  801\n2.4.308 GetOAuthToken .........................................................................  804\n2.4.309 GetObjectRevisionFromRegistry ................................................ 806\n2.4.310 GetOrigin .................................................................................... 807\n2.4.311 GetPanel .................................................................................... 808\n2.4.312 GetParagraphSetting .................................................................  809\n2.4.313 GetParent ................................................................................... 810\n2.4.314 GetPathByItem ........................................................................... 811\n2.4.315 GetPin (obsolete) ....................................................................... 812\n2.4.316 GetRecentItem ........................................................................... 814\n2.4.317 GetRecentItemCount .................................................................  815\n2.4.318 GetRecentTitle ...........................................................................  816\n2.4.319 GetRecordSet ............................................................................  818\n2.4.320 GetRefreshToken ....................................................................... 819\n2.4.321 GetRemote ................................................................................. 820\n2.4.321.1 Syntax 1: For single DDE requests .................................  820\n2.4.321.2 Syntax 2: For DDE requests via an open channel ........... 821\n2.4.322 GetRequestHeader ....................................................................  823\n2.4.323 GetRequestHeaders ..................................................................  824\n2.4.324 GetResponseBody ..................................................................... 825\n2.4.325 GetResponseHeader .................................................................  826\n2.4.326 GetResponseHeaders ................................................................ 827\n2.4.327 GetResponseStatusCode ..........................................................  828\n2.4.328 GetResponseStatusText ............................................................ 829\n2.4.329 GetRootItem ............................................................................... 830\n2.4.330 GetSelectedDate ........................................................................ 831\n"}
{"page": 18, "text": "2.4.331 GetSelectedRange ..................................................................... 832\n2.4.332 GetSeriesLabelling ..................................................................... 833\n2.4.333 GetSeriesStyle ...........................................................................  834\n2.4.333.1 Syntax 1: For the colors of a series ................................  835\n2.4.333.2 Syntax 2: For the line style and width used by a series ...  836\n2.4.333.3 Syntax 3: For the fill pattern or symbol of a series ........... 838\n2.4.333.4 Syntax 4: For determining whether a series is an\noverlay .............................................................................................. 839\n2.4.334 GetSeriesTransparency .............................................................  840\n2.4.335 GetSessionID ............................................................................. 841\n2.4.336 GetShortName ...........................................................................  842\n2.4.337 GetSmallButton .......................................................................... 843\n2.4.338 GetSource .................................................................................. 844\n2.4.339 GetSpacing ................................................................................  845\n2.4.340 GetStatusCode ..........................................................................  846\n2.4.340.1 Syntax 1: for TokenResponse objects ............................. 846\n2.4.340.2 Syntax 2: for ResourceResponse objects ........................ 847\n2.4.341 GetStatusText ............................................................................  848\n2.4.341.1 Syntax 1: for TokenResponse objects ............................. 848\n2.4.341.2 Syntax 2: for ResourceResponse objects ........................ 849\n2.4.342 GetStatus (obsolete) .................................................................. 849\n2.4.343 GetSyncRegistryProperties ........................................................ 851\n2.4.344 GetTabButton ............................................................................. 852\n2.4.345 GetTabButtonByIndex ................................................................ 853\n2.4.346 GetTabButtonCount ...................................................................  855\n2.4.347 GetText ......................................................................................  855\n2.4.348 GetTextColor .............................................................................. 856\n2.4.349 GetTextStyle ..............................................................................  857\n2.4.350 GetTheme .................................................................................. 858\n2.4.351 GetToday ...................................................................................  859\n2.4.352 GetTokenError ...........................................................................  859\n2.4.353 GetTokenType ...........................................................................  861\n2.4.354 GetToolbar ................................................................................. 861\n2.4.355 GetToolbarPos ........................................................................... 863\n2.4.355.1 Syntax 1: For docked toolbars ........................................  863\n2.4.355.2 Syntax 2: For floating toolbars ........................................  865\n2.4.356 GetTransactionName (obsolete) ................................................ 866\n2.4.357 GetURL ...................................................................................... 867\n2.4.358 GetValue .................................................................................... 868\n2.4.358.1 Syntax 1: for DatePicker control ...................................... 869\n2.4.358.2 Syntax 2: for JSONPackage object .................................  870\n2.4.359 GetValueBlob ............................................................................. 871\n2.4.360 GetValueBoolean ....................................................................... 872\n2.4.361 GetValueDate ............................................................................  873\n2.4.362 GetValueDateTime ..................................................................... 874\n2.4.363 GetValueNumber .......................................................................  875\n2.4.364 GetValueString ........................................................................... 876\n2.4.365 GetValueTime ............................................................................  878\n"}
{"page": 19, "text": "2.4.366 GetValueToDataWindow ............................................................ 879\n2.4.367 GetVersionName .......................................................................  883\n2.4.368 GoBack ......................................................................................  884\n2.4.369 GoForward .................................................................................  885\n2.4.370 Handle ........................................................................................ 886\n2.4.371 HexDecode ................................................................................  888\n2.4.372 HexEncode ................................................................................  889\n2.4.373 Hide ............................................................................................ 890\n2.4.374 HMAC ........................................................................................  891\n2.4.375 Hour ...........................................................................................  892\n2.4.376 HyperLinkToURL .......................................................................  893\n2.4.377 Idle .............................................................................................  894\n2.4.378 ImpersonateClient ...................................................................... 895\n2.4.379 ImportClipboard .........................................................................  897\n2.4.380 ImportFile ................................................................................... 899\n2.4.380.1 Syntax 1: for Graph controls ...........................................  899\n2.4.380.2 Syntax 2: for JSONGenerator objects .............................  902\n2.4.381 ImportString ...............................................................................  905\n2.4.381.1 Syntax 1: for Graph controls ...........................................  905\n2.4.381.2 Syntax 2: for JSONGenerator objects .............................  907\n2.4.382 ImportJSON ...............................................................................  909\n2.4.383 ImportXML .................................................................................  910\n2.4.384 ImportFromJSONFile .................................................................  911\n2.4.385 ImportFromXMLFile ...................................................................  912\n2.4.386 IncomingCallList ......................................................................... 913\n2.4.387 Init (obsolete) ............................................................................. 915\n2.4.388 InputFieldChangeData ...............................................................  917\n2.4.389 InputFieldCurrentName .............................................................. 918\n2.4.390 InputFieldDeleteCurrent ............................................................. 919\n2.4.391 InputFieldGetData ...................................................................... 920\n2.4.392 InputFieldInsert ..........................................................................  921\n2.4.393 InputFieldLocate ........................................................................  922\n2.4.394 InsertCategory ...........................................................................  923\n2.4.394.1 Syntax 1: for Graph controls ...........................................  923\n2.4.394.2 Syntax 2: for RibbonBar controls ..................................... 925\n2.4.395 InsertCategoryFirst ..................................................................... 926\n2.4.396 InsertCategoryLast ..................................................................... 927\n2.4.397 InsertCheckBox .......................................................................... 929\n2.4.398 InsertCheckBoxFirst ................................................................... 931\n2.4.399 InsertCheckBoxLast ................................................................... 932\n2.4.400 InsertClass .................................................................................  934\n2.4.401 InsertColumn .............................................................................. 934\n2.4.402 InsertComboBox ........................................................................  935\n2.4.403 InsertComboBoxFirst .................................................................  938\n2.4.404 InsertComboBoxLast .................................................................. 939\n2.4.405 InsertData ..................................................................................  941\n2.4.406 InsertDocument .......................................................................... 943\n2.4.407 InsertFile ....................................................................................  945\n"}
{"page": 20, "text": "2.4.408 InsertGroup ................................................................................  946\n2.4.409 InsertGroupFirst .........................................................................  947\n2.4.410 InsertGroupLast .........................................................................  948\n2.4.411 InsertItem ................................................................................... 949\n2.4.411.1 Syntax 1: For ListBox and DropDownListBox controls ..... 950\n2.4.411.2 Syntax 2: For PictureListBox, DropDownPictureListBox,\nRibbonComboBoxItem controls .......................................................  951\n2.4.411.3 Syntax 3: For ListView controls ....................................... 952\n2.4.411.4 Syntax 4: For ListView controls ....................................... 953\n2.4.411.5 Syntax 5: For TreeView controls .....................................  954\n2.4.411.6 Syntax 6: For TreeView controls .....................................  955\n2.4.411.7 Syntax 7: For RibbonMenu controls ................................  956\n2.4.412 InsertItemFirst ............................................................................  958\n2.4.412.1 Syntax 1: For TreeView controls .....................................  958\n2.4.412.2 Syntax 2: For TreeView controls .....................................  959\n2.4.412.3 Syntax 3: For RibbonMenu controls ................................  960\n2.4.413 InsertItemLast ............................................................................  962\n2.4.413.1 Syntax 1: For TreeView controls .....................................  962\n2.4.413.2 Syntax 2: For TreeView controls .....................................  963\n2.4.413.3 Syntax 3: For RibbonMenu controls ................................  964\n2.4.414 InsertItemSort ............................................................................  966\n2.4.414.1 Syntax 1: For TreeView controls .....................................  967\n2.4.414.2 Syntax 2: For TreeView controls .....................................  968\n2.4.415 InsertLargeButton ......................................................................  969\n2.4.416 InsertLargeButtonFirst ................................................................ 971\n2.4.417 InsertLargeButtonLast ................................................................ 972\n2.4.418 InsertMasterItem ........................................................................  974\n2.4.419 InsertMasterItemFirst .................................................................  976\n2.4.420 InsertMasterItemLast .................................................................  978\n2.4.421 InsertObject ................................................................................ 981\n2.4.422 InsertPanel ................................................................................. 981\n2.4.423 InsertPanelFirst .......................................................................... 983\n2.4.424 InsertPanelLast ..........................................................................  984\n2.4.425 InsertPicture ............................................................................... 985\n2.4.426 InsertRecentItem ........................................................................ 987\n2.4.427 InsertRecentItemFirst ................................................................. 988\n2.4.428 InsertRecentItemLast ................................................................. 990\n2.4.429 InsertSeries ................................................................................ 991\n2.4.430 InsertSmallButton ....................................................................... 992\n2.4.431 InsertSmallButtonFirst ................................................................ 995\n2.4.432 InsertSmallButtonLast ................................................................ 996\n2.4.433 InsertTabButton .........................................................................  998\n2.4.434 InsertTabButtonFirst ................................................................. 1000\n2.4.435 InsertTabButtonLast ................................................................. 1001\n2.4.436 Int ............................................................................................. 1003\n2.4.437 Integer ...................................................................................... 1003\n2.4.438 InternetData .............................................................................  1005\n2.4.439 IntHigh ...................................................................................... 1006\n"}
{"page": 21, "text": "2.4.440 IntLow ......................................................................................  1006\n2.4.441 InvokePBFunction .................................................................... 1007\n2.4.442 _Is_A (obsolete) ....................................................................... 1009\n2.4.443 IsAlive ......................................................................................  1010\n2.4.444 IsAllArabic ................................................................................  1011\n2.4.445 IsAllHebrew .............................................................................. 1012\n2.4.446 IsAnyArabic .............................................................................. 1012\n2.4.447 IsAnyHebrew ............................................................................ 1013\n2.4.448 IsArabic .................................................................................... 1014\n2.4.449 IsArabicAndNumbers ...............................................................  1015\n2.4.450 IsCallerInRole ..........................................................................  1015\n2.4.451 IsDate ....................................................................................... 1017\n2.4.452 IsHebrew .................................................................................. 1018\n2.4.453 IsHebrewAndNumbers ............................................................. 1019\n2.4.454 IsImpersonating .......................................................................  1020\n2.4.455 IsInTransaction (obsolete) .......................................................  1021\n2.4.456 IsMinimized ..............................................................................  1022\n2.4.457 IsNull ........................................................................................ 1022\n2.4.458 IsNumber .................................................................................  1024\n2.4.459 IsPBApp ................................................................................... 1025\n2.4.460 IsPowerClientApp ..................................................................... 1025\n2.4.461 IsPowerServerApp ...................................................................  1026\n2.4.462 IsPreview .................................................................................  1026\n2.4.463 IsSecurityEnabled ....................................................................  1027\n2.4.464 IsTime ......................................................................................  1028\n2.4.465 IsTransactionAborted (obsolete) .............................................. 1029\n2.4.466 IsValid ......................................................................................  1030\n2.4.467 KeyCount .................................................................................  1031\n2.4.468 KeyDown .................................................................................. 1032\n2.4.469 LastPos .................................................................................... 1035\n2.4.470 Left ........................................................................................... 1037\n2.4.471 LeftA ......................................................................................... 1037\n2.4.472 LeftW (obsolete) ......................................................................  1038\n2.4.473 LeftTrim .................................................................................... 1038\n2.4.474 LeftTrimW (obsolete) ...............................................................  1040\n2.4.475 Len ........................................................................................... 1040\n2.4.476 LenA ......................................................................................... 1041\n2.4.477 LenW (obsolete) ......................................................................  1042\n2.4.478 Length ...................................................................................... 1042\n2.4.479 LibraryCreate ...........................................................................  1043\n2.4.480 LibraryDelete ............................................................................ 1044\n2.4.481 LibraryDirectory ........................................................................ 1045\n2.4.482 LibraryDirectoryEx .................................................................... 1047\n2.4.483 LibraryExport ............................................................................ 1049\n2.4.484 LibraryImport ............................................................................ 1050\n2.4.485 LineCount ................................................................................. 1051\n2.4.486 LineLength ...............................................................................  1052\n2.4.487 LineList ..................................................................................... 1053\n"}
{"page": 22, "text": "2.4.488 LinkTo ......................................................................................  1055\n2.4.489 LoadDockingState .................................................................... 1056\n2.4.490 LoadFile ...................................................................................  1056\n2.4.491 LoadString ................................................................................ 1058\n2.4.492 LoadInk ....................................................................................  1060\n2.4.493 LoadPicture .............................................................................. 1061\n2.4.494 LoadWithDotNetCore ............................................................... 1062\n2.4.495 LoadWithDotNetFramework ..................................................... 1063\n2.4.496 Log ........................................................................................... 1066\n2.4.496.1 Syntax 1: For all objects ................................................ 1066\n2.4.496.2 Syntax 2: For ErrorLogging objects ............................... 1067\n2.4.497 LogTen ..................................................................................... 1068\n2.4.498 Long ......................................................................................... 1069\n2.4.498.1 Syntax 1: For combining integers .................................. 1069\n2.4.498.2 Syntax 2: For converting strings and blobs ...................  1070\n2.4.499 LongLong ................................................................................. 1070\n2.4.499.1 Syntax 1: For combining longs ...................................... 1071\n2.4.499.2 Syntax 2: For converting strings and blobs ...................  1071\n2.4.500 Lookup (obsolete) .................................................................... 1072\n2.4.500.1 Syntax 1: For CORBA-compliant EAServer\ncomponents .................................................................................... 1073\n2.4.500.2 Syntax 2: For instances of an EJB component .............. 1074\n2.4.501 Lower .......................................................................................  1077\n2.4.502 LowerBound ............................................................................. 1077\n2.4.503 mailAddress .............................................................................  1078\n2.4.504 mailDeleteMessage .................................................................. 1080\n2.4.505 mailGetMessages ....................................................................  1081\n2.4.506 mailHandle ...............................................................................  1082\n2.4.507 mailLogoff ................................................................................  1083\n2.4.508 mailLogon ................................................................................  1084\n2.4.509 mailReadMessage ...................................................................  1086\n2.4.510 mailRecipientDetails ................................................................. 1088\n2.4.511 mailResolveRecipient ............................................................... 1089\n2.4.512 mailSaveMessage .................................................................... 1091\n2.4.513 mailSend .................................................................................. 1093\n2.4.514 Match .......................................................................................  1094\n2.4.515 MatchW (obsolete) ................................................................... 1097\n2.4.516 Max ..........................................................................................  1098\n2.4.517 MD5 .........................................................................................  1098\n2.4.518 MemberDelete .........................................................................  1100\n2.4.519 MemberExists ..........................................................................  1101\n2.4.520 MemberRename ......................................................................  1102\n2.4.521 MessageBox ............................................................................  1103\n2.4.522 Mid ...........................................................................................  1105\n2.4.523 MidA ......................................................................................... 1107\n2.4.524 MidW (obsolete) ....................................................................... 1108\n2.4.525 Min ...........................................................................................  1108\n2.4.526 Minute ......................................................................................  1109\n"}
{"page": 23, "text": "2.4.527 Mod .......................................................................................... 1109\n2.4.528 ModifyData ............................................................................... 1110\n2.4.528.1 Syntax 1: For all graph types except scatter .................  1110\n2.4.528.2 Syntax 2: For scatter graphs .........................................  1111\n2.4.529 Month ....................................................................................... 1112\n2.4.530 Move ........................................................................................  1113\n2.4.531 MoveTab .................................................................................. 1114\n2.4.532 _Narrow (obsolete) ..................................................................  1115\n2.4.533 Navigate ................................................................................... 1116\n2.4.534 NextActivity ..............................................................................  1117\n2.4.535 Now .......................................................................................... 1119\n2.4.536 ObjectAtPointer ........................................................................ 1119\n2.4.537 OffsetPos .................................................................................  1122\n2.4.538 Open ........................................................................................  1122\n2.4.538.1 Syntax 1: For windows of a known datatype .................  1123\n2.4.538.2 Syntax 2: For windows of unknown datatype ................  1125\n2.4.538.3 Syntax 3: For loading an OLE object from a file into a\ncontrol ............................................................................................  1127\n2.4.538.4 Syntax 4: For opening an OLE object in memory into a\ncontrol ............................................................................................  1128\n2.4.538.5 Syntax 5: For opening an OLE object in a file into an\nOLEStorage ...................................................................................  1129\n2.4.538.6 Syntax 6: For opening an OLE storage member into a\nstorage ...........................................................................................  1132\n2.4.538.7 Syntax 7: For opening OLE streams .............................  1134\n2.4.538.8 Syntax 8: For opening trace files ................................... 1135\n2.4.539 OpenChannel ........................................................................... 1137\n2.4.540 OpenSheet ............................................................................... 1138\n2.4.541 OpenSheetAsDocument ..........................................................  1141\n2.4.542 OpenSheetDocked ................................................................... 1141\n2.4.543 OpenSheetFromDockingState .................................................  1142\n2.4.544 OpenSheetInTabGroup ............................................................ 1143\n2.4.545 OpenSheetWithParm ...............................................................  1144\n2.4.546 OpenSheetWithParmAsDocument ........................................... 1147\n2.4.547 OpenSheetWithParmDocked ................................................... 1148\n2.4.548 OpenSheetWithParmFromDockingState .................................  1150\n2.4.549 OpenSheetWithParmInTabGroup ............................................ 1151\n2.4.550 OpenTab .................................................................................. 1153\n2.4.550.1 Syntax 1: For user objects of a known datatype ............ 1153\n2.4.550.2 Syntax 2: For user objects of unknown datatype ........... 1155\n2.4.551 OpenTabWithParm ..................................................................  1156\n2.4.551.1 Syntax 1: For user objects of a known datatype ............ 1156\n2.4.551.2 Syntax 2: For user objects of unknown datatype ........... 1158\n2.4.552 OpenUserObject ......................................................................  1160\n2.4.552.1 Syntax 1: For user objects of a known datatype ............ 1161\n2.4.552.2 Syntax 2: For user objects of unknown datatype ........... 1162\n2.4.553 OpenUserObjectWithParm ....................................................... 1164\n2.4.553.1 Syntax 1: For user objects of a known datatype ............ 1164\n"}
{"page": 24, "text": "2.4.553.2 Syntax 2: For user objects of unknown datatype ........... 1166\n2.4.554 OpenWithParm ........................................................................  1168\n2.4.554.1 Syntax 1: For windows of a known datatype .................  1168\n2.4.554.2 Syntax 2: For windows of unknown datatype ................  1170\n2.4.555 OutgoingCallList ....................................................................... 1172\n2.4.556 PageCount ...............................................................................  1174\n2.4.557 PageCreated ............................................................................ 1175\n2.4.558 ParentWindow .......................................................................... 1175\n2.4.559 Paste ........................................................................................ 1176\n2.4.560 PasteLink .................................................................................  1178\n2.4.561 PasteRTF ................................................................................. 1179\n2.4.562 PasteSpecial ............................................................................  1180\n2.4.563 PauseDownload ....................................................................... 1181\n2.4.564 PBAddCookie (Obsolete) ......................................................... 1182\n2.4.565 PBGetCookies (Obsolete) ........................................................ 1183\n2.4.566 PBGetMenuString ....................................................................  1184\n2.4.567 Pi .............................................................................................. 1185\n2.4.568 PixelsToUnits ...........................................................................  1186\n2.4.569 Play .......................................................................................... 1186\n2.4.570 PointerX ...................................................................................  1187\n2.4.571 PointerY ...................................................................................  1188\n2.4.572 PopMenu .................................................................................. 1189\n2.4.573 PopulateError ........................................................................... 1190\n2.4.574 Pos ........................................................................................... 1191\n2.4.575 PosA ........................................................................................  1193\n2.4.576 PosW (obsolete) ......................................................................  1194\n2.4.577 Position ....................................................................................  1194\n2.4.577.1 Syntax 1: For editable controls, except RichTextEdit ..... 1194\n2.4.577.2 Syntax 2: For RichTextEdit controls ..............................  1195\n2.4.578 Post .......................................................................................... 1198\n2.4.579 PostData ..................................................................................  1199\n2.4.580 PostDataEnd ............................................................................ 1200\n2.4.581 PostDataStart ........................................................................... 1201\n2.4.582 PostEvent ................................................................................. 1203\n2.4.583 PostURL ................................................................................... 1206\n2.4.584 Preview ....................................................................................  1208\n2.4.585 Print .......................................................................................... 1209\n2.4.585.1 Syntax 1: For printing a visual object in a print job ........  1209\n2.4.585.2 Syntax 2: For printing text in a print job ......................... 1210\n2.4.585.3 Syntax 3: For RichTextEdit controls ..............................  1213\n2.4.586 PrintAsPDF ..............................................................................  1214\n2.4.587 PrintBitmap ..............................................................................  1216\n2.4.588 PrintCancel ..............................................................................  1217\n2.4.589 PrintClose ................................................................................  1218\n2.4.590 PrintDataWindow .....................................................................  1219\n2.4.591 PrintDefineFont ........................................................................  1220\n2.4.592 PrintEx .....................................................................................  1222\n2.4.593 PrintGetPrinter .........................................................................  1223\n"}
{"page": 25, "text": "2.4.594 PrintGetPrinters .......................................................................  1223\n2.4.595 PrintLine ................................................................................... 1224\n2.4.596 PrintOpen ................................................................................. 1225\n2.4.597 PrintOval ..................................................................................  1227\n2.4.598 PrintPage .................................................................................  1228\n2.4.599 PrintRect ..................................................................................  1229\n2.4.600 PrintRoundRect ........................................................................ 1230\n2.4.601 PrintScreen ..............................................................................  1232\n2.4.602 PrintSend (obsolete) ................................................................  1233\n2.4.603 PrintSetFont .............................................................................  1235\n2.4.604 PrintSetPrinter .......................................................................... 1235\n2.4.605 PrintSetSpacing .......................................................................  1236\n2.4.606 PrintSetup ................................................................................  1237\n2.4.607 PrintSetupPrinter ...................................................................... 1238\n2.4.608 PrintText ................................................................................... 1238\n2.4.609 PrintWidth ................................................................................  1240\n2.4.610 PrintX .......................................................................................  1241\n2.4.611 PrintY .......................................................................................  1241\n2.4.612 ProfileInt ................................................................................... 1242\n2.4.613 ProfileString .............................................................................  1244\n2.4.614 Rand ........................................................................................  1245\n2.4.615 Randomize ............................................................................... 1246\n2.4.616 Read ........................................................................................  1247\n2.4.616.1 Syntax 1: For reading into a string ................................  1247\n2.4.616.2 Syntax 2: For character arrays or blobs ........................  1248\n2.4.617 ReadData ................................................................................. 1249\n2.4.618 Real .......................................................................................... 1251\n2.4.619 RecognizeText .........................................................................  1252\n2.4.620 Refresh ....................................................................................  1253\n2.4.621 RegisterEvent ..........................................................................  1254\n2.4.622 RegistryDelete .........................................................................  1257\n2.4.623 RegistryGet ..............................................................................  1258\n2.4.624 RegistryKeys ............................................................................ 1259\n2.4.625 RegistrySet ..............................................................................  1260\n2.4.626 RegistryValues ......................................................................... 1262\n2.4.627 RelativeDate ............................................................................  1263\n2.4.628 RelativeTime ............................................................................  1264\n2.4.629 ReleaseAutomationNativePointer ............................................  1265\n2.4.630 ReleaseNativePointer ..............................................................  1266\n2.4.631 Remove .................................................................................... 1266\n2.4.632 RemoveApplicationButton ........................................................ 1267\n2.4.633 RemoveDirectory .....................................................................  1268\n2.4.634 RequestResource ....................................................................  1269\n2.4.635 Repair ......................................................................................  1270\n2.4.636 Replace .................................................................................... 1271\n2.4.637 ReplaceA .................................................................................  1273\n2.4.638 ReplaceText ............................................................................. 1273\n2.4.639 ReplaceW (obsolete) ...............................................................  1275\n"}
{"page": 26, "text": "2.4.640 Reset ........................................................................................ 1275\n2.4.640.1 Syntax 1: For list boxes ................................................. 1275\n2.4.640.2 Syntax 2: For graphs ..................................................... 1276\n2.4.640.3 Syntax 3: For trace files ................................................  1277\n2.4.641 ResetArgElements ...................................................................  1278\n2.4.642 ResetDataColors ...................................................................... 1279\n2.4.643 ResetInk ................................................................................... 1280\n2.4.644 ResetPicture ............................................................................  1281\n2.4.645 Resize ...................................................................................... 1281\n2.4.646 RespondRemote ......................................................................  1282\n2.4.647 Restart .....................................................................................  1283\n2.4.648 ResumeDownload .................................................................... 1284\n2.4.649 ResumeTransaction (obsolete) ................................................ 1285\n2.4.650 Retrieve .................................................................................... 1287\n2.4.651 RetrieveOne ............................................................................. 1294\n2.4.652 Reverse .................................................................................... 1296\n2.4.653 RevertToSelf ............................................................................  1296\n2.4.654 RGB .........................................................................................  1297\n2.4.655 Right ......................................................................................... 1299\n2.4.656 RightA ......................................................................................  1300\n2.4.657 RightW (obsolete) .................................................................... 1300\n2.4.658 RightTrim .................................................................................  1301\n2.4.659 RightTrimW (obsolete) ............................................................. 1301\n2.4.660 RollbackOnly (obsolete) ........................................................... 1302\n2.4.661 RollbackTransaction (obsolete) ...............................................  1303\n2.4.662 Round ......................................................................................  1305\n2.4.663 RoutineList ...............................................................................  1306\n2.4.664 Run ..........................................................................................  1307\n2.4.665 Save ......................................................................................... 1308\n2.4.665.1 Syntax 1: For InkPicture controls ..................................  1308\n2.4.665.2 Syntax 2: For OLE objects ............................................  1310\n2.4.666 SaveAs ..................................................................................... 1311\n2.4.666.1 Syntax 1: For graph objects ..........................................  1311\n2.4.666.2 Syntax 2: For saving an OLE control to a file ................  1314\n2.4.666.3 Syntax 3: For saving an OLE control to an OLE\nstorage ...........................................................................................  1315\n2.4.666.4 Syntax 4: For saving an OLE storage object to a file ..... 1316\n2.4.666.5 Syntax 5: For saving an OLE storage object in another\nOLE storage ................................................................................... 1318\n2.4.667 SaveDockingState .................................................................... 1319\n2.4.668 SaveDocument ........................................................................  1320\n2.4.669 SaveInk .................................................................................... 1321\n2.4.670 SaveToFile ............................................................................... 1323\n2.4.671 Scroll ........................................................................................ 1324\n2.4.672 ScrollNextPage ........................................................................  1325\n2.4.673 ScrollNextRow .........................................................................  1326\n2.4.674 ScrollPriorPage ........................................................................  1327\n2.4.675 ScrollPriorRow .........................................................................  1328\n"}
{"page": 27, "text": "2.4.676 ScrollToRow ............................................................................. 1329\n2.4.677 Second ..................................................................................... 1330\n2.4.678 SecondsAfter ...........................................................................  1331\n2.4.679 Seek ......................................................................................... 1332\n2.4.679.1 Syntax 1: For OLE stream objects ................................  1332\n2.4.679.2 Syntax 2: For animation controls ................................... 1334\n2.4.680 SelectedColumn ....................................................................... 1334\n2.4.681 SelectedIndex ..........................................................................  1335\n2.4.682 SelectedItem ............................................................................  1336\n2.4.683 SelectedLength ........................................................................  1337\n2.4.684 SelectedLine ............................................................................  1339\n2.4.685 SelectedPage ........................................................................... 1340\n2.4.686 SelectedStart ...........................................................................  1341\n2.4.687 SelectedText ............................................................................  1342\n2.4.688 SelectionRange ........................................................................ 1343\n2.4.689 SelectItem ................................................................................  1344\n2.4.689.1 Syntax 1: When you know the text of an item ...............  1344\n2.4.689.2 Syntax 2: When you know the item number .................. 1346\n2.4.689.3 Syntax 3: For TreeView controls ...................................  1347\n2.4.690 SelectObject ............................................................................. 1348\n2.4.691 SelectTab ................................................................................. 1349\n2.4.692 SelectText ................................................................................  1350\n2.4.692.1 Syntax 1: For editable controls (except RichTextEdit) ...  1350\n2.4.692.2 Syntax 2: For RichTextEdit controls and presentation\nstyles .............................................................................................. 1351\n2.4.693 SelectTextAll ............................................................................  1353\n2.4.694 SelectTextLine .........................................................................  1354\n2.4.695 SelectTextWord .......................................................................  1355\n2.4.696 Send ......................................................................................... 1357\n2.4.697 SendDeleteRequest ................................................................. 1359\n2.4.698 SendGetRequest .....................................................................  1360\n2.4.699 SendPatchRequest ..................................................................  1362\n2.4.700 SendPostRequest ....................................................................  1364\n2.4.701 SendPutRequest ...................................................................... 1366\n2.4.702 SendRequest ...........................................................................  1368\n2.4.703 SeriesCount .............................................................................  1371\n2.4.704 SeriesName .............................................................................  1372\n2.4.705 SetAbort ................................................................................... 1373\n2.4.705.1 Syntax 1: For OLETxnObject objects ............................  1373\n2.4.705.2 Syntax 2: For TransactionServer objects ....................... 1374\n2.4.706 SetAccessToken ......................................................................  1375\n2.4.707 SetActiveCategory ...................................................................  1376\n2.4.708 SetActiveCategoryByIndex ......................................................  1377\n2.4.709 SetAlignment ............................................................................ 1378\n2.4.710 SetApplicationButton ................................................................ 1379\n2.4.711 SetArgElement ......................................................................... 1380\n2.4.712 SetAutomationLocale ............................................................... 1381\n2.4.713 SetAutomationPointer ..............................................................  1383\n"}
{"page": 28, "text": "2.4.714 SetAutomationTimeout ............................................................. 1384\n2.4.715 SetBody ...................................................................................  1385\n2.4.716 SetBoldDate ............................................................................. 1386\n2.4.717 SetBoxPictureList ..................................................................... 1388\n2.4.718 SetByte ....................................................................................  1389\n2.4.719 SetCategory .............................................................................  1389\n2.4.720 SetCheckBox ...........................................................................  1391\n2.4.721 SetColumn ...............................................................................  1392\n2.4.722 SetComboBox .......................................................................... 1393\n2.4.723 SetComplete ............................................................................  1394\n2.4.723.1 Syntax 1: For OLETxnObject objects ............................  1394\n2.4.723.2 Syntax 2: For TransactionServer objects ....................... 1395\n2.4.724 SetData .................................................................................... 1397\n2.4.725 SetDataDDE ............................................................................  1398\n2.4.726 SetDataLabelling ...................................................................... 1399\n2.4.727 SetDataPieExplode .................................................................. 1401\n2.4.728 SetDataStyle ............................................................................  1402\n2.4.728.1 Syntax 1: For setting a data point's colors ..................... 1402\n2.4.728.2 Syntax 2: For the line associated with a data point ........ 1404\n2.4.728.3 Syntax 3: For the fill pattern and symbol of a data\npoint ...............................................................................................  1406\n2.4.729 SetDataTransparency ..............................................................  1408\n2.4.730 SetDateLimits ........................................................................... 1409\n2.4.731 SetDropHighlight ...................................................................... 1410\n2.4.732 SetDynamicParm .....................................................................  1411\n2.4.733 SetFirstVisible ..........................................................................  1412\n2.4.734 SetFocus .................................................................................. 1413\n2.4.735 SetGroup .................................................................................. 1414\n2.4.736 SetGlobalProperty (obsolete) ................................................... 1415\n2.4.737 SetHeader ................................................................................ 1416\n2.4.737.1 Syntax 1: for TokenRequest objects .............................. 1416\n2.4.737.2 Syntax 2: for OAuthRequest objects .............................  1417\n2.4.738 SetHeaders ..............................................................................  1418\n2.4.738.1 Syntax 1: for TokenRequest objects .............................. 1418\n2.4.738.2 Syntax 2: for OAuthRequest objects .............................  1419\n2.4.739 SetHttpRequestHeader ............................................................ 1420\n2.4.740 SetItem ..................................................................................... 1422\n2.4.740.1 Syntax 1: For ListView controls ..................................... 1422\n2.4.740.2 Syntax 2: For ListView controls ..................................... 1423\n2.4.740.3 Syntax 3: For TreeView controls ...................................  1424\n2.4.740.4 Syntax 4: For RibbonMenu controls ..............................  1425\n2.4.740.5 Syntax 5: For RibbonBar controls .................................  1427\n2.4.741 SetJWTToken ..........................................................................  1429\n2.4.742 SetLargeButton ........................................................................  1430\n2.4.743 SetLevelPictures ......................................................................  1431\n2.4.744 SetLibraryList ...........................................................................  1433\n2.4.745 SetMask ................................................................................... 1434\n2.4.746 SetMasterItem .......................................................................... 1435\n"}
{"page": 29, "text": "2.4.747 SetMenu ................................................................................... 1437\n2.4.748 SetMessage .............................................................................  1439\n2.4.749 SetMicroHelp ...........................................................................  1439\n2.4.750 SetMinimized ...........................................................................  1440\n2.4.751 SetNewMobiLinkPassword ......................................................  1441\n2.4.752 SetNull .....................................................................................  1442\n2.4.753 SetOAuthToken .......................................................................  1443\n2.4.754 SetOverlayPicture ....................................................................  1444\n2.4.755 SetPanel ..................................................................................  1446\n2.4.756 SetParagraphSetting ................................................................ 1447\n2.4.757 SetParm ................................................................................... 1448\n2.4.758 SetPicture ................................................................................  1449\n2.4.759 SetPointer ................................................................................  1450\n2.4.759.1 Syntax 1: System-defined shape ................................... 1450\n2.4.759.2 Syntax 2: File-defined shape ......................................... 1452\n2.4.760 SetPosition ............................................................................... 1452\n2.4.760.1 Syntax 1: For positioning windows and controls in\nwindows .........................................................................................  1452\n2.4.760.2 Syntax 2: For positioning objects within a DataWindow . 1454\n2.4.761 SetProfileString ........................................................................  1455\n2.4.762 SetRange ................................................................................. 1456\n2.4.763 SetRecentItem .........................................................................  1457\n2.4.764 SetRecentTitle .........................................................................  1459\n2.4.765 SetRecordSet ........................................................................... 1460\n2.4.766 SetRedraw ...............................................................................  1461\n2.4.767 SetRemote ...............................................................................  1462\n2.4.767.1 Syntax 1: For single DDE requests ...............................  1462\n2.4.767.2 Syntax 2: For DDE requests via an open channel ......... 1463\n2.4.768 SetRequestHeader ................................................................... 1464\n2.4.769 SetRequestHeaders ................................................................. 1466\n2.4.770 SetResultSet ............................................................................  1466\n2.4.771 SetSelectedDate ......................................................................  1467\n2.4.772 SetSelectedRange ...................................................................  1468\n2.4.773 SetSeriesLabelling ...................................................................  1469\n2.4.774 SetSeriesStyle .........................................................................  1471\n2.4.774.1 Syntax 1: For setting a series' colors ............................  1471\n2.4.774.2 Syntax 2: For lines in a graph .......................................  1473\n2.4.774.3 Syntax 3: For the fill pattern and symbols in a graph ..... 1474\n2.4.774.4 Syntax 4: For creating an overlay in a graph ................. 1476\n2.4.775 SetSeriesTransparency ............................................................ 1478\n2.4.776 SetSheetID ............................................................................... 1479\n2.4.777 SetSmallButton ........................................................................  1480\n2.4.778 SetSpacing ............................................................................... 1481\n2.4.779 SetState ...................................................................................  1482\n2.4.780 SetSyncRegistryProperties ......................................................  1483\n2.4.781 SetTabButton ...........................................................................  1484\n2.4.782 SetTextColor ............................................................................  1486\n2.4.783 SetTextStyle ............................................................................. 1486\n"}
{"page": 30, "text": "2.4.784 SetTimeout (obsolete) .............................................................  1487\n2.4.785 SetToday .................................................................................. 1489\n2.4.786 SetToolbar ...............................................................................  1490\n2.4.787 SetToolbarPos .........................................................................  1492\n2.4.787.1 Syntax 1: For docked toolbars ....................................... 1492\n2.4.787.2 Syntax 2: For floating toolbars ....................................... 1494\n2.4.788 SetTop .....................................................................................  1495\n2.4.789 SetTraceFileName ...................................................................  1496\n2.4.790 SetTransPool ...........................................................................  1497\n2.4.791 SetValue ..................................................................................  1498\n2.4.791.1 Syntax 1: for DatePicker control .................................... 1498\n2.4.791.2 Syntax 2: for JSONPackage object ...............................  1499\n2.4.792 SetValueBlob ...........................................................................  1501\n2.4.793 SetValueBoolean .....................................................................  1502\n2.4.794 SetValueByDataWindow .......................................................... 1503\n2.4.795 SetValueDate ........................................................................... 1507\n2.4.796 SetValueDateTime ................................................................... 1508\n2.4.797 SetValueNumber ...................................................................... 1509\n2.4.798 SetValueString .........................................................................  1511\n2.4.799 SetValueTime ..........................................................................  1512\n2.4.800 SHA .......................................................................................... 1513\n2.4.801 SharedObjectDirectory ............................................................. 1515\n2.4.802 SharedObjectGet .....................................................................  1515\n2.4.803 SharedObjectRegister .............................................................. 1518\n2.4.804 SharedObjectUnregister ........................................................... 1519\n2.4.805 Show ........................................................................................ 1520\n2.4.806 ShowHeadFoot ........................................................................  1521\n2.4.807 ShowHelp ................................................................................. 1522\n2.4.808 ShowPopupHelp ......................................................................  1523\n2.4.809 Sign .......................................................................................... 1524\n2.4.810 SignalError ...............................................................................  1525\n2.4.811 Sin ............................................................................................ 1526\n2.4.812 Sleep ........................................................................................ 1526\n2.4.813 Sort ..........................................................................................  1527\n2.4.813.1 Syntax 1: For TreeView controls ...................................  1527\n2.4.813.2 Syntax 2: For ListView controls ..................................... 1528\n2.4.814 SortAll ......................................................................................  1529\n2.4.815 Space ....................................................................................... 1530\n2.4.816 Sqrt ..........................................................................................  1531\n2.4.817 Start .........................................................................................  1532\n2.4.817.1 Syntax 1: For executing pipeline objects ....................... 1532\n2.4.817.2 Syntax 2: For activating timing objects .......................... 1534\n2.4.818 StartHotLink .............................................................................  1538\n2.4.819 StartServerDDE .......................................................................  1539\n2.4.820 State ......................................................................................... 1541\n2.4.821 StepIt ........................................................................................ 1542\n2.4.822 Stop .......................................................................................... 1543\n2.4.822.1 Syntax 1: For deactivating timing objects ......................  1543\n"}
{"page": 31, "text": "2.4.822.2 Syntax 2: For stopping an animation from playing ......... 1544\n2.4.823 StopHotLink .............................................................................  1544\n2.4.824 StopNavigation ......................................................................... 1545\n2.4.825 StopServerDDE .......................................................................  1546\n2.4.826 String ........................................................................................ 1547\n2.4.826.1 Syntax 1: For formatting data ........................................ 1547\n2.4.826.2 Syntax 2: For blobs .......................................................  1551\n2.4.827 Submit ...................................................................................... 1552\n2.4.828 SuspendTransaction (obsolete) ............................................... 1558\n2.4.829 SymmetricDecrypt .................................................................... 1559\n2.4.830 SymmetricEncrypt .................................................................... 1561\n2.4.831 SymmetricGenerateKey ........................................................... 1564\n2.4.832 Synchronize .............................................................................  1566\n2.4.832.1 Syntax 1: For synchronization without parameters ........  1566\n2.4.832.2 Syntax 2: For synchronization with parameters ............. 1567\n2.4.833 SyntaxFromSQL ......................................................................  1568\n2.4.834 SystemRoutine ......................................................................... 1570\n2.4.835 TabPostEvent ..........................................................................  1571\n2.4.836 TabTriggerEvent ......................................................................  1572\n2.4.837 Tan ........................................................................................... 1573\n2.4.838 Text .......................................................................................... 1574\n2.4.838.1 Syntax for ListBox, DropDownListBox, PictureListBox,\nand DropDownPictureListBox controls ..........................................  1574\n2.4.838.2 Syntax for RibbonComboBoxItem controls .................... 1575\n2.4.839 TextLine ...................................................................................  1575\n2.4.840 Time ......................................................................................... 1576\n2.4.840.1 Syntax 1: For DateTime and blob values ......................  1576\n2.4.840.2 Syntax 2: For strings .....................................................  1577\n2.4.840.3 Syntax 3: For integers ...................................................  1578\n2.4.841 Timer ........................................................................................ 1579\n2.4.842 ToAnsi ...................................................................................... 1580\n2.4.843 Today ....................................................................................... 1581\n2.4.844 Top ........................................................................................... 1581\n2.4.845 TotalColumns ........................................................................... 1582\n2.4.846 TotalItems ................................................................................  1583\n2.4.847 TotalSelected ...........................................................................  1584\n2.4.848 ToUnicode ................................................................................ 1585\n2.4.849 TraceBegin ............................................................................... 1586\n2.4.850 TraceClose ............................................................................... 1587\n2.4.851 TraceDisableActivity ................................................................. 1588\n2.4.852 TraceEnableActivity .................................................................  1589\n2.4.853 TraceEnd .................................................................................  1591\n2.4.854 TraceError ................................................................................ 1592\n2.4.855 TraceOpen ...............................................................................  1593\n2.4.856 TraceUser ................................................................................  1595\n2.4.857 TriggerEvent ............................................................................  1595\n2.4.858 TriggerPBEvent ........................................................................ 1597\n2.4.859 Trim .......................................................................................... 1599\n"}
{"page": 32, "text": "2.4.860 TrimW (obsolete) .....................................................................  1600\n2.4.861 Truncate ................................................................................... 1600\n2.4.862 TrustVerify (obsolete) ..............................................................  1601\n2.4.863 TypeOf .....................................................................................  1604\n2.4.864 Uncheck ................................................................................... 1605\n2.4.865 Undo ........................................................................................  1607\n2.4.866 UnitsToPixels ...........................................................................  1607\n2.4.867 UnregisterEvent .......................................................................  1608\n2.4.868 UpdateLinksDialog ................................................................... 1609\n2.4.869 Upper .......................................................................................  1611\n2.4.870 UpperBound ............................................................................. 1611\n2.4.871 UrlDecode ................................................................................  1613\n2.4.872 UrlEncode ................................................................................  1614\n2.4.873 WebBrowserGet ....................................................................... 1615\n2.4.874 WebBrowserSet .......................................................................  1616\n2.4.875 Which ....................................................................................... 1618\n2.4.876 WordCap .................................................................................. 1619\n2.4.877 WorkSpaceHeight ....................................................................  1620\n2.4.878 WorkSpaceWidth .....................................................................  1621\n2.4.879 WorkSpaceX ............................................................................  1622\n2.4.880 WorkSpaceY ............................................................................  1623\n2.4.881 Write ......................................................................................... 1624\n2.4.882 XMLParseFile ..........................................................................  1625\n2.4.883 XMLParseString ....................................................................... 1627\n2.4.884 Year .........................................................................................  1630\n2.4.885 Yield ......................................................................................... 1631\n2.4.886 Zoom ........................................................................................ 1632\nIndex .................................................................................................................... 1634\n"}
{"page": 33, "text": "PowerScript Topics\nPage 33\n1 PowerScript Topics\nThis part describes the basics of using the PowerScript language.\n1.1 Language Basics\nAbout this chapter\nThis chapter describes general elements and conventions of PowerScript.\n1.1.1 Comments\nDescription\nYou can use comments to document your scripts and prevent statements within a script from\nexecuting. There are two methods.\nSyntax\nDouble-slash method\nCode // Comment\nSlash-and-asterisk method\n/*      Comment       */\nUsage\nThe following table shows how to use each method.\nTable 1.1: Methods for adding comments in scripts\nMethod\nMarker\nCan use to\nNote\nDouble slash\n//\nDesignate all text on\nthe line to the right\nof the marker as a\ncomment\nCannot extend to\nmultiple lines\nSlash and asterisk\n/*...*/\nDesignate the text\nbetween the markers\nas a comment\nNest comments\n\u2022 Can extend\nover multiple\nlines (multiline\ncomments do\nnot require a\ncontinuation\ncharacter)\n\u2022 Can be nested\nAdding comment markers\nIn Script views and the Function painter, you can use the Comment Selection button\n(or select Edit>Comment Selection from the menu bar) to comment out the line\ncontaining the cursor or a selected group of lines.\n"}
{"page": 34, "text": "PowerScript Topics\nPage 34\nFor information about adding comments to objects and library entries, see the\nSection 2.2.4.13, \u201cModifying comments\u201d in Users Guide.\nExamples\nDouble-slash method\n// This entire line is a comment.\n// This entire line is another comment.\namt = qty * cost // Rest of the line is comment.\n// The following statement was commented out so that it\n// would not execute.\n// SetNull(amt)\nSlash-and-asterisk method\n/* This is a single-line comment.   */\n/* This comment starts here,\ncontinues to this line,\nand finally ends here. */\nA = B + C  /*  This comment starts here. \n/*  This is the start of a nested comment.\n    The nested comment ends here.  */ \nThe first comment ends here.  */ + D + E + F\n1.1.2 Identifier names\nDescription\nYou use identifiers to name variables, labels, functions, windows, controls, menus, and\nanything else you refer to in scripts.\nSyntax\nRules for identifiers:\n\u2022 Must start with a letter or an _ (underscore)\n\u2022 Cannot be reserved words (see Reserved words)\n\u2022 Can have up to 40 characters but no spaces\n\u2022 Are not case sensitive (PART, Part, and part are identical)\n\u2022 Can include any combination of letters, numbers, and these special characters:\n- Dash\n_ Underscore\n$ Dollar sign\n# Number sign\n% Percent sign\nUsage\n"}
{"page": 35, "text": "PowerScript Topics\nPage 35\nBy default, PowerBuilder allows you to use dashes in all identifiers, including in variable\nnames in a script. However, this means that when you use the subtraction operator or the --\noperator in a script, you must surround it with spaces. If you do not, PowerBuilder interprets\nthe expression as an identifier name.\nIf you want to disallow dashes in variable names in scripts, you can change the setting of the\nAllow Dashes in Identifiers option in the script editor's property sheet. As a result, you do\nnot have to surround the subtraction operator and the decrement assignment shortcut (--) with\nspaces.\nBe careful\nIf you disallow dashes and have previously used dashes in variable names, you will\nget errors the next time you compile.\nExamples\nValid identifiers\nABC_Code\nChild-Id\nFirstButton\nresponse35\npay-before%deductions$\nORDER_DATE\nActual-$-amount\nPart#\nInvalid identifiers\n2nd-quantity // Does not start with a letter\nABC Code     // Contains a space\nChild'sId // Contains invalid special character\n1.1.3 Labels\nDescription\nYou can include labels in scripts for use with GOTO statements.\nSyntax\nIdentifier:\nUsage\nA label can be any valid identifier. You can enter it on a line by itself above the statement or\nat the start of the line before the statement.\nFor information about the GOTO statement, see GOTO. For information about valid\nidentifiers, see Identifier names.\nExamples\nOn a line by itself above the statement\nFindCity:IF city=cityname[1] THEN ...\nAt the start of the line before the statement\n"}
{"page": 36, "text": "PowerScript Topics\nPage 36\nFindCity: IF city=cityname[1] THEN ...\n1.1.4 Special ASCII characters\nDescription\nYou can include special ASCII characters in strings. For example, you might want to include\na tab in a string to ensure proper spacing or a bullet to indicate a list item. The tilde character\n(~) introduces special characters. The tab is one of the common ASCII characters that can be\nentered by typing a tilde followed by a single keystroke. The bullet must be entered by typing\na tilde followed by the decimal, hexadecimal, or octal ASCII value that represents it.\nSyntax\nFollow the guidelines in the following table.\nTable 1.2: Using special ASCII characters in strings\nIn this category\nTo specify this\nEnter this\nMore information\nCommon ASCII\ncharacters\nNewline\n~n\n \n \nTab\n~t\n \n \nVertical tab\n~v\n \n \nCarriage return\n~r\n \n \nForm feed\n~f\n \n \nBackspace\n~b\n \n \nDouble quote\n~\"\n \n \nSingle quote\n~'\n \n \nTilde\n~~\n \nAny ASCII character\nDecimal\n~###\n### = a 3-digit\nnumber from 000 to\n255\n \nHexadecimal\n~h##\n## = a 2-digit\nhexadecimal number\nfrom 01 to FF\n \nOctal\n~o###\n### = a 3-digit octal\nnumber from 000 to\n377\nExamples\nEntering ASCII characters\nHere is how to use special characters in strings:\nTable 1.3:\nString\nDescription\n\"dog~n\"\nA string containing the word dog followed by\na newline character\n"}
{"page": 37, "text": "PowerScript Topics\nPage 37\nString\nDescription\n\"dog~tcat~ttiger\"\nA string containing the word dog, a tab\ncharacter, the word cat, another tab character,\nand the word tiger\nUsing decimal, hexadecimal, and octal values\nHere is how to indicate a bullet (*) in a string by using the decimal, hexadecimal, and octal\nASCII values:\nTable 1.4:\nValue\nDescription\n\"~249\"\nThe ASCII character with decimal value 249\n\"~hF9\"\nThe ASCII character with hexadecimal value\nF9\n\"~o371\"\nThe ASCII character with octal value 371\n1.1.5 NULL values\nDescription\nNull means undefined or unknown. It is not the same as an empty string or zero or a date of\n0000-00-00. For example, null is neither 0 nor not 0.\nTypically, you work with null values only with respect to database values.\nUsage\nInitial values for variables\nAlthough PowerBuilder supports null values for all variable datatypes, it does not initialize\nvariables to null. Instead, when a variable is not set to a specific value when it is declared,\nPowerBuilder sets it to the default initial value for the datatype -- for example, zero for a\nnumeric value, false for boolean, and the empty string (\"\") for a string.\nNull variables\nA variable can become null if one of the following occurs:\n\u2022 A null value is read into it from the database. If your database supports null, and a SQL\nINSERT or UPDATE statement sends a null to the database, it is written to the database as\nnull and can be read into a variable by a SELECT or FETCH statement.\nNote\nNull in a variable\nWhen a null value is read into a variable, the variable remains null unless it is\nchanged in a script.\n\u2022 The SetNull function is used in a script to set the variable explicitly to null. For example:\nstring city    // city is an empty string.\n"}
{"page": 38, "text": "PowerScript Topics\nPage 38\nSetNull(city)  // city is set to NULL.\nNulls in functions and expressions\nMost functions that have a null value for any argument return null. Any expression that has a\nvariable with a null value results in null.\nA boolean expression that is null is considered undefined and therefore false.\nTesting for null\nTo test whether a variable or expression is null, use the IsNull function. You cannot use an\nequal sign (=) to test for null.\nValid\nThis statement shows the correct way to test for null:\nIF IsNull(a) THEN     ...\nInvalid\nThis statement shows the incorrect way to test for null:\nIF a = NULL THEN      ...\nExamples\nExample 1\nNone of the following statements make the computer beep (the variable nbr is set to null, so\neach statement evaluates to false):\nint     Nbr\n// Set Nbr to NULL.\nSetNull(Nbr)\nIF Nbr = 1 THEN Beep(1)\nIF Nbr <> 1 THEN Beep(1)\nIF NOT (Nbr = 1) THEN Beep(1)\nExample 2\nIn this IF...THEN statement, the boolean expression evaluates to false, so the ELSE is\nexecuted:\nint     a\nSetNull(a)\nIF a = 1 THEN\n      MessageBox(\"Value\", \"a = 1\")\nELSE\n     MessageBox(\"Value\", \"a = NULL\")\nEND IF\nExample 3\nThis example is a more useful application of a null boolean expression than Example 2. It\ndisplays a message if no control has focus. When no control has focus, GetFocus returns a\nnull object reference, the boolean expression evaluates to false, and the ELSE is executed:\nIF GetFocus( ) THEN\n      . . .  // Some processing\nELSE\n     MessageBox(\"Important\", \"Specify an option!\")\nEND IF\n"}
{"page": 39, "text": "PowerScript Topics\nPage 39\n1.1.6 Reserved words\nThe words PowerBuilder uses internally are called reserved words and cannot be used as\nidentifiers. If you use a reserved word as an identifier, you get a compiler warning. Reserved\nwords that are marked with an asterisk (*) can be used as function names.\nTable 1.5: PowerScript reserved words\nalias\nand\nautoinstantiate\ncall\ncase\ncatch\nchoose\nclose*\ncommit\nconnect\nconstant\ncontinue\ncreate*\ncursor\ndeclare\ndelete\ndescribe*\ndescriptor\ndestroy\ndisconnect\ndo\ndynamic\nelse\nelseif\nend\nenumerated\nevent\nexecute\nexit\nexternal\nfalse\nfetch\nfinally\nfirst\nfor\nforward\nfrom\nfunction\nglobal\ngoto\nhalt\nif\nimmediate\nindirect\ninsert\ninto\nintrinsic\nis\nlast\nlibrary\nloop\nnamespace\nnative\nnext\nnot\nof\non\nopen*\nor\nparent\npost*\nprepare\nprior\nprivate\nprivateread\nprivatewrite\nprocedure\nprotected\nprotectedread\nprotectedwrite\nprototypes\npublic\nreadonly\nref\nreturn\nrollback\nrpcfunc\nselect\nselectblob\nshared\nstatic\nstep\nsubroutine\nsuper\nsystem\nsystemread\nsystemwrite\nthen\nthis\nthrow\nthrows\nto\ntrigger\ntrue\ntry\ntype\nuntil\nupdate*\nupdateblob\nusing\nvariables\nwhile\nwith\nwithin\nxor\n_debug\nThe PowerBuilder system class also includes private variables that you cannot use as\nidentifiers. If you use a private variable as an identifier, you get an informational message\nand should rename your identifier.\n"}
{"page": 40, "text": "PowerScript Topics\nPage 40\nIf you are deploying a DataWindow to the Web, you cannot use JavaScript reserved words\nto name fields or bands in the DataWindow object. The list of reserved words is available at\nhttps://docs.microsoft.com/en-us/scripting/javascript/reference/javascript-reserved-words.\n1.1.7 Pronouns\nDescription\nPowerScript has pronouns that allow you to make a general reference to an object or control.\nWhen you use a pronoun, the reference remains correct even if the name of the object or\ncontrol changes.\nUsage\nYou can use pronouns in function and event scripts wherever you would use an object's\nname. For example, you can use a pronoun to:\n\u2022 Cause an event in an object or control\n\u2022 Manipulate or change an object or control\n\u2022 Obtain or change the setting of a property\nThe following table lists the PowerScript pronouns and summarizes their use.\nTable 1.6: PowerScript pronouns\nThis\npronoun\nIn a script for a\nRefers to the\nThis\nWindow, custom user object, menu,\napplication object, or control\nObject or control itself\nParent\nControl in a window\nWindow containing the control\n \nControl in a custom user object\nCustom user object containing the control\n \nMenu\nItem in the menu on the level above the\ncurrent menu\nSuper\ndescendant object or control\nParent\n \ndescendant window or user object\nImmediate ancestor of the window or user\nobject\n \nControl in a descendant window or user\nobject\nImmediate ancestor of the control's parent\nwindow or user object\nParentWindow property\nYou can use the ParentWindow property of the Menu object like a pronoun in Menu scripts.\nIt identifies the window that the menu is associated with when your program is running. For\nmore information, see the Section 4.6.6.3, \u201cReferring to objects in your application\u201d in Users\nGuide.\nThe rest of this section describes the individual pronouns in detail.\n1.1.7.1 Parent pronoun\nDescription\n"}
{"page": 41, "text": "PowerScript Topics\nPage 41\nParent in a PowerBuilder script refers to the object that contains the current object.\nUsage\nYou can use the pronoun Parent in scripts for:\n\u2022 Controls in windows\n\u2022 Custom user objects\n\u2022 Menus\nWhere you use Parent determines what it references:\nWindow controls\nWhen you use Parent in a script for a control (such as a CommandButton), Parent refers to\nthe window that contains the control.\nUser object controls\nWhen you use Parent in a script for a control in a custom user object, Parent refers to the user\nobject.\nMenus\nWhen you use Parent in a menu script, Parent refers to the menu item on the level above the\nmenu the script is for.\nExamples\nWindow controls\nIf you include this statement in the script for the Clicked event in a CommandButton within a\nwindow, clicking the button closes the window containing the button:\nClose(Parent)\nIf you include this statement in the script for the CommandButton, clicking the button\ndisplays a horizontal scroll bar within the window (sets the HScrollBar property of the\nwindow to true):\nParent.HScrollBar = TRUE\nUser object controls\nIf you include this statement in a script for the Clicked event for a CheckBox in a user object,\nclicking the check box hides the user object:\nParent.Hide( )\nIf you include this statement in the script for the CheckBox, clicking the check box disables\nthe user object (sets the Enabled property of the user object to false):\nParent.Enabled = FALSE\nMenus\nIf you include this statement in the script for the Clicked event in the menu item Select All\nunder the menu item Select, clicking Select All disables the menu item Select:\nParent.Disable( )\n"}
{"page": 42, "text": "PowerScript Topics\nPage 42\nIf you include this statement in the script for the Clicked event in the menu item Select All,\nclicking Select All checks the menu item Select:\nParent.Checked = TRUE\n1.1.7.2 This pronoun\nDescription\nThe pronoun This in a PowerBuilder script refers to the window, user object, menu,\napplication object, or control that owns the current script.\nUsage\nWhy include This\nUsing This allows you to make ownership explicit. The following statement refers to the\ncurrent object's X property:\nThis.X = This.X + 50\nWhen optional but helpful\nIn the script for an object or control, you can refer to the properties of the object or control\nwithout qualification, but it is good programming practice to include This to make the script\nclear and easy to read.\nWhen required\nThere are some circumstances when you must use This. When a global or local variable has\nthe same name as an instance variable, PowerBuilder finds the global or local variable first.\nQualifying the variable with This allows you to refer to the instance variable instead of the\nglobal variable.\nExamples\nExample 1\nThis statement in a script for a menu places a check mark next to the menu selection:\nThis.Check( )\nExample 2\nIn this function call, This passes a reference to the object containing the script:\nReCalc(This)\nExample 3\nIf you omit This, \"x\" in the following statement refers to a local variable x if there is one\ndefined (the script adds 50 to the variable x, not to the X property of the control). It refers to\nthe object's X property if there is no local variable:\nx = x + 50\nExample 4\nUse This to ensure that you refer to the property. For example, in the following statement\nin the script for the Clicked event for a CommandButton, clicking the button changes the\nhorizontal position of the button (changes the button's X property):\n"}
{"page": 43, "text": "PowerScript Topics\nPage 43\nThis.x = This.x + 50\n1.1.7.3 Super pronoun\nDescription\nWhen you write a PowerBuilder script for a descendant object or control, you can call scripts\nwritten for any ancestor. You can directly name the ancestor in the call, or you can use the\nreserved word Super to refer to the immediate ancestor.\nUsage\nWhether to use Super\nIf you are calling an ancestor function, you only need to use Super if the descendant has a\nfunction with the same name and the same arguments as the ancestor function. Otherwise,\nyou would simply call the function with no qualifiers.\nRestrictions for Super\nYou cannot use Super to call scripts associated with controls in the ancestor window. You\ncan only use Super in an event or function associated with a direct descendant of the ancestor\nwhose function is being called. Otherwise, the compiler returns a syntax error.\nTo call scripts associated with controls, use the CALL statement.\nSee the discussion of CALL.\nExamples\nExample 1\nThis example calls the ancestor function wf_myfunc (presumably the descendant also has a\nfunction called wf_myfunc):\nSuper::wf_myfunc(myarg1, myarg2)\nThis example must be part of a script or function in the descendant window, not one of the\nwindow's controls. For example, if it is in the Clicked event of a button on the descendant\nwindow, you get a syntax error when the script is compiled.\nSupplying arguments\nBe certain to supply the correct number of arguments for the ancestor function.\nExample 2\nThis example in a CommandButton script calls the Clicked script for the CommandButton in\nthe immediate ancestor window or user object:\nSuper::EVENT Clicked()\n1.1.8 Statement continuation\nDescription\nAlthough you typically put one statement on each line, you occasionally need to continue\na statement to more than one line. The statement continuation character is the ampersand\n(&). (For the use of the ampersand character in accelerator keys, see the PowerBuilder Users\nGuide.)\n"}
{"page": 44, "text": "PowerScript Topics\nPage 44\nSyntax\nStart of statement &       \n   more statement &       \n   end of statement\nThe ampersand must be the last nonwhite character on the line or the compiler considers it\npart of the statement.\nFor information about white space, see White space.\nUsage\nYou do not use a continuation character for:\n\u2022 Continuing comments\nDo not use a continuation character to continue a comment. The continuation character is\nconsidered part of the comment and is ignored by the compiler.\n\u2022 Continuing SQL statements\nYou do not need a continuation character to continue a SQL statement. In PowerBuilder,\nSQL statements always end with a semicolon (;), and the compiler considers everything\nfrom the start of a SQL statement to a semicolon to be part of the SQL statement. A\ncontinuation character in a SQL statement is considered part of the statement and usually\ncauses an error.\nExamples\nContinuing a quoted string\nOne way\nPlace an ampersand in the middle of the string and continue the string on the next line:\nIF Employee_District = \"Eastern United States and&\nEastern Canada\" THEN ...\nNote that any white space (such as tabs and spaces) before the ampersand and at the\nbeginning of the continued line is part of the string.\nA problem\nThe following statement uses only the ampersand to continue the quoted string in the\nIF...THEN statement to another line; for readability, a tab has been added to indent the\nsecond line. The compiler includes the tab in the string, which might result in an error:\nIF Employee_District = \"Eastern United States and&\n      Eastern Canada\" THEN ...\nA better way\nA better way to continue a quoted string is to enter a quotation mark before the continuation\ncharacter ('& or \"&, depending on whether the string is delimited by single or double\nquotation marks) at the end of the first line of the string and a plus sign and a quotation mark\n(+' or +\") at the start of the next line. This way, you do not inadvertently include unwanted\ncharacters (such as tabs or spaces) in the string literal:\nIF Employee_District = \"Eastern United States and \"&\n      +\" Eastern Canada\" THEN ...\n"}
{"page": 45, "text": "PowerScript Topics\nPage 45\nThe examples in the PowerBuilder documentation use this method to continue quoted strings.\nContinuing a variable name\nDo not split a line by inserting the continuation character within a variable name. This causes\nan error and the statement fails, because the continuation character splits the variable name\n\"Quantity\":\nTotal-Cost = Price * Quan&\n     tity + (Tax + Shipping)\n1.1.9 Statement separation\nDescription\nAlthough you typically put one statement on each line, you occasionally want to combine\nmultiple statements on a single line. The statement separation character is the semicolon (;).\nSyntax\nStatement1; statement2\nExamples\nThe following line contains three short statements:\nA = B + C;  D = E + F;  Count = Count + 1\n1.1.10 White space\nDescription\nBlanks, tabs, form feeds, and comments are forms of white space. The compiler treats white\nspace as a delimiter and does not consider the number of white space characters.\nUsage\nWhite space in string literals\nThe number of white space characters is preserved when they are part of a string literal\n(enclosed in single or double quotation marks).\nDashes in identifiers\nUnless you have prohibited the use of dashes in identifiers (see Identifier names), you must\nsurround a dash used as a minus sign with spaces. Otherwise, PowerBuilder considers the\ndash as part of a variable name:\nOrder - Balance  // Subtracts Balance from Order\nOrder-Balance    // A variable named Order-Balance\nExamples\nExample 1\nHere the spaces and the comment are white space, so the compiler ignores them:\nA + B /*Adjustment factor */+C\nExample 2\nHere the spaces are within a string literal, so the compiler does not ignore them:\n"}
{"page": 46, "text": "PowerScript Topics\nPage 46\n\"The value of A + B is:\"\n1.1.11 Conditional compilation\nDescription\nThe use of conditional compilation directives causes the PowerBuilder preprocessor to parse\nblocks of code before they are passed to the compiler.\nSyntax\n#IF { NOT } DEFINED  predefined_symbols THEN\n   action1\n{ #ELSEIF DEFINED predefined_symbols THEN\n   action2 }\n{ #ELSE\n   action3 }\n#END IF\nTable 1.7:\nParameter\nDescription\npredefined_symbols\nA predefined identifier or a combination of predefined identifiers separated\nby AND or OR operators. In the current release, you cannot use a user-\ndefined identifier.\naction1,\naction2,\naction3\nThe action you want performed if the condition in the previous statement\nwas met.\nUsage\nConditional compilation enables you to include PowerScript code for a specific target type or\nset of target types in an application. You can also include debug code in your application and\nspecify in the Project painter whether it will be included in your application's executable file.\nThe preprocessor substitutes blank lines for statements with a leading number (#) sign\ncharacter. It passes the code in the action statements to the compiler or converts it to blank\nlines depending on whether the condition in the previous preprocessor directive was met.\nThe following table displays the predefined symbols, the project types to which they\ncorrespond, and their effects on the code passed to the compiler.\nTable 1.8: Predefined symbols for conditional compilation\nPredefined\nsymbols\nTarget type\nCode in this processing block\nPBNATIVE Standard PowerBuilder\nclient-server or distributed\napplications\nFully parsed for the standard application and\nconverted to blank lines for .NET targets.\nPBWEBSERVICE\n.NET Web Service\ncomponent targets\nFully parsed for .NET Web Service targets and\nconverted to blank lines for all other targets.\nDEBUG\nAll PowerBuilder standard\nand .NET targets\nWhen a project's Enable DEBUG Symbol\ncheck box is selected, code is fully parsed by\nthe compiler and included in the deployed\n"}
{"page": 47, "text": "PowerScript Topics\nPage 47\nPredefined\nsymbols\nTarget type\nCode in this processing block\napplication. The code is converted to blank\nlines when the check box is cleared. The\nDEBUG symbol is always defined in the\ndevelopment environment.\nYou can use the NOT operator to include code for all target types that are not of the type\nthat you specify, and you can use AND and OR operators to combine symbols. For example,\ncode that follows this statement will be parsed for all targets except standard PowerBuilder\napplications:\n#if NOT defined PBNATIVE then\nComments can be added to conditional code blocks if they are preceded by double slash\nmarks ( // ) in the same line of code. You cannot use the PowerScript line continuation\ncharacter ( & ) in a conditional code statement. You must use it in code that you embed in the\nconditional block when you use more than one line for a single line of code.\nLimitations and error messages\nConditional compilation is not supported in DataWindow syntax, or in structure or menu\nobjects. You cannot edit the source code for an object to include conditional compilation\nblocks that span function, event, or variable definition boundaries.\nYou must rebuild your application after you add a DEBUG conditional block.\nThe following table shows the types of error messages displayed for incorrect conditional\ncompilation code.\nTable 1.9: Types of error messages returned by the preprocessor\nError message\nDescription\nInvalid if statement\n#if statement without a defined symbol, with an incorrectly defined\nsymbol, or without a then clause\n#end if directive\nexpected\n#if statement without an #end if statement\nUnexpected\npreprocessor\ndirective\nCaused by an #else, #elseif, or #end if statement when not preceded\nby an #if statement\nPreprocessor syntax\nerror\nCaused by including text after an #else or #end if statement when the\ntext is not preceded by comment characters (//)\nExamples\nWhen you run or debug the application in the development environment, the following code\nis always parsed and you always see the message box. When you run the executable file,\nthe code is parsed only if the DEBUG symbol is enabled on the General page in the Project\npainter:\n#if defined DEBUG then\n   MessageBox(\"Debugging\",\"Ctr value is \" + string(i))\n#end if\n"}
{"page": 48, "text": "PowerScript Topics\nPage 48\n1.2 Datatypes\nAbout this chapter\nThis chapter describes the PowerScript datatypes.\n1.2.1 Standard datatypes\nThe datatypes\nThe standard datatypes in PowerBuilder are the familiar datatypes that are used in many\nprogramming languages, including char, integer, decimal, long, and string. In PowerScript,\nyou use these datatypes to declare variables or arrays.\nThese are the standard PowerScript datatypes, followed by a description of each:\nTable 1.10:\nBlob\nLongLong\nBoolean\nLong\nByte\nLongptr\nChar or character\nReal\nDate\nString\nDateTime\nTime\nDecimal or Dec\nUnsignedInteger, UnsignedInt, or UInt\nDouble\nUnsignedLong or ULong\nInteger or Int\n \nBlob\nBinary large object. Used to store an unbounded amount of data (for example, generic binary,\nimage, or large text such as a word-processing document).\nBoolean\nContains true or false.\nByte\n8-bit unsigned integers, from 0 to +255.\nUsing literals\nTo assign a literal value, use any whole positive number in the range 0 to 255. The leading\nplus sign is not required (18 and +18 are the same). For example:\n1        123       200       +55       +200\nChar or character\nA single Unicode character.\nIf you have character-based data that you will want to parse in an application, you might\nwant to define it as an array of type char. Parsing a char array is easier and faster than parsing\nstrings. If you will be passing character-based data to external functions, you might want to\nuse char arrays instead of strings.\n"}
{"page": 49, "text": "PowerScript Topics\nPage 49\nFor more information about passing character-based data to external functions, see\nSection 5.5.1, \u201cUsing external functions\u201d in Application Techniques. For information about\ndatatype conversion when assigning strings to chars and vice versa, see String and char\ndatatypes in PowerBuilder.\nUsing literals\nTo assign a literal value, enclose the character in either single or double quotation marks. For\nexample:\nchar c\nc = 'T'\nc = \"T\"\nDate\nThe date, including the full year (1000 to 3000), the number of the month (01 to 12), and the\nday (01 to 31).\nUsing literals\nTo assign a literal value, separate the year, month, and day with hyphens. For example:\n2001-12-25  // December 25, 2001 \n2003-02-06  // February 6, 2003\nDateTime\nThe date and time in a single datatype, used only for reading and writing DateTime values\nfrom and to a database. To convert DateTime values to datatypes that you can use in\nPowerBuilder, use:\n\u2022 The Date(datetime) function to convert a DateTime value to a PowerBuilder date value\nafter reading from a database\n\u2022 The Time(datetime) function to convert a DateTime value to a PowerBuilder time value\nafter reading from a database\n\u2022 The DateTime (date, time) function to convert a date and (optional) time to a DateTime\nbefore writing to a DateTime column in a database.\nPowerBuilder supports microseconds in the database interface for any DBMS that supports\nmicroseconds.\nDecimal or Dec\nSigned decimal numbers, positive or negative, with up to 28 digits. You can\nplace the decimal point anywhere within the 28 digits -- for example, 123.456,\n0.000000000000000000000001 or 12345678901234.5678901234.\nUsing literals\nTo assign a literal value, use any number with a decimal point and no exponent. The plus sign\nis optional (95 and +95 are the same). For numbers between zero and one, the zero to the left\nof the decimal point is optional (for example, 0.1 and .1 are the same). For whole numbers,\nzeros to the right of the decimal point are optional (32.00, 32.0, and 32. are all the same). For\nexample:\n12.34    0.005     14.0    -6500     +3.5555 \n"}
{"page": 50, "text": "PowerScript Topics\nPage 50\nDouble\nA signed floating-point number with 15 digits of precision and a range from\n2.2250738585073E-308 to 1.79769313486231E+308, and -2.2250738585073E-308 to\n-1.79769313486231E+308.\nInteger or Int\n16-bit signed integers, from -32768 to +32767.\nUsing literals\nTo assign a literal value, use any whole number (positive, negative, or zero). The leading plus\nsign is optional (18 and +18 are the same). For example:\n1        123       1200       +55       -32\nLong\n32-bit signed integers, from -2147483648 to +2147483647.\nUsing literals\nUse literals as for integers, but longer numbers are permitted.\nLongLong\n64-bit signed integers, from -9223372036854775808 to 9223372036854775807.\nUsing literals\nUse literals as for integers, but longer numbers are permitted.\nLongptr\n4 bytes in the 32-bit platform and 8 bytes in the 64-bit platform.\nUsing literals\nIn the 32-bit platform, longptr is the same as long; you can continue using long wherever\nlongptr is required in 32-bit applications. In 64-bit applications, however, using long to hold\nlongptr variables will lead to data truncation from 8 bytes to 4 bytes, or memory corruption if\nyou pass a long ref variable when a longptr ref is required. If you want to move to 64-bit, use\nlongptr wherever required. It does no harm to 32-bit.\nReal\nA signed floating-point number with six digits of precision and a range from 3.402822E-38 to\n3.402822E+38, and -3.402822E-38 to -3.402822E+38.\nUsing literals\nTo assign a literal value, use a decimal value, followed by E, followed by an integer; no\nspaces are allowed. The decimal number before the E follows all the conventions specified\nabove for decimal literals. The leading plus sign in the exponent (the integer following the E)\nis optional (3E5 and 3E+5 are the same). For example:\n2E4        2.5E38   +6.02E3    -4.1E-2\n-7.45E16   7.7E+8   3.2E-38\nString\nAny string of Unicode characters with variable length (0 to 1073741823).\n"}
{"page": 51, "text": "PowerScript Topics\nPage 51\nMost of the character-based data in your application, such as names, addresses, and so\non, will be defined as strings. PowerScript provides many functions that you can use to\nmanipulate strings, such as a function to convert characters in a string to uppercase and\nfunctions to remove leading and trailing blanks.\nFor more information about passing character-based data to external functions, see\nSection 5.5.1, \u201cUsing external functions\u201d in Application Techniques. For information about\ndatatype conversion when assigning strings to chars and vice versa, see String and char\ndatatypes in PowerBuilder.\nUsing literals\nTo assign a literal value, enclose as many as 1024 characters in either single or double quotes,\nincluding a string of zero length or an empty string. For example:\nstring s1\ns1 = 'This is a string'\ns1 = \"This is a string\"\nYou can embed a quotation mark in a string literal if you enclose the literal with the other\nquotation mark. For example, the following statements result in the string Here's a string:\nstring s1\ns1 = \"Here's a string.\"\nYou can also use a tilde (~) to embed a quotation mark in a string literal. For example:\nstring s1 = 'He said, \"It~'s good!\"'\nComplex nesting\nWhen you nest a string within a string that is nested in another string, you can use tildes\nto tell the parser how to interpret the quotation marks. Each pass through the parser strips\naway the outermost quotes and interprets the character after each tilde as a literal. Two tildes\nbecome one tilde, and tilde-quote becomes the quote alone.\nExample 1\nThis string has two levels of nesting:\n\"He said ~\"she said ~~~\"Hi ~~~\" ~\" \"\nThe first pass results in:\nHe said \"she said ~\"Hi ~\" \"\nThe second pass results in:\nshe said \"Hi\"\nThe third pass results in:\nHi\nExample 2\nA more probable example is a string for the Modify function that sets a DataWindow\nproperty. The argument string often requires complex quotation marks (because you must\nspecify one or more levels of nested strings). To understand the quotation marks, consider\nhow PowerBuilder will parse the string. The following string is a possible argument for the\nModify function; it mixes single and double quotes to reduce the number of tildes:\n"}
{"page": 52, "text": "PowerScript Topics\nPage 52\n\"bitmap_1.Invert='0~tIf(empstatus=~~'A~~',0,1)'\"\nThe double quotes tell PowerBuilder to interpret the argument as a string. It contains the\nexpression being assigned to the Invert property, which is also a string, so it must be quoted.\nThe expression itself includes a nested string, the quoted A. First, PowerBuilder evaluates the\nargument for Modify and assigns the single-quoted string to the Invert property. In this pass\nthrough the string, it converts two tildes to one. The string assigned to Invert becomes:\n'0[tab]If(empstatus=~'A~',0,1)'\nFinally, PowerBuilder evaluates the property's expression, converting tilde-quote to quote,\nand sets the bitmap's colors accordingly.\nExample 3\nThere are many ways to specify quotation marks for a particular set of nested strings. The\nfollowing expressions for the Modify function all have the same end result:\n\"emp.Color = ~\"0~tIf(stat=~~~\"a~~~\",255,16711680)~\"\"\n\"emp.Color = ~\"0~tIf(stat=~~'a~~',255,16711680)~\"\"\n\"emp.Color = '0~tIf(stat=~~'a~~',255,16711680)'\"\n\"emp.Color = ~\"0~tIf(stat='a',255,16711680)~\"\"\nRules for quotation marks and tildes\nWhen nesting quoted strings, the following rules of thumb might help:\n\u2022 A tilde tells the parser that the next character should be taken as a literal, not a string\nterminator\n\u2022 Pairs of single quotes ( ' ) can be used in place of pairs of tilde double quotes (~\")\n\u2022 Pairs of tilde tilde single quotes (~~') can be used in place of pairs of triple tilde double\nquotes (~~~\")\nTime\nThe time in 24-hour format, including the hour (00 to 23), minute (00 to 59), second (00 to\n59), and fraction of second (up to six digits), with a range from 00:00:00 to 23:59:59.999999.\nPowerBuilder supports microseconds in the database interface for any DBMS that supports\nmicroseconds.\nUsing literals\nThe time in 24-hour format, including the hour (00 to 23), minute (00 to 59), second (00 to\n59), and fraction of second (up to six digits), with a range from 00:00:00 to 23:59:59.999999.\nYou separate parts of the time with colons -- except for the fractions of seconds, which\nshould be separated by a decimal point. For example:\n21:09:15    // 15 seconds after 9:09 pm\n06:00:00    // Exactly 6 am\n10:29:59    // 1 second before 10:30 am\n10:29:59.9  // 1/10 sec before 10:30 am\nUnsignedInteger, UnsignedInt, or UInt\n16-bit unsigned integers, from 0 to 65535.\nUnsignedLong or ULong\n"}
{"page": 53, "text": "PowerScript Topics\nPage 53\n32-bit unsigned integers, from 0 to 4294967295.\n1.2.2 The Any datatype\nGeneral information\nPowerBuilder also supports the Any datatype, which can hold any kind of value, including\nstandard datatypes, objects, structures, and arrays. A variable whose type is Any is a\nchameleon datatype -- it takes the datatype of the value assigned to it.\nDeclarations and assignments\nYou declare Any variables just as you do any other variable. You can also declare an array of\nAny variables, where each element of the array can have a different datatype.\nYou assign data to Any variables with standard assignment statements. You can assign an\narray to a simple Any variable.\nAfter you assign a value to an Any variable, you can test the variable with the ClassName\nfunction and find out the actual datatype:\nany la_spreadsheetdata\nla_spreadsheetdata = ole_1.Object.cells(1,1).value\nCHOOSE CASE ClassName(la_spreadsheetdata)\n   CASE \"integer\"\n      ...\n   CASE \"string\"\n      ...\nEND CHOOSE\nThese rules apply to Any assignments:\n\u2022 You can assign anything into an Any variable.\n\u2022 You must know the content of an Any variable to make assignments from the Any variable\nto a compatible datatype.\nRestrictions\nIf the value of a simple Any variable is an array, you cannot access the elements of the array\nuntil you assign the value to an array variable of the appropriate datatype. This restriction\ndoes not apply to the opposite case of an array of Any variables -- you can access each Any\nvariable in the array.\nIf the value of an Any variable is a structure, you cannot use dot notation to access the\nelements of the structure until you assign the value to a structure of the appropriate datatype.\nAfter a value has been assigned to an Any variable, it cannot be converted back to a generic\nAny variable without a datatype. Even if you set it to NULL, it retains the datatype of the\nassigned value until you assign another value.\nOperations and expressions\nYou can perform operations on Any variables as long as the datatype of the data in the Any\nvariable is appropriate to the operator. If the datatype is not appropriate to the operator, an\nexecution error occurs.\nFor example, if instance variables ia_1 and ia_2 contain numeric data, this statement is valid:\nany la_3\n"}
{"page": 54, "text": "PowerScript Topics\nPage 54\nla_3 = ia_1 - ia_2\nIf ia_1 and ia_2 contain strings, you can use the concatenation operator:\nany la_3\nla_3 = ia_1 + ia_2\nHowever, if ia_1 contained a number and ia_2 contained a string, you would get an execution\nerror.\nDatatype conversion functions\nPowerScript datatype conversion functions accept Any variables as arguments. When you\ncall the function, the Any variable must contain data that can be converted to the specified\ntype.\nFor example, if ia_any contains a string, you can assign it to a string variable:\nls_string = ia_any\nIf ia_any contains a number that you want to convert to a string, you can call the String\nfunction:\nls_string = String(ia_any)\nOther functions\nIf a function's prototype does not allow Any as a datatype for an argument, you cannot use\nan Any variable without a conversion function, even if it contains a value of the correct\ndatatype. When you compile the script, you get compiler errors such as Unknown function or\nFunction not found.\nFor example, the argument for the Len function refers to a string column in a DataWindow,\nbut the expression itself has a type of Any:\nIF Len(dw_notes.Object.Notes[1]) > 0 THEN // Invalid\nThis works because the string value of the Any expression is explicitly converted to a string:\nIF Len(String(dw_notes.Object.Notes[1])) > 0 THEN\nExpressions whose datatype is Any\nExpressions that access data whose type is unknown when the script is compiled have a\ndatatype of Any. These expressions include expressions or functions that access data in an\nOLE object or a DataWindow object:\nmyoleobject.application.cells(1,1).value\ndw_1.Object.Data[1,1]\ndw_1.Object.Data.empid[99]\nThe objects these expressions point to can change so that the type of data being accessed also\nchanges.\nExpressions that refer to DataWindow data can return arrays and structures and arrays of\nstructures as Any variables. For best performance, assign the DataWindow expression to the\nappropriate array or structure without using an intermediate Any variable.\nOverusing the Any datatype\nDo not use Any variables as a substitute for selecting the correct datatype in your scripts.\nThere are two reasons for this:\n"}
{"page": 55, "text": "PowerScript Topics\nPage 55\n\u2022 At execution time, using Any variables is slow\nPowerBuilder must do much more processing to determine datatypes before it can make\nan assignment or perform an operation involving Any variables. In particular, an operation\nperformed many times in a loop will suffer greatly if you use Any variables instead of\nvariables of the appropriate type.\n\u2022 At compile time, using Any variables removes a layer of error checking from your\nprogramming\nThe PowerBuilder compiler makes sure datatypes are correct before code gets executed.\nWith Any variables, some of the errors that can be caught by the compiler are not found\nuntil the code is run.\n1.2.3 System object datatypes\nObjects as datatypes\nSystem object datatypes are specific to PowerScript. You view a list of all the system objects\nby selecting the System tab in the Browser.\nIn building PowerBuilder applications, you manipulate objects such as windows, menus,\nCommandButtons, ListBoxes, and graphs. Internally, PowerBuilder defines each of these\nkinds of objects as a datatype. Usually you do not need to concern yourself with these objects\nas datatypes -- you simply define the objects in a PowerBuilder painter and use them.\nHowever, sometimes you need to understand how PowerBuilder maintains its system objects\nin a hierarchy of datatypes. For example, when you need to define instances of a window,\nyou define variables whose datatype is window. When you need to create an instance of a\nmenu to pop up in a window, you define a variable whose datatype is menu.\nPowerBuilder maintains its system objects in a class hierarchy. Each type of object is a class.\nThe classes form an inheritance hierarchy of ancestors and descendants.\nExamples\nAll the classes shown in the Browser are actually datatypes that you can use in your\napplications. You can define variables whose type is any class.\nFor example, the following code defines window and menu variables:\nwindow mywin\nmenu mymenu\nIf you have a series of buttons in a window and need to keep track of one of them (such as\nthe last one clicked), you can declare a variable of type CommandButton and assign it the\nappropriate button in the window:\n// Instance variable in a window\ncommandbutton LastClicked\n// In Clicked event for a button in the window.\n// Indicates that the button was the last one\n// clicked by the user.\nLastClicked = This\nBecause it is a CommandButton, the LastClicked variable has all the properties of a\nCommandButton. After the last assignment above, LastClicked's properties have the same\nvalues as the most recently clicked button in the window.\n"}
{"page": 56, "text": "PowerScript Topics\nPage 56\nTo learn more about working with instances of objects through datatypes, see About objects.\n1.2.4 Enumerated datatypes\nAbout enumerated datatypes\nLike the system object datatypes, enumerated datatypes are specific to PowerScript.\nEnumerated datatypes are used in two ways:\n\u2022 As arguments in functions\n\u2022 To specify the properties of an object or control\nYou can list all the enumerated datatypes and their values by selecting the Enumerated tab in\nthe Browser.\nYou cannot create your own enumerated datatypes. As an alternative, you can declare a set of\nconstant variables and assign them initial values. See Declaring constants.\nA variable of one of the enumerated datatypes can be assigned a fixed set of values. Values of\nenumerated datatypes always end with an exclamation point (!). For example, the enumerated\ndatatype Alignment, which specifies the alignment of text, can be assigned one of the\nfollowing three values: Center!, Left!, and Right!:\nmle_edit.Alignment=Right!\nIncorrect syntax\nDo not enclose an enumerated datatype value in quotation marks. If you do, you\nreceive a compiler error.\nAdvantages of enumerated types\nEnumerated datatypes have an advantage over standard datatypes. When an enumerated\ndatatype is required, the compiler checks the data and makes sure it is the correct type. For\nexample, if you set an enumerated datatype variable to any other datatype or to an incorrect\nvalue, the compiler does not allow it.\n1.3 Declarations\nAbout this chapter\nThis chapter explains how to declare variables, constants, and arrays and refer to them in\nscripts, and how to declare remote procedure calls (RPCs) and external functions that reside\nin dynamic link libraries (DLLs).\n1.3.1 Declaring variables\nGeneral information\nBefore you use a variable in a PowerBuilder script, you must declare it (give it a datatype and\na name).\nA variable can be a standard datatype, a structure, or an object. Object datatypes can be\nsystem objects as displayed in the Browser or they can be objects you have defined by\n"}
{"page": 57, "text": "PowerScript Topics\nPage 57\nderiving them from those system object types. For most variables, you can assign it a value\nwhen you declare it. You can always assign it a value within a script.\n1.3.1.1 Where to declare variables\nScope\nYou determine the scope of a PowerScript variable by selecting where you declare it.\nInstance variables have additional access keywords that restrict specific scripts from\naccessing the variable.\nThe following table shows the four scopes of variables.\nTable 1.11: PowerScript variable scopes\nScope\nDescription\nGlobal\nAccessible anywhere in the application. It is independent of any object\ndefinition.\nInstance\nBelongs to an object and is associated with an instance of that object (you\ncan think of it as a property of the object). Instance variables have access\nkeywords that determine whether scripts of other objects can access them.\nThey can belong to the application object, a window, a user object, or a menu.\nShared\nBelongs to an object definition and exists across all instances of the object.\nShared variables retain their value when an object is closed and opened again.\nShared variables are always private. They are accessible only in scripts for\nthe object and for controls associated with the object. They can belong to the\napplication object, a window, a user object, or a menu.\nLocal\nA temporary variable that is accessible only in the script in which you define\nit. When the script has finished executing, the variable constant ceases to\nexist.\nGlobal, instance, and shared declarations\nGlobal, instance, and shared variables can be defined in the Script view of the Application,\nWindow, User Object, or Menu painters. Global variables can also be defined in the Function\npainter:\n1. Select Declare from the first drop-down list in the Script view.\n2. Select the type of variable you want to declare in the second drop-down list of the Script\nview.\n3. Type the declaration in the scripting area of the Script view.\nLocal declarations\nYou declare local variables for an object or control in the script for that object or control.\nDeclaring SQL cursors\nYou can also declare SQL cursors that are global, shared, instance, or local. Open a specific\nscript or select a variable declaration scope in the Script view and type the DECLARE SQL\nstatement or select Paste SQL from the PainterBar or pop-up menu.\n"}
{"page": 58, "text": "PowerScript Topics\nPage 58\n1.3.1.2 About using variables\nGeneral information\nTo use or set a variable's value in a PowerBuilder script, you name the variable. The variable\nmust be known to the compiler -- in other words, it must be in scope.\nYou can use a variable anywhere you need its value -- for example, as a function argument or\nin an assignment statement.\nHow PowerBuilder looks for variables\nWhen PowerBuilder executes a script and finds an unqualified reference to a variable, it\nsearches for the variable in the following order:\n1. A local variable\n2. A shared variable\n3. A global variable\n4. An instance variable\nAs soon as PowerBuilder finds a variable with the specified name, it uses the variable's value.\nReferring to global variables\nTo refer to a global variable, you specify its name in a script. However, if the global variable\nhas the same name as a local or shared variable, the local or shared variable will be found\nfirst.\nTo refer to a global variable that is masked by a local or shared variable of the same name,\nuse the global scope operator (::) before the name:\n::globalname\nFor example, this statement compares the value of local and global variables, both named\ntotal:\nIF total < ::total THEN ...\nReferring to instance variables\nYou can refer to an instance variable in a script if there is an instance of the object open in the\napplication. Depending on the situation, you might need to qualify the name of the instance\nvariable with the name of the object defining it.\nUsing unqualified names\nYou can refer to instance variables without qualifying them with the object name in the\nfollowing cases:\n\u2022 For application-level variables, in scripts for the application object\n\u2022 For window-level variables, in scripts for the window itself and in scripts for controls in\nthat window\n\u2022 For user-object-level variables, in scripts for the user object itself and in scripts for controls\nin that user object\n"}
{"page": 59, "text": "PowerScript Topics\nPage 59\n\u2022 For menu-level variables, in scripts for a menu object, either the highest-level menu or\nscripts for the menu objects included as items on the menu\nFor example, if w_emp has an instance variable EmpID, then you can reference EmpID\nwithout qualification in any script for w_emp or its controls as follows:\nsle_id.Text = EmpID\nUsing qualified names\nIn all other cases, you need to qualify the name of the instance variable with the name of the\nobject using dot notation:\nobject.instancevariable\nThis requirement applies only to Public instance variables. You cannot reference Private\ninstance variables outside the object at all, qualified or not.\nFor example, to refer to the w_emp instance variable EmpID from a script outside the\nwindow, you need to qualify the variable with the window name:\nsle_ID.Text = w_emp.EmpID\nThere is another situation in which references must be qualified. Suppose that w_emp has\nan instance variable EmpID and that in w_emp there is a CommandButton that declares a\nlocal variable EmpID in its Clicked script. In that script, you must qualify all references to the\ninstance variable:\nParent.EmpID\nUsing pronouns as name qualifiers\nTo avoid ambiguity when referring to variables, you might decide to always use qualified\nnames for object variables. Qualified names leave no doubt about whether a variable is local,\ninstance, or shared.\nTo write generic code but still use qualified names, you can use the pronouns This and Parent\nto refer to objects. Pronouns keep a script general by allowing you to refer to the object\nwithout naming it specifically.\nWindow variables in window scripts\nIn a window script, use the pronoun This to qualify the name of a window instance variable.\nFor example, if a window has an instance variable called index, then the following statements\nare equivalent in a script for that window, as long as there is no local or global variable\nnamed index:\nindex = 5\nThis.index = 5\nWindow variables in control scripts\nIn a script for a control in a window, use the pronoun Parent to qualify the name of a\nwindow instance variable -- the window is the parent of the control. In this example, the two\nstatements are equivalent in a script for a control in that window, as long as there is no local\nor global variable named \"index\":\nindex = 5\nParent.index = 5\n"}
{"page": 60, "text": "PowerScript Topics\nPage 60\nNaming errors\nIf a local or global variable exists with the name \"index\", then the unqualified name refers\nto the local or global variable. It is a programming error if you meant to refer to the object\nvariable. You get an informational message from the compiler if you use the same name for\ninstance and global variables.\n1.3.1.3 Syntax of a variable declaration\nSimple syntax\nIn its simplest form, a PowerScript variable declaration requires only two parts: the datatype\nand the variable name. For example:\ndatatype variablename\nFull syntax\nThe full syntax allows you to specify access and an initial value. Arrays and some datatypes,\nsuch as blobs and decimals, accept additional information:\n{ access } datatype { { size } } { { precision } } variablename { = value }\n   {, variablename2 { = value2 } }\nTable 1.12: Variable declaration parameters\nParameter\nDescription\naccess\n(optional)\n(For instance variables only) Keywords specifying the access for the variable.\nFor information, see Access for instance variables.\ndatatype\nThe datatype of the variable. You can specify a standard datatype, a system\nobject, or a previously defined structure.\nFor blobs and decimals, you can specify the size or precision of the data by\nincluding an optional value in brackets.\n{ size }\n(optional)\n(For blobs only) A number, enclosed in braces, specifying the size in bytes\nof the blob. If { size } is omitted, the blob has an initial size of zero and\nPowerBuilder adjusts its size each time it is used at runtime.\nIf you enter a size that exceeds the declared length in a script, PowerBuilder\ntruncates the blob data.\n{ precision }\n(optional)\n(For decimals only) A number, enclosed in braces, specifying the number of\ndigits after the decimal point. If you do not specify a precision, the variable\ntakes the precision assigned to it in the script.\nvariablename The name of the variable (must be a valid PowerScript identifier, as described\nin Identifier names).\nYou can define additional variables with the same datatype by naming\nadditional variable names, separated by commas; each variable can have a\nvalue.\nvalue\n(optional)\nA literal or expression of the appropriate datatype that will be the initial value\nof the variable.\nBlobs cannot be initialized with a value.\nFor information, see Initial values for variables.\n"}
{"page": 61, "text": "PowerScript Topics\nPage 61\nExamples\nDeclaring instance variables\ninteger ii_total = 100 // Total shares\ndate id_date // Date shares were bought\nDeclaring a global variable\nstring gs_name\nDeclaring shared variables\ntime st_process_start\nstring ss_process_name\nDeclaring local variables\nstring ls_city = \"Boston\"\ninteger li_count\nDeclaring blobs\nThis statement declares ib_Emp_Picture a blob with an initial length of zero. The length is\nadjusted when data is assigned to it:\nblob ib_Emp_Picture\nThis statement declares ib_Emp_Picture a blob with a fixed length of 100 bytes:\nblob{100} ib_Emp_Picture\nDeclaring decimals\nThese statements declare shared variables sc_Amount and sc_dollars_accumulated as\ndecimal numbers with two digits after the decimal point:\ndecimal{2} sc_Amount\ndecimal{2} sc_dollars_accumulated\nThis statement declares lc_Rate1 and lc_Rate2 as decimal numbers with four digits after the\ndecimal point:\ndec{4} lc_Rate1, lc_Rate2 \nThis statement declares lc_Balance as a decimal with zero digits after the decimal point:\ndecimal{0} lc_Balance\nThis statement does not specify the number of decimal places for lc_Result. After the product\nof lc_Op1 and lc_Op2 is assigned to it, lc_Result has four decimal places:\ndec lc_Result\ndec{2} lc_Op1, lc_Op2\nlc_Result = lc_Op1 * lc_Op2\n1.3.1.3.1 Datatype of a variable\nA PowerScript variable can be declared as one of the following datatypes:\n\u2022 A standard datatype (such as an integer or string).\n\u2022 An object or control (such as a window or CommandButton).\n"}
{"page": 62, "text": "PowerScript Topics\nPage 62\n\u2022 An object or structure that you have defined (such as a window called mywindow). An\nobject you have defined must be in a library on the application's library search path when\nthe script is compiled.\n1.3.1.3.2 Variable names\nIn a well-planned application, standards determine how you name your PowerScript\nvariables. Naming conventions make scripts easy to understand and help you avoid name\nconflicts. A typical approach is to include a prefix that identifies the scope and the datatype\nof the variable. For example, a prefix for an instance variable's name typically begins with\ni (such as ii_count or is_empname), a local integer variable's name would be li_total and a\nglobal integer variable's name would be gi_total. For information about naming conventions,\nsee the Section 2.1.8.3, \u201cNaming conventions\u201d in Users Guide.\nX and Y as variable names\nAlthough you might think of x and y as typical variable names, in PowerBuilder they are\nalso properties that specify an object's onscreen coordinates. If you use them as variables and\nforget to declare them, you do not get a compiler error. Instead, PowerBuilder assumes you\nwant to move the object, which might lead to unexpected results in your application.\n1.3.1.3.3 Initial values for variables\nWhen you declare a PowerScript variable, you can accept the default initial value or specify\nan initial value in the declaration.\nDefault values for variables\nIf you do not initialize a variable when you declare it, PowerBuilder sets the variable to the\ndefault value for its datatype as shown in the following table.\nTable 1.13: Default initial values for variables\nFor this variable datatype\nPowerBuilder sets this default value\nBlob\nA blob of 0 length; an empty blob\nChar (or character)\nASCII value 0\nBoolean\nfalse\nDate\n1900-01-01 (January 1, 1900)\nDateTime\n1900-01-01 00:00:00\nNumeric (byte, integer, long, longlong,\ndecimal, real, double, UnsignedInteger, and\nUnsignedLong)\n0\nString\nEmpty string (\"\")\nTime\n00:00:00 (midnight)\nSpecifying a literal as a initial value\nTo initialize a variable when you declare it, place an equal sign (=) and a literal appropriate\nfor that variable datatype after the variable. For information about literals for specific\ndatatypes, see Standard datatypes.\n"}
{"page": 63, "text": "PowerScript Topics\nPage 63\nDo not use a function's return value\nYou should not initialize a variable by assigning it the return value of a global user\ndefined function, because it might not compile correctly, or because it could lead to\nconfusion about the value assigned. For example, do not use:\ninteger i = f_return_one()\nAlthough you can use global system functions or expressions to initialize variables with\ncompile time values in a variable declaration statement, for runtime value assignments, you\nmust also declare variables and assign their values in separate statements.\nThis example declares li_count as an integer whose value is 5:\ninteger li_count=5\nThis example declares li_a and li_b as integers and initializes li_a to 5 and li_b to 10:\ninteger li_a=5, li_b=10\nThis example initializes ls_method with the string \"UPS\":\nstring ls_method=\"UPS\"\nThis example initializes ls_headers to three words separated by tabs:\nstring ls_headers = \"Name~tAddress~tCity\"\nThis example initializes li_a to 1 and li_c to 100, leaving li_b set to its default value of zero:\ninteger li_a=1, li_b, li_c=100\nThis example declares ld_StartDate as a date and initializes it with the date February 1, 2004:\ndate ld_StartDate = 2004-02-01\nSpecifying an expression as an initial value\nYou can initialize a variable with the value of an existing variable or expression, such as:\ninteger i = 100\ninteger j = i\nWhen you do this, the second variable is initialized with the value of the expression when the\nscript is compiled. The initialization is not reevaluated at runtime.\nIf the expression's value changes\nBecause the expression's value is set to the variable when the script is compiled (not at\nruntime) make sure the expression is not one whose value is based on current conditions.\nIf you want to specify an expression whose value will be different when the application is\nexecuted, do not initialize the variable in the declaration. For such values, declare the variable\nand assign the value in separate statements.\nIn this declaration, the value of d_date is the date the script is compiled:\ndate d_date = Today( )\nIn contrast, these statements result in d_date being set to the date the application is run:\ndate d_date\n"}
{"page": 64, "text": "PowerScript Topics\nPage 64\nd_date = Today( )\nHow shared variables are initialized\nWhen you use a shared variable in a script, the variable is initialized when the first instance\nof the object is opened. When the object is closed, the shared variable continues to exist until\nyou exit the application. If you open the object again without exiting the application, the\nshared variable will have the value it had when you closed the object.\nFor example, if you set the shared variable Count to 20 in the script for a window, then close\nthe window, and then reopen the window without exiting the application, Count will be equal\nto 20.\nWhen using multiple instances of windows\nIf you have multiple instances of the window in the example above, Count will be\nequal to 20 in each instance. Since shared variables are shared among all instances\nof the window, changing Count in any instance of the window changes it for all\ninstances.\nHow instance variables are initialized\nWhen you define an instance variable for a window, menu, or application object, the instance\nvariable is initialized when the object is opened. Its initial value is the default value for its\ndatatype or the value specified in the variable declarations.\nWhen you close the object, the instance variable ceases to exist. If you open the object again,\nthe instance variable is initialized again.\nWhen to use multiple instances of windows\nWhen you build a script for one of multiple instances of a window, instance variables can\nhave a different value in each instance of the window. For example, to set a flag based on the\ncontents of the instance of a window, you would use an instance variable.\nWhen to use shared variables instead\nUse a shared variable instead of an instance variable if you need a variable that:\n\u2022 Keeps the same value over multiple instances of an object\n\u2022 Continues to exist after the object is closed\n1.3.1.3.4 Access for instance variables\nDescription\nThe general syntax for declaring PowerScript variables (see Syntax of a variable declaration)\nshowed that you can specify access keywords in a declaration for an instance variable. This\nsection describes those keywords.\nWhen you specify an access right for a variable, you are controlling the visibility of the\nvariable or its visibility access. Access determines which scripts recognize the variable's\nname.\nFor a specified access right, you can control operational access with modifier keywords. The\nmodifiers specify which scripts can read the variable's value and which scripts can change it.\n"}
{"page": 65, "text": "PowerScript Topics\nPage 65\nSyntax\n{ access-right } { readaccess } { writeaccess } datatype variablename\nThe following table describes the parameters you can use to specify access rights for instance\nvariables.\nTable 1.14: Instance variable declaration parameters for access rights\nParameter\nDescription\naccess-right\n(optional)\nA keyword specifying where the variable's name will be recognized. Values\nare:\n\u2022 PUBLIC -- (Default) Any script in the application can refer to the variable.\nIn another object's script, you use dot notation to qualify the variable name\nand identify the object it belongs to.\n\u2022 PROTECTED -- Scripts for the object for which the variable is declared\nand its descendants can refer to the variable.\n\u2022 PRIVATE -- Scripts for the object for which the variable is declared can\nrefer to the variable. You cannot refer to the variable in descendants of the\nobject.\nreadaccess\n(optional)\nA keyword restricting the ability of scripts to read the variable's value. Values\nare:\n\u2022 PROTECTEDREAD -- Only scripts for the object and its descendants can\nread the variable.\n\u2022 PRIVATEREAD -- Only scripts for the object can read the variable.\nWhen access-right is PUBLIC, you can specify either keyword. When access-\nright is PROTECTED, you can specify only PRIVATEREAD. You cannot\nspecify a modifier for PRIVATE access, because PRIVATE is already fully\nrestricted.\nIf readaccess is omitted, any script can read the variable.\nwriteaccess\n(optional)\nA keyword restricting the ability of scripts to change the variable's value.\nValues are:\n\u2022 PROTECTEDWRITE -- Only scripts for the object and its descendants can\nchange the variable.\n\u2022 PRIVATEWRITE -- Only scripts for the object can change the variable.\nWhen access-right is PUBLIC, you can specify either keyword. When access-\nright is PROTECTED, you can specify only PRIVATEWRITE. You cannot\nspecify a modifier for PRIVATE access, because PRIVATE is already fully\nrestricted.\nIf writeaccess is omitted, any script can change the variable.\ndatatype\nA valid datatype. See Syntax of a variable declaration.\n"}
{"page": 66, "text": "PowerScript Topics\nPage 66\nParameter\nDescription\nvariablename A valid identifier. See Syntax of a variable declaration.\nUsage\nAccess modifiers give you more control over which objects have access to a particular\nobject's variables. A typical use is to declare a public variable but only allow the owner object\nto modify it:\npublic protectedwrite integer ii_count\nYou can also group declarations that have the same access by specifying the access-right\nkeyword as a label (see Another format for access-right keywords).\nWhen you look at exported object syntax, you might see the access modifiers\nSYSTEMREAD and SYSTEMWRITE. Only PowerBuilder can access variables with these\nmodifiers. You cannot refer to variables with these modifiers in your scripts and functions\nand you cannot use these modifiers in your own definitions.\nExamples\nTo declare these variables, select Declare>Instance Variables in the appropriate painter.\nThese declarations use access keywords to control the scripts that have access to the\nvariables:\nprivate integer ii_a, ii_n\npublic  integer ii_Subtotal\nprotected integer ii_WinCount\nThis protected variable can only be changed by scripts of the owner object; descendants of\nthe owner can read it:\nprotected privatewrite string is_label\nThese declarations have public access (the default) but can only be changed by scripts in the\nobject itself:\nprivatewrite real ir_accum, ir_current_data\nThis declaration defines an integer that only the owner objects can write or read but whose\nname is reserved at the public level:\npublic privateread privatewrite integer ii_reserved\nPrivate variable not recognized outside its object\nSuppose you have defined a window w_emp with a private integer variable ii_int:\nprivate integer ii_int\nIn a script you declare an instance of the window called w_myemp. If you refer to the private\nvariable ii_int, you get a compiler warning that the variable is not defined (because the\nvariable is private and is not recognized in scripts outside the window itself):\nw_emp w_myemp\nw_myemp.ii_int = 1 // Variable not defined\nPublic variable with restricted access\n"}
{"page": 67, "text": "PowerScript Topics\nPage 67\nSuppose you have defined a window w_emp with a public integer variable ii_int with write\naccess restricted to private:\npublic privatewrite integer ii_int\nIf you write the same script as above, the compiler warning will say that you cannot write to\nthe variable (the name is recognized because it is public, but write access is not allowed):\nw_emp w_myemp\nw_myemp.ii_int = 1 // Cannot write to variable \n1.3.1.3.5 Another format for access-right keywords\nDescription\nYou can also group declarations of PowerScript variables according to access by specifying\nthe access-right keyword as a label. It appears on its own line, followed by a colon (:).\nSyntax\naccess-right:\n{ readaccess } { writeaccess } datatype  variablename\n{ access-right } { readaccess } { writeaccess } datatype  variablename\n{ readaccess } { writeaccess } datatype  variablename\nWithin a labeled group of declarations, you can override the access on a single line by\nspecifying another access-right keyword with the declaration. The labeled access takes effect\nagain on the following lines.\nExamples\nIn these declarations, the instance variables have the access specified by the label that\nprecedes them. Another private variable is defined at the end, where private overrides the\npublic label:\nPrivate:\ninteger ii_a=10, ii_b=24\nstring  is_Name, is_Address1\nProtected:\ninteger ii_Units\ndouble  idb_Results\nstring  is_Lname\nPublic:\ninteger ii_Weight\nstring  is_Location=\"Home\"\nprivate integer ii_test\nSome of these protected declarations have restricted write access:\nProtected:\ninteger ii_Units\nprivatewrite double  idb_Results\nprivatewrite string  is_Lname\n1.3.2 Declaring constants\nDescription\nAny PowerScript variable declaration of a standard datatype that can be assigned an initial\nvalue can be a constant instead of a variable. To make it a constant, include the keyword\nCONSTANT in the declaration and assign it an initial value.\n"}
{"page": 68, "text": "PowerScript Topics\nPage 68\nSyntax\nCONSTANT { access } datatype constname = value \nThe following table shows the parameters used to declare constants.\nTable 1.15: Constant variable declaration parameters\nParameter Description\nCONSTANTDeclares a constant instead of a variable. The CONSTANT keyword can be\nbefore or after the access keywords.\naccess\n(optional)\n(For instance variables only) Keywords specifying the access for the constant.\nFor information, see Access for instance variables.\ndatatype\nA standard datatype for the constant. For decimals, you can include an\noptional value in brackets to specify the precision of the data. Blobs cannot be\nconstants.\nFor information about PowerBuilder datatypes, see Standard datatypes.\nconstname\nThe name of the constant (must be a valid PowerScript identifier, as described\nin Identifier names).\nvalue\nA literal or expression of the appropriate datatype that will be the value of\nthe constant. The value is required. For information, see Initial values for\nvariables.\nUsage\nWhen declaring a constant, an initial value is required. Otherwise, a compiler error occurs.\nAssigning a value to a constant after it is declared (that is, redefining a constant in a\ndescendant object) also causes a compiler error.\nExamples\nAlthough PowerScript is not case sensitive, these examples of local constants use a\nconvention of capitalizing constant names:\nconstant string LS_HOMECITY = \"Boston\"\nconstant real LR_PI = 3.14159265\n1.3.3 Declaring arrays\nDescription\nAn array is an indexed collection of elements of a single datatype. In PowerBuilder, an array\ncan have one or more dimensions. One-dimensional arrays can have a fixed or variable size;\nmultidimensional arrays always have a fixed size. Each dimension of an array can have\n2,147,483,647 bytes of elements.\nAny simple variable declaration becomes an array when you specify brackets after the\nvariable name. For fixed-size arrays, you specify the sizes of the dimensions inside those\nbrackets.\nSyntax\n{ access } datatype variablename { d1, ..., dn } { = { valuelist } }\n"}
{"page": 69, "text": "PowerScript Topics\nPage 69\nThe following table describes the parameters used to declare array variables.\nTable 1.16: Array variable declaration parameters\nParameterDescription\naccess\n(optional)\n(For instance variables only) Keywords specifying the access for the variable.\nFor information, see Access for instance variables.\ndatatype\nThe datatype of the variable. You can specify a standard datatype, a system\nobject, or a previously defined structure.\nFor decimals, you can specify the precision of the data by including an optional\nvalue in brackets after datatype (see Syntax of a variable declaration):\ndecimal {2} variablename [ ]\nFor blobs, fixed-length blobs within an array are not supported. If you specify a\nsize after datatype, it is ignored.\nvariablename\nThe name of the variable (name must be a valid PowerScript identifier, as\ndescribed in Identifier names).\nYou can define additional arrays with the same datatype by naming additional\nvariable names with brackets and optional value lists, separated by commas.\n[ { d1, ...,\ndn } ]\nBrackets and (for fixed-size arrays) one or more integer values (d1 through dn,\none for each dimension) specifying the sizes of the dimensions.\nFor a variable-size array, which is always one-dimensional, specify brackets\nonly.\nFor more information on how variable-size arrays change size, see Size of\nvariable-size arrays.\nFor a fixed-size array, the number of dimensions is determined by the number of\nintegers you specify and is limited only by the amount of available memory.\nFor fixed-size arrays, you can use TO to specify a range of element numbers\n(instead of a dimension size) for one or more of the dimensions. Specifying TO\nallows you to change the lower bound of the dimension (upperbound must be\ngreater than lowbound):\n[\nd1lowbound TO d1upperbound {, ... ,\ndnlowbound TO dnupperbound } \n]\n{ valuelist }\n(optional)\nA list of initial values for each position of the array. The values are separated by\ncommas and the whole list is enclosed in braces. The number of values cannot be\ngreater than the number of positions in the array. The datatype of the values must\nmatch datatype.\nExamples\nThese declarations create variable-size arrays:\ninteger li_stats[ ]        // Array of integers.\ndecimal {2} ld_prices[ ]   // Array of decimals with \n                           // 2 places of precision.\nblob lb_data[ ]            // Array of variable-size \n"}
{"page": 70, "text": "PowerScript Topics\nPage 70\n                           // blobs.\ndate ld_birthdays[ ]       // Array of dates.\nstring ls_city[ ]          // Array of strings. \n                           // Each string can be \n                           // any length.\nThis statement declares a variable-size array of decimal number (the declaration does not\nspecify a precision, so each element in the array takes the precision of the value assigned to\nit):\ndec lc_limit[ ]\nFixed arrays\nThese declarations create fixed-size, one-dimensional arrays:\ninteger li_TaxCode[3]  // Array of 3 integers.\nstring ls_day[7]       // Array of 7 strings.\nblob ib_image[10]      // Array of 10 \n                       // variable-size blobs.\ndec{2} lc_Cost[10]     // Array of 10 decimal\n                       // numbers.\n                       // Each value has 2 digits \n                       // following the decimal\n                       // point.\ndecimal lc_price[20]   // Array of 20 decimal\n                       // numbers.\n                       // Each takes the precision \n                       // of the value assigned.\nUsing TO to change array index values\nThese fixed-size arrays use TO to change the range of index values for the array:\nreal lr_Rate[2 to 5]      // Array of 4 real numbers: \n                           // Rate[2] through Rate[5]\ninteger li_Qty[0 to 2]     // Array of 3 integers\nstring ls_Test[-2 to 2]    // Array of 5 strings\ninteger li_year[76 to 96]  // Array of 21 integers\nstring ls_name[-10 to 15]  // Array of 26 strings\nIncorrect declarations using TO\nIn an array dimension, the second number must be greater than the first. These declarations\nare invalid:\ninteger li_count[10 to 5]     // INVALID: 10 is \n                              // greater than 5\ninteger li_price[-10 to -20]  // INVALID: -10\n                              // is greater than -20\nArrays with two or more dimensions\nThis declaration creates a six-element, two-dimensional integer array. The individual\nelements are li_score[1,1], li_score[1,2], li_score[1,3], li_score[2,1], li_score[2,2], and\nli_score[2,3]:\ninteger li_score[2,3]\nThis declaration specifies that the indexes for the dimensions are 1 to 5 and 10 to 25:\ninteger li_RunRate[1 to 5, 10 to 25]\nThis declaration creates a 3-dimensional 45,000-element array:\n"}
{"page": 71, "text": "PowerScript Topics\nPage 71\nlong ll_days[3, 300, 50]\nThis declaration changes the subscript range for the second and third dimension:\ninteger li_staff[100, 0 to 20, -5 to 5]\nMore declarations of multidimensional arrays:\nstring ls_plant[3,10]   // two-dimensional array\n                        // of 30 strings\ndec{2} lc_rate[3,4]     // two-dimensional array of 12\n                        // decimals with 2 digits\n                        // after the decimal point\nThis declaration creates three decimal arrays:\ndecimal{3} lc_first[10],lc_second[15,5],lc_third[ ]\n1.3.3.1 Values for array elements\nGeneral information\nPowerBuilder initializes each element of an array to the same default value as its underlying\ndatatype. For example, in a newly declared integer array:\ninteger li_TaxCode[3]\nthe elements li_TaxCode[1], li_TaxCode[2], and li_TaxCode[3] are all initialized to zero.\nFor information about default values for basic datatypes, see Initial values for variables.\nSimple array\nIn a simple array, you can override the default values by initializing the elements of the\narray when you declare the array. You specify the values in a comma-separated list of values\nenclosed in braces. You do not have to initialize all the elements of the array, but you cannot\ninitialize values in the middle or end without initializing the first elements.\nMultidimensional array\nIn a multidimensional array, you still provide the values in a simple, comma-separated list.\nWhen the values are assigned to array positions, the first dimension is the fastest-varying\ndimension, and the last dimension is the slowest-varying. In other words, the values are\nassigned to array positions by looping over all the values of the first dimension for each value\nof the second dimension, then looping over all the values of the second dimension for each\nvalue of the third, and so on.\nAssigning values\nYou can assign values to an array after declaring it using the same syntax of a list of\nvalues within braces:\ninteger li_Arr[]\nLi_Arr = {1, 2, 3, 4}\nExamples\nExample 1\nThis statement declares an initialized one-dimensional array of three variables:\n"}
{"page": 72, "text": "PowerScript Topics\nPage 72\nreal lr_Rate[3]={1.20, 2.40, 4.80}\nExample 2\nThis statement initializes a two-dimensional array:\ninteger li_units[3,4] = {1,2,3, 1,2,3, 1,2,3, 1,2,3}\nAs a result:\nLi_units[1,1], [1,2], [1,3], and [1,4] are all 1\nLi_units[2,1], [2,2], [2,3], and [2,4] are all 2\nLi_units[3,1], [3,2], [3,3], and [3,4] are all 3\nExample 3\nThis statement initializes the first half of a 3-dimensional array:\ninteger li_units[3,4,2] = &\n {1,2,3, 1,2,3, 1,2,3, 1,2,3}\nAs a result:\nLi_units[1,1,1], [1,2,1], [1,3,1], and [1,4,1] are all 1\nLi_units[2,1,1], [2,2,1], [2,3,1], and [2,4,1] are all 2\nLi_units[3,1,1], [3,2,1], [3,3,1], and [3,4,1] are all 3\nLi_units[1,1,2], [1,2,2], [1,3,2], and [1,4,2] are all 0\nLi_units[2,1,2], [2,2,2], [2,3,2], and [2,4,2] are all 0\nLi_units[3,1,2], [3,2,2], [3,3,2], and [3,4,2] are all 0\n1.3.3.2 Size of variable-size arrays\nGeneral information\nA variable-size array consists of a variable name followed by square brackets but no number.\nPowerBuilder defines the array elements by use at execution time (subject only to memory\nconstraints). Only one-dimensional arrays can be variable-size arrays.\nBecause you do not declare the size, you cannot use the TO notation to change the lower\nbound of the array, so the lower bound of a variable-size array is always 1.\nHow memory is allocated\nInitializing elements of a variable-size array allocates memory for those elements. You\nspecify initial values just as you do for fixed-size arrays, by listing the values in braces. The\nfollowing statement sets code[1] equal to 11, code[2] equal to 242, and code[3] equal to\n27. The array has a size of 3 initially, but the size will change if you assign values to higher\npositions:\ninteger li_code[ ]={11,242,27}\nFor example, these statements declare a variable-size array and assigns values to three array\nelements:\nlong ll_price[ ]\nll_price[100] = 2000\n"}
{"page": 73, "text": "PowerScript Topics\nPage 73\nll_price[50]  = 3000\nll_price[110] = 5000\nWhen these statements first execute, they allocate memory as follows:\n\u2022 The statement ll_price[100]=2000 will allocate memory for 100 long numbers ll_price[1]\nto ll_price[100], then assign 0 (the default for numbers) to ll_price[1] through ll_price[99]\nand assign 2000 to ll_price[100].\n\u2022 The statement ll_price[50]=3000 will not allocate more memory but will assign the value\n3000 to the 50th element of the ll_price array.\n\u2022 The statement ll_price[110]=5000 will allocate memory for 10 more long numbers named\nll_price[101] to ll_price[110] and then assign 0 (the default for numbers) to ll_price[101]\nthrough ll_price[109] and assign 5000 to ll_price[110].\n1.3.3.3 More about arrays\nThis section provides technical details about:\n\u2022 Assigning one array to another\n\u2022 Using arraylists to assign values to an array\n\u2022 Errors that occur when addressing arrays\n1.3.3.3.1 Assigning one array to another\nGeneral information\nWhen you assign one array to another, PowerBuilder uses the following rules to map the\nvalues of one onto the other.\nOne-dimensional arrays\nTo an unbounded array\nThe target array is the same as the source:\ninteger a[ ], b[ ]\na = {1,2,3,4}\nb = a\nTo a bounded array\nIf the source array is smaller, values from the source array are copied to the target array and\nextra values are set to zero. In this example, b[5] and b[6] are set to 0:\ninteger a[ ], b[6]\na = {1,2,3,4}\nb = a\nIf the source array is larger, values from the source array are copied to the target array until\nit is full (and extra values from the source array are ignored). In this example, the array b has\nonly the first three elements of a:\ninteger a[ ], b[3]\na = {1,2,3,4}\nb = a\n"}
{"page": 74, "text": "PowerScript Topics\nPage 74\nMultidimensional arrays\nPowerBuilder stores multidimensional arrays in column major order, meaning the first\nsubscript is the fastest varying -- [1,1], [2,1], [3,1]).\nWhen you assign one array to another, PowerBuilder linearizes the source array in column\nmajor order, making it a one-dimensional array. PowerBuilder then uses the rules for one-\ndimensional arrays (described above) to assign the array to the target.\nNot all array assignments are allowed, as described in the following rules.\nOne multidimensional array to another\nIf the dimensions of the two arrays match, the target array becomes an exact copy of the\nsource:\ninteger a[2,10], b[2,10]\na = b\nIf both source and target are multidimensional but do not have matching dimensions, the\nassignment is not allowed and the compiler reports an error:\ninteger a[2,10], b[4,10]\na = b // Compiler error\nOne-dimensional array to a multidimensional array\nA one-dimensional array can be assigned to a multidimensional array. The values are mapped\nonto the multidimensional array in column major order:\ninteger a[ ], b[2,2]\nb = a\nMultidimensional array to a one-dimensional array\nA multidimensional array can also be assigned to a one-dimensional array. The source is\nlinearized in column major order and assigned to the target:\ninteger a[ ], b[2,2]\na = b\nExamples\nSuppose you declare three arrays (a, b, and c). One (c) is unbounded and one-dimensional;\nthe other two (a and b) are multidimensional with different dimensions:\ninteger c[ ], a[2,2], b[3,3] = {1,2,3,4,5,6,7,8,9}\nArray b is laid out like this:\nTable 1.17:\n1 for b[1,1]\n4 for b[1,2]\n7 for b[1,3]\n2 for b[2,1]\n5 for b[2,2]\n8 for b[2,3]\n3 for b[3,1]\n6 for b[3,2]\n9 for b[3,3]\nThis statement causes a compiler error, because a and b have different dimensions:\na = b // Compiler error\nThis statement explicitly linearizes b into c:\n"}
{"page": 75, "text": "PowerScript Topics\nPage 75\nc = b\nYou can then assign the linearized version of the array to a:\na = c\nThe values in array a are laid out like this:\nTable 1.18:\n1 for a[1,1]\n3 for a[1,2]\n2 for a[2,1]\n4 for a[2,2]\nInitializing a with an arraylist produces the same result:\ninteger a[2,2] = {1,2,3,4}\nThe following section describes arraylists.\n1.3.3.3.2 Using arraylists to assign values to an array\nGeneral information\nIn PowerBuilder, an arraylist is a list of values enclosed in braces used to initialize arrays.\nAn arraylist represents a one-dimensional array, and its values are assigned to the target array\nusing the rules for assigning arrays described in Assigning one array to another.\nExamples\nIn this declaration, a variable-size array is initialized with four values:\ninteger a[ ] = {1,2,3,4}\nIn this declaration, a fixed-size array is initialized with four values (the rest of its values are\nzeros):\ninteger a[10] = {1,2,3,4}\nIn this declaration, a fixed-size array is initialized with four values. Because the array's size is\nset at 4, the rest of the values in the arraylist are ignored:\ninteger a[4] = {1,2,3,4,5,6,7,8}\nIn this declaration, values 1, 2, and 3 are assigned to the first column and the rest to the\nsecond column:\ninteger a[3,2] = {1,2,3,4,5,6}\nTable 1.19:\n1\n4\n2\n5\n3\n6\nIf you think of a three-dimensional array as having pages of rows and columns, then the first\ncolumn of the first page has the values 1 and 2, the second column on the first page has 3 and\n4, and the first column on the second page has 5 and 6.\nThe second column on the second page has zeros:\ninteger a[2,2,2] = {1,2,3,4,5,6}\n"}
{"page": 76, "text": "PowerScript Topics\nPage 76\nTable 1.20:\n1\n3\n \n5\n0\n2\n4\n \n6\n0\n1.3.3.3.3 Errors that occur when addressing arrays\nFixed-size arrays\nIn PowerBuilder, referring to array elements outside the declared size causes an error at\nruntime; for example:\nint test[10]\ntest[11]=50                        // This causes an execution error.\ntest[0]=50                         // This causes an execution error.\nint trial[5,10]\ntrial [6,2]=75            // This causes an execution error.\ntrial [4,11]=75       // This causes an execution error.\nVariable-size arrays\nAssigning a value to an element of a variable-size array that is outside its current values\nincreases the array's size. However, accessing a variable-size array above its largest assigned\nvalue or below its lower bound causes an error at runtime:\ninteger li_stock[ ]\nli_stock[50]=200\n         // Establish array size 50 elements.\nIF li_stock[51]=0 then Beep(1)  \n         // This causes an execution error.\nIF li_stock[0]=0 then Beep(1)   \n         // This causes an execution error.\n1.3.4 Declaring external functions\nDescription\nExternal functions are functions written in languages other than PowerScript and stored\nin dynamic link libraries. On Windows, dynamic libraries have the extension DLL. If you\ndeploy a component written in PowerBuilder to a UNIX server, the dynamic libraries it calls\nhave the extension .so, .sl, or .a, depending on the UNIX operating system. You can use\nexternal functions that are written in any language that supports dynamic libraries.\nBefore you can use an external function in a script, you must declare it as one of two types:\n\u2022 Global external functions\nThese are available anywhere in the application.\n\u2022 Local external functions\nThese are defined for a particular type of window, menu, user object, or user-defined\nfunction. These functions are part of the object's definition and can always be used in\nscripts for the object itself. You can also choose to make these functions accessible to other\nscripts.\nTo understand how to declare and call an external function, see the documentation from the\ndeveloper of the external function library.\n"}
{"page": 77, "text": "PowerScript Topics\nPage 77\nSyntax\nExternal function syntax\nUse the following syntax to declare an external function:\n{ access } FUNCTION returndatatype name ( { { REF } datatype1 arg1,\n   ..., { REF } datatypen argn } ) LIBRARY \"libname\"\n   ALIAS FOR \"extname{;ansi}\"\nExternal subroutine syntax\nTo declare external subroutines (which are the same as external functions except that they do\nnot return a value), use this syntax:\n{ access } SUBROUTINE name ( { { REF } datatype1 arg1, ...,\n   { REF } datatypen argn } ) LIBRARY \"libname\"\n   ALIAS FOR \"extname{;ansi}\"\nThe following table describes the parameters used to declare external functions and\nsubroutines:\nTable 1.21: External function or subroutine declaration parameters\nParameter\nDescription\naccess\n(optional)\n(Local external functions only) Public, Protected, or Private specifies the\naccess level of a local external function. The default is Public.\nFor more information, see the section about specifying access of local\nfunctions in Usage.\nFUNCTION or\nSUBROUTINE\nA keyword specifying the type of call, which determines the way return\nvalues are handled. If there is a return value, declare it as a FUNCTION; if\nit returns nothing or returns VOID, specify SUBROUTINE.\nreturndatatype\nThe datatype of the value returned by the function.\nname\nThe name of a function or subroutine that resides in a DLL. Function\nnames cannot contain special characters, such as the @ character, because\nthey cause a compiler error. Use the ALIAS FOR clause described later in\nthis table if the function name in the DLL contains special characters.\nREF\nA keyword that specifies that you are passing by reference the argument\nthat follows REF. The function can store a value in arg that will be\naccessible to the rest of the PowerBuilder script.\ndatatype arg\nThe datatype and name of the arguments for the function or subroutine.\nThe list must match the definition of the function in the DLL. Each\ndatatype arg pair can be preceded by REF.\nFor more information on passing arguments, see Section 5.5.1.3, \u201cPassing\narguments\u201d in Application Techniques.\nLIBRARY\n\"libname\"\nA keyword followed by a string containing the name of the dynamic\nlibrary in which the function or subroutine is stored. libname is a dynamic\nlink library, which is a file that usually has the extension DLL on\nWindows.\nALIAS FOR\n\"extname\" (optional)\nKeywords followed by a string giving the name of the function as defined\nin the dynamic library. If the name in the dynamic library is not the name\n"}
{"page": 78, "text": "PowerScript Topics\nPage 78\nParameter\nDescription\nyou want to use in your script, or if the name in the database is not a legal\nPowerScript name, you must specify ALIAS FOR \"extname\" to establish\nthe association between the PowerScript name and the external name.\n;ansi\nRequired if the function passes a string as an argument or returns a string\nthat uses ANSI encoding. Even if you use the default name for an ANSI\nfunction, you must always use the ALIAS keyword if you want to specify\nthat the string uses ANSI encoding, because you must qualify the ALIAS\nwith the ansi keyword.\nUsage\nSpecifying access of local functions\nWhen declaring a local external function, you can specify its access level -- which scripts\nhave access to the function.\nThe following table describes where local external functions can be used when they are\ndeclared with a given access level:\nTable 1.22: Access levels for local external functions\nAccess level\nWhere you can use the local external function\nPublic\nAny script in the application.\nPrivate\nScripts for events in the object for which the function is declared. You\ncannot use the function in descendants of the object.\nProtected\nScripts for the object for which the function is declared and its descendants.\nUse of the access keyword with local external functions works the same as the access-right\nkeywords for instance variables.\nAvailability of the dynamic library at runtime\nTo be available to a PowerBuilder application running on any Windows platform, the DLL\nmust be in one of the following directories:\n\u2022 The current directory\n\u2022 The Windows directory\n\u2022 The Windows System subdirectory\n\u2022 Directories on the DOS path\nExamples\nIn the examples application that comes with PowerBuilder, external functions are declared as\nlocal external functions in a user object called u_external_function_win32. The scripts that\ncall the functions are user object functions, but because they are part of the same user object,\nyou do not need to use object notation to call them.\nExample 1\n"}
{"page": 79, "text": "PowerScript Topics\nPage 79\nThese declarations allow PowerBuilder to call the functions required for playing a sound in\nthe WINMM.DLL:\n//playsoundFUNCTION boolean sndPlaySoundA (string SoundName, \n   uint Flags) LIBRARY \"WINMM.DLL\" ALIAS FOR   \"sndPlaySoundA;ansi\"\nFUNCTION uint waveOutGetNumDevs () LIBRARY \"WINMM.DLL\"\nA function called uf_playsound in the examples application provided with PowerBuilder\ncalls the external functions. Uf_playsound is called with two arguments (as_filename and\nai_option) that are passed through to sndPlaySoundA.\nValues for ai_option are as defined in the Windows documentation, as commented here:\n//Options as defined in mmystem.h. \n//These may be or'd together.\n//#define SND_SYNC 0x0000  \n//play synchronously (default) \n//#define SND_ASYNC 0x0001  \n//play asynchronously \n//#define SND_NODEFAULT 0x0002  \n//do not use default sound \n//#define SND_MEMORY 0x0004  \n//lpszSoundName points to a memory file \n//#define SND_LOOP 0x0008  \n//loop the sound until next sndPlaySound \n//#define SND_NOSTOP 0x0010  \n//do not stop any currently playing sound \n \nuint lui_numdevs\n \nlui_numdevs = WaveOutGetNumDevs() \nIF lui_numdevs > 0 THEN \n      sndPlaySoundA(as_filename,ai_option)\n      RETURN 1\nELSE\n      RETURN -1\nEND IF\nExample 2\nThis is the declaration for the Windows GetSysColor function:\nFUNCTION ulong GetSysColor (int index) LIBRARY \"USER32.DLL\"\nThis declaration uses longptr instead of ulong:\nFUNCTION longptr FindWindowW (ulong classname, string windowname) LIBRARY\n \"USER32.DLL\"\nThis statement calls the external function. The meanings of the index argument and the return\nvalue are specified in the Windows documentation:\nRETURN GetSysColor (ai_index)\nExample 3\nThis is the declaration for the Windows GetSystemMetrics function:\nFUNCTION int GetSystemMetrics (int index) LIBRARY \"USER32.DLL\"\nThese statements call the external function to get the screen height and width:\nRETURN GetSystemMetrics(1)\nRETURN GetSystemMetrics(0)\n"}
{"page": 80, "text": "PowerScript Topics\nPage 80\n1.3.4.1 Datatypes for external function arguments\nWhen you declare an external function in PowerBuilder, the datatypes of the arguments must\ncorrespond with the datatypes as declared in the function's source definition. This section\ndocuments the correspondence between datatypes in external functions and datatypes in\nPowerBuilder. It also includes information on byte alignment when passing structures by\nvalue.\nUse the tables to find out what PowerBuilder datatype to use in an external function\ndeclaration. The PowerBuilder datatype you select depends on the datatype in the source code\nfor the function. The first column lists datatypes in source code. The second column describes\nthe datatype so you know exactly what it is. The third column lists the PowerBuilder datatype\nyou should use in the external function declaration.\nBoolean\nBOOL and Boolean on Windows are 16-bit, signed. Both are declared in PowerBuilder as\nboolean.\nPointers\nTable 1.23: PowerBuilder datatypes for pointers\nDatatype in source code\nSize, sign, precision\nPowerBuilder datatype\n* (any pointer)\n32-bit pointer\nLong\nchar *\nArray of bytes of variable\nlength\nBlob\nWindows 32-bit FAR pointers, such as LPBYTE, LPDWORD, LPINT, LPLONG, LPVOID,\nand LPWORD, are declared in PowerBuilder as long datatypes. HANDLE is defined as 32\nbits unsigned and is declared in PowerBuilder as an UnsignedLong.\nNear-pointer datatypes (such as PSTR and NPSTR) are not supported in PowerBuilder.\nCharacters and strings\nTable 1.24: PowerBuilder datatypes for characters and strings\nDatatype in source code\nSize, sign, precision\nPowerBuilder datatype\nchar\n8 bits, signed\nChar\nstring\n32-bit pointer to a null-\nterminated array of bytes of\nvariable length\nString\nThe Windows 32-bit FAR pointer LPSTR is declared in PowerBuilder as string.\nReference arguments\nWhen you pass a string to an external function by reference, all memory management\nis done in PowerBuilder. The string variable must be long enough to hold the returned\nvalue. To ensure that this is true, first declare the string variable, and then use the\nSpace function to fill the variable with blanks equal to the maximum number of\ncharacters that you expect the function to return.\nFixed-point values\n"}
{"page": 81, "text": "PowerScript Topics\nPage 81\nTable 1.25: PowerBuilder datatypes for fixed-point values\nDatatype in source code\nSize, sign, precision\nPowerBuilder datatype\nbyte\n8 bits, unsigned\nByte\nshort\n16 bits, signed\nInteger\nunsigned short\n16 bits, unsigned\nUnsignedInteger\nint\n32 bits, signed\nLong\nunsigned int\n32 bits, unsigned\nUnsignedLong\nlong\n32 bits, signed\nLong\nunsigned long\n32 bits, unsigned\nUnsignedLong\nlonglong\n64 bits, signed\nLongLong\nThe Windows definition WORD is declared in PowerBuilder as UnsignedInteger and the\nWindows definition DWORD is declared as an UnsignedLong. You cannot call external\nfunctions with return values or arguments of type short.\nFloating-point values\nTable 1.26: PowerBuilder datatypes for floating-point values\nDatatype in source code\nSize, sign, precision\nPowerBuilder datatype\nfloat\n32 bits, single precision\nReal\ndouble\n64 bits, double precision\nDouble\nPowerBuilder does not support 80-bit doubles on Windows.\nDate and time\nThe PowerBuilder datatypes Date, DateTime, and Time are structures and have no direct\nequivalent for external functions in C.\nPassing structures by value\nYou can pass PowerBuilder structures to external C functions if they have the same\ndefinitions and alignment as the structure's components. The DLL or shared library must be\ncompiled using byte alignment; no padding is added to align fields within the structure.\nUsing 1-byte structure member alignment in external function\nWhen you use a structure or structure array as parameters to external function in the older\nversions of PowerBuilder, the structure member alignment was one byte. However, the\ndefault alignment is 8 bytes on Windows platform, which means that most (if not all)\nWindows standard APIs use this value to align arguments with structure members. This\nwill cause a mismatch between Windows APIs and PB applications in PowerBuilder 12.5\nand earlier versions. A well adopted solution to this issue was to add some bytes within\nPowerBuilder structures manually to fill those gaps. Such gap filling can be complex and\nerror-prone if involving complex nested structures. And what is worse, this solution fails\nwith the introduction of 64-bit application development in PowerBuilder 12.6 because the\nnumber of bytes you have to fill may be different between 64-bit and 32-bit applications. This\nwas the major reason to make this change in PowerBuilder 12.6. With PowerBuilder 12.6 for\nWindows API and Visual C++ the default structure member alignment is now 8 bytes. The\nstructure member alignment was changed to 8 bytes in PowerBuilder 12.6 for both 64-bit and\n"}
{"page": 82, "text": "PowerScript Topics\nPage 82\n32-bit applications. This was an intentional change. Customers can now call Windows API\neasier and use the same code for both 64-bit and 32-bit applications.\nCustomers can switch to the old behavior in two ways with PowerBuilder 12.6 build 4058\nand above.\n1. Check \"Use 1-byte structure member alignment in external function\" (or set UseZp1=1\nin [pb] section, pb.ini, the results are the same). The effect is global with this setting\nchanged. To make this work at runtime, please remember to deploy your pb.ini file with your\napplication.\n2. Add \u201cprogma_pack(1)\u201d external function\u2019s declaration, like this:\nFUNCTION int STLAREGIO ( ref struc_kfzrechnerneu struc_kfz ) LIBRARY\n\"KFZ_SS.DLL\" alias for \"STLAREGIO;Ansi\" progma_pack(1)\nprogma_pack(1) is 1-byte align, progma_pack(8) is 8-bytes align. In this way, the effect is\nonly for external function that is declared with this alignment.\n1.3.4.2 Calling external functions\nGlobal external functions\nIn PowerBuilder, you call global external functions using the same syntax as for calling user-\ndefined global and system functions. As with other global functions, global external functions\ncan be triggered or posted but not called dynamically.\nLocal external functions\nCall local functions using the same syntax as for calling object functions. They can be\ntriggered or posted and called dynamically.\nFor information\nFor information, see Syntax for calling PowerBuilder functions and events.\n1.3.4.3 Defining source for external functions\nYou can use external functions written in any language that supports the standard calling\nsequence for 32-bit platforms. If you are calling functions on Windows in libraries that\nyou have written yourself, remember that you need to export the functions. Depending on\nyour compiler, you can do this in the function prototype or in a linker definition (.DEF) file.\nFor more information about using external functions, see Section 5.5.1, \u201cUsing external\nfunctions\u201d in Application Techniques.\nUse _stdcall convention\nC and C++ compilers typically support several calling conventions, including _cdecl (the\ndefault calling convention for C programs), _stdcall (the standard convention for Windows\nAPI calls), _fastcall, and thiscall. PowerBuilder, like many other Windows development\ntools, requires external functions to be exported using the WINAPI (_stdcall) format.\nAttempting to use a different calling convention can cause an application crash.\nWhen you create your own C or C++ DLLs containing functions to be used in PowerBuilder,\nmake sure that they use the standard convention for Windows API calls.\nFor example, if you are using a DEF file to export function definitions, you can declare the\nfunction like this:\n"}
{"page": 83, "text": "PowerScript Topics\nPage 83\nLONG WINAPI myFunc()\n{\n...\n};\n1.3.5 Declaring DBMS stored procedures as remote procedure calls\nDescription\nIn PowerBuilder, you can use dot notation for calling non-result-set stored procedures as\nremote procedure calls (RPCs):\nobject.function\nYou can call database procedures in SAP, Oracle, Informix, and other ODBC databases with\nstored procedures.\nRPCs provide support for Oracle PL/SQL tables and parameters that are defined as both input\nand output. You can call overloaded procedures.\nApplies to\nTransaction object\nSyntax\nFUNCTION  rtndatatype functionname ( { { REF } datatype1 arg1,...,\n   { REF } datatypen argn } ) RPCFUNC { ALIAS FOR \"spname\" }\nSUBROUTINE  functionname ( { { REF } datatype1 arg1 , ..., \n   { REF } datatypen argn } ) RPCFUNC { ALIAS FOR \"spname\" }\nTable 1.27: RPC declaration parameters\nArgument\nDescription\nFUNCTION or\nSUBROUTINE\nA keyword specifying the type of call, which determines the way return\nvalues are handled. If there is a return value, declare it as a FUNCTION. If\nit returns nothing or returns VOID, specify SUBROUTINE.\nrtndatatype\nIn a FUNCTION declaration, the datatype of the value returned by the\nfunction.\nfunctionname\nThe name of the database procedure as you will call it in PowerBuilder.\nIf the name in the DBMS is different, use ALIAS FOR to associate the\nDBMS name with the PowerBuilder name.\nREF\nSpecifies that you are passing by reference the argument that follows REF.\nThe stored procedure can store a value in arg that will be accessible to the\nrest of the PowerBuilder script.\nWhen you pass a string by reference, all memory management is done\nin PowerBuilder. The string variable must be long enough to hold the\nreturned value. To ensure that this is true, first declare the string variable,\nand then use the Space function to fill the variable with blanks equal to the\nmaximum number of characters that you expect the function to return.\ndatatype arg\nThe datatype and name of the arguments for the stored procedure. The list\nmust match the definition of the stored procedure in the database. Each\ndatatype arg pair can be preceded by REF.\n"}
{"page": 84, "text": "PowerScript Topics\nPage 84\nArgument\nDescription\nRPCFUNC\nA keyword indicating that this declaration is for a stored procedure in a\nDBMS, not an external function in a DLL. For information on declaring\nexternal functions, see Declaring external functions.\nALIAS FOR\n\"spname\" (optional)\nKeywords followed by a string naming the procedure in the database. If\nthe name in the database is not the name you want to use in your script\nor if the name in the database is not a legal PowerScript name, you must\nspecify ALIAS FOR \"spname\" to establish the association between the\nPowerScript name and the database name.\nUsage\nIf a function does not return a value (for example, it returns Void), specify the declaration as\na subroutine instead of a function.\nRPC declarations are always associated with a transaction object. You declare them as local\nexternal functions. The Declare Local External Functions dialog box has a Procedures button\n(if the connected database supports stored procedures), which gives you access to a list of\nstored procedures in the database.\nFor more information, see Section 4.1.3, \u201cUsing Transaction objects to call stored\nprocedures\u201d in Application Techniques.\nExamples\nExample 1\nThis declaration of the GIVE_RAISE_PROC stored procedure is declared in the User Object\npainter for a transaction object (the declaration appears on one line):\nFUNCTION double GIVE_RAISE(ref double SALARY) RPCFUNC ALIAS FOR \"GIVE_RAISE_PROC\"\nThis code calls the function in a script:\ndouble val = 20000\ndouble rv\nrv = SQLCA.give_raise(val)\nExample 2\nThis declaration for the stored procedure SPM8 does not need an ALIAS FOR phrase,\nbecause the PowerBuilder and DBMS names are the same:\nFUNCTION integer SPM8(integer value) RPCFUNC\nThis code calls the SPM8 stored procedure:\nint myresult\nmyresult = SQLCA.spm8(myresult)\nIF SQLCA.sqlcode <> 0 THEN\n      messagebox(\"Error\", SQLCA.sqlerrtext)\nEND IF\n1.4 Operators and Expressions\nAbout this chapter\n"}
{"page": 85, "text": "PowerScript Topics\nPage 85\nThis chapter describes the operators supported in PowerScript and how to use them in\nexpressions.\n1.4.1 Operators in PowerBuilder\nGeneral information\nOperators perform arithmetic calculations; compare numbers, text, and boolean values;\nexecute relational operations on boolean values; and concatenate strings and blobs.\nThree types\nPowerScript supports three types of operators:\n\u2022 Arithmetic operators for numeric datatypes\n\u2022 Relational operators for all datatypes\n\u2022 Concatenation operator for string datatypes\nOperators used in DataWindow objects\nThe documentation for DataWindows describes how operators are used in\nDataWindow expressions.\n1.4.1.1 Arithmetic operators in PowerBuilder\nDescription\nThe following table lists the arithmetic operators used in PowerBuilder.\nTable 1.28: PowerBuilder arithmetic operators\nOperator\nMeaning\nExample\n+\nAddition\nTotal=SubTotal+Tax\n-\nSubtraction\nPrice=Price-Discount\nUnless you have prohibited the use of dashes in identifier\nnames, you must surround the minus sign with spaces.\n*\nMultiplication\nTotal=Quantity*Price\n/\nDivision\nFactor=Discount/Price\n^\nExponentiation\nRank=Rating^2.5\nUsage\nOperator shortcuts for assignments\nFor information about shortcuts that combine arithmetic operators with assignments (such as\n++ and +=), see Assignment.\nSubtraction\nIf the option Allow Dashes in Identifiers is checked on the Script tab in the Options dialog\nbox, you must always surround the subtraction operator and the -- operator with spaces.\nOtherwise, PowerBuilder interprets the expression as an identifier.\n"}
{"page": 86, "text": "PowerScript Topics\nPage 86\nFor information about dashes in identifiers, see Identifier names.\nMultiplication and division\nMultiplication and division are carried out to full precision (16-28 digits). Decimal numbers\nare rounded (not truncated) on assignment.\nCalculation with NULL\nWhen you form an arithmetic expression that contains a NULL value, the expression's value\nis null. Thinking of null as undefined makes this easier to understand.\nFor more information about null values, see NULL values.\nErrors and overflows\nThe following problems can occur when using arithmetic operators:\n\u2022 Division by zero, exponentiation of negative values, and so on cause errors at runtime.\n\u2022 Overflow of real, double, and decimal values causes errors at runtime.\n\u2022 Overflow of signed or unsigned integers and longs causes results to wrap. However,\nbecause integers are promoted to longs in calculations, wrapping does not occur until the\nresult is explicitly assigned to an integer variable.\nFor more information about type promotion, see Datatype of PowerBuilder expressions.\nExamples\nSubtraction\nThis statement always means subtract B from A:\nA - B\nIf DashesInIdentifiers is set to 1, the following statement means a variable named A-B, but if\nDashesInIdentifiers is set to 0, it means subtract B from A:\nA-B \nPrecision for division\nThese examples show the values that result from various operations on decimal values:\ndecimal {4} a,b,d,e,f\n decimal {3} c\n a = 20.0/3                               // a contains  6.6667\n b = 3 * a                                // b contains 20.0001\n c = 3 * a                                // c contains 20.000\n d = 3 * (20.0/3)                         // d contains 20.0000\n e = Truncate(20.0/3, 4)                  // e contains  6.6666\n f = Truncate(20.0/3, 5)                  // f contains  6.6667\nCalculations with null\nWhen the value of variable c is null, the following assignment statements all set the variable a\nto null:\ninteger a, b=100, c\n  \n SetNULL(c)\n  \n"}
{"page": 87, "text": "PowerScript Topics\nPage 87\n a = b+c            // all statements set a to NULL\n a = b - c\n a = b*c\n a = b/c\nOverflow\nThis example illustrates the value of the variable i after overflow occurs:\ninteger i\n i = 32767\n i = i + 1     // i is now -32768\n1.4.1.2 Relational operators in PowerBuilder\nDescription\nPowerBuilder uses relational operators in boolean expressions to evaluate two or more\noperands. Logical operators can join relational expressions to form more complex boolean\nexpressions.\nThe result of evaluating a boolean expression is always true or false.\nThe following table lists relational and logical operators.\nTable 1.29: PowerBuilder relational and logical operators\nOperator\nMeaning\nExample\n=\nEquals\nif Price=100 then Rate=.05\n>\nGreater than\nif Price>100 then Rate=.05\n<\nLess than\nif Price<100 then Rate=.05\n<>\nNot equal\nif Price<>100 then Rate=.05\n>=\nGreater than or equal\nif Price>=100 then Rate=.05\n<=\nLess than or equal\nif Price<=100 then Rate=.05\nNOT\nLogical negation\nif NOT Price=100 then\nRate=.05\nAND\nLogical and\nif Tax>3 AND Ship <5 then\nRate=.05\nOR\nLogical or\nif Tax>3 OR Ship<5 then\nRate=.05\nUsage\nComparing strings\nWhen PowerBuilder compares strings, the comparison is case sensitive. Trailing blanks are\nsignificant.\nFor information on comparing strings regardless of case, see the functions Upper and Lower.\nTo remove trailing blanks, use the RightTrim function. To remove leading blanks, use\nthe LeftTrim function. To remove leading and trailing blanks, use the Trim function. For\ninformation about these functions, see RightTrim, LeftTrim, and Trim.\nDecimal operands\n"}
{"page": 88, "text": "PowerScript Topics\nPage 88\nRelational operators that operate on numeric values (including =, >, <, <>, >=, and <=) can\ntake decimal operands. The precision of the decimal operand is maintained in comparisons.\nNull value evaluations\nWhen you form a boolean expression that contains a null value, the AND and OR operators\nbehave differently. Thinking of null as undefined (neither true nor false) makes the results\neasier to calculate.\nFor more information about null values, see NULL values.\nExamples\nCase-sensitive comparisons\nIf you compare two strings with the same text but different case, the comparison fails. But\nif you use the Upper or Lower function, you can ensure that the case of both strings are the\nsame so that only the content affects the comparison:\nCity1 = \"Austin\"\n City2 = \"AUSTIN\"\n IF City1 = City2 ...              // Returns FALSE\n  \n City1 = \"Austin\"\n City2 = \"AUSTIN\"\n IF Upper(City1) = Upper(City2)... // Returns TRUE\nTrailing blanks in comparisons\nIn this example, trailing blanks in one string cause the comparison to fail:\nCity1 = \"Austin\"\n City2 = \"Austin       \"\n IF City1 = City2 ...             // Returns FALSE\nLogical expressions with null values\nIn this example, the expressions involving the variable f, which has been set to null, have null\nvalues:\nboolean d, e = TRUE, f\n SetNull(f)\n d = e and f   // d is NULL\n d = e or f    // d is TRUE\n1.4.1.3 Concatenation operator in PowerBuilder\nDescription\nThe PowerBuilder concatenation operator joins the contents of two variables of the same type\nto form a longer value. You can concatenate strings and blobs.\nThe following table shows the concatenation operator.\nTable 1.30: PowerBuilder concatenation operator\nOperator\nMeaning\nExample\n+\nConcatenate\n\"cat \" + \"dog\"\nExamples\nExample 1\n"}
{"page": 89, "text": "PowerScript Topics\nPage 89\nThese examples concatenate several strings:\nstring Test\n Test = \"over\" + \"stock\" // Test contains \"overstock\" \n string Lname, Fname, FullName\n FullName = Lname + ', ' + Fname\n       // FullName contains last name and first name,\n       // separated by a comma and space.\nExample 2\nThis example shows how a blob can act as an accumulator when reading data from a file:\ninteger i, fnum, loops\n blob tot_b, b\n . . .\n FOR i = 1 to loops\n  bytes_read = FileRead(fnum, b)\n  tot_b = tot_b + b\n NEXT\n1.4.2 Operator precedence in PowerBuilder expressions\nOrder of precedence\nTo ensure predictable results, all operators in a PowerBuilder expression are evaluated in a\nspecific order of precedence. When the operators have the same precedence, PowerBuilder\nevaluates them left to right.\nThese are the operators in descending order of precedence:\nTable 1.31: Order of precedence of operators\nOperator\nPurpose\n( )\nGrouping (see note below on overriding)\n+, -\nUnary plus and unary minus (indicates\npositive or negative number)\n^\nExponentiation\n*, /\nMultiplication and division\n+, -\nAddition and subtraction; string\nconcatenation\n=, >, <, <=, >=, <>\nRelational operators\nNOT\nNegation\nAND\nLogical and\nOR\nLogical or\nHow to override\nTo override the order, enclose expressions in parentheses. This identifies the group and order\nin which PowerBuilder will evaluate the expressions. When there are nested groups, the\ngroups are evaluated from the inside out.\nFor example, in the expression (x+(y*(a+b))), a+b is evaluated first. The sum of a and b is\nthen multiplied by y, and this product is added to x.\n"}
{"page": 90, "text": "PowerScript Topics\nPage 90\n1.4.3 Datatype of PowerBuilder expressions\nGeneral information\nThe datatype of an expression is important when it is the argument for a function or event.\nThe expression's datatype must be compatible with the argument's definition. If a function is\noverloaded, the datatype of the argument determines which version of the function to call.\nThere are three types: numeric, string, and char datatypes.\n1.4.3.1 Numeric datatypes in PowerBuilder\nGeneral information\nAll numeric datatypes are compatible with each other.\nWhat PowerBuilder does\nPowerBuilder converts datatypes as needed to perform calculations and make assignments.\nWhen PowerBuilder evaluates a numeric expression, it converts the datatypes of operands to\ndatatypes of higher precedence according to the operators and the datatypes of other values in\nthe expression.\n1.4.3.1.1 Datatype promotion when evaluating numeric expressions\nOrder of precedence\nThe PowerBuilder numeric datatypes are listed here in order of highest to lowest precedence\n(the order is based on the range of values for each datatype):\nDouble\nReal\nDecimal\nLongLong\nUnsignedLong\nLong\nUnsignedInteger\nInteger\nByte\nRules for type promotion\nDatatypes of operands\nIf operands in an expression have different datatypes, the value whose type has lower\nprecedence is converted to the datatype with higher precedence.\nUnsigned versus signed\nUnsigned has precedence over signed, so if one operand is signed and the other is unsigned,\nboth are promoted to the unsigned version of the higher type. For example, if one operator is\na long and another UnsignedInteger, both are promoted to UnsignedLong.\nOperators\nThe effects of operators on an expression's datatype are:\n\u2022 +, -, *\n"}
{"page": 91, "text": "PowerScript Topics\nPage 91\nThe minimum precision for addition, subtraction, and multiplication calculations is long.\nInteger types are promoted to long types before doing the calculation and the expression's\nresulting datatype is, at a minimum, long. When operands have datatypes of higher\nprecedence, other operands are promoted to match based on the Datatypes of operands rule\nabove.\n\u2022 / and ^\nThe minimum precision for division and exponentiation is double. All types are promoted\nto double before doing the calculation, and the expression's resulting datatype is double.\n\u2022 Relational\nRelational operators do not cause promotion of numeric types.\nDatatypes of literals\nWhen a literal is an operand in an expression, its datatype is determined by the literal's value.\nThe datatype of a literal affects the type promotion of the literal and other operands in an\nexpression.\nTable 1.32: Datatypes of literal operands in an expression\nLiteral\nDatatype\nInteger literals (no decimal point or\nexponent) within the range of Long\nLong\nInteger literals beyond the range of Long and\nwithin the range of UnsignedLong\nUnsignedLong\nInteger literals beyond the range of\nUnsignedLong and within the range of\nLongLong\nLongLong\nNumeric literals with a decimal point (but no\nexponent)\nDecimal\nNumeric literals with a decimal point and\nexplicit exponent\nDouble\nOut of range\nInteger literals beyond the range of LongLong cause compiler errors.\n1.4.3.1.2 Assignment and datatypes\nGeneral information\nAssignment is not part of expression evaluation. In an assignment statement, the value of an\nexpression is converted to the datatype of the left-hand variable. In the expression\nc = a + b\nthe datatype of a+b is determined by the datatypes of a and b. Then, the result is converted to\nthe datatype of c.\n"}
{"page": 92, "text": "PowerScript Topics\nPage 92\nOverflow on assignment\nEven when PowerBuilder performs a calculation at high enough precision to handle the\nresults, assignment to a lower precision variable can cause overflow, producing the wrong\nresult.\nExample 1\nConsider this code:\ninteger a = 32000, b = 1000\nlong d\nd = a + b\nThe final value of d is 33000. The calculation proceeds like this:\nConvert integer a to long\nConvert integer b to long\nAdd the longs a and b\nAssign the result to the long d\nBecause the variable d is a long, the value 33000 does not cause overflow.\nExample 2\nIn contrast, consider this code with an assignment to an integer variable:\ninteger a = 32000, b = 1000, c\nlong e\nc = a + b\ne = c\nThe resulting value of c and e is -32536. The calculation proceeds like this:\nAdd the integers a and b\nAssign the result to c\nConvert integer c to long and assign the result to e\nThe assignment to the integer variable c causes the long result of the addition to be truncated,\ncausing overflow and wrapping. Assigning c to e cannot restore the lost information.\n1.4.3.2 String and char datatypes in PowerBuilder\nGeneral information\nThere is no explicit char literal type.\nString literals convert to type char using the following rules:\n\u2022 When a string literal is assigned to a char variable, the first character of the string literal is\nassigned to the variable. For example:\nchar c = \"xyz\"\nresults in the character x being assigned to the char variable c.\n\u2022 Special characters (such as newline, formfeed, octal, hex, and so on) can be assigned to\nchar variables using string conversion, such as:\n"}
{"page": 93, "text": "PowerScript Topics\nPage 93\nchar c = \"~n\"\nString variables assigned to char variables also convert using these rules. A char variable\nassigned to a string variable results in a one-character string.\nAssigning strings to char arrays\nAs with other datatypes, you can use arrays of chars. Assigning strings to char arrays follows\nthese rules:\n\u2022 If the char array is unbounded (defined as a variable-size array), the contents of the string\nare copied directly into the char array.\n\u2022 If the char array is bounded and its length is less than or equal to the length of the string,\nthe string is truncated in the array.\n\u2022 If the char array is bounded and its length is greater than the length of the string, the entire\nstring is copied into the array along with its zero terminator. Remaining characters in the\narray are undetermined.\nAssigning char arrays to strings\nWhen a char array is assigned to a string variable, the contents of the array are copied into the\nstring up to a zero terminator, if found, in the char array.\nUsing both strings and chars in an expression\nExpressions using both strings and char arrays promote the chars to strings before evaluation.\nFor example, the following promotes the contents of c to a string before comparison with the\nstring \"x\":\nchar c\n . . .\n if (c = \"x\") then\nUsing chars in PowerScript functions\nAll PowerScript functions that take strings also take chars and char arrays, subject to the\nconversion rules described above.\n1.5 Structures and Objects\nAbout this chapter\nThis chapter describes basic concepts for structures and objects and how you define, declare,\nand use them in PowerScript.\n1.5.1 About structures\nGeneral information\nA structure is a collection of one or more variables (sometimes called elements) that you\nwant to group together under a single name. The variables can have any datatype, including\nstandard and object datatypes and other structures.\nDefining structures\n"}
{"page": 94, "text": "PowerScript Topics\nPage 94\nWhen you define a structure in the Structure painter or an object painter (such as Window,\nMenu, or User Object), you are creating a structure definition. To use the structure, you must\ndeclare it. When you declare it, an instance of it is automatically created for you. When it\ngoes out of scope, the structure is destroyed.\nFor details about defining structures, see the Section 3.4, \u201cWorking with Structures\u201d in Users\nGuide.\nDeclaring structures\nIf you have defined a global structure in the Structure painter called str_emp_data, you can\ndeclare an instance of the structure in a script or in an object's instance variables. If you\ndefine the structure in an object painter, you can only declare instances of the structure in the\nobject's instance variables and scripts.\nThis declaration declares two instances of the structure str_emp_data:\nstr_emp_data str_emp1, str_emp2\nReferring to structure variables\nIn scripts, you refer to the structure's variables using dot notation:\nstructurename.variable\nThese statements assign values to the variables in str_emp_data:\nstr_emp1.emp_id = 100\nstr_emp1.emp_lname = \"Jones\"\nstr_emp1.emp_salary = 200\nstr_emp2.emp_id = 101\nstr_emp2.emp_salary = str_emp1.salary * 1.05\nUsing structures as instance variables\nIf the structure is declared as part of an object, you can qualify the structure name using dot\nnotation:\nobjectname.structurename.variable\nSuppose that this declaration is an instance variable of the window w_customer:\nstr_cust_data str_cust1\nThe following statement in a script for the object refers to a variable of str_cust_data. The\npronoun This is optional, because the structure declaration is part of the object:\nThis.str_cust1.name\nThe following statement in a script for some other object qualifies the structure with the\nwindow name:\nw_customer.str_cust1.name\n1.5.2 About objects\nWhat an object is\nIn object-oriented programming, an object is a self-contained module containing state\ninformation and associated methods. Most entities in PowerBuilder are objects: visual objects\n"}
{"page": 95, "text": "PowerScript Topics\nPage 95\nsuch as windows and controls on windows, nonvisual objects such as transaction and error\nobjects, and user objects that you design yourself.\nAn object class is a definition of an object. You create an object's definition in the appropriate\npainter: Window, Menu, Application, Structure, or User Object painter. In the painter, you\nadd controls to be part of the object, specify initial values for the object's properties, define its\ninstance variables and functions, and write scripts for its events and functions.\nAn object instance is an occurrence of the object created during the execution of your\napplication. Your code instantiates an object when it allocates memory for the object and\ndefines the object based on the definition in the object class.\nAn object reference is your handle to the object instance. To interact with an object, you need\nits object reference. You can assign an object reference to a variable of the appropriate type.\nSystem objects versus user objects\nThere are two categories of objects supported by PowerBuilder: system objects (also referred\nto as system classes) defined by PowerBuilder and user objects you in define in painters.\nSystem objects\nThe PowerBuilder system objects or classes are inherited from the base class PowerObject.\nThe system classes are the ancestors of all the objects you define. To see the system class\nhierarchy, select the System tab in the Browser, select PowerObject, and select Show\nHierarchy and Expand All from the pop-up menu.\nUser objects\nYou can create user object class definitions in several painters: Window, Menu, Application,\nStructure, and User Object painters. The objects you define are inherited from one of the\nsystem classes or another of your classes.\nSome painters use many classes. In the Window and User Object painters, the main definition\nis inherited from the window or user object class. The controls you use are also inherited\nfrom the system class for that control.\n1.5.2.1 About user objects\nTwo types\nThere are two major types of user objects: visual and class.\nVisual user objects\nA visual user object is a reusable control or set of controls that has a certain behavior. There\nare three types -- standard, custom, and external.\nTable 1.33: Visual user object types\nVisual user\nobjects\nDescription\nStandard\nInherited from a specific visual control. You can set properties and write\nscripts so that the control is ready for use.\nIt has the same events and properties as the control it is inherited from plus\nany that you add.\n"}
{"page": 96, "text": "PowerScript Topics\nPage 96\nVisual user\nobjects\nDescription\nCustom\nInherited from the UserObject system class. You can include many controls\nin the user object and write scripts for their events.\nEach control in the user object has the same events and properties as the\ncontrols from which they are inherited plus any that you add.\nExternal\nA user object that displays a visual control defined in a DLL. The control is\nnot part of the PowerBuilder object hierarchy. The DLL developer provides\ninformation for setting style bits that control its presentation.\nIts events, functions, and properties are specified by the developer of the\nDLL.\nAn external user object is not the same as an OCX, which you can put in an\nOLE control.\nClass user objects\nClass user objects consist of properties, functions, and sometimes events. They have no\nvisual component. There are two types -- standard and custom.\nTable 1.34: Class user object types\nClass user\nobjects\nDescription\nStandard\nInherits its definition from a nonvisual PowerBuilder object, such as the\nTransaction or Error object. You can add instance variables and functions.\nA few nonvisual objects have events to write scripts for these events, you\nhave to define a class user object.\nCustom\nAn object of your own design for which you define instance variables,\nevents, and functions in order to encapsulate application-specific\nprogramming in an object.\nFor information on defining and using user objects, see the Section 4.7, \u201cWorking with User\nObjects\u201d in Users Guide.\n1.5.2.2 Instantiating objects\nClasses versus instances\nBecause of the way PowerBuilder object classes and instances are named, it is easy to think\nthey are the same thing. For example, when you define a window in the Window painter, you\nare defining an object class.\nOne instance\nWhen you open a window with the simplest format of the Open function, you are\ninstantiating an object instance. Both the class definition and the instance have the same\nname. In your application, w_main is a global variable of type w_main:\nOpen(w_main)\n"}
{"page": 97, "text": "PowerScript Topics\nPage 97\nWhen you open a window this way, you can only open one instance of the object.\nSeveral instances\nIf you want to open more than one instance of a window class, you need to define a variable\nto hold each object reference:\nw_main w_1, w_2\nOpen(w_1)\nOpen(w_2)\nYou can also open windows by specifying the class in the Open function:\nwindow w_1, w_2\nOpen(w_1, \"w_main\")\nOpen(w_2, \"w_main\")\nFor class user objects, you always define a variable to hold the object reference and then\ninstantiate the object with the CREATE statement:\nuo_emp_data uo_1, uo_2\nuo_1 = CREATE uo_emp_data\nuo_2 = CREATE uo_emp_data\nYou can have more than one reference to an object. You might assign an object reference to\na variable of the appropriate type, or you might pass an object reference to another object so\nthat it can change or get information from the object.\nFor more information about object variables and assignment, see User objects that behave\nlike structures.\n1.5.2.3 Using ancestors and descendants\ndescendant objects\nIn PowerBuilder, an object class can be inherited from another class. The inherited or\ndescendant object has all the instance variables, events, and functions of the ancestor. You\ncan augment the descendant by adding more variables, events, and functions. If you change\nthe ancestor, even after editing the descendant, the descendant incorporates the changes.\nInstantiating\nWhen you instantiate a descendant object, PowerBuilder also instantiates all its ancestor\nclasses. You do not have programmatic access to these ancestor instances, except in a few\nlimited ways, such as when you use the scope operator to access an ancestor version of a\nfunction or event script.\n1.5.2.4 Garbage collection\nWhat garbage collection does\nThe PowerBuilder garbage collection mechanism checks memory automatically for\nunreferenced and orphaned objects and removes any it finds, thus taking care of most\nmemory leaks. You can use garbage collection to destroy objects instead of explicitly\ndestroying them using the DESTROY statement. This lets you avoid runtime errors that\noccur when you destroy an object that was being used by another process or had been passed\nby reference to a posted event or function.\nWhen garbage collection occurs\n"}
{"page": 98, "text": "PowerScript Topics\nPage 98\nGarbage collection occurs:\n\u2022 When a reference is removed from an object\nA reference to an object is any variable whose value is the object. When the variable goes\nout of scope, or when it is assigned a different value, PowerBuilder removes a reference to\nthe object, counts the remaining references, and destroys the object if no references remain.\n\u2022 When the garbage collection interval is exceeded\nWhen PowerBuilder completes the execution of a system-triggered event, it makes a\ngarbage collection pass if the set interval between garbage collection passes has been\nexceeded. The default interval is 0.5 seconds. The garbage collection pass removes\nany objects and classes that cannot be referenced, including those containing circular\nreferences (otherwise unreferenced objects that reference each other).\nWhen you post an event or function and pass an object reference, PowerBuilder adds an\ninternal reference to the object to prevent it from being collected between the time of the\npost and the actual execution of the event or function. This reference is removed when the\nevent or function is executed.\nExceptions to garbage collection\nThere are a few objects that are prevented from being collected:\n\u2022 Visual objects\nAny object that is visible on your screen is not collected because when the object is created\nand displayed on your screen, an internal reference is added to the object. When any visual\nobject is closed it is explicitly destroyed.\n\u2022 Timing objects\nAny Timing object that is currently running is not collected because the Start function for a\nTiming object adds an internal reference. The Stop function removes the reference.\n\u2022 Shared objects\nRegistered shared objects are not collected because the SharedObjectRegister function\nadds an internal reference. SharedObjectUnregister removes the internal reference.\nControlling when garbage collection occurs\nGarbage collection occurs automatically in PowerBuilder, but you can use the functions\nGarbageCollect, GarbageCollectGetTimeLimit, and GarbageCollectSetTimeLimit to force\nimmediate garbage collection or to change the interval between reference count checks.\nBy setting the interval between garbage collection passes to a very large number, you can\neffectively turn off garbage collection.\n1.5.2.5 User objects that behave like structures\nIn PowerBuilder, a nonvisual user object can provide functionality similar to that of a\nstructure. Its instance variables form a collection similar to the variables for the structure. In\nscripts, you use dot notation to refer to the user object's instance variables, just as you do for\nstructure variables.\n"}
{"page": 99, "text": "PowerScript Topics\nPage 99\nAdvantages of user objects\nThe user object can include functions and its own structure definitions, and it allows you to\ninherit from an ancestor class. None of this is possible with a structure definition.\nMemory allocation differences\nMemory allocation is different for user objects and structures. An object variable is a\nreference to the object. Declaring the variable does not allocate memory for the object. After\nyou declare it, you must instantiate it with a CREATE statement. Assignment for a user\nobject is also different (described in Assignment for objects and structures).\nAutoinstantiated objects\nIf you want a user object that has methods and inheritance but want the memory allocation of\na structure, you can define an autoinstantiated object.\nYou do not have to create and destroy autoinstantiated objects. Like structures, they are\ncreated when they are declared and destroyed when they go out of scope. However, because\nassignment for autoinstantiated objects behaves like structures, the copies made of the object\ncan be a drawback.\nTo make a custom class user object autoinstantiated, select the Autoinstantiate check box on\nthe user object's property sheet.\n1.5.3 Assignment for objects and structures\nIn PowerBuilder, assignment for objects is different from assignment for structures or\nautoinstantiated objects:\n\u2022 When you assign one structure to another, the whole structure is copied so that there are\ntwo copies of the structure.\n\u2022 When you assign one object variable to another, the object reference is copied so that both\nvariables point to the same object. There is only one copy of the object.\nEvents\n1.5.3.1 Assignment for structures\nDeclaring a structure variable creates an instance of that structure:\nstr_emp_data str_emp1, str_emp2 // Two structure instances\nWhen you assign a structure to another structure, the whole structure is copied and a second\ncopy of the structure data exists:\nstr_emp1 = str_emp2\nThe assignment copies the whole structure from one structure variable to the other. Each\nvariable is a separate instance of the structure str_emp_data.\nRestriction on assignment\nIf the structures have different definitions, you cannot assign one to another, even if they\nhave the same set of variable definitions.\nFor example, this assignment is not allowed:\n"}
{"page": 100, "text": "PowerScript Topics\nPage 100\nstr_emp str_person1\nstr_cust str_person2\nstr_person2 = str_person1 // Not allowed\nFor information about passing structures as function arguments, see Passing arguments to\nfunctions and events.\n1.5.3.2 Assignment for objects\nDeclaring an object variable declares an object reference:\nuo_emp_data uo_emp1, uo_emp2 // Two object references\nUsing the CREATE statement creates an instance of the object:\nuo_emp1 = CREATE uo_emp_data\nWhen you assign one object variable to another, a reference to the object instance is copied.\nOnly one copy of the object exists:\nuo_emp2 = uo_emp1 // Both point to same object instance\nAncestor and descendant objects\nAssignments between ancestor and descendant objects occur in the same way, with an object\nreference being copied to the target object.\nSuppose that uo_emp_data is an ancestor user object of uo_emp_active and uo_emp_inactive.\nDeclare variables of the ancestor type:\nuo_emp_data uo_emp1, uo_emp2\nCreate an instance of the descendant and store the reference in the ancestor variable:\nuo_emp1 = CREATE USING \"uo_emp_active\"\nAssigning uo_emp1 to uo_emp2 makes both variables refer to one object that is an instance\nof the descendant uo_emp_active:\nuo_emp2 = uo_emp1\nFor information about passing objects as function arguments, see Passing arguments to\nfunctions and events.\n1.5.3.3 Assignment for autoinstantiated user objects\nDeclaring an autoinstantiated user object creates an instance of that object (just like a\nstructure). The CREATE statement is not allowed for objects with the Autoinstantiate setting.\nIn the following example, uo_emp_data has the Autoinstantiate setting:\nuo_emp_data uo_emp1, uo_emp2 // Two object instances\nWhen you assign an autoinstantiated object to another autoinstantiated object, the whole\nobject is copied to the second variable:\nuo_emp1 = uo_emp2\nYou never have multiple references to an autoinstantiated user object.\nPassing to a function\n"}
{"page": 101, "text": "PowerScript Topics\nPage 101\nWhen you pass an autoinstantiated user object to a function, it behaves like a structure:\n\u2022 Passing by value passes a copy of the object.\n\u2022 Passing by reference passes a pointer to the object variable, just as for any standard\ndatatype.\n\u2022 Passing as read-only passes a copy of the object but that copy cannot be modified.\nRestrictions for copying\nAssignments are allowed between autoinstantiated user objects only if the object types match\nor if the target is a nonautoinstantiated ancestor.\nRule 1\nIf you assign one autoinstantiated object to another, they must be of the same type.\nRule 2\nIf you assign an autoinstantiated descendant object to an ancestor variable, the ancestor\ncannot have the Autoinstantiate setting. The ancestor variable will contain a reference to a\ncopy of its descendant.\nRule 3\nIf you assign an ancestor object to a descendant variable, the ancestor must contain an\ninstance of the descendant or an execution error occurs.\nExamples\nTo illustrate, suppose you have these declarations. Uo_emp_active and uo_emp_inactive are\nautoinstantiated objects that are descendants of non-autoinstantiated uo_emp_data:\nuo_emp_data uo_emp1 // Ancestor\nuo_emp_active uo_empa, uo_empb // Descendants\nuo_emp_inactive uo_empi // Another descendant\nExample of rule 1\nWhen assigning one instance to another from the user objects declared above, some\nassignments are not allowed by the compiler:\nuo_empb = uo_empa // Allowed, same type\nuo_empa = uo_empi // Not allowed, different types\nExample of rule 2\nAfter this assignment, uo_emp1 contains a copy of the descendant object uo_empa.\nUo_emp_data (the type for uo_emp1) must not be autoinstantiated. Otherwise, the\nassignment violates rule 1. If uo_emp1 is autoinstantiated, a compiler error occurs:\nuo_emp1 = uo_empa\nExample of rule 3\nThis assignment is only allowed if uo_emp1 contains an instance of its descendant uo_empa,\nwhich it would if the previous assignment had occurred before this one:\nuo_empa = uo_emp1\n"}
{"page": 102, "text": "PowerScript Topics\nPage 102\nIf it did not contain an instance of target descendant type, an execution error would occur.\nFor more information about passing arguments to functions and events, see Passing\narguments to functions and events.\n1.6 Calling Functions and Events\nAbout this chapter\nThis chapter provides background information that will help you understand the different\nways you can use functions and events. It then provides the syntax for calling functions and\nevents.\n1.6.1 About functions and events\nImportance of functions and events\nMuch of the power of the PowerScript language resides in the built-in PowerScript functions\nthat you can use in expressions and assignment statements.\nTypes of functions and events\nPowerBuilder objects have built-in events and functions. You can enhance objects with your\nown user-defined functions and events, and you can declare local external functions for an\nobject. The PowerScript language also has system functions that are not associated with any\nobject. You can define your own global functions and declare external functions and remote\nprocedure calls.\nThe following table shows the different types of functions and events.\nTable 1.35: Types of functions and events\nCategoryItem\nDefinition\nEvents Event\nAn action in an object or control that can start the execution of a\nscript. A user can initiate an event by an action such as clicking an\nobject or entering data, or a statement in another script can initiate\nthe event.\n \nUser event\nAn event you define to add functionality to an object. You specify\nthe arguments, return value, and whether the event is mapped to a\nsystem message. For information about defining user events, see\nSection 3.3.2, \u201cDefining user events\u201d in Users Guide.\n \nSystem or\nbuilt-in event\nAn event that is part of an object's PowerBuilder definition. System\nevents are usually triggered by user actions or system messages.\nPowerBuilder passes a predefined set of arguments for use in the\nevent's script. System events either return a long or do not have a\nreturn value.\nFunctionsFunction\nA program or routine that performs specific processing.\n \nSystem\nfunction\nA built-in PowerScript function that is not associated with an object.\n \nObject\nfunction\nA function that is part of an object's definition. PowerBuilder has\nmany predefined object functions and you can define your own.\n"}
{"page": 103, "text": "PowerScript Topics\nPage 103\nCategoryItem\nDefinition\n \nUser-defined\nfunction\nA function you define. You define global functions in the Function\npainter and object functions in other painters with Script views.\n \nGlobal\nfunction\nA function you define that can be called from any script.\nPowerScript's system functions are globally accessible, but they\nhave a different place in the search order.\n \nLocal external\nfunction\nAn external function that belongs to an object. You declare it in the\nWindow or User Object painter. Its definition is in another library.\n \nGlobal\nexternal\nfunction\nAn external function that you declare in any painter, making it\nglobally accessible. Its definition is in another library.\n \nRemote\nprocedure call\n(RPC)\nA stored procedure in a database that you can call from a script.\nThe declaration for an RPC can be global or local (belonging to an\nobject). The definition for the procedure is in the database.\nComparing functions and events\nFunctions and events have the following similarities:\n\u2022 Both functions and events have arguments and return values.\n\u2022 You can call object functions and events dynamically or statically. Global or system\nfunctions cannot be called dynamically.\n\u2022 You can post or trigger a function or event call.\nFunctions and events have the following differences:\n\u2022 Functions can be global or part of an object's definition. Events are associated only with\nobjects.\n\u2022 PowerBuilder uses different search orders when looking for events and functions.\n\u2022 A call to an undefined function triggers an error. A call to an undefined event does not\ntrigger an error.\n\u2022 Object-level functions can be overloaded. Events (and global functions) cannot be\noverloaded.\n\u2022 When you define a function, you can restrict access to it. You cannot add scope restrictions\nwhen you define events.\n\u2022 When functions are inherited, you can extend the ancestor function by calling it in the\ndescendant's script. You can also override the function definition. When events are\ninherited, the scripts for those events are extended by default. You can choose to extend or\noverride the script.\nWhich to use\n"}
{"page": 104, "text": "PowerScript Topics\nPage 104\nWhether you write most of your code in user-defined functions or in event scripts is one of\nthe design decisions you must make. Because there is no performance difference, the decision\nis based on how you prefer to interact with PowerBuilder: whether you prefer the interface\nfor defining user events or that for defining functions, how you want to handle errors, and\nwhether your design includes overloading.\nIt is unlikely that you will use either events or functions exclusively, but for ease of\nmaintenance, you might want to choose one approach for handling most situations.\n1.6.2 Finding and executing functions and events\nPowerBuilder looks for a matching function or event based on its name and its argument\nlist. PowerBuilder can make a match between compatible datatypes (such as all the numeric\ntypes). The match does not have to be exact. PowerBuilder ranks compatible datatypes to\nquantify how closely one datatype matches another.\nA major difference between functions and events is how PowerBuilder looks for them.\n1.6.2.1 Finding functions\nWhen calling a function, PowerBuilder searches until it finds a matching function and\nexecutes it -- the search ends. Using functions with the same name but different arguments\nis called function overloading. For more information, see Overloading, overriding, and\nextending functions and events.\nUnqualified function names\nIf you do not qualify a function name with an object, PowerBuilder searches for the function\nand executes the first one it finds that matches the name and arguments. It searches for a\nmatch in the following order:\n1. A global external function.\n2. A global function.\n3. An object function and local external function. If the object is a descendant, PowerBuilder\nsearches upward through the ancestor hierarchy to find a match for the function prototype.\n4. A system function.\nDataWindow expression functions\nThe functions that you use in the DataWindow painter in expressions for computed\nfields, filters, validation rules, and graphed data cannot be overridden. For example, if\nyou create a global function called Today, it is used instead of the PowerScript system\nfunction Today, but it is not used instead of the DataWindow expression function\nToday.\nQualified function names\nYou can qualify an object function using dot notation to ensure that the object function\nis found, not a global function of the same name. With a qualified name, the search for a\nmatching function involves the ancestor hierarchy only (item 3 in the search list above), as\nshown in the following examples of function calls:\n"}
{"page": 105, "text": "PowerScript Topics\nPage 105\ndw_1.Update( )\nw_employee.uf_process_list()\nThis.uf_process_list()\nWhen PowerBuilder searches the ancestor hierarchy for a function, you can specify that you\nwant to call an ancestor function instead of a matching descendant function.\nFor the syntax for calling ancestor functions, see Calling functions and events in an object's\nancestor.\n1.6.2.2 Finding events\nPowerBuilder events in descendant objects are, by default, extensions of ancestor events.\nPowerBuilder searches for events in the object's ancestor hierarchy until it gets to the top\nancestor or finds an event that overrides its ancestor. Then it begins executing the events,\nfrom the ancestor event down to the descendant event.\nFinding functions versus events\nThe following illustration shows the difference between searching for events and searching\nfor functions:\n1.6.3 Triggering versus posting functions and events\nTriggering\nIn PowerBuilder, when you trigger a function or event, it is called immediately. Its return\nvalue is available for use in the script.\n"}
{"page": 106, "text": "PowerScript Topics\nPage 106\nPosting\nWhen you post a function or event, it is added to the object's queue and executed in its turn.\nIn most cases, it is executed when the current script is finished; however, if other system\nevents have occurred in the meantime, its position in the queue might be after other scripts.\nIts return value is not available to the calling script.\nBecause POST makes the return value unavailable to the caller, you can think of it as turning\nthe function or event call into a statement.\nUse posting when activities need to be finished before the code checks state information or\ndoes further processing (see Example 2 below).\nPowerBuilder messages processed first\nAll events posted by PowerBuilder are processed by a separate queue from the Windows\nsystem queue. PowerBuilder posted messages are processed before Windows posted\nmessages, so PowerBuilder events that are posted in an event that posts a Windows message\nare processed before the Windows message.\nFor example, when a character is typed into an EditMask control, the PowerBuilder\npdm_keydown event posts the Windows message WM_CHAR to enter the character. If you\nwant to copy the characters as they are entered from the EditMask control to another control,\ndo not place the code in an event posted in the pdm_keydown event. The processing must\ntake place in an event that occurs after the WM_CHAR message is processed, such as in an\nevent mapped to pdm_keyup.\nRestrictions for POST\nBecause no value is returned, you:\n\u2022 Cannot use a posted function or event as an operand in an expression\n\u2022 Cannot use a posted function or event as the argument for another function\n\u2022 Can only use POST on the last call in a cascaded sequence of calls\nThese statements cause a compiler error. Both uses require a return value:\nIF POST IsNull( ) THEN ...\nw_1.uf_getresult(dw_1.POST GetBorderStyle(2))\nTriggerEvent and PostEvent functions\nFor backward compatibility, the TriggerEvent and PostEvent functions are still\navailable, but you cannot pass arguments to the called event. You must pass data to\nthe event in PowerBuilder's Message object.\nExamples of posting\nThe following examples illustrate how to post events.\nExample 1\nIn a sample application, the Open event of the w_activity_manager window calls the\nfunctions uf_setup and uf_set_tabpgsystem. (The functions belong to the user object\n"}
{"page": 107, "text": "PowerScript Topics\nPage 107\nu_app_actman.) Because the functions are posted, the Open event is allowed to finish before\nthe functions are called. The result is that the window is visible while setup processing takes\nplace, giving the user something to look at:\nguo_global_vars.iuo_app_actman.POST uf_setup()\nguo_global_vars.iuo_com_actman.POST uf_set_tabpgsystem(0)\nExample 2\nIn a sample application, the DoubleClicked event of the tv_roadmap TreeView control in the\nu_tabpg_amroadmap user object posts a function that processes the TreeView item. If the\nevent is not posted, the code that checks whether to change the item's picture runs before the\nitem's expanded flag is set:\nparent.POST uf_process_item ()\n1.6.4 Static versus dynamic calls\nCalling functions and events\nPowerBuilder calls functions and events in three ways, depending on the type of function or\nevent and the lookup method defined.\nTable 1.36: How PowerBuilder calls functions and events\nType of\nfunction\nCompiler typing\nComments\nGlobal and\nsystem functions\nStrongly typed. The function must\nexist when the script is compiled.\nThese functions must exist and\nare called directly. They are not\npolymorphic, and no substitution is\never made at execution time.\nObject functions\nwith STATIC\nlookup\nStrongly typed. The function must\nexist when the script is compiled.\nThe functions are polymorphic. They\nmust exist when you compile, but\nif another class is instantiated at\nexecution time, its function is called\ninstead.\nObject functions\nwith DYNAMIC\nlookup\nWeakly typed. The function does\nnot have to exist when the script is\ncompiled.\nThe functions are polymorphic. The\nactual function called is determined at\nexecution time.\nSpecifying static or dynamic lookup\nFor object functions and events, you can choose when PowerBuilder looks for them by\nspecifying static or dynamic lookup. You specify static or dynamic lookup using the STATIC\nor DYNAMIC keywords. The DYNAMIC keyword applies only to functions that are\nassociated with an object. You cannot call global or system functions dynamically.\n1.6.4.1 Static calls\nBy default, PowerBuilder makes static lookups for functions and events. This means that it\nidentifies the function or event by matching the name and argument types when it compiles\nthe code. A matching function or event must exist in the object at compile time.\n"}
{"page": 108, "text": "PowerScript Topics\nPage 108\nResults of static calls\nStatic calls do not guarantee that the function or event identified at compile time is the one\nthat is executed. Suppose that you define a variable of an ancestor type and it has a particular\nfunction definition. If you assign an instance of a descendant object to the variable and the\ndescendant has a function that overrides the ancestor's function (the one found at compile\ntime), the function in the descendant is executed.\n1.6.4.2 Dynamic calls\nWhen you specify a dynamic call in PowerBuilder, the function or event does not have to\nexist when you compile the code. You are indicating to the compiler that there will be a\nsuitable function or event available at execution time.\nFor a dynamic call, PowerBuilder waits until it is time to execute the function or event to\nlook for it. This gives you flexibility and allows you to call functions or events in descendants\nthat do not exist in the ancestor.\nResults of dynamic calls\nTo illustrate the results of dynamic calls, consider these objects:\n\u2022 Ancestor window w_a with a function Set(integer).\n\u2022 Descendant window w_a_desc with two functions: Set(integer) overrides the ancestor\nfunction, and Set(string) is an overload of the function.\nSituation 1\nSuppose you open the window mywindow of the ancestor window class w_a:\nw_a mywindow\nOpen(mywindow)\nThis is what happens when you call the Set function statically or dynamically:\nTable 1.37:\nThis statement\nHas this result\nmywindow.Set(1)\nCompiles correctly because function is found\nin the ancestor w_a.\nAt runtime, Set(integer) in the ancestor is\nexecuted.\nmywindow.Set(\"hello\")\nFails to compile; no function prototype in\nw_a matches the call.\nmywindow.DYNAMIC Set(\"hello\")\nCompiles successfully because of the\nDYNAMIC keyword.\nAn error occurs at runtime because no\nmatching function is found.\nSituation 2\n"}
{"page": 109, "text": "PowerScript Topics\nPage 109\nNow suppose you open mywindow as the descendant window class w_a_desc:\nw_a mywindow\nOpen(mywindow, \"w_a_desc\")\nThis is what happens when you call the Set function statically or dynamically in the\ndescendant window class:\nTable 1.38:\nThis statement\nHas this result\nmywindow.Set(1)\nCompiles correctly because function is found\nin the ancestor w_a.\nAt runtime, Set(integer) in the descendant is\nexecuted.\nmywindow.Set(\"hello\")\nFails to compile; no function prototype in the\nancestor matches the call.\nmywindow.DYNAMIC Set(\"hello\")\nCompiles successfully because of the\nDYNAMIC keyword.\nAt runtime, Set(string) in the descendant is\nexecuted.\nDisadvantages of dynamic calls\nSlower performance\nBecause dynamic calls are resolved at runtime, they are slower than static calls. If you need\nthe fastest performance, design your application to avoid dynamic calls.\nLess error checking\nWhen you use dynamic calls, you are foregoing error checking provided by the compiler.\nYour application is more open to application errors, because functions that are called\ndynamically might be unavailable at execution time. Do not use a dynamic call when a static\ncall will suffice.\nExample using dynamic call\nA sample application has an ancestor window w_datareview_frame that defines several\nfunctions called by the menu items of m_datareview_framemenu. They are empty stubs\nwith empty scripts so that static calls to the functions will compile. Other windows that are\ndescendants of w_datareview_frame have scripts for these functions, overriding the ancestor\nversion.\nThe wf_print function is one of these -- it has an empty script in the ancestor and appropriate\ncode in each descendant window:\nguo_global_vars.ish_currentsheet.wf_print ()\nThe wf_export function called by the m_export item on the m_file menu does not have a\nstubbed-out version in the ancestor window. This code for m_export uses the DYNAMIC\nkeyword to call wf_export. When the program runs, the value of variable ish_currentsheet is\na descendant window that does have a definition for wf_export:\n"}
{"page": 110, "text": "PowerScript Topics\nPage 110\nguo_global_vars.ish_currentsheet.DYNAMIC wf_export()\n1.6.4.2.1 Errors when calling functions and events dynamically\nIf you call a function or event dynamically, different conditions create different results, from\nno effect to an execution error. The tables in this section illustrate this.\nFunctions\nThe rules for functions are similar to those for events, except functions must exist: if a\nfunction is not found, an error always occurs. Although events can exist without a script, if a\nfunction is defined it has to have code. Consider the following statements:\n1. This statement calls a function without looking for a return value:\nobject.DYNAMIC funcname( )\n2. This statement looks for an integer return value:\nint li_int\nli_int = object.DYNAMIC funcname( )\n3. This statement looks for an Any return value:\nany la_any\nla_any = object.DYNAMIC funcname( )\nThe following table uses these statements as examples.\nTable 1.39: Dynamic function calling errors\nCondition 1\nCondition 2\nResult\nExample\nThe function does\nnot exist.\nNone.\nExecution error 65:\nDynamic function\nnot found.\nAll the statements\ncause error 65.\nThe function is found\nand executed but is\nnot defined with a\nreturn value.\nThe code is looking\nfor a return value.\nExecution error 63:\nFunction/event with\nno return value used\nin expression.\nStatements 2 and 3\ncause error 63.\nEvents\nConsider these statements:\n1. This statement calls an event without looking for a return value:\nobject.EVENT DYNAMIC eventname( )\n2. This example looks for an integer return value:\nint li_int\nli_int = object.EVENT DYNAMIC eventname( )\n3. This example looks for an Any return value:\nany la_any\nla_any = object.EVENT DYNAMIC eventname( )\n"}
{"page": 111, "text": "PowerScript Topics\nPage 111\nThe following table uses these statements as examples.\nTable 1.40: Dynamic event calling errors\nCondition 1\nCondition 2\nResult\nExample\nThe event does\nnot exist.\nThe code is not\nlooking for a return\nvalue.\nNothing; the call fails\nsilently.\nStatement 1 fails but\ndoes not cause an error.\n \nThe code is looking\nfor a return value.\nA null of the Any\ndatatype is returned.\nLa_any is set to null in\nstatement 3.\n \n \nIf the expected datatype is\nnot Any, execution error\n19 occurs: Cannot convert\nAny in Any variable to\ndatatype.\nThe assignment to li_int\ncauses execution error\n19 in statement 2.\nThe event is\nfound but is not\nimplemented\n(there is no\nscript).\nThe event has a\ndefined return value.\nA null of the defined\ndatatype is returned.\nIf eventname is defined\nto return integer,\nli_int is set to null in\nstatement 2.\n \nThe event does not\nhave a defined return\nvalue.\nA null of the Any\ndatatype is returned.\nLa_any is set to null in\nstatement 3.\n \n \nIf the expected datatype is\nnot Any, execution error\n19 occurs: Cannot convert\nAny in Any variable to\ndatatype.\nThe assignment to li_int\ncauses execution error\n19 in statement 2.\nThe event is\nfound and\nexecuted but is\nnot defined with\na return value.\nThe code is looking\nfor a return value.\nExecution error 63:\nFunction/event with\nno return value used in\nexpression.\nStatements 2 and 3\ncause error 63.\nWhen an error occurs\nYou can surround a dynamic function call in a try-catch block to prevent the application from\nterminating when an execution error occurs. Although you can also handle the error in the\nSystemError event, you should not allow the application to continue once the SystemError\nevent is invoked -- the SystemError event should only clean up and halt the application.\nFor information on using try-catch blocks, see Section 2.2.9, \u201cException handling in\nPowerBuilder\u201d in Application Techniques.\nIf the arguments do not match\nFunction arguments are part of the function's definition. Therefore, if the arguments do not\nmatch (a compatible match, not an exact match), it is essentially a different function. The\nresult is the same as if the function did not exist.\n"}
{"page": 112, "text": "PowerScript Topics\nPage 112\nIf you call an event dynamically and the arguments do not match, the call fails and control\nreturns to the calling script. There is no error.\nError-proofing your code\nCalling functions and events dynamically opens up your application to potential errors. The\nsurest way to avoid these errors is to always make static calls to functions and events. When\nthat is not possible, your design and testing can ensure that there is always an appropriate\nfunction or event with the correct return datatype.\nOne type of error you can check for and avoid is data conversion errors.\nThe preceding tables illustrated that a function or event can return a null value either as an\nAny variable or as a variable of the expected datatype when a function or event definition\nexists but is not implemented.\nIf you always assign return values to Any variables for dynamic calls, you can test for null\n(which indicates failure) before using the value in code.\nThis example illustrates the technique of checking for null before using the return value.\nany la_any\ninteger li_gotvalue\nla_any = object.DYNAMIC uf_getaninteger( )\nIF IsNull(la_any) THEN\n   ... // Error handling\nELSE\n   li_gotvalue = la_any\nEND IF\n1.6.5 Overloading, overriding, and extending functions and events\nIn PowerBuilder, when functions are inherited, you can choose to overload or override the\nfunction definition, described in Overloading and overriding functions.\nWhen events are inherited, the scripts for those events are extended by default. You can\nchoose to extend or override the script, described in Extending and overriding events.\n1.6.5.1 Overloading and overriding functions\nTo create an overloaded function, you declare the function as you would any function using\nInsert>Function.\nOverriding means defining a function in a descendant object that has the same name and\nargument list as a function in the ancestor object. In the descendant object, the function in\nthe descendant is always called instead of the one in the ancestor -- unless you use the scope\nresolution operator (::).\nTo override a function, open the descendant object in the painter, select the function in\nthe Script view, and code the new script. The icon that indicates that there is a script for a\nfunction is half shaded when the function is inherited from an ancestor.\nYou can overload or override object functions only -- you cannot overload global functions.\n1.6.5.1.1 Type promotion when matching arguments for overloaded functions\nWhen you have overloaded a function so that one version handles numeric values and another\nversion handles strings, it is clear to the programmer what arguments to provide to call each\n"}
{"page": 113, "text": "PowerScript Topics\nPage 113\nversion of the function. Overloading with unrelated datatypes is a good idea and can provide\nneeded functionality for your application.\nProblematic overloading\nIf different versions of a function have arguments of related datatypes (different numeric\ntypes or strings and chars), you must consider how PowerBuilder promotes datatypes in\ndetermining which function is called. This kind of overloading is undesirable because of\npotential confusion in determining which function is called.\nWhen you call a function with an expression as an argument, the datatype of the expression\nmight not be obvious. However, the datatype is important in determining what version of an\noverloaded function is called.\nBecause of the intricacies of type promotion for numeric datatypes, you might decide that\nyou should not define overloaded functions with different numeric datatypes. Changes\nsomeone makes later can affect the application more drastically than expected if the change\ncauses a different function to be called.\nHow type promotion works\nWhen PowerBuilder evaluates an expression, it converts the datatypes of constants and\nvariables so that it can process or combine them correctly.\nNumbers\nWhen PowerBuilder evaluates numeric expressions, it promotes the datatypes of values\naccording to the operators and the datatypes of the other operands. For example, the datatype\nof the expression n/2 is double because it involves division -- the datatype of n does not\nmatter.\nStrings\nWhen evaluating an expression that involves chars and strings, PowerBuilder promotes chars\nto strings.\nFor more information on type promotion, see Datatype of PowerBuilder expressions.\nUsing conversion functions\nYou can take control over the datatypes of expressions by calling a conversion function.\nThe conversion function ensures that the datatype of the expression matches the function\nprototype you want to call.\nFor example, because the expression n/2 involves division, the datatype is double. However,\nif the function you want to call expects a long, you can use the Long function to ensure that\nthe function call matches the prototype:\nCalculateHalf(Long(n/2))\n1.6.5.2 Extending and overriding events\nIn PowerBuilder, when you write event scripts in a descendant object, you can extend\nor override scripts that have been written in the ancestor. Extending (the default) means\nexecuting the ancestor's script first, then executing code in the descendant's event script.\nOverriding means ignoring the ancestor's script and only executing the script in the\ndescendant.\n"}
{"page": 114, "text": "PowerScript Topics\nPage 114\nNo overloaded events\nYou cannot overload an event by defining an event with the same name but different\narguments. Event names must be unique.\nTo select extending or overriding, open the script in the Script view and check or clear the\nExtend Ancestor Script item in the Edit or pop-up menu.\n1.6.6 Passing arguments to functions and events\nIn PowerBuilder, arguments for built-in or user-defined functions and events can be passed\nthree ways:\nTable 1.41: Passing arguments to functions and events\nMethod of\npassing\nDescription\nBy value\nA copy of the variable is available in the function or event script. Any changes\nto its value affect the copy only. The original variable in the calling script is\nnot affected.\nBy\nreference\nA pointer to the variable is passed to the function or event script. Changes\naffect the original variable in the calling script.\nRead-only\nThe variable is available in the function or event. Its value is treated as a\nconstant changes to the variable are not allowed and cause a compiler error.\nRead-only provides a performance advantage for some datatypes because\nit does not create a copy of the data, as with by value. Datatypes for which\nread-only provides a performance advantage are string, blob, date, time, and\nDateTime.\nFor other datatypes, read-only provides documentation for other developers by\nindicating something about the purpose of the argument.\n1.6.6.1 Passing objects\nWhen you pass an object to a function or event, the object must exist when you refer to its\nproperties and functions. If you call the function but the object has been destroyed, you get\nthe execution error for a null object reference. This is true whether you pass by reference, by\nvalue, or read-only.\nTo illustrate, suppose you have a window with a SingleLineEdit. If you post a function\nin the window's Close event and pass the SingleLineEdit, the object does not exist when\nthe function executes. To use information from the SingleLineEdit, you must pass the\ninformation itself, such as the object's text, rather than the object. When passing an object,\nyou never get another copy of the object. By reference and by value affect the object\nreference, not the object itself.\nObjects passed by value\nWhen you pass an object by value, you pass a copy of the reference to the object. That\nreference is still pointing to the original object. If you change properties of the object, you\nare changing the original object. However, you can change the value of the variable so that it\npoints to another object without affecting the original variable.\n"}
{"page": 115, "text": "PowerScript Topics\nPage 115\nObjects passed by reference\nWhen you pass an object by reference, you pass a pointer to the original reference to the\nobject. Again, if you change properties of the object, you are changing the original object.\nYou can change the value of the variable that was passed, but the result is different -- the\noriginal reference now points to the new object.\nObjects passed as read-only\nWhen you pass an object as read-only, you get a copy of the reference to the object. You\ncannot change the reference to point to a new object (because read-only is equivalent to a\nCONSTANT declaration), but you can change properties of the object.\n1.6.6.2 Passing structures\nStructures as arguments behave like simple variables, not like objects.\nStructures passed by value\nWhen you pass a structure by value, PowerBuilder passes a copy of the structure. You can\nmodify the copy without affecting the original.\nStructures passed by reference\nWhen you pass a structure by reference, PowerBuilder passes a reference to the structure.\nWhen you changes values in the structure, you are modifying the original. You will not get a\nnull object reference, because structures always exist until they go out of scope.\nStructures passed as read-only\nWhen you pass a structure as read-only, PowerBuilder passes a copy of the structure. You\ncannot modify any members of the structure.\n1.6.6.3 Passing arrays\nWhen an argument is an array, you specify brackets as part of the argument name in the\ndeclaration for the function or event.\nVariable-size array as an argument\nFor example, suppose a function named uf_convertarray accepts a variable-size array of\nintegers. If the argument's name is intarray, then for Name enter intarray[ ] and for Type enter\ninteger.\nIn the script that calls the function, you either declare an array variable or use an instance\nvariable or value that has been passed to you. The declaration of that variable, wherever it is,\nlooks like this:\ninteger a[]\nWhen you call the function, omit the brackets, because you are passing the whole array. If\nyou specified brackets, you would be passing one value from the array:\nuf_convertarray(a)\nFixed-size array as an argument\nFor comparison, suppose the uf_convertarray function accepts a fixed-size array of integers\nof 10 elements instead. If the argument's name is intarray, then for Name enter intarray[10],\nand for Type enter integer.\n"}
{"page": 116, "text": "PowerScript Topics\nPage 116\nThe declaration of the variable to be passed looks like this:\ninteger a[10]\nYou call the function the same way, without brackets:\nuf_convertarray(a)\nIf the array dimensions do not match\nIf the dimensions of the array variable passed do not match the dimensions declared\nfor the array argument, then array-to-array assignment rules apply. For more\ninformation, see Declaring arrays.\n1.6.7 Using return values\nYou can use return values of functions and events.\n1.6.7.1 Functions\nAll built-in PowerScript functions return a value. You can use the return value or ignore it.\nUser-defined functions and external functions might or might not return a value.\nTo use a return value, assign it to a variable of the appropriate datatype or call the function\nwherever you can use a value of that datatype.\nPosting a function\nIf you post a function, you cannot use its return value.\nExamples\nThe built-in Asc function takes a string as an argument and returns the Unicode code point\nvalue of the string's first character:\nstring S1 = \"Carton\"\nlong Test\nTest=32+Asc(S1)   // Test now contains the value 99\n                 // (the code point value of \"C\" is 67).\nThe SelectRow function expects a row number as the first argument. The return value of the\nGetRow function supplies the row number:\ndw_1.SelectRow(dw_1.GetRow(), true)\nTo ignore a return value, call the function as a single statement:\nBeep(4)       // This returns a value, but it is \n               // rarely needed.\n1.6.7.2 Events\nMost system events return a value. The return value is a long numeric codes have specific\nmeanings for each event. You specify the event's return code with a RETURN statement in\nthe event script.\nWhen the event is triggered by user actions or system messages, the value is returned to the\nsystem, not to a script you write.\n"}
{"page": 117, "text": "PowerScript Topics\nPage 117\nWhen you trigger a system or user-defined event, the return value is returned to your script\nand you can use the value as appropriate. If you post an event, you cannot use its return\nvalue.\n1.6.7.3 Using cascaded calling and return values\nPowerBuilder dot notation allows you to chain together several object function or event calls.\nThe return value of the function or event becomes the object for the following call.\nThis syntax shows the relationship between the return values of three cascaded function calls:\nfunc1returnsobject( ).func2returnsobject( ).func3returnsanything( )\nDisadvantage of cascaded calls\nWhen you call several functions in a cascade, you cannot check their return values\nand make sure they succeeded. If you want to check return values (and checking is\nalways a good idea), call each function separately and assign the return values to\nvariables. Then you can use the verified variables in dot notation before the final\nfunction name.\nDynamic calls\nIf you use the DYNAMIC keyword in a chain of cascaded calls, it carries over to all function\ncalls that follow.\nIn this example, both func1 and func2 are called dynamically:\nobject1.DYNAMIC func1().func2()\nThe compiler reports an error if you use DYNAMIC more than once in a cascaded call. This\nexample would cause an error:\nobject1.DYNAMIC func1().DYNAMIC func2() // error\nPosted functions and events\nPosted functions and events do not return a value to the calling scripts. Therefore, you can\nonly use POST for the last function or event in a cascaded call. Calls before the last must\nreturn a valid object that can be used by the following call.\nSystem events\nSystem events can only be last in a cascaded list of calls, because their return value is a long\n(or they have no return value). They do not return an object that can be used by the next call.\nAn event you have defined can have a return value whose datatype is an object. You can\ninclude such events in a cascaded call.\n1.6.8 Syntax for calling PowerBuilder functions and events\nDescription\nThis syntax is used to call all PowerBuilder functions and events. Depending on the\nkeywords used, this syntax can be used to call system, global, object, user-defined, and\nexternal functions as well as system and user-defined events.\nSyntax\n"}
{"page": 118, "text": "PowerScript Topics\nPage 118\n{ objectname.} { type } { calltype } { when } name ( { argumentlist } )\nThe following table describes the arguments used in function and event calls.\nTable 1.42: Arguments for calling functions and events\nArgument\nDescription\nobjectname\n(optional)\nThe name of the object where the function or event is defined followed by a\nperiod or the descendant of that object/the name of the ancestor class followed\nby two colons.\nIf a function name is not qualified, PowerBuilder uses the rules for finding\nfunctions and executes the first matching function it finds.\nFor system or global functions, omit objectname.\nFor the rules PowerBuilder uses to find unqualified function names, see\nFinding and executing functions and events.\ntype\n(optional)\nA keyword specifying whether you are calling a function or event. Values are:\n\u2022 FUNCTION (Default)\n\u2022 EVENT\ncalltype\n(optional)\nA keyword specifying when PowerBuilder looks for the function or event.\nValues are:\n\u2022 STATIC (Default)\n\u2022 DYNAMIC\nFor more information about static versus dynamic calls, see Static versus\ndynamic calls. For more information on dynamic calls, see Dynamic calls.\nwhen\n(optional)\nA keyword specifying whether the function or event should execute\nimmediately or after the current script is finished. Values are:\n\u2022 TRIGGER -- (Default) Execute it immediately.\n\u2022 POST -- Put it in the object's queue and execute it in its turn, after other\npending messages have been handled.\nFor more about triggering and posting, see Triggering versus posting functions\nand events.\nname\nThe name of the function or event you want to call.\nargumentlist\n(optional)\nThe values you want to pass to name. Each value in the list must have a\ndatatype that corresponds to the declared datatype in the function or event\ndefinition or declaration.\nUsage\nFunction and event names are not case sensitive. For example, the following three statements\nare equivalent:\nClipboard(\"PowerBuilder\")\n"}
{"page": 119, "text": "PowerScript Topics\nPage 119\nclipboard(\"PowerBuilder\")\nCLIPBOARD(\"PowerBuilder\")\nCalling arguments\nThe type, calltype, and when keywords can be in any order after objectname.\nNot all options in the syntax apply to all types. For example, there is no point in calling\na system PowerScript object function dynamically. It always exists, and the dynamic call\nincurs extra overhead. However, if you had a user-defined function of the same name that\napplied to a different object, you might call that function dynamically.\nUser-defined global functions and system functions can be triggered or posted but they\ncannot be called dynamically.\nFinding functions\nIf a global function does not exist with the given name, PowerBuilder will look for an object\nfunction that matches the name and argument list before it looks for a PowerBuilder system\nfunction.\nCalling functions and events in the ancestor\nIf you want to circumvent the usual search order and force PowerBuilder to find a function or\nevent in an ancestor object, bypassing it in the descendant, use the ancestor operator (::).\nFor more information about the scope operator for ancestors, see Calling functions and events\nin an object's ancestor.\nCascaded calls\nCalls can be cascaded using dot notation. Each function or event call must return an object\ntype that is the appropriate object for the following call.\nFor more information about cascaded calls, see Using cascaded calling and return values.\nUsing return values\nIf the function has a return value, you can call the function on the right side of an assignment\nstatement, as an argument for another function, or as an operand in an expression.\nExternal functions\nBefore you can call an external function, you must declare it. For information about declaring\nexternal functions, see Declaring external functions.\nExamples\nExample 1\nThe following statements show various function calls using the most simple construction of\nthe function call syntax.\nThis statement calls the system function Asc:\ncharnum = Asc(\"x\")\nThis statement calls the DataWindow function in a script that belongs to the DataWindow:\nUpdate( )\nThis statement calls the global user-defined function gf_setup_appl:\ngf_setup_appl(24, \"Window1\")\n"}
{"page": 120, "text": "PowerScript Topics\nPage 120\nThis statement calls the system function PrintRect:\nPrintRect(job, 250, 250, 7500, 1000, 50)\nExample 2\nThe following statements show calls to global and system functions.\nThis statement posts the global user-defined function gf_setup_appl. The function is executed\nwhen the calling script finishes:\nPOST gf_setup_appl(24, \"Window1\")\nThis statement posts the system function PrintRect. It is executed when the calling script\nfinishes. The print job specified in job must still be open:\nPOST PrintRect(job, 250, 250, 7500, 1000, 50)\nExample 3\nIn a script for a control, these statements call a user-defined function defined in the parent\nwindow. The statements are equivalent, because FUNCTION, STATIC, and TRIGGER are\nthe defaults:\nParent.FUNCTION STATIC TRIGGER wf_process( )\nParent.wf_process( )\nExample 4\nThis statement in a DataWindow control's Clicked script calls the DoubleClicked event\nfor the same control. The arguments the system passed to Clicked are passed on to\nDoubleClicked. When triggered by the system, PowerBuilder passes DoubleClicked those\nsame arguments:\nThis.EVENT DoubleClicked(xpos, ypos, row, dwo)\nThis statement posts the same event:\nThis.EVENT POST DoubleClicked(xpos, ypos, row, dwo)\nExample 5\nThe variable iw_a is an instance variable of an ancestor window type w_ancestorsheet:\nw_ancestorsheet iw_a\nA menu has a script that calls the wf_export function, but that function is not defined in the\nancestor. The DYNAMIC keyword is required so that the script compiles:\niw_a.DYNAMIC wf_export( )\nAt execution time, the window that is opened is a descendant with a definition of wf_export.\nThat window is assigned to the variable iw_a and the call to wf_export succeeds.\n1.6.9 Calling functions and events in an object's ancestor\nDescription\nIn PowerBuilder, when an object is instantiated with a descendant object, even if its class is\nthe ancestor and that descendant has a function or event script that overrides the ancestor's,\nthe descendant's version is the one that is executed. If you specifically want to execute the\n"}
{"page": 121, "text": "PowerScript Topics\nPage 121\nancestor's version of a function or event, you can use the ancestor operator (::) to call the\nancestor's version explicitly.\nSyntax\n{ objectname. } ancestorclass ::{ type } { when } name ( { argumentlist } )\nThe following table describes the arguments used to call functions and events in an object's\nancestor.\nTable 1.43: Arguments for calling ancestor functions and events\nArgument\nDescription\nobjectname\n(optional)\nThe name of the object whose ancestor contains the function you want to\nexecute.\nancestorclass The name of the ancestor class whose function or event you want to execute.\nThe pronoun Super provides the appropriate reference when ancestorobject is\nthe immediate ancestor of the current object.\ntype\n(optional)\nA keyword specifying whether you are calling a function or event. Values are:\n\u2022 (Default) FUNCTION\n\u2022 EVENT\nwhen\n(optional)\nA keyword specifying whether the function or event should execute\nimmediately or after the current script is finished. Values are:\n\u2022 TRIGGER -- (Default) Execute it immediately\n\u2022 POST -- Put it in the object's queue and execute it in its turn, after other\npending messages have been handled\nname\nThe name of the object function or event you want to call.\nargumentlist\n(optional)\nThe values you want to pass to name. Each value in the list must have a\ndatatype that corresponds to the declared datatype in the function definition.\nUsage\nThe AncestorReturnValue variable\nWhen you extend an event script in a descendant object, the compiler automatically generates\na local variable called AncestorReturnValue that you can use if you need to know the return\nvalue of the ancestor event script. The variable is also generated if you override the ancestor\nscript and use the CALL syntax to call the ancestor event script.\nThe datatype of the AncestorReturnValue variable is always the same as the datatype defined\nfor the return value of the event. The arguments passed to the call come from the arguments\nthat are passed to the event in the descendant object.\nExtending event scripts\nThe AncestorReturnValue variable is always available in extended event scripts. When you\nextend an event script, PowerBuilder generates the following syntax and inserts it at the\nbeginning of the event script:\nCALL SUPER::event_name\n"}
{"page": 122, "text": "PowerScript Topics\nPage 122\nYou only see the statement if you export the syntax of the object or look at it in the Source\neditor.\nThe following example illustrates the code you can put in an extended event script:\nIf AncestorReturnValue = 1 THEN\n// execute some code\nELSE\n// execute some other code\nEND IF\nOverriding event scripts\nThe AncestorReturnValue variable is only available when you override an event script after\nyou call the ancestor event using either of these versions of the CALL syntax:\nCALL SUPER::event_name\nCALL ancestor_name::event_name\nThe compiler cannot differentiate between the keyword SUPER and the name of the ancestor.\nThe keyword is replaced with the name of the ancestor before the script is compiled.\nThe AncestorReturnValue variable is only declared and a value assigned when you use the\nCALL event syntax. It is not declared if you use the new event syntax:\nancestor_name::EVENT event_name( ) \nYou can use the same code in a script that overrides its ancestor event script, but you must\ninsert a CALL statement before you use the AncestorReturnValue variable.\n// execute code that does some preliminary processing\nCALL SUPER::uo_myevent\nIF AncestorReturnValue = 1 THEN\n...\nFor information about CALL, see CALL.\nExamples\nExample 1\nSuppose a window w_ancestor has an event ue_process. A descendant window has a script\nfor the same event.\nThis statement in a script in the descendant searches the event chain and calls all appropriate\nevents. If the descendant extends the ancestor script, it calls a script for each ancestor in\nturn followed by the descendant script. If the descendant overrides the ancestor, it calls the\ndescendant script only:\nEVENT ue_process( )\nThis statement calls the ancestor event only (this script works if the calling script belongs to\nanother object or the descendant window):\nw_ancestor::EVENT ue_process( )\nExample 2\nYou can use the pronoun Super to refer to the ancestor. This statement in a descendant\nwindow script or in a script for a control on that window calls the Clicked script in the\nimmediate ancestor of that window.\n"}
{"page": 123, "text": "PowerScript Topics\nPage 123\nSuper::EVENT Clicked(0, x, y)\nExample 3\nThese statements call a function wf_myfunc in the ancestor window (presumably, the\ndescendant also has a function called wf_myfunc):\nSuper::wf_myfunc( )\nSuper::POST wf_myfunc( )\n"}
{"page": 124, "text": "Statements, Events, and Functions\nPage 124\n2 Statements, Events, and Functions\nThis part provides reference information about each of the components of the PowerScript\nlanguage.\n2.1 PowerScript Statements\nAbout this chapter\nThis chapter describes the PowerScript statements and how to use them in scripts.\n2.1.1 Assignment\nDescription\nAssigns values to variables or object properties or object references to object variables.\nSyntax\nvariablename  = expression\nTable 2.1:\nArgument Description\nvariablenameThe name of the variable or object property to which you want to assign a\nvalue. Variablename can include dot notation to qualify the variable with one or\nmore object names.\nexpression An expression whose datatype is compatible with variablename.\nUsage\nUse assignment statements to assign values to variables. To assign a value to a variable\nanywhere in a script, use the equal sign (=). For example:\nString1 = \"Part is out of stock\"\nTaxRate = .05\nNo multiple assignments\nSince the equal sign is also a logical operator, you cannot assign more than one variable in a\nsingle statement. For example, the following statement does not assign the value 0 to A and\nB:\nA=B=0    // This will not assign 0 to A and B.\nThis statement first evaluates B=0 to true or FALSE and then tries to assign this boolean\nvalue to A. When A is not a boolean variable, this line produces an error when compiled.\nAssigning array values\nYou can assign multiple array values with one statement, such as:\nint Arr[]\nArr = {1, 2, 3, 4}\nYou can also copy array contents. For example, this statement copies the contents of Arr2\ninto array Arr1:\nArr1 = Arr2\n"}
{"page": 125, "text": "Statements, Events, and Functions\nPage 125\nOperator shortcuts\nThe PowerScript shortcuts for assigning values to variables in the following table ave slight\nperformance advantages over their equivalents.\nTable 2.2: Shortcuts for assigning values\nAssignment\nExample\nEquivalent to\n++\ni ++\ni = i + 1\n--\ni --\ni = i - 1\n+=\ni += 3\ni = i + 3\n-=\ni -= 3\ni = i -3\n*=\ni *= 3\ni = i * 3\n/=\ni /= 3\ni = i / 3\n^=\ni ^=3\ni = i ^ 3\nUnless you have prohibited the use of dashes in variable names, you must leave a space\nbefore -- and -=. If you do not, PowerScript reads the minus sign as part of a variable name.\nFor more information, see Identifier names.\nExamples\nExample 1\nThese statements each assign a value to the variable ld_date:\ndate ld_date\nld_date = Today( )\nld_date = 2006-01-01\nld_date = Date(\"January 1, 2006\")\nExample 2\nThese statements assign the parent of the current control to a window variable:\nwindow lw_current_window\nlw_current_window = Parent\nExample 3\nThis statement makes a CheckBox invisible:\ncbk_on.Visible = FALSE\nExample 4\nThis statement is not an assignment -- it tests the value of the string in the SingleLineEdit\nsle_emp:\nIF sle_emp.Text = \"N\" THEN Open(win_1)\nExample 5\nThese statements concatenate two strings and assign the value to the string Text1:\nstring Text1\nText1 = sle_emp.Text+\".DAT\"\nExample 6\n"}
{"page": 126, "text": "Statements, Events, and Functions\nPage 126\nThese assignments use operator shortcuts:\nint i = 4i ++       // i is now 5.\ni --                // i is 4 again.\ni += 10            // i is now 14.\ni /= 2             // i is now 7.\nThese shortcuts can be used only in pure assignment statements. They cannot be used with\nother operators in a statement. For example, the following is invalid:\nint i, j\ni = 12\nj = i ++                  // INVALID\nThe following is valid, because ++ is used by itself in the assignment:\nint i, j\ni = 12\ni ++\nj = i\n2.1.2 CALL\nDescription\nCalls an ancestor script from a script for a descendant object. You can call scripts for events\nin an ancestor of the user object, menu, or window. You can also call scripts for events for\ncontrols in an ancestor of the user object or window.\nWhen you use the CALL statement to call an ancestor event script, the AncestorReturnValue\nvariable is generated. For more information on the AncestorReturnValue variable, see About\nevents.\nSyntax\nCALL ancestorobject {`controlname}::event\nTable 2.3:\nParameter\nDescription\nancestorobject\nAn ancestor of the descendant object\ncontrolname (optional)\nThe name of a control in an ancestor window\nor custom user object\nevent\nAn event in the ancestor object\nUsage\nUsing the standard syntax\nFor most purposes, you should use the standard syntax for calling functions and\nevents. For more information about the standard syntax, see Syntax for calling\nPowerBuilder functions and events.\nThe standard syntax allows you to trigger or post an event or function in an ancestor\nand then pass arguments, but it does not allow you to call a script for a control in the\nancestor.\n"}
{"page": 127, "text": "Statements, Events, and Functions\nPage 127\nIn some circumstances, you can use the pronoun Super when ancestorobject is the descendant\nobject's immediate ancestor. See the discussion of Super pronoun.\nIf the call is being made to an ancestor event, the arguments passed to the current event are\nautomatically propagated to the ancestor event. If you call a non-ancestor event and pass\narguments, you need to use the new syntax, otherwise null will be passed for each argument.\nExamples\nExample 1\nThis statement calls a script for an event in an ancestor window:\nCALL w_emp::Open\nExample 2\nThis statement calls a script for an event in a control in an ancestor window:\nCALL w_emp`cb_close::Clicked\n2.1.3 CHOOSE CASE\nDescription\nA control structure that directs program execution based on the value of a test expression\n(usually a variable).\nSyntax\nCHOOSE CASE testexpression\nCASE expressionlist\n      statementblock\n{ CASE expressionlist\n      statementblock \n. . .\nCASE expressionlist \n      statementblock } \nCASE ELSE\n      statementblock } \nEND CHOOSE\nTable 2.4:\nParameter\nDescription\ntestexpression\nThe expression on which you want to base the execution of the script\nexpressionlist\nOne of the following expressions:\n\u2022 A single value\n\u2022 A list of values separated by commas (such as 2, 4, 6, 8)\n\u2022 A TO clause (such as 1 TO 30)\n\u2022 IS followed by a relational operator and comparison value (such as\nIS>5)\n\u2022 Any combination of the above with an implied OR between expressions\n(such as 1, 3, 5, 7, 9, 27 TO 33, IS >42)\n"}
{"page": 128, "text": "Statements, Events, and Functions\nPage 128\nParameter\nDescription\nstatementblock\nThe block of statements you want PowerBuilder to execute if the test\nexpression matches the value in expressionlist\nUsage\nAt least one CASE clause is required. You must end a CHOOSE CASE control structure with\nEND CHOOSE.\nIf testexpression at the beginning of the CHOOSE CASE statement matches a value in\nexpressionlist for a CASE clause, the statements immediately following the CASE clause are\nexecuted. Control then passes to the first statement after the END CHOOSE clause.\nIf multiple CASE expressions exist, then testexpression is compared to each expressionlist\nuntil a match is found or the CASE ELSE or END CHOOSE is encountered.\nIf there is a CASE ELSE clause and the test value does not match any of the expressions,\nstatementblock in the CASE ELSE clause is executed. If no CASE ELSE clause exists and a\nmatch is not found, the first statement after the END CHOOSE clause is executed.\nExamples\nExample 1\nThese statements provide different processing based on the value of the variable Weight:\nCHOOSE CASE Weight\n     CASE IS<16\n      Postage=Weight*0.30\n      Method=\"USPS\"\nCASE 16 to 48\n      Postage=4.50\n      Method=\"UPS\"\nCASE ELSE\n      Postage=25.00\n      Method=\"FedEx\"\nEND CHOOSE\nExample 2\nThese statements convert the text in a SingleLineEdit control to a real value and provide\ndifferent processing based on its value:\nCHOOSE CASE Real(sle_real.Text)\nCASE is < 10.99999\n      sle_message.Text = \"Real Case < 10.99999\"\nCASE 11.00 to 48.99999\n      sle_message.Text = \"Real Case 11 to 48.9999\nCASE is > 48.9999\n      sle_message.Text = \"Real Case > 48.9999\"\nCASE ELSE\n      sle_message.Text = \"Cannot evaluate!\"\nEND CHOOSE\n2.1.4 CONTINUE\nDescription\nIn a DO...LOOP or a FOR...NEXT control structure, skips statements in the loop.\nCONTINUE takes no parameters.\n"}
{"page": 129, "text": "Statements, Events, and Functions\nPage 129\nSyntax\nCONTINUE\nUsage\nWhen PowerBuilder encounters a CONTINUE statement in a DO...LOOP or FOR...NEXT\nblock, control passes to the next LOOP or NEXT statement. The statements between the\nCONTINUE statement and the loop's end statement are skipped in the current iteration of\nthe loop. In a nested loop, a CONTINUE statement bypasses statements in the current loop\nstructure.\nFor information on how to break out of the loop, see EXIT.\nExamples\nExample 1\nThese statements display a message box twice: when B equals 2 and when B equals 3. As\nsoon as B is greater than 3, the statement following CONTINUE is skipped during each\niteration of the loop:\ninteger A=1, B=1\nDO WHILE A < 100\n      A = A+1\n      B = B+1\n      IF B > 3 \nTHEN CONTINUE\n      MessageBox(\"Hi\", \"B is \" + String(B) )\nLOOP\nExample 2\nThese statements stop incrementing B as soon as Count is greater than 15:\ninteger A=0, B=0, Count\nFOR Count = 1 to 100\n      A = A + 1\n      IF Count > 15 \nTHEN CONTINUE\n      B = B + 1\nNEXT // Upon completion, a=100 and b=15.\n2.1.5 CREATE\nDescription\nCreates an object instance for a specified object type. After a CREATE statement, properties\nof the created object instance can be referenced using dot notation.\nThe CREATE statement returns an object instance that can be stored in a variable of the same\ntype.\nSyntax 1 specifies the object type at compilation. Syntax 2 allows the application to choose\nthe object type dynamically.\nSyntax\nSyntax 1 (specifies the object type at compilation):\nobjectvariable = CREATE objecttype\n"}
{"page": 130, "text": "Statements, Events, and Functions\nPage 130\nTable 2.5:\nParameter\nDescription\nobjectvariable\nA global, instance, or local variable whose\ndatatype is objecttype\nobjecttype\nThe object datatype\nSyntax 2 (allows the application to choose the object type dynamically):\nobjectvariable = CREATE USING objecttypestring\nTable 2.6:\nParameter\nDescription\nobjectvariable\nA global, instance, or local variable whose\ndatatype is the same class as the object being\ncreated or an ancestor of that class\nobjecttypestring\nA string whose value is the name of the class\ndatatype to be created\nUsage\nUse CREATE as the first reference to any class user object. This includes standard class user\nobjects such as mailSession or Transaction.\nThe system provides one instance of several standard class user objects: Message, Error,\nTransaction, DynamicDescriptionArea, and DynamicStagingArea. You only need to use\nCREATE if you declare additional instances of these objects.\nIf you need a menu that is not part of an open window definition, use CREATE to create an\ninstance of the menu. (See the function PopMenu.)\nTo create an instance of a visual user object or window, use the appropriate Open function\n(instead of CREATE).\nYou do not need to use CREATE to allocate memory for:\n\u2022 A standard datatype, such as integer or string\n\u2022 Any structure, such as the Environment object\n\u2022 Any object whose AutoInstantiate setting is true\n\u2022 Any object that has been instantiated using a function, such as Open\nSpecifying the object type dynamically\nCREATE USING allows your application to choose the object type dynamically. It is usually\nused to instantiate an ancestor variable with an instance of one of its descendants. The\nparticular descendant is chosen at execution time.\nFor example, if uo_a has two descendants, uo_a_desc1 and uo_a_desc2, then the application\ncan select the object to be created based on current conditions:\nuo_a uo_a_var\n"}
{"page": 131, "text": "Statements, Events, and Functions\nPage 131\nstring ls_objectname \nIF ... THEN\n      ls_objectname = \"uo_a_desc1\"\nELSE\n      ls_objectname = \"uo_a_desc2\"\nEND IF\nuo_a_var = CREATE USING ls_objectname\nDestroying objects you create\nWhen you have finished with an object you created, you can call DESTROY to release its\nmemory. However, you should call DESTROY only if you are sure that the object is not\nreferenced by any other object. PowerBuilder's garbage collection mechanism maintains a\ncount of references to each object and destroys unreferenced objects automatically.\nFor more information about garbage collection, see Garbage collection.\nExamples\nExample 1\nThese statements create a new transaction object and stores the object in the variable\nDBTrans:\ntransaction DBTrans\nDBTrans = CREATE transaction\nDBTrans.DBMS = 'ODBC'\nExample 2\nThese statements create a user object when the application has need of the services it\nprovides. Because the user object might or might not exist, the code that accesses it checks\nwhether it exists before calling its functions.\nThe object that creates the service object declares invo_service as an instance variable:\nn_service invo_service\nThe Open event for the object creates the service object:\n//Open event of some object\nIF (some condition) \nTHEN \n   invo_service = CREATE n_service\nEND IF\nWhen another script wants to call a function that belongs to the n_service class, it verifies\nthat invo_service is instantiated:\nIF IsValid(invo_service) \nTHEN\n   invo_service.of_perform_some_work( )\nEND IF\nIf the service object was created, then it also needs to be destroyed:\nIF isvalid(invo_service) THEN DESTROY invo_service\nExample 3\nWhen you create a DataStore object, you also have to give it a DataObject and call\nSetTransObject before you can use it:\n"}
{"page": 132, "text": "Statements, Events, and Functions\nPage 132\nl_ds_delete = CREATE u_ds\nl_ds_delete.DataObject = 'd_user_delete'\nl_ds_delete.SetTransObject(SQLCA)\nli_cnt = l_ds_delete.Retrieve(lstr_data.name)\nExample 4\nIn this example, n_file_service_class is an ancestor object, and n_file_service_class_ansi and\nn_file_service_class_dbcs are its descendants. They hold functions and variables that provide\nservices for the application. The code chooses which object to create based on whether the\nuser is running in a DBCS environment:\nn_file_service_class  lnv_fileservice\nstring ls_objectname\nenvironment luo_env\nGetEnvironment ( luo_env )\nIF luo_env.charset = charsetdbcs! \nTHEN\n   ls_objectname = \"n_file_service_class_dbcs\"\nELSE\n   ls_objectname = \"n_file_service_class_ansi\"\nEND IF \nlnv_fileservice = CREATE USING ls_objectname\n2.1.6 DESTROY\nDescription\nEliminates an object instance that was created with the CREATE statement. After a\nDESTROY statement, properties of the deleted object instance can no longer be referenced.\nSyntax\nDESTROY objectvariable\nTable 2.7:\nParameter\nDescription\nobjectvariable\nA variable whose datatype is a PowerBuilder\nobject\nUsage\nWhen you are finished with an object that you created, you can call DESTROY to release\nits memory. However, you should call DESTROY only if you are sure that the object is not\nreferenced by any other object. PowerBuilder's garbage collection mechanism maintains a\ncount of references to each object and destroys unreferenced objects automatically.\nFor more information about garbage collection, see Garbage collection.\nAll objects are destroyed automatically when your application terminates.\nExamples\nExample 1\nThe following statement destroys the transaction object DBTrans that was created with a\nCREATE statement:\n"}
{"page": 133, "text": "Statements, Events, and Functions\nPage 133\nDESTROY DBTrans\nExample 2\nThis example creates an OLEStorage variable istg_prod_pic in a window's Open event. When\nthe window is closed, the Close event script destroys the object. The variable's declaration is:\nOLEStorage istg_prod_pic\nThe window's Open event creates an object instance and opens an OLE storage file:\ninteger li_result\nistg_prod_pic = CREATE OLEStorage\nli_result = istg_prod_pic.Open(\"PICTURES.OLE\")\nThe window's Close event destroys istg_prod_pic:\ninteger li_result\nli_result = istg_prod_pic.Save( )\nIF li_result = 0 \nTHEN\n      DESTROY istg_prod_pic\nEND IF\n2.1.7 DO...LOOP\nDescription\nA control structure that is a general-purpose iteration statement used to execute a block of\nstatements while or until a condition is true.\nDO... LOOP has four formats:\n\u2022 DO WHILE\nExecutes a block of statements while the specified condition is true. The loop ends when\nthe condition becomes false. If the condition is false on the first evaluation, the statement\nblock does not execute.\n\u2022 LOOP UNTIL\nExecutes a block of statements at least once and continues until the specified condition is\ntrue.\n\u2022 LOOP WHILE\nExecutes a block of statements at least once and continues while the specified condition is\ntrue. The loop ends when the condition becomes false.\nIn all four formats of the DO...LOOP control structure, DO marks the beginning of the\nstatement block that you want to repeat. The LOOP statement marks the end.\nYou can nest DO...LOOP control structures.\nSyntax\nDO UNTIL condition\n   statementblock\nLOOP\nDO WHILE condition\n"}
{"page": 134, "text": "Statements, Events, and Functions\nPage 134\n   statementblock\nLOOP\nDO\n   statementblock\nLOOP UNTIL condition\nDO\n   statementblock\nLOOP WHILE condition\nTable 2.8:\nParameter\nDescription\ncondition\nThe condition you are testing\nstatementblock\nThe block of statements you want to repeat\nUsage\nUse DO WHILE or DO UNTIL when you want to execute a block of statements only if a\ncondition is true (for WHILE) or false (for UNTIL). DO WHILE and DO UNTIL test the\ncondition before executing the block of statements.\nUse LOOP WHILE or LOOP UNTIL when you want to execute a block of statements at least\nonce. LOOP WHILE and LOOP UNTIL test the condition after the block of statements has\nbeen executed.\nExamples\nDO UNTIL\nThe following DO UNTIL repeatedly executes the Beep function until A is greater than 15:\ninteger A = 1, B = 1\nDO UNTIL A > 15\n      Beep(A)\n      A = (A + 1) * B\nLOOP\nDO WHILE\nThe following DO WHILE repeatedly executes the Beep function only while A is less than or\nequal to 15:\ninteger A = 1, B = 1\nDO WHILE A <= 15\n      Beep(A)\n      A = (A + 1) * B\nLOOP\nLOOP UNTIL\nThe following LOOP UNTIL executes the Beep function and then continues to execute the\nfunction until A is greater than 1:\ninteger A = 1, B = 1\nDO\n      Beep(A)\n      A = (A + 1) * B\nLOOP UNTIL A > 15\nLOOP WHILE\n"}
{"page": 135, "text": "Statements, Events, and Functions\nPage 135\nThe following LOOP WHILE repeatedly executes the Beep function while A is less than or\nequal to 15:\ninteger A = 1, B = 1\nDO\n      Beep(A)\n      A = (A + 1) * B\nLOOP WHILE A <= 15\n2.1.8 EXIT\nDescription\nIn a DO...LOOP or a FOR...NEXT control structure, passes control out of the current loop.\nEXIT takes no parameters.\nSyntax\nEXIT\nUsage\nAn EXIT statement in a DO...LOOP or FOR...NEXT control structure causes control to\npass to the statement following the LOOP or NEXT statement. In a nested loop, an EXIT\nstatement passes control out of the current loop structure.\nFor information on how to jump to the end of the loop and continue looping, see\nCONTINUE.\nExamples\nExample 1\nThis EXIT statement causes the loop to terminate if an element in the Nbr array equals 0:\nint Nbr[10]\nint Count = 1 // Assume values get assigned to Nbr array...\nDO WHILE Count < 11\n      IF Nbr[Count] = 0 THEN EXIT\n      Count = Count + 1\nLOOP\nMessageBox(\"Hi\",  \"Count is now \"  + String(Count) )\nExample 2\nThis EXIT statement causes the loop to terminate if an element in the Nbr array equals 0:\nint Nbr[10]\nint Count // Assume values get assigned to Nbr array...\nFOR Count = 1 to 10\n      IF Nbr[Count] = 0 THEN EXIT\nNEXT\nMessageBox(\"Hi\",  \"Count is now \"  + String(Count) )\n2.1.9 FOR...NEXT\nDescription\nA control structure that is a numerical iteration, used to execute one or more statements a\nspecified number of times.\nSyntax\n"}
{"page": 136, "text": "Statements, Events, and Functions\nPage 136\nFOR varname = start TO end {STEP increment}\n   statementblock\nNEXT\nTable 2.9:\nParameter\nDescription\nvarname\nThe name of the iteration counter variable. It can be any numerical type (byte,\ninteger, double, real, long, longlong, or decimal), but integers provide the\nfastest performance.\nstart\nStarting value of varname.\nend\nEnding value of varname.\nincrement\n(optional)\nThe increment value. Increment must be a constant and the same datatype\nas varname. If you enter an increment, STEP is required. +1 is the default\nincrement.\nstatementblockThe block of statements you want to repeat.\nEnding statement\nYou can end the FOR loop with the keywords END FOR instead of NEXT.\nUsage\nUsing the start and end parameters\nFor a positive increment, end must be greater than start. For a negative increment, end must\nbe less than start.\nWhen increment is positive and start is greater than end, statementblock does not execute.\nWhen increment is negative and start is less than end, statementblock does not execute.\nWhen start and end are expressions, they are reevaluated on each pass through the loop. If the\nexpression's value changes, it affects the number of loops. Consider this example -- the body\nof the loop changes the number of rows, which changes the result of the RowCount function:\nFOR n = 1 TO dw_1.RowCount( )\n      dw_1.DeleteRow(1)\nNEXT\nA variable as the step increment\nIf you need to use a variable for the step increment, you can use one of the\nDO...LOOP constructions and increment the counter yourself within the loop.\nNesting\nYou can nest FOR...NEXT statements. You must have a NEXT or END FOR for each FOR.\nAvoid overflow\nIf start or end is too large for the datatype of varname, varname will overflow, which\nmight create an infinite loop. Consider this statement for the integer li_int:\nFOR li_int = 1 TO 50000\n"}
{"page": 137, "text": "Statements, Events, and Functions\nPage 137\nThe end value 50000 is too large for an integer. When li_int is incremented, it\noverflows to a negative value before reaching 50000, creating an infinite loop.\nExamples\nExample 1\nThese statements add 10 to A as long as n is >=5 and <=25:\nFOR n = 5 to 25\n      A = A+10\nNEXT\nExample 2\nThese statements add 10 to A and increment n by 5 as long as n is >= 5 and <=25:\nFOR N = 5 TO 25 STEP 5\n      A = A+10\nNEXT\nExample 3\nThese statements contain two lines that will never execute because increment is negative and\nstart is less than end:\nFOR Count = 1 TO 100 STEP -1\n   IF Count < 1 THEN EXIT // These 2 lines\n   Box[Count] = 10        // will never execute.\nNEXT\nExample 4\nThese are nested FOR...NEXT statements:\nInt Matrix[100,50,200]\nFOR i = 1 to 100\n      FOR j = 1 to 50\n      FOR k = 1 to 200\n          Matrix[i,j,k]=1\n      NEXT\n      NEXT\nNEXT\n2.1.10 GOTO\nDescription\nTransfers control from one statement in a script to another statement that is labeled.\nSyntax\nGOTO label\nTable 2.10:\nParameter\nDescription\nlabel\nThe label associated with the statement to which you want to transfer\ncontrol. A label is an identifier followed by a colon (such as OK:). Do not\nuse the colon with a label in the GOTO statement.\n"}
{"page": 138, "text": "Statements, Events, and Functions\nPage 138\nExamples\nExample 1\nThis GOTO statement skips over the Taxable=FALSE line:\nGoto NextStep\nTaxable=FALSE             //This statement never executes.\nNextStep:\nRate=Count/Count4\nExample 2\nThis GOTO statement transfers control to the statement associated with the label OK:\nGOTO OK\n.\n.\n.\nOK:\n.\n.\n.\n2.1.11 HALT\nDescription\nTerminates an application.\nSyntax\nHALT {CLOSE}\nUsage\nWhen PowerBuilder encounters Halt without the keyword CLOSE, it immediately terminates\nthe application.\nWhen PowerBuilder encounters Halt with the keyword CLOSE, it immediately executes the\nscripts for application Close event and for the CloseQuery, Close, and Destructor events on\nall instantiated objects before terminating the application. If there are no scripts for these\nevents, PowerBuilder immediately terminates the application.\nYou should not code a HALT statement in a component that will run in a server environment.\nWhen a PowerBuilder component is running in a J2EE server, and a HALT statement is\nencountered, instead of aborting the application, which is in this case the server itself, the\nPowerBuilder VM throws a runtime error and continues. The container is responsible for\nmanaging the lifecycle of the component.\nExamples\nExample 1\nThis statement stops the application if the user enters a password in the SingleLineEdit\nnamed sle_password that does not match the value stored in a string named CorrectPassword:\nIF sle_password.Text <> CorrectPassword THEN HALT\nExample 2\n"}
{"page": 139, "text": "Statements, Events, and Functions\nPage 139\nThis statement executes the script for the Close event for the application before it terminates\nthe application if the user enters a password in sle_password that does not match the value\nstored in the string CorrectPassword:\nIF sle_password.Text <> CorrectPassword &\n   THEN HALT CLOSE\n2.1.12 IF...THEN\nDescription\nA control structure used to cause a script to perform a specified action if a stated condition is\ntrue. Syntax 1 uses a single-line format, and Syntax 2 uses a multiline format.\nSyntax\nSyntax 1 (the single-line format):\nIF condition THEN action1 {ELSE action2}\nTable 2.11:\nParameterDescription\ncondition The condition you want to test.\naction1\nThe action you want performed if the condition is true. The action must be a\nsingle statement on the same line as the rest of the IF statement.\naction2\n(optional)\nThe action you want performed if the condition is false. The action must be a\nsingle statement on the same line as the rest of the IF statement.\nSyntax 2 (the multiline format):\nIF condition1 THEN\n   action1\n{ ELSEIF condition2 THEN\n   action2   \n. . . }\n{ ELSE\n   action3 }\nEND IF\nTable 2.12:\nParameter Description\ncondition1 The first condition you want to test.\naction1\nThe action you want performed if condition1 is true. The action can be a\nstatement or multiple statements that are separated by semicolons or placed on\nseparate lines. At least one action is required.\ncondition2\n(optional)\nThe condition you want to test if condition1 is false. You can have multiple\nELSEIF...THEN statements in an IF...THEN control structure.\naction2\nThe action you want performed if condition2 is true. The action can be a\nstatement or multiple statements that are separated by semicolons or placed on\nseparate lines.\n"}
{"page": 140, "text": "Statements, Events, and Functions\nPage 140\nParameter Description\naction3\n(optional)\nThe action you want performed if none of the preceding conditions is true.\nThe action can be a statement or multiple statements that are separated by\nsemicolons or placed on separate lines.\nUsage\nYou can use continuation characters to place the single-line format on more than one physical\nline in the script.\nYou must end a multiline IF...THEN control structure with END IF (which is two words).\nExamples\nExample 1\nThis single-line IF...THEN statement opens window w_first if Num is equal to 1; otherwise,\nw_rest is opened:\nIF Num = 1 THEN Open(w_first) ELSE Open(w_rest)\nExample 2\nThis single-line IF...THEN statement displays a message if the value in the SingleLineEdit\nsle_State is \"TX\". It uses the continuation character to continue the single-line statement\nacross two physical lines in the script:\nIF sle_State.text=\"TX\" THEN   &\n   MessageBox(\"Hello\",\"Tex\")\nExample 3\nThis multiline IF...THEN compares the horizontal positions of windows w_first and\nw_second. If w_first is to the right of w_second, w_first is moved to the left side of the\nscreen:\nIF w_first.X > w_second.X THEN\n   w_first.X = 0\nEND IF\nExample 4\nThis multiline IF...THEN causes the application to:\n\u2022 Beep twice if X equals Y\n\u2022 Display the Parts list box and highlight item 5 if X equals Z\n\u2022 Display the Choose list box if X is blank\n\u2022 Hide the Empty button and display the Full button if none of the above conditions is true\nIF X=Y THEN\n   Beep(2)\nELSEIF X=Z THEN\n   Show (lb_parts); lb_parts.SetState(5,TRUE)\nELSEIF X=\" \" THEN\n"}
{"page": 141, "text": "Statements, Events, and Functions\nPage 141\n   Show (lb_choose)\nELSE\n   Hide(cb_empty)\n   Show(cb_full)\nEND IF\n2.1.13 RETURN\nDescription\nStops the execution of a script or function immediately.\nSyntax\nRETURN { expression }\nTable 2.13:\nParameter Description\nexpression\nIn a function, any value (or expression) you want the function to return. The\nreturn value must be the datatype specified as the return type in the function.\nUsage\nWhen a user's action triggers an event and PowerBuilder encounters RETURN in the event\nscript, it terminates execution of that script immediately and waits for the next user action.\nWhen a script calls a function or event and PowerBuilder encounters RETURN in the code,\nRETURN transfers (returns) control to the point at which the function or event was called.\nExamples\nExample 1\nThis script causes the system to beep once; the second beep statement will not execute:\nBeep(1)\nRETURN\nBeep(1)      // This statement will not execute.\nExample 2\nThese statements in a user-defined function return the result of dividing Arg1 by Arg2 if\nArg2 is not equal to zero; they return -1 if Arg2 is equal to zero:\nIF Arg2 <> 0 THEN\n   RETURN Arg1/Arg2\nELSE\n   RETURN -1\nEND IF\n2.1.14 THROW\nDescription\nUsed to manually trigger exception handling for user-defined exceptions.\nSyntax\nTHROW exlvalue\n"}
{"page": 142, "text": "Statements, Events, and Functions\nPage 142\nTable 2.14:\nParameter Description\nexlvalue\nVariable (or expression that evaluates to a valid instance of an object) of type\nThrowable. Usually the object type thrown is a user-defined exception class\nderived from the system Exception class that inherits from Throwable.\nUsage\nThe variable following the THROW reserved word must be a valid object instance or an\nexpression that produces a valid object instance that derives from the Throwable datatype.\nFor example, you can use an expression such as:\nTHROW create ExceptionType\nwhere ExceptionType is an object of type Throwable.\nIf you attempt to throw a noninstantiated exception, you will not get back the exception\ninformation you want, since the only exception information you retrieve will be a\nNullObjectError.\nIn a method script, you can only throw an exception that you declare in the method prototype\nor that you handle in a try-catch block. The PowerScript compiler displays an error message\nif you try to throw a user-defined exception without declaring it in the prototype Throws\nstatement and without surrounding it in an appropriate try-catch block.\nWhen a RuntimeError, or a descendant of RuntimeError, is thrown, the instance variable\ncontaining line number information will be filled in at the point where the THROW statement\noccurs. If the error is handled and thrown again, this information will not be updated unless it\nhas specifically been set to null.\nExamples\nlong ll_result\nll_result = myConnection.ConnectToServer()\n   ConnectionException    ex\n   ex = create ConnectionException\n   ex.connectResult = ll_result\n   THROW ex\nend if\n2.1.15 THROWS\nDescription\nUsed to declare the type of exception that a method triggers. It is part of the method\nprototype.\nSyntax\nmethodname ( {arguments} ) THROWS ExceptionType { , ExceptionType, ... }\nTable 2.15:\nParameter\nDescription\nmethodname Name of the method that throws an exception.\n"}
{"page": 143, "text": "Statements, Events, and Functions\nPage 143\nParameter\nDescription\narguments\nArguments of the method that throws an exception. Depending on the method,\nthe method arguments can be optional.\nExceptionTypeObject of type Throwable. Usually the object type thrown is a user-defined\nexception class derived from the system Exception class. If you define\nmultiple potential exceptions for a method, you can throw each type of\nexception in the same clause by separating the exception types with commas.\nUsage\nInternal use only.\nYou do not type or otherwise add the THROWS clause to function calls in a PowerBuilder\nscript. However, you can add a THROWS clause to any PowerBuilder function or to any user\nevent that is not defined by a pbm event ID.\nFor more information about adding a THROWS clause to a function or event prototype, see\nSection 3.2.2.6, \u201cDefining a THROWS clause\u201d in Users Guide. For more information about\nexception handling, see Section 2.2.9, \u201cException handling in PowerBuilder\u201d in Application\nTechniques.\n2.1.16 TRY...CATCH...FINALLY...END TRY\nDescription\nIsolates code that can cause an exception, describes what to do if an exception of a given type\nis encountered, and allows you to close files or network connections (and return objects to\ntheir original state) whether or not an exception is encountered.\nSyntax\nTRY   trystatements\nCATCH ( ThrowableType1 exIdentifier1 )\n   catchstatements1\nCATCH ( ThrowableType2 exIdentifier2 )\n   catchstatements2\n...\nCATCH ( ThrowableTypeN exIdentifierN )\n   catchstatementsN\nFINALLY\n   cleanupstatements\nEND TRY\nTable 2.16:\nParameter\nDescription\ntrystatements\nBlock of code that might potentially throw an exception.\nThrowableTypeN\nObject type of exception to be caught. A CATCH block is optional if you\ninclude a FINALLY block. You can include multiple CATCH blocks. Every\nCATCH block in a try-catch block must include a corresponding exception\nobject type and a local variable of that type.\nexIdentifierN\nLocal variable of type ThrowableTypeN.\ncatchstatementsN\nCode to handle the exception being caught.\n"}
{"page": 144, "text": "Statements, Events, and Functions\nPage 144\nParameter\nDescription\ncleanupstatements\nCleanup code. The FINALLY block is optional if you include one or more\nCATCH block.\nUsage\nThe TRY block, which is the block of statements between the TRY and CATCH keywords\n(or the TRY and FINALLY keywords if there is no CATCH clause), is used to isolate\ncode that might potentially throw an exception. The statements in the TRY block are run\nunconditionally until either the entire block of statements is executed or some statement in\nthe block causes an exception to be thrown.\nUse a CATCH block or multiple CATCH blocks to handle exceptions thrown in a TRY\nblock. In the event that an exception is thrown, execution of the TRY block is stopped and\nthe statements in the first CATCH block are executed -- if and only if the exception thrown is\nof the same type or a descendant of the type of the identifier following the CATCH keyword.\nIf the exception thrown is not the same type or a descendant type of the identifier in the first\nCATCH block, the exception is not handled by this CATCH block. If there are additional\nCATCH blocks, they are evaluated in the order they appear. If the exception cannot be\nhandled by any of the CATCH blocks, the statements in the FINALLY block are executed.\nThe exception then continues to unwind the call stack to any outer nested try-catch blocks. If\nthere are no outer nested blocks, the SystemError event on the Application object is fired.\nIf no exception is thrown, execution continues at the beginning of the FINALLY block if one\nexists; otherwise, execution continues on the line following the END TRY statement.\nFINALLY clause restriction\nDo not use RETURN statements in the FINALLY clause of a TRY-CATCH block.\nThis can prevent the exception from being caught by its invoker.\nSee also\nTHROW\n2.2 SQL Statements\nAbout this chapter\nThis chapter describes the embedded SQL and dynamic SQL statements and how to use them\nin scripts.\n2.2.1 Using SQL in scripts\nPowerScript supports standard embedded SQL statements and dynamic SQL statements in\nscripts. In general, PowerScript supports all DBMS-specific clauses and reserved words that\noccur in the supported SQL statements. For example, PowerBuilder supports DBMS-specific\nbuilt-in functions within a SELECT command.\nFor information about embedded SQL, see Chapter 6, Using Embedded SQL in Connecting to\nYour Database.\n"}
{"page": 145, "text": "Statements, Events, and Functions\nPage 145\nReferencing PowerScript variables in scripts\nWherever constants can be referenced in SQL statements, PowerScript variables preceded\nby a colon (:) can be substituted. Any valid PowerScript variable can be used. This INSERT\nstatement uses a constant value:\nINSERT INTO EMPLOYEE ( SALARY )      VALUES ( 18900 ) ;\nThe same statement using a PowerScript variable to reference the constant might look like\nthis:\nint   Sal_var\nSal_var = 18900\nINSERT INTO EMPLOYEE ( SALARY )      VALUES ( :Sal_var ) ;\nUsing indicator variables\nPowerBuilder supports indicator variables, which are used to identify null values or\nconversion errors after a database retrieval. Indicator variables are integers that are specified\nin the HostVariableList of a FETCH or SELECT statement.\nEach indicator variable is separated from the variable it is indicating by a space (but no\ncomma). For example, this statement is a HostVariableList without indicator variables:\n:Name, :Address, :City\nThe same HostVariableList with indicator variables looks like this:\n:Name :IndVar1, :Address :IndVar2, :City :IndVar3\nIndicator variables have one of these values:\nTable 2.17:\nPage\nMeaning\n0\nValid, non-null value\n-1\nNull value\n-2\nConversion error\nError reporting\nNot all DBMSs return a conversion error when the datatype of a column does not\nmatch the datatype of the associated variable.\nThe following statement uses the indicator variable IndVar2 to see if Address contains a null\nvalue:\nif IndVar2 = -1 then...\nYou can also use the PowerScript IsNull function to accomplish the same result without\nusing indicator variables:\nif IsNull( Address ) then ...\nThis statement uses the indicator variable IndVar3 to set City to null:\nIndVar3 = -1 \n"}
{"page": 146, "text": "Statements, Events, and Functions\nPage 146\nYou can also use the PowerScript SetNull function to accomplish the same result without\nusing indicator variables:\nSetNull( City ) \nError handling in scripts\nThe scripts shown in the SQL examples above do not include error handling, but it is good\npractice to test the success and failure codes (the SQLCode attribute) in the transaction object\nafter every statement. The codes are:\nTable 2.18:\nValue\nMeaning\n0\nSuccess.\n100\nFetched row not found.\n-1\nError; the statement failed. Use SQLErrText\nor SQLDBCode to obtain the detail.\nAfter certain statements, such as DELETE, FETCH, and UPDATE, you should also check\nthe SQLNRows property of the transaction object to make sure the action affected at least\none row.\nAbout SQLErrText and SQLDBCode\nThe string SQLErrText in the transaction object contains the database vendor-supplied\nerror message. The long named SQLDBCode in the transaction object contains the database\nvendor-supplied status code:\nIF SQLCA.SQLCode = -1 THEN \n      MessageBox(\"SQL error\", SQLCA.SQLErrText)\nEND IF\nPainting standard SQL\nYou can paint the following SQL statements in scripts and functions:\n\u2022 Declarations of SQL cursors and stored procedures\n\u2022 Cursor FETCH, UPDATE, and DELETE statements\n\u2022 Noncursor SELECT, INSERT, UPDATE, and DELETE statements\nFor more information about scope, see Where to declare variables.\nYou can declare cursors and stored procedures at the scope of global, instance, shared, or\nlocal variables. A cursor or procedure can be declared in the Script view using the Paste SQL\nbutton in the PainterBar.\nYou can paint standard embedded SQL statements in the Script view, the Function painter,\nand the Interactive SQL view in the Database painter using the Paste SQL button in the\nPainterBar or the Paste Special>SQL item from the pop-up menu.\nSupported SQL statements\n"}
{"page": 147, "text": "Statements, Events, and Functions\nPage 147\nIn general, all DBMS-specific features are supported in PowerScript if they occur within a\nPowerScript-supported SQL statement. For example, PowerScript supports DBMS-specific\nbuilt-in functions within a SELECT command.\nHowever, any SQL statement that contains a SELECT clause must also contain a FROM\nclause in order for the script to compile successfully. To solve this problem, add a FROM\nclause that uses a \"dummy\" table to SELECT statements without FROM clauses. For\nexample:\nstring resselect user_name() into:res from dummy;\nselect db_name() into:res from dummy;\nselect date('2001-01-02:21:20:53') into:res from dummy;\nDisabling database connection when compiling and building\nWhen PowerBuilder compiles an application that contains embedded SQL, it connects to\nthe database profile last used in order to check for database access errors during the build\nprocess. For applications that use multiple databases, this can result in spurious warnings\nduring the build since the embedded SQL can be validated only against that single last-\nused database and not against the databases actually used by the application. In addition, an\nunattended build, such as a lengthy overnight rebuild, can stall if the database connection\ncannot be made.\nTo avoid these issues, you can select the Disable Database Connection When Compiling and\nBuilding check box on the general page of the System Options dialog box.\nCaution\nSelect the check box only when you want to compile without signing on to the\ndatabase. Compiling without connecting to a database prevents the build process from\nchecking for database errors and may therefore result in runtime errors later.\n2.2.1.1 CLOSE Cursor\nDescription\nCloses the SQL cursor CursorName; ends processing of CursorName.\nSyntax\nCLOSE CursorName ;\nTable 2.19:\nParameter\nDescription\nCursorName\nThe cursor you want to close\nUsage\nThis statement must be preceded by an OPEN statement for the same cursor. The USING\nTransactionObject clause is not allowed with CLOSE; the transaction object was specified in\nthe statement that declared the cursor.\nCLOSE often appears in the script that is executed when the SQL code after a fetch equals\n100 (not found).\n"}
{"page": 148, "text": "Statements, Events, and Functions\nPage 148\nError handling\nIt is good practice to test the success/failure code after executing a CLOSE cursor\nstatement.\nExamples\nThis statement closes the Emp_cursor cursor:\nCLOSE Emp_cursor ;\n2.2.1.2 CLOSE Procedure\nDescription\nCloses the SQL procedure ProcedureName; ends processing of ProcedureName.\nDBMS-specific\nNot all DBMSs support stored procedures.\nSyntax\nCLOSE ProcedureName;\nTable 2.20:\nParameter\nDescription\nProcedureName\nThe stored procedure you want to close\nUsage\nThis statement must be preceded by an EXECUTE statement for the same procedure. The\nUSING TransactionObject clause is not allowed with CLOSE; the transaction object was\nspecified in the statement that declared the procedure.\nUse CLOSE only to close procedures that return result sets. PowerBuilder automatically\ncloses procedures that do not return result sets (and sets the return code to 100).\nCLOSE often appears in the script that is executed when the SQL code after a fetch equals\n100 (not found).\nError handling\nIt is good practice to test the success/failure code after executing a CLOSE Procedure\nstatement.\nExamples\nThis statement closes the stored procedure named Emp_proc:\nCLOSE Emp_proc ;\n2.2.1.3 COMMIT\nDescription\n"}
{"page": 149, "text": "Statements, Events, and Functions\nPage 149\nPermanently updates all database operations since the previous COMMIT, ROLLBACK, or\nCONNECT for the specified transaction object.\nSyntax\nCOMMIT {USING TransactionObject};\nTable 2.21:\nParameter\nDescription\nTransactionObjectThe name of the transaction object for which you want to permanently\nupdate all database operations since the previous COMMIT, ROLLBACK,\nor CONNECT. This clause is required only for transaction objects other\nthan the default (SQLCA).\nUsage\nCOMMIT does not cause a disconnect, but it does close all open cursors or procedures. (But\nnote that the DISCONNECT statement in PowerBuilder does issue a COMMIT.)\nError handling\nIt is good practice to test the success/failure code after executing a COMMIT\nstatement.\nExamples\nExample 1\nThis statement commits all operations for the database specified in the default transaction\nobject:\nCOMMIT ;\nExample 2\nThis statement commits all operations for the database specified in the transaction object\nnamed Emp_tran:\nCOMMIT USING Emp_tran ;\n2.2.1.4 CONNECT\nDescription\nConnects to a specified database.\nSyntax\nCONNECT {USING TransactionObject};\nTable 2.22:\nParameter Description\nTransactionObject\nThe name of the transaction object containing the required connection\ninformation for the database to which you want to connect. This clause is\nrequired only for transaction objects other than the default (SQLCA).\n"}
{"page": 150, "text": "Statements, Events, and Functions\nPage 150\nUsage\nThis statement must be executed before any actions (such as INSERT, UPDATE, or\nDELETE) can be processed using the default transaction object or the specified transaction\nobject.\nError handling\nIt is good practice to test the success/failure code after executing a CONNECT\nstatement.\nExamples\nExample 1\nThis statement connects to the database specified in the default transaction object:\nCONNECT ;\nExample 2\nThis statement connects to the database specified in the transaction object named Emp_tran:\nCONNECT USING Emp_tran ;\n2.2.1.5 DECLARE Cursor\nDescription\nDeclares a cursor for the specified transaction object.\nSyntax\nDECLARE CursorName CURSOR FOR SelectStatement \n   {USING TransactionObject};\nTable 2.23:\nParameter\nDescription\nCursorName\nAny valid PowerBuilder name.\nSelectStatement Any valid SELECT statement.\nTransactionObjectThe name of the transaction object for which you want to declare the\ncursor. This clause is required only for transaction objects other than the\ndefault (SQLCA).\nUsage\nDECLARE Cursor is a nonexecutable command and is analogous to declaring a variable.\nTo declare a local cursor, open the script in the Script view and select Paste SQL from the\nPainterBar or the Edit>Paste Special menu. To declare a global, instance, or shared cursor,\nselect Declare from the first drop-down list in the Script view and Global Variables, Instance\nVariables, or Shared Variables from the second drop-down list, then select Paste SQL.\nFor information about global, instance, shared, and local scope, see Where to declare\nvariables.\n"}
{"page": 151, "text": "Statements, Events, and Functions\nPage 151\nExamples\nThis statement declares the cursor called Emp_cur for the database specified in the default\ntransaction object. It also references the Sal_var variable, which must be set to an appropriate\nvalue before you execute the OPEN Emp_cur command:\nDECLARE Emp_cur CURSOR FOR\n       SELECT employee.emp_number, employee.emp_name\n       FROM employee\n       WHERE employee.emp_salary > :Sal_var ;\n2.2.1.6 DECLARE Procedure\nDescription\nDeclares a procedure for the specified transaction object.\nDBMS-specific\nNot all DBMSs support stored procedures.\nSyntax\nDECLARE ProcedureName PROCEDURE FOR \n   StoredProcedureName\n   @Param1=Value1, @Param2=Value2,...\n   {USING TransactionObject};\nTable 2.24:\nParameter\nDescription\nProcedureName Any valid PowerBuilder name.\nStoredProcedureName\nAny stored procedure in the database.\n@Paramn=ValuenThe name of a parameter (argument) defined in the stored procedure and a\nvalid PowerBuilder expression; represents the number of the parameter and\nvalue.\nTransactionObjectThe name of the transaction object for which you want to declare the\nprocedure. This clause is required only for transaction objects other than\nthe default (SQLCA).\nUsage\nDECLARE Procedure is a nonexecutable command. It is analogous to declaring a variable.\nTo declare a local procedure, open the script in the Script view and select Paste SQL from\nthe PainterBar or the Edit>Paste Special menu. To declare a global, instance, or shared\nprocedure, select Declare from the first drop-down list in the Script view and Global\nVariables, Instance Variables, or Shared Variables from the second drop-down list, then\nselect Paste SQL.\nFor information about global, instance, shared, and local scope, see Where to declare\nvariables.\nExamples\n"}
{"page": 152, "text": "Statements, Events, and Functions\nPage 152\nExample 1\nThis statement declares the SAP ASE procedure Emp_proc for the database specified in\nthe default transaction object. It references the Emp_name_var and Emp_sal_var variables,\nwhich must be set to appropriate values before you execute the EXECUTE Emp_proc\ncommand:\nDECLARE Emp_proc procedure for GetName\n    @emp_name = :Emp_name_var, \n    @emp_salary = :Emp_sal_var ;\nExample 2\nThis statement declares the ORACLE procedure Emp_proc for the database specified in\nthe default transaction object. It references the Emp_name_var and Emp_sal_var variables,\nwhich must be set to appropriate values before you execute the EXECUTE Emp_proc\ncommand:\nDECLARE Emp_proc procedure for GetName\n (:Emp_name_var, :Emp_sal_var) ;\n2.2.1.7 DELETE\nDescription\nDeletes the rows in TableName specified by Criteria.\nSyntax\nDELETE FROM TableName WHERE Criteria {USING TransactionObject};\nTable 2.25:\nParameter\nDescription\nTableName\nThe name of the table from which you want to delete rows.\nCriteria\nCriteria that specify which rows to delete.\nTransactionObject\nThe name of the transaction object that identifies the database containing\nthe table. This clause is required only for transaction objects other than the\ndefault (SQLCA).\nUsage\nError handling\nIt is good practice to test the success/failure code after executing a DELETE\nstatement. To see if the DELETE was successful, you can test SLQCode for a failure\ncode. However, if nothing matches the WHERE clause and no rows are deleted,\nSQLCode is still set to zero. To make sure the delete affected at least one row, check\nthe SQLNRows property of the transaction object.\nExamples\nExample 1\n"}
{"page": 153, "text": "Statements, Events, and Functions\nPage 153\nThis statement deletes rows from the Employee table in the database specified in the default\ntransaction object where Emp_num is less than 100:\nDELETE FROM Employee WHERE Emp_num < 100 ;\nExample 2\nThese statements delete rows from the Employee table in the database named in the\ntransaction object named Emp_tran where Emp_num is equal to the value entered in the\nSingleLineEdit sle_number:\nint      Emp_num\n Emp_num = Integer(sle_number.Text)\n DELETE FROM Employee \n       WHERE Employee.Emp_num = :Emp_num ;\nThe integer Emp_num requires a colon in front of it to indicate it is a variable when it is used\nin a WHERE clause.\n2.2.1.8 DELETE Where Current of Cursor\nDescription\nDeletes the row in which the cursor is positioned.\nDBMS-specific\nNot all DBMSs support DELETE Where Current of Cursor.\nSyntax\nDELETE FROM TableName WHERE CURRENT OF CursorName;\nTable 2.26:\nParameter\nDescription\nTableName\nThe name of the table from which you want\nto delete a row\nCursorName\nThe name of the cursor in which the table\nwas specified\nUsage\nThe USING TransactionObject clause is not allowed with this form of DELETE Where\nCurrent of Cursor; the transaction object was specified in the statement that declared the\ncursor.\nError handling\nIt is good practice to test the success/failure code after executing a DELETE Where\nCurrent of Cursor statement.\nExamples\n"}
{"page": 154, "text": "Statements, Events, and Functions\nPage 154\nThis statement deletes from the Employee table the row in which the cursor named Emp_cur\nis positioned:\nDELETE FROM Employee WHERE current of Emp_curs ;\n2.2.1.9 DISCONNECT\nDescription\nExecutes a COMMIT for the specified transaction object and then disconnects from the\nspecified database.\nSyntax\nDISCONNECT {USING TransactionObject};\nTable 2.27:\nParameter\nDescription\nTransactionObject\nThe name of the transaction object that identifies the database you want to\ndisconnect from and in which you want to permanently update all database\noperations since the previous COMMIT, ROLLBACK, or CONNECT.\nThis clause is required only for transaction objects other than the default\n(SQLCA).\nUsage\nError handling\nIt is good practice to test the success/failure code after executing a DISCONNECT\nstatement.\nExamples\nExample 1\nThis statement disconnects from the database specified in the default transaction object:\nDISCONNECT ;\nExample 2\nThis statement disconnects from the database specified in the transaction object named\nEmp_tran:\nDISCONNECT USING Emp_tran ;\n2.2.1.10 EXECUTE\nDescription\nExecutes the previously declared procedure identified by ProcedureName.\nSyntax\nEXECUTE ProcedureName;\n"}
{"page": 155, "text": "Statements, Events, and Functions\nPage 155\nTable 2.28:\nParameter\nDescription\nProcedureNameThe name assigned in the DECLARE statement of the stored procedure\nyou want to execute. The procedure must have been declared previously.\nProcedureName is not necessarily the name of the procedure stored in the\ndatabase.\nUsage\nThe USING TransactionObject clause is not allowed with EXECUTE; the transaction object\nwas specified in the statement that declared the procedure.\nError handling\nIt is good practice to test the success/failure code after executing an EXECUTE\nstatement.\nExamples\nThis statement executes the stored procedure Emp_proc:\nEXECUTE Emp_proc ;\n2.2.1.11 FETCH\nDescription\nFetches the row after the row on which Cursor | Procedure is positioned.\nSyntax\nFETCH Cursor | Procedure INTO HostVariableList;\nTable 2.29:\nParameter\nDescription\nCursor or\nProcedure\nThe name of the cursor or procedure from which you want to fetch a row\nHostVariableListPowerScript variables into which data values will be retrieved\nUsage\nThe USING TransactionObject clause is not allowed with FETCH; the transaction object was\nspecified in the statement that declared the cursor or procedure.\nIf your DBMS supports formats of FETCH other than the customary (and default) FETCH\nNEXT, you can specify FETCH FIRST, FETCH PRIOR, or FETCH LAST.\nError handling\nIt is good practice to test the success/failure code after executing a FETCH statement.\nTo see if the FETCH was successful, you can test SLQCode for a failure code.\n"}
{"page": 156, "text": "Statements, Events, and Functions\nPage 156\nHowever, if nothing matches the WHERE clause and no rows are fetched, SQLCode\nis still set to 100. To make sure the fetch affected at least one row, check the\nSQLNRows property of the transaction object.\nExamples\nExample 1\nThis statement fetches data retrieved by the SELECT clause in the declaration of the cursor\nnamed Emp_cur and puts it into Emp_num and Emp_name:\nint                         Emp_num\n string                  Emp_name\n FETCH Emp_cur INTO :Emp_num, :Emp_name ;\nExample 2\nIf sle_emp_num and sle_emp_name are SingleLineEdits, these statements fetch from the\ncursor named Emp_cur, store the data in Emp_num and Emp_name, and then convert\nEmp_num from an integer to a string, and put them in sle_emp_num and sle_emp_name:\nint                         Emp_num\n string                  Emp_name\n FETCH Emp_cur INTO :emp_num, :emp_name ;\n sle_emp_num.Text = string(Emp_num)\n sle_emp_name.Text = Emp_name\n2.2.1.12 INSERT\nDescription\nInserts one or more new rows into the table specified in RestOfInsertStatement.\nSyntax\nINSERT RestOfInsertStatement \n   {USING TransactionObject} ;\nTable 2.30:\nParameter\nDescription\nRestOfInsertStatement\nThe rest of the INSERT statement (the INTO clause, list of columns and\nvalues or source).\nTransactionObjectThe name of the transaction object that identifies the database containing\nthe table. This clause is required only for transaction objects other than the\ndefault (SQLCA).\nUsage\nError handling\nIt is good practice to test the success/failure code after executing an INSERT\nstatement.\nExamples\n"}
{"page": 157, "text": "Statements, Events, and Functions\nPage 157\nExample 1\nThese statements insert a row with the values in EmpNbr and EmpName into the Emp_nbr\nand Emp_name columns of the Employee table identified in the default transaction object:\nint EmpNbr\n string EmpName\n ...\n INSERT INTO Employee (employee.Emp_nbr, employee.Emp_name)\n       VALUES (:EmpNbr, :EmpName) ;\nExample 2\nThese statements insert a row with the values entered in the SingleLineEdits sle_number and\nsle_name into the Emp_nbr and Emp_name columns of the Employee table in the transaction\nobject named Emp_tran:\nint                  EmpNbr\n string       EmpName\n EmpNbr = Integer(sle_number.Text)\n EmpName = sle_name.Text\n INSERT INTO Employee (employee.Emp_nbr, employee.Emp_name)\n       VALUES (:EmpNbr, :EmpName) USING Emp_tran ;\n2.2.1.13 OPEN Cursor\nDescription\nCauses the SELECT specified when the cursor was declared to be executed.\nSyntax\nOPEN CursorName ;\nTable 2.31:\nParameter\nDescription\nCursorName\nThe name of the cursor you want to open\nUsage\nThe USING TransactionObject clause is not allowed with OPEN; the transaction object was\nspecified in the statement that declared the cursor.\nError handling\nIt is good practice to test the success/failure code after executing an OPEN Cursor\nstatement.\nExamples\nThis statement opens the cursor Emp_curs:\nOPEN Emp_curs ;\n2.2.1.14 ROLLBACK\nDescription\n"}
{"page": 158, "text": "Statements, Events, and Functions\nPage 158\nCancels all database operations in the specified database since the last COMMIT,\nROLLBACK, or CONNECT.\nSyntax\nROLLBACK {USING TransactionObject} ;\nTable 2.32:\nParameter\nDescription\nTransactionObject\nThe name of the transaction object that identifies the database in which\nyou want to cancel all operations since the last COMMIT, ROLLBACK, or\nCONNECT. This clause is required only for transaction objects other than the\ndefault (SQLCA).\nUsage\nROLLBACK does not cause a disconnect, but it does close all open cursors and procedures.\nError handling\nIt is good practice to test the success/failure code after executing a ROLLBACK\nstatement.\nExamples\nExample 1\nThis statement cancels all database operations in the database specified in the default\ntransaction object:\nROLLBACK ;\nExample 2\nThis statement cancels all database operations in the database specified in the transaction\nobject named Emp_tran:\nROLLBACK USING emp_tran ;\n2.2.1.15 SELECT\nDescription\nSelects a row in the tables specified in RestOfSelectStatement.\nSyntax\nSELECT RestOfSelectStatement {USING TransactionObject} ;\nTable 2.33:\nParameter\nDescription\nRestOfSelectStatement\nThe rest of the SELECT statement (the column list INTO, FROM,\nWHERE, and other clauses).\n"}
{"page": 159, "text": "Statements, Events, and Functions\nPage 159\nParameter\nDescription\nTransactionObjectThe name of the transaction object that identifies the database containing\nthe table. This clause is required only for transaction objects other than the\ndefault (SQLCA).\nUsage\nAn error occurs if the SELECT statement returns more than one row.\nError handling\nIt is good practice to test the success/failure code after executing a SELECT\nstatement. You can test SQLCode for a failure code.\nWhen you use the INTO clause, PowerBuilder does not verify whether the datatype of the\nretrieved column matches the datatype of the host variable; it only checks for the existence of\nthe columns and tables. You are responsible for checking that the datatypes match. Keep in\nmind that not all database datatypes are the same as PowerBuilder datatypes.\nExamples\nThe following statements select data in the Emp_LName and Emp_FName columns of a row\nin the Employee table and put the data into the SingleLineEdits sle_LName and sle_FName\n(the transaction object Emp_tran is used):\nint                  Emp_num\n string       Emp_lname, Emp_fname\n Emp_num = Integer(sle_Emp_Num.Text)\n  \n SELECT employee.Emp_LName, employee.Emp_FName\n       INTO :Emp_lname, :Emp_fname\n       FROM Employee\n       WHERE Employee.Emp_nbr = :Emp_num\n       USING Emp_tran ;\n  \n IF Emp_tran.SQLCode = 100 THEN\n       MessageBox(\"Employee Inquiry\", &\n       \"Employee Not Found\")\n ELSEIF Emp_tran.SQLCode > 0 then\n       MessageBox(\"Database Error\", &\n       Emp_tran.SQLErrText, Exclamation!)\n END IF\n sle_Lname.text = Emp_lname\n sle_Fname.text = Emp_fname\n2.2.1.16 SELECTBLOB\nDescription\nSelects a single blob column in a row in the table specified in RestOfSelectStatement.\nSyntax\nSELECTBLOB RestOfSelectStatement {USING TransactionObject} ;\nTable 2.34:\nParameter\nDescription\nRestOfSelectStatement\nThe rest of the SELECT statement (the INTO, FROM, and WHERE\nclauses).\n"}
{"page": 160, "text": "Statements, Events, and Functions\nPage 160\nParameter\nDescription\nTransactionObjectThe name of the transaction object that identifies the database containing\nthe table. This clause is required only for transaction objects other than the\ndefault (SQLCA).\nUsage\nAn error occurs if the SELECTBLOB statement returns more than one row.\nError handling\nIt is good practice to test the success/failure code after executing an SELECTBLOB\nstatement. To make sure the update affected at least one row, check the SQLNRows\nproperty of SQLCA or the transaction object. The SQLCode or SQLDBCode property\nwill not indicate the success or failure of the SELECTBLOB statement.\nYou can include an indicator variable in the host variable list (target parameters) in\nthe INTO clause to check for an empty blob (a blob of zero length) and conversion\nerrors.\nDatabase information\nSAP ASE users must set the AutoCommit property of the transaction object to true\nbefore calling the SELECTBLOB function. For information about the AutoCommit\nproperty, see Connecting to Your Database.\nExamples\nThe following statements select the blob column Emp_pic from a row in the Employee table\nand set the picture p_1 to the bitmap in Emp_id_pic (the transaction object Emp_tran is\nused):\nBlob      Emp_id_pic\n SELECTBLOB Emp_pic\n       INTO      :Emp_id_pic \n       FROM Employee\n       WHERE Employee.Emp_Num = 100\n       USING Emp_tran ;\n p_1.SetPicture(Emp_id_pic)\nThe blob Emp_id_pic requires a colon to indicate that it is a host (PowerScript) variable\nwhen you use it in the INTO clause of the SELECTBLOB statement.\n2.2.1.17 UPDATE\nDescription\nUpdates the rows specified in RestOfUpdateStatement.\nSyntax\nUPDATE TableName RestOfUpdateStatement {USING TransactionObject} ;\nTable 2.35:\nParameter\nDescription\nTableName\nThe name of the table in which you want to update rows.\n"}
{"page": 161, "text": "Statements, Events, and Functions\nPage 161\nParameter\nDescription\nRestOfUpdateStatement\nThe rest of the UPDATE statement (the SET and WHERE clauses).\nTransactionObjectThe name of the transaction object that identifies the database containing\nthe table. This clause is required only for transaction objects other than the\ndefault (SQLCA).\nUsage\nError handling\nIt is good practice to test the success/failure code after executing a UPDATE\nstatement. You can test SQLCode for a failure code. However, if nothing matches the\nWHERE clause and no rows are updated, SQLCode is still set to zero. To make sure\nthe update affected at least one row, check the SQLNRows property of the transaction\nobject.\nExamples\nThese statements update rows from the Employee table in the database specified in the\ntransaction object named Emp_tran, where Emp_num is equal to the value entered in the\nSingleLineEdit sle_Number:\nint Emp_num\n Emp_num=Integer(sle_Number.Text )\n UPDATE Employee \n       SET emp_name = :sle_Name.Text\n       WHERE Employee.emp_num  = :Emp_num \n       USING Emp_tran ;\n  \n IF Emptran.SQLNRows > 0 THEN\n       COMMIT USING Emp_tran ;\n END IF\nThe integer Emp_num and the SingleLineEdit sle_name require a colon to indicate they are\nhost (PowerScript) variables when you use them in an UPDATE statement.\n2.2.1.18 UPDATEBLOB\nDescription\nUpdates the rows in TableName in BlobColumn.\nSyntax\nUPDATEBLOB TableName \n   SET BlobColumn = BlobVariable\n   RestOfUpdateStatement {USING TransactionObject} ;\nTable 2.36:\nParameter\nDescription\nTableName\nThe name of the table you want to update.\nBlobColumn\nThe name of the column you want to update in TableName. The datatype\nof this column must be blob.\n"}
{"page": 162, "text": "Statements, Events, and Functions\nPage 162\nParameter\nDescription\nBlobVariable\nA PowerScript variable of the datatype blob.\nRestOfUpdateStatement\nThe rest of the UPDATE statement (the WHERE clause).\nTransactionObject The name of the transaction object that identifies the database containing\nthe table. This clause is required only for transaction objects other than\nthe default (SQLCA).\nUsage\nError handling\nIt is good practice to test the success/failure code after executing an UPDATEBLOB\nstatement. To make sure the update affected at least one row, check the SQLNRows\nproperty of SQLCA or the transaction object. The SQLCode or SQLDBCode property\nwill not indicate the success or failure of the UPDATEBLOB statement.\nDatabase information\nSAP ASE users must set the AutoCommit property of the transaction object to True\nbefore calling the UPDATEBLOB function. For information about the AutoCommit\nproperty, see Connecting to Your Database.\nExamples\nThese statements update the blob column emp_pic in the Employee table, where emp_num is\n100:\nint       fh\n blob      Emp_id_pic\n fh = FileOpen(\"c:\\emp_100.bmp\", StreamMode!)\n IF fh <> -1 THEN\n       FileRead(fh, emp_id_pic)\n       FileClose(fh)\n       UPDATEBLOB Employee SET emp_pic = :Emp_id_pic\n       WHERE Emp_num = 100\n       USING Emp_tran ;\n END IF\n  \n IF Emptran.SQLNRows > 0 THEN\n       COMMIT USING Emp_tran ;\n END IF\nThe blob Emp_id_pic requires a colon to indicate it is a host (PowerScript) variable in the\nUPDATEBLOB statement.\n2.2.1.19 UPDATE Where Current of Cursor\nDescription\nUpdates the row in which the cursor is positioned using the values in SetStatement.\nSyntax\nUPDATE TableName SetStatement WHERE CURRENT OF CursorName ;\n"}
{"page": 163, "text": "Statements, Events, and Functions\nPage 163\nTable 2.37:\nParameter\nDescription\nTableName\nThe name of the table in which you want to\nupdate the row\nSetStatement\nThe word SET followed by a comma-\nseparated list of the form ColumnName =\nvalue\nCursorName\nThe name of the cursor in which the table is\nreferenced\nUsage\nThe USING Transaction Object clause is not allowed with UPDATE Where Current of\nCursor; the transaction object was specified in the statement that declared the cursor.\nExamples\nThis statement updates the row in the Employee table in which the cursor called Emp_curs is\npositioned:\nUPDATE Employee\n       SET salary = 17800\n       WHERE CURRENT of Emp_curs ;\n2.2.2 Using dynamic SQL\nGeneral information\nBecause database applications usually perform a specific activity, you usually know the\ncomplete SQL statement when you write and compile the script. When PowerBuilder\ndoes not support the statement in embedded SQL (as with a DDL statement) or when the\nparameters or the format of the statements are unknown at compile time, the application must\nbuild the SQL statements at runtime. This is called dynamic SQL. The parameters used in\ndynamic SQL statements can change each time the program is executed.\nUsing SQL Anywhere\nFor information about using dynamic SQL with SQL Anywhere, see the SQL\nAnywhere documentation.\nFour formats\nPowerBuilder has four dynamic SQL formats. Each format handles one of the following\nsituations at compile time:\nTable 2.38:\nFormat\nWhen used\nFormat 1\nNon-result-set statements with no input parameters\nFormat 2\nNon-result-set statements with input parameters\n"}
{"page": 164, "text": "Statements, Events, and Functions\nPage 164\nFormat\nWhen used\nFormat 3\nResult-set statements in which the input parameters and result-set\ncolumns are known at compile time\nFormat 4\nResult-set statements in which the input parameters, the result-set\ncolumns or both are unknown at compile time\n\u2022 To handle these situations, you use:\n\u2022 The PowerBuilder dynamic SQL statements\n\u2022 The dynamic versions of CLOSE, DECLARE, FETCH, OPEN, and EXECUTE\n\u2022 The PowerBuilder datatypes DynamicStagingArea and DynamicDescriptionArea\nAbout the examples\nThe examples assume that the default transaction object (SQLCA) has been assigned\nvalid values and that a successful CONNECT has been executed. Although the\nexamples do not show error checking, you should check the SQLCode after each SQL\nstatement.\nDynamic SQL statements\nThe PowerBuilder dynamic SQL statements are:\nDESCRIBE DynamicStagingArea\n   INTO DynamicDescriptionArea ;EXECUTE {IMMEDIATE} SQLStatement\n   {USING TransactionObject} ;EXECUTE DynamicStagingArea\n   USING ParameterList ;EXECUTE DYNAMIC Cursor | Procedure\n   USING ParameterList ;OPEN DYNAMIC Cursor | Procedure\n   USING ParameterList ;EXECUTE DYNAMIC Cursor | Procedure\n   USING DESCRIPTOR DynamicDescriptionArea ;OPEN DYNAMIC Cursor | Procedure\n   USING DESCRIPTOR DynamicDescriptionArea ;PREPARE DynamicStagingArea\n   FROM SQLStatement {USING TransactionObject} ;\nTwo datatypes\nDynamicStagingArea\nDynamicStagingArea is a PowerBuilder datatype. PowerBuilder uses a variable of this type\nto store information for use in subsequent statements.\nThe DynamicStagingArea is the only connection between the execution of a statement and a\ntransaction object and is used internally by PowerBuilder; you cannot access information in\nthe DynamicStagingArea.\nPowerBuilder provides a global DynamicStagingArea variable named SQLSA that you can\nuse when you need a DynamicStagingArea variable.\nIf necessary, you can declare and create additional object variables of the type\nDynamicStagingArea. These statements declare and create the variable, which must be done\nbefore referring to it in a dynamic SQL statement:\nDynamicStagingArea dsa_stage1\ndsa_stage1 = CREATE DynamicStagingArea\nAfter the EXECUTE statement is completed, SQLSA is no longer referenced.\n"}
{"page": 165, "text": "Statements, Events, and Functions\nPage 165\nDynamicDescriptionArea\nDynamicDescriptionArea is a PowerBuilder datatype. PowerBuilder uses a variable of this\ntype to store information about the input and output parameters used in Format 4 of dynamic\nSQL.\nPowerBuilder provides a global DynamicDescriptionArea named SQLDA that you can use\nwhen you need a DynamicDescriptionArea variable.\nIf necessary, you can declare and create additional object variables of the type\nDynamicDescriptionArea. These statements declare and create the variable, which must be\ndone before referring to it in a dynamic SQL statement:\nDynamicDescriptionArea dda_desc1\ndda_desc1 = CREATE DynamicDescriptionArea\nFor more information about SQLDA, see Dynamic SQL Format 4.\nPreparing to use dynamic SQL\nWhen you use dynamic SQL, you must:\n\u2022 Prepare the DynamicStagingArea in all formats except Format 1\n\u2022 Describe the DynamicDescriptionArea in Format 4\n\u2022 Execute the statements in the appropriate order\nPreparing and describing the datatypes\nSince the SQLSA staging area is the only connection between the execution of a SQL\nstatement and a transaction object, an execution error will occur if you do not prepare the\nSQL statement correctly.\nIn addition to SQLSA and SQLDA, you can declare other variables of the\nDynamicStagingArea and DynamicDescriptionArea datatypes. However, this is required\nonly when your script requires simultaneous access to two or more dynamically prepared\nstatements.\nThis is a valid dynamic cursor:\nDECLARE my_cursor DYNAMIC CURSOR FOR SQLSA ;PREPARE SQLSA FROM \"SELECT emp_id FROM\n employee\" ;OPEN DYNAMIC my_cursor ;\nThis is an invalid dynamic cursor. There is no PREPARE, and therefore an execution error\nwill occur:\nDECLARE my_cursor DYNAMIC CURSOR FOR SQLSA ;OPEN DYNAMIC my_cursor ;\nStatement order\nWhere you place the dynamic SQL statements in your scripts is unimportant, but the order of\nexecution is important in Formats 2, 3, and 4. You must execute:\n1. The DECLARE and the PREPARE before you execute any other dynamic SQL statements\n2. The OPEN in Formats 3 and 4 before the FETCH\n"}
{"page": 166, "text": "Statements, Events, and Functions\nPage 166\n3. The CLOSE at the end\nIf you have multiple PREPARE statements, the order affects the contents of SQLSA.\nThese statements illustrate the correct ordering:\nDECLARE my_cursor DYNAMIC CURSOR FOR SQLSA\nstring sql1, sql2\nsql1 = \"SELECT emp_id FROM department WHERE salary > 90000\"\nsql2 = \"SELECT emp_id FROM department WHERE salary > 20000\" \nIF deptId = 200 then\n      PREPARE SQLSA FROM :sql1 USING SQLCA ;\nELSE\n      PREPARE SQLSA FROM :sql2 USING SQLCA ;\nEND IF\nOPEN DYNAMIC my_cursor ;   // my_cursor maps to the SELECT that has been prepared.\nDeclaring a procedure with the SQL Native Client database interface\nWhen you connect to Microsoft SQL Server using the PowerBuilder SQL Native Client\n(SNC) database interface, the syntax for declaring a procedure is:\nDECLARE logical_procedure_name PROCEDURE FOR \n   [@rc=]procedure_name\n   {@param1 = value1 [OUTPUT], @param2 = value2 [OUTPUT], ...}\n   {USING transaction_object};\n[@rc=] indicates that you want to get the procedure's return value.\nUse the keyword OUTPUT or OUT to indicate an output parameter if you want to get the\noutput parameter's value.\nIf the BindSPInput database parameter is 0, value1, value2,... can be either PowerBuilder\nscript variables or literal values. If BindSPInput is 1, value1, value2, ... must be PowerBuilder\nscript variables. If you specify literal values, the SNC interface returns a runtime error.\nWhen you declare a dynamic SQL statement with a procedure, enter a question mark (?) for\neach IN/OUT parameter in the statement. Value substitution is positional. For examples, see\nDynamic SQL Format 3 and 4.\n2.2.2.1 Dynamic SQL Format 1\nDescription\nUse this format to execute a SQL statement that does not produce a result set and does not\nrequire input parameters. You can use this format to execute all forms of Data Definition\nLanguage (DDL).\nSyntax\nEXECUTE IMMEDIATE SQLStatement {USING TransactionObject} ;\nTable 2.39:\nParameter\nDescription\nSQLStatement\nA string containing a valid SQL statement. The string can be a string\nconstant or a PowerBuilder variable preceded by a colon (such as :mysql).\nThe string must be contained on one line and cannot contain expressions.\n"}
{"page": 167, "text": "Statements, Events, and Functions\nPage 167\nParameter\nDescription\nTransactionObject\n(optional)\nThe name of the transaction object that identifies the database.\nExamples\nThese statements create a database table named Trainees. The statements use the string Mysql\nto store the CREATE statement.\nFor SAP ASE users\nIf you are connected to an ASE database, set AUTOCOMMIT to true before\nexecuting the CREATE.\nstring      MyASE\n MyASE = \"CREATE TABLE Trainees \"&\n       +\"(emp_id integer not null,\"&\n       +\"emp_fname char(10) not null, \"&\n       +\"emp_lname char(20) not null)\"\n EXECUTE IMMEDIATE :MyASE ;\nThese statements assume a transaction object named My_trans exists and is connected:\nstring      MyASE\n MyASE=\"INSERT INTO department Values (1234,\"& \n        +\"'Purchasing',1234)\" \n EXECUTE IMMEDIATE :MyASE USING My_trans ;\n2.2.2.2 Dynamic SQL Format 2\nDescription\nUse this format to execute a SQL statement that does not produce a result set but does require\ninput parameters. You can use this format to execute all forms of Data Definition Language\n(DDL).\nSyntax\nPREPARE DynamicStagingArea FROM SQLStatement \n   {USING TransactionObject} ;\n EXECUTE DynamicStagingArea USING {ParameterList} ;\nTable 2.40:\nParameter\nDescription\nDynamicStagingArea\nThe name of the DynamicStagingArea (usually SQLSA).\nIf you need a DynamicStagingArea variable other than SQLSA, you must\ndeclare it and instantiate it with the CREATE statement before using it.\nSQLStatement\nA string containing a valid SQL statement. The string can be a string\nconstant or a PowerBuilder variable preceded by a colon (such as :mysql).\nThe string must be contained on one line and cannot contain expressions.\nEnter a question mark (?) for each parameter in the statement. Value\nsubstitution is positional; reserved word substitution is not allowed.\nTransactionObject\n(optional)\nThe name of the transaction object that identifies the database.\n"}
{"page": 168, "text": "Statements, Events, and Functions\nPage 168\nParameter\nDescription\nParameterList\n(optional)\nA comma-separated list of PowerScript variables. Note that PowerScript\nvariables are preceded by a colon (:).\nUsage\nTo specify a null value, use the SetNull function.\nExamples\nThese statements prepare a DELETE statement with one parameter in SQLSA and then\nexecute it using the value of the PowerScript variable Emp_id_var:\nINT      Emp_id_var = 56\n PREPARE SQLSA \n       FROM \"DELETE FROM employee WHERE emp_id=?\" ;\n EXECUTE SQLSA USING :Emp_id_var ;\nThese statements prepare an INSERT statement with three parameters in SQLSA and then\nexecute it using the value of the PowerScript variables Dept_id_var, Dept_name_var, and\nMgr_id_var (note that Mgr_id_var is null):\nINT Dept_id_var = 156\n INT Mgr_id_var    \n String      Dept_name_var\n Dept_name_var = \"Department\"\n SetNull(Mgr_id_var)\n PREPARE SQLSA \n       FROM \"INSERT INTO department VALUES (?,?,?)\" ;\n EXECUTE SQLSA \n        USING :Dept_id_var,:Dept_name_var,:Mgr_id_var ;\n2.2.2.3 Dynamic SQL Format 3\nDescription\nUse this format to execute a SQL statement that produces a result set in which the input\nparameters and result set columns are known at compile time.\nSyntax\nDECLARE Cursor | Procedure \n   DYNAMIC CURSOR | PROCEDURE \n   FOR DynamicStagingArea ;\n PREPARE DynamicStagingArea FROM SQLStatement \n   {USING TransactionObject} ;\n OPEN DYNAMIC Cursor \n   {USING ParameterList} ;\n EXECUTE DYNAMIC Procedure\n   {USING ParameterList} ;\n FETCH Cursor | Procedure\n   INTO HostVariableList ;\n CLOSE Cursor | Procedure ;\nTable 2.41:\nParameter\nDescription\nCursor or\nProcedure\nThe name of the cursor or procedure you want to use.\nDynamicStagingArea\nThe name of the DynamicStagingArea (usually SQLSA).\n"}
{"page": 169, "text": "Statements, Events, and Functions\nPage 169\nParameter\nDescription\nIf you need a DynamicStagingArea variable other than SQLSA, you must\ndeclare it and instantiate it with the CREATE statement before using it.\nSQLStatement\nA string containing a valid SQL SELECT statement The string can be\na string constant or a PowerBuilder variable preceded by a colon (such\nas :mysql). The string must be contained on one line and cannot contain\nexpressions.\nEnter a question mark (?) for each parameter in the statement. Value\nsubstitution is positional; reserved word substitution is not allowed.\nTransactionObject\n(optional)\nThe name of the transaction object that identifies the database.\nParameterList\n(optional)\nA comma-separated list of PowerScript variables. Note that PowerScript\nvariables are preceded by a colon (:).\nHostVariableList The list of PowerScript variables into which the data values will be\nretrieved.\nUsage\nTo specify a null value, use the SetNull function.\nThe DECLARE statement is not executable and can be declared globally.\nIf your DBMS supports formats of FETCH other than the customary (and default) FETCH\nNEXT, you can specify FETCH FIRST, FETCH PRIOR, or FETCH LAST.\nThe FETCH and CLOSE statements in Format 3 are the same as in standard embedded SQL.\nTo declare a local cursor or procedure, open the script in the Script view and select Paste\nSQL from the PainterBar or the Edit>Paste Special menu. To declare a global, instance, or\nshared cursor or procedure, select Declare from the first drop-down list in the Script view,\nand select Global Variables, Instance Variables, or Shared Variables from the second drop-\ndown list. Then, select Paste SQL.\nFor information about global, instance, shared, and local scope, see Where to declare\nvariables.\nExamples\nExample 1\nThese statements associate a cursor named my_cursor with SQLSA, prepare a SELECT\nstatement in SQLSA, open the cursor, and return the employee ID in the current row into the\nPowerScript variable Emp_id_var:\ninteger Emp_id_var\n DECLARE my_cursor DYNAMIC CURSOR FOR SQLSA ;\n PREPARE SQLSA FROM \"SELECT emp_id FROM employee\" ;\n OPEN DYNAMIC my_cursor ;\n FETCH my_cursor INTO :Emp_id_var ;\n CLOSE my_cursor ;\nYou can loop through the cursor as you can in embedded static SQL.\nExample 2\n"}
{"page": 170, "text": "Statements, Events, and Functions\nPage 170\nThese statements associate a cursor named my_cursor with SQLSA, prepare a SELECT\nstatement with one parameter in SQLSA, open the cursor, and substitute the value of the\nvariable Emp_state_var for the parameter in the SELECT statement. The employee ID in the\nactive row is returned into the PowerBuilder variable Emp_id_var:\nDECLARE my_cursor DYNAMIC CURSOR FOR SQLSA ;\n integer Emp_id_var\n string Emp_state_var = \"MA\"\n string sqlstatement\n  \n sqlstatement = \"SELECT emp_id FROM employee \"&\n       +\"WHERE state = ?\"\n PREPARE SQLSA FROM :sqlstatement ;\n OPEN DYNAMIC my_cursor using :Emp_state_var ;\n FETCH my_cursor INTO :Emp_id_var ;\n CLOSE my_cursor ;\nExample 3\nThese statements perform the same processing as the preceding example but use a database\nstored procedure called Emp_select:\n// The syntax of emp_select is:\n // create procedure emp_select (@stateparm char(2)) as \n // SELECT emp_id FROM employee WHERE state=@stateparm.\n DECLARE my_proc DYNAMIC PROCEDURE FOR SQLSA ;\n integer Emp_id_var\n string Emp_state_var\n  \n PREPARE SQLSA FROM \"execute emp_select @stateparm=?\" ;\n Emp_state_var = \"MA\"\n EXECUTE DYNAMIC my_proc USING :Emp_state_var ;\n FETCH my_proc INTO :Emp_id_var ;\n CLOSE my_proc ;\nExample 4\nThese statements are for a stored procedure with a return value for a SQL Native Client\n(SNC) connection:\ninteger var1, ReturnVal\nstring var2\nPREPARE SQLSA FROM \"execute @rc = myproc @parm1=?, @parm2=? OUTPUT \";\nDECLARE my_proc DYNAMIC PROCEDURE FOR SQLSA ;\nEXECUTE DYNAMIC my_proc USING :var1, :var2 ;\n//fetch result set\n. . .\n//fetch return value and output parameter\nFETCH my_proc INTO : ReturnVal, :var2;\nCLOSE my_proc ;\n2.2.2.4 Dynamic SQL Format 4\nDescription\nUse this format to execute a SQL statement that produces a result set in which the number of\ninput parameters, or the number of result-set columns, or both, are unknown at compile time.\n"}
{"page": 171, "text": "Statements, Events, and Functions\nPage 171\nSyntax\nDECLARE Cursor | Procedure \n   DYNAMIC CURSOR | PROCEDURE \n   FOR DynamicStagingArea ;\n PREPARE DynamicStagingArea FROM SQLStatement\n   {USING TransactionObject} ;\n DESCRIBE DynamicStagingArea\n   INTO DynamicDescriptionArea ;\n OPEN DYNAMIC Cursor\n   USING DESCRIPTOR DynamicDescriptionArea ;\n EXECUTE DYNAMIC Procedure\n   USING DESCRIPTOR DynamicDescriptionArea ;\n FETCH Cursor | Procedure \n   USING DESCRIPTOR DynamicDescriptionArea ;\n CLOSE Cursor | Procedure ;\nTable 2.42:\nParameter\nDescription\nCursor or\nProcedure\nThe name of the cursor or procedure you want to use.\nDynamicStagingArea\nThe name of the DynamicStagingArea (usually SQLSA).\nIf you need a DynamicStagingArea variable other than SQLSA, you must\ndeclare it and instantiate it with the CREATE statement before using it.\nSQLStatement A string containing a valid SQL SELECT statement. The string can be\na string constant or a PowerBuilder variable preceded by a colon (such\nas :mysql). The string must be contained on one line and cannot contain\nexpressions.\nEnter a question mark (?) for each parameter in the statement. Value\nsubstitution is positional; reserved word substitution is not allowed.\nTransactionObject\n(optional)\nThe name of the transaction object that identifies the database.\nDynamicDescriptionArea\nThe name of the DynamicDescriptionArea (usually SQLDA).\nIf you need a DynamicDescriptionArea variable other than SQLDA, you\nmust declare it and instantiate it with the CREATE statement before using it.\nUsage\nThe DECLARE statement is not executable and can be defined globally.\nIf your DBMS supports formats of FETCH other than the customary (and default) FETCH\nNEXT, you can specify FETCH FIRST, FETCH PRIOR, or FETCH LAST.\nTo declare a local cursor or procedure, open the script in the Script view and select Paste\nSQL from the PainterBar or the Edit>Paste Special menu. To declare a global, instance, or\nshared cursor or procedure, select Declare from the first drop-down list in the Script view and\nGlobal Variables, Instance Variables, or Shared Variables from the second drop-down list,\nthen select Paste SQL.\nFor information about global, instance, shared, and local scope, see Where to declare\nvariables.\n"}
{"page": 172, "text": "Statements, Events, and Functions\nPage 172\nAccessing attribute information\nWhen a statement is described into a DynamicDescriptionArea, this information is available\nto you in the attributes of that DynamicDescriptionArea variable:\nTable 2.43:\nInformation\nAttribute\nNumber of input parameters\nNumInputs\nArray of input parameter types\nInParmType\nNumber of output parameters\nNumOutputs\nArray of output parameter types\nOutParmType\nSetting and accessing parameter values\nThe array of input parameter values and the array of output parameter values are also\navailable. You can use the SetDynamicParm function to set the values of an input parameter\nand the following functions to obtain the value of an output parameter:\nTable 2.44:\nGetDynamicDate\nGetDynamicDateTime\nGetDynamicDecimal\nGetDynamicNumber\nGetDynamicString\nGetDynamicTime\nFor information about these functions, see\nGetDynamicDate\nGetDynamicDateTime\nGetDynamicDecimal\nGetDynamicNumber\nGetDynamicString\nGetDynamicTime.\nParameter values\nThe following enumerated datatypes are the valid values for the input and output parameter\ntypes:\nTable 2.45:\nTypeBoolean!\nTypeByte!\nTypeDate!\nTypeDateTime!\nTypeLong!\nTypeLongLong!\nTypeReal!\nTypeString!\n"}
{"page": 173, "text": "Statements, Events, and Functions\nPage 173\nTypeDecimal!\nTypeDouble!\nTypeInteger!\nTypeTime!\nTypeUInt!\nTypeULong!\nTypeUnknown!\nInput parameters\nYou can set the type and value of each input parameter found in the PREPARE statement.\nPowerBuilder populates the SQLDA attribute NumInputs when the DESCRIBE is executed.\nYou can use this value with the SetDynamicParm function to set the type and value of a\nspecific input parameter. The input parameters are optional; but if you use them, you should\nfill in all the values before executing the OPEN or EXECUTE statement.\nOutput parameters\nYou can access the type and value of each output parameter found in the PREPARE\nstatement. If the database supports output parameter description, PowerBuilder populates\nthe SQLDA attribute NumOutputs when the DESCRIBE is executed. If the database does\nnot support output parameter description, PowerBuilder populates the SQLDA attribute\nNumOutputs when the FETCH statement is executed.\nYou can use the number of output parameters in the NumOutputs attribute in functions\nto obtain the type of a specific parameter from the output parameter type array in the\nOutParmType attribute. When you have the type, you can call the appropriate function after\nthe FETCH statement to retrieve the output value.\nExamples\nExample 1\nThese statements assume you know that there will be only one output descriptor and that it\nwill be an integer. You can expand this example to support any number of output descriptors\nand any datatype by wrapping the CHOOSE CASE statement in a loop and expanding the\nCASE statements:\nstring Stringvar, Sqlstatement\n integer Intvar\n Long LongVar\n Sqlstatement = \"SELECT emp_id FROM employee\"\n PREPARE SQLSA FROM :Sqlstatement ;\n DESCRIBE SQLSA INTO SQLDA ;\n DECLARE my_cursor DYNAMIC CURSOR FOR SQLSA ;\n OPEN DYNAMIC my_cursor USING DESCRIPTOR SQLDA ;\n FETCH my_cursor USING DESCRIPTOR SQLDA ;\n // If the FETCH is successful, the output \n // descriptor array will contain returned \n // values from the first row of the result set.\n // SQLDA.NumOutputs contains the number of \n // output descriptors.\n // The SQLDA.OutParmType array will contain \n // NumOutput entries and each entry will contain\n // a value of the enumerated datatype ParmType\n // (such as TypeInteger!, TypeLongLong!, or \n // TypeString!).\n CHOOSE CASE SQLDA.OutParmType[1]\n       CASE TypeString!\n          Stringvar = GetDynamicString(SQLDA, 1)\n"}
{"page": 174, "text": "Statements, Events, and Functions\nPage 174\n       CASE TypeInteger!\n          Intvar = GetDynamicNumber(SQLDA, 1)\n        CASE TypeLongLong!\n           Longvar = GetDynamicDecimal(SQLDA, 1)\n END CHOOSE\n CLOSE my_cursor ;\nExample 2\nThese statements assume you know there is one string input descriptor and sets the parameter\nto MA:\nstring Sqlstatement, sValue\n Sqlstatement = \"SELECT emp_fname, emp_lname \" &\n        + \"FROM employee WHERE state = ?\"\n PREPARE SQLSA FROM :Sqlstatement ;\n  \n DESCRIBE SQLSA INTO SQLDA ;\n  \n // If the DESCRIBE is successful, the input\n // descriptor array will contain one input\n // descriptor that you must fill prior to the OPEN\n  \n DECLARE my_cursor DYNAMIC CURSOR FOR SQLSA ;\n SetDynamicParm(SQLDA, 1, \"MA\")\n  \n OPEN DYNAMIC my_cursor USING DESCRIPTOR SQLDA ;\n  \n FETCH my_cursor USING DESCRIPTOR SQLDA ;\n  \n // If the FETCH is successful, the output \n // descriptor array will contain returned \n // values from the first row of the result set\n // as in the first example.\n  \n // To test and see the values:    \n sValue = SQLDA.GetDynamicString(1)\n //messagebox(\"\",sValue)\n sValue = SQLDA.GetDynamicString(2)\n //messagebox(\"\",sValue)\n Do While sqlca.sqlcode <> 100 \n    FETCH my_cursor USING DESCRIPTOR SQLDA ;      \n        sValue = SQLDA.GetDynamicString(1)\n        //messagebox(\"\",sValue)\n        sValue = SQLDA.GetDynamicString(2)\n       //messagebox(\"\",sValue)\n Loop\n  \n CLOSE my_cursor ;\nExample 3\nThis example is for a stored procedure with a return value for a SQL Native Client (SNC)\nconnection:\ninteger var1, ReturnVal\nstring var2\nPREPARE SQLSA FROM  \"execute @rc = myproc @parm1=?, @parm2=? OUTPUT \";\nDESCRIBE SQLSA INTO SQLDA ;\nDECLARE my_proc DYNAMIC PROCEDURE FOR SQLSA ;\n"}
{"page": 175, "text": "Statements, Events, and Functions\nPage 175\nSetDynamicParm(SQLDA, 1, var1)\nSetDynamicParm(SQLDA, 2, var2)\nEXECUTE DYNAMIC my_proc USING DESCRIPTOR SQLDA ;\n//fetch result set\n. . .\n//fetch return value and output parameter\nFETCH my_proc USING DESCRIPTOR SQLDA ;\n//get return value\nCHOOSE CASE SQLDA.OutParmType[1]\nCASE TypeInteger!\n   rc =  GetDynamicNumber(SQLDA, 1)\nCASE TypeLong!\n   rc =  GetDynamicNumber(SQLDA, 1)\nCASE TypeString!\n   Var2 = GetDynamicString(SQLDA, 1)\nEND CHOOSE\n//get output value\nCHOOSE CASE SQLDA.OutParmType[2]\nCASE TypeString!\n   Var2 = GetDynamicString(SQLDA, 2)\nCASE TypeInteger!\n   rc =  GetDynamicNumber(SQLDA, 2)\nCASE TypeLong!\n   rc =  GetDynamicNumber(SQLDA, 2)\nEND CHOOSE\nCLOSE my_proc ;\n2.3 PowerScript Events\nAbout this chapter\nThis chapter discusses events in general and then documents the arguments, event IDs, and\nreturn codes for the events defined for all PowerBuilder controls and objects except the\nDataWindow and DataStore. Usage notes and examples provide information about what is\ntypically done in an event's script.\nFor information about DataWindow and DataStore events, see Part I, \u201cDataWindow\nReference\u201d.\nContents\nThe events are listed in alphabetical order.\n2.3.1 About events\nIn PowerBuilder, there are several types of events.\nTable 2.46: PowerBuilder event types\nType\nOccurs in response to\nSystem events with an ID\nUser actions or other system messages or a\ncall in your scripts\n"}
{"page": 176, "text": "Statements, Events, and Functions\nPage 176\nType\nOccurs in response to\nSystem events without an ID\nPowerBuilder messages or a call in your\nscripts\nUser-defined events with an ID\nUser actions or other system messages or a\ncall in your scripts\nUser-defined events without an ID\nA call in your scripts\nThe following information about event IDs, arguments, and return values applies to all types\nof events.\nEvent IDs\nAn event ID connects an event to a system message. Events that can be triggered by user\nactions or other system activity have event IDs. In PowerBuilder's objects, PowerBuilder\ndefines events for commonly used event IDs. These events are documented in this chapter.\nYou can define your own events for other system messages using the event IDs listed in the\nEvent Declaration dialog box.\nEvents without IDs\nSome system events, such as the application object's Open event, do not have an event ID.\nThey are associated with PowerBuilder activity, not system activity. PowerBuilder triggers\nthem itself when appropriate.\nArguments\nSystem-triggered events\nEach system event has its own list of zero or more arguments. When PowerBuilder triggers\nthe event in response to a system message, it supplies values for the arguments, which\nbecome available in the event script.\nEvents you trigger\nIf you trigger a system event in another event script, you specify the expected arguments. For\nexample, in the Clicked event for a window, you can trigger the DoubleClicked event with\nthis statement, passing its flags, xpos, and ypos arguments on to the DoubleClicked event.\nw_main.EVENT DoubleClicked(flags, xpos, ypos)\nBecause DoubleClicked is a system event, the argument list is fixed -- you cannot supply\nadditional arguments of your own.\nCalling events without specifying their arguments\nIf you use the CALL statement, you can trigger a system event without specifying its\narguments. However, CALL is obsolete and you should not use it in new applications\nexcept as described in CALL.\nReturn values\nWhere does the return value go?\nMost events have a return value. When the event is triggered by the system, the return value\nis returned to the system.\n"}
{"page": 177, "text": "Statements, Events, and Functions\nPage 177\nWhen your script triggers a user-defined or system event, you can capture the return value in\nan assignment statement:\nli_rtn = w_main.EVENT process_info(mydata)\nWhen you post an event, the return value is lost because the calling script is no longer\nrunning when the posted script is actually run. The compiler does not allow a posted event in\nan assignment statement.\nReturn codes\nSystem events with return values have a default return code of 0, which means, \"take no\nspecial action and continue processing\". Some events have additional codes that you can\nreturn to change the processing that happens after the event. For example, a return code might\nallow you to suppress an error message or prevent a change from taking place.\nA RETURN statement is not required in an event script, but for most events it is good\npractice to include one. For events with return values, if you do not have a RETURN\nstatement, the event returns 0.\nSome system events have no return value. For these events, the compiler does not allow a\nRETURN statement.\nAncestor event script return values\nSometimes you want to perform some processing in an event in a descendant object, but\nthat processing depends on the return value of the ancestor event script. You can use a local\nvariable called AncestorReturnValue that is automatically declared and assigned the value of\nthe ancestor event.\nFor more information about AncestorReturnValue, see Calling functions and events in an\nobject's ancestor.\nUser-defined events\nWith an ID\nWhen you declare a user-defined event that will be triggered by a system message, you select\nan event ID from the list of IDs. The pbm (PowerBuilder Message) codes listed in the Event\ndialog box map to system messages.\nThe return value and arguments associated with the event ID become part of your event\ndeclaration. You cannot modify them.\nWhen the corresponding system message occurs, PowerBuilder triggers the event and passes\nvalues for the arguments to the event script.\nWithout an ID\nWhen you declare a user event that will not be associated with a system message, you do not\nselect an event ID for the event.\nYou can specify your own arguments and return datatype in the Event Declaration dialog\nbox.\nThe event will never be triggered by user actions or system activity. You trigger the event\nyourself in your application's scripts.\nFor more information\n"}
{"page": 178, "text": "Statements, Events, and Functions\nPage 178\nIf you want to trigger events, including system events, see Syntax for calling PowerBuilder\nfunctions and events for information on the calling syntax.\nTo learn more about user-defined events, see Section 3.3, \u201cWorking with User Events\u201d in\nUsers Guide.\n2.3.2 Activate\nDescription\nOccurs just before the window becomes active.\nEvent ID\nTable 2.47:\nEvent ID\nObjects\npbm_activate\nWindow\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen an Activate event occurs, the first object in the tab order for the window gets focus. If\nthere are no visible objects in the window, the window gets focus.\nAn Activate event occurs for a newly opened window because it is made active after it is\nopened.\nThe Activate event is frequently used to enable and disable menu items.\nExamples\nExample 1\nIn the window's Activate event, this code disables the Sheet menu item for menu m_frame on\nthe File menu:\nm_frame.m_file.m_sheet.Enabled = FALSE\nExample 2\nThis code opens the sheet w_sheet in a layered style when the window activates:\nw_sheet.ArrangeSheets(Layer!)\nSee also\nClose\n"}
{"page": 179, "text": "Statements, Events, and Functions\nPage 179\nOpen\nShow\n2.3.3 AddressChange\nDescription\nOccurs when the frame's address changes.\nEvent ID\nTable 2.48:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.49:\nArgument\nDescription\nnewUrl\nThe frame\u2019s new address.\nReturn Values\nNone\nSee also\nCertificateError\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStart\nNavigationStateChanged\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.4 BeginDownload\nDescription\nOccurs at the beginning of a download procedure\n"}
{"page": 180, "text": "Statements, Events, and Functions\nPage 180\nEvent ID\nTable 2.50:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nNone\nReturn Values\nNone\nUsage\nUse this event to add custom actions at the beginning of the download stage of a\nsynchronization.\nWhen the MobiLink synchronization server receives data, it updates the consolidated\ndatabase, then builds a download stream that contains all relevant changes and sends it\nback to the remote site. At the end of each successful synchronization, the consolidated and\nremote databases are consistent. Either a whole transaction is synchronized, or none of it is\nsynchronized. This ensures transactional integrity at each database.\nThe BeginDownload event marks the beginning of the download transaction.\nFor a complete list of connection and synchronization events, and examples of their use, see\nthe MobiLink documentation.\nSee also\nBeginSync\nBeginUpload\nConnectMobiLink\n2.3.5 BeginDrag\nThe BeginDrag event has different arguments for different objects:\nTable 2.51:\nObject\nSee\nListView control\nSyntax 1\nTreeView control\nSyntax 2\n2.3.5.1 Syntax 1: For ListView controls\nDescription\nOccurs when the user presses the left mouse button in the ListView control and begins\ndragging.\n"}
{"page": 181, "text": "Statements, Events, and Functions\nPage 181\nEvent ID\nTable 2.52:\nEvent ID\nObjects\npbm_lvnbegindrag\nListView\nArguments\nTable 2.53:\nArgument\nDescription\nindex\nInteger by value (the index of the ListView item being dragged)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nBeginDrag and BeginRightDrag events occur when the user presses the mouse button and\ndrags, whether or not dragging is enabled. To enable dragging, you can:\n\u2022 Set the DragAuto property to true. If the ListView's DragAuto property is true, a drag\noperation begins automatically when the user clicks.\n\u2022 Call the Drag function. If DragAuto is false, then in the BeginDrag event script, the\nprogrammer can call the Drag function to begin the drag operation.\nDragging a ListView item onto another control causes its standard drag events (DragDrop,\nDragEnter, DragLeave, and DragWithin) to occur. The standard drag events occur for\nListView when another control is dragged within the borders of the ListView.\nExamples\nThis example moves a ListView item from one ListView to another. ilvi_dragged_object is a\nwindow instance variable whose type is ListViewItem. To copy the item, omit the code that\ndeletes it from the source ListView.\nThis code is in the BeginDrag event script of the source ListView:\n// If the ListView's DragAuto property is FALSE\nThis.Drag(Begin!)\n \nThis.GetItem(This.SelectedIndex(), &\n   ilvi_dragged_object)\n \n// To copy, rather than move, omit these two lines\nThis.DeleteItem(This.SelectedIndex())\nThis.Arrange()\nThis code is in the DragDrop event of the target ListView:\n"}
{"page": 182, "text": "Statements, Events, and Functions\nPage 182\nThis.AddItem(ilvi_dragged_object)\nThis.Arrange()\nSee also\nBeginRightDrag\nDragDrop\nDragEnter\nDragLeave\nDragWithin\n2.3.5.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user presses the left mouse button on a label in the TreeView control and\nbegins dragging.\nEvent ID\nTable 2.54:\nEvent ID\nObjects\npbm_tvnbegindrag\nTreeView\nArguments\nTable 2.55:\nArgument\nDescription\nhandle\nLong by value (handle of the TreeView item being dragged)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nBeginDrag and BeginRightDrag events occur when the user presses the mouse button and\ndrags, whether or not dragging is enabled. To enable dragging, you can:\n\u2022 Set the DragAuto property to true. If the TreeView's DragAuto property is true, a drag\noperation begins automatically when the user clicks.\n\u2022 Call the Drag function. If DragAuto is false, then in the BeginDrag event script, the\nprogrammer can call the Drag function to begin the drag operation.\nThe user cannot drag a highlighted item.\n"}
{"page": 183, "text": "Statements, Events, and Functions\nPage 183\nDragging a TreeView item onto another control causes the control's standard drag events\n(DragDrop, DragEnter, DragLeave, and DragWithin) to occur. The standard drag events\noccur for TreeView when another control is dragged within the borders of the TreeView.\nExamples\nThis example moves the first TreeView item in the source TreeView to another TreeView\nwhen the user drags there. itvi_dragged_object is a window instance variable whose type is\nTreeViewItem. To copy the item, omit the code that deletes it from the source TreeView.\nThis code is in the BeginDrag event script of the source TreeView:\nlong itemnum\n \n// If the TreeView's DragAuto property is FALSE\nThis.Drag(Begin!)\nitemnum = 1\nThis.GetItem(itemnum, itvi_dragged_object)\n \n// To copy, rather than move, omit these two lines\nThis.DeleteItem(itemnum)\nThis.SetRedraw(TRUE)\nThis code is in the DragDrop event of the target TreeView:\nThis.InsertItemLast(0, itvi_dragged_object)\nThis.SetRedraw(TRUE)\nInstead of deleting the item from the source TreeView immediately, consider deleting it after\nthe insertion in the DragDrop event succeeds.\nSee also\nBeginRightDrag\nDragDrop\nDragEnter\nDragLeave\nDragWithin\n2.3.6 BeginLabelEdit\nThe BeginLabelEdit event has different arguments for different objects:\nTable 2.56:\nObject\nSee\nListView control\nSyntax 1\nTreeView control\nSyntax 2\n2.3.6.1 Syntax 1: For ListView controls\nDescription\nOccurs when the user clicks on the label of an item after selecting the item.\n"}
{"page": 184, "text": "Statements, Events, and Functions\nPage 184\nEvent ID\nTable 2.57:\nEvent ID\nObjects\npbm_lvnbeginlabeledit\nListView\nArguments\nTable 2.58:\nArgument\nDescription\nindex\nInteger by value (the index of the selected ListView item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Allow editing of the label\n1 -- Prevent editing of the label\nUsage\nWhen editing is allowed, a box appears around the label with the text highlighted. The user\ncan replace or change the existing text.\nExamples\nThis example uses the BeginLabelEdit event to display the name of the ListView item being\nedited:\nListViewItem lvi\nThis.GetItem(index lvi)\nsle_info.text = \"Editing \" + string(lvi.label)\nSee also\nEndLabelEdit\n2.3.6.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user clicks on the label of an item after selecting the item.\nEvent ID\nTable 2.59:\nEvent ID\nObjects\npbm_tvnbeginlabeledit\nTreeView\nArguments\n"}
{"page": 185, "text": "Statements, Events, and Functions\nPage 185\nTable 2.60:\nArgument\nDescription\nhandle\nLong by value (the handle of the selected TreeView item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Allow editing of the label\n1 -- Prevent editing of the label\nUsage\nWhen editing is allowed, a box appears around the label with the text highlighted. The user\ncan replace or change the existing text.\nExamples\nThis example uses the BeginLabelEdit to display the name of the TreeView item being edited\nin a SingleLineEdit:\nTreeViewItem tvi\nThis.GetItem(index, tvi)\nsle_info.text = \"Editing \" + string(tvi.label)\nSee also\nEndLabelEdit\n2.3.7 BeginLogScan\nDescription\nOccurs before dbmlsync scans the transaction log to assemble the upload data stream.\nEvent ID\nTable 2.61:\nEvent ID\nObjects\nNone\nMLSync\nArguments\nTable 2.62:\nArgument\nDescription\nrescanlog\nBoolean indicating whether the log has already been scanned for the\ncurrent synchronization.\nReturn Values\nNone\n"}
{"page": 186, "text": "Statements, Events, and Functions\nPage 186\nUsage\nUse this event to add custom actions immediately before the transaction log is scanned for\nupload. The following events are triggered while the upload stream is prepared, but before\nsynchronization begins: BeginLogScan, ProgressInfo, and EndLogScan.\nIf this is the first time the transaction log has been scanned for this synchronization, the\nrescanlog value is false; otherwise it is true. The log is scanned twice when the MobiLink\nsynchronization server and dbmlsync have different information about where scanning should\nbegin.\nSee also\nEndLogScan\nProgressIndex\n2.3.8 BeginRightDrag\nThe BeginRightDrag event has different arguments for different objects:\nTable 2.63:\nObject\nSee\nListView control\nSyntax 1\nTreeView control\nSyntax 2\n2.3.8.1 Syntax 1: For ListView controls\nDescription\nOccurs when the user presses the right mouse button in the ListView control and begins\ndragging.\nEvent ID\nTable 2.64:\nEvent ID\nObjects\npbm_lvnbeginrightdrag\nListView\nArguments\nTable 2.65:\nArgument\nDescription\nindex\nInteger by value (the index of the ListView item being dragged)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n"}
{"page": 187, "text": "Statements, Events, and Functions\nPage 187\n0 -- Continue processing\nUsage\nBeginDrag and BeginRightDrag events occur when the user presses the mouse button and\ndrags, whether or not dragging is enabled. To enable dragging, you can:\n\u2022 Set the DragAuto property to true. If the ListView's DragAuto property is true, a drag\noperation begins automatically when the user clicks.\n\u2022 Call the Drag function. If DragAuto is false, then in the BeginRightDrag event script, the\nprogrammer can call the Drag function to begin the drag operation.\nDragging a ListView item onto another control causes its standard drag events (DragDrop,\nDragEnter, DragLeave, and DragWithin) to occur. The standard drag events occur for\nListView when another control is dragged within the borders of the ListView.\nExamples\nSee the example for the BeginDrag event. It is also effective for the BeginRightDrag event.\nSee also\nBeginDrag\nDragDrop\nDragEnter\nDragLeave\nDragWithin\n2.3.8.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user presses the right mouse button in the TreeView control and begins\ndragging.\nEvent ID\nTable 2.66:\nEvent ID\nObjects\npbm_tvnbeginrightdrag\nTreeView\nArguments\nTable 2.67:\nArgument\nDescription\nhandle\nLong by value (the handle of the TreeView item being dragged)\nReturn Values\n"}
{"page": 188, "text": "Statements, Events, and Functions\nPage 188\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nBeginDrag and BeginRightDrag events occur when the user presses the mouse button and\ndrags, whether or not dragging is enabled. To enable dragging, you can:\n\u2022 Set the DragAuto property to true. If the ListView's DragAuto property is true, a drag\noperation begins automatically when the user clicks.\n\u2022 Call the Drag function. If DragAuto is false, then in the BeginRightDrag event script, the\nprogrammer can call the Drag function to begin the drag operation.\nThe user cannot drag a highlighted item. Dragging a TreeView item onto another control\ncauses its standard drag events (DragDrop, DragEnter, DragLeave, and DragWithin) to occur.\nThe standard drag events occur for TreeView when another control is dragged within the\nborders of the TreeView.\nExamples\nSee the example for the BeginDrag event.\nSee also\nBeginDrag\nDragDrop\nDragEnter\nDragLeave\nDragWithin\n2.3.9 BeginSync\nDescription\nOccurs at the beginning of the synchronization.\nEvent ID\nTable 2.68:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.69:\nArgument\nDescription\nmlusername\nRead-only string identifying the MobiLink user name.\n"}
{"page": 189, "text": "Statements, Events, and Functions\nPage 189\nArgument\nDescription\npubnames\nRead-only string identifying the publication to be synchronized. If there\nis more than one publication, this is a comma-separated list.\nReturn Values\nNone\nUsage\nUse this event to add custom actions at the beginning of a synchronization. The following\nsynchronization object events correspond to events occurring on the synchronization\nserver (in the order displayed): BeginSync, ConnectMobiLink, BeginUpload, EndUpload,\nBeginDownload, EndDownload, DisconnectMobiLink, and EndSync.\nSee also\nBeginDownload\nBeginUpload\nConnectMobiLink\n2.3.10 BeginUpload\nDescription\nOccurs at the beginning of the synchronization upload procedure.\nEvent ID\nTable 2.70:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nNone\nReturn Values\nNone\nUsage\nUse this event to add custom actions immediately before the transmission of the upload to the\nMobiLink synchronization server.\nThe BeginUpload event marks the beginning of the upload transaction. Applicable inserts\nand updates to the consolidated database are performed for all remote tables, then rows are\ndeleted as applicable for all remote tables. After EndUpload, upload changes are committed.\nSee also\nBeginDownload\nConnectMobiLink\n"}
{"page": 190, "text": "Statements, Events, and Functions\nPage 190\nEndUpload\n2.3.11 CategoryCollapsed\nDescription\nOccurs when the category is collapsed. When the RibbonBar is minimized, the category\nwill be expanded when the user clicks the category title, and will be collapsed when the user\nclicks the title again or clicks outside of the category.\nEvent ID\nTable 2.71:\nEvent ID\nObjects\nNone\nRibbonBar\nArguments\nTable 2.72:\nArgument\nDescription\nIndex\nLong by value (the index of the currently collapsed category)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\n//Adjust the position and height of dw_1 after RibbonBar is collapsed\ndw_1.Y = 464 - 364\ndw_1.Height = 400 + 364\nSee also\nCategorySelectionChanged\nCategorySelectionChanging\nCategoryExpanded\nItemUnselected\n2.3.12 CategoryExpanded\nDescription\nOccurs when the category is expanded. When the RibbonBar is minimized, the category will\nbe expanded when the user clicks the category title.\nEvent ID\n"}
{"page": 191, "text": "Statements, Events, and Functions\nPage 191\nTable 2.73:\nEvent ID\nObjects\nNone\nRibbonBar\nArguments\nTable 2.74:\nArgument\nDescription\nIndex\nLong by value (the index of the currently popup category)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\n//Adjust the position and height of dw_1 after RibbonBar is expanded\ndw_1.Height = 400\ndw_1.Y = 464\nSee also\nCategorySelectionChanged\nCategorySelectionChanging\nCategoryCollapsed\nItemUnselected\n2.3.13 CategorySelectionChanged\nDescription\nJust after the selection changes to another category. CategorySelectionChanged is triggered\nwhen the category is created and the initial selection is established.\nEvent ID\nTable 2.75:\nEvent ID\nObjects\nNone\nRibbonBar\nArguments\nTable 2.76:\nArgument\nDescription\nOldIndex\nLong by value (the index of the category that was previously selected)\n"}
{"page": 192, "text": "Statements, Events, and Functions\nPage 192\nArgument\nDescription\nNewIndex\nLong by value (the index of the category that has become selected)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nRibbonCategoryItem lr_Category\n//st_status is statictext\nIf rbb_1.GetCategoryByIndex( NewIndex, lr_Category ) = 1 Then\n st_status.Text = \"Category:[\" + lr_Category.Text + \"]\"\nEnd If\nSee also\nCategorySelectionChanging\nCategoryExpanded\nCategoryCollapsed\nItemUnselected\n2.3.14 CategorySelectionChanging\nDescription\nOccurs when another category is about to be selected.\nEvent ID\nTable 2.77:\nEvent ID\nObjects\nNone\nRibbonBar\nArguments\nTable 2.78:\nArgument\nDescription\nOldIndex\nLong by value (the index of the currently selected category)\nNewIndex\nLong by value (the index of the category that is about to be selected)\nReturn Values\nLong.\n"}
{"page": 193, "text": "Statements, Events, and Functions\nPage 193\nReturn code choices (specify in a RETURN statement):\n0 -- Allow the selection to change\n1 -- Prevent the selection from changing\nExamples\nBoolean lb_Auth\nlb_Auth = gb_Auth //Global Variable\nChoose Case NewIndex\n Case 2,3\n //Whether to authorize\n If lb_Auth Then\n  Return 0\n Else\n  Return 1\n End If\nEnd Choose\nSee also\nCategorySelectionChanged\nCategoryExpanded\nCategoryCollapsed\nItemUnselected\n2.3.15 CertificateError\nDescription\nOccurs when failed to validate the server certificate.\nEvent ID\nTable 2.79:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.80:\nArgument\nDescription\nerrorText\nThe error description.\nrequestUrl\nThe URL of the server currently being requested.\ncertificateInfo\nThe certificate information which includes certificate issuer, certificate\nsubject, certificate expiration time, and certificate PEM encoding.\nReturn Values\n0 -- to continue browsing the current page.\n"}
{"page": 194, "text": "Statements, Events, and Functions\nPage 194\n1 -- to cancel the browsing of the current page.\nExamples\nInteger CertificateError(string errorText, string requestUrl, string\n certificateInfo)\n{\nstrMessage = \"[CERTIFICATE_ERROR_TEXT]: \" + \"~r~n\"\nstrMessage += \"ErrorText : \"   + errortext + \"~r~n\"\nstrMessage += \"RequestUrl :  \" + requesturl + \"~r~n\"\nstrMessage += \"Certificate : \"   + certificateInfo + \"~r~n\"\nstrMessage += \"Yes #to continue browsing the web page. No : to concel browsing the\n web page ~r~n\"\nif MessageBox('server certificate error', strMessage, Question!, YesNo! ) = 1 then\n    // Continue browsing the web page    \n    Ln_Result = 0\nelse\n    // Cancel browsing the web page    \n    Ln_Result = 1\nend if\nreturn Ln_Result\n}\nSee also\nAddressChanged\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStateChanged\nNavigationStart\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.16 Clicked\nThe Clicked event has different arguments for different objects:\nTable 2.81:\nObject\nSee\nMenus\nSyntax 1\nListView and Toolbar controls\nSyntax 2\nTab controls\nSyntax 3\nTreeView controls\nSyntax 4\n"}
{"page": 195, "text": "Statements, Events, and Functions\nPage 195\nObject\nSee\nWindow and progress bar controls\nSyntax 5\nRibbon controls\nSyntax 6\nOther controls\nSyntax 7\nFor information about the DataWindow control's Clicked event, see Section 8.8, \u201cClicked\u201d in\nDataWindow Reference.\n2.3.16.1 Syntax 1: For menus\nDescription\nOccurs when the user chooses an item on a menu.\nEvent ID\nTable 2.82:\nEvent ID\nObjects\nNone\nMenu\nArguments\nNone\nReturn Values\nNone (do not use a RETURN statement)\nUsage\nIf the user highlights the menu item without choosing it, its Selected event occurs.\nIf the user chooses a menu item that has a cascaded menu associated with it, the Clicked\nevent occurs, and the cascaded menu is displayed.\nExamples\nThis script is for the Clicked event of the New menu item for the frame window. The\nwf_newsheet function is a window function. The window w_genapp_frame is part of the\napplication template you can generate when you create a new application:\n/* Create a new sheet */\nw_genapp_frame.wf_newsheet( )\nSee also\nSelected\n2.3.16.2 Syntax 2: For ListView and Toolbar controls\nDescription\nOccurs when the user clicks within the ListView control, either on an item or in the blank\nspace around items.\n"}
{"page": 196, "text": "Statements, Events, and Functions\nPage 196\nEvent ID\nTable 2.83:\nEvent ID\nObjects\npbm_lvnclicked\nListView\nArguments\nTable 2.84:\nArgument\nDescription\nindex\nInteger by value (the index of the ListView item the user clicked). The\nvalue of index is -1 if the user clicks within the control but not on a\nspecific item.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe Clicked event occurs when the user presses the mouse button. The Clicked event can\noccur during a double-click, in addition to the DoubleClicked event.\nIn addition to the Clicked event, ItemChanging and ItemChanged events can occur when the\nuser clicks on an item that does not already have focus. BeginLabelEdit can occur when the\nuser clicks on a label of an item that has focus.\nUsing the ItemActivate event for ListView controls\nYou can use the ItemActivate event (with the OneClickActivate property set to true)\ninstead of the Clicked event for ListView controls.\nExamples\nThis code changes the label of the item the user clicks to uppercase:\nIF index = -1 THEN RETURN 0\n \nThis.GetItem(index, llvi_current)\nllvi_current.Label = Upper(llvi_current.Label)\nThis.SetItem(index, llvi_current)\nRETURN 0\nSee also\nColumnClick\nDoubleClicked\n"}
{"page": 197, "text": "Statements, Events, and Functions\nPage 197\nItemActivate\nItemChanged\nItemChanging\nRightClicked\nRightDoubleClicked\n2.3.16.3 Syntax 3: For Tab controls\nDescription\nOccurs when the user clicks on the tab portion of a Tab control.\nEvent ID\nTable 2.85:\nEvent ID\nObjects\npbm_tcnclicked\nTab\nArguments\nTable 2.86:\nArgument\nDescription\nindex\nInteger by value (the index of the tab page the user clicked)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe Clicked event occurs when the mouse button is released.\nWhen the user clicks in the display area of the Tab control, the tab page user object (not the\nTab control) gets a Clicked event.\nThe Clicked event can occur during a double-click, in addition to the DoubleClicked event.\nIn addition to the Clicked event, the SelectionChanging and SelectionChanged events\ncan occur when the user clicks on a tab page label. If the user presses an arrow key to\nchange tab pages, the Key event occurs instead of Clicked before SelectionChanging and\nSelectionChanged.\nExamples\nThis code makes the tab label bold for the fourth tab page only:\nIF index = 4 THEN \n"}
{"page": 198, "text": "Statements, Events, and Functions\nPage 198\n   This.BoldSelectedText = TRUE\nELSE\n   This.BoldSelectedText = FALSE\nEND IF\nSee also\nDoubleClicked\nRightClicked\nRightDoubleClicked\nSelectionChanged\nSelectionChanging\n2.3.16.4 Syntax 4: For TreeView controls\nDescription\nOccurs when the user clicks an item in a TreeView control.\nEvent ID\nTable 2.87:\nEvent ID\nObjects\npbm_tvnclicked\nTreeView\nArguments\nTable 2.88:\nArgument\nDescription\nhandle\nLong by value (the handle of the TreeView item the user clicked)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe Clicked event occurs when the user presses the mouse button.\nThe Clicked event can occur during a double-click, in addition to the DoubleClicked event.\nIn addition to the Clicked event, GetFocus occurs if the control does not already have focus.\nExamples\nThis code in the Clicked event changes the label of the item the user clicked to uppercase:\nTreeViewItem ltvi_current\n \n"}
{"page": 199, "text": "Statements, Events, and Functions\nPage 199\nThis.GetItem(handle, ltvi_current)\nltvi_current.Label = Upper(ltvi_current.Label)\nThis.SetItem(handle, ltvi_current)\nSee also\nDoubleClicked\nRightClicked\nRightDoubleClicked\nSelectionChanged\nSelectionChanging\n2.3.16.5 Syntax 5: For windows and progress bars\nDescription\nOccurs when the user clicks in an unoccupied area of the window or progress bar (any area\nwith no visible, enabled object).\nEvent ID\nTable 2.89:\nEvent ID\nObjects\npbm_lbuttonclk\nWindow\npbm_lbuttondwn\nHProgressBar, VProgressBar\nArguments\nTable 2.90:\nArgument\nDescription\nflags\nUnsignedLong by value (the modifier keys and mouse buttons that are\npressed).\nValues are:\n\u2022 1 -- Left mouse button\n\u2022 2 -- Right mouse button (windows only)\n\u2022 4 -- Shift key\n\u2022 8 -- Ctrl key\n\u2022 16 -- Middle mouse button (windows only)\nIn the Clicked event for windows, the left mouse button is being released,\nso 1 is not summed in the value of flags.\nFor an explanation of flags, see Syntax 2 of MouseMove.\n"}
{"page": 200, "text": "Statements, Events, and Functions\nPage 200\nArgument\nDescription\nxpos\nInteger by value (the distance of the pointer from the left edge of the\nwindow workspace or control in pixels).\nypos\nInteger by value (the distance of the pointer from the top of the window's\nworkspace or control in pixels).\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe Clicked event occurs when the user presses the mouse button down in progress bars and\nwhen the user releases the mouse button in windows.\nIf the user clicks on a control or menu in a window, that object (rather than the window) gets\na Clicked event. No Clicked event occurs when the user clicks the window's title bar.\nWhen the user clicks on a window, the window's MouseDown and MouseUp events also\noccur.\nWhen the user clicks on a visible disabled control or an invisible enabled control, the window\ngets a Clicked event.\nExamples\nIf the user clicks in the upper left corner of the window, this code sets focus to the button\ncb_clear:\nIF (xpos <= 600 AND ypos <= 600) THEN\n   cb_clear.SetFocus( )\nEND IF\nSee also\nDoubleClicked\nMouseDown\nMouseMove\nMouseUp\nRButtonDown\n2.3.16.6 Syntax 6: For Ribbon controls\nDescription\nThis is a user event which occurs when the user clicks on an item within a RibbonBar control.\nMake sure the parameter (quantities and types) of the user event is correctly defined\naccording to the requirement of the ribbon control.\nApplies to\n"}
{"page": 201, "text": "Statements, Events, and Functions\nPage 201\nRibbon controls (including RibbonTabButtonItem, RibbonLargeButtonItem,\nRibbonSmallButtonItem, RibbonCheckBoxItem, and RibbonMenuItem)\nArguments for RibbonTabButtonItem, RibbonLargeButtonItem,\nRibbonSmallButtonItem, RibbonCheckBoxItem\nTable 2.91:\nArgument\nDescription\nItemHandle\nLong. The handle of the item.\nArguments for RibbonMenuItem (of Normal(0) type)\nTable 2.92:\nArgument\nDescription\nItemHandle\nLong. The handle of the button the menu is associated with.\nIndex\nLong. The index of the menu item clicked.\nSubIndex\nLong. The index of the submenu item clicked. 0 indicates the event is\ntriggered by the main menu.\nArguments for RibbonMenuItem (of Recent(2) type)\nTable 2.93:\nArgument\nDescription\nItemHandle\nLong. The handle of the button the menu is associated with.\nIndex\nLong. The index of the menu item clicked.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example is a user event for a tab button. In this example, the Ue_TabButtonClicked user\nevent must be defined with a long parameter for receiving the handle of TabButton where the\nmouse is clicking.\nRibbonTabButtonItem lr_TabButton\nlr_TabButton.Clicked = \"Ue_TabButtonClicked\"\n//Ue_TabButtonClicked user event must have a long parameter for receiving \n//the handle of TabButton where the mouse is clicking, as below\nevent type long ue_tabbuttonclicked(long itemhandle);\nRibbonTabButtonItem lr_TabButton\nrbb_1.GetTabButton(ItemHandle,lr_TabButton)\n//...\n"}
{"page": 202, "text": "Statements, Events, and Functions\nPage 202\nReturn 1\nend event\nThis example is a user event for a menu item in the ribbon menu. In this example, the\nUe_MenuClicked user event must be defined with three long parameters for receiving the\nhandle of the tab/large/small button and the index numbers of the menu and sub menu. Each\nmenu item can be bound with different events or the same event.\n//Ue_MenuClicked user event must have three long parameters for receiving the \n//handle of Tab/Large/Small Button and the index number of the menu and\n//sub menu. Each MenuItem can bind with different events or the same event.\n//In the following example, the same event is bound to get RibbonMenu:\nevent type long ue_menuclicked(long itemhandle, long index, long subindex);\nInteger li_Return\nRibbonMenu lr_Menu\nRibbonMenuItem lr_MenuItem\nli_Return = rbb_1.GetMenuByButtonHandle (ItemHandle, lr_Menu)\nIf li_Return = 1 Then\n If SubIndex = 0 Then\n  li_Return = lr_Menu.GetItem (Index, lr_MenuItem)\n  //...\n Else\n  li_Return = lr_Menu.GetItem (Index, SubIndex, lr_MenuItem)\n  //...\n End If\nElse\n Return 0\nEnd If\nReturn 1\nend event\nThis example is a user event for a master menu item in the application menu. In this example,\nthe Ue_MasterMenuClicked user event must be defined with three Long parameters for\nreceiving the handle of the application button and the index numbers of the master menu item\nand submenu item. Each menu item can be bound with different events or the same event.\n//Ue_MasterMenuClicked user event must have three Long parameters for receiving the\n//handle of Application Button and the index numbers of the master menu and\n//sub menu. Each MenuItem can bind with different events or the same event.\n//In the following example, the same event is bound to get RibbonApplicationMenu:\nevent type long ue_mastermenuclicked(long itemhandle, long index, long subindex);\nInteger li_Return\nRibbonApplicationMenu lr_Menu\nRibbonMenuItem lr_MenuItem\nli_Return = rbb_1.GetMenuByButtonHandle(ItemHandle, lr_Menu)\nIf li_Return = 1 Then\n If SubIndex = 0 Then\n  li_Return = lr_Menu.GetMasterItem(Index, lr_MenuItem)\n  //...\n Else\n  li_Return = lr_Menu.GetMasterItem(Index,SubIndex, lr_MenuItem)\n  //...\n End If\nElse\n Return 0\nEnd If\nReturn 1\n"}
{"page": 203, "text": "Statements, Events, and Functions\nPage 203\nend event\nThis example is a user event for the recent menu item in the application menu. In this\nexample, the Ue_RecentMenuClicked user event must be defined with two Long parameters\nfor receiving the handle of the application button and the index number of the recent menu\nitem. Each menu item can be bound with different events or the same event.\n//Ue_RecentMenuClicked user event must have two Long parameters for receiving the\n//handle of Application Button and the index number of Recent Menu.\n//Each MenuItem can bind with different events or the same event.\n//In the following example, the same event is bound to get RibbonApplicationMenu.\nevent type long ue_recentmenuclicked(long itemhandle, long index);\nInteger li_Return\nRibbonApplicationMenu lr_Menu\nRibbonMenuItem lr_MenuItem\nli_Return = rbb_1.GetMenuByButtonHandle(ItemHandle,lr_Menu)\nIf li_Return = 1 Then\n li_Return = lr_Menu.GetRecentItem(Index,lr_MenuItem)\n //...\nElse\n Return 0\nEnd If\nReturn 1\nend event\nSee also\nModified\nSelected\nSelectionChanged\n2.3.16.7 Syntax 7: For other controls\nDescription\nOccurs when the user clicks on the control.\nEvent ID\nTable 2.94:\nEvent ID\nObjects\npbm_bnclicked CheckBox, CommandButton, Graph, OLE, Picture, PictureHyperLink,\nPictureButton, RadioButton, StaticText, StaticHyperLink\npbm_lbuttondownDatePicker, MonthCalendar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n"}
{"page": 204, "text": "Statements, Events, and Functions\nPage 204\n0 -- Continue processing\nUsage\nThe Clicked event occurs when the user releases the mouse button.\nIf another control had focus, then a GetFocus and a Clicked event occur for the control the\nuser clicks.\nExamples\nThis code in an OLE control's Clicked event activates the object in the control:\ninteger li_success\nli_success = This.Activate(InPlace!)\nSee also\nGetFocus\nRButtonDown\n2.3.17 Close\nThe Close event has different arguments for different objects:\nTable 2.95:\nObject\nSee\nApplication\nSyntax 1\nOLE control\nSyntax 2\nWindow\nSyntax 3\n2.3.17.1 Syntax 1: For the application object\nDescription\nOccurs when the user closes the application.\nEvent ID\nTable 2.96:\nEvent ID\nObjects\nNone\nApplication\nArguments\nNone\nReturn Values\nNone (do not use a RETURN statement)\nUsage\nThe Close event occurs when the last window (for MDI applications the MDI frame) is\nclosed.\n"}
{"page": 205, "text": "Statements, Events, and Functions\nPage 205\nSee also\nOpen\nSystemError\n2.3.17.2 Syntax 2: For OLE controls\nDescription\nOccurs when the object in an OLE control has been activated offsite (the OLE server displays\nthe object in the server's window) and that server is closed.\nEvent ID\nTable 2.97:\nEvent ID\nObjects\npbm_omnclose\nOLE\nArguments\nNone\nReturn Values\nLong.\nReturn code: Ignored\nUsage\nIf the user closed the OLE server, the user's choices might cause the OLE object in the\ncontrol to be updated, triggering the Save or DataChange events.\nIf you want to retrieve the ObjectData blob value of an OLE control during the processing of\nthis event, you must post a user event back to the control or you will generate a runtime error.\nSee also\nDataChange\nSave\n2.3.17.3 Syntax 3: For windows\nDescription\nOccurs just before a window is removed from display.\nEvent ID\nTable 2.98:\nEvent ID\nObjects\npbm_close\nWindow\nArguments\n"}
{"page": 206, "text": "Statements, Events, and Functions\nPage 206\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen you call the Close function for the window, a CloseQuery event occurs before the\nClose event. In the CloseQuery event, you can specify a return code to prevent the Close\nevent from occurring and the window from closing.\nDo not trigger the Close event to close a window; call the Close function instead. Triggering\nthe event simply runs the script and does not close the window.\nSee also\nCloseQuery\nOpen\n2.3.18 CloseQuery\nDescription\nOccurs when a window is closed, before the Close event.\nEvent ID\nTable 2.99:\nEvent ID\nObjects\npbm_closequery\nWindow\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Allow the window to be closed\n1 -- Prevent the window from closing\nUsage\nIf the CloseQuery event returns a value of 1, the closing of the window is aborted and the\nClose event that usually follows CloseQuery does not occur.\nIf the user closes the window with the Close box (instead of using buttons whose scripts can\nevaluate the state of the data in the window), the CloseQuery event still occurs, allowing you\nto prompt the user about saving changes or to check whether data the user entered is valid.\n"}
{"page": 207, "text": "Statements, Events, and Functions\nPage 207\nObsolete techniques\nYou no longer need to set the ReturnValue property of the Message object. Use a\nRETURN statement instead.\nExamples\nThis statement in the CloseQuery event for a window asks if the user really wants to close the\nwindow and if the user answers no, prevents it from closing:\nIF MessageBox(\"Closing window\", \"Are you sure?\", &\n   Question!, YesNo!) = 2 THEN\n   RETURN 1\nELSE\n   RETURN 0\nEND IF\nThis script for the CloseQuery event tests to see if the DataWindow dw_1 has any pending\nchanges. If it has, it asks the user whether to update the data and close the window, close the\nwindow without updating, or leave the window open without updating:\ninteger li_rc\n \n// Accept the last data entered into the datawindow\ndw_1.AcceptText()\n \n//Check to see if any data has changed\nIF dw_1.DeletedCount()+dw_1.ModifiedCount() > 0 THEN\n   li_rc = MessageBox(\"Closing\", &\n   \"Update your changes?\", Question!, &\n   YesNoCancel!, 3)\n \n   //User chose to up data and close window\n   IF li_rc = 1 THEN\n      Window lw_window\n      lw_window = w_genapp_frame.GetActiveSheet()\n      lw_window.TriggerEvent(\"ue_update\")\n      RETURN 0\n \n   //User chose to close window without updating\n   ELSEIF li_rc = 2 THEN\n      RETURN 0\n \n   //User canceled\n   ELSE\n      RETURN 1\n   END IF\n \nELSE\n   // No changes to the data, window will just close\n   RETURN 0\nEND IF\n \nSee also\nClose\n2.3.19 CloseUp\nDescription\n"}
{"page": 208, "text": "Statements, Events, and Functions\nPage 208\nOccurs when the user has selected a date from the drop-down calendar and the calendar\ncloses.\nEvent ID\nTable 2.100:\nEvent ID\nObjects\npbm_dtpcloseup\nDatePicker\nArguments\nNone.\nReturn Values\nLong.\nReturn code: Ignored.\n2.3.20 ColumnClick\nDescription\nOccurs when the user clicks a column header.\nEvent ID\nTable 2.101:\nEvent ID\nObjects\npbm_lvncolumnclick\nListView\nArguments\nTable 2.102:\nArgument\nDescription\ncolumn\nThe index of the clicked column\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe ColumnClicked event is only available when the ListView displays in report view and\nthe ButtonHeader property is set to true.\nExamples\n"}
{"page": 209, "text": "Statements, Events, and Functions\nPage 209\nThis example uses the ColumnClicked event to set up a instance variable for the column\nargument, retrieve column alignment information, and display it to the user:\nstring ls_label, ls_align\ninteger li_width\nalignment la_align\n \nii_col = column\nThis.GetColumn(column, ls_label, la_align, &\n   li_width)\n \nCHOOSE CASE la_align\nCASE Right!\n   rb_right.Checked = TRUE\n   ls_align = \"Right!\"\n \nCASE Left!\n   rb_left.Checked = TRUE\n   ls_align = \"Left!\"\n \nCASE Center!\n   rb_center.Checked = TRUE\n   ls_align = \"Center!\"\n \nCASE Justify!\n   rb_just.Checked = TRUE\n   ls_align = \"Justify!\"\nEND CHOOSE\n \nsle_info.Text = String(column) &\n   + \" \" + ls_label &\n   + \" \" + ls_align &\n   + \" \" + String(li_width)\nSee also\nClicked\n2.3.21 ConnectMobiLink\nDescription\nOccurs when the MobiLink synchronization server connects to the consolidated database\nserver.\nEvent ID\nTable 2.103:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nNone\nReturn Values\nNone\n"}
{"page": 210, "text": "Statements, Events, and Functions\nPage 210\nUsage\nWhen an application forms or reforms a connection with the MobiLink synchronization\nserver, the MobiLink synchronization server temporarily allocates one connection with the\ndatabase server for the duration of that synchronization.\nUse the ConnectMobiLink event to add custom actions immediately before the remote\ndatabase connects to the MobiLink synchronization server. At this stage, dbmlsync has\ngenerated the upload stream.\nThe following synchronization object events correspond to events occurring on the\nsynchronization server (in the order displayed): BeginSync, ConnectMobiLink, BeginUpload,\nEndUpload, BeginDownload, EndDownload, DisconnectMobiLink, and EndSync.\nSee also\nBeginDownload\nBeginSync\nBeginUpload\nDisconnectMobiLink\n2.3.22 Constructor\nDescription\nOccurs when the control or object is created, just before the Open event for the window that\ncontains the control.\nEvent ID\nTable 2.104:\nEvent ID\nObjects\npbm_constructor\nAll objects\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nYou can write a script for a control's Constructor event to affect the control's properties\nbefore the window is displayed.\nWhen a window or user object opens, a Constructor event for each control in the window or\nuser object occurs. The order of controls in a window's Control property (which is an array)\ndetermines the order in which Constructor events are triggered. If one of the controls in the\n"}
{"page": 211, "text": "Statements, Events, and Functions\nPage 211\nwindow is a user object, the Constructor events of all the controls in the user object occur\nbefore the Constructor event for the next control in the window.\nWhen you call OpenUserObject to add a user object to a window dynamically, its\nConstructor event and the Constructor events for all of its controls occur.\nWhen you use the CREATE statement to instantiate a class (nonvisual) user object, its\nConstructor event occurs.\nWhen a class user object variable has an Autoinstantiate setting of true, its Constructor event\noccurs when the variable comes into scope. Therefore, the Constructor event occurs for:\n\u2022 Global variables when the system starts up\n\u2022 Shared variables when the object with the shared variables is loaded\n\u2022 Instance variables when the object with the instance variables is created\n\u2022 Local variables when the function that declares them begins executing\nExamples\nThis example retrieves data for the DataWindow dw_1 before its window is displayed:\ndw_1.SetTransObject(SQLCA)\ndw_1.Retrieve( )\nSee also\nDestructor\nOpen\n2.3.23 DataChange\nDescription\nOccurs when the server application notifies the control that data has changed.\nEvent ID\nTable 2.105:\nEvent ID\nObjects\npbm_omndatachange\nOLE\nArguments\nNone\nReturn Values\nLong.\nReturn code: Ignored\nSee also\n"}
{"page": 212, "text": "Statements, Events, and Functions\nPage 212\nPropertyRequestEdit\nPropertyChanged\nRename\nViewChange\n2.3.24 DateChanged\nDescription\nOccurs immediately after a date is selected.\nEvent ID\nTable 2.106:\nEvent ID\nObjects\npbm_mcdatechanged\nMonthCalendar\nArguments\nNone\nReturn Values\nLong.\nReturn code: Ignored\nUsage\nIf you code a call to a MessageBox function in this event, the message box does not display\nif the user selects a new date using the mouse. This is because the mouse click captures the\nmouse. Message boxes do not display when the mouse is captured because unexpected results\ncan occur. The message box does display if the user selects a new date using the arrow keys.\nSetSelectedDate and SetSelectedRange trigger a DateChanged event. You should not call\neither method in a DateChanged event, particularly using the Post method.\nSee also\nDateSelected\n2.3.25 DateSelected\nDescription\nOccurs when the user selects a date using the mouse.\nEvent ID\nTable 2.107:\nEvent ID\nObjects\npbm_mcdatesel\nMonthCalendar\n"}
{"page": 213, "text": "Statements, Events, and Functions\nPage 213\nArguments\nNone\nReturn Values\nLong.\nReturn code: Ignored\nUsage\nThis event is similar to DateChanged, but it occurs only when the user has selected a specific\ndate using the mouse. The DateChanged event occurs whenever the date changes -- when a\ndate is selected using the mouse, when the date is changed in a script, and when the user uses\nthe arrow key on the keyboard to select a different date or the arrow on the control to scroll to\na different month.\nExamples\nThe following script in the DateSelected event writes the date the user selected using the\nmouse to a single-line edit box:\ndate dt_selected\ninteger li_ret\nstring ls_date\nli_ret = GetSelectedDate( dt_selected)\nls_date = string(dt_selected)\nsle_2.text = ls_date\nSee also\nDateChanged\n2.3.26 DBError\nDescription\nTriggered when an error occurs during a transaction or an attempted transaction.\nEvent ID\nTable 2.108:\nEvent ID\nObjects\nNone\nTransaction objects\nArguments\nTable 2.109:\nArgument\nDescription\ncode\nLong by value. A database-specific error code.\nSee your DBMS documentation for information on the meaning of the\ncode.\n"}
{"page": 214, "text": "Statements, Events, and Functions\nPage 214\nArgument\nDescription\nWhen there is no error code from the DBMS, code contains one of these\nvalues:\n-1 -- Cannot connect to the database\n-2 -- Writing a blob to the database failed\n-4 -- All other errors (see Usage note for more detail)\nsqlerrortext\nString by value. A database-specific error message.\nsqlsyntax\nString by value. The full text of the SQL statement being sent to the\nDBMS when the error occurred.\nReturn Values\nLong, but this return code has no meaning to PowerBuilder.\nUsage\nError codes\nFor any database related error, the error code comes from the database driver. The error\ntext is also from the database drivers. The sqlsyntax argument shows what SQL syntax was\nexecuting when the error occurred.\nFor errors that are not related to database drivers, the code argument is set to -4. If the\nPowerBuilder VM cannot get the syntax for these types of errors, an empty string is passed to\nthe sqlsyntax argument. PowerBuilder cannot get the syntax for the following types of errors:\nTable 2.110:\n\u2022 \"Cursor is not open\"\n\u2022 \"Cursor is already open\"\n\u2022 \"Procedure has not been executed or has\nno results\"\n\u2022 \"Procedure has already been executed\"\n\u2022 \"Transaction not connected\"\n\u2022 \"Transaction already connected\"\n\u2022 \"Transaction not connected. Transaction\nPool limit exceeded\"\n\u2022 \"Database does not support FETCH\n(FIRST/LAST/PRIOR )\"\nThe PowerBuilder VM can get the SQL syntax for the following types of errors, and passes it\nto the Transaction object's DBError event for the following types of errors:\nTable 2.111:\n\u2022 \"Select returned more than one row\"\n\u2022 \"Blob variable for UPDATEBLOB cannot\nbe empty\"\n\u2022 \"Mismatch between prepared number\nof substitution variables and execute\nparameters\"\n\u2022 \"Open <cursor> or execute <procedure>\nmust reference DESCRIPTOR\"\n\u2022 \"Mismatch between retrieve columns and\nfetch columns\"\n\u2022 \"Database does not support WHERE\nCURRENT OF <cursor-name>\"\n"}
{"page": 215, "text": "Statements, Events, and Functions\nPage 215\n\u2022 \"Database statement must refer to blob\nvariable\"\n \nUse with embedded SQL\nBy default, whenever an error occurs in the Transaction object, the DBError event is called.\nThe error code and error message are passed to this event. You can add code to the DBError\nevent to handle these errors.\nUse with DataWindow/DataStore\nWhen using a Transaction object with a DataWindow, the DataWindow DBError event\nis triggered before the DBError event of the Transaction object. The return value for the\nDataWindow DBError event is used to indicate whether the Transaction object's DBError\nevent should be triggered in turn. When the return value of the DataWindow DBError event\nis 0 or 1, the Transaction object's DBError event is also triggered if it is defined. When the\nreturn value of the DataWindow DBError event is 2 or 3, the Transaction object's DBError\nevent is ignored.\nExamples\nThe following code in the DBError event displays the error message and the SQL statement\nsent to the DBMS when a transaction error occurs:\nMessagebox(\"Transaction error\",\"Error message: \"&\n   +sqlerrortext + \"~r~n Occurred for this statement:\"&\n   +sqlsyntax)\nSee also\nDBError in Section 8.12, \u201cDBError\u201d in DataWindow Reference\nSQLPreview\n2.3.27 DBNotification\nDescription\nTriggered by a PowerBuilder script or DataWindow database operation command if a\nPowerBuilder database driver receives a notification from the database server. This event is\nsupported only with the Oracle 10g (O10) native database interface.\nEvent ID\nTable 2.112:\nEvent ID\nObjects\npbm_dbnotification\nTransaction\nArguments\nTable 2.113:\nArgument\nDescription\nnotification\nA value of the DBNotification enumerated datatype. The database\ninterface determines the type of the notification received from the server,\n"}
{"page": 216, "text": "Statements, Events, and Functions\nPage 216\nArgument\nDescription\ntriggers the DBNotification event, and passes the notification type in this\nargument. Values are:\n\u2022 DBServerDown! = 1. The server has been shut down. This notification\ntype is used only by the O10 (Oracle 10g) database interface.\n\u2022 DBFailover! = 2. The database client is failing over.\n\u2022 DBDataTruncate! = 3. Data has been truncated.\nDBServerDown! is used for Oracle RAC database HA events.\nDBFailover! and DBDataTruncate! can be used with other databases for\nfailover and data truncation warnings.\ncommand\nA string that informs users which command was being executed when the\nnotification occurred.\ndbmessage\nA string that describes the reason why the event occurred.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n\u2022 0 -- Continue to process the database command. If the event does not exist or does not have\na script, the return value is 0 by default.\n\u2022 Any other value -- Ignored if the notification argument is DBFailover!. If the value of\nthe notification argument is DBServerDown! or DBDataTruncate!, the current command\nreturns with an error. SQLCA.SQLCode is set to -1 and SQLCA.SQLDBCode is set to the\nreturn value.\nUsage\nOracle Real Application Clusters (RAC) is a cluster database that uses a shared cache\narchitecture. In Oracle 10g Release 2, a High Availability (HA) client connected to an RAC\ndatabase can register a callback to indicate that it wants the server to notify it in case of a\ndatabase failure event that affects a connection made by the client. The DBNotification event\nis triggered when the client is notified that such an event has occurred.\nThe default transaction object, SQLCA, does not support this event. To use the event, create\na new standard class user object that inherits from the Transaction object and add code to the\nDBNotification event script. You can then use this Transaction object in your application, or\nsubstitute it for SQLCA on the Variable Types tab page in the Application Properties dialog\nbox.\nTo be notified when the server shuts down, your application must be connected to an Oracle\n10g RAC database using the O10 database interface and the HANotification database\nparameter must be set to 1. When the server shuts down, the O10 driver is notified. The\nDBNotification event is triggered if the application continues to attempt to access the server.\nThe value of the notification argument is set to DBServerDown!, the command string is set to\n"}
{"page": 217, "text": "Statements, Events, and Functions\nPage 217\nthe syntax of the current command, and the dbmessage string is populated with information\nabout the shutdown.\nIf your application does not execute any SQL statements on the current connection after the\nserver shuts down, the DBNotification event is not triggered until Disconnect is called.\nYou can code the return value of the DBNotification event to specify whether the application\nshould continue to execute the current command:\n\u2022 If the event returns 0, the current command continues executing until failover occurs and\ncompletes successfully (if failover is supported), then the application continues. If failover\nis not supported, the application will receive an error for the current command.\n\u2022 If the event returns any other value, the current command execution is stopped\nimmediately and the Transaction object property SQLCode is set to -1, SQLDBCode is set\nto the return value, SQLErrText is set to the value of the dbmessage string, and failover\ndoes not happen. After the event, only Disconnect can be called on the current transaction.\nInside the DBNotification event script, the current connection of the Transaction object\nis protected and database operations with the connection are not allowed. All database\ncommands will return as failed. However, the application can still access the database with\nanother Transaction object.\nIf the SvrFailover database parameter is set to Yes, the DBNotification event is triggered with\nthe notification argument set to DBFailover!\nThe event can be triggered several times during the failover, as when the failover begins\nand ends. You do not need to be connected to an Oracle RAC database or to set the\nHANotification database parameter to be notified when a failover occurs.\n2.3.28 Deactivate\nDescription\nOccurs when the window becomes inactive.\nEvent ID\nTable 2.114:\nEvent ID\nObjects\npbm_deactivate\nWindow\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\n"}
{"page": 218, "text": "Statements, Events, and Functions\nPage 218\nUsage\nWhen a window is closed, a Deactivate event occurs.\nSee also\nActivate\nShow\n2.3.29 DeleteAllItems\nDescription\nOccurs when all the items in the ListView are deleted.\nEvent ID\nTable 2.115:\nEvent ID\nObjects\npbm_lvndeleteallitems\nListView\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example uses the DeleteAllItems event to ensure that there is a default item in the\nListView control:\nThis.AddItem(\"Default item\", 1)\nSee also\nDeleteItem\nInsertItem\n2.3.30 DeleteItem\nThe DeleteItem event has different arguments for different objects:\nTable 2.116:\nObject\nSee\nListView control\nSyntax 1\nTreeView control\nSyntax 2\n"}
{"page": 219, "text": "Statements, Events, and Functions\nPage 219\n2.3.30.1 Syntax 1: For ListView controls\nDescription\nOccurs when an item is deleted.\nEvent ID\nTable 2.117:\nEvent ID\nObjects\npbm_lvndeleteitem\nListView\nArguments\nTable 2.118:\nArgument\nDescription\nindex\nInteger by value (the index of the deleted item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example for the DeleteItem event displays a message with the number of the deleted\nitem:\nMessageBox(\"Message\", \"Item \" + String(index) &\n   + \" deleted.\")\nSee also\nDeleteAllItems\nInsertItem\n2.3.30.2 Syntax 2: For TreeView controls\nDescription\nOccurs when an item is deleted.\nEvent ID\nTable 2.119:\nEvent ID\nObjects\npbm_tvndeleteitem\nTreeView\n"}
{"page": 220, "text": "Statements, Events, and Functions\nPage 220\nArguments\nTable 2.120:\nArgument\nDescription\nhandle\nLong by value (the handle of the deleted item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example displays the name of the deleted item in a message:\nTreeViewItem ll_tvi\n \nThis.GetItem(handle, ll_tvi)\nMessageBox(\"Message\", String(ll_tvi.Label) &\n   + \" has been deleted.\")\n2.3.31 Destructor\nDescription\nOccurs when the user object or control is destroyed, immediately after the Close event of a\nwindow.\nEvent ID\nTable 2.121:\nEvent ID\nObjects\npbm_destructor\nAll objects\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen a window is closed, each control's Destructor event destroys the control and removes\nit from memory. After they have been destroyed, you can no longer refer to those controls in\nother scripts. If you do, a runtime error occurs.\n"}
{"page": 221, "text": "Statements, Events, and Functions\nPage 221\nSee also\nConstructor\nClose\n2.3.32 DisconnectMobiLink\nDescription\nOccurs when the MobiLink synchronization server disconnects from the consolidated\ndatabase server.\nEvent ID\nTable 2.122:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nNone\nReturn Values\nNone\nUsage\nUse this event to add custom actions immediately after the remote database disconnects from\nthe MobiLink synchronization server.\nWhen an application forms or reforms a connection with the MobiLink synchronization\nserver, the MobiLink synchronization server temporarily allocates one connection with the\ndatabase server for the duration of that synchronization.\nThe following synchronization object events correspond to events occurring on the\nsynchronization server (in the order displayed): BeginSync, ConnectMobiLink, BeginUpload,\nEndUpload, BeginDownload, DisconnectMobiLink, and EndSync.\nSee also\nConnectMobiLink\nEndDownload\nEndSync\nEndUpload\n2.3.33 DisplayMessage\nDescription\nOccurs on display of an informational message from a MobiLink synchronization.\nEvent ID\n"}
{"page": 222, "text": "Statements, Events, and Functions\nPage 222\nTable 2.123:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.124:\nArgument\nDescription\ninfomsg\nRead-only string containing the text of an informational message returned\nfrom the synchronization server.\nReturn Values\nNone\nUsage\nThe following events are triggered when different types of messages are sent by the\nsynchronization server: DisplayMessage, ErrorMessage, FileMessage, and WarningMessage.\nSee also\nErrorMessage\nFileMessage\nWarningMessage\n2.3.34 DoubleClicked\nThe DoubleClicked event has different arguments for different objects:\nTable 2.125:\nObject\nSee\nListBox, PictureListBox, ListView, and Tab\ncontrols\nSyntax 1\nTreeView control\nSyntax 2\nWindow\nSyntax 3\nOther controls\nSyntax 4\nFor information about the DataWindow control's DoubleClicked event, see the Section 8.14,\n\u201cDoubleClicked\u201d in DataWindow Reference.\n2.3.34.1 Syntax 1: For ListBox, PictureListBox, ListView, and Tab controls\nDescription\nOccurs when the user double-clicks on the control.\n"}
{"page": 223, "text": "Statements, Events, and Functions\nPage 223\nEvent ID\nTable 2.126:\nEvent ID\nObjects\npbm_lbndblclk\nListBox, PictureListBox\npbm_lvndoubleclicked\nListView\npbm_tcndoubleclicked\nTab\nArguments\nTable 2.127:\nArgument\nDescription\nindex\nInteger by value. The index of the item the user double-clicked (for tabs,\nthe index of the tab page).\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nYou can use the ItemActivate event (with the OneClickActivate property set to false) instead\nof the DoubleClicked event for ListView controls.\nIn a ListBox or PictureListBox, double-clicking on an item also triggers a SelectionChanged\nevent.\nExamples\nThis example uses the DoubleClicked event to begin editing the double-clicked ListView\nitem:\nThis.EditLabels = TRUE\nSee also\nClicked\nColumnClick\nItemActivate\nItemChanged\nItemChanging\nRightClicked\nRightDoubleClicked\nSelectionChanged\n"}
{"page": 224, "text": "Statements, Events, and Functions\nPage 224\nSelectionChanging\n2.3.34.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user double-clicks on the control.\nEvent ID\nTable 2.128:\nEvent ID\nObjects\npbm_tvndoubleclicked\nTreeView\nArguments\nTable 2.129:\nArgument\nDescription\nhandle\nLong by value (the handle of the item the user double-clicked)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example turns on editing for the double-clicked TreeView item:\nTreeViewItem ltvi_current\nltvi_current = tv_1.FindItem(CurrentTreeItem!, 0)\nThis.EditLabel(ltvi_current)\nSee also\nClicked\nRightClicked\nRightDoubleClicked\nSelectionChanged\nSelectionChanging\n2.3.34.3 Syntax 3: For windows\nDescription\nOccurs when the user double-clicks in an unoccupied area of the window (any area with no\nvisible, enabled object).\n"}
{"page": 225, "text": "Statements, Events, and Functions\nPage 225\nEvent ID\nTable 2.130:\nEvent ID\nObjects\npbm_lbuttondblclk\nWindow\nArguments\nTable 2.131:\nArgument\nDescription\nflags\nUnsignedLong by value (the modifier keys and mouse buttons that are\npressed).\nValues are:\n\u2022 1 -- Left mouse button\n\u2022 2 -- Right mouse button\n\u2022 4 -- Shift key\n\u2022 8 -- Ctrl key\n\u2022 16 -- Middle mouse button\nIn the Clicked event, the left mouse button is being released, so 1 is not\nsummed in the value of flags.\nFor an explanation of flags, see Syntax 2 of MouseMove.\nxpos\nInteger by value (the distance of the pointer from the left edge of the\nwindow's workspace in pixels).\nypos\nInteger by value (the distance of the pointer from the top of the window's\nworkspace in pixels).\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe xpos and ypos arguments provide the same values the functions PointerX and PointerY\nreturn when you call them for the window.\nSee also\nClicked\n"}
{"page": 226, "text": "Statements, Events, and Functions\nPage 226\nMouseDown\nMouseMove\nMouseUp\nRButtonDown\n2.3.34.4 Syntax 4: For other controls\nDescription\nOccurs when the user double-clicks on the control.\nEvent ID\nTable 2.132:\nEvent ID\nObjects\npbm_bndoubleclicked\nGraph, OLE, Picture, PictureHyperLink,\nStaticText, StaticHyperLink\npbm_cbndblclk\nDropDownListBox,\nDropDownPictureListBox\npbm_lbuttondblclk\nDatePicker, MonthCalendar\npbm_prndoubleclicked\nHProgressBar, VProgressBar\npbm_rendoubleclicked\nRichTextEdit\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe DoubleClicked event for DropDownListBoxes is only active when the Always Show\nList property is on.\nSee also\nClicked\nRButtonDown\n2.3.35 DownloadingStart\nDescription\nOccurs before a download begins.\nEvent ID\n"}
{"page": 227, "text": "Statements, Events, and Functions\nPage 227\nTable 2.133:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.134:\nArgument\nDescription\nitemId\nThe ID used to specify the file.\nfileName\nThe full path name of the file to be downloaded and saved locally.\nReturn Values\nNone\nSee also\nAddressChanged\nCertificateError\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStateChanged\nNavigationStart\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.36 DownloadingStateChanged\nDescription\nOccurs when the download status or progress information has been updated.\nEvent ID\nTable 2.135:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\n"}
{"page": 228, "text": "Statements, Events, and Functions\nPage 228\nTable 2.136:\nArgument\nDescription\nitemId\nThe ID used to specify the file.\nspeed\nThe download speed estimated in bytes every second.\nreceived\nThe number of bytes received.\ntotal\nThe total number of bytes to be downloaded.\npercent\nA rough percentage of completion or -1 if the received total size is\nunknown.\nReturn Values\nNone\nUsage\nThe DownloadingStateChanged event will be triggered for uncertain times even if the\ndownload percentage has reached 100%.\nThe DownloadingStateChanged event will still be triggered after PauseDownload is called.\nSee also\nAddressChanged\nCertificateError\nDownloadingStart\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStart\nNavigationStateChanged\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.37 DragDrop\nThe DragDrop event has different arguments for different objects:\nTable 2.137:\nObject\nSee\nListBox, PictureListBox, ListView, and Tab\ncontrols\nSyntax 1\nTreeView control\nSyntax 2\n"}
{"page": 229, "text": "Statements, Events, and Functions\nPage 229\nObject\nSee\nWindows and other controls\nSyntax 3\nFor information about the DataWindow control's DragDrop event, see the Section 8.15,\n\u201cDragDrop\u201d in DataWindow Reference.\n2.3.37.1 Syntax 1: For ListBox, PictureListBox, ListView, and Tab controls\nDescription\nOccurs when the user drags an object onto the control and releases the mouse button to drop\nthe object.\nEvent ID\nTable 2.138:\nEvent ID\nObjects\npbm_lbndragdrop\nListBox, PictureListBox\npbm_lvndragdrop\nListView\npbm_tcndragdrop\nTab\nArguments\nTable 2.139:\nArgument\nDescription\nsource\nDragObject by value (a reference to the control being dragged)\nindex\nInteger by value (the index of the target ListView item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nObsolete functions\nYou no longer need to call the DraggedObject function in a drag event. Use the source\nargument instead.\nExamples\nFor ListView controls, see the example for BeginDrag.\nThis example inserts the dragged ListView item:\nThis.AddItem(ilvi_dragged_object)\n"}
{"page": 230, "text": "Statements, Events, and Functions\nPage 230\nThis.Arrange( )\nSee also\nBeginDrag\nBeginRightDrag\nDragEnter\nDragLeave\nDragWithin\n2.3.37.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user drags an object onto the control and releases the mouse button to drop\nthe object.\nEvent ID\nTable 2.140:\nEvent ID\nObjects\npbm_tvndragdrop\nTreeView\nArguments\nTable 2.141:\nArgument\nDescription\nsource\nDragObject by value (a reference to the control being dragged)\nhandle\nLong by value (the handle of the target TreeView item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nObsolete functions\nYou no longer need to call the DraggedObject function in a drag event. Use the source\nargument instead.\nExamples\nThis example inserts the dragged object as a child of the TreeView item it is dropped upon:\nTreeViewItem ltv_1\nThis.GetItem(handle, ltv_1)\n"}
{"page": 231, "text": "Statements, Events, and Functions\nPage 231\nThis.SetDropHighlight(handle)\nThis.InsertItemFirst(handle, itvi_drag_object)\nThis.ExpandItem(handle)\nThis.SetRedraw(TRUE)\nSee also\nDragEnter\nDragLeave\nDragWithin\n2.3.37.3 Syntax 3: For windows and other controls\nDescription\nOccurs when the user drags an object onto the control and releases the mouse button to drop\nthe object.\nEvent ID\nTable 2.142:\nEvent ID\nObjects\npbm_bndragdrop\nCheckBox, CommandButton, Graph, InkEdit, InkPicture, Picture,\nPictureHyperLink, PictureButton, RadioButton\npbm_cbndragdrop DropDownListBox, DropDownPictureListBox\npbm_dragdrop\nDatePicker, MonthCalendar\npbm_endragdrop\nSingleLineEdit, EditMask, MultiLineEdit, StaticText, StaticHyperLink\npbm_omndragdrop OLE\npbm_prndragdrop\nHProgressBar, VProgressBar\npbm_rendragdrop\nRichTextEdit\npbm_sbndragdrop\nHScrollBar, HTrackBar, VScrollBar, VTrackBar\npbm_uondragdrop UserObject\npbm_dragdrop\nWindow\nArguments\nTable 2.143:\nArgument\nDescription\nsource\nDragObject by value (a reference to the control being dragged)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\n"}
{"page": 232, "text": "Statements, Events, and Functions\nPage 232\nUsage\nWhen a control's DragAuto property is true, a drag operation begins when the user presses a\nmouse button.\nObsolete functions\nYou no longer need to call the DraggedObject function in a drag event. Use the source\nargument instead.\nExamples\nExample 1\nIn this example, the code in the DoubleClicked event for the DataWindow dw_orddetail starts\na drag operation:\nIF dw_orddetail.GetRow() > 0 THEN\n   dw_orddetail.Drag(Begin!)\n   This.DragIcon = \"dragitem.ico\"\nEND IF\nThen, in the DragDrop event for a trashcan Picture control, this code deletes the row the user\nclicked and dragged from the DataWindow control:\nlong ll_currow\ndwitemstatus ldwis_delrow\n \nll_currow = dw_orddetail.GetRow( )\n \n// Save the row's status flag for later use\nldwis_delrow = dw_orddetail.GetItemStatus &\n   (ll_currow, 0, Primary!)\n \n// Now, delete the current row from dw_orddetail\ndw_orddetail.DeleteRow(0)\nExample 2\nThis example for a trashcan Picture control's DragDrop event checks whether the source of\nthe drag operation is a DataWindow. If so, it asks the user whether to delete the current row\nin the source DataWindow:\nDataWindow ldw_Source\nLong ll_RowToDelete\nInteger li_Choice\n \nIF source.TypeOf() = DataWindow! THEN\n \n   ldw_Source = source\n   ll_RowToDelete = ldw_Source.GetRow()\n \n   IF ll_RowToDelete > 0 THEN\n      li_Choice = MessageBox(\"Delete\", &\n      \"Delete this row?\", Question!, YesNo!, 2)\n      IF li_Choice = 1 THEN\n      ldw_Source.DeleteRow(ll_RowToDelete)\n      END IF\n   ELSE\n      Beep(1)\n   END IF\n \nELSE\n"}
{"page": 233, "text": "Statements, Events, and Functions\nPage 233\n   Beep(1)\nEND IF\nSee also\nDragEnter\nDragLeave\nDragWithin\n2.3.38 DragEnter\nDescription\nOccurs when the user is dragging an object and enters the control.\nEvent ID\nTable 2.144:\nEvent ID\nObjects\npbm_bndragenter CheckBox, CommandButton, Graph, InkEdit, InkPicture, Picture,\nPictureHyperlink, PictureButton, RadioButton\npbm_cbndragenterDropDownListBox, DropDownPictureListBox\npbm_dragenter\nDatePicker, MonthCalendar\npbm_dwndragenterDataWindow\npbm_endragenter SingleLineEdit, EditMask, MultiLineEdit, StaticText, StaticHyperLink\npbm_lbndragenterListBox, PictureListBox\npbm_lvndragenterListView\npbm_omndragenterOLE\npbm_prndragenterHProgressBar, VProgressBar\npbm_rendragenterRichTextEdit\npbm_sbndragenterHScrollBar, HTrackBar, VScrollBar, VTrackBar\npbm_tcndragenter Tab\npbm_tvndragenterTreeView\npbm_uondragenterUserObject\npbm_dragenter\nWindow\nArguments\nTable 2.145:\nArgument\nDescription\nsource\nDragObject by value (a reference to the control being dragged)\nReturn Values\n"}
{"page": 234, "text": "Statements, Events, and Functions\nPage 234\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nObsolete functions\nYou no longer need to call the DraggedObject function in a drag event. Use the source\nargument instead.\nExamples\nThis example for a Picture control's DragDrop event adds a border to itself when another\nPicture control (the source) is dragged within its boundaries:\nIF source.TypeOf() = Picture! THEN\n   This.Border = TRUE\nEND IF\nSee also\nDragDrop\nDragLeave\nDragWithin\n2.3.39 DragLeave\nDescription\nOccurs when the user is dragging an object and leaves the control.\nEvent ID\nTable 2.146:\nEvent ID\nObjects\npbm_bndragleave CheckBox, CommandButton, Graph, InkEdit, InkPicture, Picture,\nPictureHyperLink, PictureButton, RadioButton\npbm_cbndragleaveDropDownListBox, DropDownPictureListBox\npbm_dragleave\nDatePicker, MonthCalendar\npbm_dwndragleaveDataWindow\npbm_endragleave SingleLineEdit, EditMask, MultiLineEdit, StaticText, StaticHyperLink\npbm_lbndragleaveListBox, PictureListBox\npbm_lvndragleaveListView\npbm_omndragleaveOLE\npbm_prndragleaveHProgressBar, VProgressBar\npbm_rendragleaveRichTextEdit\npbm_sbndragleaveHScrollBar, HTrackBar, VScrollBar, VTrackBar\n"}
{"page": 235, "text": "Statements, Events, and Functions\nPage 235\nEvent ID\nObjects\npbm_tcndragleaveTab\npbm_tvndragleaveTreeView\npbm_uondragleaveUserObject\npbm_dragleave\nWindow\nArguments\nTable 2.147:\nArgument\nDescription\nsource\nDragObject by value (a reference to the control being dragged)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nObsolete functions\nYou no longer need to call the DraggedObject function in a drag event. Use the source\nargument instead.\nExamples\nThis example checks the name of the control being dragged, and if it is, cb_1 it cancels the\ndrag operation:\nIF ClassName(source) = \"cb_1\" THEN\n   cb_1.Drag(Cancel!)\nEND If\nThis example for a Picture control's DragDrop event removes its own border when another\nPicture control (the source) is dragged beyond its boundaries:\nIF source.TypeOf() = Picture! THEN\n   This.Border = TRUE\nEND IF\nSee also\nDragDrop\nDragEnter\nDragWithin\n2.3.40 DragWithin\nThe DragWithin event has different arguments for different objects:\n"}
{"page": 236, "text": "Statements, Events, and Functions\nPage 236\nTable 2.148:\nObject\nSee\nListBox, PictureListBox, ListView, and Tab\ncontrols\nSyntax 1\nTreeView control\nSyntax 2\nWindows and other controls\nSyntax 3\nFor information about the DataWindow control's DragWithin event, see Section 8.18,\n\u201cDragWithin\u201d in DataWindow Reference.\n2.3.40.1 Syntax 1: For ListBox, PictureListBox, ListView, and Tab controls\nDescription\nOccurs when the user is dragging an object within the control.\nEvent ID\nTable 2.149:\nEvent ID\nObjects\npbm_lbndragwithin\nListBox, PictureListBox\npbm_lvndragwithin\nListView\npbm_tcndragwithin\nTab\nArguments\nTable 2.150:\nArgument\nDescription\nsource\nDragObject by value (a reference to the control being dragged)\nindex\nInteger by value (a reference to the ListView item under the pointer in the\nListView control)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nObsolete functions\nYou no longer need to call the DraggedObject function in a drag event. Use the source\nargument instead.\n"}
{"page": 237, "text": "Statements, Events, and Functions\nPage 237\nExamples\nThis example changes the background color of the ListView when a DragObject enters its\nborder:\nThis.BackColor = RGB(128, 0, 128)\nSee also\nDragDrop\nDragEnter\nDragLeave\n2.3.40.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user is dragging an object within the control.\nEvent ID\nTable 2.151:\nEvent ID\nObjects\npbm_tvndragwithin\nTreeView\nArguments\nTable 2.152:\nArgument\nDescription\nsource\nDragObject by value (a reference to the control being dragged)\nhandle\nLong (a reference to the ListView item under the pointer in the TreeView\ncontrol)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nObsolete functions\nYou no longer need to call the DraggedObject function in a drag event. Use the source\nargument instead.\nExamples\nThis example changes the background color of the TreeView when a DragObject enters its\nborder:\n"}
{"page": 238, "text": "Statements, Events, and Functions\nPage 238\nThis.BackColor = RGB(128, 0, 128)\nSee also\nDragDrop\nDragEnter\nDragLeave\n2.3.40.3 Syntax 3: For windows and other controls\nDescription\nOccurs when the user is dragging an object within the control.\nEvent ID\nTable 2.153:\nEvent ID\nObjects\npbm_bndragwithinCheckBox, CommandButton, Graph, InkEdit, InkPicture, Picture,\nPictureHyperLink, PictureButton, RadioButton\npbm_cbndragwithinDropDownListBox, DropDownPictureListBox\npbm_dragwithin\nDatePicker, MonthCalendar\npbm_endragwithinSingleLineEdit, EditMask, MultiLineEdit, StaticText, StaticHyperLink\npbm_omndragwithin\nOLE\npbm_prndragwithinHProgressBar, VProgressBar\npbm_rendragwithinRichTextEdit\npbm_sbndragwithinHScrollBar, HTrackBar, VScrollBar, VTrackBar\npbm_uondragwithinUserObject\npbm_dragwithin\nWindow\nArguments\nTable 2.154:\nArgument\nDescription\nsource\nDragObject by value (a reference to the control being dragged)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nObsolete functions\n"}
{"page": 239, "text": "Statements, Events, and Functions\nPage 239\nYou no longer need to call the DraggedObject function in a drag event. Use the source\nargument instead.\nSee also\nDragDrop\nDragEnter\nDragLeave\n2.3.41 DropDown\nDescription\nOccurs when the user has clicked the drop-down arrow in a DatePicker control just before the\ndrop-down calendar displays.\nEvent ID\nTable 2.155:\nEvent ID\nObjects\npbm_dtpdropdown\nDatePicker\nArguments\nNone.\nReturn Values\nLong.\nReturn code: Ignored.\n2.3.42 EndDownload\nDescription\nOccurs at the end of a download procedure\nEvent ID\nTable 2.156:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.157:\nArgument\nDescription\nupsertrows\nLong identifying the inserted and updated rows.\n"}
{"page": 240, "text": "Statements, Events, and Functions\nPage 240\nArgument\nDescription\ndeleterows\nLong identifying the deleted rows.\nReturn Values\nNone\nUsage\nUse this event to add custom actions at the end of the download stage of synchronization.\nThe BeginDownload event marks the beginning of the download transaction. Applicable\ndeletes are performed for all remote tables, and then rows are added as applicable for all\nremote tables in the download cursor. After EndDownload, download changes are committed.\nSee also\nBeginDownload\nConnectMobiLink\nEndSync\nEndUpload\n2.3.43 EndLabelEdit\nThe EndLabelEdit event has different arguments for different objects:\nTable 2.158:\nObject\nSee\nListView control\nSyntax 1\nTreeView control\nSyntax 2\n2.3.43.1 Syntax 1: For ListView controls\nDescription\nOccurs when the user finishes editing an item's label.\nEvent ID\nTable 2.159:\nEvent ID\nObjects\npbm_lvnendlabeledit\nListView\nArguments\nTable 2.160:\nArgument\nDescription\nindex\nInteger. The index of the ListView item for which you have edited the\nlabel.\n"}
{"page": 241, "text": "Statements, Events, and Functions\nPage 241\nArgument\nDescription\nnewlabel\nThe string that represents the new label for the ListView item.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Allow the new text to become the item's label.\n1 -- Prevent the new text from becoming the item's label.\nUsage\nThe user triggers this event by pressing Enter or Tab after editing the text.\nExamples\nThis example displays the old label and the new label in a SingleLineEdit:\nListViewItem lvi\nsle_info.text = \"Finished editing \" &\n   + String(lvi.label) &\n   +\". Item changed to \"+ String(newlabel)\nSee also\nBeginLabelEdit\n2.3.43.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user finishes editing an item's label.\nEvent ID\nTable 2.161:\nEvent ID\nObjects\npbm_tvnendlabeledit\nTreeView\nArguments\nTable 2.162:\nArgument\nDescription\nhandle\nInteger. The index of the TreeView item for which you have edited the\nlabel.\nnewtext\nThe string that represents the new label for the TreeView item.\nReturn Values\n"}
{"page": 242, "text": "Statements, Events, and Functions\nPage 242\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Allow the new text to become the item's label\n1 -- Prevent the new text from becoming the item's label\nUsage\nThe user triggers this event by pressing Enter or Tab after editing the text.\nExamples\nThis example displays the old label and the new label in a SingleLineEdit:\nTreeViewItem tvi\n \nThis.GetItem(handle, tvi)\nsle_info.Text = \"Finished editing \" &\n   + String(tvi.Label) &\n   + \". Item changed to \" &\n   + String(newtext)\nSee also\nBeginLabelEdit\n2.3.44 EndLogScan\nDescription\nOccurs after the scan of the transaction log completes for upload.\nEvent ID\nTable 2.163:\nEvent ID\nObjects\nNone\nMLSync\nArguments\nNone\nReturn Values\nNone\nUsage\nUse this event to add custom actions immediately after the transaction log is scanned for\nupload.\nThe following events are triggered while the upload stream is prepared, but before\nsynchronization begins: BeginLogScan, ProgressInfo, and EndLogScan.\nSee also\nBeginLogScan\n"}
{"page": 243, "text": "Statements, Events, and Functions\nPage 243\nProgressIndex\n2.3.45 EndSync\nDescription\nOccurs at the end of synchronization.\nEvent ID\nTable 2.164:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.165:\nArgument\nDescription\nrc\nLong datatype value that indicates whether a synchronization error\noccurred.\nrestart\nBoolean value passed by reference that, if true, causes dbmlsync to restart\nthe synchronization.\nReturn Values\nNone\nUsage\nUse this event to add custom actions when a synchronization is complete.\nAn rc value of 0 indicates a successful synchronization. When the rc value is anything other\nthan 0, an error has occurred. If the restart value changes to true, dbmlsync restarts the\nsynchronization.\nSee also\nBeginSync\nDisconnectMobiLink\nEndDownload\nEndUpload\n2.3.46 EndUpload\nDescription\nOccurs after transmission of the upload to the synchronization server.\nEvent ID\n"}
{"page": 244, "text": "Statements, Events, and Functions\nPage 244\nTable 2.166:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nNone\nReturn Values\nNone\nUsage\nUse this event to add custom actions immediately after transmission of the upload stream\nfrom dbmlsync to the MobiLink synchronization server.\nThe BeginUpload event marks the beginning of the upload transaction. Applicable inserts\nand updates to the consolidated database are performed for all remote tables, then rows are\ndeleted as applicable for all remote tables. After EndUpload, upload changes are committed.\nSee also\nBeginUpload\nDisconnectMobiLink\nEndDownload\nEndSync\n2.3.47 Error\n2.3.47.1 Syntax 1: for Connection, DataWindow, DataStore, OLE, OLEObject, OLETxnObject\nDescription\nOccurs when an error is found in a data or property expression for an external object or a\nDataWindow object.\nImproved error-handling capability in PowerBuilder\nThe Error event is maintained for backward compatibility. If you do not script the\nError event or change its action argument, information from this event is passed to\nRuntimeError objects, such as DWRuntimeError or OLERuntimeError. You can\nhandle these errors in a try-catch block.\nEvent ID\nTable 2.167:\nEvent ID\nObjects\nNone\nConnection, DataWindow, DataStore, OLE,\nOLEObject, OLETxnObject\n"}
{"page": 245, "text": "Statements, Events, and Functions\nPage 245\nArguments\nTable 2.168:\nArgument\nDescription\nerrornumber\nUnsigned integer by value (PowerBuilder's error number)\nerrortext\nString, read-only (PowerBuilder's error message)\nerrorwindowmenuString, read-only (the name of the window or menu that is the parent of\nthe object whose script caused the error)\nerrorobject\nString, read-only (the name of the object whose script caused the error)\nerrorscript\nString, read-only (the full text of the script in which the error occurred)\nerrorline\nUnsigned integer by value (the line in the script where the error occurred)\naction\nExceptionAction by reference.\nA value you specify to control the application's course of action as a\nresult of the error. Values are:\n\u2022 ExceptionFail! -- fail as if this script were not implemented. The\nerror condition triggers any active event handlers, or if none, the\nSystemError event.\n\u2022 ExceptionIgnore! -- ignore this error and return as if no error occurred\n(use this option with caution because the conditions that caused the\nerror can cause another error).\n\u2022 ExceptionRetry! -- execute the function or evaluate the expression\nagain in case the OLE server was not ready. This option is not valid for\nDataWindows.\n\u2022 ExceptionSubstituteReturnValue! -- use the value specified in the\nreturnvalue argument instead of the value returned by the OLE server\nor DataWindow, and cancel the error condition.\nreturnvalue\nAny by reference (a value whose datatype matches the expected value\nthat the OLE server or DataWindow would have returned).\nThis value is used when the value of action is\nExceptionSubstituteReturnValue!.\nReturn Values\nNone. Do not use a RETURN statement.\nUsage\nDataWindow and OLE objects are dynamic. Expressions that use dot notation to refer to data\nand properties of these objects might be valid under some runtime conditions but not others.\nThe Error event allows you to respond to this dynamic situation with error recovery logic.\nThe Error event also allows you to respond to communications errors in the client component\nof a distributed application. In the Error event for a custom connection object, you can tell\n"}
{"page": 246, "text": "Statements, Events, and Functions\nPage 246\nPowerBuilder what action to take when an error occurs during communications between the\nclient and the server.\nThe Error event gives you an opportunity to substitute a default value when the error is\nnot critical to your application. Its arguments also provide information that is helpful in\ndebugging. For example, the arguments can help you debug DataWindow data expressions\nthat cannot be checked by the compiler -- such expressions can only be evaluated at runtime.\nWhen to substitute a return value\nThe ExceptionSubstituteReturnValue! action allows you to substitute a return value\nwhen the last element of an expression causes an error. Do not use it to substitute\na return value when an element in the middle of an expression causes an error.\nThe substituted return value does not match the datatype of the unresolved object\nreference and causes a system error.\nThe ExceptionSubstituteReturnValue! action can be useful for handling errors in data\nexpressions.\nFor DataWindows, when an error occurs while evaluating a data or property expression, error\nprocessing occurs like this:\n1. The Error event occurs.\n2. If the Error event has no script or its action argument is set to ExceptionFail!, any active\nexception handler for a DWRuntimeError or its RuntimeError ancestor is invoked.\n3. If no exception handler exists, or if the existing exception handlers do not handle the\nexception, the SystemError event is triggered.\n4. If the SystemError event has no script, an application error occurs and the application is\nterminated.\nThe error processing in the client component of a distributed application is the same as for\nDataWindows.\nFor information about error processing in OLE controls, see the ExternalException event. For\ninformation about data and property expressions for DataWindow objects, see Section 5.3,\n\u201cPowerBuilder: DataWindow property expressions\u201d in DataWindow Reference.\nFor information about handling communications errors in a multitier application, see\nChapter 6, Developing Distributed Applications in Application Techniques.\nExamples\nThis example displays information about the error that occurred and allows the script to\ncontinue:\nMessageBox(\"Error Number \" + string(errornumber)&\n   + \" Occurred\", \"Errortext: \" + String(errortext))\naction = ExceptionIgnore! \nSee also\nDBError in Section 8.12, \u201cDBError\u201d in DataWindow Reference\n"}
{"page": 247, "text": "Statements, Events, and Functions\nPage 247\nExternalException\nSystemError\n2.3.47.2 Syntax 2: for CompressorObject objects\nDescription\nOccurs when an error is found in the file compression operation.\nEvent ID\nTable 2.169:\nEvent ID\nObjects\nNone\nCompressorObject\nArguments\nTable 2.170:\nArgument\nDescription\nErrorNumber\nUnsigned integer by value (PowerBuilder's error number)\n1 -- Success\n-1 -- A general error occurred. If the CompressorObject object is used in\nasynchronous mode, this function will return the general error.\n-2 -- The password entered is illegal.\n-3 -- The operation is not supported for the source file format.\n-4 -- The task thread is aborted.\n-5 -- A task thread is currently running.\n-6 -- The folder to be compressed does not exist.\n-7 -- The folder to be compressed is empty.\n-8 -- The compression format does not support multi-file compression.\n-9 -- Failed to read file from the folder for compression.\n-10 -- The target path does not exist.\n-11 -- More than one source file has the same file name.\n-12 -- Invalid compressed file name or no compressed file name is\nspecified in the \"dest\" argument.\n-13 -- Failed to compress.\nErrorText\nString, read-only (PowerBuilder's error message)\nReturn Values\nNone\n"}
{"page": 248, "text": "Statements, Events, and Functions\nPage 248\nSee also\nFinished\nProcessingFile\nSizeCompleted\nStart\n2.3.47.3 Syntax 3: for ExtractorObject objects\nDescription\nOccurs when an error is found in the archive extraction operation.\nEvent ID\nTable 2.171:\nEvent ID\nObjects\nNone\nExtractorObject\nArguments\nTable 2.172:\nArgument\nDescription\nErrorNumber\nUnsigned integer by value (PowerBuilder's error number)\n1 -- Success\n-1 -- A general error occurred. If the ExtractorObject object is used in\nasynchronous mode, this function will return the general error.\n-2 -- The password entered is illegal.\n-3 -- The operation is not supported for the source file format.\n-4 -- The task thread is aborted.\n-5 -- A task thread is currently running.\n-6 -- No password is entered. You must enter the password.\n-7 -- The password is incorrect.\n-8 -- Failed to get new memory when saving the decompressed file.\n-9 -- Failed to read the compressed file.\n-10 -- Unrecognized format or the encrypted file name option is used\nwhen compressing the document.\n-11 -- Access denied when extracting the archive.\n-12 -- The compressed file does not exist.\n-13 -- The directory where the decompressed file will be saved does not\nexist.\n"}
{"page": 249, "text": "Statements, Events, and Functions\nPage 249\nArgument\nDescription\n-14 -- Failed to extract the compressed file.\nErrorText\nString, read-only (PowerBuilder's error message)\nReturn Values\nNone\nSee also\nFinished\nProcessingFile\nSizeCompleted\nStart\n2.3.48 ErrorMessage\nDescription\nOccurs on display of an error message from a MobiLink synchronization.\nEvent ID\nTable 2.173:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.174:\nArgument\nDescription\nerrmsg\nRead-only string containing the text of the error message returned from\nthe synchronization server.\nReturn Values\nNone\nUsage\nUse this event to receive error information logged by dbmlsync.\nThe following events can be triggered when different types of messages are sent by the\nsynchronization server: DisplayMessage, ErrorMessage, FileMessage, and WarningMessage.\nSee also\nDisplayMessage\nFileMessage\n"}
{"page": 250, "text": "Statements, Events, and Functions\nPage 250\nWarningMessage\n2.3.49 EvaluateJavascriptFinished\nDescription\nOccurs after the EvaluateJavascriptAsync function is executed.\nEvent ID\nTable 2.175:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.176:\nArgument\nDescription\nresult\nThe result of script execution. The execution result is represented in\nJSON format. The supported JavaScript data types are bool, int, double,\nstring, date, array. When the above types are mapped to the PowerBuilder\ndata types, they are boolean, integer, double, string, datetime, array.\nerror\nThe error information if an error occurs during execution or an empty\nstring if there is no error.\nReturn Values\nNone\nExamples\nThe following example shows that the EvaluateJavascriptFinished event parses the JavaScript\nexecution result via the JSONParser object:\n//Event EvaluateJavascriptFinished\nJsonParser lnv_JsonParser\nLong ll_RootObject\nString ls_Type\nIf Len(Result) > 0 Then\n lnv_JsonParser = Create JsonParser\n lnv_JsonParser.LoadString(result)\n ll_RootObject = lnv_JsonParser.GetRootItem()\n ls_Type = lnv_JsonParser.GetItemString(ll_RootObject, \"type\")\n If IsValid(lnv_JsonParser) Then Destroy (lnv_JsonParser)\nEnd If\nSee also\nAddressChanged\nCertificateError\nDownloadingStart\n"}
{"page": 251, "text": "Statements, Events, and Functions\nPage 251\nDownloadingStateChanged\nNavigationError\nNavigationProgressIndex\nNavigationStart\nNavigationStateChanged\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.50 ExternalException\nDescription\nOccurs when an OLE automation command caused an exception on the OLE server.\nImproved error-handling capability in PowerBuilder\nThe ExternalException event is maintained for backward compatibility. If you do not\nscript this event or change its action argument, information from this event is passed\nto RuntimeError objects, such as OLERuntimeError. You can handle these errors in a\ntry-catch block.\nEvent ID\nTable 2.177:\nEvent ID\nObjects\nNone\nOLE, OLEObject, OLETxnObject\nArguments\nTable 2.178:\nArgument\nDescription\nresultcode\nUnsignedLong by value (a PowerBuilder number identifying the\nexception that occurred on the server).\nexceptioncode\nUnsignedLong by value (a number identifying the error that occurred on\nthe server. For the meaning of the code, see the server documentation).\nsource\nString by value (the name of the server, which the server provides).\ndescription\nString by value (a description of the exception, which the server\nprovides).\nhelpfile\nString by value (the name of a Help file containing information about the\nexception, which the server provides).\nhelpcontext\nUnsignedLong by value (the context ID of a Help topic in helpfile\ncontaining information about the exception, which the server provides).\n"}
{"page": 252, "text": "Statements, Events, and Functions\nPage 252\nArgument\nDescription\naction\nExceptionAction by reference.\nA value you specify to control the application's course of action as a\nresult of the error. Values are:\n\u2022 ExceptionFail! -- fail as if this script were not implemented. The error\ncondition triggers the SystemError event.\n\u2022 ExceptionIgnore! -- ignore this error and return as if no error occurred\n(use this option with caution because the conditions that caused the\nerror can cause another error).\n\u2022 ExceptionRetry! -- execute the function or evaluate the expression\nagain in case the OLE server was not ready.\n\u2022 ExceptionSubstituteReturnValue! -- use the value specified in the\nreturnvalue argument instead of the value returned by the OLE server\nor DataWindow and cancel the error condition.\nreturnvalue\nAny by reference.\nA value whose datatype matches the expected value that the OLE server\nwould have returned. This value is used when the value of action is\nExceptionSubstituteReturnValue!.\nReturn Values\nNone. (Do not use a RETURN statement.)\nUsage\nOLE objects are dynamic. Expressions that refer to data and properties of these objects might\nbe valid under some runtime conditions but not others. If the expression causes an exception\non the server, PowerBuilder triggers the ExternalException event. The ExternalException\nevent gives you information about the error that occurred on the OLE server.\nThe server defines what it considers exceptions. Some errors, such as mismatched datatypes,\ngenerally do not cause an exception but do trigger the Error event. In some cases you might\nnot consider the cause of the exception to be an error. To determine the reason for the\nexception, see the documentation for the server.\nWhen an exception occurs because of a call to an OLE server, error handling occurs like this:\n1. The ExternalException event occurs.\n2. If the ExternalException event has no script or its action argument is set to ExceptionFail!,\nthe Error event occurs.\n3. If the Error event has no script or its action argument is set to ExceptionFail!, any active\nexception handler for an OLERuntimeError or its RuntimeError ancestor is invoked.\n4. If no exception handler exists, or if the existing exception handlers do not handle the\nexception, the SystemError event is triggered.\n"}
{"page": 253, "text": "Statements, Events, and Functions\nPage 253\n5. If the SystemError event has no script, an application error occurs and the application is\nterminated.\nExamples\nSuppose your window has two instance variables: one for specifying the exception action,\nand another of type Any for storing a potential substitute value. Before accessing the OLE\nproperty, a script sets the instance variables to appropriate values:\nie_action = ExceptionSubstituteReturnValue!\nia_substitute = 0\nli_currentsetting = ole_1.Object.Value\nIf the command fails, a script for the ExternalException event displays the Help topic named\nby the OLE server, if any. It substitutes the return value you prepared and returns control to\nthe calling script. The assignment of the substitute value to li_currentsetting works correctly\nbecause their datatypes are compatible:\nstring ls_context\n \n// Command line switch for WinHelp numeric context ID\nls_context = \"-n \" + String(helpcontext)\nIf Len(HelpFile) > 0 THEN\n   Run(\"winhelp.exe \" + ls_context + \" \" + helpfile)\nEND IF\n \naction = ie_action \nreturnvalue = ia_substitute \nBecause the event script must serve for every automation command for the control, you need\nto set the instance variables to appropriate values before each automation command.\nSee also\nError\n2.3.51 FileExists\nDescription\nOccurs when a file is saved in the RichTextEdit control and the file already exists.\nEvent ID\nTable 2.179:\nEvent ID\nObjects\npbm_renfileexists\nRichTextEdit\nArguments\nTable 2.180:\nArgument\nDescription\nfilename\nThe name of the file\n"}
{"page": 254, "text": "Statements, Events, and Functions\nPage 254\nReturn Values\nLong.\nReturn code choices (specified in a RETURN statement):\n0 -- Continue processing\n1 -- Saving of document is canceled\nUsage\nThe SaveDocument function can trigger the FileExists event.\nExamples\nThis script for FileExists checks a flag to see if the user is performing a save (which will\nautomatically overwrite the opened file) or wants to rename the file using Save As. For the\nSave As case, the script asks the user to confirm overwriting the file:\ninteger li_answer\n \n// If user asked to Save to same file,\n// do not prompt for overwriting\nIF ib_saveas = FALSE THEN RETURN 0\n \nli_answer = MessageBox(\"FileExists\", &\n   filename + \" already exists. Overwrite?\", &\n      Exclamation!, YesNo!)\n   MessageBox(\"Filename arg\", filename)\n \n// Returning a non-zero value cancels save\nIF li_answer = 2 THEN RETURN 1\n2.3.52 FileMessage\nDescription\nOccurs on display of a detailed information message from a MobiLink synchronization.\nEvent ID\nTable 2.181:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.182:\nArgument\nDescription\nfilemsg\nRead-only string containing the text of the message returned from the\nsynchronization server.\nReturn Values\nNone\n"}
{"page": 255, "text": "Statements, Events, and Functions\nPage 255\nUsage\nUse this event to receive information logged by dbmlsync.\nThe following events can be triggered when different types of messages are sent by the\nsynchronization server: DisplayMessage, ErrorMessage, FileMessage, and WarningMessage.\nSee also\nDisplayMessage\nErrorMessage\nWarningMessage\n2.3.53 Finished\nDescription\nOccurs when the file compression or extraction is completed.\nEvent ID\nTable 2.183:\nEvent ID\nObjects\nNone\nCompressorObject and ExtractorObject\nArguments\nTable 2.184:\nArgument\nDescription\nResult\nA boolean value specifying the file compression or decompression result:\nTrue -- Success\nFalse -- Failed\nReturn Values\nNone\nSee also\nError\nProcessingFile\nSizeCompleted\nStart\n2.3.54 Gesture\nDescription\n"}
{"page": 256, "text": "Statements, Events, and Functions\nPage 256\nOccurs when an application gesture recognized by the control is completed. A gesture is a\nstroke or series of strokes that is recognized by the application as indicating an action. This\nevent can only be triggered on a Tablet PC.\nEvent ID\nTable 2.185:\nEvent ID\nObjects\npbm_inkegesture\nInkEdit\npbm_inkpgesture\nInkPicture\nArguments\nTable 2.186:\nArgument\nDescription\ngest\nInteger identifying the gesture recognized. See the tables in the Usage\nsection for argument values.\nReturn Values\nBoolean.\nReturn false to accept the gesture and true to ignore it.\nUsage\nThe Gesture event is triggered only on a Tablet PC. On a Tablet PC, the InkEdit control\nrecognizes the following gestures that represent keystrokes that are frequently used in edit\ncontrols. To ensure that the gestures are recognized, users should draw straight lines and\nsharp right angles without removing the stylus from the control. InkEdit controls on other\ncomputers behave as MultiLineEdit controls and cannot accept ink input from a mouse.\nTable 2.187:\nGesture\nGesture name\nArgument value\nKeystroke\nLeft\n0\nBackspace\nRight\n1\nSpace\nUpRightLong\n2\nTab\nDownLeftLong\n3\nEnter\nUpRight\n4\nTab\n"}
{"page": 257, "text": "Statements, Events, and Functions\nPage 257\nGesture\nGesture name\nArgument value\nKeystroke\nDownLeft\n5\nEnter\nOn a Tablet PC, the InkPicture control recognizes the following gestures that are equivalent\nto mouse clicks:\nTable 2.188:\nGesture name\nArgument value\nMouse action\nTap\n1\nLeft Click\nDouble Tap\n2\nLeft Double Click\nWhen you tap the stylus or click a mouse in an InkPicture control on a Tablet PC, the\nGesture event is triggered. On other computers, a mouse click triggers the Stroke event. The\nCollectionMode property must be set to GestureOnly! for a double tap to be recognized. Only\nsingle-stroke gestures are recognized when CollectionMode is set to InkAndGesture!. If a\ngesture is not recognized, the value of the argument is 0.\nExamples\nThis code in the Gesture event of an InkEdit control confirms to the user that the gesture was\nrecognized:\nCHOOSE CASE gest\n   CASE 0\n      MessageBox(\"Gesture recognized\",  &\n         \"You entered a space\")\n   CASE 1\n      MessageBox(\"Gesture recognized\",  &\n         \"You entered a backspace\")\n \n   CASE 2,4\n      MessageBox(\"Gesture recognized\",  &\n         \"You entered a tab\")\n   CASE 3,5\n      MessageBox(\"Gesture recognized\",  &\n         \"You entered a return\")\nEND CHOOSE\nreturn false\nSee also\nRecognitionResult\nStroke\n2.3.55 GetFocus\nDescription\nOccurs just before the control receives focus (before it is selected and becomes active).\nGetFocus applies to all controls\n"}
{"page": 258, "text": "Statements, Events, and Functions\nPage 258\nEvent ID\nTable 2.189:\nEvent ID\nObjects\npbm_bnsetfocus\nCheckBox, CommandButton, Graph, OLE, Picture, PictureHyperLink,\nPictureButton, RadioButton\npbm_cbnsetfocus DropDownListBox, DropDownPictureListBox\npbm_dwnsetfocus DataWindow\npbm_ensetfocus\nSingleLineEdit, EditMask, MultiLineEdit, StaticText, StaticHyperLink\npbm_lbnsetfocus\nListBox, PictureListBox\npbm_lvnsetfocus\nListView\npbm_rensetfocus\nRichTextEdit\npbm_sbnsetfocus HScrollBar, HTrackBar, VScrollBar, VTrackBar\npbm_setfocus\nHProgressBar, VProgressBar, DatePicker, MonthCalendar, InkEdit,\nInkPicture\npbm_tcnsetfocus\nTab\npbm_tvnsetfocus\nTreeView\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specified in a RETURN statement):\n0 -- Continue processing\nExamples\nExample 1\nThis example in a SingleLineEdit control's GetFocus event selects the text in the control\nwhen the user tabs to it:\nThis.SelectText(1, Len(This.Text))\nExample 2\nIn Example 1, when the user clicks the SingleLineEdit rather than tabbing to it, the control\ngets focus and the text is highlighted, but then the click deselects the text. If you define a user\nevent that selects the text and then post that event in the GetFocus event, the highlighting\nworks when the user both tabs and clicks. This code is in the GetFocus event:\nThis. EVENT POST ue_select( )\nThis code is in the ue_select user event:\nThis.SelectText(1, Len(This.Text))\n"}
{"page": 259, "text": "Statements, Events, and Functions\nPage 259\nSee also\nClicked\nLoseFocus\n2.3.56 Help\nDescription\nOccurs when the user drags the question-mark button from the title bar to a menu item or a\ncontrol and then clicks, or when the user clicks in a control (giving it focus) and then presses\nthe F1 key.\nEvent ID\nTable 2.190:\nEvent ID\nObjects\npbm_help\nWindow, Menu, DragObject\nArguments\nTable 2.191:\nArgument\nDescription\nxpos\nInteger by value (the distance of the Help message from the left edge of\nthe screen, in PowerBuilder units)\nypos\nInteger by value (the distance of the Help message from the top of the\nscreen, in PowerBuilder units)\nReturn Values\nLong.\nReturn code choices (specified in a RETURN statement):\n0 -- Continue processing\nUsage\nThe question-mark button only appears in the title bar of response windows. You must set the\nContextHelp property to true to enable this event.\nYou can script Help messages for individual menu items and controls. PowerBuilder\ndispatches the associated Windows message to the appropriate menu item or control.\nExamples\nThis example codes a message box to open when the user drags and clicks the question-mark\nbutton over a TrackBar control:\nMessageBox(\"Context Help Message\", \"Move the TrackBar\" &\n + \" slider to~r~n change the DataWindow magnification.\")\nSee also\n"}
{"page": 260, "text": "Statements, Events, and Functions\nPage 260\nShowHelp\n2.3.57 Hide\nDescription\nOccurs just before the window is hidden.\nEvent ID\nTable 2.192:\nEvent ID\nObjects\npbm_hidewindow\nWindow\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specified in a RETURN statement):\n0 -- Continue processing\nUsage\nA Hide event can occur when a sheet in an MDI frame is closed. It does not occur when\nclosing a main, response, or pop-up window.\nSee also\nClose\nShow\n2.3.58 HotLinkAlarm\nDescription\nOccurs after a Dynamic Data Exchange (DDE) server application has sent new (changed)\ndata and the client DDE application has received it.\nEvent ID\nTable 2.193:\nEvent ID\nObjects\npbm_ddedata\nWindow\nArguments\nNone\nReturn Values\n"}
{"page": 261, "text": "Statements, Events, and Functions\nPage 261\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nAfter establishing a hot link with a DDE server application with the StartHotLink function,\nactions on the server can trigger the HotLinkAlarm event.\nExamples\nThis script in the HotLinkAlarm event gets information about the DDE server application and\nthe new data:\nstring ls_data, ls_appl, ls_topic, ls_item\nGetDataDDEOrigin(ls_appl, ls_topic, ls_item)\nGetDataDDE(ls_data)\n2.3.59 Idle\nDescription\nOccurs when the Idle function has been called in an application object script and the specified\nnumber of seconds have elapsed with no mouse or keyboard activity.\nEvent ID\nTable 2.194:\nEvent ID\nObjects\nNone\nApplication\nArguments\nNone\nReturn Values\nNone. (Do not use a RETURN statement.)\nExamples\nThis statement in an application script causes the Idle event to be triggered after 300 seconds\nof inactivity:\nIdle(300)\nIn the Idle event itself, this statement closes the application:\nHALT CLOSE\n2.3.60 InputFieldSelected\nDescription\nIn a RichTextEdit control, occurs when the user double-clicks an input field, allowing the\nuser to edit the data in the field.\n"}
{"page": 262, "text": "Statements, Events, and Functions\nPage 262\nEvent ID\nTable 2.195:\nEvent ID\nObjects\npbm_reninputfieldselected\nRichTextEdit\nArguments\nTable 2.196:\nArgument\nDescription\nfieldname\nString by value (the name of the input field that was selected)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis script for the InputFieldSelected event of a RichTextEdit control gets the data in the\ninput field the user is about to edit:\nstring ls_fieldvalue\nls_fieldvalue = This.InputFieldGetData(fieldname)\nSee also\nPictureSelected\n2.3.61 InsertItem\nDescription\nOccurs when an item is inserted in the ListView.\nEvent ID\nTable 2.197:\nEvent ID\nObjects\npbm_lvninsertitem\nListView\nArguments\nTable 2.198:\nArgument\nDescription\nindex\nAn integer that represents the index of the item being inserted into the\nListView\n"}
{"page": 263, "text": "Statements, Events, and Functions\nPage 263\nReturn Values\nLong.\nReturn code choices (specified in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example displays the label and index of the inserted item:\nListViewItem lvi\nThis.GetItem(index, lvi)\nsle_info.Text = \"Inserted \"+ String(lvi.Label) &\n   + \" into position \" &\n   + String(index)\nSee also\nDeleteItem\n2.3.62 ItemActivate\nDescription\nOccurs when a ListView item is clicked or double-clicked. The actual firing mechanism\ndepends on the OneClickActivate and TwoClickActivate property settings.\nEvent ID\nTable 2.199:\nEvent ID\nObjects\npbm_lvnitemactivate\nListView\nArguments\nTable 2.200:\nArgument\nDescription\nIndex\nAn integer that represents the index of the item being inserted into the\nListView\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nUse the ItemActivate event instead of the Clicked or DoubleClicked event in new\napplications.\n"}
{"page": 264, "text": "Statements, Events, and Functions\nPage 264\nThe following ListView property settings determine which user action fires the event:\nTable 2.201:\nOneClickActivate\nTwoClickActivate\nFiring mechanism\nTrue\nTrue\nSingle click\nTrue\nFalse\nSingle click\nFalse\nTrue\nSingle click on selected\nitem or double-click on\nnonselected item\nFalse\nFalse\nDouble-click\nExamples\nThis code changes a ListView item text label to uppercase lettering. The change is made in\nthe second column of the item the user clicks or double-clicks, depending on the ListView\nproperty settings:\nlistviewitem llvi_current\n \nThis.GetItem(index, 2, llvi_current)\nllvi_current.Label = Upper(llvi_current.Label)\nThis.SetItem(index, 2, llvi_current)\nRETURN 0\nSee also\nItemChanged\nItemChanging\n2.3.63 ItemChanged\nDescription\nOccurs when an ListView item has changed.\nEvent ID\nTable 2.202:\nEvent ID\nObjects\npbm_lvnitemchanged\nListView\nArguments\nTable 2.203:\nArgument\nDescription\nindex\nThe index of the item that is changing\nfocuschanged\nBoolean (specifies if focus has changed for the item)\n"}
{"page": 265, "text": "Statements, Events, and Functions\nPage 265\nArgument\nDescription\nhasfocus\nBoolean (specifies whether the item has focus)\nselectionchange\nBoolean (specifies whether the selection has changed for the item)\nselected\nBoolean (specifies whether the item is selected)\notherchange\nBoolean (specifies if anything other than focus or selection has changed\nfor the item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example checks whether the event is occurring because focus has changed to the item:\nListViewItem l_lvi\nlv_list.GetItem(index, l_lvi)\nIF focuschange and hasfocus THEN\n   sle1.Text = String(lvi.label) +\" has focus.\"\nEND IF\nSee also\nItemChanged in Section 8.27, \u201cItemChanged\u201d in DataWindow Reference\nItemChanging\n2.3.64 ItemChanging\nDescription\nOccurs just before a ListView changes.\nEvent ID\nTable 2.204:\nEvent ID\nObjects\npbm_lvnitemchanging\nListView\nArguments\nTable 2.205:\nArgument\nDescription\nindex\nThe index of the item that has changed\nfocuschange\nBoolean (specifies if focus is changing for the item)\nhasfocus\nBoolean (specifies whether the item has focus)\n"}
{"page": 266, "text": "Statements, Events, and Functions\nPage 266\nArgument\nDescription\nselectionchange\nBoolean (specifies whether the selection is changing for the item)\nselected\nBoolean (specifies whether the item is selected)\notherchange\nBoolean (specifies if anything other than focus or selection has changed\nfor the item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nSee also\nItemChanged\n2.3.65 ItemCollapsed\nDescription\nOccurs when a TreeView item has collapsed.\nEvent ID\nTable 2.206:\nEvent ID\nObjects\npbm_tvnitemcollapsed\nTreeView\nArguments\nTable 2.207:\nArgument\nDescription\nhandle\nLong by reference (the handle of the collapsed TreeViewItem)\nReturn Values\nLong.\nReturn code choices (specified in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example changes the picture for the collapsed item:\nTreeViewItem l_tvi\ninteger li_level\n \nThis.GetItem(handle, l_tvi)\n"}
{"page": 267, "text": "Statements, Events, and Functions\nPage 267\n \nCHOOSE CASE l_tvi.Level\n   CASE 1\n      l_tvi.PictureIndex = 1\n      l_tvi.SelectedPictureIndex = 1\n   CASE 2\n      l_tvi.PictureIndex = 2\n      l_tvi.SelectedPictureIndex = 2\n   CASE 3\n      l_tvi.PictureIndex = 3\n      l_tvi.SelectedPictureIndex = 3\n   CASE 4\n      l_tvi.PictureIndex = 4\n      l_tvi.SelectedPictureIndex = 4\nEND CHOOSE\nThis.SetItem(handle, l_tvi)\nSee also\nItemCollapsing\n2.3.66 ItemCollapsing\nDescription\nOccurs when a TreeView item is collapsing.\nEvent ID\nTable 2.208:\nEvent ID\nObjects\npbm_tvnitemcollapsing\nTreeView\nArguments\nTable 2.209:\nArgument\nDescription\nhandle\nLong by reference (the handle of the collapsing item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe ItemCollapsing event occurs before the ItemCollapsed event.\nExamples\nThis example changes the picture for the collapsing item:\nTreeViewItem l_tvi\n"}
{"page": 268, "text": "Statements, Events, and Functions\nPage 268\ninteger li_level\n \nThis.GetItem(handle, l_vti)\n \nCHOOSE CASE l_tvi.level\n   CASE 1\n      l_tvi.PictureIndex = 1\n      l_tvi.SelectedPictureIndex = 1\n   CASE 2\n      l_tvi.PictureIndex = 2\n      l_tvi.SelectedPictureIndex = 2\n   CASE 3\n      l_tvi.PictureIndex = 3\n      l_tvi.SelectedPictureIndex = 3\n   CASE 4\n      l_tvi.PictureIndex = 4\n      l_tvi.SelectedPictureIndex = 4\nEND CHOOSE\n \nThis.SetItem(handle, l_tvi)\nSee also\nItemCollapsed\n2.3.67 ItemExpanded\nDescription\nOccurs when a TreeView item has expanded.\nEvent ID\nTable 2.210:\nEvent ID\nObjects\npbm_tvnitemexpanded\nTreeView\nArguments\nTable 2.211:\nArgument\nDescription\nhandle\nLong by reference (the handle of the expanded item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe ItemExpanded event occurs after the ItemExpanding event.\nExamples\n"}
{"page": 269, "text": "Statements, Events, and Functions\nPage 269\nThis example sets the picture and selected picture for the expanded item:\nTreeViewItem l_tvi\ninteger li_level\n \nThis.GetItem(handle, l_tvi)\n \nCHOOSE CASE l_tvi.Level\n   CASE 1\n      l_tvi.PictureIndex = 5\n      l_tvi.SelectedPictureIndex = 1\n   CASE 2\n      l_tvi.PictureIndex = 5\n      l_tvi.SelectedPictureIndex = 2\n   CASE 3\n      l_tvi.PictureIndex = 5\n      l_tvi.SelectedPictureIndex = 3\n   CASE 4\n      l_tvi.PictureIndex = 4\n      l_tvi.SelectedPictureIndex = 5\nEND CHOOSE\nThis.SetItem(handle, l_tvi)\nSee also\nItemExpanding\n2.3.68 ItemExpanding\nDescription\nOccurs while a TreeView item is expanding.\nEvent ID\nTable 2.212:\nEvent ID\nObjects\npbm_tvnitemexpanding\nTreeView\nArguments\nTable 2.213:\nArgument\nDescription\nhandle\nLong by reference (the handle of the expanding TreeView item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\n1 -- Prevents the TreeView from expanding\nUsage\n"}
{"page": 270, "text": "Statements, Events, and Functions\nPage 270\nThe ItemExpanding event occurs before the ItemExpanded event.\nExamples\nThis example sets the picture and selected picture for the expanding item:\nTreeViewItem l_tvi\ninteger li_level\n \nThis.GetItem(handle, l_tvi)\n \nCHOOSE CASE l_tvi.Level\n   CASE 1\n      l_tvi.PictureIndex = 5\n      l_tvi.SelectedPictureIndex = 1\n   CASE 2\n      l_tvi.PictureIndex = 5\n      l_tvi.SelectedPictureIndex = 2\n   CASE 3\n      l_tvi.PictureIndex = 5\n      l_tvi.SelectedPictureIndex = 3\n   CASE 4\n      l_tvi.PictureIndex = 4\n      l_tvi.SelectedPictureIndex = 5\nEND CHOOSE\n \nThis.SetItem(handle, l_tvi)\nSee also\nItemExpanded\n2.3.69 ItemPopulate\nDescription\nOccurs when a TreeView item is being populated with children.\nEvent ID\nTable 2.214:\nEvent ID\nObjects\npbm_tvnitempopulate\nTreeView\nArguments\nTable 2.215:\nArgument\nDescription\nhandle\nLong by reference (the handle of the TreeView item being populated)\nReturn Values\nLong.\nReturn code choices (specified in a RETURN statement):\n0 -- Continue processing\n"}
{"page": 271, "text": "Statements, Events, and Functions\nPage 271\nExamples\nThis example displays the name of the TreeView item you are populating in a\nSingleLineEdit:\nTreeViewItem tvi\n \nThis.GetItem(handle, tvi)\nsle_get.Text = \"Populating TreeView item \" &\n   + String(tvi.Label) + \" with children\"\nSee also\nItemExpanding\n2.3.70 ItemUnselected\nDescription\nOccurs when an item changes from highlight to another state.\nEvent ID\nTable 2.216:\nEvent ID\nObjects\nNone\nRibbonBar\nArguments\nNone.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\n//st_status is statictext\nst_status.Text = \"Ready\"\nSee also\nCategorySelectionChanged\nCategorySelectionChanging\nCategoryExpanded\nCategoryCollapsed\n2.3.71 Key\nDescription\nOccurs when the user presses a key.\n"}
{"page": 272, "text": "Statements, Events, and Functions\nPage 272\nEvent ID\nTable 2.217:\nEvent ID\nObjects\npbm_lvnkeydown\nListView\npbm_renkey\nRichTextEdit\npbm_tcnkeydown\nTab\npbm_tvnkeydown\nTreeView\npbm_keydown\nWindow\nArguments\nTable 2.218:\nArgument\nDescription\nkey\nKeyCode by value. A value of the KeyCode enumerated datatype\nindicating the key that was pressed (for example, KeyA! or KeyF1!).\nkeyflags\nUnsignedLong by value (the modifier keys that were pressed with the\nkey).\nValues are:\n1 Shift key\n2 Ctrl key\n3 Shift and Ctrl keys\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\n1 -- Do not process the key (RichTextEdit controls only)\nUsage\nSome PowerBuilder controls capture keystrokes so that the window is prevented from getting\na Key event. These include ListView, TreeView, Tab, RichTextEdit, and the DataWindow\nedit control. When these controls have focus you can respond to keystrokes by writing a\nscript for an event for the control. If there is no predefined event for keystrokes, you can\ndefine a user event and associate it with a pbm code.\nFor a RichTextEdit control, pressing a key can perform document formatting. For example,\nCtrl+b applies bold formatting to the selection. If you specify a return value of 1, the\ndocument formatting associated with the key will not be performed.\nIf the user presses a modifier key and holds it down while pressing another key, the Key\nevent occurs twice: once when the modifier key is pressed and again when the second key\n"}
{"page": 273, "text": "Statements, Events, and Functions\nPage 273\nis pressed. If the user releases the modifier key before pressing the second key, the value of\nkeyflags will change in the second occurrence.\nWhen the user releases a key, the Key event does not occur. Therefore, if the user releases\na modifier key, you do not know the current state of the modifier keys until another key is\npressed.\nExamples\nThis example causes a beep when the user presses F1 or F2, as long as Shift and Ctrl are not\npressed:\nIF keyflags = 0 THEN\n   IF key = KeyF1! THEN\n      Beep(1)\n   ELSEIF key = KeyF2! THEN\n      Beep(20)\n   END IF\nEND IF\nThis line displays the value of keyflags when a key is pressed.\nst_1.Text = String(keyflags)\nSee also\nSystemKey\n2.3.72 LineDown\nDescription\nOccurs when the user clicks the down arrow of the vertical scroll bar or presses the down\narrow on the keyboard when the focus is on a track bar.\nEvent ID\nTable 2.219:\nEvent ID\nObjects\npbm_sbnlinedown\nVScrollBar, VTrackBar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in a vertical scroll bar or presses the down arrow key with focus in a\nvertical track bar, nothing happens unless you have scripts that change the bar's Position\n"}
{"page": 274, "text": "Statements, Events, and Functions\nPage 274\nproperty. For the scroll bar arrows and arrow keys for the track bar, use the LineUp and\nLineDown events; for clicks in the scroll bar or track bar background above and below the\nthumb, use the PageUp and PageDown event; for dragging the thumb itself, use the Moved\nevent.\nExamples\nThis code in the LineDown event causes the thumb to move down when the user clicks on\nthe down arrow of the vertical scroll bar and displays the resulting position in the StaticText\ncontrol st_1:\nIF This.Position > This.MaxPosition - 1 THEN\n   This.Position = MaxPosition\nELSE\n   This.Position = This.Position + 1\nEND IF\n \nst_1.Text = \"LineDown \" + String(This.Position)\nSee also\nLineLeft\nLineRight\nLineUp\nPageDown\n2.3.73 LineLeft\nDescription\nOccurs when the user clicks in the left arrow of the horizontal scroll bar or presses the left\narrow key on the keyboard when focus is on a horizontal track bar.\nEvent ID\nTable 2.220:\nEvent ID\nObjects\npbm_sbnlineup\nHScrollBar, HTrackBar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in a horizontal scroll bar or presses the left arrow key on the keyboard\nin a horizontal track bar, nothing happens unless you have scripts that change the bar's\n"}
{"page": 275, "text": "Statements, Events, and Functions\nPage 275\nPosition property. For the scroll bar arrows and left arrow keys in a track bar, use the\nLineLeft and LineRight events; for clicks in the background above and below the thumb, use\nthe PageLeft and Right events; for dragging the thumb itself, use the Moved event.\nExamples\nThis code in the LineLeft event causes the thumb to move left when the user clicks on the left\narrow of the horizontal scroll bar and displays the resulting position in the StaticText control\nst_1:\nIF This.Position < This.MinPosition + 1 THEN\n   This.Position = MinPosition\nELSE\n   This.Position = This.Position - 1\nEND IF\n \nst_1.Text = \"LineLeft \" + String(This.Position)\nSee also\nLineDown\nLineRight\nLineUp\nPageLeft\n2.3.74 LineRight\nDescription\nOccurs when the user clicks in the right arrow of the horizontal scroll bar or presses the right\narrow key on the keyboard when focus is on a horizontal track bar.\nEvent ID\nTable 2.221:\nEvent ID\nObjects\npbm_sbnlinedown\nHScrollBar, HTrackBar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in a horizontal scroll bar or presses the right arrow key on the keyboard\nin a horizontal track bar, nothing happens unless you have scripts that change the bar's\n"}
{"page": 276, "text": "Statements, Events, and Functions\nPage 276\nPosition property. For the scroll bar arrows and arrow keys in a track bar, use the LineLeft\nand LineRight events; for clicks in the background above and below the thumb, use the\nPageLeft and Right events; for dragging the thumb itself, use the Moved event.\nExamples\nThis code in the LineRight event causes the thumb to move right when the user clicks on the\nright arrow of the horizontal scroll bar and displays the resulting position in the StaticText\ncontrol st_1:\nIF This.Position > This.MaxPosition - 1 THEN\n   This.Position = MaxPosition\nELSE\n   This.Position = This.Position + 1\nEND IF\n \nst_1.Text = \"LineRight \" + String(This.Position)\nSee also\nLineDown\nLineLeft\nLineUp\nPageRight\n2.3.75 LineUp\nDescription\nOccurs when the user clicks the up arrow of the vertical scroll bar or presses the up arrow on\nthe keyboard when the focus is on a track bar\nEvent ID\nTable 2.222:\nEvent ID\nObjects\npbm_sbnlineup\nVScrollBar, VTrackBar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in a vertical scroll bar or presses the up arrow key with focus in a\nvertical track bar, nothing happens unless you have scripts that change the bar's Position\nproperty. For the scroll bar arrows and arrow keys for the track bar, use the LineUp and\n"}
{"page": 277, "text": "Statements, Events, and Functions\nPage 277\nLineDown events; for clicks in the scroll bar or track bar background above and below the\nthumb, use the PageUp and PageDown event; for dragging the thumb itself, use the Moved\nevent.\nExamples\nThis code in the LineUp event causes the thumb to move up when the user clicks on the up\narrow of the vertical scroll bar and displays the resulting position in the StaticText control\nst_1:\nIF This.Position < This.MinPosition + 1 THEN\n   This.Position = MinPosition\nELSE\n   This.Position = This.Position - 1\nEND IF\n \nst_1.Text = \"LineUp \" + String(This.Position)\nSee also\nLineDown\nLineLeft\nLineRight\nPageUp\n2.3.76 LoseFocus\nDescription\nOccurs just before a control loses focus (before it becomes inactive).\nEvent ID\nTable 2.223:\nEvent ID\nDescription\npbm_controltypekillfocus\nUserObject (standard visual user objects only)\npbm_bnkillfocus CheckBox, CommandButton, Graph, OLE, Picture, PictureHyperLink,\nPictureButton, RadioButton, StaticText, StaticHyperLink\npbm_cbnkillfocus DropDownListBox, DropDownPictureListBox\npbm_dwnkillfocusDataWindow\npbm_enkillfocus SingleLineEdit, EditMask, MultiLineEdit\npbm_killfocus\nHProgressBar, VProgressBar, DatePicker, MonthCalendar, InkEdit,\nInkPicture\npbm_lbnkillfocus ListBox, PictureListBox\npbm_lvnkillfocus ListView\npbm_renkillfocus RichTextEdit\npbm_sbnkillfocus HScrollBar, HTrackBar, VScrollBar, VTrackBar\npbm_tcnkillfocus Tab\n"}
{"page": 278, "text": "Statements, Events, and Functions\nPage 278\nEvent ID\nDescription\npbm_tvnkillfocus TreeView\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWrite a script for a control's LoseFocus event if you want some processing to occur when the\nuser changes focus to another control.\nFor controls that contain editable text, losing focus can also cause a Modified event to occur.\nIn a RichTextEdit control, a LoseFocus event occurs when the user clicks on the control's\ntoolbar. The control does not actually lose focus.\nBecause the MessageBox function grabs focus, you should not use it when focus is changing,\nsuch as in a LoseFocus event. Instead, you might display a message in the window's title or a\nMultiLineEdit.\nExamples\nExample 1\nIn this script for the LoseFocus event of a SingleLineEdit sle_town, the user is reminded to\nenter information if the text box is left empty:\nIF sle_town.Text = \"\" THEN\n   st_status.Text = \"You have not specified a town.\"\nEND IF\nExample 2\nStatements in the LoseFocus event for a DataWindow control dw_emp can trigger a user\nevent whose script validates the last item the user entered.\nThis statement triggers the user event ue_accept:\ndw_emp.EVENT ue_accept( )\nThis statement in ue_accept calls the AcceptText function:\ndw_emp.AcceptText( )\nThis script for the LoseFocus event of a RichTextEdit control performs processing when the\ncontrol actually loses focus:\nGraphicObject l_control\n \n// Check whether the RichTextEdit still has focus\nl_control = GetFocus()\nIF TypeOf(l_control) = RichTextEdit! THEN RETURN 0\n"}
{"page": 279, "text": "Statements, Events, and Functions\nPage 279\n \n// Perform processing only if RichTextEdit lost focus\n...\nThis script gets the name of the control instead:\nGraphicObject l_control\nstring ls_name\nl_control = GetFocus()\nls_name = l_control.Classname( )\nSee also\nGetFocus\n2.3.77 Modified\n2.3.77.1 Syntax 1: For Ribbon controls\nDescription\nThis is a user event which occurs when the ribbon combo box control loses focus, the text has\nbeen changed, or Enter or Tab is pressed.\nMake sure the parameter (quantities and types) of the user event is correctly defined\naccording to the requirement of the ribbon combo box control.\nApplies to\nRibbonComboBoxItem controls\nArguments\nTable 2.224:\nArgument\nDescription\nItemHandle\nLong. The handle of the item.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExample\nThis example is a user event for a combo box; in this example, the Ue_ComboBoxModified\nuser event must be defined with a long parameter for receiving the handle of the combo box\nthat is modified.\n//Ue_ComboBoxModified user event must have a long parameter for \n//receiving the handle of ComboBox that is modified\nevent type long ue_comboboxmodified(long itemhandle);\nRibbonComboBoxItem lr_ComboBox\nrbb_1.GetComboBox(ItemHandle,lr_ComboBox)\n//...\nreturn 1\n"}
{"page": 280, "text": "Statements, Events, and Functions\nPage 280\nend event\nSee also\nClicked\nSelected\nSelectionChanged\n2.3.77.2 Syntax 2: For all other controls\nDescription\nOccurs when the contents in the control have changed.\nEvent ID\nTable 2.225:\nEvent ID\nObjects\npbm_cbnmodified\nDropDownListBox,\nDropDownPictureListBox\npbm_enmodified\nSingleLineEdit, EditMask, MultiLineEdit\npbm_inkemodified\nInkEdit\npbm_renmodified\nRichTextEdit\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nFor plain text controls, the Modified event occurs when the user indicates being finished by\npressing Enter or tabbing away from the control.\nFor InkEdit and RichText Edit controls, the value of the Modified property controls the\nModified event. If the property is false, the event occurs when the first change occurs to\nthe contents of the control. The change also causes the property to be set to true, which\nsuppresses the Modified event. You can restart checking for changes by setting the property\nback to false.\nResetting the Modified property is useful when you insert text or a document in the control,\nwhich triggers the event and sets the property (it is reporting the change to the control's\ncontents). To find out when the user begins making changes to the content, set the Modified\nproperty back to false in the script that opens the document. When the user begins editing, the\nproperty will be reset to true and the event will occur again.\nA Modified event can be followed by a LoseFocus event.\n"}
{"page": 281, "text": "Statements, Events, and Functions\nPage 281\nExamples\nIn this example, code in the Modified event performs validation on the text the user entered\nin a SingleLineEdit control sle_color. If the user did not enter RED, WHITE, or BLUE, a\nmessage box indicates what is valid input; for valid input, the color of the text changes:\nstring ls_color\n \nThis.BackColor = RGB(150,150,150)\n \nls_color = Upper(This.Text)\nCHOOSE CASE ls_color\n   CASE \"RED\"\n      This.TextColor = RGB(255,0,0)\n   CASE \"BLUE\"\n      This.TextColor = RGB(0,0,255)\n   CASE \"WHITE\"\n      This.TextColor = RGB(255,255,255)\n   CASE ELSE\n      This.Text = \"\"\n      MessageBox(\"Invalid input\", &\n      \"Enter RED, WHITE, or BLUE.\")\nEND CHOOSE\nThis is not a realistic example: user input of three specific choices is more suited to a list box;\nin a real situation, the allowed input might be more general.\nSee also\nLoseFocus\n2.3.78 MouseDown\nThe MouseDown event has different arguments for different objects:\nTable 2.226:\nObject\nSee\nRichTextEdit control\nSyntax 1\nWindow\nSyntax 2\n2.3.78.1 Syntax 1: For RichTextEdit controls\nDescription\nOccurs when the user presses the left mouse button on the RichTextEdit control.\nEvent ID\nTable 2.227:\nEvent ID\nObjects\npbm_renlbuttondown\nRichTextEdit\nArguments\nNone\n"}
{"page": 282, "text": "Statements, Events, and Functions\nPage 282\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis code in a RichTextEdit control's MouseDown event assigns text to the SingleLineEdit\nsle_1 when the user presses the left mouse button:\nsle_1.text = \"Mouse Down\"\nSee also\nClicked\nMouseMove\nMouseUp\n2.3.78.2 Syntax 2: For windows\nDescription\nOccurs when the user presses the left mouse button in an unoccupied area of the window (any\narea with no visible, enabled object).\nEvent ID\nTable 2.228:\nEvent ID\nObjects\npbm_lbuttondown\nWindow\nArguments\nTable 2.229:\nArgument\nDescription\nflags\nUnsignedLong by value (the modifier keys and mouse buttons that are\npressed).\nValues are:\n\u2022 1 -- Left mouse button\n\u2022 2 -- Right mouse button\n\u2022 4 -- Shift key\n\u2022 8 -- Ctrl key\n\u2022 16 -- Middle mouse button\n"}
{"page": 283, "text": "Statements, Events, and Functions\nPage 283\nArgument\nDescription\nIn the MouseDown event, the left mouse button is always down, so 1\nis always summed in the value of flags. For an explanation of flags, see\nSyntax 2 of MouseMove.\nxpos\nInteger by value (the distance of the pointer from the left edge of the\nwindow's workspace in pixels).\nypos\nInteger by value (the distance of the pointer from the top of the window's\nworkspace in pixels).\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nExample 1\nThis code in the MouseDown event displays the window coordinates of the pointer as\nreported in the xpos and ypos arguments:\nsle_2.Text = \"Position of Pointer is: \" + &\n   String(xpos) + \",\" + String(ypos)\nExample 2\nThis code in the MouseDown event checks the value of the flags argument, and reports which\nmodifier keys are pressed in the SingleLineEdit sle_modkey:\nCHOOSE CASE flags\n   CASE 1\n      sle_mkey.Text = \"No modifier keys pressed\"\n   CASE 5\n      sle_mkey.Text = \"SHIFT key pressed\"\n   CASE 9\n      sle_mkey.Text = \"CONTROL key pressed\"\n   CASE 13\n      sle_mkey.Text = \"SHIFT and CONTROL keys pressed\"\nEND CHOOSE\nSee also\nClicked\nMouseMove\nMouseUp\n2.3.79 MouseMove\nThe MouseMove event has different arguments for different objects:\nTable 2.230:\nObject\nSee\nRichTextEdit control\nSyntax 1\n"}
{"page": 284, "text": "Statements, Events, and Functions\nPage 284\nObject\nSee\nWindow\nSyntax 2\n2.3.79.1 Syntax 1: For RichTextEdit controls\nDescription\nOccurs when the mouse has moved within the RichTextEdit control.\nEvent ID\nTable 2.231:\nEvent ID\nObjects\npbm_renmousemove\nRichTextEdit\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nSee also\nClicked\nMouseDown\nMouseUp\n2.3.79.2 Syntax 2: For windows\nDescription\nOccurs when the pointer is moved within the window.\nEvent ID\nTable 2.232:\nEvent ID\nObjects\npbm_mousemove\nWindow\nArguments\nTable 2.233:\nArgument\nDescription\nflags\nUnsignedLong by value (the modifier keys and mouse buttons that are\npressed).\n"}
{"page": 285, "text": "Statements, Events, and Functions\nPage 285\nArgument\nDescription\nValues are:\n\u2022 1 -- Left mouse button\n\u2022 2 -- Right mouse button\n\u2022 4 -- Shift key\n\u2022 8 -- Ctrl key\n\u2022 16 -- Middle mouse button\nFlags is the sum of all the buttons and keys that are pressed.\nxpos\nInteger by value (the distance of the pointer from the left edge of the\nwindow's workspace in pixels).\nypos\nInteger by value (the distance of the pointer from the top of the window's\nworkspace in pixels).\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nBecause flags is a sum of button and key numbers, you can find out what keys are pressed by\nsubtracting the largest values one by one and checking the value that remains. For example:\n\u2022 If flags is 5, the Shift key (4) and the left mouse button (1) are pressed.\n\u2022 If flags is 14, the Ctrl key (8), the Shift key (4), and the right mouse button (2) are pressed.\nThis code handles all the buttons and keys (the local boolean variables are initialized to false\nby default):\nboolean lb_left_button, lb_right_button\nboolean lb_middle_button, lb_Shift_key, lb_control_key\ninteger li_flags\n \nli_flags = flags \nIF li_flags      15 THEN\n   // Middle button is pressed\n   lb_middle_button = TRUE\n   li_flags = li_flags - 16\nEND IF\n \nIF li_flags      7 THEN\n   // Control key is pressed\n   lb_control_key = TRUE\n   li_flags = li_flags - 8\nEND IF\n"}
{"page": 286, "text": "Statements, Events, and Functions\nPage 286\n \nIF li_flags > 3 THEN\n   // Shift key is pressed\n   lb_Shift_key = TRUE\n   li_flags = li_flags - 4\nEND IF\n \nIF li_flags > 1 THEN\n   // Right button is pressed\n   lb_lb_right_button = TRUE\n   li_flags = li_flags - 2\nEND IF\n \nIF li_flags = 1 THEN lb_left_button = TRUE\nMost controls in a window do not capture MouseMove events -- the MouseMove event is\nnot mapped by default. If you want the window's MouseMove event to be triggered when\nthe mouse moves over a control, you must map a user-defined event to the pbm_mousemove\nevent for the control. The following code in the control's user-defined MouseMove event\ntriggers the window's MouseMove event:\nParent.EVENT MouseMove(0, Parent.PointerX(), Parent.PointerY())\nExamples\nThis code in the MouseMove event causes a meter OLE custom control to rise and fall\ncontinually as the mouse pointer is moved up and down in the window workspace:\nThis.uf_setmonitor(ypos, ole_verticalmeter, &\n   This.WorkspaceHeight() )\nUf_setmonitor is a window function that scales the pixels to the range of the gauge. It accepts\nthree arguments: the vertical position of the mouse pointer, an OLECustomControl reference,\nand the maximum range of the mouse pointer for scaling purposes:\ndouble ld_gaugemax, ld_gaugemin\ndouble ld_gaugerange, ld_value\n \n// Ranges for monitor-type control\nld_gaugemax = ocxitem.Object.MaxValue\nld_gaugemin = ocxitem.Object.MinValue\nld_gaugerange = ld_gaugemax - ld_gaugemin\n \n// Horizontal position of mouse within window\nld_value = data * ld_gaugerange / range + ld_gaugemin\n \n// Set gauge\nocxitem.Object.Value = Round(ld_value, 0)\n \nRETURN 1\nThe OLE custom control also has a MouseMove event. This code in that event keeps the\ngauge responding when the pointer is over the gauge. (You need to pass values for the\narguments that are usually handled by the system; the mouse position values are specified in\nrelation to the parent window.) For example:\nParent.EVENT MouseMove(0, Parent.PointerX(), &\nParent.PointerY())\nSee also\n"}
{"page": 287, "text": "Statements, Events, and Functions\nPage 287\nClicked\nMouseDown\nMouseUp\n2.3.80 MouseUp\nThe MouseUp event has different arguments for different objects:\nTable 2.234:\nObject\nSee\nRichTextEdit control\nSyntax 1\nWindow\nSyntax 2\n2.3.80.1 Syntax 1: For RichTextEdit controls\nDescription\nOccurs when the user releases the left mouse button in a RichTextEdit control.\nEvent ID\nTable 2.235:\nEvent ID\nObjects\npbm_renlbuttonup\nRichTextEdit\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nA Clicked event also occurs when the mouse button is released.\nExamples\nThe following code in a RichTextEdit control's MouseUp event assigns text to the\nSingleLineEdit sle_1 when the user releases the left mouse button:\nsle_1.Text = \"Mouse Up\"\nSee also\nClicked\nMouseDown\n"}
{"page": 288, "text": "Statements, Events, and Functions\nPage 288\nMouseMove\n2.3.80.2 Syntax 2: For windows\nDescription\nOccurs when the user releases the left mouse button in an unoccupied area of the window\n(any area with no visible enabled object).\nEvent ID\nTable 2.236:\nEvent ID\nObjects\npbm_lbuttonup\nWindow\nArguments\nTable 2.237:\nArgument\nDescription\nflags\nUnsignedLong by value (the modifier keys and mouse buttons that are\npressed).\nValues are:\n\u2022 1 -- Left mouse button\n\u2022 2 -- Right mouse button\n\u2022 4 -- Shift key\n\u2022 8 -- Ctrl key\n\u2022 16 -- Middle mouse button\nIn the MouseUp event, the left mouse button is being released, so 1 is not\nsummed in the value of flags. For an explanation of flags, see Syntax 2 of\nMouseMove.\nxpos\nInteger by value (the distance of the pointer from the left edge of the\nwindow's workspace in pixels).\nypos\nInteger by value (the distance of the pointer from the top of the window's\nworkspace in pixels).\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\n"}
{"page": 289, "text": "Statements, Events, and Functions\nPage 289\nUsage\nA Clicked event also occurs when the mouse button is released.\nExamples\nExample 1\nThis code in the window's MouseUp event displays in the SingleLineEdit sle_2 the window\ncoordinates of the pointer when the button is released as reported in the xpos and ypos\narguments.\nsle_2.Text = \"Position of Pointer is: \" + &\n   String(xpos) + \",\" + String(ypos)\nExample 2\nThis code in the window's MouseUp event checks the value of the flags argument and reports\nwhich modifier keys are pressed in the SingleLineEdit sle_modkey.\nCHOOSE CASE flags\n   CASE 0\n      sle_mkey.Text = \"No modifier keys pressed\"\n \n   CASE 4\n      sle_mkey.Text = \"SHIFT key pressed\"\n \n   CASE 8\n      sle_mkey.Text = \"CONTROL key pressed\"\n \n   CASE 12\n      sle_mkey.Text = \"SHIFT and CONTROL keys pressed\"\n \nEND CHOOSE\nSee also\nClicked\nMouseDown\nMouseMove\n2.3.81 Moved\nDescription\nOccurs when the user moves the scroll box, either by clicking on the arrows or by dragging\nthe box itself.\nEvent ID\nTable 2.238:\nEvent ID\nObjects\npbm_sbnthumbtrack\nHScrollBar, HTrackBar, VScrollBar,\nVTrackBar\nArguments\n"}
{"page": 290, "text": "Statements, Events, and Functions\nPage 290\nTable 2.239:\nArgument\nDescription\nscrollpos\nInteger by value (a number indicating position of the scroll box within the\nrange of values specified by the MinPosition and MaxPosition properties)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe Moved event updates the Position property of the scroll bar with the value of scrollpos.\nExamples\nThis statement in the Moved event displays the new position of the scroll box in a StaticText\ncontrol:\nst_1.Text = \"Moved \" + String(scrollpos)\nSee also\nLineDown\nLineLeft\nLineRight\nLineUp\nPageDown\nPageLeft\nPageRight\nPageUp\n2.3.82 NavigationError\nDescription\nOccurs when the navigation fails or is cancelled.\nEvent ID\nTable 2.240:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\n"}
{"page": 291, "text": "Statements, Events, and Functions\nPage 291\nTable 2.241:\nArgument\nDescription\nerrorCode\nThe error code number.\nerrorText\nThe error text.\nfailedUrl\nThe URL that the browser failed to load.\nReturn Values\nNone\nSee also\nAddressChanged\nCertificateError\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationProgressIndex\nNavigationStart\nNavigationStateChanged\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.83 NavigationProgressIndex\nDescription\nOccurs when the overall page loading progress changes.\nEvent ID\nTable 2.242:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.243:\nArgument\nDescription\nprogressIndex\nThe page loading progress.\nReturn Values\n"}
{"page": 292, "text": "Statements, Events, and Functions\nPage 292\nNone\nUsage\nThe NavigationProgressIndex event will be triggered for uncertain times even if the page has\nbeen 100% loaded.\nThe NavigationProgressIndex event will be triggered if the page's URL has changed.\nSee also\nAddressChanged\nCertificateError\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationStart\nNavigationStateChanged\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.84 NavigationStart\nDescription\nOccurs after a navigation has been committed and before the browser begins loading contents\nin the frame.\nEvent ID\nTable 2.244:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nNone\nReturn Values\nNone\nSee also\nAddressChanged\nCertificateError\n"}
{"page": 293, "text": "Statements, Events, and Functions\nPage 293\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStateChanged\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.85 NavigationStateChanged\nDescription\nOccurs when the navigation state changes.\nEvent ID\nTable 2.245:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.246:\nArgument\nDescription\ncanGoBack\nA boolean value specifying whether to be able to go back to the last page:\nTrue -- To be able to go back\nFalse -- Not to able to go back\ncanGoForward\nA boolean value specifying whether to be able to move forward to the\nnext page:\nTrue -- To be able to move forward\nFalse -- Not to be able to move forward\nReturn Values\nNone\nSee also\nAddressChanged\nCertificateError\n"}
{"page": 294, "text": "Statements, Events, and Functions\nPage 294\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStart\nPdfPrintFinished\nResourceRedirect\nTitleTextChanged\n2.3.86 Notify\nDescription\nOccurs when a TreeView control sends a WM_NOTIFY message to its parent.\nEvent ID\nTable 2.247:\nEvent ID\nObjects\npbm_notify\nTreeView controls\nArguments\nTable 2.248:\nArgument\nDescription\nwparam\nUnsignedLong by value containing the ID of the control sending the\nmessage. This value is not guaranteed to be unique.\nlparam\nLong by value containing a pointer to a structure that contains the\nwindow handle and identifier of the control sending a message and a\nnotification code.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe lparam argument can point to an NMHDR structure or to a larger structure that contains\nan NMHDR structure as its first member. Since the wparam value is not guaranteed to be\nunique, you should use the identifier in the NMHDR structure.\n"}
{"page": 295, "text": "Statements, Events, and Functions\nPage 295\nYou can use this event to process custom drawing messages.\n2.3.87 Open\nThe Open event has different arguments for different objects:\nTable 2.249:\nObject\nSee\nApplication\nSyntax 1\nWindow\nSyntax 2\n2.3.87.1 Syntax 1: For the application object\nDescription\nOccurs when the user starts the application.\nEvent ID\nTable 2.250:\nEvent ID\nObjects\nNone\nApplication\nArguments\nTable 2.251:\nArgument\nDescription\ncommandline\nString by value. Additional arguments are included on the command line\nafter the name of the executable program.\nReturn Values\nNone (do not use a RETURN statement)\nUsage\nThis event can establish database connection parameters and open the main window of the\napplication.\nOn Windows\nYou can specify command line arguments when you use the Run command from the\nStart menu or as part of the Target specification when you define a shortcut for your\napplication.\nThere is no way to specify command line values when you are testing your application in the\ndevelopment environment.\n"}
{"page": 296, "text": "Statements, Events, and Functions\nPage 296\nIn other events and functions, you can call the CommandParm function to get the command\nline arguments.\nFor an example of parsing the string in commandline, see CommandParm.\nExamples\nThis example populates the SQLCA global variable from the application's initialization file,\nconnects to the database, and opens the main window:\n/* Populate SQLCA from current myapp.ini settings */\nSQLCA.DBMS = ProfileString(\"myapp.ini\", \"database\", &\n   \"dbms\", \"\")\nSQLCA.Database = ProfileString(\"myapp.ini\", &\n   \"database\", \"database\", \"\")\nSQLCA.Userid = ProfileString(\"myapp.ini\", \"database\", &\n   \"userid\", \"\")\nSQLCA.DBPass = ProfileString(\"myapp.ini\", \"database\", &\n   \"dbpass\", \"\")\nSQLCA.Logid = ProfileString(\"myapp.ini\", \"database\", &\n   \"logid\", \"\")\nSQLCA.Logpass = ProfileString(\"myapp.ini\", &\n   \"database\", \"LogPassWord\", \"\")\nSQLCA.Servername = ProfileString(\"myapp.ini\", &\n   \"database\", \"servername\", \"\")\nSQLCA.DBParm = ProfileString(\"myapp.ini\", \"database\", &\n   \"dbparm\", \"\")\n \nCONNECT;\n \nIF SQLCA.Sqlcode <> 0 THEN\n   MessageBox(\"Cannot Connect to Database\", &\n      SQLCA.SQLErrText)\n   RETURN\nEND IF\n \n/* Open MDI frame window */\nOpen(w_genapp_frame)\nSee also\nClose\n2.3.87.2 Syntax 2: For windows\nDescription\nOccurs when a window is opened by one of the Open functions. The event occurs after the\nwindow has been opened but before it is displayed.\nEvent ID\nTable 2.252:\nEvent ID\nObjects\npbm_open\nWindow\nArguments\nNone\n"}
{"page": 297, "text": "Statements, Events, and Functions\nPage 297\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThese functions trigger the Open event:\nOpen\nOpenWithParm\nOpenSheet\nOpenSheetWithParm\nWhen the Open event occurs, the controls on the window already exist (their Constructor\nevents have occurred). In the Open event script, you can refer to objects in the window and\naffect their appearance or content. For example, you can disable a button or retrieve data for a\nDataWindow.\nSome actions are not appropriate in the Open event, even though all the controls exist. For\nexample, calling the SetRedraw function for a control fails because the window is not yet\nvisible.\nClosing a window by calling the Close function in any of the window's events or in an event\nof any control on the window can cause PowerBuilder to crash if the Close function is not\nthe last statement in the event script. You can avoid this issue by calling the Close function in\nthe last statement of the event script, or in a user-defined event that is posted from the event\nscript. For example, the following code in the Open event script for a window called w_1 can\ncause a crash:\n// w_1 Open event script \nclose(this)\nopen(w_2) // causes crash\nThis code does not cause a crash:\n// w_1 ue_postopen event script \nclose(this)\n \n// w_1 Open event script \nopen(w_2)\nthis.Post Event ue_postopen()\nChanging the WindowState property\nDo not change the WindowState property in the Open event of a window opened as a\nsheet. Doing so might result in duplicate controls on the title bar. You can change the\nproperty in other scripts once the window is open.\nWhen a window is opened, other events occur, such as Constructor for each control in\nthe window, Activate and Show for the window, and GetFocus for the first control in the\nwindow's tab order.\nWhen a sheet is opened in an MDI frame, other events occur, such as Show and Activate for\nthe sheet and Activate for the frame.\n"}
{"page": 298, "text": "Statements, Events, and Functions\nPage 298\nExamples\nWhen the window contains a DataWindow control, you can retrieve data for it in the Open\nevent. In this example, values for the transaction object SQLCA have already been set up:\ndw_1.SetTransObject(SQLCA)\ndw_1.Retrieve( )\nSee also\nActivate\nConstructor\nShow\n2.3.88 Other\nDescription\nOccurs when a system message occurs that is not a PowerBuilder message.\nEvent ID\nTable 2.253:\nEvent ID\nObjects\npbm_other\nWindows and controls that can be placed in\nwindows\nArguments\nTable 2.254:\nArgument\nDescription\nwparam\nUnsignedLong by value\nlparam\nLong by value\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe Other event is no longer useful, because you can define your own user events. You\nshould avoid using it, because it slows performance while it checks every Windows message.\n2.3.89 PageDown\nDescription\nOccurs when the user clicks in the open space below the scroll box.\n"}
{"page": 299, "text": "Statements, Events, and Functions\nPage 299\nEvent ID\nTable 2.255:\nEvent ID\nObjects\npbm_sbnpagedown\nVScrollBar, VTrackBar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in a vertical scroll bar, nothing happens unless you have scripts that\nchange the scroll bar's Position property. For the scroll bar arrows, use the LineUp and\nLineDown events; for clicks in the scroll bar background above and below the thumb, use the\nPageUp and PageDown events; for dragging the thumb itself, use the Moved event.\nExamples\nExample 1\nThis code in the VScrollBar's PageDown event uses a predetermined paging value stored in\nthe instance variable ii_pagesize to change the position of the scroll box (you would need\nadditional code to change the view of associated controls according to the scroll bar position):\nIF This.Position > &\n   This.MaxPosition - ii_pagesize THEN\n   This.Position = MaxPosition\nELSE\n   This.Position = This.Position + ii_pagesize\nEND IF\nRETURN 0\nExample 2\nThis example changes the position of the scroll box by a predetermined page size stored in\nthe instance variable ii_pagesize and scrolls forward through a DataWindow control 10 rows\nfor each page:\nlong ll_currow, ll_nextrow\n \nThis.Position = This.Position + ii_pagesize\nll_currow = dw_1.GetRow()\nll_nextrow = ll_currow + 10\ndw_1.ScrollToRow(ll_nextrow)\ndw_1.SetRow(ll_nextrow)\nSee also\nLineDown\n"}
{"page": 300, "text": "Statements, Events, and Functions\nPage 300\nPageLeft\nPageRight\nPageUp\n2.3.90 PageLeft\nDescription\nOccurs when the open space to the left of the scroll box is clicked.\nEvent ID\nTable 2.256:\nEvent ID\nObjects\npbm_sbnpageup\nHScrollBar, HTrackBar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in a horizontal scroll bar, nothing happens unless you have scripts that\nchange the scroll bar's Position property. For the scroll bar arrows, use the LineLeft and\nLineRight events; for clicks in the scroll bar background above and below the thumb, use the\nPageLeft and Right events; for dragging the thumb itself, use the Moved event.\nExamples\nThis code in the PageLeft event causes the thumb to move left a predetermined page size\nwhen the user clicks on the left arrow of the horizontal scroll bar (the page size is stored in\nthe instance variable ii_pagesize):\nIF This.Position < &\nThis.MinPosition + ii_pagesize THEN\n   This.Position = MinPosition\nELSE\n   This.Position = This.Position - ii_pagesize\nEND IF\nSee also\nLineLeft\nPageDown\nPageRight\nPageUp\n"}
{"page": 301, "text": "Statements, Events, and Functions\nPage 301\n2.3.91 PageRight\nDescription\nOccurs when the open space to the right of the scroll box is clicked.\nEvent ID\nTable 2.257:\nEvent ID\nObjects\npbm_sbnpagedown\nHScrollBar, HTrackBar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in a horizontal scroll bar, nothing happens unless you have scripts that\nchange the scroll bar's Position property:\n\u2022 For the scroll bar arrows, use the LineLeft and LineRight events.\n\u2022 For clicks in the scroll bar background above and below the thumb, use the PageLeft and\nRight event.\n\u2022 For dragging the thumb itself, use the Moved event.\nExamples\nThis code in the PageRight event causes the thumb to move right when the user clicks on\nthe right arrow of the horizontal scroll bar (the page size is stored in the instance variable\nii_pagesize):\nIF This.Position > &\nThis.MaxPosition - ii_pagesize THEN\n   This.Position = MaxPosition\nELSE\n   This.Position = This.Position + ii_pagesize\nEND IF\nSee also\nLineRight\nPageDown\nPageLeft\nPageUp\n"}
{"page": 302, "text": "Statements, Events, and Functions\nPage 302\n2.3.92 PageUp\nDescription\nOccurs when the user clicks in the open space above the scroll box (also called the thumb).\nEvent ID\nTable 2.258:\nEvent ID\nObjects\npbm_sbnpageup\nVScrollBar, VTrackBar\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in a vertical scroll bar, nothing happens unless you have scripts that\nchange the scroll bar's Position property:\n\u2022 For the scroll bar arrows, use the LineUp and LineDown events.\n\u2022 For clicks in the scroll bar background above and below the thumb, use the PageUp and\nPageDown events.\n\u2022 For dragging the thumb itself, use the Moved event.\nExamples\nExample 1\nThis code in the PageUp event causes the thumb to move up when the user clicks on the up\narrow of the vertical scroll bar (the page size is stored in the instance variable ii_pagesize):\nIF This.Position < &\nThis.MinPosition + ii_pagesize THEN\n   This.Position = MinPosition\nELSE\n   This.Position = This.Position - ii_pagesize\nEND IF\nExample 2\nThis example changes the position of the scroll box by a predetermined page size stored in\nthe instance variable ii_pagesize and scrolls backwards through a DataWindow control 10\nrows for each page:\nlong ll_currow, ll_prevrow\nThis.Position = This.Position - ii_pagesize\nll_currow = dw_1.GetRow( )\n"}
{"page": 303, "text": "Statements, Events, and Functions\nPage 303\nll_prevrow = ll_currow - 10\ndw_1.ScrollToRow(ll_prevrow)\ndw_1.SetRow(ll_prevrow)\nSee also\nLineUp\nPageDown\nPageLeft\nPageRight\n2.3.93 PictureSelected\nDescription\nOccurs when the user selects a picture in the RichTextEdit control by clicking it.\nEvent ID\nTable 2.259:\nEvent ID\nObjects\npbm_renpictureselected\nRichTextEdit\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nWhen the user clicks a picture in a RichTextEdit control rte_1, the picture is selected. This\ncode for the PictureSelected event selects the rest of the contents, copies the contents to a\nstring with RTF formatting intact, and pastes the formatted text into a second RichTextEdit\nrte_2:\nstring ls_transfer_rtf\n \nThis.SelectTextAll()\nls_transfer_rtf = This.CopyRTF()\n \nrte_2.PasteRTF(ls_transfer_rtf)\nSee also\nInputFieldSelected\n2.3.94 PipeEnd\nDescription\n"}
{"page": 304, "text": "Statements, Events, and Functions\nPage 304\nOccurs when pipeline processing is completed.\nEvent ID\nTable 2.260:\nEvent ID\nObjects\npbm_pipeend\nPipeline\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nYou can use the PipeEnd event to check the status of pipeline processing.\nThe Start and Repair functions initiate pipeline processing.\nFor a complete example of using a Pipeline object, see Section 4.6.2.1, \u201cBuilding a Pipeline\nobject\u201d in Application Techniques.\nExamples\nThis code in a Pipeline user object's PipeEnd event reports pipeline status in a StaticText\ncontrol:\nist_status.Text = \"Finished Pipeline Execution ...\"\nSee also\nPipeMeter\nPipeStart\n2.3.95 PipeMeter\nDescription\nOccurs during pipeline processing after each block of rows is read or written. The Commit\nfactor specified for the Pipeline in the Pipeline painter determines the size of each block.\nEvent ID\nTable 2.261:\nEvent ID\nObjects\npbm_pipemeter\nPipeline\nArguments\n"}
{"page": 305, "text": "Statements, Events, and Functions\nPage 305\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe Start and Repair functions initiate pipeline processing.\nIn the Pipeline painter, you can specify a Commit factor specifying the number of rows that\nwill be transferred before they are committed to the database. The PipeMeter event occurs for\neach block of rows as specified by the Commit factor.\nFor a complete example of using a Pipeline object, see Section 4.6.2.1, \u201cBuilding a Pipeline\nobject\u201d in Application Techniques.\nExamples\nThis code in a Pipeline user object's PipeMeter event report the number of rows that have\nbeen piped to the destination database:\nist_status.Text = String(This.RowsWritten) &\n   + \" rows written to the destination database.\"\nSee also\nPipeEnd\nPipeStart\n2.3.96 PipeStart\nDescription\nOccurs when pipeline processing begins.\nEvent ID\nTable 2.262:\nEvent ID\nObjects\npbm_pipestart\nPipeline\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\n"}
{"page": 306, "text": "Statements, Events, and Functions\nPage 306\nUsage\nYou can use the PipeStart event to check the status of pipeline processing.\nThe Start and Repair functions initiate pipeline processing.\nFor a complete example of using a Pipeline object, see Section 4.6.2.1, \u201cBuilding a Pipeline\nobject\u201d in Application Techniques.\nExamples\nThis code in a Pipeline user object's PipeStart event reports pipeline status in a StaticText\ncontrol:\nist_status.Text = \"Beginning Pipeline Execution ...\"\nSee also\nPipeEnd\nPipeMeter\n2.3.97 PrintFooter (obsolete)\nDescription\nOccurs when the footer of a page of the document in the RichTextEdit control is about to be\nprinted.\nObsolete event\nThe PrintHeader and PrintFooter events are obsolete. They are no longer triggered\nunder any circumstance. You must use the ShowHeadFoot function to edit headers\nand footers of pages in a rich text control at runtime.\nEvent ID\nTable 2.263:\nEvent ID\nObjects\npbm_renprintfooter\nRichTextEdit\n2.3.98 PrintHeader (obsolete)\nDescription\nOccurs when the header of a page of the document in the RichTextEdit control is about to be\nprinted.\nObsolete event\nThe PrintHeader and PrintFooter events are obsolete. They are no longer triggered\nunder any circumstance. You must use the ShowHeadFoot function to edit headers\nand footers of pages in a rich text control at runtime.\n"}
{"page": 307, "text": "Statements, Events, and Functions\nPage 307\nEvent ID\nTable 2.264:\nEvent ID\nObjects\npbm_renprintheader\nRichTextEdit\n2.3.99 PdfPrintFinished\nDescription\nOccurs when the process of printing PDF is completed.\nEvent ID\nTable 2.265:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.266:\nArgument\nDescription\npdfFile\nThe path and file name of the PDF file to be saved.\nresult\nThe result of operation. TRUE indicates success; FALSE indicates\nfailure.\nReturn Values\nNone\nSee also\nAddressChanged\nCertificateError\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStart\nNavigationStateChanged\nResourceRedirect\nTitleTextChanged\n"}
{"page": 308, "text": "Statements, Events, and Functions\nPage 308\n2.3.100 ProcessingFile\nDescription\nOccurs during the file compression or extraction process. This event can be used to display\nthe full path name of the file that is being compressed or decompressed.\nIf one of the files in the compressed archive failed to be extracted, the Error event instead of\nthe ProcessingFile event will be triggered.\nEvent ID\nTable 2.267:\nEvent ID\nObjects\nNone\nCompressorObject and ExtractorObject\nArguments\nTable 2.268:\nArgument\nDescription\nFileFullPath\nA readonly string whose value is the full path name of the file that is\nbeing compressed or decompressed.\nReturn Values\nNone\nSee also\nError\nFinished\nSizeCompleted\nStart\n2.3.101 ProgressIndex\nDescription\nOccurs periodically during synchronization after updates to a synchronization progress bar.\nEvent ID\nTable 2.269:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\n"}
{"page": 309, "text": "Statements, Events, and Functions\nPage 309\nTable 2.270:\nArgument\nDescription\nprogress_idx\nLong value representing the progress of the synchronization.\nprogress_max\nLong value indicating the progress limit of the synchronization.\nReturn Values\nNone\nUsage\nUse this event to update a progress indicator such as a progress bar.\nA progress_max value of 0 indicates the maximum value has not changed since the last time\nthe event was fired.\nSee also\nBeginLogScan\nEndLogScan\n2.3.102 PropertyChanged\nDescription\nOccurs after the OLE server changes the value of a property of the OLE object.\nEvent ID\nTable 2.271:\nEvent ID\nObjects\nNone\nOLE\nArguments\nTable 2.272:\nArgument\nDescription\npropertyname\nThe name of the property whose value changed. If propertyname is an\nempty string, a more general change occurred, such as changes to more\nthan one property.\nReturn Values\nNone (do not use a RETURN statement)\nUsage\nProperty change notifications are not supported by all OLE servers. The PropertyRequestEdit\nand PropertyChanged events occur only when the server supports these notifications.\n"}
{"page": 310, "text": "Statements, Events, and Functions\nPage 310\nProperty notifications are not sent when the object is being created or loaded. Otherwise,\nnotifications are sent for all bindable properties, no matter how the property is being changed.\nThe PropertyChanged event occurs after the property's value has changed. You can obtain the\nnew value through the automation interface. The change can no longer be canceled. If you\nwant to cancel a change, write a script for the PropertyRequestEdit event.\nSee also\nDataChange\nPropertyRequestEdit\nRename\nViewChange\n2.3.103 PropertyRequestEdit\nDescription\nOccurs when the OLE server is about to change the value of a property of the object in the\nOLE control.\nEvent ID\nTable 2.273:\nEvent ID\nObjects\nNone\nOLE\nArguments\nTable 2.274:\nArgument\nDescription\npropertyname\nString by value (the name of the property whose value changed).\nIf propertyname is an empty string, a more general change occurred, such\nas changes to more than one property.\ncancelchange\nBoolean by reference; determines whether the change will be canceled.\nValues are:\n\u2022 FALSE -- (Default) the change is allowed.\n\u2022 TRUE -- the change is canceled.\nReturn Values\nNone. Do not use a RETURN statement.\nUsage\nProperty change notifications are not supported by all OLE servers. The PropertyRequestEdit\nand PropertyChanged events only occur when the server supports these notifications.\n"}
{"page": 311, "text": "Statements, Events, and Functions\nPage 311\nProperty notifications are not sent when the object is being created or loaded. Otherwise,\nnotifications are sent for all bindable properties, no matter how the property is being changed.\nThe PropertyRequestEdit event gives you a chance to access the property's old value using\nthe automation interface and save it. To cancel the change, set the cancelchange argument to\ntrue.\nSee also\nDataChange\nPropertyChanged\nRename\nViewChange\n2.3.104 RButtonDown\nThe RButtonDown event has different arguments for different objects:\nTable 2.275:\nObject\nSee\nControls and windows, except RichTextEdit\nSyntax 1\nRichTextEdit control\nSyntax 2\n2.3.104.1 Syntax 1: For controls and windows, except RichTextEdit\nDescription\nFor a window, occurs when the right mouse button is pressed in an unoccupied area of the\nwindow (any area with no visible, enabled object). The window event will occur if the cursor\nis over an invisible or disabled control.\nFor a control, occurs when the right mouse button is pressed on the control.\nEvent ID\nTable 2.276:\nEvent ID\nObjects\npbm_rbuttondown\nWindows and controls that can be placed on\na window, except RichTextEdit\nArguments\nTable 2.277:\nArgument\nDescription\nflags\nUnsignedLong by value (the modifier keys and mouse buttons that are\npressed).\nValues are:\n"}
{"page": 312, "text": "Statements, Events, and Functions\nPage 312\nArgument\nDescription\n\u2022 1 -- Left mouse button\n\u2022 2 -- Right mouse button\n\u2022 4 -- Shift key\n\u2022 8 -- Ctrl key\n\u2022 16 -- Middle mouse button\nIn the RButtonDown event, the right mouse button is always pressed, so\n2 is always summed in the value of flags.\nFor an explanation of flags, see Syntax 2 of MouseMove.\nxpos\nInteger by value (the distance of the pointer from the left edge of the\nwindow's workspace in pixels).\nypos\nInteger by value (the distance of the pointer from the top of the window's\nworkspace in pixels).\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThese statements in the RButtonDown script for the window display a pop-up menu at\nthe cursor position. Menu4 was created in the Menu painter and includes a menu called\nm_language. Menu4 is not the menu for the active window and therefore needs to be created.\nNewMenu is an instance of Menu4 (datatype Menu4):\nMenu4 NewMenu\nNewMenu = CREATE Menu4\nNewMenu.m_language.PopMenu(xpos, ypos)\nIn a Multiple Document Interface (MDI) application, the arguments for PopMenu need to\nspecify coordinates relative to the MDI frame:\nNewMenu.m_language.PopMenu( &\n   w_frame.PointerX(), w_frame.PointerY())\nSee also\nClicked\n2.3.104.2 Syntax 2: For RichTextEdit controls\nDescription\nOccurs when the user presses the right mouse button on the RichTextEdit control and the\ncontrol's PopMenu property is set to false.\n"}
{"page": 313, "text": "Statements, Events, and Functions\nPage 313\nEvent ID\nTable 2.278:\nEvent ID\nObjects\npbm_renrbuttondown\nRichTextEdit\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nIf the control's PopMenu property is true, the standard RichTextEdit pop-up menu is\ndisplayed instead, and the RButtonDown event does not occur.\nYou can use the RButtonDown event to implement your own pop-up menu.\nSee also\nClicked\nRButtonDown\n2.3.105 RButtonUp\nDescription\nOccurs when the right mouse button is released.\nEvent ID\nTable 2.279:\nEvent ID\nObjects\npbm_renrbuttonup\nRichTextEdit\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\n1 -- Prevent processing\n"}
{"page": 314, "text": "Statements, Events, and Functions\nPage 314\nSee also\nRButtonDown\n2.3.106 RecognitionResult\nDescription\nOccurs when an InkEdit control gets results from a call to the RecognizeText function.\nEvent ID\nTable 2.280:\nEvent ID\nObjects\npbm_inkerecognition\nInkEdit\nArguments\nNone\nReturn Values\nNone\nExamples\nThis code in the RecognitionResult event allows the application to wait a few seconds while\nthe Text property of the ie_id InkEdit control is updated, then writes the recognized text to\nthe string variable ls_inktext:\nSleep(3)\nls_inktext = ie_id.Text\nSee also\nGetFocus\nStroke\n2.3.107 RemoteExec\nDescription\nOccurs when a DDE client application has sent a command.\nEvent ID\nTable 2.281:\nEvent ID\nObjects\npbm_ddeexecute\nWindow\nArguments\nNone\n"}
{"page": 315, "text": "Statements, Events, and Functions\nPage 315\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nSee also\nRemoteRequest\nRemoteSend\n2.3.108 RemoteHotLinkStart\nDescription\nOccurs when a DDE client application wants to start a hot link.\nEvent ID\nTable 2.282:\nEvent ID\nObjects\npbm_ddeadvise\nWindow\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nWhen both the DDE client and server are PowerBuilder applications, this example in a script\nin the client application triggers the RemoteHotLinkStart event in the server application\nwindow:\nStartHotLink(\"mysle\",\"pb_dde_server\",\"mytest\")\nIn the RemoteHotLinkStart event in the server application, set a boolean instance variable\nindicating that a hot link has been established:\nib_hotlink = TRUE\nSee also\nHotLinkAlarm\nRemoteHotLinkStop\nSetDataDDE\n"}
{"page": 316, "text": "Statements, Events, and Functions\nPage 316\nStartServerDDE\nStopServerDDE\n2.3.109 RemoteHotLinkStop\nDescription\nOccurs when a DDE client application wants to end a hot link.\nEvent ID\nTable 2.283:\nEvent ID\nObjects\npbm_ddeunadvise\nWindow\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nWhen both the DDE client and server are PowerBuilder applications, this example in a script\nin the client application triggers the RemoteHotLinkStop event in the server application\nwindow:\nStopHotLink(\"mysle\",\"pb_dde_server\",\"mytest\")\nIn the RemoteHotLinkStart event in the server application, set a boolean instance variable\nindicating that a hot link no longer exists:\nib_hotlink = FALSE\nSee also\nHotLinkAlarm\nRemoteHotLinkStart\nSetDataDDE\nStartServerDDE\nStopServerDDE\n2.3.110 RemoteRequest\nDescription\nOccurs when a DDE client application requests data.\n"}
{"page": 317, "text": "Statements, Events, and Functions\nPage 317\nEvent ID\nTable 2.284:\nEvent ID\nObjects\npbm_dderequest\nWindow\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nSee also\nRemoteExec\nRemoteSend\n2.3.111 RemoteSend\nDescription\nOccurs when a DDE client application has sent data.\nEvent ID\nTable 2.285:\nEvent ID\nObjects\npbm_ddepoke\nWindow\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nSee also\nRemoteExec\nRemoteRequest\n2.3.112 Rename\nDescription\n"}
{"page": 318, "text": "Statements, Events, and Functions\nPage 318\nOccurs when the server application notifies the control that the object has been renamed.\nEvent ID\nTable 2.286:\nEvent ID\nObjects\npbm_omnrename\nOLE\nArguments\nNone\nReturn Values\nLong.\nReturn code: Ignored\nUsage\nIf you want to retrieve the ObjectData blob value of an OLE control during the processing of\nthis event, you must post a user event back to the control or you will generate a runtime error.\nSee also\nDataChange\nPropertyRequestEdit\nPropertyChanged\nViewChange\n2.3.113 Resize\nDescription\nOccurs when the user or a script opens or resizes the client area of a window or DataWindow\ncontrol.\nEvent ID\nTable 2.287:\nEvent ID\nObjects\npbm_dwnresize\nDataWindow\npbm_size\nWindow\nArguments\nTable 2.288:\nArgument\nDescription\nsizetype\nUnsignedLong by value. The values are:\n"}
{"page": 319, "text": "Statements, Events, and Functions\nPage 319\nArgument\nDescription\n\u2022 0 -- (SIZE_RESTORED) The window or DataWindow has been\nresized, but it was not minimized or maximized. The user might have\ndragged the borders or a script might have called the Resize function.\n\u2022 1 -- (SIZE_MINIMIZED) The window or DataWindow has been\nminimized.\n\u2022 2 -- (SIZE_MAXIMIZED) The window or DataWindow has been\nmaximized.\n\u2022 3 -- (SIZE_MAXSHOW) This window is a pop-up window and some\nother window in the application has been restored to its former size\n(does not apply to DataWindow controls).\n\u2022 4 -- (SIZE_MAXHIDE) This window is a pop-up window and some\nother window in the application has been maximized (does not apply to\nDataWindow controls).\nnewwidth\nInteger by value (the width of the client area of a window or\nDataWindow control in PowerBuilder units).\nnewheight\nInteger by value (the height of the client area of a window or\nDataWindow control in PowerBuilder units).\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\n2.3.114 ResourceRedirect\nDescription\nOccurs when a resource load is redirected.\nEvent ID\nTable 2.289:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.290:\nArgument\nDescription\nredirectUrl\nThe new URL to be redirected to.\n"}
{"page": 320, "text": "Statements, Events, and Functions\nPage 320\nArgument\nDescription\nheaders\nThe response headers.\nReturn Values\nNone\nSee also\nAddressChanged\nCertificateError\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStart\nNavigationStateChanged\nPdfPrintFinished\nTitleTextChanged\n2.3.115 RightClicked\nThe RightClicked event has different arguments for different objects:\nTable 2.291:\nObject\nSee\nListView and Tab control\nSyntax 1\nTreeView control\nSyntax 2\n2.3.115.1 Syntax 1: For ListView and Tab controls\nDescription\nOccurs when the user clicks the right mouse button on the ListView control or the tab portion\nof the Tab control.\nEvent ID\nTable 2.292:\nEvent ID\nObjects\npbm_lvnrclicked\nListView\npbm_tcnrclicked\nTab\n"}
{"page": 321, "text": "Statements, Events, and Functions\nPage 321\nArguments\nTable 2.293:\nArgument\nDescription\nindex\nInteger by value (the index of the item or tab the user clicked)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nWhen the user clicks in the display area of the Tab control, the tab page user object gets an\nRButtonDown event rather than a RightClicked event for the Tab control.\nExamples\nThis example for the RightClicked event of a ListView control displays a pop-up menu when\nthe user clicks the right mouse button:\n// Declare a menu variable of type m_main\nm_main m_lv_popmenu\n// Create an instance of the menu variable\nm_lv_popmenu = CREATE m_main\n// Display menu at pointerposition\nm_lv_popmenu.m_entry.PopMenu(Parent.PointerX(), &\n   Parent.PointerY())\nSee also\nClicked\nRightDoubleClicked\n2.3.115.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user clicks the right mouse button on the TreeView control.\nEvent ID\nTable 2.294:\nEvent ID\nObjects\npbm_tvnrclicked\nTreeView\nArguments\nTable 2.295:\nArgument\nDescription\nhandle\nLong by value (the handle of the item the user clicked)\n"}
{"page": 322, "text": "Statements, Events, and Functions\nPage 322\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example for the RightClicked event of a TreeView control displays a pop-up menu when\nthe user clicks the right mouse button:\n// Declare a menu variable of type m_main\nm_main m_tv_popmenu\n \n// Create an instance of the menu variable\nm_tv_popmenu = CREATE m_main\n \n// Display menu at pointer position\nm_tv_popmenu.m_entry.PopMenu(Parent.PointerX(), &\n   Parent.PointerY())\nSee also\nClicked\nRightDoubleClicked\n2.3.116 RightDoubleClicked\nThe RightDoubleClicked event has different arguments for different objects:\nTable 2.296:\nObject\nSee\nListView and Tab control\nSyntax 1\nTreeView control\nSyntax 2\n2.3.116.1 Syntax 1: For ListView and Tab controls\nDescription\nOccurs when the user double-clicks the right mouse button on the ListView control or the tab\nportion of the Tab control.\nEvent ID\nTable 2.297:\nEvent ID\nObjects\npbm_lvnrdoubleclicked\nListView\npbm_tcnrdoubleclicked\nTab\nArguments\n"}
{"page": 323, "text": "Statements, Events, and Functions\nPage 323\nTable 2.298:\nArgument\nDescription\nindex\nInteger by value (the index of the item or tab the user double-clicked)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example deletes an item from the ListView when the user right-double-clicks on it and\nthen rearranges the items:\ninteger li_rtn\n \n// Delete the item\nli_rtn = This.DeleteItem(index)\n \nIF li_rtn = 1 THEN\n   This.Arrange( )\nELSE\n   MessageBox(\"Error\", Deletion failed!\")\nEND IF\nSee also\nDoubleClicked\nRightClicked\n2.3.116.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the user double-clicks the right mouse button on the TreeView control.\nEvent ID\nTable 2.299:\nEvent ID\nObjects\npbm_tvnrdoubleclicked\nTreeView\nArguments\nTable 2.300:\nArgument\nDescription\nhandle\nLong by value (the handle of the item the user double-clicked)\nReturn Values\n"}
{"page": 324, "text": "Statements, Events, and Functions\nPage 324\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThis example toggles between displaying and hiding TreeView lines when the user right-\ndouble-clicks on the control:\nIF This.HasLines = FALSE THEN\n   This.HasLines = TRUE\n   This.LinesAtRoot = TRUE\nELSE\n   This.HasLines = FALSE\n   This.LinesAtRoot = FALSE\nEND IF\nSee also\nDoubleClicked\nRightClicked\n2.3.117 Save\nDescription\nOccurs when the server application notifies the control that the data has been saved.\nEvent ID\nTable 2.301:\nEvent ID\nObjects\npbm_omnsave\nOLE\nArguments\nNone\nReturn Values\nLong.\nReturn code: Ignored\nUsage\nIf you want to retrieve the ObjectData blob value of an OLE control during the processing of\nthis event, you must post a user event back to the control or you generate a runtime error.\nExamples\nIn this example, a table in a database tracks changes of OLE objects; when the user saves an\nExcel spreadsheet in an OLE control, this code puts the current date in a DataWindow so that\nthe database table can be updated:\nlong ll_row\n// Find the row with information for the Excel file\n"}
{"page": 325, "text": "Statements, Events, and Functions\nPage 325\nll_row = dw_1.Find(\"file_name = 'expenses.xls'\", &\n   1, 999)\n \nIF ll_row > 0 THEN\n   // Make the found row current\n   dw_1.SetRow(ll_row)\n \n   // Put today's date in the last_updated column\n   dw_1.Object.last_updated[ll_row] = Today( )\n \n   // Update and refresh the DataWindow\n   dw_1.Update( )\n   dw_1.Retrieve( )\nELSE\n   MessageBox(\"Find\", \"No row found\")\nEND IF\nSee also\nClose\nSaveObject\n2.3.118 SaveObject\nDescription\nOccurs when the server application saves the object in the control.\nEvent ID\nTable 2.302:\nEvent ID\nObjects\npbm_omnsaveobject\nOLE\nArguments\nNone\nReturn Values\nLong.\nReturn code: Ignored\nUsage\nUsing the SaveObject event is the preferred technique for retrieving the ObjectData blob\nvalue of an OLE control when the server saves the data in the embedded object. Unlike the\nSave and Close events, the SaveObject event does not require you to post a user event back to\nthe control to prevent the generation of a runtime error.\nBecause of differences in the behavior of individual servers, this event is not triggered\nconsistently across all server applications. Using Microsoft Word or Excel, the\nSaveObject event is triggered when the DisplayType property of the control is\nset to DisplayAsActiveXDocument! or DisplayAsIcon!, but not when it is set to\nDisplayAsContent!. For other applications, such as Paint Shop Pro, the event is triggered\nwhen the display type is DisplayAsContent! but not when it is DisplayAsActiveXDocument!.\n"}
{"page": 326, "text": "Statements, Events, and Functions\nPage 326\nBecause some servers might also fire the PowerBuilder Save event and the relative timing of\nthe two events cannot be guaranteed, your program should handle only the SaveObject event.\nExamples\nIn this example, when the user or the server application saves a Word document in an OLE\ncontrol, the data is saved as a blob in a file. The file can then be opened as a Word document:\nblob l_myobjectdata\nl_myobjectdata = this.objectdata\ninteger  l_file\nl_file = FileOpen(\"c:\\myfile.doc\", StreamMode!, Write!)\nFileWrite( l_file, l_myobjectdata )\nFileClose( l_file )\nSee also\nClose\nSave\n2.3.119 Selected\n2.3.119.1 Syntax 1: For Ribbon controls\nDescription\nThis is a user event which occurs when the user highlights an item within the RibbonBar\ncontrol.\nMake sure the parameter (quantities and types) of the user event is correctly defined\naccording to the requirement of the ribbon control.\nApplies to\nRibbon controls (including RibbonTabButtonItem, RibbonLargeButtonItem,\nRibbonSmallButtonItem, RibbonCheckBoxItem, RibbonComboBoxItem, and\nRibbonMenuItem)\nArguments for RibbonTabButtonItem, RibbonLargeButtonItem,\nRibbonSmallButtonItem, RibbonCheckBoxItem, RibbonComboBoxItem\nTable 2.303:\nArgument\nDescription\nItemHandle\nLong. The handle of the item.\nArguments for RibbonMenuItem (of Normal(0) type)\nTable 2.304:\nArgument\nDescription\nItemHandle\nLong. The handle of the button the menu is associated with.\nIndex\nLong. The index of the menu item the mouse is on.\n"}
{"page": 327, "text": "Statements, Events, and Functions\nPage 327\nArgument\nDescription\nSubIndex\nLong. The index of the submenu item the mouse is on. 0 indicates the\nevent is triggered by the main menu.\nArguments for RibbonMenuItem (of Recent(2) type)\nTable 2.305:\nArgument\nDescription\nItemHandle\nLong. The handle of the button the menu is associated with.\nIndex\nLong. The index of the menu item the mouse is on.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExample\nThis example is a user event for a tab button. In this example, the Ue_TabButtonSelected\nuser event must be defined with a long parameter for receiving the handle of the tab button\nwhere the mouse is hovering.\nRibbonTabButtonItem lr_TabButton\nlr_TabButton.Selected = \"Ue_TabButtonSelected\"\n//Ue_TabButtonSelected user event must have a long parameter for receiving \n//the handle of TabButton where the mouse is hovering, as below\nevent type long ue_tabbuttonselected(long itemhandle);\nRibbonTabButtonItem lr_TabButton\nrbb_1.GetTabButton(ItemHandle,lr_TabButton)\n//...\nReturn 1\nend event\nThis example is a user event for a menu item in the ribbon menu. In this example, the\nUe_MenuSelected user event must be defined with three long parameters for receiving the\nhandle of the tab/large/small button and the index numbers of the menu item and submenu\nitem. Each menu item can be bound with different events or the same event.\n//Ue_MenuSelected user event must have three long parameters for receiving the \n//handle of Tab/Large/Small Button and the index number of the menu and \n//sub menu. Each MenuItem can bind with different events or the same event.\n//In the following example, the same event is bound to get RibbonMenu:\nevent type long ue_menuselected(long itemhandle, long index, long subindex);\nInteger li_Return\nRibbonMenu lr_Menu\nRibbonMenuItem lr_MenuItem\nli_Return = rbb_1.GetMenuByButtonHandle(ItemHandle, lr_Menu)\nIf li_Return = 1 Then\n If SubIndex = 0 Then\n  li_Return = lr_Menu.GetItem(Index, lr_MenuItem)\n"}
{"page": 328, "text": "Statements, Events, and Functions\nPage 328\n  //...\n Else\n  li_Return = lr_Menu.GetItem(Index, SubIndex, lr_MenuItem)\n  //...\n End If\nElse\n Return 0\nEnd If\nReturn 1\nend event\nThis example is a user event for a master menu item in the application button. In this\nexample, the Ue_MasterMenuSelected user event must be defined with three Long\nparameters for receiving the handle of the application button and the index number of the\nmaster menu item and submenu item. Each menu item can be bound with different events or\nthe same event.\n//Ue_MasterMenuSelected user event must have three Long parameters for receiving\n//the handle of Application Button and the index number of the master menu and\n//sub menu. Each MenuItem can bind with different events or the same event.\n//In the following example, the same event is bound to get RibbonApplicationMenu:\nevent type long ue_mastermenuselected(long itemhandle, long index, long subindex);\nInteger li_Return\nRibbonApplicationMenu lr_Menu\nRibbonMenuItem lr_MenuItem\nli_Return = rbb_1.GetMenuByButtonHandle(ItemHandle, lr_Menu)\nIf li_Return = 1 Then\n If SubIndex = 0 Then\n  li_Return = lr_Menu.GetMasterItem(Index, lr_MenuItem)\n  //...\n Else\n  li_Return = lr_Menu.GetMasterItem(Index, SubIndex, lr_MenuItem)\n  //...\n End If\nElse\n Return 0\nEnd If\nReturn 1\nend event\nThis example is a user event for the recent menu item in the application menu. In this\nexample, the Ue_RecentMenuSelected user event must be defined with two Long parameters\nfor receiving the handle of the application button and the index number of the recent menu\nitem. Each menu item can be bound with different events or the same event.\n//Ue_RecentMenuSelected user event must have two Long parameters for receiving \n//the handle of ApplicationButton and the index number of Recent \n//Menu. Each MenuItem can bind with different events or the same event.\n//In the following example, the same event is bound to get RibbonApplicationMenu.\nevent type long ue_recentmenuselected(long itemhandle, long index);\nInteger li_Return\nRibbonApplicationMenu lr_Menu\nRibbonMenuItem lr_MenuItem\nli_Return = rbb_1.GetMenuByButtonHandle(ItemHandle,lr_Menu)\nIf li_Return = 1 Then\n"}
{"page": 329, "text": "Statements, Events, and Functions\nPage 329\n li_Return = lr_Menu.GetRecentItem(Index,lr_MenuItem)\n //...\nElse\n Return 0\nEnd If\nReturn 1\nend event\nSee also\nClicked\nModified\nSelectionChanged\n2.3.119.2 Syntax 2: for all other controls\nDescription\nOccurs when the user highlights an item on the menu using the arrow keys or the mouse,\nwithout choosing it to be executed.\nEvent ID\nTable 2.306:\nEvent ID\nObjects\nNone\nMenu\nArguments\nNone\nReturn Values\nNone. (Do not use a RETURN statement.)\nUsage\nYou can use the Selected event to display MicroHelp for the menu item. One way to store the\nHelp text is in the menu item's Tag property.\nExamples\nThis example uses the tag value of the current menu item to display Help text. The function\nwf_SetMenuHelp takes the text passed (the tag) and assigns it to a MultiLineEdit control. A\nTimer function and the Timer event are used to clear the Help text.\nThis code in the Selected event calls the function that sets the text:\nw_test.wf_SetMenuHelp(This.Tag)\nThis code for the wf_SetMenuHelp function sets the text in the MultiLineEdit\nmle_menuhelp; its argument is called menuhelpstring:\nmle_menuhelp.Text = menuhelpstring\nTimer(4)\nThis code in the Timer event clears the Help text and stops the timer:\n"}
{"page": 330, "text": "Statements, Events, and Functions\nPage 330\nw_test.wf_SetMenuHelp(\"\")\nTimer(0)\nSee also\nClicked\n2.3.120 SelectionChanged\nThe SelectionChanged event has different arguments for different objects:\nTable 2.307:\nObject\nSee\nDropDownListBox,\nDropDownPictureListBox, ListBox,\nPictureListBox controls\nSyntax 1\nTab control\nSyntax 2\nTreeView control\nSyntax 3\nRibbon control\nSyntax 4\n2.3.120.1 Syntax 1: For Listboxes\nDescription\nOccurs when an item is selected in the control.\nEvent ID\nTable 2.308:\nEvent ID\nObjects\npbm_cbnselchange\nDropDownListBox,\nDropDownPictureListBox\npbm_lbnselchange\nListBox, PictureListBox\nArguments\nTable 2.309:\nArgument\nDescription\nindex\nInteger by value (the index of the item that has become selected)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\n"}
{"page": 331, "text": "Statements, Events, and Functions\nPage 331\nFor DropDownListBoxes, the SelectionChanged event applies to selections in the drop-down\nportion of the control, not the edit box.\nThe SelectionChanged event occurs when the user clicks on any item in the list, even if it is\nthe currently selected item. When the user makes a selection using the mouse, the Clicked\n(and if applicable the DoubleClicked event) occurs after the SelectionChanged event.\nExamples\nThis example is for the lb_value ListBox in the window w_graph_sheet_with_list in the\nPowerBuilder Examples application. When the user chooses values, they are graphed as\nseries in the graph gr_1. The MultiSelect property for the ListBox is set to true, so index has\nno effect. The script checks all the items to see if they are selected:\ninteger itemcount,i,r\nstring ls_colname\n \ngr_1.SetRedraw(FALSE)\n \n// Clear out categories, series and data from graph\ngr_1.Reset(All!)\n \n// Loop through all selected values and\n// create as many series as the user specified\nFOR i = 1 to lb_value.TotalItems()\n   IF lb_value.State(i) = 1 THEN\n      ls_colname = lb_value.Text(i)\n \n      // Call window function to set up the graph\n      wf_set_a_series(ls_colname, ls_colname, &\n      lb_category.text(1))\n   END IF\nNEXT\ngr_1.SetRedraw(TRUE)\nSee also\nClicked\n2.3.120.2 Syntax 2: For Tab controls\nDescription\nOccurs when a tab is selected.\nEvent ID\nTable 2.310:\nEvent ID\nObjects\npbm_tcnselchanged\nTab\nArguments\nTable 2.311:\nArgument\nDescription\noldindex\nInteger by value (the index of the tab that was previously selected)\n"}
{"page": 332, "text": "Statements, Events, and Functions\nPage 332\nArgument\nDescription\nnewindex\nInteger by value (the index of the tab that has become selected)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe SelectionChanged event occurs when the Tab control is created and the initial selection\nis set.\nSee also\nClicked\nSelectionChanging\n2.3.120.3 Syntax 3: For TreeView controls\nDescription\nOccurs when the item is selected in a TreeView control.\nEvent ID\nTable 2.312:\nEvent ID\nObjects\npbm_tvnselchanged\nTreeView\nArguments\nTable 2.313:\nArgument\nDescription\noldhandle\nLong by value (the handle of the previously selected item)\nnewhandle\nLong by value (the handle of the currently selected item)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe SelectionChanged event occurs after the SelectionChanging event.\n"}
{"page": 333, "text": "Statements, Events, and Functions\nPage 333\nExamples\nThis example tracks items in the SelectionChanged event:\nTreeViewItem l_tvinew, l_tviold\n \n// get the treeview item that was the old selection\nThis.GetItem(oldhandle, l_tviold)\n \n// get the treeview item that is currently selected\nThis.GetItem(newhandle, l_tvinew)\n \n// Display the labels for the two items in sle_get\nsle_get.Text = \"Selection changed from \" &\n   + String(l_tviold.Label) + \" to \" &\n   + String(l_tvinew.Label)\nSee also\nClicked\nSelectionChanging\n2.3.120.4 Syntax 4: For Ribbon controls\nDescription\nThis is a user event which occurs when the item is selected in the ribbon combo box control.\nMake sure the parameter (quantities and types) of the user event is correctly defined\naccording to the requirement of the ribbon combo box control.\nApplies to\nRibbonComboBoxItem controls\nArguments\nTable 2.314:\nArgument\nDescription\nItemHandle\nLong. The handle of the item.\nindex\nLong. The index of the item selected.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExample\nThis example is a user event for a combo box. In this example, the\nUe_ComboBoxSelectionChanged user event must be defined with two long parameters for\nreceiving the handle and index number of the combo box which is selected.\n//Ue_ComboBoxSelectionChanged user event must have two long parameters for \n//receiving the handle and index number of ComboBox which is selected\n"}
{"page": 334, "text": "Statements, Events, and Functions\nPage 334\nevent type long ue_comboboxselectionchanged(long itemhandle, long index);\nInteger li_Return\nString ls_Text\nRibbonComboBoxItem lr_ComboBox\nli_Return = rbb_1.GetComboBox(ItemHandle,lr_ComboBox)\nIf li_Return = 1 Then\n ls_Text = lr_ComboBox.Text(Index)\nEnd If\nReturn 1\nend event\nSee also\nClicked\nModified\nSelected\n2.3.121 SelectionChanging\nThe SelectionChanging event has different arguments for different objects:\nTable 2.315:\nObject\nSee\nTab control\nSyntax 1\nTreeView control\nSyntax 2\n2.3.121.1 Syntax 1: For Tab controls\nDescription\nOccurs when another tab is about to be selected.\nEvent ID\nTable 2.316:\nEvent ID\nObjects\npbm_tcnselchanging\nTab\nArguments\nTable 2.317:\nArgument\nDescription\noldindex\nInteger by value (the index of the currently selected tab)\nnewindex\nInteger by value (the index of the tab that is about to be selected)\nReturn Values\n"}
{"page": 335, "text": "Statements, Events, and Functions\nPage 335\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Allow the selection to change\n1 -- Prevent the selection from changing\nUsage\nUse the SelectionChanging event to prevent the selection from changing or to do processing\nfor the newly selected tab page before it becomes visible. If CreateOnDemand is true and\nthis is the first time the tab page is selected, the controls on the page do not exist yet, and you\ncannot refer to them in the event script.\nExamples\nWhen the user selects a tab, this code sizes the DataWindow control on the tab page to match\nthe size of another DataWindow control. The resizing happens before the tab page becomes\nvisible. This example is from tab_uo in the w_phone_dir window in the PowerBuilder\nExamples:\nu_tab_dir luo_Tab\nluo_Tab = This.Control[newindex]\nluo_Tab.dw_dir.Height = dw_list.Height\nluo_Tab.dw_dir.Width = dw_list.Width\nSee also\nClicked\nSelectionChanged\n2.3.121.2 Syntax 2: For TreeView controls\nDescription\nOccurs when the selection is about to change in the TreeView control.\nEvent ID\nTable 2.318:\nEvent ID\nObjects\npbm_tvnselchanging\nTreeView\nArguments\nTable 2.319:\nArgument\nDescription\noldhandle\nLong by value (the handle of the currently selected item)\nnewhandle\nLong by value (the handle of the item that is about to be selected)\nReturn Values\n"}
{"page": 336, "text": "Statements, Events, and Functions\nPage 336\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Allow the selection to change\n1 -- Prevent the selection from changing\nUsage\nThe SelectionChanging event occurs before the SelectionChanged event.\nExamples\nThis example displays the status of changing TreeView items in a SingleLineEdit:\nTreeViewItem l_tvinew, l_tviold\n \n// Get TreeViewItem that was the old selection\nThis.GetItem(oldhandle, l_tviold)\n \n// Get TreeViewItem that is currently selected\nThis.GetItem(newhandle, l_tvinew)\n \n//Display the labels for the two items in display\nsle_status.Text = \"Selection changed from \" &\n   + String(l_tviold.Label) + \" to \" &\n   + String(l_tvinew.Label)\nSee also\nClicked\nSelectionChanged\n2.3.122 Show\nDescription\nOccurs just before the window is displayed.\nEvent ID\nTable 2.320:\nEvent ID\nObjects\npbm_showwindow\nWindow\nArguments\nTable 2.321:\nArgument\nDescription\nshow\nBoolean by value (whether the window is being shown). The value is\nalways true.\nstatus\nLong by value (the status of the window).\nValues are:\n"}
{"page": 337, "text": "Statements, Events, and Functions\nPage 337\nArgument\nDescription\n\u2022 0 -- The current window is the only one affected.\n\u2022 1 -- The window's parent is also being minimized or a pop-up window\nis being hidden.\n\u2022 3 -- The window's parent is also being displayed or maximized or a\npop-up window is being shown.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe Show event occurs when the window is opened.\nSee also\nActivate\nHide\nOpen\n2.3.123 SizeCompleted\nDescription\nOccurs during the file compression or extraction process. This event can be used to display\nthe total number of bytes in the file that has been compressed or decompressed.\nEvent ID\nTable 2.322:\nEvent ID\nObjects\nNone\nCompressorObject and ExtractorObject\nArguments\nTable 2.323:\nArgument\nDescription\nCompletedSize\nA longlong whose value is the total number of bytes in the file that has\nbeen compressed or decompressed.\nReturn Values\nNone\n"}
{"page": 338, "text": "Statements, Events, and Functions\nPage 338\nSee also\nError\nFinished\nProcessingFile\nStart\n2.3.124 Sort\nThe Sort event has different arguments for different objects:\nTable 2.324:\nObject\nSee\nListView control\nSyntax 1\nTreeView control\nSyntax 2\n2.3.124.1 Syntax 1: For ListView controls\nDescription\nOccurs for each comparison when the ListView is being sorted.\nEvent ID\nTable 2.325:\nEvent ID\nObjects\npbm_lvnsort\nListView\nArguments\nTable 2.326:\nArgument\nDescription\nindex1\nInteger by value (the index of one item being compared during a sorting\noperation)\nindex2\nInteger by value (the index of the second item being compared)\ncolumn\nInteger by value (the number of the column containing the items being\nsorted)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n-1 -- index1 is less than index2\n"}
{"page": 339, "text": "Statements, Events, and Functions\nPage 339\n0 -- index1 is equal to index2\n1 -- index1 is greater than index2\nUsage\nThe Sort event allows you to fine-tune the sort order of the items being sorted. You can\nexamine the properties of each item and tell the Sort function how to sort them by selecting\none of the return codes.\nYou typically use the Sort event when you want to sort ListView items based on multiple\ncriteria such as a PictureIndex and Label.\nThe Sort event occurs if you call the Sort event, or when you call the Sort function using the\nUserDefinedSort! argument.\nExamples\nThis example sorts ListView items according to PictureIndex and Label sorting by\nPictureIndex first, and then by label:\nListViewItem lvi, lvi2\n \nThis.GetItem(index1, lvi)\nThis.GetItem(index2, lvi2)\n \nIF lvi.PictureIndex > lvi2.PictureIndex THEN\n   RETURN 1\nELSEIF lvi.PictureIndex < lvi2.PictureIndex THEN\n   RETURN -1\nELSEIF lvi.label > lvi2.label THEN\n   RETURN 1\nELSEIF lvi.label < lvi2.label THEN\n   RETURN -1\nELSE\n   RETURN 0\nEND IF\n2.3.124.2 Syntax 2: For TreeView controls\nDescription\nOccurs for each comparison when the TreeView is being sorted.\nEvent ID\nTable 2.327:\nEvent ID\nObjects\npbm_tvnsort\nTreeView\nArguments\nTable 2.328:\nArgument\nDescription\nhandle1\nLong by value (the handle of one item being compared during a sorting\noperation)\n"}
{"page": 340, "text": "Statements, Events, and Functions\nPage 340\nArgument\nDescription\nhandle2\nLong by value (the handle of the second item being compared)\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n-1 -- handle1 is less than handle2\n0 -- handle1 is equal to handle2\n1 -- handle1 is greater than handle2\nUsage\nThe Sort event allows you to fine-tune the sort order of the items being sorted. You can\nexamine the properties of each item and tell the Sort function how to sort them by selecting\none of the return codes.\nYou typically use the Sort event when you want to sort TreeView items based on multiple\ncriteria such as a PictureIndex and Label.\nThe Sort event occurs if you call the Sort event, or when you call the Sort function using the\nUserDefinedSort! argument.\nExamples\nThis example sorts TreeView items according to PictureIndex and Label sorting by\nPictureIndex first, then by label:\nTreeViewItem tvi, tvi2\n \nThis.GetItem(handle1, tvi)\nThis.GetItem(handle2, tvi2)\n \nIF tvi.PictureIndex > tvi2.PictureIndex THEN\n   RETURN 1\nELSEIF tvi.PictureIndex < tvi2.PictureIndex THEN\n   RETURN -1\nELSEIF tvi.Label > tvi2.Label THEN\n   RETURN 1\nELSEIF tvi.Label < tvi2.Label THEN\n   RETURN -1\nELSE\n   RETURN 0\nEND IF\n2.3.125 SQLPreview\nDescription\nOccurs immediately before a SQL statement is submitted to the DBMS.\nEvent ID\nTable 2.329:\nEvent ID\nObjects\nNone\nTransaction objects\n"}
{"page": 341, "text": "Statements, Events, and Functions\nPage 341\nArguments\nTable 2.330:\nArgument\nDescription\nsqlfunc\nThe SQLFunction system enumeration passed by value. This\nenumeration indicates the function that initiated database activity.\nValues for this enumeration are: SQLDBInsert! SQLDBUpdate!,\nSQLDBDelete!, SQLDBSelect!, SQLDBProcedure!, SQLDBRPC!, and\nSQLDBOthers!.\nsqlsyntax\nString by value. The full text of the SQL statement.\nReturn Values\nLong. Set the return code to affect the outcome of the event:\n0 -- Continue processing\n1 -- Stop processing\nUsage\nUse with embedded SQL\nThis event is triggered before SQL statements are passed to the DBMS.\nUse with DataWindow/DataStore\nWhen using this event of the Transaction object with a DataWindow that also defines a\nSQLPreview event, the DataWindow's event is fired first. If the return value of DataWindow\nSQLPreview event is 0 (continue processing), the Transaction object's SQLPreview event is\ntriggered next.\nExamples\nIn this embedded SQL cursor example, the SQLPreview event is invoked just before the\nOPEN Emp_curs; statement is executed:\nDECLARE Emp_cur CURSOR FOR SELECT employee.emp_number,\n  employee.emp_name FROM employee \nWHERE employee.emp_salary > :Sal_var ;\nOPEN Emp_curs ;\nIn this dynamic SQL example, the SQLPreview event is invoked just before the EXECUTE\nDYNAMIC my_proc DESCRIPTOR SQLDA statement is executed:\nPREPARE SQLSA FROM  \"execute @rc = myproc @parm1=?,\n   @parm2=? OUTPUT \";\nDESCRIBE SQLSA INTO SQLDA ;\nDECLARE my_proc DYNAMIC PROCEDURE FOR SQLSA ;\nSetDynamicParm(SQLDA, 1, var1)\nSetDynamicParm(SQLDA, 2, var2)\nEXECUTE DYNAMIC my_proc DESCRIPTOR SQLDA ;\nSee also\nDBError\n"}
{"page": 342, "text": "Statements, Events, and Functions\nPage 342\nSQLPreview in Section 8.53, \u201cSQLPreview\u201d in DataWindow Reference\n2.3.126 Start\n2.3.126.1 Syntax 1: for Animation controls\nDescription\nOccurs when an animation has started playing.\nEvent ID\nTable 2.331:\nEvent ID\nObjects\npbm_animatestart\nAnimation\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nSee also\nStop\n2.3.126.2 Syntax 2: for CompressorObject and ExtractorObject objects\nDescription\nOccurs before the file compression or extraction starts. This event can be used to display the\ntotal number of bytes in the file that will be compressed or decompressed.\nEvent ID\nTable 2.332:\nEvent ID\nObjects\nNone\nCompressorObject and ExtractorObject\nArguments\nTable 2.333:\nArgument\nDescription\nTotalSize\nFor CompressorObject, it is a longlong whose value is the total number\nof bytes in the file that will be compressed, plus the size of some\nadditional meta data.\n"}
{"page": 343, "text": "Statements, Events, and Functions\nPage 343\nArgument\nDescription\nFor ExtractorObject, it is a longlong whose value is the original size of all\nfiles in the compressed archive.\nReturn Values\nNone\nSee also\nError\nFinished\nProcessingFile\nSizeCompleted\n2.3.127 Stop\nDescription\nOccurs when an animation has stopped playing.\nEvent ID\nTable 2.334:\nEvent ID\nObjects\npbm_animatestop\nAnimation\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nSee also\nTimer\n2.3.128 Stroke\nDescription\nOccurs when the user draws a new stroke.\nEvent ID\nTable 2.335:\nEvent ID\nObjects\npbm_inkestroke, pbm_inkpstroke\nInkEdit, InkPicture\n"}
{"page": 344, "text": "Statements, Events, and Functions\nPage 344\nArguments\nNone\nReturn Values\nBoolean.\nReturn true to erase the stroke and false otherwise.\nUsage\nIf the InkMode property of an InkEdit control is set to InkDisabled!, or the\nInkCollectionMode property of an InkPicture control is set to GestureOnly!, the Stroke event\nis not triggered.\nSee also\nGesture\nRecognitionResult\n2.3.129 SyncPreview\nDescription\nReturns generated dbmlsync command arguments immediately prior to launching the\nsynchronization process.\nEvent ID\nTable 2.336:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.337:\nArgument\nDescription\ncommand_args\nString passed by reference that includes dbmlsync command arguments\nfor launching the synchronization process.\nReturn Values\nNone\nUsage\nUse this event to receive and display dbmlsync command line arguments. The event\nis called by the Synchronize function just before it launches dbmlsync. The generated\ncommand arguments for dbmlsync are passed by reference in the command_args string.\nYou can change the command_args string with PowerScript code or with the debugger. If\ncommand_args are changed, the Synchronize function will use the new argument string.\n"}
{"page": 345, "text": "Statements, Events, and Functions\nPage 345\nSee also\nBeginDownload\nBeginSync\n2.3.130 SystemError\nDescription\nOccurs when a serious runtime error occurs (such as trying to open a nonexistent window) if\nthe error is not handled in a try-catch block.\nEvent ID\nTable 2.338:\nEvent ID\nObjects\nNone\nApplication\nArguments\nNone\nReturn Values\nNone. (Do not use a RETURN statement.)\nUsage\nIf there is no script for the SystemError event, PowerBuilder displays a message box with the\nPowerBuilder error number and error message text. For information about error messages,\nsee Section 7.1.3.2, \u201cHandling errors at runtime\u201d in Users Guide.\nIf you comment out the entire script in the SystemError event, in a standard PowerBuilder\napplication the event is still triggered and the message box does not display.\nFor errors involving external objects and DataWindows, you can handle the error in the\nExternalException or Error events and prevent the SystemError event from occurring. The\nExternalException and Error events are maintained for backward compatibility.\nYou can prevent the SystemError event from occurring by handling errors in try-catch blocks.\nWell-designed exception-handling code gives application users a better chance to recover\nfrom error conditions and run the application without interruption. For information about\nexception handling, see Section 2.2.9, \u201cException handling in PowerBuilder\u201d in Application\nTechniques.\nWhen a SystemError event occurs, your current script terminates and your system might\nbecome unstable. It is generally not a good idea to continue running the application, but\nyou can use the SystemError event script to clean up and disconnect from the DBMS before\nclosing the application.\nExamples\nThis statement in the SystemError event halts the application immediately:\nHALT CLOSE\n"}
{"page": 346, "text": "Statements, Events, and Functions\nPage 346\nSee also\nError\nExternalException\nTRY...CATCH...FINALLY...END TRY\n2.3.131 SystemKey\nDescription\nOccurs when the insertion point is not in a line edit, and the user presses the Alt key (alone or\nwith another key).\nEvent ID\nTable 2.339:\nEvent ID\nObjects\npbm_syskeydown\nWindow\nArguments\nTable 2.340:\nArgument\nDescription\nkey\nKeyCode by value. A value of the KeyCode enumerated datatype\nindicating the key that was pressed, for example, KeyA! or KeyF1!.\nkeyflags\nUnsignedLong by value (the modifier keys that were pressed with the\nkey). The only modifier key is the Shift key.\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nPressing the Ctrl key prevents the SystemKey event from firing when the Alt key is pressed.\nExamples\nThis example displays the name of the key that was pressed with the Alt key:\nstring ls_key\n \nCHOOSE CASE key\n \nCASE KeyF1!\n   ls_key = \"F1\"\nCASE KeyA!\n   ls_key = \"A\"\n"}
{"page": 347, "text": "Statements, Events, and Functions\nPage 347\nCASE KeyF2!\n   ls_key = \"F2\"\nEND CHOOSE\nThis example causes a beep if the user presses Alt+Shift+F1.\nIF keyflags = 1 THEN\n   IF key = KeyF1 THEN\n      Beep(1)\n   END IF\nEND IF\nSee also\nKey\n2.3.132 Timer\nDescription\nOccurs when a specified number of seconds elapses after the Start or Timer function has been\ncalled.\nEvent ID\nTable 2.341:\nEvent ID\nObjects\npbm_timer\nTiming or Window\nArguments\nNone\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nExamples\nThese examples show how to use a timing object's Timer event and a window's Timer event.\nUsing a timing object\nThis example uses a timing object to refresh a list of customers retrieved from a database at\nspecified intervals. The main window of the application, w_main, contains a DataWindow\ncontrol displaying a list of customers and two buttons, Start Timer and Retrieve. The\nwindow's Open event connects to the database:\nCONNECT using SQLCA;\n \nIF sqlca.sqlcode <> 0 THEN\n   MessageBox(\"Database Connection\", &\n      sqlca.sqlerrtext)\nEND IF\n"}
{"page": 348, "text": "Statements, Events, and Functions\nPage 348\nThe following code in the clicked event of the Start Timer button creates an instance of a\ntiming object, nvo_timer, and opens a response window to obtain a timing interval. Then, it\nstarts the timer with the specified interval:\nMyTimer = CREATE nvo_timer\nopen(w_interval)\nMyTimer.Start(d_interval)\n \nMessageBox(\"Timer\", \"Timer Started. Interval is \" & \n   + string(MyTimer.interval) + \" seconds\")\nIn the timing object's Constructor event, the following code creates an instance of a datastore:\nds_datastore = CREATE datastore\nThe timing object's Timer event calls an object-level function called refresh_custlist that\nrefreshes the datastore. This is the code for refresh_custlist:\nlong ll_rowcount\n \nds_datastore.dataobject = \"d_customers\"\nds_datastore.SetTransObject (SQLCA)\nll_rowcount = ds_datastore.Retrieve()\n \nRETURN ll_rowcount\nThe Retrieve button on w_main simply shares the data from the DataStore with the\nDataWindow control:\nds_datastore.ShareData(dw_1)\nUsing a window object\nThis example causes the current time to be displayed in a StaticText control in a window.\nCalling Timer in the window's Open event script starts the timer. The script for the Timer\nevent refreshes the displayed time.\nIn the window's Open event script, this code displays the time initially and starts the timer:\nst_time.Text = String(Now(), \"hh:mm\")\nTimer(60)\nIn the window's Timer event, which is triggered every minute, this code displays the current\ntime in the StaticText st_time:\nst_time.Text = String(Now(), \"hh:mm\")\nSee also\nStart\nTimer\n2.3.133 TitleTextChanged\nDescription\nOccurs when the page title changes.\nEvent ID\n"}
{"page": 349, "text": "Statements, Events, and Functions\nPage 349\nTable 2.342:\nEvent ID\nObjects\nNone\nWebBrowser controls\nArguments\nTable 2.343:\nArgument\nDescription\ntitletext\nThe title of the page you browse.\nReturn Values\nNone\nSee also\nAddressChanged\nCertificateError\nDownloadingStart\nDownloadingStateChanged\nEvaluateJavascriptFinished\nNavigationError\nNavigationProgressIndex\nNavigationStart\nNavigationStateChanged\nPdfPrintFinished\nResourceRedirect\n2.3.134 ToolbarMoved\nDescription\nOccurs in an MDI frame window when the user moves any FrameBar or SheetBar.\nEvent ID\nTable 2.344:\nEvent ID\nObjects\npbm_tbnmoved\nWindow\nArguments\nNone\n"}
{"page": 350, "text": "Statements, Events, and Functions\nPage 350\nReturn Values\nLong.\nReturn code choices (specify in a RETURN statement):\n0 -- Continue processing\nUsage\nThe event is not triggered for sheet windows.\nTo get information about the toolbars' positions, call the GetToolbar and GetToolbarPos\nfunctions.\nThis event occurs when you change a toolbar's position with SetToolbarPos.\n2.3.135 UploadAck\nDescription\nOccurs on completion of upload processing.\nEvent ID\nTable 2.345:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.346:\nArgument\nDescription\nuploadack_status Long indicating the status returned by MobiLink to the remote after the\nupload stream is processed. Values are:\n\u2022 0 for StatCommitted\n\u2022 1 for StatFailed\n\u2022 248 for StatRetry\nSee the Usage note for the meaning of these values.\nReturn Values\nNone\nUsage\nUse this event to add custom actions after dbmlsync has received acknowledgement of the\nupload stream from the MobiLink synchronization server.\nValues for the uploadack_status argument can be:\n"}
{"page": 351, "text": "Statements, Events, and Functions\nPage 351\n\u2022 StatCommitted\nIndicates that the upload stream was received by the MobiLink synchronization server and\ncommitted.\n\u2022 StatRetry\nIndicates that the MobiLink synchronization server and the remote database had different\nvalues for the log offset from which the upload stream should start. The upload stream was\nnot committed by the MobiLink synchronization server. The component attempts to send\nanother upload stream starting from the MobiLink synchronization server's log offset.\n\u2022 StatFailed\nIndicates that the MobiLink synchronization server did not commit the upload stream.\nSee also\nBeginUpload\nConnectMobiLink\nEndUpload\nWaitForUploadAck\n2.3.136 UserString\nDescription\nOccurs when the user has edited the contents of the control and the control has lost focus. The\nAllowEdit property must be set to true.\nEvent ID\nTable 2.347:\nEvent ID\nObjects\npbm_dtpuserstring\nDatePicker\nArguments\nTable 2.348:\nArgument\nDescription\nflag\nUnsigned long by reference. The value of flag is 0 by default and should\nnot be changed.\nuserstr\nString entered in the control by the user.\ndtm\nA DateTime value by reference to which the validated date should be\nassigned.\nReturn Values\n"}
{"page": 352, "text": "Statements, Events, and Functions\nPage 352\nLong.\nReturn code: Ignored.\nUsage\nWhen a user tabs into a DatePicker control, it is in normal editing mode and one part of the\ndate (year, month, or day) can be edited. If the AllowEdit property is set to true, the user\ncan press F2 or click in the control to select all the text in the control for editing. When the\ncontrol loses focus, the control returns to normal editing mode and the UserString event is\nfired, allowing you to test whether the text in the control is a valid date. The UserString event\nfires whether or not the text was modified.\nThe text entered in the control must be in a format that can be converted into a valid\nDateTime variable. If the string entered by the user can be converted to a valid DateTime\nvalue, you can assign the parsed DateTime value to the dtm argument to change the Value\nproperty of the control.\nThe ValueChanged event is fired after the UserString event if the value changed.\nExamples\nThis code in the UserString event script tests whether the string entered by the user is a valid\ndate. If it is valid, the code converts the date to a DateTime so that it can be assigned to the\nDatePicker's Value property. Otherwise it displays an error message to the user:\nIF IsDate(userstr) THEN\n   dtm = DateTime(Date(userstr))\nELSE\n   MessageBox(\"Invalid date\", userstr)\nEND IF\n2.3.137 ValueChanged\nDescription\nOccurs when the Value property in a DatePicker control changes.\nEvent ID\nTable 2.349:\nEvent ID\nObjects\npbm_dtpvaluechanged\nDatePicker\nArguments\nTable 2.350:\nArgument\nDescription\nflag\nUnsigned long that defaults to 0 and can be ignored\ndtm\nThe new DateTime value\nReturn Values\n"}
{"page": 353, "text": "Statements, Events, and Functions\nPage 353\nLong.\nReturn code: Ignored.\nUsage\nWhen a user selects a date from the drop-down calendar or changes the date using the up-\ndown control, the DateTime value selected is passed to the ValueChanged event.\nExamples\nThis code in the ValueChanged event script displays a confirmation message to the user:\nMessageBox(\"Start date\", \"You selected \" + &\n   String(dtm, \"mmm dd, yyyy\") + \".~r~n\" +  &\n   \"If this is incorrect, please select again.\")\n2.3.138 ViewChange\nDescription\nOccurs when the server application notifies the control that the view shown to the user has\nchanged.\nEvent ID\nTable 2.351:\nEvent ID\nObjects\npbm_omnviewchange\nOLE\nArguments\nNone\nReturn Values\nLong.\nReturn code: Ignored\nUsage\nIf you want to retrieve the ObjectData blob value of an OLE control during the processing of\nthis event, you must post a user event back to the control or you will generate a runtime error.\nSee also\nDataChange\nPropertyRequestEdit\nPropertyChanged\nRename\n2.3.139 WaitForUploadAck\nDescription\n"}
{"page": 354, "text": "Statements, Events, and Functions\nPage 354\nOccurs when the synchronization process starts a new waiting period for upload\nacknowledgement.\nEvent ID\nTable 2.352:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nNone\nReturn Values\nNone\nUsage\nUse this event to add custom actions when the component is waiting for upload\nacknowledgement from the MobiLink synchronization server.\nSee also\nBeginUpload\nEndUpload\n2.3.140 WarningMessage\nDescription\nOccurs on display of a warning message.\nEvent ID\nTable 2.353:\nEvent ID\nObjects\nNone\nMLSynchronization, MLSync\nArguments\nTable 2.354:\nArgument\nDescription\nwarnmsg\nRead-only string containing the text of the warning message returned\nfrom the synchronization server.\nReturn Values\nNone\n"}
{"page": 355, "text": "Statements, Events, and Functions\nPage 355\nUsage\nUse this event to receive warning information logged by dbmlsync.\nThe following events can be triggered when different types of messages are sent by the\nsynchronization server: DisplayMessage, ErrorMessage, FileMessage, and WarningMessage.\nSee also\nDisplayMessage\nErrorMessage\nFileMessage\n2.4 PowerScript Functions\nAbout this chapter\nThis chapter provides syntax, descriptions, and examples for PowerScript functions.\nContents\nThe functions are listed alphabetically.\nSee also\nFor information about functions that apply to DataWindows or DataStores, see also\nPart I, \u201cDataWindow Reference\u201d. Methods that apply to DataWindows, but not to other\nPowerBuilder controls, are listed only in Part I, \u201cDataWindow Reference\u201d.\n2.4.1 Abs\nDescription\nCalculates the absolute value of a number.\nSyntax\nAbs ( n )\nTable 2.355:\nArgument\nDescription\nn\nThe number for which you want the absolute value\nReturn value\nThe datatype of n. Returns the absolute value of n. If n is null, Abs returns null.\nExamples\nAll these statements set num to 4:\ninteger i, num\ni = 4\nnum = Abs(i)\nnum = Abs(4)\n"}
{"page": 356, "text": "Statements, Events, and Functions\nPage 356\nnum = Abs(+4)\nnum = Abs(-4)\nThis statement returns 4.2:\nAbs(-4.2)\nSee also\nAbs method for DataWindows in Section 2.4.1, \u201cAbs\u201d in DataWindow Reference\n2.4.2 ACos\nDescription\nCalculates the arccosine of an angle.\nSyntax\nACos ( n )\nTable 2.356:\nArgument\nDescription\nn\nThe ratio of the lengths of two sides of a triangle for which you want a\ncorresponding angle (in radians). The ratio must be a value between -1\nand 1.\nReturn value\nDouble.\nReturns the arccosine of n.\nExamples\nThis statement returns 0:\nACos(1)\nThis statement returns 3.141593 (rounded to six places):\nACos(-1)\nThis statement returns 1.000000 (rounded to six places):\nACos(.540302)\nThis code in the Clicked event of a button catches a runtime error that occurs when an\narccosine is taken for a user-entered value -- passed in a variable -- that is outside of the\npermitted range:\nDouble ld_num\nld_num = Double (sle_1.text)\n \nTRY\nsle_2.text = string (acos (ld_num))\nCATCH (runtimeerror er)\n   MessageBox(\"Runtime Error\", er.getmessage())\n"}
{"page": 357, "text": "Statements, Events, and Functions\nPage 357\nEND TRY\nSee also\nCos\nASin\nATan\nACos method for DataWindows in Section 2.4.2, \u201cACos\u201d in DataWindow Reference\n2.4.3 AccessToken\nDescription\nSends a request to get the token information.\nApplies to\nOAuthClient object\nSyntax\nobjectname.AccessToken ( TokenRequest tokenRequest, TokenResponse tokenResponse )\nTable 2.357:\nArgument\nDescription\nobjectname\nA reference to the OAuthClient object.\ntokenRequest\nA reference to the TokenRequest object specifying the request\ninformation.\ntokenResponse\nA reference to the TokenResponse object into which the function returns\nthe object.\nReturn value\nInteger.\nReturns the value as follows. If any argument's value is null, the method returns null.\n1 -- Success\n-1 -- A general error occurred\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\nExamples\nThe following example shows the use of the AccessToken function to get the token\ninformation:\nint li_return\nOAuthClient lnv_OAuthClient\nTokenRequest lnv_TokenRequest\n"}
{"page": 358, "text": "Statements, Events, and Functions\nPage 358\nTokenResponse lnv_TokenResponse\nlnv_OAuthClient = create OAuthClient\nli_return = lnv_OAuthClient.accesstoken(lnv_TokenRequest, lnv_TokenResponse)\nSee also\nRequestResource\n2.4.4 Activate\nDescription\nActivates the object in an OLE container, allowing the user to work with the object using the\nserver's commands.\nApplies to\nOLE controls and OLE DWObjects (objects within a DataWindow object that is within a\nDataWindow control)\nSyntax\nobjectref.Activate ( activationtype )\nTable 2.358:\nArgument\nDescription\nobjectref\nThe name of the OLE control or the fully qualified name of a OLE\nDWObject within a DataWindow control that contains the object you\nwant to activate.\nThe fully qualified name for a DWObject has this syntax:\ndwcontrol.Object.dwobjectname\nactivationtype\n(optional)\nA value of the enumerated datatype omActivateType specifying where\nthe user will work with the OLE object. Values are:\n\u2022 InPlace! -- (Default) The object is activated within the control. The\nsubset of menus provided by the server application are merged with the\nPowerBuilder application's menus.\n\u2022 OffSite! -- The object is activated in the server application, which\ngives the user access to more of the server application's functionality.\nFor the OLE control, activationtype is required.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Container is empty\n-2 -- Invalid verb for object\n"}
{"page": 359, "text": "Statements, Events, and Functions\nPage 359\n-3 -- Verb not implemented by object\n-4 -- No verbs supported by object\n-5 -- Object cannot execute verb now\n-9 -- Other error\nIf any argument's value is null, Activate returns null.\nExamples\nThis example activates the object in ole_1 in the server application:\ninteger result\nresult = ole_1.Activate(OffSite!)\nThis example activates the OLE DWObject ole_graph in the DataWindow control dw_1 in\nthe Microsoft Graph server application:\ninteger result\nresult = dw_1.Object.ole_graph.Activate(OffSite!)\nSee also\nDoVerb\nOLEActivate method for DataWindows in Section 9.110, \u201cOLEActivate\u201d in DataWindow\nReference.\nSelectObject\n2.4.5 AddCategory\nDescription\nAdds a new category to the category axis of a graph. AddCategory is for a category axis\nwhose datatype is string.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects because their data comes directly from the DataWindow.\nSyntax\ncontrolname.AddCategory ( categoryname )\nTable 2.359:\nArgument\nDescription\ncontrolname\nThe name of the graph to which you want to add a category.\ncategoryname\nA string whose value is the name of the category you want to add to\ncontrolname. The category will appear as a label on the category axis.\nReturn value\nInteger.\n"}
{"page": 360, "text": "Statements, Events, and Functions\nPage 360\nReturns the number assigned to the category if it succeeds. If categoryname already exists\nas a label on the category axis, AddCategory returns the number of the existing category.\nReturns -1 if an error occurs. If any argument's value is null, AddCategory returns null.\nUsage\nAddCategory adds a category to the end of the category axis. The category becomes an empty\nslot in each series to which you can assign a data point. A tick mark exists on the category\naxis for all the categories associated with the graph.\nWhen the datatype of the category axis is string, you can specify the empty string (\"\") as the\ncategory name. However, because category names must be unique, there can be only one\ncategory with that name. Category names are unique if they have different capitalization.\nTo add categories when the axis datatype is date, DateTime, number, or time, use\nInsertCategory. To insert a category in the middle of a series, use InsertCategory. You can\nalso use InsertCategory to add a category to the end of a series, as AddCategory does, but it\nrequires an additional argument to do so.\nTo add data to a series in the graph, use the AddData or InsertData function. You can add a\ndata value and put it in a new category, or you can add or change data in an existing category.\nTo add a series to the graph, use the AddSeries function.\nExamples\nThis statement adds a category named PCs to the graph gr_product_data:\ngr_product_data.AddCategory(\"PCs\")\nSee also\nAddData\nAddSeries\nDeleteData\nDeleteSeries\n2.4.6 AddColumn\nDescription\nAdds a column with a specified label, alignment, and width.\nApplies to\nListView controls\nSyntax\nlistviewname.AddColumn ( label, alignment, width )\nTable 2.360:\nArgument\nDescription\nlistviewname\nThe name of the ListView control to which you want to add a column.\nlabel\nA string whose value is the name of the column you are adding.\n"}
{"page": 361, "text": "Statements, Events, and Functions\nPage 361\nArgument\nDescription\nalignment\nA value of the enumerated datatype Alignment specifying the alignment\nof the column you are adding. Values are:\n\u2022 Center!\n\u2022 Justify!\n\u2022 Left!\n\u2022 Right!\nwidth\nAn integer whose value is the width of the column you are adding, in\nPowerBuilder units.\nReturn value\nInteger.\nReturns the column index if it succeeds and -1 if an error occurs.\nUsage\nThe AddColumn function adds a column at the end of the existing columns unlike the\nInsertColumn function which inserts a column at a specified location.\nUse SetItem and SetColumn to change the values for existing items. To add new items, use\nAddItem. To create columns for the report view of a ListView control, use AddColumn.\nExamples\nThis script for a ListView event creates three columns in a ListView control:\ninteger index\n \nFOR index = 3 to 25\n    This.AddItem (\"Category \" + String (index), 1 )\nNEXT\n \nThis.AddColumn(\"Name\" , Left! , 1000)\nThis.AddColumn(\"Size\" , Left! , 400)\nThis.AddColumn(\"Date\" , Left! , 300)\nSee also\nAddItem\nDeleteColumn\nInsertColumn\n2.4.7 AddData\nAdds a value to the end of a series of a graph. The syntax you use depends on the type of\ngraph.\nTable 2.361:\nTo add data to\nUse\nAny graph type except scatter\nSyntax 1\n"}
{"page": 362, "text": "Statements, Events, and Functions\nPage 362\nTo add data to\nUse\nScatter graphs\nSyntax 2\n2.4.7.1 Syntax 1: For all graph types except scatter\nDescription\nAdds a data point to a series in a graph. Use Syntax 1 for any graph type except scatter\ngraphs.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects because their data comes directly from the DataWindow.\nSyntax\ncontrolname.AddData ( seriesnumber, datavalue {, categoryvalue } )\nTable 2.362:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to add data to a series. The\ngraph's type should not be scatter.\nseriesnumber\nThe number that identifies the series to which you want to add data.\ndatavalue\nThe value of the data you want to add.\ncategoryvalue\n(optional)\nThe category for this data value on the category axis. The datatype of the\ncategoryvalue should match the datatype of the category axis. In most\ncases you should include categoryvalue. Otherwise, an uncategorized\nvalue will be added to the series.\nReturn value\nLong.\nReturns the position of the data value in the series if it succeeds and -1 if an error occurs. If\nany argument's value is null, AddData returns null.\nUsage\nWhen you use Syntax 1, AddData adds a value to the end of the specified series or to the\nspecified category, if it already exists. If categoryvalue is a new category, the category is\nadded to the end of the series with a label for the data point's tick mark. If the axis is sorted,\nthe new category is incorporated into the existing order. If the category already exists, the\nnew data replaces the old data at the data point for the category.\nFor example, if the third category label specified in series 1 is March and you add data in\nseries 4 and specify the category label March, the data is added at data point 3 in series 4.\nWhen the axis datatype is string, you can specify the empty string (\"\") as the category name.\nBecause category names must be unique, there can be only one category with a blank name.\nIf you use AddData to add data without specifying a category, you will have data points\nwithout categories, which is not the same as a category whose name is \"\".\n"}
{"page": 363, "text": "Statements, Events, and Functions\nPage 363\nTo insert data in the middle of a series, use InsertData. You can also use InsertData to add\ndata to the end of a series, as AddData does, although it requires an additional argument to do\nit.\nFor a comparison of AddData, InsertData, and ModifyData, see Equivalent Syntax in\nInsertData.\nExamples\nThese statements add a data value of 1250 to the series named Costs and assign the data point\nthe category label Jan in the graph gr_product_data:\ninteger SeriesNbr\n \n// Get the number of the series.\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\ngr_product_data.AddData(SeriesNbr, 1250, \"Jan\")\nThese statements add a data value of 1250 to the end of the series named Costs in the graph\ngr_product_data but do not assign the data point to a category:\ninteger SeriesNbr\n \n// Get the number of the series.\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\ngr_product_data.AddData(SeriesNbr, 1250)\nSee also\nDeleteData\nFindSeries\nGetData\nInsertData\n2.4.7.2 Syntax 2: For scatter graphs\nDescription\nAdds a data point to a series in a scatter graph.\nSyntax\ncontrolname.AddData ( seriesnumber, xvalue, yvalue )\nTable 2.363:\nArgument\nDescription\ncontrolname\nThe name of the scatter graph in which you want to add data to a series.\nThe graph's type should be scatter.\nseriesnumber\nThe number that identifies the series to which you want to add data.\nxvalue\nThe x value of the data point you want to add.\nyvalue\nThe y value of the data point you want to add.\nReturn value\nLong.\n"}
{"page": 364, "text": "Statements, Events, and Functions\nPage 364\nReturns the position of the data value in the series if it succeeds and -1 if an error occurs. If\nany argument's value is null, AddData returns null.\nExamples\nThese statements add the x and y values of a data point to the series named Costs in the\nscatter graph gr_sales_yr:\ninteger SeriesNbr\n \n// Get the number of the series.\nSeriesNbr = gr_sales_yr.FindSeries(\"Costs\")\ngr_sales_yr.AddData(SeriesNbr, 12, 3)\nSee also\nDeleteData\nFindSeries\nGetData\n2.4.8 AddItem\nAdds an item to a list control.\nTable 2.364:\nTo add an item to\nUse\nA ListBox or DropDownListBox control\nSyntax 1\nA PictureListBox, DropDownPictureListBox, and\nRibbonComboBoxItem control\nSyntax 2\nA ListView control when you only need to specify the item name and\npicture index\nSyntax 3\nA ListView control when you need to specify all the properties for the\nitem\nSyntax 4\n2.4.8.1 Syntax 1: For ListBox and DropDownListBox controls\nDescription\nAdds a new item to the list of values in a list box.\nApplies to\nListBox and DropDownListBox controls\nSyntax\nlistboxname.AddItem ( item )\nTable 2.365:\nArgument\nDescription\nlistboxname\nThe name of the ListBox or DropDownListBox in which you want to add\nan item\n"}
{"page": 365, "text": "Statements, Events, and Functions\nPage 365\nArgument\nDescription\nitem\nA string whose value is the text of the item you want to add\nReturn value\nInteger.\nReturns the position of the new item. If the list is sorted, the position returned is the position\nof the item after the list is sorted. Returns -1 if it fails. If any argument's value is null,\nAddItem returns null.\nUsage\nIf the ListBox already contains items, AddItem adds the new item to the end of the list. If the\nlist is sorted (its Sorted property is true), PowerBuilder re-sorts the list after the item is added.\nA list can have duplicate items. Items in the list are tracked by their position in the list, not\ntheir text.\nAddItem and InsertItem do not update the Items property array. You can use FindItem to find\nitems added at runtime.\nAdding many items to a list with a horizontal scroll bar\nIf a ListBox or the ListBox portion of a DropDownListBox will have a large number of items\nand you want to display an HScrollBar, call the SetRedraw function to turn Redraw off, add\nthe items, call SetRedraw again to set Redraw on, and then set the HScrollBar property to\ntrue. Otherwise, it may take longer than expected to add the items.\nExamples\nThis example adds the item Edit File to the ListBox lb_Actions:\ninteger rownbr\nstring s\n \ns = \"Edit File\"\nrownbr = lb_Actions.AddItem(s)\nIf lb_Actions contains Add and Run and the Sorted property is false, the statement above\nreturns 3 (because Edit File becomes the third and last item). If the Sorted property is true,\nthe statement above returns 2 (because Edit File becomes the second item after the list is\nsorted alphabetically).\nSee also\nDeleteItem\nFindItem\nInsertItem\nReset\nTotalItems\n2.4.8.2 Syntax 2: For PictureListBox, DropDownPictureListBox, and RibbonComboBoxItem\ncontrols\nDescription\n"}
{"page": 366, "text": "Statements, Events, and Functions\nPage 366\nAdds a new item to the list of values in a picture list box.\nApplies to\nPictureListBox, DropDownPictureListBox, and RibbonComboBoxItem controls\nSyntax\nlistboxname.AddItem ( item {, pictureindex } )\nTable 2.366:\nArgument\nDescription\nlistboxname\nThe name of the PictureListBox or DropDownPictureListBox or\nRibbonComboBoxItem in which you want to add an item\nitem\nA string whose value is the text of the item you want to add\npictureindex\n(optional)\nAn integer specifying the index of the picture you want to associate with\nthe newly added item\nReturn value\nInteger.\nReturns the position of the new item. If the list is sorted, the position returned is the position\nof the item after the list is sorted. Returns -1 if it fails. If any argument's value is null,\nAddItem returns null.\nUsage\nIf you do not specify a picture index, the newly added item will not have a picture.\nIf you specify a picture index that does not exist, that number is still stored with the picture.\nIf you add pictures to the picture array so that the index becomes valid, the item will then\nshow the corresponding picture.\nFor additional notes about items in list boxes, see Syntax 1.\nExample 1\nThis example adds the item Cardinal to the PictureListBox plb_birds:\ninteger li_pic, li_position\nstring ls_name, ls_pic\nli_pic = plb_birds.AddPicture(\"c:\\pics\\cardinal.bmp\")\nls_name = \"Cardinal\"\nli_position = plb_birds.AddItem(ls_name, li_pic)\nIf plb_birds contains Robin and Swallow and the Sorted property is false, the AddItem\nfunction above returns 3 because Cardinal becomes the third and last item. If the Sorted\nproperty is true, AddItem returns 1 because Cardinal is first when the list is sorted\nalphabetically.\nExample 2\nThis example adds two items to the ribbon combo box:\nInteger li_Return\n"}
{"page": 367, "text": "Statements, Events, and Functions\nPage 367\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.SetBoxPictureList(\"PaperSizeA0Small!,PaperSizeA1Small!\")\nli_Return = lr_ComboBox.AddItem(\"Item1\")\nli_Return = lr_ComboBox.AddItem(\"Item2\",1)\nSee also\nDeleteItem\nFindItem\nInsertItem\nReset\nTotalItems\n2.4.8.3 Syntax 3: For ListView controls\nDescription\nAdds an item to a ListView control.\nApplies to\nListView controls\nSyntax\nlistviewname.AddItem ( label, pictureindex )\nTable 2.367:\nArgument\nDescription\nlistviewname\nThe name of the ListView control to which you are adding a picture or\nitem\nlabel\nThe name of the item you are adding\npictureindex\nThe index of the picture you want to associate with the newly added item\nReturn value\nInteger.\nReturns the index of the item if it succeeds and -1 if an error occurs.\nUsage\nUse this syntax if you only need to specify the label and picture index of the item you are\nadding to the ListView. If you need to specify more than the label and picture index, use\nSyntax 4.\nExamples\nThis example uses AddItem in the Constructor event to add three items to a ListView control:\nlv_1.AddItem(\"Sanyo\" , 1)\nlv_1.AddItem(\"Onkyo\" , 1)\nlv_1.AddItem(\"Aiwa\" , 1)\n"}
{"page": 368, "text": "Statements, Events, and Functions\nPage 368\nSee also\nDeleteItem\nFindItem\nInsertItem\nReset\nTotalItems\n2.4.8.4 Syntax 4: For ListView controls\nDescription\nAdds an item to a ListView control by referencing all the attributes in the ListView item.\nApplies to\nListView controls\nSyntax\nlistviewname.AddItem ( item )\nTable 2.368:\nArgument\nDescription\nlistviewname\nThe name of the List View control to which you are adding a picture or\nitem\nitem\nThe ListViewItem variable containing properties of the item you are\nadding\nReturn value\nInteger.\nReturns the index of the item if it succeeds and -1 if an error occurs.\nUsage\nUse this syntax if you need to specify all the properties for the item you want to add. If you\nonly need to specify the label and picture index, use Syntax 3.\nExamples\nThis example uses AddItem in a CommandButton Clicked event to add a ListView item for\neach click:\ncount = count + 1\nlistviewitem l_lvi\nl_lvi.PictureIndex = 2\nl_lvi.Label = \"Item \"+ string(count)\nlv_1.AddItem(l_lvi)\nSee also\nDeleteItem\nFindItem\n"}
{"page": 369, "text": "Statements, Events, and Functions\nPage 369\nInsertItem\nReset\nTotalItems\n2.4.9 AddItemArray\nDescription\nAdds a child item of JsonArrayItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemArray ( ParentItemHandle )\nobjectname.AddItemArray ( ParentItemHandle, Key )\nobjectname.AddItemArray ( ParentItemPath )\nobjectname.AddItemArray ( ParentItemPath, Key )\nTable 2.369:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis example creates an array root item and adds an array child item. The result is\n[[101,102,103]].\nLong ll_RootArray, ll_ChildArray\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Create an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Add an array child item\nll_ChildArray = lnv_JsonGenerator.AddItemArray(ll_RootArray)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 101)\n"}
{"page": 370, "text": "Statements, Events, and Functions\nPage 370\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 102)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 103)\nExample 2\nThis example creates an object root item and adds an array child item. The result is {\"id\":\n[101,102,103]}.\nLong ll_RootObject, ll_ChildArray\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Create an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject()\n// Add an array child item\nll_ChildArray = lnv_JsonGenerator.AddItemArray(ll_RootObject, \"id\")\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 101)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 102)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 103)\nExample 3\nThis example creates an array root item and adds an array child item. The result is\n[[101,102,103]].\nString ls_RootPath, ls_ChildPath\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_RootPath = \"/\"\n// Adds an array child item\nlnv_JsonGenerator.AddItemArray(ls_RootPath)\nls_ChildPath = ls_RootPath + \"1\"\nlnv_JsonGenerator.AddItemNumber(ls_ChildPath, 101)\nlnv_JsonGenerator.AddItemNumber(ls_ChildPath, 102)\nlnv_JsonGenerator.AddItemNumber(ls_ChildPath, 103)\nExample 4\nThis example creates an object root item and adds an array child item. The result is {\"id\":\n[101,102,103]}.\nString ls_RootPath, ls_ChildPath\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject()\nls_RootPath = \"/\"\n// Adds an array child item\nlnv_JsonGenerator.AddItemArray(ls_RootPath, \"id\")\nls_ChildPath = ls_RootPath + \"id\"\nlnv_JsonGenerator.AddItemNumber(ls_ChildPath, 101)\nlnv_JsonGenerator.AddItemNumber(ls_ChildPath, 102)\nlnv_JsonGenerator.AddItemNumber(ls_ChildPath, 103)\nSee also\nAddItemBlob\n"}
{"page": 371, "text": "Statements, Events, and Functions\nPage 371\nAddItemBoolean\nAddItemDate\nAddItemDateTime\nAddItemNull\nAddItemNumber\nAddItemObject\nAddItemString\nAddItemTime\n2.4.10 AddItemBlob\nDescription\nAdds a child item of JsonStringItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemBlob ( ParentItemHandle, Value )\nobjectname.AddItemBlob ( ParentItemHandle, Key, Value )\nobjectname.AddItemBlob ( ParentItemPath, Value )\nobjectname.AddItemBlob ( ParentItemPath, Key, Value )\nTable 2.370:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nValue\nA blob whose value is the value of the child item\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis example creates an array root item and adds a blob child item. The result is\n[\"dABoAGkAcwAgAGkAcwAgAGIAbABvAGIA\"].\n"}
{"page": 372, "text": "Statements, Events, and Functions\nPage 372\nLong ll_RootArray\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds a blob child item\nlnv_JsonGenerator.AddItemBlob(ll_RootArray, Blob(\"this is blob\"))\nExample 2\nThis example creates an object root item and adds a blob child item. The result is\n{\"Blob\":\"dABoAGkAcwAgAGkAcwAgAGIAbABvAGIA\"}.\nLong ll_RootObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds a blob child item\nlnv_JsonGenerator.AddItemBlob(ll_RootObject, \"blob\", Blob(\"this is blob\"))\nExample 3\nThis example creates an array root item and adds a blob child item.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds a blob child item\nlnv_JsonGenerator.AddItemBlob(ls_Path, Blob(\"this is blob\"))\nExample 4\nThis example creates an object root item and adds a blob child item.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject ()\nls_Path = \"/\"\n// Adds a blob child item\nlnv_JsonGenerator.AddItemBlob(ls_Path, \"blob\", Blob(\"this is blob\"))\nSee also\nAddItemArray\nAddItemBoolean\nAddItemDate\nAddItemDateTime\n"}
{"page": 373, "text": "Statements, Events, and Functions\nPage 373\nAddItemNull\nAddItemNumber\nAddItemObject\nAddItemString\nAddItemTime\n2.4.11 AddItemBoolean\nDescription\nAdds a child item of JsonBooleanItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemBoolean ( ParentItemHandle, Value )\nobjectname.AddItemBoolean ( ParentItemHandle, Key, Value )\nobjectname.AddItemBoolean ( ParentItemPath, Value )\nobjectname.AddItemBoolean ( ParentItemPath, Key, Value )\nTable 2.371:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nValue\nA boolean whose value is the value of the child item\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis example creates an array root item and adds a boolean child item.\nJsonGenerator lnv_JsonGenerator \nLong ll_RootArray\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n"}
{"page": 374, "text": "Statements, Events, and Functions\nPage 374\n// Adds a boolean child item\nlnv_JsonGenerator.AddItemBoolean(ll_RootArray, true)\nExample 2\nThis example creates an object root item and adds a boolean child item.\nJsonGenerator lnv_JsonGenerator\nLong ll_RootObject\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds a boolean child item\nlnv_JsonGenerator.AddItemBoolean(ll_RootObject, \"boolean\", true)\nExample 3\nThis example creates an array root item and adds a boolean child item.\nJsonGenerator lnv_JsonGenerator \nString ls_Path\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds a boolean child item\nlnv_JsonGenerator.AddItemBoolean(ls_Path, true)\nExample 4\nThis example creates an object root item and adds a boolean child item.\nJsonGenerator lnv_JsonGenerator\nString ls_Path\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject ()\nls_Path = \"/\"\n// Adds a boolean child item\nlnv_JsonGenerator.AddItemBoolean(ls_Path, \"boolean\", true)\nSee also\nAddItemArray\nAddItemBlob\nAddItemDate\nAddItemDateTime\nAddItemNull\nAddItemNumber\nAddItemObject\nAddItemString\n"}
{"page": 375, "text": "Statements, Events, and Functions\nPage 375\nAddItemTime\n2.4.12 AddItemDate\nDescription\nAdds a child item of JsonStringItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemDate ( ParentItemHandle, Value )\nobjectname.AddItemDate ( ParentItemHandle, Key, Value )\nobjectname.AddItemDate ( ParentItemPath, Value )\nobjectname.AddItemDate ( ParentItemPath, Key, Value )\nTable 2.372:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nValue\nA date whose value is the value of the child item.\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis example creates an array root item and adds a date child item.\nLong ll_RootArray\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds a date child item\nlnv_JsonGenerator.AddItemDate(ll_RootArray, date(\"2017-12-09\"))\nExample 2\nThis example creates an object root item and adds a date child item.\nLong ll_RootObject\n"}
{"page": 376, "text": "Statements, Events, and Functions\nPage 376\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds a date child item\nlnv_JsonGenerator.AddItemDate(ll_RootObject, \"date\", date(\"2017-12-09\"))\nExample 3\nThis example creates an array root item and adds a date child item.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds a date child item\nlnv_JsonGenerator.AddItemDate(ls_Path, date(\"2017-12-09\"))\nExample 4\nThis example creates an object root item and adds a date child item.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject ()\nls_Path = \"/\"\n// Adds a date child item\nlnv_JsonGenerator.AddItemDate(ls_Path, \"date\", date(\"2017-12-09\"))\nSee also\nAddItemArray\nAddItemBlob\nAddItemBoolean\nAddItemDateTime\nAddItemNull\nAddItemNumber\nAddItemObject\nAddItemString\nAddItemTime\n2.4.13 AddItemDateTime\nDescription\nAdds a child item of JsonStringItem or JsonNumberItem type in the JSON generator object.\n"}
{"page": 377, "text": "Statements, Events, and Functions\nPage 377\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemDateTime ( ParentItemHandle, Value )\nobjectname.AddItemDateTime ( ParentItemHandle, Value, Flag )\nobjectname.AddItemDateTime ( ParentItemHandle, Key, Value )\nobjectname.AddItemDateTime ( ParentItemHandle, Key, Value, Flag )\nobjectname.AddItemDateTime ( ParentItemPath, Value )\nobjectname.AddItemDateTime ( ParentItemPath, Value, Flag )\nobjectname.AddItemDateTime ( ParentItemPath, Key, Value )\nobjectname.AddItemDateTime ( ParentItemPath, Key, Value, Flag )\nTable 2.373:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an\nitem.\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type.\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type.\nKey\nA string whose value is the key of the child item.\nValue\nA datetime whose value is the value of the child item.\nFlag\nA boolean whose value is the type of the child item.\nTrue -- JsonNumberItem type. A JsonNumberItem type value is a UTC\ntimestamp converted from the local time using the local timezone.\nFalse -- JsonStringItem type. A JsonStringItem type value is a string\nconverted from the local time directly (no timezone conversion).\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis example creates an array root item and adds a DateTime child item. The result is\n[\"2017-12-09 12:15:00\"].\nLong ll_RootArray\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n"}
{"page": 378, "text": "Statements, Events, and Functions\nPage 378\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds a DateTime child item\nlnv_JsonGenerator.AddItemDateTime(ll_RootArray,  datetime(\"2017-12-09 12:15:00\"))\nExample 2\nThis example creates an array root item and adds a DateTime child item with and without\ntimezone conversion.\nLong ll_RootArray\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds a DateTime child item\nlnv_JsonGenerator.AddItemDateTime(ll_RootArray, datetime(\"2017-12-09 12:15:00\"),\n false)\n//Result is [\"2017-12-09 12:15:00\"]\nlnv_JsonGenerator.AddItemDateTime(ll_RootArray, datetime(\"2017-12-09 12:15:00\"),\n true)\n//Result is [1512821700]\nExample 3\nThis example creates an object root item and adds a DateTime child item. The result is\n{\"datetime\":\"2017-12-09 12:15:00\"}.\nLong ll_RootObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds a DateTime child item\nlnv_JsonGenerator.AddItemDateTime(ll_RootObject, \"datetime\", datetime(\"2017-12-09\n 12:15:00\"))\nExample 4\nThis example creates an object root item and adds a DateTime child item using the local\ntimezone conversion.\nLong ll_RootObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds a DateTime child item\nlnv_JsonGenerator.AddItemDateTime(ll_RootObject, \"datetime\", datetime(\"2017-12-09\n 12:15:00\"), true)\nExample 5\nThis example creates an array root item and adds a DateTime child item. The result is\n[\"2017-12-09 12:15:00\"].\n"}
{"page": 379, "text": "Statements, Events, and Functions\nPage 379\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds a DateTime child item\nlnv_JsonGenerator.AddItemDateTime(ls_Path,  datetime(\"2017-12-09 12:15:00\"))\nExample 6\nThis example creates an array root item and adds a DateTime child item with and without\ntimezone conversion.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds a DateTime child item\nlnv_JsonGenerator.AddItemDateTime(ls_Path, datetime(\"2017-12-09 12:15:00\"), false)\n//Result is [\"2017-12-09 12:15:00\"]\nlnv_JsonGenerator.AddItemDateTime(ls_Path, datetime(\"2017-12-09 12:15:00\"), true)\n//Result is [1512821700]\nExample 7\nThis example creates an object root item and adds a DateTime child item. The result is\n{\"datetime\":\"2017-12-09 12:15:00\"}.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject()\nls_Path = \"/\"\n// Adds a DateTime child item\nlnv_JsonGenerator.AddItemDateTime(ls_Path, \"datetime\", datetime(\"2017-12-09\n 12:15:00\"))\nExample 8\nThis example creates an object root item and adds a DateTime child item using the local\ntimezone conversion.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject ()\nls_Path = \"/\"\n// Adds a DateTime child item\nlnv_JsonGenerator.AddItemDateTime(ls_Path, \"datetime\", datetime(\"2017-12-09\n 12:15:00\"), true)\n"}
{"page": 380, "text": "Statements, Events, and Functions\nPage 380\nSee also\nAddItemArray\nAddItemBlob\nAddItemBoolean\nAddItemDate\nAddItemNull\nAddItemNumber\nAddItemObject\nAddItemString\nAddItemTime\n2.4.14 AddItemNull\nDescription\nAdds a child item of JsonNullItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemNull ( ParentItemHandle )\nobjectname.AddItemNull ( ParentItemHandle, Key )\nobjectname.AddItemNull ( ParentItemPath )\nobjectname.AddItemNull ( ParentItemPath, Key )\nTable 2.374:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis example creates an array root item and adds a null child item. The result is [null].\n"}
{"page": 381, "text": "Statements, Events, and Functions\nPage 381\nLong ll_RootArray\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds a null child item\nlnv_JsonGenerator.AddItemNull(ll_RootArray)\nExample 2\nThis example creates an object root item and adds a null child item. The result is\n{\"null\":null}.\nLong ll_RootObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds a null child item\nlnv_JsonGenerator.AddItemNull(ll_RootObject, \"null\")\nExample 3\nThis example creates an array root item and adds a null child item.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds a null child item\nlnv_JsonGenerator.AddItemNull(ls_Path)\nExample 4\nThis example creates an object root item and adds a null child item.\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject()\nls_Path = \"/\"\n// Adds a null child item\nlnv_JsonGenerator.AddItemNull(ls_Path, \"null\")\nSee also\nAddItemArray\nAddItemBlob\nAddItemBoolean\nAddItemDate\n"}
{"page": 382, "text": "Statements, Events, and Functions\nPage 382\nAddItemDateTime\nAddItemNumber\nAddItemObject\nAddItemString\nAddItemTime\n2.4.15 AddItemNumber\nDescription\nAdds a child item of JsonNumberItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemNumber ( ParentItemHandle, Value )\nobjectname.AddItemNumber ( ParentItemHandle, Key, Value )\nobjectname.AddItemNumber ( ParentItemHandle, Type )\nobjectname.AddItemNumber ( ParentItemHandle, Key, Type )\nobjectname.AddItemNumber ( ParentItemPath, Value )\nobjectname.AddItemNumber ( ParentItemPath, Key, Value )\nobjectname.AddItemNumber ( ParentItemPath, Type )\nobjectname.AddItemNumber ( ParentItemPath, Key, Type )\nTable 2.375:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nValue\nA double whose value is the value of the child item\nType\nA JsonNumberType whose value is the value type of the child item. If the\ntype is JsonNumber!, the value will be converted to number 0.\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\n"}
{"page": 383, "text": "Statements, Events, and Functions\nPage 383\nExample 1\nThis example creates an array root item and adds a child item of number type:\nJsonGenerator lnv_JsonGenerator\nLong ll_RootArray\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds a number child item\nlnv_JsonGenerator.AddItemNumber(ll_RootArray, 100)\nExample 2\nThis example creates an object root item and adds a child item of number type:\nJsonGenerator lnv_JsonGenerator\nLong ll_RootObject\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds a number child item\nlnv_JsonGenerator.AddItemNumber(ll_RootObject, \"year\", 2017)\nExample 3\nThis example creates an array root item and adds three child items of number type:\nJsonGenerator lnv_JsonGenerator\nJsonNumberType ljsn_Type\nLong ll_RootArray\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds NaN, Infinity, -Infinity number child items\nljsn_Type = JsonNaN!\nlnv_JsonGenerator.AddItemNumber(ll_RootArray, ljsn_Type)\nljsn_Type = JsonPositiveInfinity!\nlnv_JsonGenerator.AddItemNumber(ll_RootArray, ljsn_Type)\nljsn_Type = JsonNegativeInfinity!\nlnv_JsonGenerator.AddItemNumber(ll_RootArray, ljsn_Type)\nExample 4\nThis example creates an object root item and adds three child items of number type:\nJsonGenerator lnv_JsonGenerator\nJsonNumberType ljsn_Type\nLong ll_RootObject\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds NaN, Infinity, -Infinity number child items\nljsn_Type = JsonNaN!\nlnv_JsonGenerator.AddItemNumber(ll_RootObject, \"NaN\", ljsn_Type)\nljsn_Type = JsonPositiveInfinity!\n"}
{"page": 384, "text": "Statements, Events, and Functions\nPage 384\nlnv_JsonGenerator.AddItemNumber(ll_RootObject, \"PositiveInfinity\", ljsn_Type)\nljsn_Type = JsonNegativeInfinity!\nlnv_JsonGenerator.AddItemNumber(ll_RootObject, \"NegativeInfinity\", ljsn_Type)\nExample 5\nThis example creates an array root item and adds a child item of number type:\nJsonGenerator lnv_JsonGenerator\nString ls_Path\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds a number child item\nlnv_JsonGenerator.AddItemNumber(ls_Path, 100)\nExample 6\nThis example creates an object root item and adds a child item of number type:\nJsonGenerator lnv_JsonGenerator\nString ls_Path\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject ()\nls_Path = \"/\"\n// Adds a number child item\nlnv_JsonGenerator.AddItemNumber(ls_Path, \"year\", 2017)\nExample 7\nThis example creates an array root item and adds three child items of number type:\nJsonGenerator lnv_JsonGenerator\nJsonNumberType ljsn_Type\nString ls_Path\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds NaN, Infinity, -Infinity number child item\nljsn_Type = JsonNaN!\nlnv_JsonGenerator.AddItemNumber(ls_Path, ljsn_Type)\nljsn_Type = JsonPositiveInfinity!\nlnv_JsonGenerator.AddItemNumber(ls_Path, ljsn_Type)\nljsn_Type = JsonNegativeInfinity!\nlnv_JsonGenerator.AddItemNumber(ls_Path, ljsn_Type)\nExample 8\nThis example creates an object root item and adds three child items of number type:\nJsonGenerator lnv_JsonGenerator\nJsonNumberType ljsn_Type\nString ls_Path\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\n"}
{"page": 385, "text": "Statements, Events, and Functions\nPage 385\nlnv_JsonGenerator.CreateJsonObject ()\nls_Path = \"/\"\n// Adds NaN, Infinity, -Infinity number child item\nljsn_Type = JsonNaN!\nlnv_JsonGenerator.AddItemNumber(ls_Path, \"NaN\", ljsn_Type)\nljsn_Type = JsonPositiveInfinity!\nlnv_JsonGenerator.AddItemNumber(ls_Path, \"PositiveInfinity\", ljsn_Type)\nljsn_Type = JsonNegativeInfinity!\nlnv_JsonGenerator.AddItemNumber(ls_Path, \"NegativeInfinity\", ljsn_Type)\nSee also\nAddItemArray\nAddItemBlob\nAddItemBoolean\nAddItemDate\nAddItemDateTime\nAddItemNull\nAddItemObject\nAddItemString\nAddItemTime\n2.4.16 AddItemObject\nDescription\nAdds a child item of JsonObjectItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemObject ( ParentItemHandle )\nobjectname.AddItemObject ( ParentItemHandle, Key )\nobjectname.AddItemObject ( ParentItemPath )\nobjectname.AddItemObject ( ParentItemPath, Key )\nTable 2.376:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\n"}
{"page": 386, "text": "Statements, Events, and Functions\nPage 386\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis example creates an array root item and adds an object child item. The result is\n[{\"year\":2017,\"date\":\"2017-09-21\",\"time\":\"12:00:00\"}].\nLong ll_RootArray, ll_ChildObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds an object child item\nll_ChildObject = lnv_JsonGenerator.AddItemObject(ll_RootArray)\nlnv_JsonGenerator.AddItemNumber(ll_ChildObject, \"year\", 2017)\nlnv_JsonGenerator.AddItemDate(ll_ChildObject, \"date\", 2017-09-21)\nlnv_JsonGenerator.AddItemTime(ll_ChildObject, \"time\", 12:00:00)\nExample 2\nThis example creates an object root item and adds an object child item. The result is\n{\"object\":{\"year\":2017,\"date\":\"2017-09-21\",\"time\":\"12:00:00\"}}.\nLong ll_RootObject, ll_ChildObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds an object child item\nll_ChildObject = lnv_JsonGenerator.AddItemObject(ll_RootObject, \"object\")\nlnv_JsonGenerator.AddItemNumber(ll_ChildObject, \"year\", 2017)\nlnv_JsonGenerator.AddItemDate(ll_ChildObject, \"date\", 2017-09-21)\nlnv_JsonGenerator.AddItemTime(ll_ChildObject, \"time\", 12:00:00)\nExample 3\nThis example creates an array root item and adds an object child item. The result is\n[{\"year\":2017,\"date\":\"2017-09-21\",\"time\":\"12:00:00\"}].\nString ls_RootPath, ls_ChildPath\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Create an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_RootPath = \"/\"\n// Add an object child item\nlnv_JsonGenerator.AddItemObject(ls_RootPath)\nls_ChildPath = ls_RootPath + \"1\"\nlnv_JsonGenerator.AddItemNumber(ls_ChildPath, \"year\", 2017)\nlnv_JsonGenerator.AddItemDate(ls_ChildPath, \"date\", 2017-09-21)\nlnv_JsonGenerator.AddItemTime(ls_ChildPath, \"time\", 12:00:00)\nExample 4\n"}
{"page": 387, "text": "Statements, Events, and Functions\nPage 387\nThis example creates an object root item and adds an object child item. The result is\n{\"object\":{\"year\":2017,\"date\":\"2017-09-21\",\"time\":\"12:00:00\"}}.\nString ls_RootPath, ls_ChildPath\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject()\nls_RootPath = \"/\"\n \n// Adds an object child item\nlnv_JsonGenerator.AddItemObject(ls_RootPath, \"object\")\nls_ChildPath = ls_RootPath + \"object\"\nlnv_JsonGenerator.AddItemNumber(ls_ChildPath, \"year\", 2017)\nlnv_JsonGenerator.AddItemDate(ls_ChildPath, \"date\", 2017-09-21)\nlnv_JsonGenerator.AddItemTime(ls_ChildPath, \"time\", 12:00:00)\nSee also\nAddItemArray\nAddItemBlob\nAddItemBoolean\nAddItemDate\nAddItemDateTime\nAddItemNull\nAddItemNumber\nAddItemString\nAddItemTime\n2.4.17 AddItemString\nDescription\nAdds a child item of JsonStringItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemString ( ParentItemHandle, Value )\nobjectname.AddItemString ( ParentItemHandle, Key, Value )\nobjectname.AddItemString ( ParentItemPath, Value )\nobjectname.AddItemString ( ParentItemPath, Key, Value )\nTable 2.377:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\n"}
{"page": 388, "text": "Statements, Events, and Functions\nPage 388\nArgument\nDescription\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nValue\nA string whose value is the value of the child item\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis example creates an array item and then adds a string child item:\nJsonGenerator lnv_JsonGenerator\nLong ll_RootArray\nlnv_JsonGenerator = Create JsonGenerator\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\nlnv_JsonGenerator.AddItemString(ll_RootArray, \"string\")\nExample 2\nThis example creates an object item and then adds a string child item:\nJsonGenerator lnv_JsonGenerator \nLong ll_RootObject\nlnv_JsonGenerator = Create JsonGenerator\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\nlnv_JsonGenerator.AddItemString(ll_RootObject, \"string\", \"value\")\nExample 3\nThis example creates an array item and then adds a string child item:\nJsonGenerator lnv_JsonGenerator\nString ls_RootPath\nlnv_JsonGenerator = Create JsonGenerator\nlnv_JsonGenerator.CreateJsonArray()\nls_RootPath = \"/\"\nlnv_JsonGenerator.AddItemString(ls_RootPath, \"string\")\nExample 4\nThis example creates an object item and then adds a string child item:\nJsonGenerator lnv_JsonGenerator \nString ls_RootPath\nlnv_JsonGenerator = Create JsonGenerator\nlnv_JsonGenerator.CreateJsonObject ()\nls_RootPath = \"/\"\n"}
{"page": 389, "text": "Statements, Events, and Functions\nPage 389\nlnv_JsonGenerator.AddItemString(ls_RootPath, \"string\", \"value\")\nSee also\nAddItemArray\nAddItemBlob\nAddItemBoolean\nAddItemDate\nAddItemDateTime\nAddItemNull\nAddItemNumber\nAddItemObject\nAddItemTime\n2.4.18 AddItemTime\nDescription\nAdds a child item of JsonStringItem type in the JSON generator object.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.AddItemTime ( ParentItemHandle, Value )\nobjectname.AddItemTime ( ParentItemHandle, Key, Value )\nobjectname.AddItemTime ( ParentItemPath, Value )\nobjectname.AddItemTime ( ParentItemPath, Key, Value )\nTable 2.378:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to add an item\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nValue\nA time whose value is the value of the child item\nReturn value\nLong.\nReturns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\n"}
{"page": 390, "text": "Statements, Events, and Functions\nPage 390\nExample 1\nThis example creates an array root item and adds a time child item:\nLong ll_RootArray\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Adds a time child item\nlnv_JsonGenerator.AddItemTime(ll_RootArray,  time(\"12:15:00\"))\nExample 2\nThis example creates an object root item and adds a time child item:\nLong ll_RootObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Adds a time child item\nlnv_JsonGenerator.AddItemTime(ll_RootObject, \"time\", time(\"12:15:00\"))\nExample 3\nThis example creates an array root item and adds a time child item:\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// Adds a time child item\nlnv_JsonGenerator.AddItemTime(ls_Path,  time(\"12:15:00\"))\nExample 4\nThis example creates an object root item and adds a time child item:\nString ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject()\nls_Path = \"/\"\n// Adds a time child item\nlnv_JsonGenerator.AddItemTime(ls_Path, \"time\", time(\"12:15:00\"))\nSee also\nAddItemArray\nAddItemBlob\nAddItemBoolean\n"}
{"page": 391, "text": "Statements, Events, and Functions\nPage 391\nAddItemDate\nAddItemDateTime\nAddItemNull\nAddItemNumber\nAddItemObject\nAddItemString\n2.4.19 AddLargePicture\nDescription\nAdds a bitmap, icon, or cursor to the large image list.\nApplies to\nListView controls\nSyntax\nlistviewname.AddLargePicture ( picturename )\nTable 2.379:\nArgument\nDescription\nlistviewname\nThe name of the ListView control to which you are adding a bitmap,\nicon, or cursor\npicturename\nThe name of the bitmap, icon, or cursor you are adding to the large image\nlist\nReturn value\nInteger.\nReturns the picture index if it succeeds and -1 if an error occurs.\nUsage\nWhen you add a large picture to a ListView, it is given the next available picture index in the\nListView. For example, if your ListView has two pictures, the next picture you add will be\nassigned picture index number 3.\nBefore you add large pictures, you can specify scaling for the pictures by setting the\nLargePictureWidth and LargePictureHeight properties. The dimensions in effect when you\nadd the first picture determine the scaling for all pictures. Changing the property values after\nyou add pictures has no effect.\nIf you do not specify values for LargePictureWidth and LargePictureHeight before you add\npictures, the dimensions of the first image determine the scaling for all pictures you add.\nWhen you add a bitmap, specify the color in the bitmap that will be transparent by setting\nthe LargePictureMaskColor property before calling AddLargePicture. You can change the\nLargePictureMaskColor property between calls.\n"}
{"page": 392, "text": "Statements, Events, and Functions\nPage 392\nExamples\nThis example adds the file \"folder.ico\" to the large picture index of the ListView lv_files:\n// Add large picture\ninteger index\nindex = lv_files.AddLargePicture(\"folder.ico\")\nSee also\nDeleteLargePicture\n2.4.20 AddMasterSeparatorItem\nDescription\nAdds a menu separator to the master menu of the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.AddMasterSeparatorItem ( { Long ParentIndex } )\nTable 2.380:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control into which you want to\ninsert a menu separator.\nParentIndex\nThe index of the menu item (RibbonMenuItem) into which you want to\ninsert a submenu separator.\nIt cannot be an index of a separator. If not specified, a separator will be\nadded at the end of the menu; if specified to a valid value, a separator will\nbe added at the end of the submenu under the menu item (whose index is\nParentIndex); if specified to an invalid value, an error would occur and\nthis operation would return -1.\nReturn value\nLong.\nReturns the position of the new item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nThe menu separator is a horizontal line used to visually distinguish between groups of menu\nitems. The separator can only be added in the master menu of RibbonApplicationMenu\n(AddMasterSeparatorItem) or in the menu of RibbonMenu (AddSeparatorItem); it cannot be\nadded to the recent menu of RibbonApplicationMenu.\nExamples\nThis example inserts a menu separator below the \"Account\" master menu item and inserts\nanother menu separator in the submenu of \"Account\".\n"}
{"page": 393, "text": "Statements, Events, and Functions\nPage 393\nLong ll_Return, ll_Index\nRibbonApplicationMenu lr_AppMenu\nll_Return = lr_AppMenu.AddMasterSeparatorItem()\nll_Index = lr_AppMenu.InsertMasterItemFirst (\"Account\", \"AccountBig!\",\n \"Ue_AccountMasterItemClicked\")\nll_Return = lr_AppMenu.AddMasterSeparatorItem (ll_Index)\nSee also\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.21 AddPicture\nDescription\nAdds a bitmap, icon, or cursor to the main image list.\nApplies to\nPictureListBox, DropDownPictureListBox, and TreeView controls\nSyntax\ncontrolname.AddPicture ( picturename )\nTable 2.381:\nArgument\nDescription\ncontrolname\nThe name of the control to which you want to add an icon, cursor, or\nbitmap to the main image list\n"}
{"page": 394, "text": "Statements, Events, and Functions\nPage 394\nArgument\nDescription\npicturename\nThe name of the icon, cursor, or bitmap you want to add to the main\nimage list\nReturn value\nInteger.\nReturns the picture index number if it succeeds and -1 if an error occurs.\nUsage\nThe picture is assigned an index in the order in which it is added to the control.\nAdding pictures at runtime does not update the PictureName property array. Because the\npicture is added at the end of the list, the return value from AddPicture is the number of\npictures associated with the control.\nBefore you add pictures, you can specify scaling for the pictures by setting the PictureWidth\nand PictureHeight properties. The dimensions in effect when you add the first picture\ndetermine the scaling for all pictures. Changing the property values after you add pictures has\nno effect.\nIf you do not specify values for PictureWidth and PictureHeight before you add pictures, the\ndimensions of the first image determine the scaling for all pictures you add.\nWhen a you add a bitmap, specify the color in the bitmap that will be transparent by\nsetting the PictureMaskColor property before calling AddPicture. You can change the\nPictureMaskColor property between calls.\nExamples\nThis example adds a picture to a TreeView control and associates it with a new TreeView\nitem:\nlong ll_tvi\ninteger li_picture\nli_picture = &\ntv_list.AddPicture(\"c:\\apps_pb\\staff.ico\")\nll_tvi = tv_list.FindItem(RootTreeItem!, 0)\ntv_list.InsertItemFirst(ll_tvi, \"Dept.\", li_picture)\nSee also\nDeletePicture\n2.4.22 AddSeparatorItem\nDescription\nAdds a menu separator to the ribbon menu.\nApplies to\nRibbonMenu control\nSyntax\ncontrolname.AddSeparatorItem ({ Long ParentIndex })\n"}
{"page": 395, "text": "Statements, Events, and Functions\nPage 395\nTable 2.382:\nArgument\nDescription\ncontrolname\nThe name of the RibbonMenu control into which you want to insert a\nmenu separator.\nParentIndex\nThe index of the menu item (RibbonMenuItem) into which you want to\ninsert a submenu separator.\nIt cannot be an index of a separator. If not specified, a separator will be\nadded at the end of the menu; if specified to a valid value, a separator will\nbe added at the end of the submenu under the menu item (whose index is\nParentIndex); if specified to an invalid value, an error would occur and\nthis operation would return -1.\nReturn value\nLong.\nReturns the position of the new item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nThe menu separator is a horizontal line used to visually distinguish between groups of menu\nitems. The separator can only be added in the master menu of RibbonApplicationMenu\n(AddMasterSeparatorItem) or in the menu of RibbonMenu (AddSeparatorItem); it cannot be\nadded to the recent menu of RibbonApplicationMenu.\nExamples\nThis example inserts a menu separator below the \"MenuItem1\" menu item and inserts another\nmenu separator in the submenu of \"MenuItem1\".\nLong ll_Return,ll_Index\nRibbonMenu lr_Menu\nll_Return = lr_Menu.AddSeparatorItem()\nll_Index = lr_Menu.InsertItemFirst (\"MenuItem1\", \"AddSmall!\", \"Ue_MenuItemClicked\")\nll_Return = lr_Menu.AddSeparatorItem (ll_Index)\nSee also\nDeleteItem\nGetItem\nGetItemCount\nInsertItem\nInsertItemFirst\nInsertItemLast\nSetItem\n2.4.23 AddSeries\nDescription\n"}
{"page": 396, "text": "Statements, Events, and Functions\nPage 396\nAdds a series to a graph, naming it with the specified name. The new series is also assigned\na number. A graph's series are numbered consecutively, according to the order in which they\nare added.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects because their data comes directly from the DataWindow.\nSyntax\ncontrolname.AddSeries ( seriesname )\nTable 2.383:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to add a series\nseriesname\nA string whose value is the name of the series you want to add to\ncontrolname\nReturn value\nInteger.\nReturns the number assigned to the series if it succeeds. If seriesname is a duplicate,\nAddSeries returns the number of the existing series. If an error occurs, it returns -1. If any\nargument's value is null, AddSeries returns null.\nUsage\nAdds seriesname to the graph controlname and assigns the series a number. The number\nidentifies the series within the graph. The numbers are assigned in sequence. The first series\nyou add to the graph is assigned number 1 and is the first series displayed in the graph; the\nnext is assigned 2; and so on.\nThe series name must be unique within the graph. If you specify a name that already exists\nin the graph, AddSeries returns the number of the existing series. Series names are unique\nif they have different capitalization. The series name can be an empty string (\"\"). However,\nbecause series names must be unique, only one series can have a blank name. If you want to\ninsert a series in the middle of the list, use InsertSeries. You can also use InsertSeries to add a\nseries to the end of the list, as AddSeries does, although it requires an additional argument to\ndo it.\nTo add data to a series in the graph, use the AddData or InsertData function. To add a\ncategory to a series, use the InsertCategory or AddCategory function.\nExamples\nThese statements add the series named Costs to the graph gr_product_data:\ninteger series_nbr\nseries_nbr = gr_product_data.AddSeries(\"Costs\")\nThese statements add an unnamed series to the graph gr_product_data:\ninteger series_nbr\n"}
{"page": 397, "text": "Statements, Events, and Functions\nPage 397\nseries_nbr = gr_product_data.AddSeries(\"\")\nSee also\nAddCategory\nAddData\nDeleteData\nDeleteSeries\nFindSeries\nInsertCategory\nInsertSeries\nSeriesCount\nSeriesName\n2.4.24 AddSmallPicture\nDescription\nAdds a bitmap, icon, or cursor to the small image list.\nApplies to\nListView controls\nSyntax\nlistviewname.AddSmallPicture ( picturename )\nTable 2.384:\nArgument\nDescription\nlistviewname\nThe name of the ListView control to which you are adding a small image\npicturename\nThe name of the bitmap, icon, or cursor you are adding to the ListView\ncontrol small image list\nReturn value\nInteger.\nReturns the picture index if it succeeds and -1 if an error occurs.\nUsage\nWhen you add a small picture to a ListView control, it is given the next available picture\nindex in the ListView. For example, if your ListView has two pictures, the next picture you\nadd will have index number 3.\nBefore you add small pictures, you can specify scaling for the pictures by setting the\nSmallPictureWidth and SmallPictureHeight properties. The dimensions in effect when you\nadd the first picture determine the scaling for all pictures. Changing the property values after\nyou add pictures has no effect.\n"}
{"page": 398, "text": "Statements, Events, and Functions\nPage 398\nIf you do not specify values for SmallPictureWidth and SmallPictureHeight before you add\npictures, the dimensions of the first image determine the scaling for all pictures you add.\nBefore you call AddSmallPicture, specify the color in the bitmap that will be transparent by\nsetting the SmallPictureMaskColor property. You can change the SmallPictureMaskColor\nproperty between calls.\nExamples\nThis example adds the file \"shortcut.ico\" to the small picture index of the ListView lv_files:\n//Add small picture\ninteger index\nindex = lv_files.AddSmallPicture(\"shortcut.ico\")\nSee also\nDeleteSmallPicture\n2.4.25 AddStatePicture\nDescription\nAdds a bitmap, icon, or cursor to the state image list.\nApplies to\nListView and TreeView controls\nSyntax\ncontrolname.AddStatePicture ( picturename )\nTable 2.385:\nArgument\nDescription\ncontrolname\nThe name of the ListView or TreeView control to which you are adding a\nbitmap, cursor, or icon\npicturename\nThe name of the bitmap, icon, or cursor you are adding\nReturn value\nInteger.\nReturns the picture index if it succeeds and -1 if an error occurs.\nUsage\nFor ListViews in large icon view, the state picture is a picture displayed to the left of the\nlarge picture, by default in a smaller size. For TreeViews, the state picture is displayed to the\nleft of the regular picture and the item is moved to the right to make room for it.\nIf you specify either StatePictureWidth or StatePictureHeight, the picture is scaled to the size\nspecified by that property.\nWhen a you add a bitmap, specify the color in the bitmap that will be transparent by\nsetting the StatePictureMaskColor property before calling AddPicture. You can change the\nStatePictureMaskColor property between calls.\n"}
{"page": 399, "text": "Statements, Events, and Functions\nPage 399\nExamples\nThis example adds the file star.ico to the state picture index of the ListView lv_files:\n//Add state picture\ninteger index\nindex = lv_files.AddStatePicture(\"star.ico\")\nSee also\nDeleteStatePicture\n2.4.26 AddToLibraryList\nDescription\nAdds new files to the library search path of an application or component at runtime.\nSyntax\nAddToLibraryList ( filelist )\nTable 2.386:\nArgument\nDescription\nfilelist\nA comma-separated list of file names. Specify the full file name with its\nextension. If you do not specify a path, PowerBuilder uses the system's\nsearch path to find the file.\nReturn value\nInteger.\nReturns 1 if it succeeds. If an error occurs, it returns:\n-1 -- The application or component is being run in the PowerBuilder development\nenvironment, rather than from a standalone executable or server.\n-2 -- The new library list or existing library list is empty, or another internal error has\noccurred.\nUsage\nWhen an application needs to load an object, PowerBuilder searches for the object first in the\nexecutable file and then in the dynamic libraries specified for the application. For a deployed\ncomponent, PowerBuilder searches the PBD files in the component's library list. You can\nspecify additional library files with AddToLibraryList.\nCalling AddToLibraryList appends a new list of files, in the order in which they are specified\nin filelist, to the list of library files specified in the target. If filelist contains a file name that\nis already in the library list, that file name is not added to the library list. If filelist contains\nmore than one occurrence of a given file name, the first occurrence is added to the library list.\nPowerBuilder cannot check whether the libraries you specify are appropriate for the\napplication. It is up to you to make sure the libraries contain the objects that the application\nor component needs.\n"}
{"page": 400, "text": "Statements, Events, and Functions\nPage 400\nThis function has no effect in the PowerBuilder development environment.\nExamples\nThis example adds different PBDs to the library search path depending on whether product or\ncustomer processing is to be performed:\nCHOOSE CASE processkind\n   CASE \"product\"\n      AddToLibraryList(\"prod.pbd\")\n   CASE \"customer\"\n      AddToLibraryList(\"cust.pbd\")\nEND CHOOSE \nSee also\nGetLibraryList\nSetLibraryList\n2.4.27 AppendParam\nDescription\nAppends the parameter to the request for Extension Grant only.\nApplies to\nTokenRequest object\nSyntax\nobjectname.AppendParam ( string param, string value )\nTable 2.387:\nArgument\nDescription\nobjectname\nA reference to the TokenRequest object in which you want to append the\nparameter.\nparam\nA string specifying the parameter name.\nvalue\nA string specifying the parameter value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the AppendParam function to append a parameter:\nint li_return\nstring ls_param, ls_value \nTokenRequest lnv_TokenRequest\nli_return = lnv_TokenRequest.appendparam(ls_param,ls_value)\n"}
{"page": 401, "text": "Statements, Events, and Functions\nPage 401\nSee also\nClearHeaders\nGetHeader\nGetHeaders\nSetHeader\nSetHeaders\n2.4.28 ApplyTheme\nDescription\nApplies a theme to the current application UI. This method should be called when all\nwindows are closed, in order for windows and controls to take effect.\nSyntax\nApplyTheme ( String theme )\nTable 2.388:\nArgument\nDescription\ntheme\nA string whose value is the theme name (or theme path and name) you\nwant to apply to the current application.\nThe theme path is optional. If not specified, the default value is\n\"%AppeonInstallPath%\\PowerBuilder [version]\\IDE\\theme\" when the\napp is run from the IDE (at the development environment), and the\ndefault value is the \"theme\" under the root of the application installation\ndirectory when the application's executable file is run (at the production\nenvironment). If specified, it can be an absolute path or a relative path;\nand cannot be a UNC path (for example, \"\\\\172.16.0.1\\theme\\Flat Design\nBlue\" is unsupported). The relative path is relative to the PBT file at\nthe development environment; and relative to the root of the installation\ndirectory of the app's executable file at the production environment.\nThe theme name should be the sub-folder name under the specified theme\npath or the default path that contain the files for the theme, therefore the\nsub-folder name represents the theme name.\nIn Windows system, the maximum length for a path is defined as 260\ncharacters. Therefore, it is recommended the theme path (including theme\nname) should be less than 260 characters and the path alone (excluding\ntheme name) should be less than 200 characters.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if it fails. If any argument's value is null, the method\nreturns null.\nUsage\n"}
{"page": 402, "text": "Statements, Events, and Functions\nPage 402\nThe ApplyTheme method should be called when all windows are closed, for example, it can\nbe called in the Application Open event when all of the child windows are not yet opened.\nThe theme path and name set by the ApplyTheme function takes precedence over those\nselected in the PowerBuilder painter. See the following code examples for illustration.\nThe ApplyTheme method is effective to the window, DataWindow, and all visual controls\nin your current application, except Line, Oval, Rectangle, RoundRectangle, Picture,\nPictureHyperLink, and Animation.\nOnce you apply a theme to the application, you should not select the Windows classic style\noption in the System Options and/or project painter, otherwise, the application UI will be\nrendered in the Windows classic style instead of the selected theme.\nWhen the application is run in the Windows system and if the Windows system theme is\nset to \"Windows Classic\", then the application UI will be rendered in the Windows Classic\ntheme instead of the selected theme.\nThe \"Use Windows XP style DPI scaling\" option in Windows 7 and Windows Server 2012\nwill be automatically selected, if the scaling percentage is set to 125% or lower. This will\nprevent the selected theme working correctly. In such case, you should manually uncheck the\n\"Use Windows XP style DPI scaling\" option.\nIf the current operating system is Windows Server 2003, 2008, or 2008 R2 (or if the\n\"Windows classic style\" option is selected when building the application), the ApplyTheme\nfunction will not take effect and will return -1.\nThe ApplyTheme method can apply a theme, but it cannot turn off a theme. To turn off a\ntheme, you should remove the ApplyTheme method (as well as the theme settings in the\nPowerBuilder painter), and then restart the application for the change to take effect. Or create\na custom theme that has {\u201cdrawing\u201d:false} for every control type, and use this theme in the\nApplyTheme method.\nBefore switching between themes or turning off the theme thru the ApplyTheme method, it is\nthe best practice to prompt end users to reopen the current window, in order to refresh the UI\ncorrectly.\nExample 1\nThis example applies the \"Flat Design Blue\" theme (the theme name selected in the painter\nwill be ignored).\nWhen the app is run from the IDE, the script reads the theme files from the Theme Path set\nin the painter; when the app's executable file is run, the script reads the theme files from the\n\"theme\" folder under the root of the application installation directory.\nApplyTheme (\"Flat Design Blue\")\nExample 2\nThis example applies the \"Flat Design Blue\" theme and both the theme path and the theme\nname selected in the painter will be ignored.\nThe script reads the theme files from \"D:\\App1SourceCode\\themes\\\" no matter when the app\nis run from the IDE or when the app's executable file is run.\nApplyTheme(\"D:\\App1SourceCode\\themes\\Flat Design Blue\")\n"}
{"page": 403, "text": "Statements, Events, and Functions\nPage 403\nExample 3\nThis example applies the \"Flat Design Blue\" theme and both the theme path and the theme\nname selected in the painter will be ignored.\nWhen the app is run from the IDE, the script reads the theme files from the path relative to\nthe PBT file; when the app's executable file is run, the script reads the theme files from the\npath relative to the root of the application installation directory.\nApplyTheme(\".\\themes\\Flat Design Blue\")\nApplyTheme(\".\\..\\themes\\Flat Design Blue\")\nApplyTheme(\"themes\\Flat Design Blue\")\nSee also\nGetTheme\nSpecifying the UI theme for the application in Users Guide\n2.4.29 Arrange\nDescription\nArranges the icons in rows.\nApplies to\nListView controls\nSyntax\nlistviewname.Arrange ( )\nTable 2.389:\nArgument\nDescription\nlistviewname\nThe name of the ListView control in which you want to arrange icons\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nCan only be used with large icon and small icon views.\nExamples\nThis example arranges the icons in a ListView control:\nlv_list.Arrange()\n2.4.30 ArrangeSheets\nDescription\n"}
{"page": 404, "text": "Statements, Events, and Functions\nPage 404\nArranges the windows contained in an MDI frame. (Windows that are contained in an MDI\nframe are called sheets.) You can arrange the open sheets and the icons of minimized sheets\nor just the icons.\nApplies to\nMDI frame windows\nSyntax\nmdiframe.ArrangeSheets ( arrangetype )\nTable 2.390:\nArgument\nDescription\nmdiframe\nThe name of an MDI frame window.\narrangetype\nA value of the ArrangeTypes enumerated datatype specifying how you\nwant the open sheets arranged in the MDI frame window. Values are:\n\u2022 Cascade! -- Cascade the sheets that are not minimized so that each\nsheet's title bar is visible and arrange icons of minimized sheets in a\nrow at the bottom of the frame.\n\u2022 Layer! -- Layer the sheets that are not minimized so that each sheet\ncompletely covers the one below it and arrange icons of minimized\nsheets in a row at the bottom of the frame.\n\u2022 Tile! -- Tile the sheets that are not minimized so that they do not\noverlap and arrange icons of minimized sheets in a row at the bottom\nof the frame.\n\u2022 TileHorizontal! -- Tile the sheets that are not minimized so that each is\nbeside the other without overlapping and arrange icons of minimized\nsheets in a row at the bottom of the frame.\n\u2022 Icons! -- Arrange the minimized sheets in a row at the bottom of the\nframe.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nArrangeSheets returns null.\nExamples\nThis statement in the script for the Clicked event for an item on a menu tiles the open sheets\nthat are not minimized in the MDI frame window called MDI_User:\nMDI_User.ArrangeSheets(Tile!)\nThis statement in the script for the Clicked event for an item on a menu arranges the icons of\nthe minimized sheets at the bottom of the MDI frame window called MDI_User:\n"}
{"page": 405, "text": "Statements, Events, and Functions\nPage 405\nMDI_User.ArrangeSheets(Icons!)\nSee also\nGetActiveSheet\nOpenSheet\n2.4.31 Asc\nDescription\nConverts the first character of a string to its Unicode code point. A code point is the\nnumerical integer value given to a Unicode character.\nSyntax\nAsc ( string )\nTable 2.391:\nArgument\nDescription\nstring\nThe string for which you want the code point value of the first character\nReturn value\nUnsigned Integer. Returns the code point value of the first character in string. If string is null,\nAsc returns null.\nUsage\nYou can use Asc to find out the case of a character by testing whether its code point value is\nwithin the appropriate range.\nExamples\nThis statement returns 65, the code point value for uppercase A:\nAsc(\"A\")\nThis example checks if the first character of string ls_name is uppercase:\nString ls_name\nIF Asc(ls_name) > 64 and Asc(ls_name) < 91 THEN ...\nSee also\nAscA\nChar\nMid\nAsc method for DataWindows in Section 2.4.3, \u201cAsc\u201d in DataWindow Reference.\n2.4.32 AscA\nDescription\nConverts the first character of a string to its ASCII integer value.\n"}
{"page": 406, "text": "Statements, Events, and Functions\nPage 406\nSyntax\nAscA ( string )\nTable 2.392:\nArgument\nDescription\nstring\nThe string for which you want the ASCII value of the first character\nReturn value\nInteger.\nReturns the ASCII value of the first character in string. If string is null, AscA returns null.\nUsage\nYou can use AscA to find out the case of a character by testing whether its ASCII value is\nwithin the appropriate range. A separate function, Asc, is provided to return the Unicode code\npoint of a character.\nExamples\nThis statement returns 65, the ASCII value for uppercase A:\nAscA(\"A\")\nThis example checks if the first character of string ls_name is uppercase:\nString ls_name\nIF AscA(ls_name) > 64 and AscA(ls_name) < 91 THEN ...\nThis example is a function that converts an array of integers into a string. Each integer\nspecifies two characters. Its low byte is the first character in the pair and the high byte (ASCII\n* 256) is the second character. The function has an argument (iarr) which is the integer array:\nstring str_from_int, hold_str\ninteger arraylen\n \narraylen = UpperBound(iarr)\n \nFOR i = 1 to arraylen\n    // Convert first character of pair to a char\n    hold_str = CharA(iarr[i])\n \n    // Add characters to string after converting\n    // the integer's high byte to char\n    str_from_int += hold_str + &\n      CharA((iarr[i] - AscA(hold_str)) / 256)\nNEXT\nFor sample code that builds the integer array from a string, see Mid.\nSee also\nAsc\nCharA\nMid\n"}
{"page": 407, "text": "Statements, Events, and Functions\nPage 407\nAscA method for DataWindows in Section 2.4.4, \u201cAscA\u201d in DataWindow Reference.\n2.4.33 ASin\nDescription\nCalculates the arcsine of an angle.\nSyntax\nASin ( n )\nTable 2.393:\nArgument\nDescription\nn\nThe ratio of the lengths of two sides of a triangle for which you want a\ncorresponding angle (in radians). The ratio must be a value between -1\nand 1.\nReturn value\nDouble. Returns the arcsine of n.\nExamples\nThis statement returns .999998 (rounded to six places):\nASin(.84147)\nThis statement returns .520311 (rounded to six places):\nASin(LogTen (Pi (1)))\nThis statement returns 0:\nASin(0)\nThis code in the Clicked event of a button catches a runtime error that occurs when an arcsine\nis taken for a user-entered value -- passed in a variable -- that is outside of the permitted\nrange:\nDouble ld_num\nld_num = Double (sle_1.text)\n \nTRY\nsle_2.text = string (asin (ld_num))\nCATCH (runtimeerror er)\n   MessageBox(\"Runtime Error\", er.getmessage())\nEND TRY\nSee also\nSin\nACos\nATan\nPi\n"}
{"page": 408, "text": "Statements, Events, and Functions\nPage 408\nASin method for DataWindows in Section 2.4.5, \u201cASin\u201d in DataWindow Reference.\n2.4.34 AsymmetricDecrypt\nDescription\nDecrypts a blob value with asymmetric algorithm.\nApplies to\nCrypterObject objects\nSyntax\ncrypter.AsymmetricDecrypt ( algorithm, variable, privKey)\nTable 2.394:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object\nalgorithm\nA value of the AsymmetricAlgorithm enumerated type that specifies the\ntype of asymmetric algorithm.\nValues are:\n\u2022 RSA! \u2013 The Rivest-Shamir-Adleman cryptopsystem\n\u2022 Rabin! \u2013 The Rabin Algorithm\nNote: DSA! is designed to be used in signature, not in encryption and\ndecryption.\nvariable\nA blob whose value is the data you want to decrypt with Public-Key\ncipher.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nprivKey\nA blob specifying the private key. The private key format must be\nPKCS#8.\nReturn value\nBlob. Returns the result of the decrypt if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement encrypts the data using RSA and then returns the encrypted data.\nBlob lblb_data\nBlob lblb_privKey\nBlob lblb_pubKey\nBlob lblb_encrypt\nBlob lblb_decrypt\n"}
{"page": 409, "text": "Statements, Events, and Functions\nPage 409\nlblb_data = Blob(\"Test Rsa\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n// Generate the private key\nlnv_CrypterObject.AsymmetricGenerateKey(RSA!, 1024, lblb_privKey, lblb_pubKey)\n// Encrypt data using RSA\nlblb_encrypt = lnv_CrypterObject.AsymmetricEncrypt(RSA!, lblb_data, lblb_pubKey)\n// Decrypt data using RSA\nlblb_decrypt = lnv_CrypterObject.AsymmetricDecrypt(RSA!, lblb_encrypt,\n lblb_privKey)\nmessagebox(\"AsymmetricDecrypt\", string(lblb_decrypt, EncodingANSI!))\nSee also\nSymmetricEncrypt\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricSign\nAsymmetricVerifySign\nAsymmetricGenerateKey\nMD5\nSHA\nHMAC\n2.4.35 AsymmetricEncrypt\nDescription\nEncrypts a blob value with asymmetric algorithm.\nApplies to\nCrypterObject objects\nSyntax\ncrypter.AsymmetricEncrypt ( algorithm, variable, pubKey)\nTable 2.395:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object\nalgorithm\nA value of the AsymmetricAlgorithm enumerated type that specifies the\ntype of asymmetric algorithm.\nValues are:\n"}
{"page": 410, "text": "Statements, Events, and Functions\nPage 410\nArgument\nDescription\n\u2022 RSA! \u2013 The Rivest-Shamir-Adleman cryptopsystem\n\u2022 Rabin! \u2013 The Rabin Algorithm\nNote: DSA! is designed to be used in signature, not in encryption and\ndecryption.\nvariable\nA blob whose value is the data you want to encrypt with Public-Key\ncipher.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\npubKey\nA blob specifying the public key. Note: A 512-bit pubKey can encrypt a\nvariable of up to 22 bytes; a 1024-bit pubKey can encrypt a variable of up\nto 86 bytes; A 2048-bit pubKey can encrypt a variable of up to 214 bytes.\nReturn value\nBlob. Returns the result of the encryption if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement encrypts the data using RSA and then returns the encrypted data.\nBlob lblb_data\nBlob lblb_privKey\nBlob lblb_pubKey\nBlob lblb_encrypt\nlblb_data = Blob(\"Test Rsa\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n// Generate the private key\nlnv_CrypterObject.AsymmetricGenerateKey(RSA!, 1024, lblb_privKey, lblb_pubKey)\n// Encrypt data using RSA\nlblb_encrypt = lnv_CrypterObject.AsymmetricEncrypt(RSA!, lblb_data, lblb_pubKey)\nSee also\nSymmetricEncrypt\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricDecrypt\nAsymmetricSign\nAsymmetricVerifySign\nAsymmetricGenerateKey\n"}
{"page": 411, "text": "Statements, Events, and Functions\nPage 411\nMD5\nSHA\nHMAC\n2.4.36 AsymmetricGenerateKey\nDescription\nGenerates a secret key for asymmetric algorithm.\nApplies to\nCrypterObject objects\nSyntax\ncrypter.AsymmetricGenerateKey ( algorithm, len, privKey, pubKey)\nTable 2.396:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object\nalgorithm\nA value of the AsymmetricAlgorithm enumerated type that specifies the\ntype of asymmetric algorithm.\nValues are:\n\u2022 RSA! \u2013 The Rivest-Shamir-Adleman cryptopsystem\n\u2022 DSA! \u2013 The Digital Signature Algorithm. It is designed to be used in\nsignature, not in encryption and decryption.\n\u2022 Rabin! \u2013 The Rabin Algorithm\nlen\nAn integer specifying the key length. Recommended key length:\n512/1024/2048.\nprivKey\nA blob receiving the private key.\npubKey\nA blob receiving the public key.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if it failed. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis statement generates a public key and a private key.\nInteger li_return\nBlob lblb_privKey\nBlob lblb_pubKey\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n"}
{"page": 412, "text": "Statements, Events, and Functions\nPage 412\n// Generate the key\nli_return = lnv_CrypterObject.AsymmetricGenerateKey(RSA!, 1024, lblb_privKey,\n lblb_pubKey)\nif li_return = 1 then\n messagebox(\"Success\", \"Key is generated successfully!\")\nelse\n messagebox(\"Error\", \"Failed to generate the key!\")\nend if\nSee also\nSymmetricEncrypt\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricSign\nAsymmetricVerifySign\nMD5\nSHA\nHMAC\n2.4.37 AsymmetricSign\nDescription\nCalculates the signature of the data with asymmetric algorithm.\nApplies to\nCrypterObject objects\nSyntax\ncrypter.AsymmetricSign ( algorithm, variable, privKey)\nTable 2.397:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object\nalgorithm\nA value of the AsymmetricAlgorithm enumerated type that specifies the\ntype of asymmetric algorithm.\nValues are:\n\u2022 RSA! \u2013 The Rivest-Shamir-Adleman cryptopsystem\n\u2022 DSA! \u2013 The Digital Signature Algorithm. It is designed to be used in\nsignature, not in encryption and decryption.\n\u2022 Rabin! \u2013 The Rabin Algorithm\n"}
{"page": 413, "text": "Statements, Events, and Functions\nPage 413\nArgument\nDescription\nvariable\nA blob whose value is the data you want to sign with Public-Key cipher.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nprivKey\nA blob specifying the private key.\nReturn value\nBlob. Returns the signature of the data if it succeeds.. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement signs the data with RAS.\nBlob lblb_data\nBlob lblb_privKey\nBlob lblb_pubKey\nBlob lblb_signature\nlblb_data = Blob(\"Test Rsa\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n// Generate the private key\nlnv_CrypterObject.AsymmetricGenerateKey(RSA!, 1024, lblb_privKey, lblb_pubKey)\n// Sign with RSA\nlblb_signature = lnv_CrypterObject.AsymmetricSign(RSA!, lblb_data, lblb_privKey)\nSee also\nSymmetricEncrypt\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricVerifySign\nAsymmetricGenerateKey\nMD5\nSHA\nHMAC\n2.4.38 AsymmetricVerifySign\nDescription\nVerifies the signature of the data with asymmetric algorithm.\n"}
{"page": 414, "text": "Statements, Events, and Functions\nPage 414\nApplies to\nCrypterObject objects\nSyntax\ncrypter.AsymmetricVerifySign ( algorithm, variable, pubKey, sign)\nTable 2.398:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object\nalgorithm\nA value of the AsymmetricAlgorithm enumerated type that specifies the\ntype of asymmetric algorithm.\nValues are:\n\u2022 RSA! \u2013 The Rivest-Shamir-Adleman cryptopsystem\n\u2022 DSA! \u2013 The Digital Signature Algorithm. It is designed to be used in\nsignature, not in encryption and decryption.\n\u2022 Rabin! \u2013 The Rabin Algorithm\nvariable\nA blob whose value is the data you want to verify with Public-Key\ncipher.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\npubKey\nA blob specifying the public key.\nsign\nA blob specifying the signature.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if it failed. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis statement signs the data with RAS and validates the signature.\nBlob lblb_data\nBlob lblb_privKey\nBlob lblb_pubKey\nBlob lblb_signature\nInteger li_isPass\nlblb_data = Blob(\"Test Rsa\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n// Generate the private key\nlnv_CrypterObject.AsymmetricGenerateKey(RSA!, 1024, lblb_privKey, lblb_pubKey)\n"}
{"page": 415, "text": "Statements, Events, and Functions\nPage 415\n// Sign data with RSA\nlblb_signature = lnv_CrypterObject.AsymmetricSign(RSA!, lblb_data, lblb_privKey)\n// Validate the RSA signature\nli_isPass = lnv_CrypterObject.AsymmetricVerifySign(RSA!, lblb_data, lblb_pubKey,\n lblb_signature)\nif li_isPass = 1 then\n messagebox(\"Success\", \"Verification succeeded!\")\nelse\n messagebox(\"Error\", \"Verification failed!\")\nend if\nSee also\nSymmetricEncrypt\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricSign\nAsymmetricGenerateKey\nMD5\nSHA\nHMAC\n2.4.39 ATan\nDescription\nCalculates the arctangent of an angle.\nSyntax\nATan ( n )\nTable 2.399:\nArgument\nDescription\nn\nThe ratio of the lengths of two sides of a triangle for which you want a\ncorresponding angle (in radians)\nReturn value\nDouble. Returns the arctangent of n.\nExamples\nThis statement returns 0:\nATan(0)\nThis statement returns 1.000 (rounded to three places):\n"}
{"page": 416, "text": "Statements, Events, and Functions\nPage 416\nATan(1.55741)\nThis statement returns 1.267267 (rounded to six places):\nATan(Pi(1))\nSee also\nTan\nASin\nACos\nATan method for DataWindows in Section 2.4.6, \u201cATan\u201d in DataWindow Reference.\n2.4.40 Base32Decode\nDescription\nDecodes a string value using Base32 decoder.\nApplies to\nCoderObject object\nSyntax\ncoder.Base32Decode ( variable )\nTable 2.400:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA string whose value is the data you want to decode with Base32\ndecoder.\nReturn value\nBlob. Returns the result of the decoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement decodes the data that is encoded using Base32.\nCoderObject lco_Code\nBlob lbb_Data\nString ls_Return, ls_Data\nlco_Code = Create CoderObject\nls_Data = \"KRSXG5BAIJQXGZJTGJCW4L2EMVRW6ZDF\"\nlbb_Data = lco_Code.Base32Decode(ls_Data)\nls_Return = String (lbb_Data, EncodingUTF8!)\nDestroy ( lco_Code )\nSee also\n"}
{"page": 417, "text": "Statements, Events, and Functions\nPage 417\nHexDecode\nHexEncode\nBase32Encode\nBase64Decode\nBase64Encode\nBase64UrlDecode\nBase64UrlEncode\nUrlEncode\nUrlDecode\n2.4.41 Base32Encode\nDescription\nEncodes a blob value using Base32 encoder.\nApplies to\nCoderObject object\nSyntax\ncoder.Base32Encode ( variable )\nTable 2.401:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA blob whose value is the data you want to encode with Base32 encoder.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nReturn value\nString. Returns the result of the encoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement encodes the data using Base32 and returns the encoded data.\nCoderObject lco_Code\nBlob lbb_Data\nString ls_Return\nlco_Code = Create CoderObject\nlbb_Data = Blob ( \"Test Base32En/Decode\", EncodingUTF8! )\nls_Return = lco_Code.Base32Encode(lbb_Data)\n"}
{"page": 418, "text": "Statements, Events, and Functions\nPage 418\nDestroy ( lco_Code )\nSee also\nHexDecode\nHexEncode\nBase32Decode\nBase64Decode\nBase64Encode\nBase64UrlDecode\nBase64UrlEncode\nUrlEncode\nUrlDecode\n2.4.42 Base64Decode\nDescription\nDecodes a string value using Base64 decoder.\nApplies to\nCoderObject object\nSyntax\ncoder.Base64Decode ( variable )\nTable 2.402:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA string whose value is the data you want to decode with Base64\ndecoder.\nReturn value\nBlob. Returns the result of the decoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement decodes the data that is encoded using Base64.\nBlob lblb_data\nString ls_Base64Str\nCoderObject lnv_CoderObject\nlnv_CoderObject = Create CoderObject\n//ls_Base64Str = lnv_CoderObject.Base64Encode(Blob(\"Test Base64\", EncodingANSI!))\n"}
{"page": 419, "text": "Statements, Events, and Functions\nPage 419\nls_Base64Str = \"VGVzdCBCYXNlNjQ=\"\nlblb_data = lnv_CoderObject.Base64Decode(ls_Base64Str)\nmessagebox(\"Base64Decode\", string(lblb_data, EncodingANSI!))\nSee also\nHexDecode\nHexEncode\nBase32Decode\nBase32Encode\nBase64Encode\nBase64UrlDecode\nBase64UrlEncode\nUrlEncode\nUrlDecode\n2.4.43 Base64Encode\nDescription\nEncodes a blob value using Base64 encoder.\nApplies to\nCoderObject object\nSyntax\ncoder.Base64Encode ( variable )\nTable 2.403:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA blob whose value is the data you want to encode with Base64 encoder.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nReturn value\nString. Returns the result of the encoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement encodes the data using Base64 and returns the encoded data.\nBlob lblb_data\n"}
{"page": 420, "text": "Statements, Events, and Functions\nPage 420\nString ls_Base64Str\nlblb_data = Blob(\"Test Base64\", EncodingANSI!)\nCoderObject lnv_CoderObject\nlnv_CoderObject = Create CoderObject\nls_Base64Str = lnv_CoderObject.Base64Encode(lblb_data)\nSee also\nHexDecode\nHexEncode\nBase32Decode\nBase32Encode\nBase64Decode\nBase64UrlDecode\nBase64UrlEncode\nUrlEncode\nUrlDecode\n2.4.44 Base64UrlDecode\nDescription\nDecodes a string value using Base64Url decoder.\nApplies to\nCoderObject object\nSyntax\ncoder.Base64UrlDecode ( variable )\nTable 2.404:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA string whose value is the data you want to decode with Base64Url\ndecoder.\nReturn value\nBlob. Returns the result of the decoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nCoderObject lco_Code\nBlob lbb_Data\nString ls_Return, ls_Data\n"}
{"page": 421, "text": "Statements, Events, and Functions\nPage 421\nlco_Code = Create CoderObject\nls_Data = \"VGVzdCBCYXNlNjRVcmw\"\nlbb_Data = lco_Code.Base64UrlDeCode(ls_Data)\nls_Return = String (lbb_Data, EncodingUTF8!)\nDestroy ( lco_Code )\nSee also\nHexDecode\nHexEncode\nBase32Decode\nBase32Encode\nBase64Encode\nBase64Decode\nBase64UrlEncode\nUrlEncode\nUrlDecode\n2.4.45 Base64UrlEncode\nDescription\nEncodes a blob value using Base64Url encoder. Base64UrlEncode is an improved\nBase64Encode for URL. Base64UrlEncode and Base64Encode character sets are the same\nexcept for the last set of characters where Base64Url replaces \"+\" with \"-\" and \"/\" with \"_\".\nApplies to\nCoderObject object\nSyntax\ncoder.Base64UrlEncode ( variable )\nTable 2.405:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA blob whose value is the data you want to encode with Base64Url\nencoder.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nReturn value\n"}
{"page": 422, "text": "Statements, Events, and Functions\nPage 422\nString. Returns the result of the encoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement encodes the data using Base64Url and returns the encoded data.\nCoderObject lco_Code\nBlob lbb_Data\nString ls_Return\nlco_Code = Create CoderObject\nlbb_Data = Blob ( \"Test Base64Url\", EncodingUTF8! )\nls_Return = lco_Code.Base64UrlEncode(lbb_Data)\nDestroy ( lco_Code )\nSee also\nHexDecode\nHexEncode\nBase32Decode\nBase32Encode\nBase64Encode\nBase64Decode\nBase64UrlDecode\nUrlEncode\nUrlDecode\n2.4.46 Beep\nDescription\nCauses the computer to beep up to 10 times.\nSyntax\nBeep ( n )\nTable 2.406:\nArgument\nDescription\nn\nThe number of times you want the computer to beep. If n is greater than\n10, the computer beeps 10 times.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if it fails. If n is null, Beep returns null. The return value\nusually is not used.\n"}
{"page": 423, "text": "Statements, Events, and Functions\nPage 423\nExamples\nThis statement causes the computer to beep five times:\nBeep(5)\n2.4.47 BeginSession\nDescription\nCreates a session.\nApplies to\nApplication object\nSyntax\napplicationname.BeginSession ( )\nTable 2.407:\nArgument\nDescription\napplicationname\nThe name of the application object for which you want to create a session\nUsage\nNormally there is no need to call this function to create a session, because the session is\nautomatically created when the application starts. You may want to execute this function to\ncreate a session, only when you have obtained the access token and you want the session to\ninclude the access token.\nIn order to execute this function successfully, the \"Begin session by code\" option must be\nselected in the Application painter's Properties view so that the session will not be created\nautomatically, otherwise, this function will return -1 (indicating the session has already been\ncreated).\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if session already exists or if the current application is not an\ninstallable cloud app deployed with PowerServer.\nReturns one of the following numbers if an error occurs:\n\u2022 220 -- General session error.\n\u2022 222 -- Cannot connect with the server when creating the session.\n\u2022 230 -- License errors.\n\u2022 240 -- Unauthorized.\nExamples\nLong ll_Return\n"}
{"page": 424, "text": "Statements, Events, and Functions\nPage 424\nString ls_TokenType, ls_AccessToken, ls_Json\nJsonParser ljson_Parser\nljson_Parser = Create JsonParser\nls_Json = '{' +&\n'    \"access_token\":\n \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjM4OEQ0NEIxRDdBNkVFOUQxNTU0MDAzQUMzM0QzQzkzIiwidHlwIjoiYXQrand0In0\n__5sBelZD0vr6nmWh8Uy-zoJenzsrnVEv8VHVNi2enuKH6SBe-Q59bn5A-\nGbg6viNjv0S5HIaKuWeawExBH6uEAu28RlSlfG2bwWuCsyhYWOPIhNhYcZTbVD8ks0SFodGeGS-\nZqNOVrOTKb9oqnhvYxnuNofJpjToZ8ZZdKyWiyJUhItpTQTyI3MsCHoVU4X101YTPrVMF_-\nOuPSwXm6QMl3QtI_6Hy_PeYHL-xz2-q3tog\",' +&\n'    \"expires_in\": 3600,' +&\n'    \"token_type\": \"Bearer\",' +&\n'    \"scope\": \"scope.readaccess\"' +&\n'}'\nljson_Parser.LoadString( ls_Json )\nls_TokenType = ljson_Parser.GetItemString( \"/token_type\" )\nls_AccessToken = ljson_Parser.GetItemString( \"/access_token\" )\nll_Return = Getapplication().SetHttpRequestHeader( \"Authorization\", ls_TokenType +\n \" \" + ls_AccessToken, True )\nTry\n ll_return = Getapplication().Beginsession()\n If ll_return <> 0 Then\n  Messagebox(\"Beginsession Failed: \" + String(ll_return),\n Getapplication().GetHttpResponseStatusText())\n End if\nCatch ( Throwable ex)\n MessageBox( \"Throwable\", ex.GetMessage())\nEnd Try\nIf IsValid ( ljson_Parser ) Then Destroy ( ljson_Parser )\nSee also\nGetHttpResponseHeaders\nGetHttpResponseStatusCode\nGetHttpResponseStatusText\nSetHttpRequestHeader\n2.4.48 BeginTransaction (obsolete)\nDescription\nCreates an EAServer transaction and associates it with the calling thread.\nObsolete function\nBeginTransaction is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017. An obsolete feature is no longer eligible for technical support and\nwill no longer be enhanced, although it is still available.\nApplies to\nCORBACurrent objects\nSyntax\n"}
{"page": 425, "text": "Statements, Events, and Functions\nPage 425\nCORBACurrent.BeginTransaction (  )\nTable 2.408:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\nReturn value\nBoolean.\nReturns true if it succeeds and false if the transaction could not be created.\nUsage\nThe BeginTransaction function creates a transaction and modifies the transaction context\nof the calling thread so that it is associated with the transaction. This enables the calling\nthread to obtain information about the transaction and control commits and rollbacks.\nBeginTransaction can be called by a client or a component that is marked as OTS style.\nEAServer must be using the two-phase commit transaction coordinator (OTS/XA). If the\ncalling thread is already associated with a transaction, BeginTransaction returns false. Nested\ntransactions are not supported.\nExamples\nThis example shows the use of BeginTransaction to create a transaction from a client:\n// Instance variables:\n// CORBACurrent corbcurr\n// Connection myconnect\nlong ll_rc\ninteger li_rc1, li_rc2\nboolean lb_success\nll_rc = myconnect.ConnectToServer()\n// insert error handling ...\nli_rc1 = this.GetContextService(\"CORBACurrent\", &\n    corbcurr)\n// insert error handling ...\nli_rc2 = corbcurr.Init( myconnect )\n// insert error handling ...\nlb_success = corbcurr.BeginTransaction()\nIF NOT lb_success THEN\n    MessageBox (\"Create Transaction Failed\", &\n    \"The client may already be in a transaction\")\n    RETURN\nELSE\n    ll_rc = myconnect.CreateInstance(lcst_mybookstore)\n    // begin processing\n...\nSee also\nCommitDocking\nGetContextService\nGetStatus (obsolete)\nGetTransactionName (obsolete)\nInit (obsolete)\n"}
{"page": 426, "text": "Statements, Events, and Functions\nPage 426\nResumeTransaction (obsolete)\nRollbackOnly (obsolete)\nRollbackTransaction (obsolete)\nSetTimeout (obsolete)\nSuspendTransaction (obsolete)\n2.4.49 Blob\nConverts a string or byte array to a blob.\nTable 2.409:\nTo\nUse\nConvert a string to a blob\nSyntax 1\nConvert a string or byte array to a blob\nSyntax 2\nSyntax 1: Convert a string to a blob\nDescription\nConverts a string to a blob datatype.\nSyntax\nBlob ( text {, encoding} )\nTable 2.410:\nArgument\nDescription\ntext\nThe string you want to convert to a blob datatype\nencoding\nCharacter encoding of the resulting blob. Values are:\n\u2022 EncodingANSI!\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE! (default)\n\u2022 EncodingUTF16BE!\nReturn value\nBlob.\nReturns the converted string in a blob with the requested encoding, if specified. If text is null,\nBlob returns null.\nUsage\nIf the encoding argument is not provided, Blob converts a Unicode string to a Unicode blob.\nYou must provide the encoding argument if the blob has a different encoding.\n"}
{"page": 427, "text": "Statements, Events, and Functions\nPage 427\nExamples\nThis example saves a text string as a Unicode blob:\nBlob B\nB = Blob(\"Any Text\")\nThis example saves a text string as a blob with UTF-8 encoding:\nBlob Blb\nBlb = Blob(\"Any Text\", EncodingUTF8!)\nSee also\nBlobEdit\nBlobMid\nString\nSyntax 2: Convert a string or a byte array to a blob\nDescription\nConverts a string or an array of bytes to a blob datatype.\nSyntax\nBlob ( array[ ] )\nTable 2.411:\nArgument\nDescription\nstringorbytearray An Any variable that holds a string or an array of bytes you want to\nconvert to a blob datatype\nReturn value\nBlob.\nReturns the converted string or byte array in a blob.\nExamples\nThis example saves an array of bytes as a blob, then copies the contents of the blob to another\nbyte array:\nBlob lblb_1\nAny a\nbyte lbyte_array[], lbyte_array2[]\n// initialize array\nlbyte_array[] = {1,10,100,200,255}\na = lbyte_array\nlblb_1 = Blob(a)\nlbyte_array2[] = GetByteArray(lblb_1)\nSee also\n"}
{"page": 428, "text": "Statements, Events, and Functions\nPage 428\nGetByteArray\n2.4.50 BlobEdit\nDescription\nInserts data of any PowerBuilder datatype into a blob variable.\nSyntax\nBlobEdit ( blobvariable, n, data {, encoding} )\nTable 2.412:\nArgument\nDescription\nblobvariable\nAn initialized variable of the blob datatype into which you want to copy a\nstandard PowerBuilder datatype\nn\nThe number (1 to 4,294,967,295) of the position in blobvariable at which\nyou want to begin copying the data\ndata\nData of a valid PowerBuilder datatype that you want to copy into\nblobvariable\nencoding\nCharacter encoding of the blob variable in which you want to insert data\nof datatype string. Values are:\n\u2022 EncodingANSI!\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE! (default)\n\u2022 EncodingUTF16BE!\nReturn value\nUnsigned long. Returns the position at which the next data can be copied if it succeeds, and\nreturns null if there is not enough space in blobvariable to copy the data. If any argument's\nvalue is null, BlobEdit returns null.\nIf the data argument is a string, the position in the blobvariable in which you want to copy\ndata will be the length of the string + 2. If the data argument is a string converted to a blob,\nthe position will be the length of the string + 1. This is because a string contains a null\nterminating character that it loses when it is converted to a blob. Thus, BlobEdit (blob_var, 1,\n\"ZZZ'') returns 5, while BlobEdit (blob_var, 1, blob (''ZZZ'') ) returns 4.\nUse the encoding parameter if the data argument is a string and you want to generate a blob\nwith a specific encoding.\nExamples\nThis example copies a bitmap in the blob emp_photo starting at position 1, stores the position\nat which the next copy can begin in nbr, and then copies a date into the blob emp_photo after\nthe bitmap data:\nblob{1000} emp_photo\n"}
{"page": 429, "text": "Statements, Events, and Functions\nPage 429\nblob temp\ndate pic_date\nulong nbr\n \n... // Read BMP file containing employee picture\n... // into temp using FileOpen and FileRead.\npic_date = Today()\n \nnbr = BlobEdit(emp_photo, 1, temp)\nBlobEdit(emp_photo, nbr, pic_date)\nUPDATEBLOB Employee SET pic = :emp_photo\n    WHERE ...\nThis example copies a string into the blob blb_data starting at position 1 and specifies that the\nblob should use ANSI encoding:\nblob{100} blb_data\nstring str1 = \"This is a string\"\nulong ul_pos\n \nul_pos = BlobEdit (blb_data, 1, str1, EncodingANSI!)\nSee also\nBlob\nBlobMid\n2.4.51 BlobMid\nDescription\nExtracts data from a blob variable.\nSyntax\nBlobMid ( data, n {, length } )\nTable 2.413:\nArgument\nDescription\ndata\nData of the blob datatype\nn\nThe number (1 to 4,294,967,295) of the first byte you want returned\nlength (optional)\nThe number of bytes (1 to 4,294,967,295) you want returned\nReturn value\nBlob. Returns length bytes from data starting at byte n. If n is greater than the number of\nbytes in data, BlobMid returns an empty blob. If together length and n add up to more bytes\nthan the blob contains, BlobMid returns the remaining bytes, and the returned blob will be\nshorter than the specified length. If any argument's value is null, BlobMid returns null.\nInclude terminator character\nString variables contain a zero terminator, which accounts for one byte. Include the\nterminator character when calculating how much data to extract.\n"}
{"page": 430, "text": "Statements, Events, and Functions\nPage 430\nExamples\nIn this example, the first call to BlobMid stores 10 bytes of the blob datablob starting at\nposition 5 in the blob data_1; the second call stores the bytes of datablob from position 5 to\nthe end in data_2:\nblob data_1, data_2, datablob\n \n... // Read a blob datatype into datablob.\n \ndata_1 = BlobMid(datablob, 5, 10)\ndata_2 = BlobMid(datablob, 5)\nThis code copies a bitmap in the blob emp_photo starting at position 1, stores the position at\nwhich the next copy can begin in nbr, and then copies a date into the blob emp_photo after\nthe bitmap data. Then, using the date's start position, it extracts the date from the blob and\ndisplays it in the StaticText st_1:\nblob{1000} emp_photo\nblob temp\ndate pic_date\nulong nbr\n \n... // Read BMP file containing employee picture\n... // into temp using FileOpen and FileRead.\n \npic_date = Today()\nnbr = BlobEdit(emp_photo, 1, temp)\nBlobEdit(emp_photo, nbr, pic_date)\nst_1.Text = String(Date(BlobMid(emp_photo, nbr)))\nSee also\nBlob\nBlobEdit\n2.4.52 BuildModel\nDescription\nBuilds either a performance analysis or trace tree model based on the trace file you have\nspecified with the SetTraceFileName function. Optional arguments let you monitor the\nprogress of the build or interrupt it.\nYou must specify the trace file to be modeled using the SetTraceFileName function before\ncalling BuildModel.\nApplies to\nProfiling and TraceTree objects\nSyntax\ninstancename.BuildModel ( { progressobject, eventname, triggerpercent } )\nTable 2.414:\nArgument\nDescription\ninstancename\nInstance name of the Profiling or TraceTree object\n"}
{"page": 431, "text": "Statements, Events, and Functions\nPage 431\nArgument\nDescription\nprogressobject\n(optional)\nA PowerObject that represents the number of activities that have been\nprocessed\neventname\n(optional)\nA string specifying the name of an event you define\ntriggerpercent\n(optional)\nA long identifying the number of activities the BuildModel function\nshould process before triggering the eventname event\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileNotSetError! -- TraceFileName has not been set\n\u2022 ModelExistsError! -- A model has already been built\n\u2022 EnterpriseOnlyFeature! -- (Obsolete) This function is supported only in the Enterprise\nedition of PowerBuilder 12.6 and earlier versions.\n\u2022 EventNotFoundError! -- The event cannot be found on the passed progressobject, so the\nmodel cannot be built\n\u2022 EventWrongPrototypeError! -- The event was found but does not have the proper\nprototype, so the model cannot be built\n\u2022 SourcePBLError! -- The source libraries cannot be found, so the model cannot be built\nUsage\nThe BuildModel function extracts raw data from a trace file and maps it to objects that can be\nacted upon by PowerScript functions. If you want to build a model of your trace file without\nrecording the progress of the build, call BuildModel without any of its optional arguments. If\nyou want to receive progress information while the model is being created or if you want to\nbe able to interrupt a BuildModel that is taking too long to complete, call BuildModel with its\noptional arguments.\nThe event eventname on the passed progressobject is triggered when the number of activities\nindicated by the triggerpercent argument are processed. If the value of triggerpercent is 0,\neventname is triggered for every activity. If the value of triggerpercent is greater than 100,\neventname is never triggered. You define this event using this syntax:\neventname ( currentactivity, totalnumberofactivities )\nTable 2.415:\nArgument\nDescription\neventname\nName of the event\ncurrentactivity\nA long identifying the number of the current activity\n"}
{"page": 432, "text": "Statements, Events, and Functions\nPage 432\nArgument\nDescription\ntotalnumberofactivities\nA long identifying the total number of activities in the trace file\nEventname returns a boolean value. If it returns false, the processing initiated by the\nBuildModel function is canceled and any temporary storage is cleaned up. If you need to stop\nBuildModel processing that is taking too long, you can return a false value from eventname.\nThe script you write for eventname determines how progress is monitored. For example, you\nmight display progress or simply check whether the processing must be canceled.\nExamples\nThis example creates a performance analysis model of a trace file:\nProfiling lpro_model\nString ls_filename\n \nlpro_model = CREATE Profiling\nlpro_model.SetTraceFileName(ls_filename)\nlpro_model.BuildModel()\nThis example creates a trace tree model of a trace file:\nTraceTree ltct_model\nString ls_filename\n \nltct_model = CREATE TraceTree\nltct_model.SetTraceFileName(ls_filename)\nltct_model.BuildModel()\nThis example creates a performance analysis model that provides progress information as the\nmodel is built. The eventname argument to BuildModel is called ue_progress and is triggered\neach time five percent of the activities have been processed. The progress of the build is\nshown in a window called w_progress that includes a Cancel button:\nProfiling lpro_model\nString ls_filename\nBoolean lb_cancel\n \nlpro_model = CREATE Profiling\nlb_cancel = false\nlpro_model.SetTraceFileName(ls_filename)\n \nOpen(w_progress)\n// Call the of_init window function to initialize\n// the w_progress window\nw_progress.of_init(lpro_model.NumberOfActivities, &\n    'Building Model', This, 'ue_cancel')\n \nlpro_model.BuildModel(This, 'ue_progress', 5)\n \n// Clicking the cancel button in w_progress\n// sets lb_cancel to true and returns\n// false to ue_progress\nIF lb_cancel THEN &\n    Close(w_progress)\n    RETURN -1\nEND IF\nSee also\nSetTraceFileName\n"}
{"page": 433, "text": "Statements, Events, and Functions\nPage 433\nDestroyModel\n2.4.53 Byte\nDescription\nConverts a number into a Byte datatype or obtains a Byte value stored in a blob.\nSyntax\nByte ( stringorblob )\nTable 2.416:\nArgument\nDescription\nstringorblob\nA String or any numeric datatype that you want to return as a Byte, or a\nBlob datatype in which the initial value is the Byte value that you want to\nreturn. The stringorblob variable can also have an Any datatype as long\nas it references a string, integer, uint, long, longlong, or blob.\nReturn value\nByte.\nReturns the value of the stringorblob variable as a Byte datatype if it succeeds; it returns 0\nif the stringorblob variable is not a valid PowerScript number or if it has an incompatible\ndatatype. If stringorblob is null, Byte returns null.\nUsage\nIf the number you convert exceeds the upper range of the Byte datatype (>255), the Byte\nmethod returns the difference between the number you pass in the stringorblob argument and\nthe nearest multiple of 256 below that number.\nIf you pass a blob in the stringorblob argument, only the value of the initial character is\nconverted to a byte value. (There is no \"overflow\" when you use a blob argument.) To get the\nbyte value for a character at a different position in the blob, you can use the GetByte method.\nExamples\nThis example converts a string entered in a SingleLineEdit control to a byte value:\nByte ly_byte\nly_byte = Byte(sle_1.text)\nIf the text entered in the SingleLineEdit is 4, the byte value of ly_byte is 4. If the text entered\nis 257, the value of ly_byte is 1. For 256 or text such as \"ABC12\", the value of ly_byte is 0.\nThis example returns the ASCII value of the initial character that you enter in a\nSingleLineEdit control:\nByte lb_byte\nBlob myBlob\nmyBlob = Blob(sle_1.text)\nlb_byte = Byte(myBlob)\nSee also\n"}
{"page": 434, "text": "Statements, Events, and Functions\nPage 434\nGetByte\nSetByte\n2.4.54 Cancel\n2.4.54.1 Syntax 1: for Pipeline objects\nDescription\nStops the execution of a pipeline object.\nApplies to\nPipeline objects\nSyntax\npipelineobject.Cancel ( )\nTable 2.417:\nArgument\nDescription\npipelineobject\nThe name of a pipeline user object that contains the pipeline object to be\nexecuted\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nCall this function only when Start or Repair is executing.\nWhen you stop a pipeline with Cancel, data is committed as if the pipeline had reached the\nmaximum errors limit. You control how the pipeline behaves when it reaches the limit in the\nData Pipeline painter (see the Section 5.2, \u201cWorking with Data Pipelines\u201d in Users Guide).\nExamples\nThis statement for a CommandButton's Clicked script allows the user to stop the execution of\nthe pipeline i_pipe:\ni_pipe.Cancel()\nSee also\nRepair\nStart\n2.4.54.2 Syntax 2: for CompressorObject and ExtractorObject objects\nDescription\nCancels the current compression or extraction operation. Only used for the asynchronous\ninterface.\n"}
{"page": 435, "text": "Statements, Events, and Functions\nPage 435\nApplies to\nCompressorObject and ExtractorObject objects\nSyntax\nobjectname.Cancel ( )\nTable 2.418:\nArgument\nDescription\nobjectname\nThe name of the CompressorObject or ExtractorObject object.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis statement for a CompressorObject's Clicked script allows the user to stop the execution\nof the compression lnv_compress:\nlnv_compress.Cancel()\nSee also\nCompress\n2.4.55 CancelDownload\nDescription\nCancels the download progress of the file.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.CancelDownload ( integer ItemId )\nTable 2.419:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nItemId\nThe ID used to identify the file. The minimum value is 1.\nItemId should be the return value of DownloadingStart or\nDownloadingStateChanged event.\nReturn value\nInteger.\n\u2022 1 -- Success.\n"}
{"page": 436, "text": "Statements, Events, and Functions\nPage 436\n\u2022 -2 -- Failed to get the browser instance.\n\u2022 -6 -- The specified download task does not exist.\nExamples\nInteger li_rtn, li_itemid\nli_rtn = wb_1.CancelDownload(li_itemid)\nSee also\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\nPauseDownload\nPrintAsPDF\nRegisterEvent\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.56 CancelSync\nDescription\nCancels the synchronization process and rolls back any changes accumulated during the\nprocessing.\nApplies to\nMLSynchronization, MLSync controls\nSyntax\nSyncObject.CancelSync ( )\nTable 2.420:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object that started a synchronization\nprocess that you want to stop.\nReturn value\n"}
{"page": 437, "text": "Statements, Events, and Functions\nPage 437\nInteger.\nReturns 1 for success and -1 for failure.\nExamples\nThe following code in the Clicked event of the Cancel button on a wizard-generated\nsynchronization progress window cancels the synchronization:\nlong rc\nrc = i_uosync.cancelsync()\nIF rc = 1 THEN\n    mle_status.text += 'Synchronization Cancelled~r~n'\nELSE   \n    mle_status.text += 'Cancel request failed.~r~n'\nEND IF\nSee also\nSynchronize\n2.4.57 CanUndo\nDescription\nTests whether Undo can reverse the most recent edit for an editable control.\nApplies to\nAny editable control (DataWindow, MultiLineEdit, SingleLineEdit, RichTextEdit)\nSyntax\neditname.CanUndo ( )\nTable 2.421:\nArgument\nDescription\neditname\nThe name of the DataWindow control, MultiLineEdit, SingleLineEdit, or\nRichTextEdit for which you want to determine whether the last edit can\nbe reversed by the Undo function. In a DataWindow, CanUndo applies to\nthe edit control over the current row and column.\nReturn value\nBoolean. Returns true if the last edit can be reversed (undone) using the Undo function and\nfalse if the last edit cannot be reversed. If editname is null, CanUndo returns null.\nExamples\nThese statements check to see if the last edit in mle_contact can be reversed; if yes the\nstatements reverse it, and if no they display a message:\nIF mle_contact.CanUndo() THEN\n    mle_contact.Undo()\nELSE\n    MessageBox(Parent.Title, \"Nothing to Undo\")\nEND IF\nSee also\n"}
{"page": 438, "text": "Statements, Events, and Functions\nPage 438\nUndo\n2.4.58 CategoryCount\nDescription\nCounts the number of categories on the category axis of a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.CategoryCount ( { graphcontrol } )\nTable 2.422:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the number of categories, or\nthe name of a DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow for\nwhich you want the number of categories. Graphcontrol is required if\ncontrolname is a DataWindow control.\nReturn value\nInteger.\nReturns the count if it succeeds and -1 if an error occurs. If any argument's value is null,\nCategoryCount returns null.\nExamples\nThese statements get the number of categories in the graph gr_revenues in the DataWindow\ncontrol dw_findata:\ninteger li_count\nli_count = &\n    dw_findata.CategoryCount(\"gr_revenues\")\nThese statements get the number of categories in the graph gr_product_data:\ninteger li_count\nli_count = gr_product_data.CategoryCount()\nSee also\nDataCount\nSeriesCount\n2.4.59 CategoryName\nDescription\nObtains the category name associated with the specified category number.\n"}
{"page": 439, "text": "Statements, Events, and Functions\nPage 439\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls .\nSyntax\ncontrolname.CategoryName ( { graphcontrol, } categorynumber )\nTable 2.423:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to find the name of a specific\ncategory, or the name of the DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow for\nwhich you want the name of a specific category. Graphcontrol is required\nif controlname is a DataWindow control.\ncategorynumber\nThe number of the category for which you want the name.\nReturn value\nString.\nReturns the name of categorynumber in controlname. If an error occurs, it returns the empty\nstring (\"\"). If any argument's value is null, CategoryName returns null.\nUsage\nCategories are numbered consecutively, from 1 to the value returned by CategoryCount.\nWhen you delete a category, the categories are renumbered to keep the numbering\nconsecutive. You can use CategoryName to find out the named category associated with a\ncategory number.\nExamples\nThese statements obtain the name of category 5 in the graph gr_product_data:\nstring ls_name\nls_name = gr_product_data.CategoryName(5)\nThese statements obtain the name of category 5 in the graph gr_revenues in the DataWindow\ncontrol dw_findata:\nstring ls_name\nls_name = &\n    dw_findata.CategoryName(\"gr_revenues\", 5)\nSee also\nAddCategory\nSeriesName\n2.4.60 Ceiling\nDescription\n"}
{"page": 440, "text": "Statements, Events, and Functions\nPage 440\nDetermines the smallest whole number that is greater than or equal to a specified limit.\nSyntax\nCeiling ( n )\nTable 2.424:\nArgument\nDescription\nn\nThe number for which you want the smallest whole number that is greater\nthan or equal to it\nReturn value\nThe datatype of n. Returns the smallest whole number that is greater than or equal to n. If n is\nnull, Ceiling returns null.\nExamples\nThese statements set num to 5:\ndecimal dec, num\ndec = 4.8\nnum = Ceiling(dec)\nThese statements set num to -4:\ndecimal num\nnum = Ceiling(-4.2)\nnum = Ceiling(-4.8)\nSee also\nInt\nRound\nTruncate\nCeiling method for DataWindows in Section 2.4.10, \u201cCeiling\u201d in DataWindow Reference.\n2.4.61 ChangeDirectory\nDescription\nChanges the current directory.\nSyntax\nChangeDirectory ( directoryname )\nTable 2.425:\nArgument\nDescription\ndirectoryname\nString for the name of the directory you want to set as the current\ndirectory\nReturn value\n"}
{"page": 441, "text": "Statements, Events, and Functions\nPage 441\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nExamples\nThis example changes the current directory to the parent directory of the current directory and\ndisplays the new current directory in a SingleLineEdit control:\nChangeDirectory( \"..\" )\nsle_1.text= GetCurrentDirectory( )\nSee also\nCreateDirectory\nGetCurrentDirectory\n2.4.62 ChangeMenu\nDescription\nChanges the menu associated with a window. If the window is an MDI frame window,\nChangeMenu appends the list of open sheets to the currently active menu.\nApplies to\nWindow objects\nSyntax\nwindowname.ChangeMenu ( menuname {, position } )\nTable 2.426:\nArgument\nDescription\nwindowname\nThe name of the window for which you want to change the menu.\nmenuname\nThe name of the menu you want to make the current menu.\nposition (MDI\nframe windows\nonly)\nThe number of the item on the menu bar to which you want to append\nthe names of the open sheets. Items on the menu bar are numbered from\nthe left, beginning with 1. The default is 0, which lists the open sheets\non the menu bar's next-to-last menu (or the last menu if there is only one\navailable).\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nChangeMenu returns null. The return value is usually not used.\nUsage\nIf you are changing the menu associated with an MDI frame window, the new menu will not\nbe visible if an open sheet with its own menu is active. When a sheet has its own menu, the\nlist of open sheets appears on its menu, as well as on the hidden menu for the frame.\n"}
{"page": 442, "text": "Statements, Events, and Functions\nPage 442\nIn an MDI frame window, if you change to a menu with a different menu and toolbar style\n(traditional or contemporary), the style of the menu changes but the style of the toolbar does\nnot.\nExamples\nThis statement changes the top-level menu of the w_Employee window to m_Emp1:\nw_Employee.ChangeMenu(m_Emp1)\n2.4.63 Char\nDescription\nExtracts the first Unicode character of a string or converts an integer to a char.\nSyntax\nChar ( n )\nTable 2.427:\nArgument\nDescription\nn\nA string that begins with the character you want, an integer you want\nto convert to a character, or a blob in which the first value is a string or\ninteger. The rest of the contents of the string or blob is ignored. N can\nalso be an Any variable containing a string, integer, or blob.\nReturn value\nChar.\nReturns the first Unicode character of n. If n is null, Char returns null.\nExamples\nThis example sets ls_S to an asterisk, the character corresponding to the ASCII value 42:\nstring ls_S\nls_S = Char(42)\nThese statements generate delivery codes A to F for the values 1 through 6 of\nli_DeliveryNbr:\nstring ls_Delivery\ninteger li_DeliveryNbr\n \nFOR li_DeliveryNbr = 1 to 6\n    ls_Delivery = Char(64 + li_DeliveryNbr)\n    ... // Additional processing of ls_Delivery\nNEXT\nSee also\nAsc\nCharA\n2.4.64 CharA\nDescription\n"}
{"page": 443, "text": "Statements, Events, and Functions\nPage 443\nExtracts the first ASCII character of a string or converts an integer to a char.\nSyntax\nCharA ( n )\nTable 2.428:\nArgument\nDescription\nn\nA string that begins with the character you want, an integer you want\nto convert to a character, or a blob in which the first value is a string or\ninteger. The rest of the contents of the string or blob is ignored. N can\nalso be an Any variable containing a string, integer, or blob.\nReturn value\nChar.\nReturns the first character of n. If n is null, CharA returns null.\nExamples\nThis example sets ls_S to an asterisk, the character corresponding to the ASCII value 42:\nstring ls_S\nls_S = CharA(42)\nThese statements generate delivery codes A to F for the values 1 through 6 of\nli_DeliveryNbr:\nstring ls_Delivery\ninteger li_DeliveryNbr\n \nFOR li_DeliveryNbr = 1 to 6\n    ls_Delivery = CharA(64 + li_DeliveryNbr)\n    ... // Additional processing of ls_Delivery\nNEXT\nSee also\nAscA\nChar\nChar method for DataWindows in Section 2.4.11, \u201cChar\u201d in DataWindow Reference.\n2.4.65 Check\nDescription\nDisplays a checkmark next to a menu item in a drop-down or cascading menu and sets the\nmenu item's Checked property to true.\nApplies to\nMenu objects\nSyntax\n"}
{"page": 444, "text": "Statements, Events, and Functions\nPage 444\nmenuname.Check ( )\nTable 2.429:\nArgument\nDescription\nmenuname\nThe fully qualified name of the menu next to which you want to display a\ncheckmark. The item must be in a drop-down or cascading menu, not an\nitem on a menu bar.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If menuname is null, Check returns null.\nUsage\nA checkmark next to a menu item indicates that the menu option is currently on and that\nthe user can turn the option on and off by choosing it. For example, in the Window painter's\nDesign menu, a checkmark is displayed next to Grid when the grid is on.\nYou can use Check in an item's Clicked script to mark a menu item when the user turns the\noption on and Uncheck to remove the check when the user turns the option off.\nEquivalent syntax\nYou can set a menu object's Checked property instead of calling Check.\nmenuname.Checked = true\nThis statement:\nMenu_Appl.M_View.M_Grid.Checked = TRUE\nis equivalent to:\nMenu_Appl.M_View.M_Grid.Check()\nExamples\nThis statement displays a checkmark next to the menu item m_Grid in the m_View drop-\ndown menu on the menu bar m_Appl:\nm_Appl.m_View.m_Grid.Check()\nSee also\nUncheck\n2.4.66 ChooseColor\nDescription\nDisplays the standard color selection dialog box.\nSyntax\nChooseColor ( color {, customcolors [ ] } )\n"}
{"page": 445, "text": "Statements, Events, and Functions\nPage 445\nTable 2.430:\nArgument\nDescription\ncolor\nA long passed by reference that represents the color selected in the dialog\nbox\ncustomcolors\n(optional)\nA long array of custom colors passed by reference to the color selection\ndialog box\nReturn value\nInteger.\nReturns 1 if the function succeeds, 0 if the user selects cancel (or the dialog box is closed), -1\nif an error occurs.\nExamples\nThis example displays the color selection dialog box with a base color of red and with two\ndifferent custom colors defined:\nlong red, green, blue\nlong custom[ ]\ninteger li_color\nred = 255\ncustom[1]=rgb(red, 200, blue)\ncustom[2]=8344736\nli_color = ChooseColor( red, custom [ ] )\nSee also\nRGB\n2.4.67 ClassList\nDescription\nProvides a list of the classes included in a performance analysis model.\nApplies to\nProfiling object\nSyntax\ninstancename.ClassList ( list )\nTable 2.431:\nArgument\nDescription\ninstancename\nInstance name of the Profiling object.\nlist\nAn unbounded array variable of datatype ProfileClass in which ClassList\nstores a ProfileClass object for each class included in the model. This\nargument is passed by reference.\nReturn value\n"}
{"page": 446, "text": "Statements, Events, and Functions\nPage 446\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- The function failed because no model exists\nUsage\nYou use the ClassList function to extract a list of the classes included in a performance\nanalysis model. You must have previously created the performance analysis model from a\ntrace file using the BuildModel function. Each class listed is defined as a ProfileClass object\nand provides the class name, its parent class and type, and a list of the routines associated\nwith that class. The classes are listed in no particular order.\nExamples\nThis example lists the classes included in the performance analysis model:\nProfileClass lproclass_list[], lproclass_class\nProfiling lpro_model\nLong ll_limitclass, ll_indexclass\n \nlpro_model = CREATE Profiling\nlpro_model.BuildModel()\n \nlpro_model.ClassList(lproclass_list)\nll_limitclass = UpperBound(lproclass_list)\n \nFOR ll_indexclass = 1 TO ll_limitclass\n    lproclass_class = lproclass_list[ll_indexclass]\n    ...\nNEXT\nSee also\nBuildModel\n2.4.68 ClassName\nDetermines the class of an object or the datatype of a variable.\nTable 2.432:\nTo determine\nUse\nThe class of an object\nSyntax 1\nThe class (or datatype) of a variable\nSyntax 2\n2.4.68.1 Syntax 1: For any object\nDescription\nProvides the class (or name) of the specified object.\nApplies to\nAny control\nSyntax\n"}
{"page": 447, "text": "Statements, Events, and Functions\nPage 447\ncontrolname.Classname ( )\nTable 2.433:\nArgument\nDescription\ncontrolname\nThe name of the control for which you want to know the name assigned\nto the control in the style window (the class of the control)\nReturn value\nString. Returns the class of controlname, the name assigned to the control. Returns the empty\nstring (\"\") if an error occurs. If controlname is null, ClassName returns null.\nUsage\nThe class is the name of an object. You assign the name when you save the object in its\npainter. Usually the class and the object itself appear to be the same (because PowerBuilder\ndeclares a variable with the same name as the class for the object). However, if you have\ndeclared multiple instances of an object, it is clear that the object's class and the object's\nvariable are different.\nIf an ancestor object has been instantiated with one of its descendants, you can use\nClassName to find the name of the descendant.\nTypeOf reports an object's built-in object type. The types are values of the Object enumerated\ndatatype, such as Window! or CheckBox!. ClassName reports the class of the object in the\nancestor-descendant hierarchy.\nExamples\nThese statements return the class of the dragged control Source:\nDragObject Source\nstring which_class\n \nSource = DraggedObject()\nwhich_class = Source.ClassName()\nThese statements return the class of the objects in the control array and store them in\nthe_class array:\nstring the_class[]\nwindowobject the_object[]\ninteger i\n \nFOR i = 1 TO UpperBound(control[])\n    the_object[i] = control[i]\n    the_class[i] = the_object[i].ClassName()\nNEXT\nSuppose your object hierarchy has a window named ancestor_window and it has descendants\ncalled win1 and win2, and the user can choose which descendant to open as a sheet. The\nfollowing code tests which descendant window class is currently active (the MDI frame is\nw_frame):\nancestor_window active_window\nactive_window = w_frame.GetActiveSheet()\nIF ClassName(active_window) = \"win1\" THEN\n    . . .\n"}
{"page": 448, "text": "Statements, Events, and Functions\nPage 448\nEND IF\nSee also\nDraggedObject (obsolete)\nTypeOf\n2.4.68.2 Syntax 2: For variables\nDescription\nProvides the datatype of a variable.\nSyntax\nClassName ( variable )\nTable 2.434:\nArgument\nDescription\nvariable\nThe name of the variable for which you want to know its name (that is, its\ndatatype)\nReturn value\nString. Returns the name of variable. Returns the empty string (\"\") if variable is an\nenumerated datatype or if an error occurs. If variable is null, ClassName returns null.\nUsage\nClassName cannot determine the datatype if variable is an enumerated datatype. In this case,\nClassName returns the empty string.\nExamples\nIf gd_double is a global double variable, ClassName sets varname to double:\nstring varname\nvarname = ClassName(gd_double)\n2.4.69 Clear\nDeletes selected text or an OLE object from the specified control, but does not store it in the\nclipboard.\nTable 2.435:\nTo\nUse\nClears selected text in a control\nSyntax 1\nClears selected text, including table grids, in RichTextEdit controls\nSyntax 2\nDeletes all of the keys in JSONPackage objects\nSyntax 3\n2.4.69.1 Syntax 1: For selected text\nDescription\n"}
{"page": 449, "text": "Statements, Events, and Functions\nPage 449\nDeletes selected text or an OLE object from the specified control, but does not store it in the\nclipboard.\nApplies to\nDataWindow, EditMask, InkEdit, MultiLineEdit, SingleLineEdit, RichTextEdit,\nDropDownListBox, DropDownPictureListBox, OLE controls, and OLEStorage objects\nSyntax\nobjectname.Clear ( )\nTable 2.436:\nArgument\nDescription\nobjectname\nOne of the following:\n\u2022 The name of the DataWindow control, EditMask, MultiLineEdit,\nSingleLineEdit, RichTextEdit, DropDownListBox or\nDropDownPictureListBox from which you want to delete (clear)\nselected text.\n\u2022 The name of an OLE control or storage object variable (type\nOLEStorage) from which you want to release its OLE object.\nIf objectname is a DropDownListBox or DropDownPictureListBox, its\nAllowEdit property must be true.\nReturn value\nInteger for DataWindow, InkEdit, and list boxes, Long for other controls.\nFor edit controls, returns the number of characters that Clear removed from objectname. If\nno text is selected, no characters are removed and Clear returns 0. If an error occurs, Clear\nreturns -1.\nFor OLE controls and storage variables, returns 0 if it succeeds and -9 if an error occurs.\nIf objectname is null, Clear returns null.\nUsage\nTo select text for deleting, the user can use the mouse or keyboard. You can also call the\nSelectText function in a script.\nTo delete selected text and store it in the clipboard, use the Cut function.\nClearing the OLE object from an OLE control deletes all references to it. Any changes to the\nobject are not saved in its storage object or file.\nClearing an OLEStorage object variable breaks any connections established by Open or\nSaveAs between it and a storage file (when Open or SaveAs is called for the OLEStorage\nobject variable). It also breaks connections between it and any OLE controls that have called\nOpen or SaveAs to connect to the object in the storage variable.\nExamples\n"}
{"page": 450, "text": "Statements, Events, and Functions\nPage 450\nIf the text in sle_comment1 is Draft and it is selected, this statement clears Draft from\nsle_comment1 and returns 5:\nsle_comment1.Clear()\nIf the text in sle_comment1 is Draft, the first statement selects the D and the second clears D\nfrom sle_comment1 and returns 1:\nsle_comment1.SelectText(1,1)\nsle_comment1.Clear()\nThis example clears the object associated with the OLE control ole_1, leaving the control\nempty:\ninteger result\nresult = ole_1.Clear()\nThis example clears the object in the OLEStorage object variable olest_stuff. It also leaves\nany OLE controls that have opened the object in olest_stuff empty:\ninteger result\nresult = olest_stuff.Clear()\nSee also\nClearAll\nClose\nCut\nPaste\nReplaceText\nSelectText\n2.4.69.2 Syntax 2: For RichTextEdit controls\nDescription\nDeletes selected text, but also removes any table grids in the selection when the gridFlag\nargument is set to true.\nApplies to\nRichTextEdit\nSyntax\nobjectname.Clear (gridFlag)\nTable 2.437:\nArgument\nDescription\nobjectname\nName of the RichTextEdit control\ngridFlag\nBoolean that determines whether table grids in selected text are deleted\nalong with the selected text. Values are:\n"}
{"page": 451, "text": "Statements, Events, and Functions\nPage 451\nArgument\nDescription\n\u2022 TRUE -- Table grids in the current selection are deleted along with the\nselected text.\n\u2022 FALSE -- (Default) Performs exactly as Syntax 1, deleting selected\ntext for RichTextEdit controls, but not any table grid lines in the\nselection.\nReturn value\nLong. Returns the number of characters removed from the RichTextEdit control.\nUsage\nUse to remove table grid lines along with any selected text. If the whole text of a table row is\nselected, Clear (true) deletes the text and the grid line for this row. If only some of the text in\na table row is selected, Clear (false) deletes the selected text only.\nSee also\nClearAll\n2.4.69.3 Syntax 3: For JSONPackage objects\nDescription\nDeletes all of the keys.\nApplies to\nJSONPackage\nSyntax\nobjectname.Clear ( )\nTable 2.438:\nArgument\nDescription\nobjectname\nName of the JSONPackage object\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes all of the keys and then calls KeyCount to check if all keys are deleted:\nlong ll_KeyCount\nJsonPackage lnv_package\nlnv_package = create JsonPackage\nlnv_package.SetValue(\"d_employee\", dw_employee)\nlnv_package.Clear()\n// ll_KeyCount will return 0\n"}
{"page": 452, "text": "Statements, Events, and Functions\nPage 452\nll_KeyCount = lnv_package.KeyCount()\nSee also\nKeyCount\n2.4.70 ClearAll\nDescription\nDeletes all content from the specified control, but does not store it in the clipboard.\nApplies to\nRichTextEdit\nSyntax\nobjectname.ClearAll ( )\nTable 2.439:\nArgument\nDescription\nobjectname\nName of the RichTextEdit control\nReturn value\nLong.\nReturns the number of characters removed from the RichTextEdit control.\nUsage\nUse to remove all content from a RichTextEdit control, including any table grids. To just\ndelete selected text, use the Clear function. To delete text and store it in the clipboard, use the\nCut function.\nExamples\nThis statement clears all content from the rte_1 RichTextEdit control.\nrte_1.ClearAll()\nSee also\nClear\nCut\n2.4.71 ClearBoldDates\nDescription\nClears all bold date settings that had been set with SetBoldDate.\nApplies to\nMonthCalendar control\nSyntax\n"}
{"page": 453, "text": "Statements, Events, and Functions\nPage 453\ncontrolname.ClearBoldDates ( )\nTable 2.440:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control from which you want to clear\nthe bold dates\nReturn value\nInteger.\nReturns 0 for success and -1 for failure.\nUsage\nYou can use the SetBoldDate function to specify that selected dates, such as holidays, display\nin bold. ClearBoldDates clears all such settings. To clear individual bold dates, use the\nSetBoldDate function with the onoff parameter set to false.\nExamples\nThis example clears all bold settings in the control monthCalVacations:\ninteger li_return\nli_return = monthCalVacation.ClearBoldDates()\nSee also\nSetBoldDate\n2.4.72 ClearHeaders\n2.4.72.1 Syntax 1: for TokenRequest objects\nDescription\nClears the header of requests.\nApplies to\nTokenRequest object\nSyntax\nobjectname.ClearHeaders ( )\nTable 2.441:\nArgument\nDescription\nobjectname\nA reference to the TokenRequest object in which you want to clear the\nrequest header.\nReturn value\nInteger.\n"}
{"page": 454, "text": "Statements, Events, and Functions\nPage 454\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThe following example shows the use of the ClearHeaders function to clear the value of all\nheaders:\nint li_return\nTokenRequest lnv_TokenRequest\nli_return = lnv_TokenRequest.clearheaders( )\nSee also\nAppendParam\nGetHeader\nGetHeaders\nSetHeader\nSetHeaders\n2.4.72.2 Syntax 2: for OAuthRequest objects\nDescription\nClears the header of requests.\nApplies to\nOAuthRequest object\nSyntax\nobjectname.ClearHeaders ( )\nTable 2.442:\nArgument\nDescription\nobjectname\nA reference to the OAuthRequest object in which you want to clear the\nrequest header.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThe following example shows the use of the ClearHeaders function to clear the value of all\nheaders:\nint li_return\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.clearheaders()\nSee also\n"}
{"page": 455, "text": "Statements, Events, and Functions\nPage 455\nGetBody\nGetHeader\nGetHeaders\nSetAccessToken\nSetBody\nSetHeader\nSetHeaders\n2.4.73 ClearParams\nDescription\nClears all of the parameters appended by the AppendParam function.\nApplies to\nTokenRequest object\nSyntax\nobjectname.ClearParams ( )\nTable 2.443:\nArgument\nDescription\nobjectname\nA reference to the TokenRequest object in which you want to clear the\nparameter.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThe following example shows the use of the ClearParams function to clear the appended\nparameters:\nint li_return\nTokenRequest lnv_TokenRequest\nli_return = lnv_TokenRequest.clearparams( )\nSee also\nAppendParam\nClearHeaders\nGetHeader\nGetHeaders\nSetHeader\n"}
{"page": 456, "text": "Statements, Events, and Functions\nPage 456\nSetHeaders\n2.4.74 ClearRecentItems\nDescription\nRemoves all recent menu items from the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.ClearRecentItems ( )\nTable 2.444:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control from which you want\nto remove the recent menu items.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example inserts three recent menu items and then removes all of them.\nInteger li_Return\nLong ll_Return\nRibbonApplicationMenu lr_AppMenu\nll_Return = lr_AppMenu.InsertRecentItem (1,\"Recent2\", \"Ue_RecentItem2Clicked\")\nll_Return = lr_AppMenu.InsertRecentItemFirst (\"Recent1\", \"Ue_RecentItem1Clicked\")\nll_Return = lr_AppMenu.InsertRecentItemLast (\"Recent3\", \"Ue_RecentItem3Clicked\")\nli_Return = lr_AppMenu.ClearRecentItems()\nSee also\nAddMasterSeparatorItem\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\n"}
{"page": 457, "text": "Statements, Events, and Functions\nPage 457\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.75 ClearRequestHeaders\nDescription\nClears the headers of the request.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.ClearRequestHeaders ( )\nTable 2.445:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object from which you want\nto clear the request header\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nExamples\nThis example clears the request headers in the object lnv_HttpClient:\nHttpClient lnv_HttpClient\ninteger li_return\nlnv_HttpClient = Create HttpClient\nli_return = lnv_HttpClient.ClearRequestHeaders()\nSee also\nGetRequestHeader\nGetRequestHeaders\nSetRequestHeader\nSetRequestHeaders\n"}
{"page": 458, "text": "Statements, Events, and Functions\nPage 458\n2.4.76 Clipboard\nRetrieves or replaces the contents of the system clipboard.\nTable 2.446:\nTo\nUse\nRetrieve or replace the contents of the system clipboard with text\nSyntax 1\nReplace the contents of the system clipboard with a bitmap image of a\ngraph\nSyntax 2\n2.4.76.1 Syntax 1: For text\nDescription\nRetrieves or replaces the contents of the system clipboard with text.\nSyntax\nClipboard ( { string } )\nTable 2.447:\nArgument\nDescription\nstring (optional)\nA string whose value is the text you want to place in the clipboard. The\nstring replaces the current contents of the clipboard, if any.\nReturn value\nString.\nReturns the current contents of the clipboard if the clipboard contains text. If string is\nspecified, Clipboard returns the current contents and replaces it with string.\nReturns the empty string (\"\") if the clipboard is empty or it contains nontext data, such as\na bitmap. If string is specified, the nontext data is replaced with string. If string is null,\nClipboard returns null.\nUsage\nYou can use Syntax 1 with the Paste, Replace, or ReplaceText function to insert the clipboard\ncontents in an editable control or StaticText control.\nCalling Clipboard in a DataWIndow control or DataStore object\nTo retrieve or replace the contents of the system clipboard with text from a DataWindow item\n(cell value), you must first assign the value to a string and then call the system Clipboard\nfunction as follows:\nstring ls_data = dw_1.object.column_name[row_number]\n::Clipboard(ls_data)\nThe DataWindow version of Clipboard, documented in Syntax 2 (and in Section 10.3,\n\u201cClipboard\u201d in DataWindow Reference), is only applicable to graphs.\nExamples\n"}
{"page": 459, "text": "Statements, Events, and Functions\nPage 459\nThese statements put the contents of the clipboard in the variable ls_CoName:\nstring ls_CoName\nls_CoName = Clipboard()\nThe following statements place the contents of the clipboard in Heading, and then replace the\ncontents of the clipboard with the string Employee Data:\nstring Heading\nHeading = Clipboard(\"Employee Data\")\nThe following statement replaces the selected text in the MultiLineEdit mle_terms with the\ncontents of the clipboard:\nmle_terms.ReplaceText(Clipboard())\nThe following statement exchanges the contents of the StaticText st_welcome with the\ncontents of the clipboard:\nst_welcome.Text = Clipboard(st_welcome.Text)\nSee also\nClear\nCopy\nCut\nPaste\nReplace\nReplaceText\n2.4.76.2 Syntax 2: For bitmaps of graphs\nDescription\nReplaces the contents of the system clipboard with a bitmap image of a graph. You can paste\nthe image into other applications.\nApplies to\nGraph objects in windows and user objects, and graphs in DataWindow controls and\nDataStore objects\nSyntax\nname.Clipboard ( { graphobject } )\nTable 2.448:\nArgument\nDescription\nname\nThe name of the graph or the DataWindow control or DataStore\ncontaining the graph you want to copy to the clipboard\ngraphobject\n(DataWindow\ncontrol and\nA string whose value is the name of the graph in the DataWindow object\nthat you want to copy to the clipboard\n"}
{"page": 460, "text": "Statements, Events, and Functions\nPage 460\nArgument\nDescription\nDataStore only)\n(optional)\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Clipboard\nreturns null.\nExamples\nThis statement copies the graph gr_products_data to the clipboard:\ngr_products_data.Clipboard()\nThis statement copies the graph gr_employees in the DataWindow control dw_emp_data to\nthe clipboard:\ndw_emp_data.Clipboard(\"gr_employees\")\n2.4.77 Close\nCloses a window, an OLE storage or stream, or a trace file.\nTable 2.449:\nTo close\nUse\nA window\nSyntax 1\nAn OLEStorage object variable, saving the object and clearing\nconnections between it and a storage file or object\nSyntax 2\nA stream associated with the specified OLEStream object variable\nSyntax 3\nA trace file\nSyntax 4\n2.4.77.1 Syntax 1: For windows\nDescription\nCloses a window and releases the storage occupied by the window and all the controls in the\nwindow.\nApplies to\nWindow objects\nSyntax\nClose ( windowname )\nTable 2.450:\nArgument\nDescription\nwindowname\nThe name of the window you want to close\n"}
{"page": 461, "text": "Statements, Events, and Functions\nPage 461\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If windowname is null, Close returns null.\nThe return value is usually not used.\nUsage\nUse Syntax 1 to close a window and release the storage occupied by the window and all the\ncontrols in the window.\nWhen you call Close, PowerBuilder removes the window from view, closes it, executes\nthe scripts for the CloseQuery and Close events (if any), and then executes the rest of the\nstatements in the script that called the Close function. Do not call Close from the CloseQuery\nor Close events, since this produces an endless loop.\nAfter a window is closed, its properties, instance variables, and controls can no longer\nbe referenced in scripts. If a statement in the script references the closed window or its\nproperties or instance variables, an execution error will result.\nClosing a window by calling the Close function in any of the window's events or in an event\nof any control on the window can cause PowerBuilder to crash if the Close function is not\nthe last statement in the event script. You can avoid this issue by calling the Close function in\nthe last statement of the event script, or in a user-defined event that is posted from the event\nscript. For example, the following code in the Open event script for a window called w_1 can\ncause a crash:\n// w_1 Open event script \nclose(this)\nopen(w_2) // causes crash\nThis code does not cause a crash:\n// w_1 ue_postopen event script \nclose(this)\n \n// w_1 Open event script \nopen(w_2)\nthis.Post Event ue_postopen()\nPreventing a window from closing\nYou can prevent a window from being closed with a return code of 1 in the script for\nthe CloseQuery event. Use the RETURN statement.\nExamples\nThese statements close the window w_employee and then open the window w_departments:\nClose(w_employee)\nOpen(w_departments)\nAfter you call Close, the following statements in the script for the CloseQuery event prompt\nthe user for confirmation and prevent the window from closing:\nIF MessageBox('ExitApplication', &\n'Exit?', Question!, YesNo!) = 2 THEN\n    // If no, stop window from closing\n"}
{"page": 462, "text": "Statements, Events, and Functions\nPage 462\n    RETURN 1\nEND IF\nSee also\nHide\nOpen\n2.4.77.2 Syntax 2: For OLEStorage objects\nDescription\nCloses an OLEStorage object, saving the object in the associated storage file or object and\nclearing the connection between them. Close also severs connections with any OLE controls\nthat have opened the object. Calling Close is the same as calling Save and then Clear.\nApplies to\nOLEStorage objects\nSyntax\nolestorage.Close ( )\nTable 2.451:\nArgument\nDescription\nolestorage\nThe OLEStorage object variable that you want to save and close\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The storage is not open\n-9 -- Other error\nIf olestorage is null, Close returns null.\nExamples\nThis example saves and clears the object in the OLEStorage object variable olest_stuff. It\nalso leaves any OLE controls that have opened the object in olest_stuff empty:\ninteger result\nresult = olest_stuff.Close()\nSee also\nOpen\nSave\nSaveAs\n2.4.77.3 Syntax 3: For OLEStream objects\nDescription\n"}
{"page": 463, "text": "Statements, Events, and Functions\nPage 463\nCloses an OLEStream object.\nApplies to\nOLEStream objects\nSyntax\nolestream.Close ( )\nTable 2.452:\nArgument\nDescription\nolestream\nThe OLEStream object variable that you want to close\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The storage is not open\n-9 -- Other error\nIf olestream is null, Close returns null.\nExamples\nThis example closes the OLEStream object stm_pic_label and releases the variable's\nmemory:\ninteger result\nresult = stm_pic_label.Close()\nDESTROY stm_pic_label\nSee also\nOpen\n2.4.77.4 Syntax 4: For trace files\nDescription\nCloses an open trace file.\nApplies to\nTraceFile objects\nSyntax\ninstancename.Close ( )\nTable 2.453:\nArgument\nDescription\ninstancename\nInstance name of the TraceFile object\n"}
{"page": 464, "text": "Statements, Events, and Functions\nPage 464\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileNotOpenError! -- A trace file has not been opened\nUsage\nYou use the Close function to close a trace file you previously opened with the Open\nfunction. You use the Close and Open functions as well as the properties and functions of the\nTraceFile object to access the contents of a trace file directly. You use these functions if you\nwant to perform your own analysis of the tracing data instead of building a model with the\nProfiling or TraceTree object and the BuildModel function.\nExamples\nThis example closes a trace file:\nift_file.Close()\nDESTROY ift_file\nSee also\nReset\nOpen\nNextActivity\n2.4.78 CloseChannel\nDescription\nCloses a DDE channel.\nSyntax\nCloseChannel ( handle {, windowhandle } )\nTable 2.454:\nArgument\nDescription\nhandle\nA long that identifies the DDE channel that will be closed. It is the\nsame value returned by the OpenChannel function that opened the DDE\nchannel.\nwindowhandle\n(optional)\nThe handle to the PowerBuilder window that is acting as the DDE client.\nReturn value\nInteger.\nReturns 1 if it succeeds.If an error occurs, CloseChannel returns a negative integer. Possible\nvalues are:\n"}
{"page": 465, "text": "Statements, Events, and Functions\nPage 465\n-1 -- Open failed\n-2 -- The channel refuses to close\n-3 -- No confirmation from the server\n-9 -- Handle is null\nUsage\nUse CloseChannel to close a channel to a DDE server application that was opened by calling\nthe OpenChannel function.\nAlthough you can usually close the DDE channel by specifying just the channel's handle,\nit is a good idea to also specify the handle for PowerBuilder window associated with the\nchannel. If you specify windowhandle, CloseChannel closes the DDE channel in the window\nidentified by windowhandle. If you do not specify windowhandle, CloseChannel only closes\nthe channel if it is associated with the active window. You can use the Handle function to\nobtain a window's handle.\nExamples\nThese statements open and close the channel identified by handle. The channel is associated\nwith the window w_sheet:\nlong handle\nhandle = OpenChannel(\"Excel\", \"REGION.XLS\", &\n    Handle(w_sheet) )\n... // Some processing\nCloseChannel(handle, Handle(w_sheet))\nSee also\nGetRemote\nOpenChannel\nSetRemote\n2.4.79 CloseTab\nDescription\nRemoves a tab page from a Tab control that was opened previously with the OpenTab or\nOpenTabWithParm function. CloseTab executes the scripts for the user object's Destructor\nevent.\nApplies to\nTab controls\nSyntax\ntabcontrolname.CloseTab ( userobjectvar )\nTable 2.455:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control containing the tab page you want to close\n"}
{"page": 466, "text": "Statements, Events, and Functions\nPage 466\nArgument\nDescription\nuserobjectvar\nThe name of the user object you want to close\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, CloseTab\nreturns null. The return value is usually not used.\nUsage\nCloseTab closes a user object that has been opened as a tab page and releases the storage\noccupied by the object and its controls.\nWhen you call CloseTab, PowerBuilder removes the tab page from the control, closes\nit, executes the script for the Destructor event (if any), and then executes the rest of the\nstatements in the script that called the CloseTab function.\nCloseTab also removes the user object from the Tab control's Control array, which is a\nproperty that lists the tab pages within the Tab control. If the closed tab page was not the last\nelement in the array, the index for all subsequent tab pages is reduced by one.\nAfter a user object is closed, its properties, instance variables, and controls can no longer\nbe referenced in scripts. If a statement in the script references the closed user object or its\nproperties or instance variables, an execution error will result.\nExamples\nThese statements close the tab page user object u_employee and then open the user object\nu_departments in the Tab control tab_personnel:\ntab_personnel.CloseTab(u_employee)\ntab_personnel.OpenTab(u_departments)\nWhen the user chooses a menu item that closes a user object, the following excerpt from the\nmenu item's script prompts the user for confirmation before closing the u_employee user\nobject in the window to which the menu is attached:\nIF MessageBox(\"Close \", \"Close?\", &\n    Question!, YesNo!) = 1 THEN\n    // User chose Yes, close user object.\n    ParentWindow.CloseTab(u_employee)\n    // If user chose No, take no action.\nEND IF\nSee also\nOpenTab\n2.4.80 CloseUserObject\nDescription\nCloses a visual user object by removing it from view and executing the scripts for its\nDestructor event.\nApplies to\n"}
{"page": 467, "text": "Statements, Events, and Functions\nPage 467\nWindow objects and visual user objects\nSyntax\nobjectname.CloseUserObject ( targetobjectname ) \nTable 2.456:\nArgument\nDescription\nobjectname\nThe name of the window or user object that will close the target user\nobject\ntargetobjectname The name of the visual user object to be closed.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nCloseUserObject returns null. The return value is usually not used.\nUsage\nUse CloseUserObject to close a user object and release the storage occupied by the object and\nits controls.\nWhen you call CloseUserObject, PowerBuilder removes the target object from view, closes\nit, executes the script for the Destructor event (if any), and then executes the rest of the\nstatements in the script that called the CloseUserObject function.\nCloseUserObject also removes the target object from the first object's Control array, which is\na property that lists the object's controls. If the closed user object was not the last element in\nthe array, the index for all subsequent user objects is reduced by one.\nAfter the target object is closed, its properties, instance variables, and controls can no longer\nbe referenced in scripts. If a script references the closed user object or its properties or\ninstance variables, an execution error results.\nExamples\nThis statement prompts the user for confirmation before the parent of the current object\ncloses the u_employee target:\nIF MessageBox(\"Close \", \"Close?\", &\n    Question!, YesNo!) = 1 THEN\n    // User chose Yes, close user object.\n    parent.CloseUserObject(u_employee)\n    // If user chose No, take no action.\nEND IF\nSee also\nOpenUserObject\n2.4.81 CloseWithReturn\nDescription\nCloses a window and stores a return value in the Message object. You should use\nCloseWithReturn only for response windows.\n"}
{"page": 468, "text": "Statements, Events, and Functions\nPage 468\nApplies to\nWindow objects\nSyntax\nCloseWithReturn ( windowname, returnvalue )\nTable 2.457:\nArgument\nDescription\nwindowname\nThe name of the window you want to close.\nreturnvalue\nThe value you want to store in the Message object when the window is\nclosed. Returnvalue must be one of these datatypes:\n\u2022 String\n\u2022 Numeric\n\u2022 PowerObject\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nCloseWithReturn returns null. The return value is usually not used.\nUsage\nThe purpose of CloseWithReturn is to close a response window and return information from\nthe response window to the window that opened it. Use CloseWithReturn to close a window,\nrelease the storage occupied by the window and all the controls in the window, and return a\nvalue.\nJust as with Close, CloseWithReturn removes a window from view, closes it, and executes\nthe script for the CloseQuery and Close events, if any. Do not call Close or CloseWithReturn\nfrom these events, since this produces an endless loop.\nBefore executing the event scripts, CloseWithReturn stores returnvalue in the Message\nobject, and PowerBuilder executes the rest of the script that called the CloseWithReturn\nfunction.\nAfter a window is closed, its properties, instance variables, and controls can no longer\nbe referenced in scripts. If a statement in the script references the closed window or its\nproperties or instance variables, an execution error results.\nPowerBuilder stores returnvalue in the Message object properties according to its datatype.\nIn the script that called CloseWithReturn, you can access the returned value by specifying the\nproperty of the Message object that corresponds to the return value's datatype.\nTable 2.458: Message object properties where return values are stored\nReturn value\ndatatype\nMessage object property\nNumeric\nMessage.DoubleParm\n"}
{"page": 469, "text": "Statements, Events, and Functions\nPage 469\nReturn value\ndatatype\nMessage object property\nPowerObject\n(such as a\nstructure)\nMessage.PowerObjectParm\nString\nMessage.StringParm\nReturning several values as a structure\nTo return several values, create a user-defined structure to hold the values and access\nthe PowerObjectParm property of the Message object in the script that opened the\nresponse window. The structure is passed by value so you can access the information\neven if the original variable has been destroyed.\nReferencing controls\nUser objects and controls are passed by reference, not by value. You cannot use\nCloseWithReturn to return a reference to a control on the closed window (because the\ncontrol no longer exists after the window is closed). Instead, return the value of one or\nmore properties of that control.\nPreventing a window from closing\nYou can prevent a window from being closed with a return code of 1 in the script for\nthe CloseQuery event. Use a RETURN statement.\nExamples\nThis statement closes the response window w_employee_response, returning the string\nemp_name to the window that opened it:\nCloseWithReturn(Parent, \"emp_name\")\nSuppose that a menu item opens one window if the user is a novice and another window\nif the user is experienced. The menu item displays a response window called w_signon\nto prompt for the user's experience level. The user types an experience level in the\nSingleLineEdit control sle_signon_id. The OK button in the response window passes the text\nin sle_signon_id back to the menu item script. The menu item script checks the StringParm\nproperty of the Message object and opens the desired window.\nThe script for the Clicked event of the OK button in the w_signon response window is a\nsingle line:\nCloseWithReturn(Parent, sle_signon_id.Text)\nThe script for the menu item is:\nstring ls_userlevel\n \n// Open the response window\nOpen(w_signon)\n \n// Check text returned in Message object\n"}
{"page": 470, "text": "Statements, Events, and Functions\nPage 470\nls_userlevel = Message.StringParm\n \nIF ls_userlevel = \"Novice\" THEN\n    Open(win_novice)\nELSE\n    Open(win_advanced)\nEND IF\nSee also\nClose\nOpenSheetWithParm\nOpenUserObjectWithParm\nOpenWithParm\n2.4.82 CollapseItem\nDescription\nCollapses the specified item.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.CollapseItem ( itemhandle )\nTable 2.459:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to collapse an item\nitemhandle\nThe handle of the item you want to collapse\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nIf there is only one level-one entry, you can use the RootTreeItem handle as the argument\nto collapse the tree so that only the top-level node is displayed. However, CollapseItem\ncollapses only the current item, so that if the children of the top-level item were expanded\nwhen the tree was collapsed, they will still be expanded when the top-level item is expanded.\nIf there is more than one level-one entry, using the RootTreeItem handle as the argument\ncollapses only the first level-one entry.\nExamples\nThis example collapses an item in a TreeView control:\nlong ll_tvi\nll_tvi = tv_list.FindItem(currenttreeitem!, 0)\n"}
{"page": 471, "text": "Statements, Events, and Functions\nPage 471\ntv_list.CollapseItem(ll_tvi)\nThis example collapses the top-level item in a TreeView control that has only one level-one\nentry:\nlong ll_tvi\nll_tvi = tv_list.FindItem(roottreeitem!, 0)\ntv_list.CollapseItem(ll_tvi)\nSee also\nExpandItem\nExpandAll\nFindItem\n2.4.83 CommandParm\nDescription\nRetrieves the argument string, if any, that followed the program name when the application\nwas executed.\nSyntax\nCommandParm ( )\nReturn value\nString.\nReturns the application's argument string if it succeeds and the empty string (\"\") if it fails or\nif there were no arguments.\nUsage\nCommand arguments can follow the program name in the command line of a Windows\nprogram item or in the Program Manager's Run response window. For example, when the\nuser chooses File>Run in the Program Manager and enters:\nMyAppl C:\\EMPLOYEE\\EMPLIST.TXT\nCommandParm retrieves the string C:\\EMPLOYEE\\EMPLIST.TXT.\nIf the application's command line includes several arguments, CommandParm returns them\nall as a single string. You can use string functions, such as Mid and Pos, to parse the string.\nYou do not need to call CommandParm in the application's Open event. Use the\ncommandline argument instead.\nExamples\nThese statements retrieve the command line arguments and save them in the variable\nls_command_line:\nstring ls_command_line\nls_command_line = CommandParm()\nIf the command line holds several arguments, you can use string functions to separate\nthe arguments. This example stores a variable number of arguments, obtained with\n"}
{"page": 472, "text": "Statements, Events, and Functions\nPage 472\nCommandParm, in an array. The code assumes each argument is separated by one space. For\neach argument, the Pos function searches for a space; the Left function copies the argument\nto the array; and Replace removes the argument from the original string so the next argument\nmoves to the first position:\nstring ls_cmd, ls_arg[]\ninteger i, li_argcnt\n \n// Get the arguments and strip blanks\n// from start and end of string\nls_cmd = Trim(CommandParm())\n \nli_argcnt = 1\nDO WHILE Len(ls_cmd) > 0\n    // Find the first blank\n    i = Pos( ls_cmd, \" \")\n \n    // If no blanks (only one argument),\n    // set i to point to the hypothetical character\n    // after the end of the string\n    if i = 0 then i = Len(ls_cmd) + 1\n \n    // Assign the arg to the argument array.\n    // Number of chars copied is one less than the\n    // position of the space found with Pos\n    ls_arg[li_argcnt] = Left(ls_cmd, i - 1)\n \n    // Increment the argument count for the next loop\n    li_argcnt = li_argcnt + 1\n \n    // Remove the argument from the string\n    // so the next argument becomes first\n    ls_cmd = Replace(ls_cmd, 1, i, \"\")\nLOOP\n2.4.84 CommitDocking\nDescription\nAfter all persisted sheets are opened, this function arranges them and makes them visible.\nApplies to\nWindows objects\nSyntax\nCommitDocking ()\nUsage\nWhen all persisted sheets are opened using the LoadDockingState and\nOpenSheetFromDockingState or OpenSheetWithParmFromDockingState, the\nCommitDocking does the work of arranging everything in place and making it all visible.\nExamples\nRestore all sheets for register\nstring s1[], s2[]\nstring is_register = \"Appeon\\PowerBuilder\\Examples\\Docking\\\"\ninteger li_start, li_end, li_i, li_rtn\n"}
{"page": 473, "text": "Statements, Events, and Functions\nPage 473\nli_rtn = LoadDockingState(is_register,s1,s2)\nwindow lw_window\nli_start = lowerbound(s1)\nli_end = upperbound(s2)\n \nfor li_i = li_start to li_end\n   openSheetFromDockingState(lw_window,s1[li_i], this, s2[li_i])\nnext\nCommitDocking()\n2.4.85 CommitTransaction (obsolete)\nDescription\nDeclares that the EAServer transaction associated with the calling thread should be\ncommitted.\nObsolete function\nCommitTransaction is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.CommitTransaction (breportheuristics )\nTable 2.460:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\nbreportheuristics A boolean specifying whether heuristic decisions should be reported for\nthe transaction associated with the calling thread\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Failed for unknown reason\n-2 -- No transaction is associated with the calling thread\n-3 -- The calling thread does not have permission to commit the transaction\n-4 -- The HeuristicRollback exception was raised\n-5 -- The HeuristicMixed exception was raised\n-6 -- The HeuristicHazard exception was raised\nUsage\nThe CommitTransaction function completes the transaction associated with the calling\nthread. Use the BeginTransaction function to begin a transaction and associate it with the\n"}
{"page": 474, "text": "Statements, Events, and Functions\nPage 474\ncalling thread. The transaction is not completed if any other participants in the transaction\nvote to roll back the transaction.\nCommitTransaction can be called by a client or a component that is marked as OTS style.\nEAServer must be using the two-phase commit transaction coordinator (OTS/XA).\nExamples\nIn this example, the client calls the dopayroll method on the CmpnyAcct EAServer\ncomponent, which processes a company payroll. The method returns 1 if the company has\nsufficient funds to meet the payroll, and the client then commits the transaction:\n// Instance variables:\n// CORBACurrent corbcurr\ninteger li_rc\nboolean lb_rv\nlong ll_rc\n// Create an instance of the CORBACurrent object\n// and initialize it\n...\nlb_rv = corbcurr.BeginTransaction()\nIF lb_rv THEN\n    ll_rc = myconnect.CreateInstance(CmpnyAcct)\n    // handle error\n    li_rc = CmpnyAcct.dopayroll()\n    IF li_rc = 1 THEN\n      corbcurr.CommitTransaction(\n    ELSE\n      corbcurr.RollbackTransaction()\n    END IF\nELSE\n    // handle error\nEND IF\nSee also\nBeginTransaction (obsolete)\nGetContextService\nGetStatus (obsolete)\nGetTransactionName (obsolete)\nInit (obsolete)\nResumeTransaction (obsolete)\nRollbackOnly (obsolete)\nRollbackTransaction (obsolete)\nSetTimeout (obsolete)\nSuspendTransaction (obsolete)\n2.4.86 Compress\nDescription\nCompresses the folder or one or more files, or the byte data stream.\nApplies to\n"}
{"page": 475, "text": "Statements, Events, and Functions\nPage 475\nCompressorObject objects\nSyntax\nobjectname.Compress ( string source, string dest {, ArchiveFormat format })\nobjectname.Compress ( string source[], string dest {, ArchiveFormat format })\nobjectname.Compress ( blob source, ref blob dest {, ArchiveFormat format })\nTable 2.461:\nArgument\nDescription\nobjectname\nThe name of the CompressorObject object.\nsource\nA string whose value is the full directory of the folder or one or more\nfiles that will be compressed. If there are more than one source file with\nthe same name, they will be recognized as the same file, although they\nare from different directories; and in such case the method will return the\nerror code -11.\nOr a blob whose value is the byte data that will be compressed.\ndest\nA string whose value is the target directory as well as the file name where\nthe compressed file or folder will be located.\nOr a blob value specifying the target compressed stream.\nformat (optional) A value of the enumerated datatype ArchiveFormat specifying the the\nformat of the target file. The supported values are:\n\u2022 ArchiveFormatZIP! -- zip file. Supports AES-256 encryption for\npassword. This is the default value.\n\u2022 ArchiveFormat7Zip! -- 7zip file. Supports AES-256 encryption for\npassword.\n\u2022 ArchiveFormatGZip! -- gzip format archive. Supports compressing a\nsingle file.\n\u2022 ArchiveFormatTAR! -- tar format archive.\nIf the extension in \"dest\" is inconsistent with the format specified in\n\"format\", the file or folder will be compressed according to the format\nspecified in \"format\" and the extension of \"dest\" will not be revised.\nUsage\nThe Compress method cannot append files or folders to an existing compressed file; instead it\nwill overwrite the existing compressed file with the subsequent files or folders.\nReturn value\nInteger.\nReturns the following value. If any argument's value is null, the method returns null.\n"}
{"page": 476, "text": "Statements, Events, and Functions\nPage 476\n1 -- Success\n-1 -- A general error occurred. If the CompressorObject object is used in asynchronous mode,\nthis function will return the general error.\n-2 -- The password entered is illegal.\n-3 -- The operation is not supported for the source file format.\n-4 -- The task thread is aborted.\n-5 -- A task thread is currently running.\n-6 -- The folder to be compressed does not exist.\n-7 -- The folder to be compressed is empty.\n-8 -- The compression format does not support multi-file compression.\n-9 -- Failed to read file from the folder for compression.\n-10 -- The target path does not exist.\n-11 -- More than one source file has the same file name.\n-12 -- Invalid compressed file name or no compressed file name is specified in the \"dest\"\nargument.\n-13 -- Failed to compress.\nExample 1\nThis example demonstrates how to compress a folder.\nCompressorObject lnv_compress\nInteger  li_return\nstring ls_source, ls_target\nls_source = \"C:\\Program Files (x86)\\Appeon\\PowerBuilder 21.0\\IDE\\theme\"\nls_target = \"D:\\testcom\"\nlnv_compress = create CompressorObject\nli_return  = lnv_compress.Compress(ls_source,ls_target, ArchiveFormat7Zip!)\nExample 2\nThis example demonstrates how to compress a single file.\nCompressorObject lnv_compress\nInteger li_return\nstring ls_source, ls_target\nls_source = \"C:\\Program Files (x86)\\Appeon\\PowerBuilder 21.0\\egreg.txt\"\nls_target = \"D:\\testcom\"\nlnv_compress = create CompressorObject\nli_return = lnv_compress.Compress(ls_source,ls_target, ArchiveFormat7Zip!)\nExample 3\nThis example demonstrates how to compress multiple files.\nCompressorObject lnv_compress\nInteger li_return\nstring ls_source[], ls_target\nls_source[1] = \"C:\\Program Files (x86)\\Appeon\\PowerBuilder 21.0\\egreg.txt\"\nls_source[2] = \"C:\\Program Files (x86)\\Appeon\\PowerBuilder 21.0\\zlib.dll\"\nls_target = \"D:\\testcom\"\n"}
{"page": 477, "text": "Statements, Events, and Functions\nPage 477\nlnv_compress = create CompressorObject\nli_return = lnv_compress.Compress(ls_source,ls_target, ArchiveFormat7Zip!)\nExample 4\nThis example demonstrates how to compress the data stream.\nCompressorObject lnv_compress\nInteger li_return\nblob lb_source,lb_target\nlb_source = blob(\"A123456\")\nlnv_compress = create CompressorObject\nli_return = lnv_compress.Compress(lb_source,lb_target, ArchiveFormat7Zip!)\nSee also\nCancel\n2.4.87 ConnectToNewObject\nDescription\nCreates a new object in the specified server application and associates it with a PowerBuilder\nOLEObject variable. ConnectToNewObject starts the server application if necessary.\nApplies to\nOLEObject objects, OLETxnObject objects\nSyntax\noleobject.ConnectToNewObject ( classname )\nTable 2.462:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable that you want to connect to an\nautomation server or COM object. You cannot specify an OLEObject that\nis the Object property of an OLE control.\nclassname\nA string whose value is a programmatic identifier or class ID that\nidentifies an automation server or COM server.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Invalid Call: the argument is the Object property of a control\n-2 -- Class name not found\n-3 -- Object could not be created\n-4 -- Could not connect to object\n-9 -- Other error\n"}
{"page": 478, "text": "Statements, Events, and Functions\nPage 478\n-15 -- COM+ is not loaded on this computer\n-16 -- Invalid Call: this function not applicable\nIf any argument's value is null, ConnectToNewObject returns null.\nUsage\nThe OLEObject variable can be used for automation, in which the PowerBuilder application\nasks the server application to manipulate the OLE object programmatically. It can also be\nused to connect to a COM object that is registered on a local or remote computer or that is\ninstalled in COM+.\nThe OLETxnObject variable is used to provide COM+ transaction control to PowerBuilder\nclients. Calling ConnectToNewObject with an OLETxnObject variable creates a new object\ninstance within the transaction context associated with the variable. If COM+ is not loaded\non the client computer, the ConnectToNewObject call fails. Use SetAbort to abort the\ntransaction or SetComplete to complete it if all other participants in the transaction concur.\nFor more information about automation and connecting to COM objects, see\nConnectToObject.\nDeprecated support for COM and COM+ components\nCOM and COM+ are obsolete technologies and might not be supported in future\nreleases of PowerBuilder.\nExamples\nThis example creates an OLEObject variable and calls ConnectToNewObject to create a new\nExcel object and connect to it:\ninteger result\nOLEObject myoleobject\nmyoleobject = CREATE OLEObject\nresult = myoleobject.ConnectToNewObject( &\n    \"excel.application\")\nThis example creates an OLETxnObject variable and calls ConnectToNewObject to create\nand connect to a new instance of a PowerBuilder COM object on a COM+ server:\nOLETxnObject EmpObj\nInteger li_rc\nEmpObj = CREATE OLETxnObject\nli_rc = EmpObj.ConnectToNewObject(\"PB125COM.employee\")\nIF li_rc < 0 THEN\n    DESTROY EmpObj\n    MessageBox(\"Connecting to COM Object Failed\",  &\n      \"Error: \" + String(li_rc))\n   Return\nEND IF\n \n// Perform some work with the COM object\n...\n// If the work completed successfully, commit\n// the transaction and disconnect the object\nEmpObj.SetComplete()\nEmpObj.DisconnectObject()\nSee also\n"}
{"page": 479, "text": "Statements, Events, and Functions\nPage 479\nConnectToObject\nDisconnectObject\nSetAbort\nSetComplete\n2.4.88 ConnectToNewRemoteObject\nDescription\nCreates a new OLE object in the specified remote server application (if security on the\nserver allows it) and associates the new object with a PowerBuilder OLEObject variable.\nConnectToNewRemoteObject starts the server application if necessary.\nApplies to\nOLEObject objects\nSyntax\noleobject.ConnectToNewRemoteObject ( hostname, classname )\nTable 2.463:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable which you want to connect to\nan OLE object. You cannot specify an OLEObject that is the Object\nproperty of an OLE control.\nhostname\nA string whose value is the name of the remote host where the COM\nserver is located.\nclassname\nA string whose value is the name of an OLE class, which identifies\nan OLE server application and a type of object that the server can\nmanipulate via OLE.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Invalid call: the argument is the Object property of a control\n-2 -- Class name not found\n-3 -- Object could not be created\n-4 -- Could not connect to object\n-9 -- Other error\n-10 -- Feature not supported on this platform\n-11 -- Server name is invalid\n-12 -- Server does not support operation\n"}
{"page": 480, "text": "Statements, Events, and Functions\nPage 480\n-13 -- Access to remote host denied\n-14 -- Server unavailable\n-15 -- COM+ is not loaded on this computer\n-16 -- Invalid Call: this function not applicable to OLETxnObject\nUsage\nThe OLEObject variable is used for OLE automation, in which the PowerBuilder\napplication asks the server application to manipulate the OLE object programmatically.\nConnectToNewRemoteObject can only be used with servers that support remote activation.\nFor more information about OLE automation, see ConnectToObject. For information about\nconnecting to objects on a remote host, see ConnectToRemoteObject.\nExamples\nThis example creates an OLEObject variable and calls ConnectToNewRemoteObject to\ncreate and connect to a new Excel object on a remote host named ulysses:\ninteger result\nOLEObject myoleobject\n \nmyoleobject = CREATE OLEObject\nresult = myoleobject.ConnectToNewRemoteObject( &\n    \"ulysses\", \"Excel.application\")\nSee also\nConnectToObject\nConnectToRemoteObject\n2.4.89 ConnectToObject\nDescription\nAssociates an OLE object with a PowerBuilder OLEObject variable and starts the server\napplication. The OLEObject variable and ConnectToObject are used for OLE automation, in\nwhich the PowerBuilder application asks the server application to manipulate the OLE object\nprogrammatically.\nApplies to\nOLEObject objects\nSyntax\noleobject.ConnectToObject ( filename {, classname } )\nTable 2.464:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable which you want to connect to\nan OLE object. You cannot specify an OLEObject that is the Object\nproperty of an OLE control.\n"}
{"page": 481, "text": "Statements, Events, and Functions\nPage 481\nArgument\nDescription\nfilename\nA string whose value is the name of an OLE storage file.\nYou can specify the empty string for filename, in which case you must\nspecify classname. Oleobject is connected to the active object in the\nserver application specified in classname.\nclassname\n(optional)\nA string whose value is the name of an OLE class, which identifies\nan OLE server application and a type of object that the server can\nmanipulate via OLE.\nIf you omit classname, PowerBuilder uses the extension of filename to\ndetermine what server application to start.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Invalid call: the argument is the Object property of a control\n-2 -- Class name not found\n-3 -- Object could not be created\n-4 -- Could not connect to object\n-5 -- Ca not connect to the currently active object\n-6 -- Filename is not valid\n-7 -- File not found or file could not be opened\n-8 -- Load from file not supported by server\n-9 -- Other error\n-15 -- COM+ is not loaded on this computer\n-16 -- Invalid Call: this function not applicable to OLETxnObject\nIf any argument's value is null, ConnectToObject returns null.\nUsage\nAfter you have created an OLEObject variable and connected it to an OLE object and\nits server application, you can set properties and call functions supported by the OLE\nserver. PowerBuilder's compiler will not check the syntax of functions that you call for\nan OLEObject variable. If the functions are not present when the application is run or the\nproperty names are invalid, an execution error occurs.\nDeclare and create an OLEObject variable\nYou must use the CREATE statement to allocate memory for an OLEObject variable,\nas shown in the example below.\nWhen you create an OLEObject variable, make sure you destroy the object before it goes out\nof scope. When the object is destroyed it is disconnected from the server and the server is\n"}
{"page": 482, "text": "Statements, Events, and Functions\nPage 482\nclosed. If the object goes out of scope without disconnecting, there will be no way to halt the\nserver application.\nCheck the documentation for the server application to find out what properties and functions\nit supports. Some applications support a large number. For example, Excel has approximately\n4000 operations you can automate.\nThe OLEObject datatype supports OLE automation as a background activity in your\napplication. You can also invoke server functions and properties for an OLE object in an\nOLE control. To do so, specify the Object property of the control before the server function\nname. When you want to automate an object in a control, you do not need an OLEObject\nvariable.\nFor example, the following changes a value in an Excel cell for the object in the OLE control\nole_1:\nole_1.Object.application.cells(1,1).value = 14\nExamples\nThis example declares and creates an OLEObject variable and connects to an Excel\nworksheet, which is opened in Excel. It then sets a value in the worksheet, saves it, and\ndestroys the OLEObject variable, which exits the Excel:\ninteger result\nOLEObject myoleobject\n \nmyoleobject = CREATE OLEObject\nresult = myoleobject.ConnectToObject( &\n \"c:\\excel\\expense.xls\")\n \nIF result = 0 THEN\n    myoleobject.application.workbooks(1).&\n    worksheets(1).cells(1,1).value = 14\n    myoleobject.application.workbooks(1).save()\nEND IF\nDESTROY myoleobject\nThis example connects to an Excel chart (using a Windows path name):\ninteger result\nOLEObject myoleobject\n \nmyoleobject = CREATE OLEObject\nresult = myoleobject.ConnectToObject( &\n \"c:\\excel\\expense.xls\", \"excel.chart\")\nThis example connects to the currently active object in Excel, which is already running:\ninteger result\nOLEObject myoleobject\n \nmyoleobject = CREATE OLEObject\nresult = myoleobject.ConnectToObject(\"\", &\n    \"excel.application\")\nSee also\nConnectToNewObject\nDisconnectObject\n"}
{"page": 483, "text": "Statements, Events, and Functions\nPage 483\n2.4.90 ConnectToRemoteObject\nDescription\nAssociates an OLE object with a PowerBuilder OLEObject variable and starts the server\napplication.\nApplies to\nOLEObject objects\nSyntax\noleobject.ConnectToRemoteObject ( hostname, filename {, classname } )\nTable 2.465:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable that you want to connect to an OLE\nobject. You cannot specify an OLEObject that is the Object property of\nan OLE control.\nhostname\nA string whose value is the name of the remote host where the COM\nserver is located.\nfilename\nA string whose value is the name of an OLE storage file. You cannot\nspecify an empty string. COM looks for filename on the local (client)\nmachine. If filename is located on the remote host, its location must be\nmade available to the local host by sharing. Use the share name for the\nremote drive to specify a file on a remote host -- for example, \\\\hostname\n\\shared_directory\\test.ext.\nclassname\n(optional)\nA string whose value is the name of an OLE class, which identifies\nan OLE server application and a type of object that the server can\nmanipulate via OLE. If you omit classname and filename, is an OLE\nstructured storage file, PowerBuilder uses the class ID in filename.\nOtherwise, PowerBuilder uses the filename extension to determine what\nserver application to start.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Invalid call: the argument is the Object property of a control\n-2 -- Class name not found\n-3 -- Object could not be created\n-4 -- Could not connect to object\n-5 -- Could not connect to the currently active object\n-6 -- File name is invalid\n-7 -- File not found or could not be opened\n"}
{"page": 484, "text": "Statements, Events, and Functions\nPage 484\n-8 -- Load from file not supported by server\n-9 -- Other error\n-10 -- Feature not supported on this platform\n-11 -- Server name is invalid\n-12 -- Server does not support operation\n-13 -- Access to remote host denied\n-14 -- Server unavailable\n-15 -- COM+ is not loaded on this computer\n-16 -- Invalid Call: this function not applicable to OLETxnObject\nUsage\nThe OLEObject variable is used for OLE automation, in which the PowerBuilder\napplication asks the server application to manipulate the OLE object programmatically.\nConnectToRemoteObject can only be used with servers that support remote activation.\nThe following information applies to creating or instantiating and binding to OLE objects on\nremote hosts.\nFor general information about OLE automation, see ConnectToObject.\nSecurity\nSecurity on the server must be configured correctly to launch objects on remote hosts.\nSecurity is configured using registry keys. You must specify attributes for allowing and\ndisallowing launching of servers and connections to running objects to allow client access.\nYou can update the registry manually or with a tool such as DCOMCNFG.EXE or OLE\nViewer.\nRegistry entries\nThe server application must be registered on both the server and the client.\nTo find files other than OLE structured storage files, registry entries must include a file\nextension entry, such as .xls for Excel. If the file is a structured storage file, then COM reads\nthe file and extracts the server identity from the file; otherwise, the registry entry for the file\nextension is used and the appropriate server application is launched.\nIf the DCOM server uses a custom interface, the proxy/stub DLL for the interface must\nbe registered on the client. The proxy/stub DLL is created by the designer of the custom\ninterface. It handles the marshaling of parameters through the proxy on the client and the stub\non the server so that a remote procedure call can take place.\nExamples\nThis example declares and creates an OLEObject variable and connects to an Excel\nworksheet on a remote host named falco. The drive where the worksheet resides is mapped as\nf:\\excel on the local host:\ninteger result\nOLEObject myoleobject\n \nmyoleobject = CREATE OLEObject\n"}
{"page": 485, "text": "Statements, Events, and Functions\nPage 485\nresult = myoleobject.ConnectToRemoteObject( &\n \"falco\", \"f:\\excel\\expense.xls\")\nThis example connects to the same object on the remote host but opens it as an Excel chart:\ninteger result\nOLEObject myoleobject\n \nmyoleobject = CREATE OLEObject\nresult = myoleobject.ConnectToRemoteObject( &\n \"falco\", \"f:\\excel\\expense.xls\", \"Excel.chart\")\nSee also\nConnectToNewRemoteObject\nConnectToObject\nDisconnectObject\n2.4.91 ConnectToServer (obsolete)\nDescription\nConnects a client application to a server component. The client application must call\nConnectToServer before it can use a remote object on the server.\nThis function applies to distributed applications only.\nObsolete function\nConnectToServer is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nConnection objects\nSyntax\nconnection.ConnectToServer ( )\nTable 2.466:\nArgument\nDescription\nconnection\nThe name of the Connection object you want to use to establish the\nconnection. The Connection object has properties that specify how the\nconnection will be established.\nReturn value\nLong. Returns 0 if it succeeds and one of the following values if an error occurs:\n50 -- Distributed service error\n52 -- Distributed communications error\n53 -- Requested server not active\n"}
{"page": 486, "text": "Statements, Events, and Functions\nPage 486\n54 -- Server not accepting requests\n55 -- Request terminated abnormally\n56 -- Response to request incomplete\n57 -- Connection object not connected to server\n62 -- Server busy\n92 -- Required property is missing or invalid\nUsage\nBefore calling ConnectToServer, you assign values to the properties of the Connection\nobject.\nExamples\nIn this example, the client application connects to a server application using the Connection\nobject myconnect:\n// Global variable:\n// connection myconnect\nlong ll_rc\nmyconnect = create connection\nmyconnect.driver = \"jaguar\"\nmyconnect.location = \"Jagserver1:2000\"\nmyconnect.application = \"PB_pkg_1\"\nmyconnect.userID = \"bjones\"\nmyconnect.password = \"mypass\"\nll_rc = myconnect.ConnectToServer()\nIF ll_rc <> 0 THEN\n   MessageBox(\"Connection failed\", ll_rc)\nEND IF\nYou can enclose the ConnectToServer function in a try-catch block to catch exceptions\nthrown during the attempt to connect. This example uses SSLServiceProvider and\nSSLCallBack objects to create a secure connection. An exception or other error in any of the\nSSLCallback functions raises the CTSSecurity::UserAbortedException. The error-handling\ncode shown in the example displays a message box with the text of the error message, but\nyour code should take additional appropriate action:\nSSLServiceProvider   sp\n// set QOP\ngetcontextservice( \"SSLServiceProvider\", sp )\nsp.setglobalproperty( \"QOP\", \"sybpks_simple\" )\n// set PB callback handler\nsp.setglobalproperty( \"CallbackImpl\", &\n   \"uo_sslcallback_handler\" )\n// connect to the server\nconnection  cxn\ncxn.userid   = \"jagadmin\"\ncxn.password = \"sybase\"\ncxn.driver   = \"jaguar\"\ncxn.application = \"dbgpkg\"\ncxn.options     = \"ORBLogFile='d:\\PBJagClient.Log'\"\ncxn.location = \"iiops://localhost:9001\"\nTRY\n   l_rc = cxn.ConnectToServer()\n"}
{"page": 487, "text": "Statements, Events, and Functions\nPage 487\nCATCH (userabortedexception uae)\n   MessageBox(\"UserAbortedException Caught\", &\n      \"ConnectToServer caught: \" +  uae.getMessage() )\n   l_rc = 999\nCATCH ( CORBASystemException cse )\n   MessageBox(\"CORBASystemException Caught\", &\n      \"ConnectToServer caught: \" +  cse.getMessage() )\n   l_rc = 998\nCATCH ( RuntimeError re )\n   MessageBox(\"RuntimeError Exception Caught\", &\n      \"ConnectToServer caught: \" +  re.getMessage() )\n   l_rc = 997\nCATCH ( Exception ex )\n   MessageBox(\"Exception Caught\", &\n      \"ConnectToServer caught: \" +  ex.getMessage() )\n   l_rc = 996\nEND TRY\n \nIF l_rc <> 0 THEN\n   MessageBox(\"Error\", \"Connection Failed - code: \" &\n      + string(l_rc) )\n   MessageBox(\"Error Info\", \"ErrorCode= \" + &\n      string(cxn.ErrCode) + \"~nErrText= \" + &\n   cxn.ErrText)\nELSE\n   MessageBox(\"OK\", \"Connection Established\")\nEND IF\nSee also\nDisconnectServer\n2.4.92 ContainsKey\nDescription\nChecks if the key name exists. It only checks the key at the first level of the JSON string.\nIf more than one key with the same name exists, it will only check the first key. Notice that\nthe JSONPackage IgnoreCase property (true by default) determines whether the key name\nwill be matched in a case-sensitive manner.\nApplies to\nJSONPackage and JSONParser objects\nSyntax for JSONPackage\nobjectname.ContainsKey ( Key )\nSyntax for JSONParser\nobjectname.ContainsKey ( ParentItemHandle, Key )\nobjectname.ContainsKey ( ParentItemPath, Key )\nTable 2.467:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage or JSONParser object whose key you\nwant to check.\n"}
{"page": 488, "text": "Statements, Events, and Functions\nPage 488\nArgument\nDescription\nParentItemHandle A long value specifying the parent item handle which is JsonObjectItem\ntype.\nParentItemPath\nA string value specifying the parent item path which is JsonObjectItem\ntype.\nKey\nA string value specifying the key name.\nReturn value\nBoolean. Returns true if the key exists and false if the key does not exist. If any argument's\nvalue is null, the method returns null.\nExample 1\nThis example sets the value for key and then checks if the specified key exists:\nboolean lb_emp, lb_depart\nJsonPackage lnv_package\nlnv_package = create JsonPackage\n// Packages the data\nlnv_package.SetValue(\"d_employee\", dw_employee) \n// lb_emp returns true and lb_depart returns false\nlb_emp = lnv_package.ContainsKey(\"d_employee\")\nlb_depart = lnv_package.ContainsKey(\"d_department\")\nExample 2\nThis example loads a JSON string into a JSONParser object and checks if the specified key\nexists:\nString         ls_Return\nLong           ll_RootHandle\nBoolean        lb_Contains\nLong           ll_ItemHandle\nLong           ll_Object\nJSONItemType   ljit_Dept\nJsonParser     ljp_ContainsKey\nljp_ContainsKey = Create JsonParser\n// Loads JSON string to JSONParser object\nls_Return = ljp_ContainsKey.LoadString ( '{\"Boolean\":false, \"Name\":\"A&DName\",\n \"object\":{\"1\":\"1\"}, \"dept\":[{\"dept_id\":100, \"dept_name\":\"R & D8\",\n \"dept_head_id\":105}, {\"dept_id\":200, \"dept_name\":\"Sales\", \"dept_head_id\":129}]}'\n  )\nIf Trim(ls_Return)<>\"\" Then \n  // Prints the error message\n  Return\nEnd If \nll_RootHandle = ljp_ContainsKey.GetRootitem( )\n// Checks if Jsonparser parent node contains a Boolean key\n// This script returns TRUE\nlb_Contains = ljp_ContainsKey.Containskey( ll_RootHandle, \"Boolean\")\nlb_Contains = ljp_ContainsKey.Containskey( ll_RootHandle, \"dept\")\nIf lb_Contains Then\n   ljit_Dept = ljp_ContainsKey.getitemtype( ll_RootHandle, \"dept\")\n  If ljit_Dept = JsonArrayItem! Then\n   // Gets the handle of array object in the JSON string\n"}
{"page": 489, "text": "Statements, Events, and Functions\nPage 489\n   ll_ItemHandle = ljp_ContainsKey.GetItemarray( ll_RootHandle, \"dept\")\n   // Gets the handle of the first element of the array object\n   ll_Object = ljp_ContainsKey.GetChildItem( ll_ItemHandle, 1)\n   // Checks if the first element contains dept_name key\n   // This script returns TRUE\n   lb_Contains = ljp_ContainsKey.Containskey( ll_Object, \"dept_name\")\n   // Checks if the first element contains a Boolean key.\n   // This script returns FALSE  \n   lb_Contains = ljp_ContainsKey.Containskey( ll_Object, \"Boolean\")                \n     \n  Else\n   // Prints error message: the dept key is JsonArrayItem\n  End If             \nElse\n   // Prints the error message\nEnd If\nExample 3\nThis example loads a JSON string into a JSONParser object and checks if the specified key\nexists:\nString         ls_Return, ls_RootPath, ls_ChildPath\nBoolean        lb_Contains\nJSONItemType   ljit_Dept\nJsonParser     ljp_ContainsKey\nljp_ContainsKey = Create JsonParser\n// Loads JSON string to JSONParser object\nls_Return = ljp_ContainsKey.LoadString ( '{\"Boolean\":false, \"Name\":\"A&DName\",\n \"object\":{\"1\":\"1\"}, \"dept\":[{\"dept_id\":100, \"dept_name\":\"R & D8\",\n \"dept_head_id\":105}, {\"dept_id\":200, \"dept_name\":\"Sales\", \"dept_head_id\":129}]}'\n  )\nIf Trim(ls_Return)<>\"\" Then \n  // Prints the error message\n  Return\nEnd If \nls_RootPath = \"/\"\n// Checks if Jsonparser parent node contains a Boolean key\n// This script returns TRUE\nlb_Contains = ljp_ContainsKey.Containskey( ls_RootPath,\"Boolean\")\nlb_Contains = ljp_ContainsKey.Containskey( ls_RootPath, \"dept\")\nIf lb_Contains Then\n  ls_ChildPath = \"/dept\"\n  ljit_Dept = ljp_ContainsKey.getitemtype( ls_ChildPath )\n  If ljit_Dept = JsonArrayItem! Then    \n    // Checks if the first element contains a dept_name key\n    // This script returns TRUE\n    ls_ChildPath = \"/dept/1\"\n    lb_Contains = ljp_ContainsKey.Containskey( ls_ChildPath,\"dept_name\" )\n    // Checks if the first element contains a Boolean key.\n    // This script returns FALSE  \n    lb_Contains = ljp_ContainsKey.Containskey( ls_ChildPath, \"Boolean\")            \n         \n  Else\n    // Prints error message: the dept key is JsonArrayItem\n  End If             \nElse\n   // Prints the error message\nEnd If\nSee also\n"}
{"page": 490, "text": "Statements, Events, and Functions\nPage 490\nSetValue (JSONPackage)\nContainsPath (JSONParser)\n2.4.93 ContainsPath\nDescription\nChecks if the path exists.\nApplies to\nJSONParser objects\nSyntax\nobjectname.ContainsPath ( ItemPath )\nTable 2.468:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose path you want to check.\nItemPath\nA string whose value is the path of the item of JsonArrayItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nBoolean. Returns true if the item path exists and false if an error occurs. If any argument's\nvalue is null, the method returns null.\nExample 1\nThis example loads a JSON string into a JSONParser object and checks if the specified path\nexists:\nString         ls_Return, ls_Path\nBoolean        lb_Contains\nJSONItemType   ljit_Dept\nJsonParser     ljp_ContainsPath\nljp_ContainsPath = Create JsonParser\n// Loads JSON string to JSONParser object\nls_Return = ljp_ContainsPath.LoadString ( '{\"Boolean\":false, \"Name\":\"A&DName\",\n \"object\":{\"1\":\"1\"}, \"dept\":[{\"dept_id\":100, \"dept_name\":\"R & D8\",\n \"dept_head_id\":105}, {\"dept_id\":200, \"dept_name\":\"Sales\", \"dept_head_id\":129}]}'\n  )\nIf Trim(ls_Return)<>\"\" Then \n  // Prints the error message\n  Return\nEnd If\n// Checks if JSONParser parent node contains a Boolean path\n// This script returns TRUE\nls_Path = \"/Boolean\"\nlb_Contains = ljp_ContainsPath.ContainsPath( ls_Path )\nls_Path = \"/dept\"\n"}
{"page": 491, "text": "Statements, Events, and Functions\nPage 491\nlb_Contains = ljp_ContainsPath.ContainsPath( ls_Path )\nIf lb_Contains Then\n  ljit_Dept = ljp_ContainsPath.getitemtype( ls_Path )\n  If ljit_Dept = JsonArrayItem! Then    \n    // Checks if the first element contains a dept_name path\n    // This script returns TRUE\n    ls_Path = \"/dept/1/dept_name\"\n    lb_Contains = ljp_ContainsPath.ContainsPath( ls_Path )\n    \n    // Checks if the first element contains a Boolean path\n    // This script returns FALSE  \n    ls_Path = \"/dept/1/Boolean\"\n    lb_Contains = ljp_ContainsPath.ContainsPath( ls_Path )                     \n  Else\n    // Prints error message: the dept path is JsonArrayItem\n  End If             \nElse\n   // Prints the error message\nEnd If\nSee also\nContainsKey\n2.4.94 Copy\nDescription\nPuts selected text or an OLE object on the clipboard. Copy does not change the source text or\nobject.\nApplies to\nDataWindow, InkEdit, MultiLineEdit, SingleLineEdit, RichTextEdit, DropDownListBox,\nDropDownPictureListBox, OLE controls, and OLE DWObjects (objects within a\nDataWindow object that is within a DataWindow control)\nSyntax\nobjectref.Copy ( )\nTable 2.469:\nArgument\nDescription\nobjectref\nOne of the following:\n\u2022 The name of the DataWindow control, EditMask, InkEdit,\nMultiLineEdit, SingleLineEdit, RichTextEdit, DropDownListBox or\nDropDownPictureListBox containing the text you want to copy to the\nclipboard.\n\u2022 The name of the OLE control or the fully qualified name of a OLE\nDWObject within a DataWindow control that contains the object you\nwant to copy to the clipboard.\nThe fully qualified name for a DWObject has this syntax:\ndwcontrol.Object.dwobjectname\n"}
{"page": 492, "text": "Statements, Events, and Functions\nPage 492\nArgument\nDescription\nIf objectref is a DataWindow, text is copied from the edit control over\nthe current row and column. If objectref is a DropDownListBox or\nDropDownPictureListBox, its AllowEdit property must be true.\nReturn value\nInteger for DataWindow, InkEdit, and list boxes, Long for other controls.\nFor RichTextEdit controls, Copy returns a long. For other edit controls and OLE objects,\nCopy returns an integer.\nFor edit controls, Copy returns the number of characters that were copied to the clipboard.\nIf no text is selected in objectref, no characters are copied and Copy returns 0. If an error\noccurs, Copy returns -1.\nFor OLE controls and OLE DWObjects, Copy returns 0 if it succeeds and one of the\nfollowing negative values if an error occurs:\n-1 -- Container is empty\n-2 -- Copy Failed\n-9 -- Other error\nIf objectref is null, Copy returns null.\nUsage\nTo select text for copying, the user can use the mouse or keyboard. You can also call the\nSelectText function in a script. For RichTextEdit controls, there are several additional\nfunctions for selecting text: SelectTextAll, SelectTextLine, and SelectTextWord.\nTo insert the contents of the clipboard into a control, use the Paste function.\nCopy does not delete the selected text or OLE object. To delete the data, use the Clear or Cut\nfunction.\nExamples\nAssuming the selected text in mle_emp_address is Temporary Address, these statements copy\nTemporary Address from mle_emp_address to the clipboard and store 17 in copy_amt:\ninteger copy_amt\ncopy_amt = mle_emp_address.Copy()\nThis example copies the OLE object in the OLE control ole_1 to the clipboard:\ninteger result\nresult = ole_1.Copy()\nSee also\nClear\nClipboard\nCut\nPaste\n"}
{"page": 493, "text": "Statements, Events, and Functions\nPage 493\nReplaceText\nSelectText\n2.4.95 CopyRTF\nDescription\nReturns the selected text, pictures, and input fields in a RichTextEdit control or RichText\nDataWindow as a string with rich text formatting. Bitmaps and input fields are included in\nthe string.\nApplies to\nDataWindow controls, DataStore objects, and RichTextEdit controls\nSyntax\nrtename.CopyRTF ( { selected {, band } } )\nTable 2.470:\nArgument\nDescription\nrtename\nThe name of the DataWindow control, DataStore object, or RichTextEdit\ncontrol from which you want to copy the selection in rich text format.\nThe DataWindow object in the DataWindow control or DataStore must\nbe a RichText DataWindow.\nselected\n(optional)\nA boolean value indicated whether to copy selected text only. Values are:\n\u2022 TRUE -- (Default) Copy selected text only\n\u2022 FALSE -- Copy the entire contents of the band\nband (optional)\nA value of the Band enumerated datatype specifying the band from which\nto copy text. Values are:\n\u2022 Detail! -- Copy text from the detail band\n\u2022 Header! -- Copy text from the header band\n\u2022 Footer! -- Copy text from the footer band\nThe default is the band that contains the insertion point.\nReturn value\nString.\nReturns the selected text as a string.\nCopyRTF returns an empty string (\"\") if:\n\u2022 There is no selection and selected is true\n\u2022 An error occurs\n"}
{"page": 494, "text": "Statements, Events, and Functions\nPage 494\nUsage\nCopyRTF does not involve the clipboard. The copied information is stored in a string. If\nyou use the standard clipboard functions (Copy and Cut) the clipboard will contain the text\nwithout any formatting.\nTo incorporate the text with RTF formatting into another RichTextEdit control, use\nPasteRTF. For more information about rich text format, see the chapter about implementing\nrich text in Application Techniques.\nExamples\nThis statement returns the text that is selected in the RichTextEdit rte_message and stores it\nin the string ls_richtext:\nstring ls_richtext\nls_richtext = rte_message.CopyRTF()\nThis example copies the text in rte_1, saving it in ls_richtext, and pastes it into rte_2. The\nuser clicks the RadioButton rb_true to copy selected text and rb_false to copy all the text. The\nnumber of characters pasted is saved in ll_numchars reported in the StaticText st_status:\nstring ls_richtext\nboolean lb_selected\nlong ll_numchars\n \nIF rb_true.Checked = TRUE THEN\n      lb_selected = TRUE\nELSE\n      lb_selected = FALSE\nEND IF\n \nls_richtext = rte_1.CopyRTF(lb_selected)\nll_numchars = rte_2.PasteRTF(ls_richtext)\nst_status.Text = String(ll_numchars)\nSee also\nPasteRTF\n2.4.96 Cos\nDescription\nCalculates the cosine of an angle.\nSyntax\nCos ( n )\nTable 2.471:\nArgument\nDescription\nn\nThe angle (in radians) for which you want the cosine\nReturn value\nDouble.\n"}
{"page": 495, "text": "Statements, Events, and Functions\nPage 495\nReturns the cosine of n. If n is null, Cos returns null.\nExamples\nThis statement returns 1:\nCos(0)\nThis statement returns .540302:\nCos(1)\nThis statement returns -1:\nCos(Pi(1))\nSee also\nACos\nPi\nSin\nTan\nCos method for DataWindows in Section 2.4.13, \u201cCos\u201d in DataWindow Reference.\n2.4.97 Cpu\nDescription\nReports the amount of CPU time that has elapsed since the application started.\nSyntax\nCpu ( )\nReturn value\nLong.\nReturns the number of milliseconds of CPU time elapsed since the start of your PowerBuilder\napplication.\nExamples\nThese statements determine the amount of CPU time that elapsed while a group of statements\nexecuted:\nlong ll_start, ll_used\n// Set the start equal to the current CPU usage.\nll_start = Cpu()\n... // Executable statements being timed\n \n// Set ll_used to the number of CPU seconds\n// that were used (current CPU time - start).\nll_used = Cpu() - ll_start\n2.4.98 CreateDirectory\nDescription\n"}
{"page": 496, "text": "Statements, Events, and Functions\nPage 496\nCreates a directory.\nApplies to\nFile system\nSyntax\nCreateDirectory ( directoryname )\nTable 2.472:\nArgument\nDescription\ndirectoryname\nString for the name of the directory you want to create\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nExamples\nThis example creates a new subdirectory in the current path and then makes the new\nsubdirectory the current directory:\nstring  ls_path=\"my targets\"\ninteger li_filenum\nCreateDirectory ( ls_path )\nli_filenum = ChangeDirectory( ls_path )\nSee also\nGetCurrentDirectory\nRemoveDirectory\n2.4.99 CreateInstance\n2.4.99.1 Syntax 1: for TransactionServer objects\nDescription\nCreates an instance of a component running on the COM+ server. This function is called\nfrom within a component instance running on COM+.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.CreateInstance (objectvariable {, classname } )\nTable 2.473:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance.\n"}
{"page": 497, "text": "Statements, Events, and Functions\nPage 497\nArgument\nDescription\nobjectvariable\nA global, instance, or local variable whose datatype is the same class as\nthe object being created or an ancestor of that class.\nclassname\n(optional)\nA string whose value is the name of the class datatype to be created.\nFor COM+ components, you can optionally prepend a\nProgID followed by a period to the class name (for example,\n\"PowerBuilder.HTMLDataWindow\".\nReturn value\nLong.\nReturns 0 if it succeeds and one of the following values if an error occurs:\n50 -- Distributed service error\n52 -- Distributed communications error\n53 -- Requested server not active\n54 -- Server not accepting requests\n55 -- Request terminated abnormally\n56 -- Response to request incomplete\n57 -- Not connected\n62 -- Server busy\nUsage\nThe CreateInstance function on the TransactionServer context object allows you to access\nother COM+ components running on the current server. The created instance inherits all the\ntransaction and security attributes of the current object.\nThe CreateInstance function on the TransactionServer context object uses the same user and\npassword information that applies to the component from which it is called.\nBefore you can use the transaction context service, you need to declare a variable of type\nTransactionServer and call the GetContextService function to create an instance of the\nservice.\nExamples\nThis example shows the syntax for creating an instance of a COM component:\nInteger rc\nOleObject lole\nTransactionServer lts\nlole = create OleObjectrc = this.GetContextService(\"TransactionServer\", lts)\nIF rc <> 1 THEN\n   return \"Error from GetContextService \" + String (rc)\nEND IF\n// PBCOM is the ProgID, n_genapp is the class namerc = lts.CreateInstance(lole,\n \"PBCOM.n_genapp\")\n"}
{"page": 498, "text": "Statements, Events, and Functions\nPage 498\nIF rc <> 0 THEN\n   return \"Error from CreateInstance \" + String (rc)\nEND IFiole.my_func ()\nSee also\nEnableCommit\nIsInTransaction (obsolete)\nIsTransactionAborted (obsolete)\nLookup (obsolete)\nSetAbort\nSetComplete\nWhich\n2.4.99.2 Syntax 2: for DotNetAssembly objects\nDescription\nCreates an instance of the .NET class and associates it with the DotNetObject object. The\nDotNetObject object must be instantiated first.\nThe instance of the class can be used to access the functions/properties in the\ncorresponding .NET class.\nApplies to\nDotNetAssembly objects\nSyntax\nobjectname.CreateInstance ( readonly string classname, CSharpObjcet DotNetObject {,\n arg1, arg2,..., argn })\nTable 2.474:\nArgument\nDescription\nobjectname\nReference to the DotNetAssembly object instance.\nclassname\nThe name of the .NET class.\nIt must contain the namespace and the class name: [namespace].[class],\nfor example, AppeonSample.StandardTest.\nDotNetObject\nThe name of the DotNetObject object.\n{, arg1, arg2,...,\nargn } (optional)\nThe .NET constructor argument.\nConstructor argument is optional. If no argument is passed in, the\napplication will automatically call the constructor that takes no\nparameter; and if there is no such parameterless constructor, the instance\nwill fail to create.\nReturn value\n"}
{"page": 499, "text": "Statements, Events, and Functions\nPage 499\nInteger.\nReturns values as follows. If the classname or DotNetObject argument's value is null, the\nmethod returns null.\n1 -- Success.\n-1 -- Unknown error.\n-2 -- Could not find the assembly.\n-6 -- Could not find the class name.\nUsage\nThe class name is case insensitive. The application will ignore the case of the class name and\nfind the first class in the order that matches.\nIf there is a nested class, you should use the plus sign (\"+\") instead of the dot (\".\") to\naccess the nested class, in this format: [namespace].[class]+[nested-class], for example,\nAppeonSample.StandardTest+MathTest.\nThe value of the constructor argument can be of any standard data type. See Section 5.1.2.1,\n\u201cData types\u201d in Application Techniques.\nPassing parameters by reference to a constructor function is unsupported. The modified data\ncannot be returned.\nFor Char data type, it will be passed to .NET as String type by default; and if there is no\nconstructor function that matches the type, the instance will fail to create.\nIf the instance failed to create, the exception message returned from .NET will be stored in\nthe ErrorText property.\nExamples\nDotNetAssembly lcs_ass\nDotNetObject lcs_obj\nlong ll_return\n//Instantiates the objects\nlcs_ass = create DotNetAssembly\nlcs_obj = create DotNetObject\n//Loads the DLL\nll_return = lcs_ass.LoadWithDotNetFramework (\"Appeon.Simple.dll\")\n//ll_return = lcs_ass.LoadWithDotNetCore (\"Appeon.Simple.dll\")\nif ll_return < 0 then\n messagebox (\"Load Dll Failed\", lcs_ass.errortext)\n return\nend if\n//Creats the instance\nll_return = lcs_ass.createinstance (\"Appeon.Simple.AppeonCase01\", lcs_obj,\n \"appeon123\")\nif ll_return < 0 then\n messagebox (\"CreateInstance Failed\", lcs_ass.errortext)\n return\nend if\nSee also\nGetDotNetCoreVersion\n"}
{"page": 500, "text": "Statements, Events, and Functions\nPage 500\nLoadWithDotNetCore\nLoadWithDotNetFramework\n2.4.100 CreateJsonArray\nDescription\nCreates the array of JsonArrayItem type as root item to initialize instance.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.CreateJsonArray ( )\nTable 2.475:\nArgument\nDescription\nobjectname\nReference to the JSONGenerator object instance.\nReturn value\nLong.\nReturns the root item handle if it succeeds and -1 if an error occurs.\nExamples\nThis example create the JSON root item of array type:\nJsonGenerator lnv_JsonGenerator\nLong ll_RootArray\nlnv_JsonGenerator = Create JsonGenerator\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\nif ll_RootArray <> -1 then\n  ...\nend if\nSee also\nCreateJsonObject\n2.4.101 CreateJsonObject\nDescription\nCreates the object of JsonObjectItem type as root item to initialize instance.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.CreateJsonObject ( )\n"}
{"page": 501, "text": "Statements, Events, and Functions\nPage 501\nTable 2.476:\nArgument\nDescription\nobjectname\nReference to the JSONGenerator object instance.\nReturn value\nLong.\nReturns the root item handle if it succeeds and -1 if an error occurs.\nExamples\nThis example creates the JSON root item of object type:\nJsonGenerator lnv_JsonGenerator\nLong ll_RootObject\nlnv_JsonGenerator = Create JsonGenerator\nll_RootObject = lnv_JsonGenerator.CreateJsonObject()\nif ll_RootObject <> -1 then\n  ...\nend if\nSee also\nCreateJsonArray\n2.4.102 CreatePage\nDescription\nCreates a tab page if it has not already been created.\nApplies to\nUser objects used as tab pages\nSyntax\nuserobject.CreatePage ( )\nTable 2.477:\nArgument\nDescription\nuserobject\nThe name of the tab page you want to create\nReturn value\nInteger.\nReturns one of the following values:1 if the page is successfully created and -1 if the page\nwas already created or if it is not a tab page.\n1 -- The tab page was successfully created\n0 -- The tab page has already been created\n-1 -- The user object is not a tab page\n"}
{"page": 502, "text": "Statements, Events, and Functions\nPage 502\nUsage\nA window will open more quickly if the creation of graphical representations is delayed for\ntab pages with many controls. However, scripts cannot refer to a control on a tab page until\nthe control's Constructor event has run and a graphical representation of the control has been\ncreated. When the CreateOnDemand property of the Tab control is selected, scripts cannot\nreference controls on tab pages that the user has not viewed. CreatePage allows you to create\na tab page if it has not already been created.\nExamples\nThis example tests whether tabpage_2 has been created and, if not, creates it:\nIF tab_1.CreateOnDemand = True THEN\n    IF tab_1.tabpage_2.PageCreated() = False THEN\n      tab_1.tabpage_2.CreatePage()\n    END IF\nEND IF\nSee also\nPageCreated\n2.4.103 Cut\nDescription\nDeletes selected text or an OLE object from the specified control and stores it on the\nclipboard, replacing the clipboard contents with the deleted text or object.\nApplies to\nDataWindow, InkEdit, MultiLineEdit, SingleLineEdit, DropDownListBox,\nDropDownPictureListBox, and OLE controls\nSyntax\ncontrolname.Cut ( )\nTable 2.478:\nArgument\nDescription\ncontrolname\nThe name of the DataWindow, InkEdit, MultiLineEdit, SingleLineEdit,\nRichTextEdit, DropDownListBox, DropDownPictureListBox, or OLE\ncontrol containing the text or object to be cut.\nIf controlname is a DataWindow, text is cut from the edit control over\nthe current row and column. If controlname is a DropDownListBox or\nDropDownPictureListBox, the AllowEdit property must be true.\nReturn value\nInteger for DataWindow, InkEdit, and list boxes, Long for other controls.\nFor editable controls, Cut returns the number of characters that were cut from controlname\nand stored in the clipboard. If no text is selected, no characters are cut and Cut returns 0. If an\nerror occurs, Cut returns -1.\n"}
{"page": 503, "text": "Statements, Events, and Functions\nPage 503\nFor OLE controls, Cut returns 0 if it succeeds and one of the following negative values if an\nerror occurs:\n-1 -- Container is empty\n-2 -- Cut failed\n-9 -- Other error\nIf controlname is null, Cut returns null.\nUsage\nTo select text for deleting, the user can use the mouse or keyboard. You can also call the\nSelectText function in a script. For RichTextEdit controls, there are several additional\nfunctions for selecting text: SelectTextAll, SelectTextLine, and SelectTextWord.\nTo insert the contents of the clipboard into a control, use the Paste function.\nTo delete selected text or an OLE object but not store it in the clipboard, use the Clear\nfunction.\nCutting an OLE object breaks any connections between it and its source file or storage, just\nas Clear does.\nExamples\nAssuming the selected text in mle_emp_address is Temporary, this statement deletes\nTemporary from mle_emp_address, stores it in the clipboard, and returns 9:\nmle_emp_address.Cut()\nThis example cuts the OLE object in the OLE control ole_1 and puts it on the clipboard:\ninteger result\nresult = ole_1.Cut()\nSee also\nCopy\nClear\nClearAll\nClipboard\nDeleteItem\nPaste\n2.4.104 DataCount\nDescription\nReports the number of data points in the specified series in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls and\nDataStore objects\nSyntax\n"}
{"page": 504, "text": "Statements, Events, and Functions\nPage 504\ncontrolname.DataCount ( { graphcontrol, } seriesname )\nTable 2.479:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want the number of data points in\na specific series, or the name of the DataWindow control or DataStore\ncontaining the graph\ngraphcontrol\n(DataWindow\ncontrol or\nDataStore only)\n(Optional) The name of the graph in the DataWindow control or\nDataStore for which you want the data point count for the series\nseriesname\nA string whose value is the name of the series for which you want the\nnumber of data points\nReturn value\nLong.\nReturns the number of data points in the specified series if it succeeds and -1 if an error\noccurs. If any argument's value is null, DataCount returns null.\nExamples\nThese statements store in ll_count the number of data points in the series named Costs in the\ngraph gr_product_data:\nlong ll_count\nll_count = gr_product_data.DataCount(\"Costs\")\nThese statements store in ll_count the number of data points in the series named Salary in the\ngraph gr_dept in the DataWindow control dw_employees:\nlong ll_count\nll_count = &\n    dw_employees.DataCount(\"gr_dept\", \"Salary\")\nSee also\nAddSeries\nInsertSeries\nSeriesCount\n2.4.105 DataSource\nDescription\nAllows a RichTextEdit control to share data with a DataWindow and display the data in its\ninput fields. If there are input fields in the RichTextEdit control that match the names of\ncolumns in the DataWindow, the data in the DataWindow is assigned to those input fields.\nThe document in the RichTextEdit control is repeated so that there is an instance of the\ndocument for each row in the DataWindow.\nApplies to\n"}
{"page": 505, "text": "Statements, Events, and Functions\nPage 505\nRichTextEdit controls\nSyntax\nrtename.DataSource ( dwsource )\nTable 2.480:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control for which you want to get data in a\nDataWindow\ndwsource\nThe name of the DataWindow control, DataStore, or child DataWindow\nthat contains the data to be connected with input fields in rtename\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nWhen names of input fields match names of columns in the DataWindow object, the data in\nthe columns is assigned to the matching input fields.\nThe document in the RichTextEdit control is associated with one row in the DataWindow.\nThere is an instance of the document for each retrieved row. The text in the RichTextEdit\ncontrol is repeated, with all its formatting, in every document instance. The content of\nthe input fields changes as the data in each row changes. Except for the contents of the\ninput fields, the contents of each instance is the same -- you cannot make changes to the\nsurrounding text that affect individual instances only.\nIf the InputFieldNamesVisible property of the RichTextEdit control is true, the fields will\nshow their names instead of the data they contain. Change the property value to false to see\nthe data. The following RichTextEdit functions operate on or report information about an\ninstance of the document:\nTable 2.481:\nLineCount\nPageCount\nInsertDocument\nSaveDocument\nSelectedPage\nSelectedStart\nSelectedLine\nSelectText\nSelectTextAll\nThe following RichTextEdit function affects the collection of documents:\nPrint\nExamples\nThis example establishes the DataWindow control dw_1 as the data source for the\nRichTextEdit rte_1:\n"}
{"page": 506, "text": "Statements, Events, and Functions\nPage 506\nrte_1.DataSource(dw_1)\nThis example inserts a document called LETTER.RTF into the RichTextEdit rte_letter (the\nnames of the document's input fields match the columns in a DataWindow object d_emp),\ncreates a DataStore, associates it with d_emp, and retrieves data. Then it inserts the document\nin rte_letter and sets up the DataStore as the data source for rte_1:\nDataStore ds_empinfo\nds_empinfo = CREATE DataStore\nds_empinfo.DataObject = \"d_emp\"\nds_empinfo.SetTransObject(SQLCA)\nds_empinfo.Retrieve()\n \nrte_letter.InsertDocument(\"LETTER.RTF\", TRUE)\nrte_letter.DataSource(ds_empinfo)\nSee also\nInputFieldChangeData\nInputFieldCurrentName\nInputFieldDeleteCurrent\nInputFieldGetData\nInputFieldInsert\n2.4.106 Date\nConverts DateTime, string, or numeric data to data of type date or extracts a date value from\na blob. You can use one of several syntaxes, depending on the datatype of the source data.\nTable 2.482:\nTo\nUse\nExtract the date from DateTime data or extract a date stored in a blob\nSyntax 1\nConvert a string to a date\nSyntax 2\nCombine numeric data into a date\nSyntax 3\nPlatform information for Windows\nTo make sure you get correct return values for the year, you must verify that yyyy\nis the Short Date Style for year in the Regional Settings of the user's Control Panel.\nYour program can check this with the RegistryGet function.\nIf the setting is not correct, you can ask the user to change it manually or have the\napplication change it (by calling the RegistrySet function). The user may need to\nreboot after the setting is changed.\n2.4.106.1 Syntax 1: For DateTime data and blobs\nDescription\nExtracts a date from a DateTime value or from a blob whose first value is a date or DateTime\nvalue.\n"}
{"page": 507, "text": "Statements, Events, and Functions\nPage 507\nSyntax\nDate ( datetime )\nTable 2.483:\nArgument\nDescription\ndatetime\nA DateTime value or a blob in which the first value is a date or DateTime\nvalue. The rest of the contents of the blob is ignored. Datetime can also\nbe an Any variable containing a DateTime or blob.\nReturn value\nDate.\nReturns the date in datetime as a date. If datetime contains an invalid date or an incompatible\ndatatype, Date returns 1900-01-01. If datetime is null, Date returns null.\nExamples\nAfter a value for the DateTime variable ldt_StartDateTime has been retrieved from the\ndatabase, this example sets ld_StartDate equal to the date in ldt_StartDateTime:\nDateTime ldt_StartDateTime\ndate ld_StartDate\nld_StartDate = Date(ldt_StartDateTime)\nAssuming the value of a blob variable ib_blob contains a DateTime value beginning at byte\n32, the following statement converts it to a date value:\ndate ld_date\nld_date = Date(BlobMid(ib_blob, 32))\nSee also\nDateTime\n2.4.106.2 Syntax 2: For strings\nDescription\nConverts a string whose value is a valid date to a date value.\nSyntax\nDate ( string )\nTable 2.484:\nArgument\nDescription\nstring\nA string containing a valid date (such as January 1, 2002, or 12-31-99)\nthat you want returned as a date. Datetime can also be an Any variable\ncontaining a string.\nReturn value\n"}
{"page": 508, "text": "Statements, Events, and Functions\nPage 508\nDate.\nReturns the date in string as a date. If string contains an invalid date or an incompatible\ndatatype, Date returns 1900-01-01. If string is null, Date returns null.\nUsage\nValid dates in strings can include any combination of day (1 to 31), month (1 to 12 or the\nname or abbreviation of a month), and year (2 or 4 digits). PowerBuilder assumes a 4-digit\nnumber is a year. Leading zeros are optional for month and day. The month, whether a name,\nan abbreviation, or a number, must be in the month location specified in the system setting\nfor a date's format. If you do not know the system setting, use the standard datatype date\nformat yyyy-mm-dd.\nPowerBuilder attempts to match the input string to a date format in the regional settings on\nthe computer. If a complete match is not found, PowerBuilder attempts a partial match. For\nexample, if you use Date('01-JAN-1900') and PowerBuilder finds the partial match (dd-\nMMM-yy), PowerBuilder parses the first two numbers of the year and gets 19. The 2-digit\nyear is interpreted as a year between 1930 and 2029, and the date returned is 1/1/2019.\nDate literals do not need to be converted with the Date function.\nExamples\nExample 1\nThese statements all return the date datatype for text expressing the date July 4, 2004\n(2004-07-04). The system setting for a date's format is set with the month's position in the\nmiddle:\nDate(\"2004/07/04\")\nDate(\"2004 July 4\")\nDate(\"04 July 2004\")\nExample 2\nThe following groups of statements check to be sure the date in sle_start_date is a valid date\nand display a message if it is not. The first version checks the result of the Date function to\nsee if the date was valid. The second uses the IsDate function to check the text before using\nDate to convert it:\nVersion 1:\n// Windows Control Panel date format is YY/MM/DD\ndate ld_my_date\n \nld_my_date = Date(sle_start_date.Text)\nIF ld_my_date = Date(\"1900-01-01\") THEN\n    MessageBox(\"Error\", \"This date is invalid: \" &\n    + sle_start_date.Text)\nEND IF\nVersion 2:\ndate ld_my_date\n \nIF IsDate(sle_start_date.Text) THEN\n    ld_my_date = Date(sle_start_date.Text)\nELSE\n    MessageBox(\"Error\", \"This date is invalid: \" &\n"}
{"page": 509, "text": "Statements, Events, and Functions\nPage 509\n    + sle_start_date.Text)\nEND IF\nSee also\nDateTime\nIsDate\nRelativeDate\nRelativeTime\nDate method for DataWindows in Section 2.4.27, \u201cDate\u201d in DataWindow Reference\n2.4.106.3 Syntax 3: For combining numbers into a date\nDescription\nCombines numbers representing the year, month, and day into a date value.\nSyntax\nDate ( year, month, day )\nTable 2.485:\nArgument\nDescription\nyear\nThe 4-digit year (1 to 9999) of the date\nmonth\nThe 1- or 2-digit integer for the month (1 to 12) of the year\nday\nThe 1- or 2-digit integer for the day (1 to 31) of the month\nReturn value\nDate.\nReturns the date specified by the integers for year, month, and day as a date datatype. If\nany value is invalid (out of the range of values for dates), Date returns 1900-01-01. If any\nargument's value is null, Date returns null.\nExamples\nThese statements use integer values to set ld_my_date to 2005-10-15:\ndate ld_my_date\nld_my_date = Date(2005, 10, 15)\nSee also\nDateTime\nDaysAfter\nRelativeDate\nRelativeTime\n2.4.107 DateTime\nManipulates DateTime values. There are three syntaxes.\n"}
{"page": 510, "text": "Statements, Events, and Functions\nPage 510\nTable 2.486:\nTo\nUse\nCombine a date and a time value into a DateTime value\nSyntax 1\nObtain a DateTime value that is stored in a blob\nSyntax 2\nObtain a DateTime value that is stored in a string\nSyntax 3\n2.4.107.1 Syntax 1: For creating DateTime values\nDescription\nCombines a date value and a time value into a DateTime value.\nSyntax\nDateTime ( date {, time } )\nTable 2.487:\nArgument\nDescription\ndate\nA value of type date.\ntime (optional)\nA value of type time. If you omit time, PowerBuilder sets time to\n00:00:00.000000 (midnight). If you specify time, only the hour portion is\nrequired.\nReturn value\nDateTime.\nReturns a DateTime value based on the values in date and optionally time. If any argument's\nvalue is null, DateTime returns null.\nUsage\nDateTime data is used only for reading and writing DateTime values to and from a database.\nTo use the date and time values in scripts, use the Date and Time functions to assign values to\ndate and time variables.\nExamples\nThese statements convert the date and time stored in ld_OrderDate and lt_OrderTime to a\nDateTime value that can be used to update the database:\nDateTime ldt_OrderDateTime\ndate ld_OrderDate\ntime lt_OrderTime\n \nld_OrderDate = Date(sle_orderdate.Text)\nlt_OrderTime = Time(sle_ordertime.Text)\nldt_OrderDateTime = DateTime( &\n    ld_OrderDate, lt_OrderTime)\nSee also\nDate\n"}
{"page": 511, "text": "Statements, Events, and Functions\nPage 511\nTime\nDateTime method for DataWindows in Section 2.4.28, \u201cDateTime\u201d in DataWindow\nReference\n2.4.107.2 Syntax 2: For extracting DateTime values from blobs\nDescription\nExtracts a DateTime value from a blob.\nSyntax\nDateTime ( blob )\nTable 2.488:\nArgument\nDescription\nblob\nA blob in which the first value is a DateTime value. The rest of the\ncontents of the blob is ignored. Blob can also be an Any variable\ncontaining a blob.\nReturn value\nDateTime.\nReturns the DateTime value stored in blob. If blob is null, DateTime returns null.\nUsage\nDateTime data is used only for reading and writing DateTime values to and from a database.\nTo use the date and time values in scripts, use the Date and Time functions to assign values to\ndate and time variables.\nExamples\nAfter assigning blob data from the database to lb_blob, the following example obtains the\nDateTime value stored at position 20 in the blob (the length you specify for BlobMid must be\nat least as long as the DateTime value but can be longer):\nDateTime dt\ndt = DateTime(BlobMid(lb_blob, 20, 40))\nSee also\nDate\nTime\n2.4.107.3 Syntax 3: For extracting DateTime values from strings\nDescription\nExtracts a DateTime value from a string whose value is valid datetime.\nSyntax\nDateTime ( string )\n"}
{"page": 512, "text": "Statements, Events, and Functions\nPage 512\nTable 2.489:\nArgument\nDescription\nstring\nA string containing a valid datetime.\nReturn value\nDateTime.\nReturns the DateTime value stored in the string. If string does not contain a valid datetime,\nDateTime returns null.\nUsage\nDateTime data is used only for reading and writing DateTime values to and from a database.\nTo use the date and time values in scripts, use the Date and Time functions to assign values to\ndate and time variables.\nTo make sure you get correct return values for the year, you must verify that yyyy is the\nShort Date Style for year in the Regional Settings of the user's Control Panel. Your program\ncan check this with the RegistryGet function. If the setting is not correct, you can ask the\nuser to change it manually or to have the application change it (by calling the RegistrySet\nfunction). The user might need to reboot the computer after the setting is changed.\nExamples\nThe following example converts the date and time stored in a string to the datetime July 23,\n2019 (2019-07-23) 13:25:59.\nDateTime dt\ndt = DateTime('2019/7/23 13:25:59')\n//dt = DateTime('2019 July 23 13:25:59')\nSee also\nDate\nTime\n2.4.108 Day\nDescription\nObtains the day of the month in a date value.\nSyntax\nDay ( date )\nTable 2.490:\nArgument\nDescription\ndate\nA date value from which you want the day\nReturn value\nInteger.\n"}
{"page": 513, "text": "Statements, Events, and Functions\nPage 513\nReturns an integer (1 to 31) representing the day of the month in date. If date is null, Day\nreturns null.\nExamples\nThese statements extract the day (31) from the date literal 2004-01-31 and set li_day_portion\nto that value:\ninteger li_day_portion\nli_day_portion = Day(2004-01-31)\nThese statements check to be sure the date in sle_date is valid, and if so set li_day_portion to\nthe day in the sle_date:\ninteger li_day_portion\n \nIF IsDate(sle_date.Text) THEN\n    li_day_portion = Day(Date(sle_date.Text))\nELSE\n    MessageBox(\"Error\", &\n    \"This date is invalid: \" &\n    + sle_date.Text)\nEND IF\nSee also\nDate\nIsTime\nMonth\nYear\nDay method for DataWindows in Section 2.4.29, \u201cDay\u201d in DataWindow Reference.\n2.4.109 DayName\nDescription\nDetermines the day of the week in a date value and returns the weekday's name.\nSyntax\nDayName ( date )\nTable 2.491:\nArgument\nDescription\ndate\nA date value for which you want the name of the day\nReturn value\nString.\nReturns a string whose value is the weekday (Sunday, Monday, and so on) of date. If date is\nnull, DayName returns null.\nUsage\n"}
{"page": 514, "text": "Statements, Events, and Functions\nPage 514\nDayName returns a name in the language of the runtime files available on the machine\nwhere the application is run. If you have installed localized runtime files in the development\nenvironment or on a user's machine, then on that machine the name returned by DayName is\nin the language of the localized files.\nFor information about localized runtime files, which are available in French, German,\nItalian, Spanish, Dutch, Danish, Norwegian, and Swedish, see Section 8.1.4, \u201cLocalizing the\nproduct\u201d in Application Techniques.\nExamples\nThese statements evaluate the date literal 2003-07-04 and set day_name to Sunday:\nstring day_name\nday_name = DayName(2003-07-04)\nThese statements check to be sure the date in sle_date is valid, and if so set day_name to the\nday in sle_date:\nstring day_name\n \nIF IsDate(sle_date.Text) THEN\n    day_name = DayName(Date(sle_date.Text))\nELSE\n    MessageBox(\"Error\", &\n    \"This date is invalid: \" &\n    + sle_date.Text)\nEND IF\nSee also\nDay\nDayNumber\nIsDate\nDayName method for DataWindows in Section 2.4.30, \u201cDayName\u201d in DataWindow\nReference.\n2.4.110 DayNumber\nDescription\nDetermines the day of the week of a date value and returns the number of the weekday.\nSyntax\nDayNumber ( date )\nTable 2.492:\nArgument\nDescription\ndate\nThe date value from which you want the number of the day of the week\nReturn value\nInteger.\n"}
{"page": 515, "text": "Statements, Events, and Functions\nPage 515\nReturns an integer (1-7) representing the day of the week of date. Sunday is day 1, Monday is\nday 2, and so on. If date is null, DayNumber returns null.\nExamples\nThese statements evaluate the date literal 2000-01-31 and set day_nbr to 4 (January 31, 2000,\nwas a Wednesday):\ninteger day_nbr\nday_nbr = DayNumber(2000-01-31)\nThese statements check to be sure the date in sle_date is valid, and if so set day_nbr to the\nnumber of the day in the sle_date:\ninteger day_nbr\n \nIF IsDate(sle_date.Text) THEN\n    day_nbr = DayNumber(Date(sle_date.Text))\nELSE\n    MessageBox(\"Error\", &\n    \"This date is invalid: \" &\n    + sle_date.Text)\nEND IF\nSee also\nDay\nDayName\nIsDate\nDayNumber method for DataWindows in Section 2.4.31, \u201cDayNumber\u201d in DataWindow\nReference.\n2.4.111 DaysAfter\nDescription\nDetermines the number of days one date occurs after another.\nSyntax\nDaysAfter ( date1, date2 )\nTable 2.493:\nArgument\nDescription\ndate1\nA date value that is the start date of the interval being measured\ndate2\nA date value that is the end date of the interval\nReturn value\nLong.\nReturns a long whose value is the number of days date2 occurs after date1. If date2 occurs\nbefore date1, DaysAfter returns a negative number. If any argument's value is null, DaysAfter\nreturns null.\n"}
{"page": 516, "text": "Statements, Events, and Functions\nPage 516\nExamples\nThis statement returns 4:\nDaysAfter(2002-12-20, 2002-12-24)\nThis statement returns -4:\nDaysAfter(2002-12-24, 2002-12-20)\nThis statement returns 0:\nDaysAfter(2003-12-24, 2003-12-24)\nThis statement returns 5:\nDaysAfter(2003-12-29, 2004-01-03)\nIf you declare date1 and date2 date variables and assign February 16, 2003, to date1 and\nApril 28, 2003, to date2 as follows:\ndate date1, date2\ndate1 = 2003-02-16\ndate2 = 2003-04-28\nthen each of the following statements returns 71:\nDaysAfter(date1, date2)\nDaysAfter(2003-02-16, date2)\nDaysAfter(date1, 2003-04-28)\nDaysAfter(2003-02-16, 2003-04-28)\nSee also\nRelativeDate\nRelativeTime\nSecondsAfter\nDaysAfter method for DataWindows in Section 2.4.32, \u201cDaysAfter\u201d in DataWindow\nReference.\n2.4.112 DBHandle\nDescription\nReports the handle for your DBMS.\nApplies to\nTransaction objects\nSyntax\ntransactionobject.DBHandle ( )\nTable 2.494:\nArgument\nDescription\ntransactionobject The current transaction object\n"}
{"page": 517, "text": "Statements, Events, and Functions\nPage 517\nReturn value\nUnsignedLong.\nReturns the handle for your DBMS. Transactionobject must exist, and the database must be\nconnected. If transactionobject is null, DBHandle returns null. If transactionobject does not\nexist, an execution error occurs. If there is not enough memory to connect to your DBMS,\nDBHandle returns a negative number.\nUsage\nDBHandle returns a valid handle only if you are connected to the database. It is not able to\ndetermine if the database connection does not exist or has been lost.\nPowerBuilder uses the database handle internally to communicate with the database. If your\ndatabase supports an API with functions that PowerBuilder does not support, you can use\nDBHandle to provide the handle as an argument to one of these external functions.\nExamples\nFor examples, see Section 6.1.3.1, \u201cDBHandle\u201d in Connecting to Your Database.\n2.4.113 DebugBreak\nDescription\nSuspends execution and opens the Debug window.\nSyntax\nDebugBreak ( )\nReturn value\nNone\nUsage\nInsert a call to the DebugBreak function into a script at a point at which you want to suspend\nexecution and examine the application. Then enable just-in-time debugging and run the\napplication in the development environment.\nWhen PowerBuilder encounters the DebugBreak function, the Debug window opens showing\nthe current context.\nExamples\nThis statement tests whether a variable is null and opens the Debug window if it is:\nIF IsNull(auo_ext) THEN DebugBreak()\n2.4.114 Dec\nDescription\nConverts a string to a decimal number or obtains a decimal value stored in a blob.\nSyntax\nDec ( stringorblob )\n"}
{"page": 518, "text": "Statements, Events, and Functions\nPage 518\nTable 2.495:\nArgument\nDescription\nstringorblob\nA string whose value you want returned as a decimal value or a blob in\nwhich the first value is the decimal you want. The rest of the contents of\nthe blob is ignored. Stringorblob can also be an Any variable containing a\nstring or blob.\nReturn value\nDecimal.\nReturns the value of stringorblob as a decimal. If stringorblob is not a valid PowerScript\nnumber or if it contains an incompatible datatype, Dec returns 0. If stringorblob is null, Dec\nreturns null.\nExamples\nThis statement returns 24.3 as a decimal datatype:\nDec(\"24.3\")\nThis statement returns the contents of the SingleLineEdit sle_salary as a decimal number:\nDec(sle_salary.Text)\nFor an example of assigning and extracting values from a blob, see Real.\nSee also\nDouble\nInteger\nLong\nReal\n2.4.115 DeleteCategory\n2.4.115.1 Syntax 1: for Graph controls\nDescription\nDeletes a category and the data values for that category from the category axis of a graph.\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects (because their data comes directly from the DataWindow).\nSyntax\ncontrolname.DeleteCategory ( categoryvalue )\nTable 2.496:\nArgument\nDescription\ncontrolname\nThe graph in which you want to delete a category.\n"}
{"page": 519, "text": "Statements, Events, and Functions\nPage 519\nArgument\nDescription\ncategoryvalue\nA value that is the category you want to delete from controlname. The\nvalue you specify must be the same datatype as the datatype of the\ncategory axis.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nDeleteCategory returns null.\nExamples\nThese statements delete the category whose name is entered in the SingleLineEdit sle_delete\nfrom the graph gr_product_data:\nstring CategName\nCategName = sle_delete.Text\ngr_product_data.DeleteCategory(CategName)\nSee also\nDeleteData\nDeleteSeries\n2.4.115.2 Syntax 2: for RibbonBar controls\nDescription\nRemoves a category from the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeleteCategory ( Long ItemHandle )\nTable 2.497:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the category you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also delete an item according to the handle by using the DeleteItem function.\n"}
{"page": 520, "text": "Statements, Events, and Functions\nPage 520\nExamples\nThis example gets the category whose index number is 1 and then deletes it according to its\nhandle.\nInteger li_Return\nLong ll_Handle\nRibbonCategoryItem lr_Category\nll_Handle = rbb_1.InsertCategoryLast(\"MyCategory\")\nli_Return = rbb_1.GetCategoryByIndex(1,lr_Category)\nIf li_Return = 1 Then\n li_Return = rbb_1.DeleteCategory(lr_Category.ItemHandle)\nEnd If\nSee also\nInsertCategory\nInsertCategoryFirst\nInsertCategoryLast\nSetCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nSetActiveCategory\nGetActiveCategory\n2.4.116 DeleteCheckBox\nDescription\nRemoves a check box from the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeleteCheckBox ( Long ItemHandle )\nTable 2.498:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the check box you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\n"}
{"page": 521, "text": "Statements, Events, and Functions\nPage 521\nUsage\nYou can also delete an item according to the handle by using the DeleteItem function.\nExamples\nThe example gets the check box whose index number is 1 in the \"MyPanel\" panel and then\ndeletes it according to its handle.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_CheckBox\nRibbonCheckBoxItem lr_CheckBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_CheckBox = rbb_1.InsertCheckBoxFirst (ll_Handle_Panel, \"MyCheckBox\",\n \"Ue_AddButtonClicked\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_CheckBox)\nIf li_Return = 1 Then\n li_Return = rbb_1.DeleteCheckBox (lr_CheckBox.ItemHandle)\nEnd If\nSee also\nInsertCheckBox\nInsertCheckBoxFirst\nInsertCheckBoxLast\nSetCheckBox\nGetCheckBox\n2.4.117 DeleteColumn\nDescription\nDeletes a column.\nListView controls\nSyntax\nlistviewname.DeleteColumn ( index )\nTable 2.499:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to delete a\ncolumn\nindex\nThe index number of the column you want to delete\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\n"}
{"page": 522, "text": "Statements, Events, and Functions\nPage 522\nExamples\nThis example deletes the second column in a ListView control:\nlv_list.DeleteColumn(2)\nSee also\nDeleteColumns\n2.4.118 DeleteColumns\nDescription\nDeletes all columns.\nApplies to\nListView controls\nSyntax\nlistviewname.DeleteColumns ( )\nTable 2.500:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to delete all\ncolumns\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes all columns in a ListView control:\nlv_list.DeleteColumns()\nSee also\nDeleteColumn\n2.4.119 DeleteComboBox\nDescription\nRemoves a combo box from the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeleteComboBox ( Long ItemHandle )\n"}
{"page": 523, "text": "Statements, Events, and Functions\nPage 523\nTable 2.501:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the combo box you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also delete an item according to the handle by using the DeleteItem function.\nExamples\nThe example gets the combo box whose index number is 1 in the \"MyPanel\" panel and then\ndeletes it according to its handle.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox\nRibbonComboBoxItem lr_ComboBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_ComboBox = rbb_1.InsertComboBoxFirst (ll_Handle_Panel,\n \"Ue_ComboBoxSelectionChanged\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_ComboBox)\nIf li_Return = 1 Then\n li_Return = rbb_1.DeleteComboBox (lr_ComboBox.ItemHandle)\nEnd If\nSee also\nInsertComboBox\nInsertComboBoxFirst\nInsertComboBoxLast\nSetComboBox\nGetComboBox\nGetChildItemByIndex\n2.4.120 DeleteData\nDescription\nDeletes a data point from a series of a graph. The remaining data points in the series are\nshifted left to fill the data point's category.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects (because their data comes directly from the DataWindow).\n"}
{"page": 524, "text": "Statements, Events, and Functions\nPage 524\nSyntax\ncontrolname.DeleteData ( seriesnumber, datapointnumber )\nTable 2.502:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to delete a data value\nseriesnumber\nThe number of the series containing the data value you want to delete\nfrom controlname\ndatapointnumber The number of the data point containing the data you want to delete\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, DeleteData\nreturns null.\nExamples\nThese statements delete the data at data point 7 in the series named Costs in the graph\ngr_product_data:\ninteger SeriesNbr\n// Get the number of the series.\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\ngr_product_data.DeleteData(SeriesNbr, 7)\nSee also\nAddData\nDeleteCategory\nDeleteSeries\nFindSeries\n2.4.121 DeleteGroup\nDescription\nRemoves a group from the panel of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeleteGroup ( Long ItemHandle )\nTable 2.503:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 525, "text": "Statements, Events, and Functions\nPage 525\nArgument\nDescription\nItemHandle\nThe handle of the group you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also delete an item according to the handle by using the DeleteItem function.\nExamples\nThe example gets the group whose index number is 1 in the \"MyPanel\" panel and then\ndeletes it according to its handle.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group\nRibbonGroupItem lr_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupFirst (ll_Handle_Panel)\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_Group)\nIf li_Return = 1 Then\n li_Return = rbb_1.DeleteGroup (lr_Group.ItemHandle)\nEnd If\nSee also\nInsertGroup\nInsertGroupFirst\nInsertGroupLast\nSetGroup\nGetGroup\nGetChildItemByIndex\n2.4.122 DeleteItem\nDeletes an item from a ListBox, RibbonComboBoxItem, ListView, TreeView, RibbonMenu,\nor RibbonBar control.\nTable 2.504:\nTo delete an item from\nUse\nA ListBox, DropDownListBox, PictureListBox,\nDropDownPictureListBox, or RibbonComboBoxItem control\nSyntax 1\nA ListView control\nSyntax 2\nA TreeView control\nSyntax 3\n"}
{"page": 526, "text": "Statements, Events, and Functions\nPage 526\nTo delete an item from\nUse\nA RibbonMenu control\nSyntax 4\nA RibbonBar control\nSyntax 5\n2.4.122.1 Syntax 1: For ListBox, DropDownListBox, and RibbonComboBoxItem controls\nDescription\nDeletes an item from the list of values for a list box control.\nApplies to\nListBox, DropDownListBox, PictureListBox, DropDownPictureListBox, and\nRibbonComboBoxItem controls\nSyntax\nlistboxname.DeleteItem ( index )\nTable 2.505:\nArgument\nDescription\nlistboxname\nThe name of the ListBox, DropDownListBox, PictureListBox,\nDropDownPictureListBox, or RibbonComboBoxItem from which you\nwant to delete an item\nindex\nThe position number of the item you want to delete\nReturn value\nInteger.\nReturns the number of items remaining in the list of values after the item is deleted. If an\nerror occurs, DeleteItem returns -1. If any argument's value is null, DeleteItem returns null.\nUsage\nIf the control's Sorted property is set, the order of the list is probably different from the order\nyou specified when you defined the control. If you know the item's text, use FindItem to\ndetermine the item's index.\nExamples\nAssuming lb_actions contains 10 items, this statement deletes item 5 from lb_actions and\nreturns 9:\nlb_actions.DeleteItem(5)\nThese statements delete the first selected item in lb_actions:\ninteger li_Index\nli_Index = lb_actions.SelectedIndex()\nlb_actions.DeleteItem(li_Index)\nThis statement deletes the item \"Personal\" from the ListBox lb_purpose:\nlb_purpose.DeleteItem( &\n"}
{"page": 527, "text": "Statements, Events, and Functions\nPage 527\n    lb_purpose.FindItem(\"Personal\", 1))\nThese statements deletes an item from the ribbon combo box:\nInteger li_Return\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.SetBoxPictureList(\"PaperSizeA0Small!,PaperSizeA1Small!\")\nli_Return = lr_ComboBox.AddItem(\"Item1\")\nli_Return = lr_ComboBox.AddItem(\"Item2\",1)\nli_Return = lr_ComboBox.DeleteItem(1)\nSee also\nAddItem\nFindItem\nInsertItem\nSelectItem\n2.4.122.2 Syntax 2: For ListView controls\nDescription\nDeletes the specified item from a ListView control.\nApplies to\nListView controls\nSyntax\nlistviewname.DeleteItem ( index )\nTable 2.506:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to delete an item\nindex\nThe index number of the item you want to delete\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example uses SelectedIndex to find the index of the selected ListView item and then\ndeletes the corresponding item:\ninteger index\nindex = lv_list.selectedindex()\nlv_list.DeleteItem(index)\nSee also\nAddItem\n"}
{"page": 528, "text": "Statements, Events, and Functions\nPage 528\nFindItem\nInsertItem\nSelectItem\nDeleteItems\n2.4.122.3 Syntax 3: For TreeView controls\nDescription\nDeletes an item from a control and all its child items, if any.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.DeleteItem ( itemhandle )\nTable 2.507:\nArgument\nDescription\ntreeviewname\nThe name of the TreeView control from which you want to delete an item\nitemhandle\nThe handle of the item you want to delete\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nIf all items are children of a single item at the root level, you can delete all items in the\nTreeView with the handle for RootTreeItem as the argument for DeleteItem. Otherwise, you\nneed to loop through the items at the first level.\nExamples\nThis example deletes an item from a TreeView control:\nlong ll_tvi\nll_tvi = tv_list.FindItem(CurrentTreeItem!, 0)\ntv_list.DeleteItem(ll_tvi)\nThis example deletes all items from a TreeView control when there are several items at the\nfirst level:\nlong tvi_hdl = 0\nDO UNTIL tv_1.FindItem(RootTreeItem!, 0) = -1\n    tv_1.DeleteItem(tvi_hdl)\nLOOP\nSee also\nAddItem\n"}
{"page": 529, "text": "Statements, Events, and Functions\nPage 529\nFindItem\nInsertItem\nSelectItem\nDeleteItems\n2.4.122.4 Syntax 4: For RibbonMenu controls\nDescription\nRemoves a menu item from the ribbon menu.\nApplies to\nRibbonMenu control\nSyntax\ncontrolname.DeleteItem ( { Long ParentIndex, } Long Index )\nTable 2.508:\nArgument\nDescription\ncontrolname\nThe name of the RibbonMenu control from which you want to delete an\nitem\nParentIndex\n(optional)\nThe index of the menu item (RibbonMenuItem) whose submenu you\nwant to delete.\nIf not specified, the menu item will be deleted; if specified to a valid\nvalue, the submenu of the menu item (whose index is ParentIndex) will\nbe deleted; if specified to an invalid value, an error would occur and this\noperation would return -1.\nIndex\nThe index of the menu item or submenu item you want to delete. If index\nis invalid, an error would occur and this operation would return -1.\nReturn value\nInteger.\nReturns the number of items remaining in the list of values after the item is deleted if it\nsucceeds and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThis example inserts a \"MenuItem1\" menu item and a \"SubMenuItem1\" submenu item and\nthen deletes them according to their index number.\nLong ll_Return,ll_Index,ll_Index2\nRibbonMenu lr_Menu\nRibbonMenuItem lr_MenuItem1,lr_SubMenuItem1\nlr_MenuItem1.Text = \"MenuItem1\"\nlr_SubMenuItem1.Text = \"SubMenuItem1\"\nll_Index =  lr_Menu.InsertItemLast (lr_MenuItem1)\n"}
{"page": 530, "text": "Statements, Events, and Functions\nPage 530\nll_Index2 = lr_Menu.InsertItemLast (ll_Index,lr_SubMenuItem1)\nll_Return = lr_Menu.DeleteItem (ll_Index,ll_Index2)\nll_Return = lr_Menu.DeleteItem (ll_Index)\nSee also\nAddSeparatorItem\nGetItem\nGetItemCount\nInsertItem\nInsertItemFirst\nInsertItemLast\nSetItem\n2.4.122.5 Syntax 5: For RibbonBar controls\nDescription\nRemoves an item from the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeleteItem ( Long ItemHandle )\nTable 2.509:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control from which you want to delete an\nitem.\nItemHandle\nThe handle of the item which you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nThis function can be used to delete items including ApplicationButton, TabButton, Category,\nPanel, Group, CheckBox, ComboBox, LargeButton, and SmallButton; but cannot delete\nRibbonMenuItem. To delete RibbonMenuItem, you can use the DeleteItem Syntax 4,\nDeleteMasterItem, and DeleteRecentItem functions.\nYou can also use the following functions to delete the individual item control:\nRemoveApplicationButton, DeleteCategory, DeleteCheckBox, DeleteComboBox,\nDeleteGroup, DeleteLargeButton, DeletePanel, DeleteSmallButton, and DeleteTabButton.\nExamples\n"}
{"page": 531, "text": "Statements, Events, and Functions\nPage 531\nThis example gets and deletes the categories one by one in a loop. It gets the category by\nindex and deletes it by handle.\nLong ll_CateGoryCount, ll_i\nInteger li_return\nRibbonCategoryItem lr_CateGory\nrbb_1.InsertCategoryFirst(\"MyCategory1\")\nrbb_1.InsertCategoryLast (\"MyCategory2\")\n//Deletes all categories\nll_CateGoryCount = Rbb_1.GetCateGorycount( )\nFor ll_i =  ll_CateGoryCount To 1 Step -1\n If rbb_1.getcategoryByIndex( ll_i, lr_CateGory) = 1 Then\n  //Deletes a cateogory\n  li_return = rbb_1.DeleteItem(lr_Category.itemhandle)\n End If\nNext\n2.4.123 DeleteItems\nDescription\nDeletes all items from a ListView control.\nApplies to\nListView controls\nSyntax\nlistviewname.DeleteItems ( )\nTable 2.510:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to delete all\nitems\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes all the items in a ListView control:\nlv_list.DeleteItems()\nSee also\nDeleteItem\n2.4.124 DeleteLargeButton\nDescription\nRemoves a large button from the panel of the RibbonBar control.\n"}
{"page": 532, "text": "Statements, Events, and Functions\nPage 532\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeleteLargeButton ( Long ItemHandle )\nTable 2.511:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the large button you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also delete an item according to the handle by using the DeleteItem function.\nExamples\nThe example gets the large button whose index number is 1 in the \"MyPanel\" panel and then\ndeletes it according to its handle.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton\nRibbonLargeButtonItem lr_LargeButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_LargeButton = rbb_1.InsertLargeButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddBig!\", \"Ue_AddButtonClicked\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_LargeButton)\nIf li_Return = 1 Then\n li_Return = rbb_1.DeleteLargeButton (lr_LargeButton.ItemHandle)\nEnd If\nSee also\nInsertLargeButton\nInsertLargeButtonFirst\nInsertLargeButtonLast\nSetLargeButton\nGetLargeButton\nGetChildItemByIndex\n2.4.125 DeleteLargePicture\nDescription\n"}
{"page": 533, "text": "Statements, Events, and Functions\nPage 533\nDeletes a picture from the large image list.\nApplies to\nListView controls\nSyntax\nlistviewname.DeleteLargePicture ( index )\nTable 2.512:\nArgument\nDescription\nlistviewname\nThe name of the ListView control to which you want to delete a large\npicture from the image list\nindex\nThe index entry for the large picture you want to delete\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes a large picture from a ListView control:\nlv_list.DeleteLargePicture(1)\nSee also\nDeleteLargePictures\n2.4.126 DeleteLargePictures\nDescription\nDeletes all large pictures from a ListView control.\nApplies to\nListView controls\nSyntax\nlistviewname.DeleteLargePictures ( )\nTable 2.513:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to delete all\npictures from the large picture image list\nReturn value\nInteger.\n"}
{"page": 534, "text": "Statements, Events, and Functions\nPage 534\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes all large pictures from a ListView control:\nlv_list.DeleteLargePictures()\nSee also\nDeleteLargePicture\n2.4.127 DeleteMasterItem\nDescription\nRemoves a master menu item from the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.DeleteMasterItem ( { Long ParentIndex, } Long Index )\nTable 2.514:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control from which you want\nto remove the master menu item.\nParentIndex\n(optional)\nThe index of the master menu item (RibbonMenuItem) whose submenu\nyou want to delete.\nIf not specified, the master menu item will be deleted; if specified to a\nvalid value, the submenu item of the master menu item (whose index\nis ParentIndex) will be deleted; if specified to an invalid value, an error\nwould occur and this operation would return -1.\nIndex\nThe index of the master menu item or submenu item which you want to\ndelete. If index is invalid, an error would occur and this operation would\nreturn -1.\nReturn value\nInteger.\nReturns the number of items remaining in the list of values after the item is deleted if it\nsucceeds and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThis example inserts a \"MenuItem1\" master menu item and a \"SubMenuItem1\" submenu\nitem and then deletes them according to their index number.\nLong ll_Return,ll_Index,ll_Index2\nRibbonApplicationMenu lr_AppMenu\nRibbonMenuItem lr_MenuItem1,lr_MenuItem2\n"}
{"page": 535, "text": "Statements, Events, and Functions\nPage 535\nlr_MenuItem1.Text = \"MenuItem1\"\nlr_MenuItem2.Text = \"SubMenuItem1\"\nll_Index =  lr_AppMenu.InsertMasterItemLast(lr_MenuItem1)\nll_Index2 = lr_AppMenu.InsertMasterItemLast(ll_Index,lr_MenuItem2)\nll_Return = lr_AppMenu.DeleteMasterItem(ll_Index,ll_Index2)\nll_Return = lr_AppMenu.DeleteMasterItem(ll_Index)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.128 DeletePanel\nDescription\nRemoves a panel from the category of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeletePanel ( Long ItemHandle )\nTable 2.515:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 536, "text": "Statements, Events, and Functions\nPage 536\nArgument\nDescription\nItemHandle\nThe handle of the panel you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also delete an item according to the handle by using the DeleteItem function.\nExamples\nThis example gets the panel whose index number is 1 in the \"MyCategory\" category and then\ndeletes it according to its handle.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel\nRibbonPanelItem lr_Panel\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Category, 1, lr_Panel)\nIf li_Return = 1 Then\n li_Return = rbb_1.DeletePanel (lr_Panel.ItemHandle)\nEnd If\nSee also\nInsertPanel\nInsertPanelFirst\nInsertPanelLast\nSetPanel\nGetPanel\nGetChildItemByIndex\n2.4.129 DeletePicture\nDescription\nDeletes a picture from the image list.\nApplies to\nPictureListBox, DropDownPictureListBox, and TreeView controls\nSyntax\ncontrolname.DeletePicture ( index )\nTable 2.516:\nArgument\nDescription\ncontrolname\nThe control from which you want to delete a picture\n"}
{"page": 537, "text": "Statements, Events, and Functions\nPage 537\nArgument\nDescription\nindex\nThe index number of the picture you want to delete from the TreeView\ncontrol's image list\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nWhen you delete a picture from the image list for a control, all subsequent pictures in the list\nare renumbered to fill the gap. Because the picture index for an item does not change, the\npictures for items that use the affected index numbers will change.\nExamples\nThis example deletes the sixth image from the image list:\ntv_list.DeletePicture(6)\nSee also\nAddPicture\nDeletePictures\n2.4.130 DeletePictures\nDescription\nDeletes all pictures from an image list.\nApplies to\nPictureListBox, DropDownPictureListBox, and TreeView controls\nSyntax\ncontrolname.DeletePictures ( )\nTable 2.517:\nArgument\nDescription\ncontrolname\nThe control in which you want to delete all pictures from the image list\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes all images from a TreeView control image list:\ntv_list.DeletePictures()\nSee also\n"}
{"page": 538, "text": "Statements, Events, and Functions\nPage 538\nAddPicture\nDeletePicture\n2.4.131 DeleteRecentItem\nDescription\nRemoves a recent menu item from the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.DeleteRecentItem ( Long Index )\nTable 2.518:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control from which you want\nto remove the recent menu item.\nIndex\nThe index of the recent menu item which you want to delete.\nReturn value\nLong.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThis example inserts the \"RecentItem1\" recent menu item and then deletes it according to its\nindex number.\nInteger li_Return\nLong ll_Index\nRibbonApplicationMenu lr_AppMenu\nll_Index = lr_AppMenu.InsertRecentItemFirst (\"RecentItem1\",\n \"Ue_RecentItem1Clicked\")\nli_Return = lr_AppMenu.DeleteRecentItem (ll_Index)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\n"}
{"page": 539, "text": "Statements, Events, and Functions\nPage 539\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.132 DeleteSeries\nDescription\nDeletes a series and its data values from a graph.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects (because their data comes directly from the DataWindow).\nSyntax\ncontrolname.DeleteSeries ( seriesname )\nTable 2.519:\nArgument\nDescription\ncontrolname\nThe graph in which you want to delete a series\nseriesname\nA string whose value is the name of the series you want to delete from\ncontrolname\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, DeleteSeries\nreturns null.\nUsage\nThe series in a graph are numbered consecutively, in the order they were added to the graph.\nWhen a series is deleted, the remaining series are renumbered.\nExamples\nThis script for the SelectionChanged event of a DropDownListBox assumes that the list box\nlists the series in the graph gr_data. When the user chooses an item, DeleteSeries deletes the\nseries from the graph and DeleteItem deletes the name from the list box:\nstring ls_name\n"}
{"page": 540, "text": "Statements, Events, and Functions\nPage 540\nls_name = This.Text\ngr_data.DeleteSeries(ls_name)\nThis.DeleteItem(This.FindItem(ls_name, 0))\nSee also\nAddSeries\nDeleteCategory\nDeleteData\nFindSeries\n2.4.133 DeleteSmallButton\nDescription\nRemoves a small button from the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeleteSmallButton ( Long ItemHandle )\nTable 2.520:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the small button you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also delete an item according to the handle by using the DeleteItem function.\nExamples\nThis example gets the small button whose index number is 1 in the \"MyPanel\" panel and then\ndeletes it according to its handle.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton\nRibbonSmallButtonItem lr_SmallButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_SmallButton = rbb_1.InsertSmallButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddSmall!\", \"Ue_AddButtonClicked\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_SmallButton)\nIf li_Return = 1 Then\n"}
{"page": 541, "text": "Statements, Events, and Functions\nPage 541\n li_Return = rbb_1.DeleteSmallButton (lr_SmallButton.ItemHandle)\nEnd If\nSee also\nInsertSmallButton\nInsertSmallButtonFirst\nInsertSmallButtonLast\nSetSmallButton\nGetSmallButton\nGetChildItemByIndex\n2.4.134 DeleteSmallPicture\nDescription\nDeletes a small picture from a ListView control.\nApplies to\nListView controls\nSyntax\nlistviewname.DeleteSmallPicture ( index )\nTable 2.521:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to delete a small\npicture from the image list\nindex\nThe index number of the small picture you want to delete\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes a small picture from a ListView control:\nlv_list.DeleteSmallPicture(1)\nSee also\nDeleteSmallPictures\n2.4.135 DeleteSmallPictures\nDescription\nDeletes all small pictures from a ListView control.\n"}
{"page": 542, "text": "Statements, Events, and Functions\nPage 542\nApplies to\nListView controls\nSyntax\nlistviewname.DeleteSmallPictures ( )\nTable 2.522:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to delete all\nsmall pictures\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes all small pictures from a ListView control:\nlv_list.DeleteSmallPictures()\nSee also\nDeleteStatePicture\n2.4.136 DeleteStatePicture\nDescription\nDeletes a state picture from a control.\nApplies to\nListView and TreeView controls\nSyntax\ncontrolname.DeleteStatePicture ( index )\nTable 2.523:\nArgument\nDescription\ncontrolname\nThe name of the ListView or TreeView control from which you want to\ndelete a picture from the state image list\nindex\nThe index number of the state picture you want to delete\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\n"}
{"page": 543, "text": "Statements, Events, and Functions\nPage 543\nExamples\nThis example deletes a state picture from a ListView control:\nlv_list.DeleteStatePicture(1)\nSee also\nDeleteStatePictures\n2.4.137 DeleteStatePictures\nDescription\nDeletes all state pictures from a control.\nApplies to\nListView and TreeView controls\nSyntax\ncontrolname.DeleteStatePictures ( )\nTable 2.524:\nArgument\nDescription\ncontrolname\nThe name of the ListView or TreeView control from which you want to\ndelete all state pictures\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example deletes all state pictures from a ListView control:\nlv_list.DeleteStatePictures()\nSee also\nDeleteStatePicture\n2.4.138 DeleteTabButton\nDescription\nRemoves a tab button from the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.DeleteTabButton ( Long ItemHandle )\n"}
{"page": 544, "text": "Statements, Events, and Functions\nPage 544\nTable 2.525:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the tab button you want to delete.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also delete an item according to the handle by using the DeleteItem function.\nExamples\nThis example gets the tab button whose index number is 1 and then deletes it according to its\nhandle.\nInteger li_Return\nLong ll_Handle\nRibbonTabButtonItem lr_TabButton\nll_Handle = rbb_1.InsertTabButtonFirst (\"MyTabButton\", \"ArrowUpSmall!\",\n \"Ue_TabButtonClicked\")\nli_Return = rbb_1.GetTabButtonByIndex (1, lr_TabButton)\nIf li_Return = 1 Then\n li_Return = rbb_1.DeleteTabButton (ll_Handle)\nEnd If\nSee also\nInsertTabButton\nInsertTabButtonFirst\nInsertTabButtonLast\nSetTabButton\nGetTabButton\nGetTabButtonByIndex\nGetTabButtonCount\n2.4.139 DestroyModel\nDescription\nDestroys the current performance analysis or trace tree model.\nApplies to\nProfiling and TraceTree objects\nSyntax\ninstancename.DestroyModel ( )\n"}
{"page": 545, "text": "Statements, Events, and Functions\nPage 545\nTable 2.526:\nArgument\nDescription\ninstancename\nInstance name of the Profiling or TraceTree object\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- The function failed because no model exists\nUsage\nWhen you are finished with the performance analysis or trace tree model you created using\nthe BuildModel function, you must call DestroyModel to destroy the model as well as all the\nobjects associated with that model. The memory allocated to a model will not be released\nuntil the object is destroyed.\nExamples\nThis example destroys the performance analysis model previously created using the\nBuildModel function:\nlpro_model.DestroyModel()\nDESTROY lpro_model\nSee also\nBuildModel\n2.4.140 DirectoryExists\nDescription\nDetermines if the named directory exists.\nSyntax\nDirectoryExists ( directoryname )\nTable 2.527:\nArgument\nDescription\ndirectoryname\nString for the name of the directory you want to verify as existing\nReturn value\nReturns true if the directory exists. Returns false if the directory does not exist or if you pass\na file name in the directoryname argument.\nUsage\nYou can use this method before attempting to move a file or delete a directory using other file\nsystem methods.\n"}
{"page": 546, "text": "Statements, Events, and Functions\nPage 546\nExamples\nThis example determines if a directory exists before attempting to move a file to it; otherwise\nit displays a message box indicating that the path does not exist:\nstring  ls_path=\"monthly targets\"\n \nIf DirectoryExists ( ls_path ) Then\n FileMove (\"2000\\may.csv\", ls_path+\"\\may.csv\" )\n    MessageBox (\"File Mgr\", \"File moved to \"&\n     + ls_path + \".\")\nElse\n    MessageBox (\"File Mgr\", \"Directory \" + ls_path+&\n     \" does not exist\" )\nEnd If\nSee also\nFileMove\nGetCurrentDirectory\nRemoveDirectory\n2.4.141 DirList\nDescription\nPopulates a ListBox with a list of files. You can specify a path, a mask, and a file type to\nrestrict the set of files displayed. If the window has an associated StaticText control, DirList\ncan display the current drive and directory as well.\nApplies to\nListBox, DropDownListBox, PictureListBox, and DropDownPictureListBox controls\nSyntax\nlistboxname.DirList ( filespec, filetype {, statictext } )\nTable 2.528:\nArgument\nDescription\nlistboxname\nThe name of the ListBox control you want to populate.\nfilespec\nA string whose value is the file pattern. This is usually a mask (for\nexample, *.INI or *.TXT). If you include a path, it becomes the current\ndrive and directory.\nfiletype\nAn unsigned integer representing one or more types of files you want to\nlist in the ListBox. Types are:\n\u2022 0 -- Read/write files\n\u2022 1 -- Read-only files\n\u2022 2 -- Hidden files\n\u2022 4 -- System files\n"}
{"page": 547, "text": "Statements, Events, and Functions\nPage 547\nArgument\nDescription\n\u2022 16 -- Subdirectories\n\u2022 32 -- Archive (modified) files\n\u2022 16384 -- Drives\n\u2022 32768 -- Exclude read/write files from the list\nTo list several types, add the numbers associated with the types.\nFor example, to list read-write files, subdirectories, and drives, use\n0+16+16384 or 16400 for filetype.\nstatictext\n(optional)\nThe name of the StaticText in which you want to display the current drive\nand directory.\nReturn value\nBoolean.\nReturns true if the search path is valid so that the ListBox is populated or the list is empty.\nDirList returns false if the ListBox cannot be populated (for example, filespec is a file, not a\ndirectory, or specifies an invalid path). If any argument's value is null, DirList returns null.\nUsage\nYou can call DirList when the window opens to populate the list initially. You should also\ncall DirList in the script for the SelectionChanged event to repopulate the list box based on\nthe new selection. (See the example in DirSelect.)\nAlternatives\nAlthough DirList's features allow you to emulate the standard File Open and File\nSave windows, you can get the full functionality of these standard windows by calling\nGetFileOpenName and GetFileSaveName instead of DirList.\nExamples\nThis statement populates the ListBox lb_emp with a list of read/write files with the file\nextension TXT in the search path C:\\EMPLOYEE\\*.TXT:\nlb_emp.DirList(\"C:\\EMPLOYEE\\*.TXT\", 0)\nThis statement populates the ListBox lb_emp with a list of read-only files with the file\nextension DOC in the search path C:\\EMPLOYEE\\*.DOC and displays the path specification\nin the StaticText st_path:\nlb_emp.DirList(\"C:\\EMPLOYEE\\*.DOC\", 1, st_path)\nThese statements in the script for a window Open event initialize a ListBox to all files in the\ncurrent directory that match *.TXT:\nString s_filespec\ns_filespec = \"*.TXT\"\nlb_filelist.DirList(s_filespec, 16400, st_filepath)\n"}
{"page": 548, "text": "Statements, Events, and Functions\nPage 548\nSee also\nDirSelect\nGetFolder\n2.4.142 DirSelect\nDescription\nWhen a ListBox has been populated with the DirList function, DirSelect retrieves the current\nselection and stores it in a string variable.\nApplies to\nListBox, DropDownListBox, PictureListBox, and DropDownPictureListBox controls\nSyntax\nlistboxname.DirSelect ( selection )\nTable 2.529:\nArgument\nDescription\nlistboxname\nThe name of the ListBox control from which you want to retrieve the\ncurrent selection. The ListBox must have been populated using DirList,\nand the selection must be a drive letter, a file, or the name of a directory.\nselection\nA string variable in which the selected path name will be put.\nReturn value\nBoolean.\nReturns true if the current selection is a drive letter or a directory name (which can contain\nfiles and other directories) and false if it is a file (indicating the user's final choice). If any\nargument's value is null, DirSelect returns null.\nUsage\nUse DirSelect in the SelectionChanged event to find out what the user chose. When the user's\nselection is a drive or directory, use the selection as a new directory specification for DirList.\nExamples\nThe following script for the SelectionChanged event for the ListBox lb_FileList calls\nDirSelect to test whether the user's selection is a file. If not, the script joins the directory\nname with the file pattern, and calls DirList to populate the ListBox and display the current\ndrive and directory in the StaticText st_FilePath. If the current selection is a file, other code\nprocesses the file name:\nstring ls_filename, ls_filespec = \"*.TXT\"\n \nIF lb_FileList.DirSelect(ls_filename) THEN\n    //If ls_filename is not a file,\n    //append directory to ls_filespec.\n    ls_filename = ls_filename + ls_filespec\n    lb_filelist.DirList(ls_filename, &\n"}
{"page": 549, "text": "Statements, Events, and Functions\nPage 549\n      16400, st_FilePath)\nELSE\n    ... //Process the file.\nEND IF\nSee also\nDirList\nGetFolder\n2.4.143 Disable\nDescription\nDisables an item on a menu. The menu item is dimmed (its color is changed to the user's\ndisabled text color, usually gray), and the user cannot select it.\nApplies to\nMenu objects\nSyntax\nmenuname.Disable ( )\nTable 2.530:\nArgument\nDescription\nmenuname\nThe name of the menu selection you want to deactivate (disable)\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If menuname is null, Disable returns null.\nEquivalent syntax\nSetting the menu's Enabled property is the same as calling Disable.\nmenuname.Enabled = false\nThis statement:\nm_appl.m_edit.Enabled = FALSE\nis equivalent to:\nm_appl.m_edit.Disable()\nExamples\nThis statement disables the m_edit menu item on the menu m_appl:\nm_appl.m_edit.Disable()\nSee also\nEnable\n"}
{"page": 550, "text": "Statements, Events, and Functions\nPage 550\n2.4.144 DisableCommit\nDescription\nDeclares that a component's transaction updates are inconsistent and cannot be committed in\ntheir present state.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.DisableCommit (  )\nTable 2.531:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nThe DisableCommit function indicates that the current transaction cannot be committed\nbecause the component's work has not been completed; the instance remains active after the\ncurrent method returns.\nExamples\nThe following example shows the use of the DisableCommit in a component method that\nperforms database updates:\n// Instance variables:\n// DataStore ids_datastore\n// TransactionServer ts\nInteger li_rc\nlong ll_rv\n \nli_rc = this.GetContextService(\"TransactionServer\", &\n    ts)\nIF li_rc <> 1 THEN\n    // handle the error\nEND IF\n...\nll_rv = ids_datastore.Update()\n \nIF ll_rv = 1 THEN\n    ts.EnableCommit()\nELSE\n    ts.DisableCommit()\nEND IF\nSee also\nEnableCommit\nIsInTransaction (obsolete)\n"}
{"page": 551, "text": "Statements, Events, and Functions\nPage 551\nIsTransactionAborted (obsolete)\nSetAbort\nSetComplete\nWhich\n2.4.145 DisconnectObject\nDescription\nReleases any object that is connected to the specified OLEObject variable.\nApplies to\nOLEObject objects\nSyntax\noleobject.DisconnectObject ( )\nTable 2.532:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable that you want to disconnect from\nan OLE object. You cannot specify an OLEObject that is the Object\nproperty of an OLE control.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Invalid call: the argument is the Object property of a control\n-9 -- Other error\nIf oleobject is null, DisconnectObject returns null.\nUsage\nThe OLEObject variable is used for OLE automation, in which the PowerBuilder application\nasks the server application to manipulate the OLE object programmatically.\nFor more information about OLE automation, see ConnectToObject.\nExamples\nThis example creates an OLEObject variable and connects it to a new Excel object; then after\nsome unspecified code, it disconnects:\ninteger result\nOLEObject myoleobject\n \nmyoleobject = CREATE OLEObject\nresult = myoleobject.ConnectToNewObject( &\n    \"excel.application\")\n. . .\n"}
{"page": 552, "text": "Statements, Events, and Functions\nPage 552\nresult = myoleobject.DisconnectObject()\nSee also\nConnectToObject\nConnectToNewObject\n2.4.146 DisconnectServer\nDescription\nDisconnects a client application from a server application.\nApplies to\nConnection objects\nSyntax\nconnection.DisconnectServer ( )\nTable 2.533:\nArgument\nDescription\nconnection\nThe name of the Connection object used to establish the connection you\nwant to delete\nReturn value\nLong.\nReturns 0 if it succeeds and one of the following values if an error occurs:\n50 -- Distributed service error\n52 -- Distributed communications error\n53 -- Requested server not active\n54 -- Server not accepting requests\n55 -- Request terminated abnormally\n56 -- Response to request incomplete\n57 -- Not connected\n62 -- Server busy\nUsage\nAfter disconnecting from the server application, the client application needs to destroy the\nConnection object.\nDisconnectServer causes all remote objects and proxy objects created for the client\nconnection to be destroyed.\nExamples\nIn this example, the client application disconnects from the server application using the\nConnection object myconnect:\n"}
{"page": 553, "text": "Statements, Events, and Functions\nPage 553\nmyconnect.DisconnectServer()\ndestroy myconnect\nSee also\nConnectToServer (obsolete)\n2.4.147 Double\nDescription\nConverts a string to a double or obtains a double value that is stored in a blob.\nSyntax\nDouble ( stringorblob )\nTable 2.534:\nArgument\nDescription\nstringorblob\nA string whose value you want returned as a double or a blob in which\nthe first value is the double value. The rest of the contents of the blob is\nignored. Stringorblob can also be an Any variable containing a double or\nblob.\nReturn value\nDouble.\nReturns the contents of stringorblob as a double. If stringorblob is not a valid PowerScript\nnumber or if it contains a non-numeric datatype, Double returns 0. If stringorblob is null,\nDouble returns null.\nUsage\nTo distinguish between a string whose value is the number 0 and a string whose value is not a\nnumber, use the IsNumber function before calling the Double function.\nExamples\nThis statement returns 24.372 as a double:\nDouble(\"24.372\")\nThis statement returns the contents of the SingleLineEdit sle_distance as a double:\nDouble(sle_distance.Text)\nAfter assigning blob data from the database to lb_blob, this example obtains the double value\nstored at position 20 in the blob (the length you specify for BlobMid must be at least as long\nas the value but can be longer):\ndouble lb_num\nlb_num = Double(BlobMid(lb_blob, 20, 40))\nFor an example of assigning and extracting values from a blob, see Real.\nSee also\n"}
{"page": 554, "text": "Statements, Events, and Functions\nPage 554\nDec\nInteger\nLong\nReal\n2.4.148 DoVerb\nDescription\nRequests the OLE server application to execute the specified verb for the OLE object in an\nOLE control or OLE DWObject.\nApplies to\nOLE controls and OLE DWObjects (objects within a DataWindow object that is within a\nDataWindow control)\nSyntax\nobjectref.DoVerb ( verb )\nTable 2.535:\nArgument\nDescription\nobjectref\nThe name of the OLE control or the fully qualified name of a OLE\nDWObject within a DataWindow control for which you want to execute a\nverb. The fully qualified name for a DWObject has this syntax:\ndwcontrol.Object.dwobjectname\nverb\nAn integer identifying a verb known to the OLE server application. Verbs\nare operations that the server can perform on the OLE object. Check the\ndocumentation for the server's OLE implementation to find out what\nverbs it supports.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following values if an error occurs:\n-1 -- Container is empty\n-2 -- Invalid verb for object\n-3 -- Verb not implemented by object\n-4 -- No verbs supported by object\n-5 -- Object cannot execute verb now\n-9 -- Other error\nIf any argument's value is null, DoVerb returns null.\nExamples\n"}
{"page": 555, "text": "Statements, Events, and Functions\nPage 555\nThis example executes verb 7 for the object in the OLE control ole_1:\ninteger result\nresult = ole_1.DoVerb(7)\nThis example executes verb 7 for the object in the OLE DWObject ole_graph:\ninteger result\nresult = dw_1.Object.ole_graph.DoVerb(7)\nSee also\nActivate\nOLEActivate method for DataWindows in Section 9.110, \u201cOLEActivate\u201d in DataWindow\nReference.\nSelectObject\n2.4.149 Drag\nDescription\nStarts or ends the dragging of a control.\nApplies to\nAll controls except drawing objects (Lines, Ovals, Rectangles, and Rounded Rectangles)\nSyntax\ncontrol.Drag ( dragmode )\nTable 2.536:\nArgument\nDescription\ncontrol\nThe name of the control you want to drag or stop dragging\ndragmode\nA value of the DragMode datatype indicating the action you want to take\non control:\n\u2022 Begin! -- Put control in drag mode\n\u2022 Cancel! -- Stop dragging control but do not cause a DragDrop event\n\u2022 End! -- Stop dragging control and if control is over a target object,\ncause a DragDrop event\nReturn value\nInteger.\nFor all controls except OLE controls, returns 1 if it succeeds and -1 if you try to nest drag\nevents or try to cancel the drag when control is not in drag mode. The return value is usually\nnot used.\nFor OLE controls, returns the following values:\n2 -- Object was moved\n"}
{"page": 556, "text": "Statements, Events, and Functions\nPage 556\n1 -- Drag was canceled\n0 -- Drag succeeded\n-1 -- Control is empty\n-9 -- Unspecified error\nIf any argument's value is null, Drag returns null.\nUsage\nTo see the list of draggable controls, open the Browser. All the objects in the hierarchy below\ndragobject are draggable.\nIf you set the control's DragAuto property to true, PowerBuilder automatically puts the\ncontrol in drag mode when the user clicks it. The user must hold the mouse button down to\ndrag.\nWhen you use Drag(Begin!) in a control's Clicked event to manually put the control in drag\nmode, the user can drag the control by moving the mouse without holding down the mouse\nbutton. Clicking the left mouse button ends the drag. CANCEL! and END! are required only\nif you want to end the drag without requiring the user to click the left mouse button.\nDragging DataWindow controls\nThe Clicked event of a DataWindow control occurs when the user presses the\nmouse button, not when the mouse button is released. If you place Drag(Begin!) in\na DataWindow control's Clicked event, releasing the mouse button ends the drag.\nTo achieve the same behavior as with other controls, define a user-defined event for\nthe DataWindow control called lbuttonup and map it to the pbm_lbuttonup event ID.\nThen place the following code in the lbuttonup event script (ib_dragflag is a boolean\ninstance variable):\nIF NOT ib_dragflag THEN\n   this.Drag(Begin!)\n   ib_dragflag = TRUE\nELSE\n   ib_dragflag = FALSE\nEND IF\nTo make something happen when the user drags a control onto a target object, write\nscripts for one or more of the target's drag events (DragDrop, DragEnter, DragLeave, and\nDragWithin).\nExamples\nThis statement puts sle_emp into drag mode:\nsle_emp.Drag(Begin!)\nSee also\nDraggedObject (obsolete)\n2.4.150 DraggedObject (obsolete)\nDescription\n"}
{"page": 557, "text": "Statements, Events, and Functions\nPage 557\nReturns a reference to the control that triggered a drag event.\nObsolete function\nYou no longer need to call the DraggedObject function in a drag event. Use the\nevent's source argument instead.\nSyntax\nDraggedObject ( )\nReturn value\nDragObject, a special datatype that includes all draggable controls (all the controls but no\ndrawing objects). Returns a reference to the control that is currently being dragged.\nNo control\nIf no control is being dragged, an execution error message is displayed.\nUsage\nCall DraggedObject in a drag event for the target object. The drag events are DragDrop,\nDragEnter, DragLeave, and DragWithin. Use TypeOf to obtain the datatype of the control.\nTo access the properties of the control, you can assign the DragObject reference to a variable\nof that control's datatype (see the example).\nExamples\nThese statements set which_control equal to the datatype of the control that is currently being\ndragged, and then set ls_text_value to the text property of the dragged control:\nSingleLineEdit sle_which\nCommandButton cb_which\nstring ls_text_value\nDragObject which_control\n \nwhich_control = DraggedObject()\n \nCHOOSE CASE TypeOf(which_control)\n \nCASE CommandButton!\n    cb_which = which_control\n    ls_text_value = cb_which.Text\nCASE SingleLineEdit!\n    sle_which = which_control\n    ls_text_value = sle_which.Text\nEND CHOOSE\nSee also\nDrag\nTypeOf\n2.4.151 Draw\nDescription\n"}
{"page": 558, "text": "Statements, Events, and Functions\nPage 558\nDraws a picture control at a specified location in the current window.\nApplies to\nPicture controls\nSyntax\npicture.Draw ( xlocation, ylocation )\nTable 2.537:\nArgument\nDescription\npicture\nThe name of the picture control you want to draw in the current window\nxlocation\nThe x coordinate of the location (in PowerBuilder units) at which you\nwant to draw the picture\nylocation\nThe y coordinate of the location (in PowerBuilder units) at which you\nwant to draw the picture\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Draw returns\nnull. The return value is usually not used.\nUsage\nUsing the Draw function is faster and produces less flicker than successively changing the X\nproperty of a picture. This is because the Draw function draws directly on the window rather\nthan recreating a small window with the picture in it for each change. Therefore, use Draw to\ndraw pictures in animation.\nTo create animation, you can place a picture outside the visible portion of the window and\nthen use the Draw function to draw it at different locations in the window. However, the\nimage remains at all the positions where you draw it. If you change the position by small\nincrements, each new drawing of the picture covers up most of the previous image.\nUsing Draw does not change the position of the picture control -- it just displays the control's\nimage at the specified location. Use the Move function to actually change the position of the\ncontrol.\nExamples\nThis statement draws the bitmap p_Train at the location specified by the X and Y coordinates\n100 and 200:\np_Train.Draw(100, 200)\nThese statements draw the bitmap p_Train in many different locations so it appears to move\nfrom left to right across the window:\ninteger horizontal\nFOR horizontal = 1 TO 2000 STEP 8\n    p_Train.Draw(horizontal, 100)\nNEXT\n"}
{"page": 559, "text": "Statements, Events, and Functions\nPage 559\nSee also\nMove\n2.4.152 EditLabel\nPut a label in a ListView or TreeView control into edit mode.\nTable 2.538:\nTo enable editing of a label in a\nUse\nListView control\nSyntax 1\nTreeView control\nSyntax 2\n2.4.152.1 Syntax 1: For editing a label in a ListView\nDescription\nPuts a label in a ListView into edit mode.\nApplies to\nListView controls\nSyntax\nlistviewname.EditLabel ( index )\nTable 2.539:\nArgument\nDescription\nlistviewname\nThe ListView control in which you want to enable label editing\nindex\nThe index of the ListView item to be edited\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nThe EditLabels property for the ListView must be set to true to enable editing of labels.\nWhen this property is true, calling the EditLabel function sets focus on the item and enables\nediting. To disable editing when the user has finished editing the label, set the EditLabels\nproperty to false in the EndLabelEdit event.\nIf the EditLabels property is set to false, the EditLabel function does not enable editing.\nExamples\nThis example allows the user to edit the label of the first selected item in the ListView control\nlv_1:\ninteger li_selected\nli_selected = lv_1.SelectedIndex()\n"}
{"page": 560, "text": "Statements, Events, and Functions\nPage 560\nlv_1.EditLabels = TRUElv_1.EditLabel(li_selected)\nSee also\nFindItem\n2.4.152.2 Syntax 2: For editing a label in a TreeView\nDescription\nPuts a label in a TreeView into edit mode.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.EditLabel ( itemhandle )\nTable 2.540:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to enable label editing\nitemhandle\nThe handle of the item to be edited\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nThe EditLabels property for the TreeView must be set to true to enable editing of labels.\nWhen this property is true, calling the EditLabel function sets focus on the item and enables\nediting. To disable editing when the user has finished editing the label, set the EditLabels\nproperty to false in the EndLabelEdit event.\nIf the EditLabels property is set to false, the EditLabel function does not enable editing.\nExamples\nThis example allows the user to edit the label of the current TreeView item:\nlong ll_tvi\nll_tvi = tv_list.FindItem(CurrentTreeItem!, 0)\ntv_list.EditLabels = TRUE\ntv_list.EditLabel(ll_tvi)\nSee also\nFindItem\n2.4.153 Enable\nDescription\nEnables an item on a menu so a user can select it.\n"}
{"page": 561, "text": "Statements, Events, and Functions\nPage 561\nApplies to\nMenu objects\nSyntax\nmenuname.Enable ( )\nTable 2.541:\nArgument\nDescription\nmenuname\nThe name of the menu selection you want to enable\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If menuname is null, Enable returns null.\nUsage\nEnabling a menu item changes its color to the active color (not the dimmed, or disabled,\ncolor). Calling Enable sets the item's Enabled property to true.\nEquivalent syntax\nSetting the menu's Enabled property is the same as calling Enable.\nmenuname.Enabled = TRUE\nThis statement:\nmenu_appl.m_delete.Enabled = TRUE\nis equivalent to:\nmenu_appl.m_delete.Enable()\nExamples\nThis statement enables the m_delete menu selection on the menu m_appl:\nm_appl.m_delete.Enable()\nSee also\nDisable\n2.4.154 EnableCommit\nDescription\nDeclares that a component's work may be incomplete but its transaction updates are\nconsistent and can be committed.\nApplies to\nTransactionServer objects\nSyntax\n"}
{"page": 562, "text": "Statements, Events, and Functions\nPage 562\ntransactionserver.EnableCommit (  )\nTable 2.542:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nThe EnableCommit function indicates that the component should not be deactivated after the\ncurrent method invocation. However, if the component instance is deactivated, the current\ntransaction can be committed.\nExamples\nThe following example shows the use of EnableCommit in a component method that\nperforms database updates:\n// Instance variables:\n// DataStore ids_datastore\n// TransactionServer ts\nInteger li_rc\nlong ll_rv\n \nli_rc = this.GetContextService(\"TransactionServer\", ts)\nIF li_rc <> 1 THEN\n      // handle the error\nEND IF\n...\nll_rv = ids_datastore.Update()\nIF ll_rv = 1 THEN\n      ts.EnableCommit()\nELSE\n      ts.DisableCommit()\nEND IF\nSee also\nDisableCommit\nIsInTransaction (obsolete)\nIsTransactionAborted (obsolete)\nLookup (obsolete)\nSetAbort\nSetComplete\nWhich\n2.4.155 EntryList\nDescription\n"}
{"page": 563, "text": "Statements, Events, and Functions\nPage 563\nProvides a list of the top-level entries included in a trace tree model.\nApplies to\nTraceTree objects\nSyntax\ninstancename.EntryList ( list )\nTable 2.543:\nArgument\nDescription\ninstancename\nInstance name of the TraceTree object.\nlist\nAn unbounded array variable of datatype TraceTreeNode in which\nEntryList stores a TraceTreeNode object for each top-level entry in the\ntrace tree model. This argument is passed by reference.\nReturn value\nErrorReturn. Returns the following values:\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- The function failed because no model exists\nUsage\nYou use the EntryList function to extract a list of the top-level entries or nodes included\nin a trace tree model. Each top-level entry listed is defined as a TraceTreeNode object and\nprovides the type of activity represented by that node.\nYou must have previously created the trace tree model from a trace file using the BuildModel\nfunction.\nExamples\nThis example gets the top-level entries or nodes in a trace tree model and then loops\nthrough the list extracting information about each node. The of_dumpnode function takes a\nTraceTreeNode object and a level as arguments and returns a string containing information\nabout the node:\nTraceTree ltct_model\nTraceTreeNode ltctn_list[], ltctn_node\nLong ll_index,ll_limit\nString ls_line\nltct_model = CREATE TraceTree\nltct_model.BuildModel()\nltct_model.EntryList(ltctn_list)\nll_limit = UpperBound(ltctn_list)\nFOR ll_index = 1 TO ll_limit\n   ltctn_node = ltctn_list[ll_index]\n   ls_line += of_dumpnode(ltctn_node,0)\nNEXT\n...\nSee also\n"}
{"page": 564, "text": "Statements, Events, and Functions\nPage 564\nBuildModel\n2.4.156 EvaluateJavascriptAsync\nDescription\nExecutes JavaScript asynchronously. This function triggers the EvaluateJavascriptFinished\nevent.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.EvaluateJavascriptAsync ( string script )\nTable 2.544:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nscript\nThe JavaScript to be evaluated.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nBasic and digest authentications\nWhen the web page to be accessed needs basic or digest authentication, the WebBrowser\ncontrol will automatically display a login window for the user to enter the user name and\npassword for authentication. If the authentication fails, this window will display again until\nthe authentication is successful or the authentication operation is cancelled.\nExamples\nString ls_JS\nInteger li_Return\nls_JS = \"window.alert('This is Appeon PowerBuilder!');\"\nli_Return = wb_1.EvaluateJavascriptAsync(ls_JS)\nSee also\nCancelDownload\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\nPrintAsPDF\n"}
{"page": 565, "text": "Statements, Events, and Functions\nPage 565\nPauseDownload\nRegisterEvent\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.157 EvaluateJavascriptSync\nDescription\nExecutes JavaScript synchronously.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.EvaluateJavascriptSync (string script{, ref string result{, ref string\n error}})\nTable 2.545:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nscript\nThe JavaScript to be evaluated. The JavaScript cannot have statements\nthat show dialog boxes. If a dialog box must be displayed in JavaScript,\nthe script must be executed asynchronously.\nIf there are multiple JavaScript statements, only the last JavaScript\nstatement will have its result returned.\nresult\nThe result of script execution. The execution result is represented in a\nJSON string. The supported JavaScript data types are bool, int, double,\nstring, date, array. When the above types are mapped to the PowerBuilder\ndata types, they are boolean, integer, double, string, datetime, array.\nFor example,\n{\"type\":\"double\",\"value\":1585620350123};//returns a double-type value\n{\"type\":\"string\",\"value\":\"12d6_1585674123456_74563\"};//returns a\nstring-type value\nerror\nThe error information if an error occurs during execution. The error\ninformation is represented in a JSON string. For example,\n{\"type\":\"error\",\"value\":\"Uncaught TypeError: Cannot read property\n'style' \"}\nReturn value\n"}
{"page": 566, "text": "Statements, Events, and Functions\nPage 566\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThe following example executes a JavaScript and gets the current time (double type):\nString ls_JS, ls_Result, ls_Error\nInteger li_Return\nls_JS = \"(new Date()).getTime();\"\nli_Return = wb_1.EvaluateJavascriptSync(ls_JS, ls_Result)\nThe following example executes a JavaScript and returns an array:\nString ls_JS, ls_Result, ls_Error\nInteger li_Return\nls_JS = \"new Array(123, new Date(), 'Appeon', 2 > 1)\"\nli_Return = wb_1.EvaluateJavascriptSync(ls_JS, ls_Result, ls_Error)\nThe following example executes a JavaScript and parses the result (a JSON string) via the\nJSONParser object:\nString ls_JS, ls_Result, ls_Error, ls_Type\nInteger li_Return\nDateTime ldt_DateTime\nJsonParser lnv_JsonParser\nLong ll_RootObject\nlnv_JsonParser = Create JsonParser\nls_JS = \"function getNow(){return (new Date());} getNow();\"\nli_Return = wb_1.EvaluateJavascriptSync(ls_JS, ls_Result, ls_Error)\nIf li_Return = 1 Then\n lnv_JsonParser.LoadString(ls_Result)\n ll_RootObject = lnv_JsonParser.GetRootItem()\n ls_Type = lnv_JsonParser.GetItemString(ll_RootObject, \"type\")\n ldt_DateTime = lnv_JsonParser.GetItemDateTime(ll_RootObject, \"value\")\nEnd If\nIf IsValid(lnv_JsonParser) Then Destroy (lnv_JsonParser)\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nGetSource\nGoBack\nGoForward\nNavigate\nPrintAsPDF\nPauseDownload\nRegisterEvent\n"}
{"page": 567, "text": "Statements, Events, and Functions\nPage 567\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.158 ExecRemote\nAsks a DDE server application to execute the specified command.\nTable 2.546:\nTo send\nUse\nA single command to a DDE server application (a cold link)\nSyntax 1\nA command to a DDE server application after you have opened a channel\n(a warm link)\nSyntax 2\n2.4.158.1 Syntax 1: For sending single commands\nDescription\nSends a single command to a DDE server application, called a cold link.\nSyntax\nExecRemote ( command, applname, topicname )\nTable 2.547:\nArgument\nDescription\ncommand\nA string whose value is the command you want a DDE server application\nto execute. To determine the correct command format, see the\ndocumentation for the server application.\napplname\nA string whose value is the DDE name of the server application.\ntopicname\nA string identifying the data or the instance of the DDE application you\nwant to use with the command. In Microsoft Excel, for example, the topic\nname could be system or the name of an open spreadsheet.\nReturn value\nInteger.\nReturns 1 if it succeeds. If it fails, it returns a negative integer. Possible values are:\n-1 -- Link was not started\n-2 -- Request denied\n-3 -- Could not terminate server\nIf any argument's value is null, ExecRemote returns null.\n"}
{"page": 568, "text": "Statements, Events, and Functions\nPage 568\nUsage\nThe DDE server application must already be running when you call a DDE function. Use the\nRun function to start the application if necessary.\nThe ExecRemote function allows you to start a cold link or use a warm link between the\nPowerBuilder client application and the DDE server application.\nA cold link is a single DDE command and is not associated with a DDE channel. Each time\nyou call ExecRemote without opening a channel (Syntax 1), Windows polls all running\napplications to find one that acknowledges the request. The is also true for the related\nfunctions GetRemote and SetRemote.\nA warm link is associated with a DDE channel (see Syntax 2).\nA DDE hot link, which enables automatic updating of data in the PowerBuilder client\napplication, involves other functions. For more information, see the StartHotLink function.\nExamples\nThis statement asks Microsoft Excel to save the active spreadsheet as file REGION.XLS. A\nchannel is not open, so the function arguments specify the application and topic (the name of\nthe spreadsheet):\nExecRemote(\"[Save()]\", \"Excel\", \"REGION.XLS\")\nSee also\nCloseChannel\nGetRemote\nOpenChannel\nSetRemote\nStartHotLink\n2.4.158.2 Syntax 2: For commands over an opened channel\nDescription\nSends a command to a DDE server application when you have already called OpenChannel\nand established a warm link with the server.\nSyntax\nExecRemote ( command, handle {, windowhandle } )\nTable 2.548:\nArgument\nDescription\ncommand\nA string whose value is the command you want a DDE server application\nto execute. The format of the command depends on the DDE application\nyou want to execute the command.\nhandle\nA long that identifies the channel to the DDE server application. The\nOpenChannel function returns handle when you call it to open a DDE\nchannel.\n"}
{"page": 569, "text": "Statements, Events, and Functions\nPage 569\nArgument\nDescription\nwindowhandle\n(optional)\nThe handle to the window that you want to act as the DDE client. Specify\nthis parameter to control which window is acting as the DDE client\nwhen you have more than one open window. If you do not specify\nwindowhandle, the active window acts as the DDE client.\nReturn value\nInteger.\nReturns 1 if it succeeds. If an error occurs, ExecRemote returns a negative integer. Possible\nvalues are:\n-1 -- Link was not started\n-2 -- Request denied\n-9 -- Handle is null\nUsage\nThe DDE server application must already be running when you call a DDE function. Use the\nRun function to start the application if necessary.\nThe ExecRemote function allows you start a cold link or use warm link between the\nPowerBuilder client application and the DDE server application.\nA cold link is a single DDE command and is not associated with a DDE channel (see Syntax\n1).\nA warm link is associated with a DDE channel. You establish a channel for the DDE\nconversation with OpenChannel before sending commands with this syntax of ExecRemote.\nA warm link is useful when you need to send several commands to the DDE server\napplication. Because the channel is open, ExecRemote does not need to have Windows poll\nall running applications again. After you have called ExecRemote or the related functions\nGetRemote or SetRemote, and finished the work with the DDE server, call CloseChannel to\nend the DDE conversation.\nA DDE hot link, which enables automatic updating of data in the PowerBuilder client\napplication, involves other functions. For more information, see the StartHotLink function.\nExamples\nThis excerpt from a script asks the DDE channel to Microsoft Excel to save the active\nspreadsheet as file REGION.XLS. The OpenChannel function names the server application\nand the topic, so ExecRemote only needs to specify the channel handle. The script is\nassociated with a button on a window, whose handle is specified as the last argument of\nOpenChannel:\nlong handle\n \nhandle = OpenChannel(\"Excel\", \"REGION.XLS\", &\n      Handle(Parent))\n. . . // Some processing\nExecRemote(\"[Save]\", handle)\nCloseChannel(handle, Handle(Parent))\nSee also\n"}
{"page": 570, "text": "Statements, Events, and Functions\nPage 570\nCloseChannel\nGetRemote\nOpenChannel\nSetRemote\n2.4.159 Exp\nDescription\nRaises e to the specified power.\nSyntax\nExp ( n )\nTable 2.549:\nArgument\nDescription\nn\nThe power to which you want to raise e (2.71828)\nReturn value\nDouble.\nReturns e raised to the power n. If n is null, Exp returns null.\nInverse of Exp\nThe inverse of the Exp function is the Log function.\nExamples\nThis statement returns 7.38905609893065.\nExp(2)\nThese statements convert a natural logarithm (base e) back to a regular number. When\nexecuted, Exp sets value to 200:\ndouble value, x = log(200)\nvalue = Exp(x)\nSee also\nLog\nLogTen\nExp method for DataWindows in Section 2.4.35, \u201cExp\u201d in DataWindow Reference.\n2.4.160 ExpandAll\nDescription\nRecursively expands a specified item.\n"}
{"page": 571, "text": "Statements, Events, and Functions\nPage 571\nApplies to\nTreeView controls\nSyntax\ntreeviewname.ExpandAll ( itemhandle )\nTable 2.550:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to expand an item and all the\nsubordinate items in its hierarchy\nitemhandle\nThe handle of the item you want to expand\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nTo expand all levels in a TreeViewItem, use the ExpandAll function for the RootTreeItem.\nExamples\nThis example expands all levels of a TreeView control:\nlong ll_tvi\nll_tvi = tv_list.FindItem(RootTreeItem! , 0)\ntv_list.ExpandAll(ll_tvi)\nSee also\nCollapseItem\nExpandItem\nFindItem\n2.4.161 ExpandItem\nDescription\nExpands a specified item.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.ExpandItem ( itemhandle )\nTable 2.551:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to expand an item\n"}
{"page": 572, "text": "Statements, Events, and Functions\nPage 572\nArgument\nDescription\nitemhandle\nThe handle of the item you want to expand\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nExpandItem expands only a single item. To expand a specified item including its children,\nuse ExpandAll.\nExamples\nThis example expands the current level of a TreeView:\nlong ll_tvi\nll_tvi = tv_list.FindItem(CurrentTreeItem! , 0)\ntv_list.ExpandItem(ll_tvi)\nSee also\nCollapseItem\nExpandAll\nFindItem\n2.4.162 ExportJSON\nDescription\nSaves the RibbonBar content to a JSON string. ECMA-404 JSON standard is supported.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.ExportJSON ( )\nTable 2.552:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nReturn value\nString.\nReturns the JSON string if it succeeds and an empty string \"\" if an error occurs.\nExamples\nstring ls_Return\n"}
{"page": 573, "text": "Statements, Events, and Functions\nPage 573\nls_Return = rbb_1.ExportJson()\nSee also\nExportXML\nExportToJSONFile\nExportToXMLFile\nImportJSON\nImportXML\nImportFromJSONFile\nImportFromXMLFile\n2.4.163 ExportXML\nDescription\nSaves the RibbonBar content to an XML string. XML version 1.0 is supported.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.ExportXML ( )\nTable 2.553:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nReturn value\nString.\nReturns the XML string if it succeeds and an empty string \"\" if an error occurs.\nExamples\nstring ls_Return\nls_Return = rbb_1.ExportXML()\nSee also\nExportJSON\nExportToJSONFile\nExportToXMLFile\nImportJSON\nImportXML\nImportFromJSONFile\nImportFromXMLFile\n"}
{"page": 574, "text": "Statements, Events, and Functions\nPage 574\n2.4.164 ExportToJSONFile\nDescription\nSaves the RibbonBar content to a JSON file. The ECMA-404 JSON standard is supported.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.ExportToJSONFile ( String FileName {, Encoding encoding })\nTable 2.554:\nArgument\nDescription\nFileName\nThe file path and file name where the JSON file will be saved.\nencoding\n(optional)\nCharacter encoding of the file to which the data is saved. If you do not\nspecify an encoding parameter, the file is saved in UTF8 format.\nValues are:\n\u2022 EncodingANSI!\n\u2022 EncodingUTF8! (default)\n\u2022 EncodingUTF16LE!\n\u2022 EncodingUTF16BE!\nReturn value\nInteger.\n1 - Successful.\n-1 - An error occurs.\n-2 - Failed to load library.\n-3 - The specified file does not exist.\nIf any argument's value is null, returns null.\nExamples\nInteger li_return\nli_return = rbb_1.ExportToJSONFile (\"Export1.json\", EncodingUTF8!)\nSee also\nExportJSON\nExportXML\nExportToXMLFile\nImportJSON\nImportXML\n"}
{"page": 575, "text": "Statements, Events, and Functions\nPage 575\nImportFromJSONFile\nImportFromXMLFile\n2.4.165 ExportToXMLFile\nDescription\nSaves the RibbonBar content to an XML file. The XML version 1.0 is supported.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.ExportToXMLFile ( String FileName {, Encoding encoding })\nTable 2.555:\nArgument\nDescription\nFileName\nThe file path and file name where the XML file will be saved.\nencoding\n(optional)\nCharacter encoding of the file to which the data is saved. If you do not\nspecify an encoding parameter, the file is saved in UTF8 format. If you\nspecify EncodingANSI! in the Japanese OS, EncodingUTF8! will be used\ninstead of EncodingANSI! (as the ISO-2022-JP encoding used by ANSI\nin the Japanese OS is unsupported).\nValues are:\n\u2022 EncodingANSI!\n\u2022 EncodingUTF8! (default)\n\u2022 EncodingUTF16LE!\n\u2022 EncodingUTF16BE!\nReturn value\nInteger.\n1 - Successful.\n-1 - An error occurs.\n-2 - Failed to load library.\n-3 - The specified file does not exist.\nIf any argument's value is null, returns null.\nExamples\nInteger li_return\nli_return = rbb_1.ExportToXMLFile (\"Export2.xml\", EncodingUTF8!)\nSee also\n"}
{"page": 576, "text": "Statements, Events, and Functions\nPage 576\nExportJSON\nExportXML\nExportToJSONFile\nImportJSON\nImportXML\nImportFromJSONFile\nImportFromXMLFile\n2.4.166 Extract\nDescription\nExtracts the compressed archive or data stream.\nApplies to\nExtractorObject objects\nSyntax 1: Extracts the compressed archive\nobjectname.Extract ( string source, string target )\nSyntax 2: Extracts the specified files (or folders) from the specified package\nobjectname.Extract ( string source, string items[], string target )\nSyntax 3: Extracts the specified file from the compressed package into a blob\nobjectname.Extract ( string source, string item, ref blob target )\nSyntax 4: Extracts the compressed blob data\nobjectname.Extract ( blob source, ref blob target {, ArchiveFormat format })\nTable 2.556:\nArgument\nDescription\nobjectname\nThe name of the ExtractorObject object.\nsource\nA string whose value is the full directory of the compressed archive.\nOr a blob whose value is the compressed data stream.\nitems[]\nThe specified files (or folders) to extract. The files (or folders) can be\nobtained through GetFilesList.\nIf you specify a single file in a subfolder, the method will create the\nwhole folder structure to the file on target.\nitem\nThe specified file to extract. You can only extract one file (cannot be\nmultiple files or a folder) into a blob.\ntarget\nA string whose value is the directory where the compressed archive will\nbe extracted. The existing files with the same name on target will be\noverwritten.\nOr a blob where the decompression results will be stored.\n"}
{"page": 577, "text": "Statements, Events, and Functions\nPage 577\nArgument\nDescription\nformat (optional) A value of the enumerated datatype ArchiveFormat specifying the format\nof the source file. Values are:\n\u2022 ArchiveFormatZIP!: zip file. This is the default value.\n\u2022 ArchiveFormat7Zip!: 7zip file. File size of 7zip file may not be\nobtained correctly during extraction.\n\u2022 ArchiveFormatRAR!: rar file.\n\u2022 ArchiveFormatGZip!: gzip format archive.\n\u2022 ArchiveFormatTAR!: tar format archive.\n\u2022 ArchiveFormatLZMA!: lzma format archive.\n\u2022 ArchiveFormatLZMA86!: lzma86 format archive.\nUsage\nThe Extract method determines the archive format according to the file extension; therefore,\nif the file extension has been changed manually (for example, from .rar to .zip), the Extract\nmethod will fail to extract the file and will return the error code -10.\nWhen extracting to a blob data, you can only extract one file (rather than a folder or multiple\nfiles) into a blob.\nReturn value\nInteger.\nReturns the following value. If any argument's value is null, the method returns null.\n1 -- Success\n-1 -- A general error occurred.\n-2 -- The password entered is illegal.\n-3 -- The operation is not supported for the source file format.\n-4 -- The task thread is aborted.\n-5 -- A task thread is currently running.\n-6 -- No password is entered. You must enter the password.\n-7 -- The password is incorrect.\n-8 -- Failed to get new memory when saving the decompressed file.\n-9 -- Failed to read the compressed file.\n-10 -- Unrecognized format or the encrypted file name option is used when compressing the\ndocument.\n-11 -- Access denied when extracting the archive.\n-12 -- The compressed file does not exist.\n"}
{"page": 578, "text": "Statements, Events, and Functions\nPage 578\n-13 -- The directory where the decompressed file will be saved does not exist.\n-14 -- Failed to extract the compressed file.\n-15 -- The file to be decompressed is not in the package.\n-16 -- The current operation does not support the folder decompression.\nExample 1\nThis example demonstrates how to extract a compressed package.\nExtractorObject lnv_extractor\nInteger li_return\nstring ls_source, ls_target\nls_source = \"D:\\testcom.7Z\"\nls_target = \"D:\\testextract\"\nlnv_extractor = Create ExtractorObject\nli_return = lnv_extractor.extract (ls_source, ls_target)\nExample 2\nThis example demonstrates how to compress and extract a blob data.\nCompressorObject lnv_compress\nExtractorObject lnv_extractor\nInteger  li_return\nblob lb_source, lb_target, lb_extract\nlb_source = blob (\"A123456\")\nlnv_compress = create CompressorObject\nlnv_extractor = create ExtractorObject\nli_return = lnv_compress.Compress (lb_source, lb_target, ArchiveFormat7Zip!)\nif li_return = 1 then\n    li_return = lnv_extractor.extract (lb_target, lb_extract, ArchiveFormat7Zip!)\nend if\nExample 3\nThis example extracts two files (test1.txt, test2.txt) and a folder (test_folder) from the\npackage.\nExtractorObject lnv_extractor\nstring ls_source, ls_password, ls_extractfiles[], ls_target\nlong ll_return\nlnv_extractor = create ExtractorObject\nls_source = \"E:\\Test.rar\"\nls_extractfiles[1] = \"test1.txt\"\nls_extractfiles[2] = \"test2.txt\"\n//Suppose a folder is specified to be extracted, then all \n//of the files contained in this folder will be extracted.\nls_extractfiles[3] = \"test_folder\"\nls_target = \"E:\\\"\n//Suppose the package requires a password\nlnv_extractor.Password = ls_password\nll_return = lnv_extractor.extract (ls_source, ls_extractfiles, ls_target)\nExample 4\nThis example extracts test1.txt from the package into a blob data. You can only extract one\nfile (not a folder or multiple files) into a blob.\nExtractorObject lnv_extractor\n"}
{"page": 579, "text": "Statements, Events, and Functions\nPage 579\nstring ls_source, ls_password, ls_extractfile\nlong ll_return\nblob blb_target\nlnv_extractor = create ExtractorObject\nls_source = \"E:\\Test.rar\"\nls_extractfile = \"test1.txt\"\n//Suppose the package requires a password\nlnv_extractor.Password = ls_password\n//Extract one file (cannot be multiple files or a folder) into a blob\nll_return = lnv_extractor.extract (ls_source, ls_extractfile, blb_target)\nSee also\nCancel\nGetFilesCount\nGetFilesList\n2.4.167 Fact\nDescription\nDetermines the factorial of a number.\nSyntax\nFact ( n )\nTable 2.557:\nArgument\nDescription\nn\nThe number for which you want the factorial\nReturn value\nDouble.\nReturns the factorial of n. If n is null, Fact returns null.\nExamples\nThis statement returns 24 (that is, 1 * 2 * 3 * 4):\nFact(4)\nBoth these statements return 1:\nFact(1)\n \nFact(0)\nSee also\nFact method for DataWindows in Section 2.4.36, \u201cFact\u201d in DataWindow Reference.\n2.4.168 FileClose\nDescription\n"}
{"page": 580, "text": "Statements, Events, and Functions\nPage 580\nCloses the file associated with the specified file number. The file number was assigned to the\nfile with the FileOpen function.\nSyntax\nFileClose ( file# )\nTable 2.558:\nArgument\nDescription\nfile#\nThe integer assigned to the file you want to close. The FileOpen function\nreturns the file number when it opens the file.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If file# is null, FileClose returns null.\nUsage\nThe file is saved in the encoding format in which it was opened.\nExamples\nThese statements open and then close the file EMPLOYEE.DAT. The variable li_FileNum\nstores the number assigned to the file when FileOpen opens the file. FileClose uses that\nnumber to close the file:\ninteger li_FileNum\nli_FileNum = FileOpen(\"EMPLOYEE.DAT\")\n. . . // Some processing\nFileClose(li_FileNum)\nSee also\nFileLength\nFileOpen\nFileReadEx\nFileWriteEx\n2.4.169 FileCopy\nDescription\nCopies one file to another, optionally overwriting the target file.\nSyntax\nFileCopy ( sourcefile, targetfile {, replace } )\nTable 2.559:\nArgument\nDescription\nsourcefile\nString for the name of the file you want to copy\ntargetfile\nString for the name of the file you are copying to\n"}
{"page": 581, "text": "Statements, Events, and Functions\nPage 581\nArgument\nDescription\nreplace(optional) Boolean specifying whether to replace the target file (true) or not (false)\nReturn value\nInteger.\nReturns values as follows:\n1 -- Success\n-1 -- Error opening sourcefile\n-2 -- Error writing targetfile\nUsage\nIf you do not specify a fully qualified path for sourcefile or for targetfile, the function works\nrelative to the current directory. If you do not specify the replace argument, the FileCopy\nfunction does not replace a file in the target directory that has the same name as the name you\nspecify in the targetfile argument (This is equivalent to setting the replace value to false).\nExamples\nThe following example copies a file from the current directory to a different directory and\nsaves the return value in a variable. It does not replace a file of the same name if one already\nexists in the target directory:\ninteger li_FileNum\nli_FileNum = FileCopy (\"jazz.gif\" , &\n   \"C:\\emusic\\jazz.gif\", FALSE)\nSee also\nFileMove\nGetCurrentDirectory\n2.4.170 FileDelete\nDescription\nDeletes the named file.\nSyntax\nFileDelete ( filename )\nTable 2.560:\nArgument\nDescription\nfilename\nA string whose value is the name of the file you want to delete\nReturn value\nBoolean.\nReturns true if it succeeds, false if an error occurs. If filename is null, FileDelete returns null.\n"}
{"page": 582, "text": "Statements, Events, and Functions\nPage 582\nExamples\nThese statements delete the file the user selected in the Open File window:\ninteger ret, value\nstring docname, named\n \nvalue = GetFileOpenName(\"Select File,\" &\n      docname, named, \"DOC\", &\n         \"Doc Files (*.DOC),*.DOC\")\n \nIF value = 1 THEN ret = MessageBox(\"Delete\", &\n      \"Delete file?\", Question!, OKCancel!)\nIF ret = 1 THEN FileDelete(docname)\nSee also\nFileExists\n2.4.171 FileEncoding\nDescription\nChecks the encoding of the specified file.\nSyntax\nFileEncoding ( filename )\nTable 2.561:\nArgument\nDescription\nfilename\nThe name of the file you want to test for encoding type\nReturn value\nA value of the enumerated datatype encoding. Values are:\nEncodingANSI!\nEncodingUTF8!\nEncodingUTF16LE!\nEncodingUTF16BE!\nIf filename does not exist, returns null.\nUsage\nUse this function to determine the encoding used in an external file before attempting to use it\nin a PowerBuilder application.\nExamples\nThe following example opens a file in stream mode and tests to determine whether it uses\nANSI encoding. If it does, it reads data from the file into a blob and uses the String function\nto convert the blob to a Unicode string:\nlong ll_filenum\ninteger li_bytes\n"}
{"page": 583, "text": "Statements, Events, and Functions\nPage 583\nstring ls_unicode\nblob  lb_ansi\nencoding eRet\nll_filenum = FileOpen(\"employee.dat\", StreamMode!, Read!, LockWrite!, Replace!)\n// test the file's encoding\neRet = FileEncoding(\"employee.dat\")\nif eRet = EncodingANSI! then\n   li_ bytes = FileReadEx(ll_filenum, lb_ansi)\n   ls_unicode = string(lb_ansi, EncodingANSI!)\nelse \n   li_ bytes = FileReadEx(ll_filenum, ls_unicode)\nend if\nFileClose(ll_filenum)\nSee also\nBlob\nFileClose\nFileOpen\nFileReadEx\nFileWriteEx\nString\n2.4.172 FileExists\nDescription\nReports whether the specified file exists.\nSyntax\nFileExists ( filename )\nTable 2.562:\nArgument\nDescription\nfilename\nA string whose value is the name of a file\nReturn value\nBoolean.\nReturns true if the file exists, false if it does not exist. If filename is null, FileExists returns\nnull.\nUsage\nIf filename is locked by another application, causing a sharing violation, FileExists also\nreturns false.\nExamples\nThis example determines if the file the user selected in the Save File window exists and, if so,\nasks the user if the file can be overwritten:\n"}
{"page": 584, "text": "Statements, Events, and Functions\nPage 584\nstring ls_docname, ls_named\ninteger li_ret\nboolean lb_exist\n \nGetFileSaveName(\"Select File,\" ls_docname, &\n      ls_named, \"pbl\", &\n         \"Doc Files (*.DOC),*.DOC\")\n \nlb_exist = FileExists(ls_docname)\nIF lb_exist THEN li_ret = MessageBox(\"Save\", &\n      \"OK to write over\" + ls_docname, &\n         Question!, YesNo!)\nSee also\nFileDelete\n2.4.173 FileLength\nDescription\nReports the length of a file whose size does not exceed 2GB in bytes.\nSyntax\nFileLength ( filename )\nTable 2.563:\nArgument\nDescription\nfilename\nA string whose value is the name of the file for which you want to know\nthe length. If filename is not on the current application library search\npath, you must specify the fully qualified name.\nReturn value\nLong.\nReturns the length in bytes of the file identified by filename. If the file does not exist,\nFileLength returns -1. If filename is null, FileLength returns null.\nUsage\nCall FileLength before or after you call FileOpen to check the length of a file before you call\nFileRead. The FileRead function can read a maximum of 32,765 bytes at a time. The length\nreturned by FileLength always includes the byte-order mark (BOM). For example, suppose\nthe hexadecimal display of the file SomeFile.txt is FF FE 54 00 68 00 69 00 73 00, then the\nfollowing statement returns 10,which includes the BOM:\nll_length = FileLength(\"SomeFile.txt\")\nFile security\nIf any security is set for the file (for example, if you are sharing the file on a network),\nyou must call FileLength before FileOpen or after FileClose. Otherwise, you get a\nsharing violation.\n"}
{"page": 585, "text": "Statements, Events, and Functions\nPage 585\nThe FileLength function cannot return the length of files whose size exceeds 2GB. Use\nFileLength64 to find the length of larger files.\nExamples\nThis statement returns the length of the file EMPLOYEE.DAT in the current directory:\nFileLength(\"EMPLOYEE.DAT\")\nThese statements determine the length of the EMP.TXT file in the EAST directory and open\nthe file:\nlong LengthA\ninteger li_FileNum\nLengthA = FileLength(\"C:\\EAST\\EMP.TXT\")\nli_FileNum = FileOpen(\"C:\\EAST\\EMP.TXT\", &\n      TextMode!, Read!, LockReadWrite!)\nThe examples for FileRead illustrate reading files of different lengths.\nSee also\nFileClose\nFileLength64\nFileOpen\nFileReadEx\nFileWriteEx\n2.4.174 FileLength64\nDescription\nReports the length of a file of any size in bytes.\nSyntax\nFileLength64 ( filename )\nTable 2.564:\nArgument\nDescription\nfilename\nA string whose value is the name of the file for which you want to know\nthe length. If filename is not on the current application library search\npath, you must specify the fully qualified name.\nReturn value\nLonglong.\nReturns the length in bytes of the file identified by filename. If the file does not exist,\nFileLength64 returns -1. If filename is null, FileLength64 returns null.\nUsage\nCall FileLength64 before or after you call FileOpen to check the length of a file before you\ncall FileRead. The FileRead function can read a maximum of 32,765 bytes at a time. Use the\nFileReadEx function to read longer files.\n"}
{"page": 586, "text": "Statements, Events, and Functions\nPage 586\nThe length returned by FileLength64 always includes the byte-order mark (BOM). For\nexample, suppose the hexadecimal display of the file SomeFile.txt is FF FE 54 00 68 00 69\n00 73 00, then the following statement returns 10,which includes the BOM:\nll_length = FileLength64(\"SomeFile.txt\")\nFile security\nIf any security is set for the file (for example, if you are sharing the file on a network),\nyou must call FileLength64 before FileOpen or after FileClose. Otherwise, you get a\nsharing violation.\nExamples\nThis statement returns the length of the file EMPLOYEE.DAT in the current directory:\nFileLength64(\"EMPLOYEE.DAT\")\nThese statements determine the length of the EMP.TXT file in the EAST directory and open\nthe file:\nlong LengthA\ninteger li_FileNum\nLengthA = FileLength64(\"C:\\EAST\\EMP.TXT\")\nli_FileNum = FileOpen(\"C:\\EAST\\EMP.TXT\", &\n      LineMode!, Read!, LockReadWrite!)\nThe examples for FileRead illustrate reading files of different lengths.\nSee also\nFileClose\nFileLength\nFileOpen\nFileReadEx\nFileWriteEx\n2.4.175 FileMove\nDescription\nMoves a file.\nSyntax\nFileMove ( sourcefile, targetfile )\nTable 2.565:\nArgument\nDescription\nsourcefile\nString for the name of the file you want to move\ntargetfile\nString for the name of the location you are moving the file\nReturn value\n"}
{"page": 587, "text": "Statements, Events, and Functions\nPage 587\nInteger.\nReturns values as follows:\n1 -- Success\n-1 -- Error opening sourcefile\n-2 -- Error writing targetfile\nUsage\nYou cannot write to a target file if a file with the same name already exists in the target\ndirectory. If you want to copy over a target file, you can use FileCopy and set the replace\nargument to true.\nExamples\nThis example moves a file from the current directory to a different directory and saves the\nreturn value in the li_FileNum variable:\ninteger li_FileNum\nli_FileNum = FileMove (\"june.csv\", &\n   \"H:/project/june2000.csv\" )\nSee also\nFileCopy\nGetCurrentDirectory\n2.4.176 FileOpen\nDescription\nOpens the specified file for reading or writing and assigns it a unique integer file number.\nYou use this integer to identify the file when you read, write, or close the file. The optional\narguments filemode, fileaccess, filelock, and writemode determine the mode in which the file\nis opened.\nSyntax\nFileOpen ( filename {, filemode {, fileaccess {, filelock {, writemode {,\n encoding }}}}} )\nTable 2.566:\nArgument\nDescription\nfilename\nA string whose value is the name of the file you want to open. If filename\nis not on the current directory's relative search path, you must enter the\nfully qualified name.\nfilemode\n(optional)\nA value of the FileMode enumerated type that specifies how the end of a\nfile read or file write is determined. Values are:\n\u2022 LineMode! -- (Default) Read or write the file a line at a time\n\u2022 StreamMode! -- Read blocks of binary data\n"}
{"page": 588, "text": "Statements, Events, and Functions\nPage 588\nArgument\nDescription\n\u2022 TextMode! -- Read text blocks\nFor more information, see Usage below.\nfileaccess\n(optional)\nA value of the FileAccess enumerated type that specifies whether the file\nis opened for reading or writing. Values are:\n\u2022 Read! -- (Default) Read-only access\n\u2022 Write! -- Write-only access\nIf PowerBuilder does not find the file, a new file is created if the\nfileaccess argument is set to Write!\nfilelock\n(optional)\nA value of the FileLock enumerated type specifying whether others have\naccess to the opened file. Values are:\n\u2022 LockReadWrite! -- (Default) Only the user who opened the file has\naccess\n\u2022 LockRead! -- Only the user who opened the file can read it, but\neveryone has write access\n\u2022 LockWrite! -- Only the user who opened the file can write to it, but\neveryone has read access\n\u2022 Shared! -- All users have read and write access.\nwritemode\n(optional)\nA value of the WriteMode enumerated datatype. When fileaccess is\nWrite!, specifies whether existing data in the file is overwritten. Values\nare:\n\u2022 Append! -- (Default) Write data to the end of the file\n\u2022 Replace! -- Replace all existing data in the file\nWritemode is ignored if the fileaccess argument is Read!\nencoding\nCharacter encoding of the file you want to create. Specify this argument\nwhen you create a new text file using text or line mode. If you do not\nspecify an encoding, the file is created with ANSI encoding. Values are:\n\u2022 EncodingANSI! (default)\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE!\n\u2022 EncodingUTF16BE!\nReturn value\nInteger.\n"}
{"page": 589, "text": "Statements, Events, and Functions\nPage 589\nReturns the file number assigned to filename if it succeeds and -1 if an error occurs. If any\nargument's value is null, FileOpen returns null.\nUsage\nThe mode in which you open a file determines the behavior of the functions used to read and\nwrite to a file. There are two functions that read data from a file: FileRead and FileReadEx,\nand two functions that write data to a file: FileWrite and FileWriteEx. FileRead and FileWrite\nhave limitations on the amount of data that can be read or written and are maintained for\nbackward compatibility. They do not support text mode. For more information, see FileRead\nand FileWrite.\nThe support for reading from and writing to blobs and strings for the FileReadEx and\nFileWriteEx functions depends on the mode. The following table shows which datatypes are\nsupported in each mode.\nTable 2.567: FileReadEx and FileWriteEx datatype support by mode\nMode\nBlob\nString\nLine\nNot supported\nSupported\nStream\nSupported\nNot supported\nText\nSupported\nSupported\nWhen a file has been opened in line mode, each call to the FileReadEx function reads until\nit encounters a carriage return (CR), linefeed (LF), or end-of-file mark (EOF). Each call to\nFileWriteEx adds a CR and LF at the end of each string it writes.\nWhen a file has been opened in stream mode or text mode, FileReadEx reads the whole file\nuntil it encounters an EOF or until it reaches a length specified in an optional parameter.\nFileWriteEx writes the full contents of the string or blob or until it reaches a length specified\nin an optional parameter.\nThe optional length parameter applies only to blob data. If the length parameter is provided\nwhen the datatype of the second parameter is string, the code will not compile.\nIn all modes, PowerBuilder can read ANSI, UTF-16, and UTF-8 files.\nThe behavior in stream and text modes is very similar. However, stream mode is intended\nfor use with binary files, and text mode is intended for use with text files. When you open an\nexisting file in stream mode, the file's internal pointer, which indicates the next position from\nwhich data will be read, is set to the first byte in the file.\nA byte-order mark (BOM) is a character code at the beginning of a data stream that indicates\nthe encoding used in a Unicode file. For UTF-8, the BOM uses three bytes and is EF BB BF.\nFor UTF-16, the BOM uses two bytes and is FF FE for little endian and FE FF for big endian.\nWhen you open an existing file in text mode, the file's internal pointer is set based on the\nencoding of the file:\n\u2022 If the encoding is ANSI, the pointer is set to the first byte\n\u2022 If the encoding is UTF-16LE or UTF-16BE, the pointer is set to the third byte,\nimmediately after the BOM\n"}
{"page": 590, "text": "Statements, Events, and Functions\nPage 590\n\u2022 If the encoding is UTF-8, the pointer is set to the fourth byte, immediately after the BOM\nIf you specify the optional encoding argument and the existing file does not have the same\nencoding, FileOpen returns -1.\nFile not found\nIf PowerBuilder does not find the file, it creates a new file, giving it the specified\nname, if the fileaccess argument is set to Write!. If the argument is not set to Write!,\nFileOpen returns -1.\nIf the optional encoding argument is not specified and the file does not exist, the file\nis created with ANSI encoding.\nWhen you create a new text file using FileOpen, use line mode or text mode. If you specify\nthe encoding parameter, the BOM is written to the file based on the specified encoding.\nWhen you create a new binary file using stream mode, the encoding parameter, if provided, is\nignored.\nExamples\nThis example uses the default arguments and opens the file EMPLOYEE.DAT for reading.\nThe default settings are LineMode!, Read!, LockReadWrite!, and EncodingANSI!.\nFileReadEx reads the file line by line and no other user is able to access the file until it is\nclosed:\ninteger li_FileNum\nli_FileNum = FileOpen(\"EMPLOYEE.DAT\")\nThis example opens the file EMPLOYEE.DAT in the DEPT directory in stream mode\n(StreamMode!) for write only access (Write!). Existing data is overwritten (Replace!). No\nother users can write to the file (LockWrite!):\ninteger li_FileNum\nli_FileNum = FileOpen(\"C:\\DEPT\\EMPLOYEE.DAT\", &\n      StreamMode!, Write!, LockWrite!, Replace!)\nThis example creates a new file that uses UTF8 encoding. The file is called new.txt and is in\nthe D:\\temp directory. It is opened in text mode with write-only access, and no other user can\nread or write to the file:\ninteger li_ret\nstring ls_file\nls_file = \"D:\\temp\\new.txt\"\nli_ret = FileOpen(ls_file, TextMode!, Write!, &\n   LockReadWrite!, Replace!, EncodingUTF8!)\nSee also\nFileClose\nFileLength64\nFileRead\nFileReadEx\nFileWrite\n"}
{"page": 591, "text": "Statements, Events, and Functions\nPage 591\nFileWriteEx\n2.4.177 FileRead\nDescription\nReads data from the file associated with the specified file number, which was assigned to the\nfile with the FileOpen function. FileRead is maintained for backward compatibility. Use the\nFileReadEx function for new development.\nSyntax\nFileRead ( file#, variable )\nTable 2.568:\nArgument\nDescription\nfile#\nThe integer assigned to the file when it was opened\nvariable\nThe name of the string or blob variable into which you want to read the\ndata\nReturn value\nInteger.\nReturns the number of bytes read. If an end-of-file mark (EOF) is encountered before any\ncharacters are read, FileRead returns -100. If the file is opened in LineMode and a CR or LF\nis encountered before any characters are read, FileRead returns 0. If an error occurs, FileRead\nreturns -1. If any argument's value is null, FileRead returns null. If the file length is greater\nthan 32,765 bytes, FileRead returns 32,765.\nUsage\nFileRead can read files with ANSI, UTF-8, UTF-16LE, and UTF-16BE encoding.\nIf the file is an ANSI or UTF-8 file and is read into a string, FileRead converts the text to\nUnicode before saving it in the string variable. No conversion is needed for UTF-16 files. For\nUnicode files, the BOM is not written to the string.\nIf the file is read into a blob, FileRead saves the contents of the file with no conversion. For\nUnicode files, the BOM is not written to the blob in text mode, but it is written to the blob in\nstream mode.\nIf the file was opened in line mode, FileRead reads a line of the file (that is, until it\nencounters a CR, LF, or EOF). It stores the contents of the line in the specified variable, skips\nthe line-end characters, and positions the file pointer at the beginning of the next line. If the\nsecond argument is a blob, FileRead returns -1.\nIf the file was opened in text mode, FileRead returns -1. Use FileReadEx to read a file in text\nmode.\nIf the file was opened in stream mode, FileRead reads to the end of the file or the next 32,765\nbytes, whichever is shorter. FileRead begins reading at the file pointer, which is positioned at\nthe beginning of the file when the file is opened for reading. If the file is longer than 32,765\n"}
{"page": 592, "text": "Statements, Events, and Functions\nPage 592\nbytes, FileRead automatically positions the pointer after each read operation so that it is ready\nto read the next chunk of data.\nFileRead can read a maximum of 32,765 bytes at a time. Therefore, before calling the\nFileRead function, call the FileLength64 function to check the file length. If your system\nhas file sharing or security restrictions, you might need to call FileLength64 before you call\nFileOpen. Use FileReadEx to read longer files.\nAn end-of-file mark is a null character (ASCII value 0). Therefore, if the file being read\ncontains null characters, FileRead stops reading at the first null character, interpreting it as\nthe end of the file. For Unicode files and files that you convert to Unicode, you must make\nsure that the file length value is an even number. Otherwise FileRead cannot parse the entire\nfile.\nExamples\nThis example reads the file EMP_DATA.TXT if it is short enough to be read with one call to\nFileRead:\ninteger li_FileNum\nstring ls_Emp_Input\nlong ll_FLength\n \nll_FLength = FileLength64(\"C:\\HR\\EMP_DATA.TXT\")\nli_FileNum = FileOpen(\"C:\\HR\\EMP_DATA.TXT\", &\n      LineMode!)\nIF ll_FLength < 32767 THEN\n      FileRead(li_FileNum, ls_Emp_Input)\nEND IF\nThis example reads the file EMP_PIC1.BMP and stores the data in the blob Emp_Id_Pic. The\nnumber of bytes read is stored in li_bytes:\ninteger li_fnum, li_bytes\nblob Emp_Id_Pic\n \nli_fnum = FileOpen(\"C:\\HR\\EMP_PIC1.BMP\", &\n      StreamMode!)\nli_bytes = FileRead(li_fnum, Emp_Id_Pic)\nSee also\nFileClose\nFileLength64\nFileOpen\nFileReadEx\nFileSeek64\nFileWriteEx\n2.4.178 FileReadEx\nDescription\nReads data from the file associated with the specified file number, which was assigned to the\nfile with the FileOpen function.\n"}
{"page": 593, "text": "Statements, Events, and Functions\nPage 593\nSyntax\nFileReadEx ( file#, blob {, length } )\nFileReadEx ( file#, string )\nTable 2.569:\nArgument\nDescription\nfile#\nThe integer assigned to the file when it was opened.\nblob or string\nThe name of the string or blob variable into which you want to read the\ndata.\nlength\nIn text or stream mode, the number of bytes a retrieve requires. The\ndefault value is the length of the file.\nReturn value\nLong.\nReturns the number of bytes read. If an end-of-file mark (EOF) is encountered before any\ncharacters are read, FileReadEx returns -100. If the file is opened in LineMode and a CR or\nLF is encountered before any characters are read, FileReadEx returns 0. If an error occurs,\nFileReadEx returns -1. FileReadEx returns -1 if you attempt to read from a string in stream\nmode or read from a blob in line mode. If any argument's value is null, FileReadEx returns\nnull.\nFileReadEx returns long\nUnlike the FileRead function that it replaces, the FileReadEx function returns a long\nvalue.\nUsage\nFileReadEx can read files with ANSI, UTF-8, UTF-16LE, and UTF-16BE encoding.\nIf the file is opened in line mode, FileReadEx reads a line of the file (that is, until it\nencounters a CR, LF, or EOF). It stores the contents of the line in the specified variable, skips\nthe line-end characters, and positions the file pointer at the beginning of the next line.\nThe optional length parameter applies only to blob data. If the length parameter is provided\nwhen the datatype of the second parameter is string, the code will not compile.\nIf the file was opened in stream or text mode, FileReadEx reads to the end of the file or the\nnext length bytes, whichever is shorter. FileReadEx begins reading at the file pointer, which\nis positioned at the beginning of the file when the file is opened for reading. If the file is\nlonger than length bytes, FileReadEx automatically positions the pointer after each read\noperation so that it is ready to read the next chunk of data.\nAn end-of-file mark is a null character (ASCII value 0). Therefore, if the file being read\ncontains null characters, FileReadEx stops reading at the first null character, interpreting it as\nthe end of the file. For Unicode files and files that you convert to Unicode, you must make\nsure that the file length value is an even number. Otherwise FileReadEx cannot parse the\nentire file.\n"}
{"page": 594, "text": "Statements, Events, and Functions\nPage 594\nIf the file is an ANSI or UTF-8 file and is read into a string, FileReadEx converts the text to\nUnicode before saving it in the string variable. The BOM is not written to the string.\nIf the file is an ANSI or UTF-8 file and is read into a blob, FileReadEx saves the contents of\nthe file with no conversion. The BOM is not written to the blob in text mode, but it is written\nto the blob in stream mode.\nIf the file is in Unicode, no conversion is required.\nExamples\nThis example reads the file EMP_DATA.TXT into a string in text mode. If the file is not in\nUnicode format, its contents, apart from the BOM, are converted to Unicode and written to\nthe string:\ninteger li_FileNum\nstring ls_Emp_Input\nli_FileNum = FileOpen(\"C:\\HR\\EMP_DATA.TXT\", &\n   TextMode!)\nFileReadEx(li_FileNum, ls_Emp_Input)\nThis example reads the file EMP_PIC1.BMP and stores the data in the blob Emp_Id_Pic. The\nnumber of bytes read is stored in ll_bytes:\ninteger li_fnum\nlong ll_bytes\nblob Emp_Id_Pic\n \nli_fnum = FileOpen(\"C:\\HR\\EMP_PIC1.BMP\", &\n      StreamMode!)\nll_bytes = FileReadEx(li_fnum, Emp_Id_Pic)\nSee also\nFileClose\nFileLength64\nFileOpen\nFileRead\nFileSeek64\nFileWriteEx\n2.4.179 FileSeek\nDescription\nMoves the file pointer to the specified position in a file whose size does not exceed 2GB. The\nfile pointer is the position in the file at which the next read or write begins.\nSyntax\nFileSeek ( file#, position, origin )\nTable 2.570:\nArgument\nDescription\nfile#\nThe integer assigned to the file when it was opened.\n"}
{"page": 595, "text": "Statements, Events, and Functions\nPage 595\nArgument\nDescription\nposition\nA long whose value is the new position of the file pointer relative to the\nposition specified in origin, in bytes.\norigin\nThe value of the SeekType enumerated datatype specifying where you\nwant to start the seek. Values are:\n\u2022 FromBeginning! -- (Default) At the beginning of the file\n\u2022 FromCurrent! -- At the current position\n\u2022 FromEnd! -- At the end of the file\nReturn value\nLong.\nReturns the file position after the seek operation has been performed. If any argument's value\nis null, FileSeek returns null.\nUsage\nUse FileSeek to move within a binary file that you have opened in stream mode. FileSeek\npositions the file pointer so that the next FileReadEx or FileWriteEx occurs at that position\nwithin the file.\nIf origin is set to FromBeginning!, and the file is not opened in stream mode, the byte-order\nmark is ignored automatically. For example, suppose the file's hexadecimal display is FF FE\n54 00 68 00 69 00 73 00, the following example illustrates the behavior:\nlong ll_pos\n// after the following statement, the file pointer is \n// at 68, not 54, and ll_pos = 2, not 4\nll_pos = FileSeek( filenum, 2, FromBeginning!)\n// ll_pos = 2, not 4\nll_pos = FileSeek( filenum, 0, FromCurrent!)\n// ll_pos = 2, not 4\nll_pos = FileSeek( filenum, -6, FromEnd!)\nThe FileSeek function cannot handle files whose size exceeds 2GB. Use FileSeek64 to move\nthe file pointer in larger files.\nExamples\nThis example positions the file pointer 14 bytes from the end of the file:\ninteger li_FileNum\nli_FileNum = FileOpen(\"emp_data\")\nFileSeek(li_FileNum, -14, FromEnd!)\nThis example moves the file pointer from its current position 14 bytes toward the end of\nthe file. In this case, if no processing has occurred after FileOpen to affect the file pointer,\nspecifying FromCurrent! is the same as specifying FromBeginning!:\ninteger li_FileNum\nli_FileNum = FileOpen(\"emp_data\")\nFileSeek(li_FileNum, 14, FromCurrent!)\n"}
{"page": 596, "text": "Statements, Events, and Functions\nPage 596\nSee also\nFileReadEx\nFileSeek64\nFileWriteEx\n2.4.180 FileSeek64\nDescription\nMoves the file pointer to the specified position in a file of any size. The file pointer is the\nposition in the file at which the next read or write begins.\nSyntax\nFileSeek64 ( file#, position, origin )\nTable 2.571:\nArgument\nDescription\nfile#\nThe integer assigned to the file when it was opened.\nposition\nA long whose value is the new position of the file pointer relative to the\nposition specified in origin, in bytes.\norigin\nThe value of the SeekType enumerated datatype specifying where you\nwant to start the seek. Values are:\n\u2022 FromBeginning! -- (Default) At the beginning of the file\n\u2022 FromCurrent! -- At the current position\n\u2022 FromEnd! -- At the end of the file\nReturn value\nLonglong.\nReturns the file position after the seek operation has been performed. If any argument's value\nis null, FileSeek64 returns null.\nUsage\nUse FileSeek64 to move within a binary file that you have opened in stream mode.\nFileSeek64 positions the file pointer so that the next FileReadEx or FileWriteEx occurs at\nthat position within the file.\nIf origin is set to FromBeginning!, and the file is not opened in stream mode, the byte-order\nmark is ignored automatically. For example, suppose the file's hexadecimal display is FF FE\n54 00 68 00 69 00 73 00, the following example illustrates the behavior:\nlong ll_pos\n// after the following statement, the file pointer is \n// at 68, not 54, and ll_pos = 2, not 4\n"}
{"page": 597, "text": "Statements, Events, and Functions\nPage 597\nll_pos = FileSeek64( filenum, 2, FromBeginning!)\n// ll_pos = 2, not 4\nll_pos = FileSeek64( filenum, 0, FromCurrent!)\n// ll_pos = 2, not 4\nll_pos = FileSeek64( filenum, -6, FromEnd!)\nExamples\nThis example positions the file pointer 14 bytes from the end of the file:\ninteger li_FileNum\nli_FileNum = FileOpen(\"emp_data\")\nFileSeek64(li_FileNum, -14, FromEnd!)\nThis example moves the file pointer from its current position 14 bytes toward the end of\nthe file. In this case, if no processing has occurred after FileOpen to affect the file pointer,\nspecifying FromCurrent! is the same as specifying FromBeginning!:\ninteger li_FileNum\nli_FileNum = FileOpen(\"emp_data\")\nFileSeek64(li_FileNum, 14, FromCurrent!)\nSee also\nFileReadEx\nFileSeek\nFileWriteEx\n2.4.181 FileWrite\nDescription\nWrites data to the file associated with the specified file number. The file number was\nassigned to the file with the FileOpen function. FileWrite is maintained for backward\ncompatibility. Use the FileWriteEx function for new development.\nSyntax\nFileWrite ( file#, variable )\nTable 2.572:\nArgument\nDescription\nfile#\nThe integer assigned to the file when the file was opened\nvariable\nA string or blob whose value is the data you want to write to the file\nReturn value\nInteger.\nReturns the number of bytes written if it succeeds and it returns -1 if an error occurs. If any\nargument's value is null, FileWrite returns null.\nUsage\nFileWrite can write to files with ANSI, UTF-8, UTF-16LE, and UTF-16BE encoding.\n"}
{"page": 598, "text": "Statements, Events, and Functions\nPage 598\nFileWrite writes its data at the position identified by the file pointer. If the file was opened\nwith the writemode argument set to Replace!, the file pointer is initially at the beginning of\nthe file. After each call to FileWrite, the pointer is immediately after the last write. If the file\nwas opened with the writemode argument set to Append!, the file pointer is initially at the\nend of the file and moves to the end of the file after each write.\nFileWrite sets the file pointer following the last character written. If the file was opened in\nline mode, FileWrite writes a carriage return (CR) and linefeed (LF) after the last character in\nvariable and places the file pointer after the CR and LF.\nIf the data is in a string and the associated file uses ANSI or UTF-8 encoding, FileWrite\nconverts the string to ANSI or UTF-8 encoding before saving it to the associated file.\nThe behavior of the FileWrite function when the file is opened with the EncodingANSI!\nparameter or with no encoding parameter is platform dependent. On the Windows and Solaris\nplatforms, FileWrite does not convert multilanguage characters to UTF-8 and saves the file\nwith ANSI encoding. On the Linux platform, if the string contains multilanguage characters,\nFileWrite converts the multi-language characters to UTF-8 and saves the file with UTF-8\nencoding.\nIf the file is opened in stream mode, no conversion is done. If the file was opened in text\nmode, FileWrite returns -1. Use FileWriteEx to write to files in text mode.\nFor Unicode files and files that you convert to Unicode, you must make sure that the file\nlength value is an even number. Otherwise FileWrite cannot parse the entire file.\nLength limit\nFileWrite can write only 32,766 bytes at a time, which includes the string terminator\ncharacter. If the length of variable exceeds 32,765 bytes, FileWrite writes the first\n32,765 bytes and returns 32,765. Use FileWriteEx to handle variables that have more\nthan 32,765 bytes.\nExamples\nThis script excerpt opens EMP_DATA.TXT and writes the string New Employees at the end\nof the file. The variable li_FileNum stores the number of the opened file:\ninteger li_FileNum\nli_FileNum = FileOpen(\"C:\\HR\\EMP_DATA.TXT\", &\n   LineMode!, Write!, LockWrite!, Append!)\nFileWrite(li_FileNum, \"New Employees\")\nThe following example reads a blob from the database and writes it to a file. The SQL\nSELECT statement assigns the picture data to the blob Emp_Id_Pic. Then FileOpen opens\na file for writing in stream mode and FileWrite writes the blob to the file. You could use the\nLen function to test whether the blob was too big for a single FileWrite call:\ninteger li_FileNum\nblob emp_id_pic\nSELECTBLOB salary_hist INTO  : emp_id_pic\n   FROM Employee WHERE Employee.Emp_Num = 100\n   USING Emp_tran;\nli_FileNum = FileOpen( &\n   \"C:\\EMPLOYEE\\EMP_PICS.BMP\", &\n   StreamMode!, Write!, Shared!, Replace!)\n"}
{"page": 599, "text": "Statements, Events, and Functions\nPage 599\nFileWrite(li_FileNum, emp_id_pic)\nSee also\nFileClose\nFileLength64\nFileOpen\nFileRead\nFileReadEx\nFileSeek64\nFileWriteEx\n2.4.182 FileWriteEx\nDescription\nWrites data to the file associated with the specified file number. The file number was\nassigned to the file with the FileOpen function.\nSyntax\nFileWriteEx ( file#, blob {, length })\nFileWriteEx ( file#, string )\nTable 2.573:\nArgument\nDescription\nfile#\nThe integer assigned to the file when the file was opened\nblob or string\nA blob or string whose value is the data you want to write to the file.\nlength\nIn text or stream mode, the number of bytes to be written. The default\nvalue is the length of the file.\nReturn value\nLong.\nReturns the number of bytes written if it succeeds and -1 if an error occurs. FileWriteEx\nreturns -1 if you attempt to write to a string in stream mode or to a blob in line mode. If any\nargument's value is null, FileWriteEx returns null.\nFileWriteEx returns long\nUnlike the FileWrite function that it replaces, the FileWriteEx function returns a long\nvalue.\nUsage\nFileWriteEx can write to files with ANSI, UTF-8, UTF-16LE, and UTF-16BE encoding.\nFileWriteEx writes its data at the position identified by the file pointer. If the file was opened\nwith the writemode argument set to Replace!, the file pointer is initially at the beginning of\n"}
{"page": 600, "text": "Statements, Events, and Functions\nPage 600\nthe file. After each call to FileWriteEx, the pointer is immediately after the last write. If the\nfile was opened with the writemode argument set to Append!, the file pointer is initially at the\nend of the file and moves to the end of the file after each write.\nFileWriteEx sets the file pointer following the last character written. If the file was opened in\nline mode, FileWriteEx writes a carriage return (CR) and linefeed (LF) after the last character\nin variable and places the file pointer after the CR and LF.\nIf the file was opened in stream or text mode, FileWriteEx writes the full contents of the\nstring or blob or the next length bytes, whichever is shorter. The optional length parameter\napplies only to blob data. If the length parameter is provided when the datatype of the second\nparameter is string, the code will not compile.\nIf the data is in a string and the associated file uses ANSI or UTF-8 encoding, FileWriteEx\nconverts the string to ANSI or UTF-8 encoding before saving it to the associated file. If\nthe file is opened in stream mode, no conversion is done. For Unicode files and files that\nyou convert to Unicode, you must make sure that the file length value is an even number.\nOtherwise FileWriteEx cannot parse the entire file.\nIf the file does not have a byte-order mark (BOM) it is created automatically.\nExamples\nThis script excerpt opens EMP_DATA.TXT and writes the string New Employees at the end\nof the file. The variable li_FileNum stores the number of the opened file:\ninteger li_FileNum\nli_FileNum = FileOpen(\"C:\\HR\\EMP_DATA.TXT\", &\n      TextMode!, Write!, LockWrite!, Append!)\nFileWriteEx(li_FileNum, \"New Employees\")\nThe following example reads a blob from the database and writes it to a file. The SQL\nSELECT statement assigns the picture data to the blob Emp_Id_Pic. Then FileOpen opens a\nfile for writing in stream mode and FileWriteEx writes the blob to the file. You could use the\nLen function to test whether the blob was too big for a single FileWrite call:\ninteger li_FileNum\nblob emp_id_pic\nSELECTBLOB salary_hist INTO  : emp_id_pic\n   FROM Employee WHERE Employee.Emp_Num = 100\n   USING Emp_tran;\nli_FileNum = FileOpen(\"C:\\EMPLOYEE\\EMP_PICS.BMP\", &\n   StreamMode!, Write!, Shared!, Replace!)\nFileWriteEx(li_FileNum, emp_id_pic)\nSee also\nFileClose\nFileLength64\nFileOpen\nFileReadEx\nFileSeek64\n2.4.183 Fill\nDescription\n"}
{"page": 601, "text": "Statements, Events, and Functions\nPage 601\nBuilds a string of the specified length by repeating the specified characters until the result\nstring is long enough.\nSyntax\nFill ( chars, n )\nTable 2.574:\nArgument\nDescription\nchars\nA string whose value will be repeated to fill the return string\nn\nA long whose value is the length of the string you want returned\nReturn value\nString.\nReturns a string n characters long filled with the characters in the argument chars. If the\nargument chars has more than n characters, the first n characters of chars are used to fill the\nreturn string. If the argument chars has fewer than n characters, the characters in chars are\nrepeated until the return string has n characters. If any argument's value is null, Fill returns\nnull.\nUsage\nUse Fill in printing routines to create a line or other special effect. For example, you can\nfill the amount line of a check with asterisks, or simulate a total line in a screen display by\nrepeating hyphens below a column of figures.\nExamples\nThis statement returns a string whose value is 35 stars:\nFill(\"*\", 35)\nThis statement returns the string -+-+-+-:\nFill(\"-+\", 7)\nThis statement returns 10 tildes (~):\nFill(\"~~\", 10)\nSee also\nSpace\nFill method for DataWindows in Section 2.4.37, \u201cFill\u201d in DataWindow Reference.\n2.4.184 FillA\nDescription\nBuilds a string of the specified length in bytes by repeating the specified characters until the\nresult string is long enough.\nSyntax\n"}
{"page": 602, "text": "Statements, Events, and Functions\nPage 602\nFillA (chars, n)\nTable 2.575:\nArgument\nDescription\nchars\nThe string whose value is repeated to fill the return string\nn\nA long specifying the number of bytes in the return string\nReturn value\nString.\nReturns a string n bytes long filled with the characters in the argument chars. If the argument\nchars has more than n bytes, the first n bytes of chars are used to fill the return string. If the\nargument chars has fewer than n bytes, the characters in chars are repeated until the return\nstring has n bytes. If any argument's value is null, FillA returns null.\nUsage\nFillA replaces the functionality that Fill had in DBCS environments in PowerBuilder 9.\nIn SBCS environments, Fill, FillW, and FillA return the same results.\n2.4.185 FillW (obsolete)\nDescription\nBuilds a string of the specified length by repeating the specified characters until the result\nstring is long enough.\nThis function is obsolete. It has the same behavior as Fill in SBCS and DBCS environments.\nSyntax\nFillW ( chars, n)\n2.4.186 Find\nDescription\nFinds data in a DataWindow control or DataStore, or text in a RichTextEdit control or\nRichTextEdit DataWindow or DataStore.\nYou can specify search direction and whether to match whole words and case. Finds the\nspecified text in the control and highlights the text if found.\nFor syntax for DataWindows and DataStores, see the Find method for DataWindows in\nSection 9.33, \u201cFind\u201d in DataWindow Reference.\nApplies to\nRichTextEdit controls and DataWindow controls (or DataStore objects) whose content has\nthe RichTextEdit presentation style\nSyntax\ncontrolname.Find ( searchtext, forward, insensitive, wholeword, cursor )\n"}
{"page": 603, "text": "Statements, Events, and Functions\nPage 603\nTable 2.576:\nArgument\nDescription\ncontrolname\nThe name of the RichTextEdit, DataWindow control, or DataStore whose\ncontents you want to search.\nsearchtext\nA string whose value is the text you want to find. For the RichTextEdit\ncontrol, searchtext is limited to 99 characters.\nforward\nA boolean value indicating the direction you want to search. Values are:\n\u2022 TRUE -- The search proceeds forward from the cursor position or, if\ncursor is false, from the start of the document.\n\u2022 FALSE -- The search proceeds backward from the cursor position or, if\ncursor is false, from the end of the document.\ninsensitive\nA boolean value indicating the search string and the found text must\nmatch case. Values are:\n\u2022 TRUE -- The search is not sensitive to case.\n\u2022 FALSE -- The search is case-sensitive.\nwholeword\nA boolean value indicating that the found text must be a whole word.\nValues are:\n\u2022 TRUE -- The found text must be a whole word.\n\u2022 FALSE -- The found text can be a partial word.\ncursor\nA boolean value indicating where the search begins. Values are:\n\u2022 TRUE -- The search begins at the cursor position.\n\u2022 FALSE -- The search begins at the start of the document if forward is\ntrue or at the end if forward is false.\nReturn value\nInteger.\nReturns the number of characters found. Find returns 0 if no matching text is found, and\nreturns -1 if the DataWindow's presentation style is not RichTextEdit or an error occurs.\nExamples\nThis example searches the RichTextEdit rte_1 for text the user specifies in the SingleLineEdit\nsle_search. The search proceeds forward from the cursor position. The search is case\ninsensitive and not limited to whole words:\ninteger li_charsfound\nli_charsfound = rte_1.Find(sle_search.Text, &\n      TRUE, TRUE, FALSE, TRUE)\nSee also\nFindNext\n"}
{"page": 604, "text": "Statements, Events, and Functions\nPage 604\n2.4.187 FindCategory\nDescription\nObtains the number of a category in a graph when you know the category's label.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.FindCategory ( { graphcontrol, } categoryvalue )\nTable 2.577:\nArgument\nDescription\ncontrolname\nA string whose value is the name of the graph in which you want to find a\nspecific category, or the name of the DataWindow control containing the\ngraph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control in which you want to find a specific category.\ncategoryvalue\nA value that is the category for which you want the number. The value\nyou specify must be the same datatype as the datatype of the category\naxis.\nReturn value\nInteger.\nReturns the number of the category named in categoryvalue in the graph controlname, or\nif controlname is a DataWindow control, in graphcontrol. If an error occurs, FindCategory\nreturns -1. If any argument's value is null, FindCategory returns null.\nUsage\nMost of the category manipulation functions require a category number, rather than a name.\nHowever, when you delete and insert categories, existing categories are renumbered to keep\nthe numbering consecutive. Use FindCategory when you know only a category's label or\nwhen the numbering may have changed.\nExamples\nThese statements obtain the number of a category in the graph gr_prod_data. The category\nname is the text in the SingleLineEdit sle_ctory:\ninteger CtgryNbr\nCtgryNbr =gr_prod_data.FindCategory(sle_ctgry.Text)\nThese statements obtain the number of the category named Qty in the graph gr_computers in\nthe DataWindow control dw_equip:\ninteger CtgryNbr\nCtgryNbr = dw_equip.FindCategory(\"gr_computers\", \"Qty\")\nSee also\n"}
{"page": 605, "text": "Statements, Events, and Functions\nPage 605\nAddCategory\nDeleteData\nDeleteSeries\nFindSeries\n2.4.188 FindClassDefinition\nDescription\nSearches for an object in one or more PowerBuilder libraries (PBLs) and provides\ninformation about its class definition.\nSyntax\nFindClassDefinition ( classname {, librarylist } )\nTable 2.578:\nArgument\nDescription\nclassname\nThe name of an object (also called a class or class definition) for which\nyou want information.\nlibrarylist\n(optional)\nAn array of strings whose values are the fully qualified pathnames of\nPBLs. If you omit librarylist, FindClassDefinition searches the library list\nassociated with the running application.\nReturn value\nClassDefinition. Returns an object reference with information about the definition of\nclassname. If any arguments are null, FindClassDefinition returns null.\nUsage\nThere are two ways to get a ClassDefinition object containing class definition information:\n\u2022 For an instantiated object in your application, use its ClassDefinition property\n\u2022 For an object stored in a PBL, call FindClassDefinition\nExamples\nThis example searches the libraries for the running application to find the class definition for\nw_genapp_frame:\nClassDefinition cd_windef\ncd_windef = FindClassDefinition(\"w_genapp_frame\")\nThis example searches the libraries in the array ls_libraries to find the class definition for\nw_genapp_frame:\nClassDefinition cd_windef\nstring ls_libraries[ ]\n \n"}
{"page": 606, "text": "Statements, Events, and Functions\nPage 606\nls_libraries[1] = \"c:\\pwrs\\bizapp\\windows.pbl\"\nls_libraries[2] = \"c:\\pwrs\\framewk\\windows.pbl\"\nls_libraries[3] = \"c:\\pwrs\\framewk\\ancestor.pbl\"\n \ncd_windef = FindClassDefinition(\n      \"w_genapp_frame\", ls_libraries)\nSee also\nFindFunctionDefinition\nFindMatchingFunction\nFindTypeDefinition\n2.4.189 FindFunctionDefinition\nDescription\nSearches for a global function in one or more PowerBuilder libraries (PBLs) and provides\ninformation about the script definition.\nSyntax\nFindFunctionDefinition ( functionname {, librarylist } )\nTable 2.579:\nArgument\nDescription\nfunctionname\nThe name of a global function for which you want information.\nlibrarylist\n(optional)\nAn array of strings whose values are the fully qualified pathnames of\nPBLs. If you omit librarylist, FindFunctionDefinition searches the library\nlist associated with the running application.\nReturn value\nScriptDefinition. Returns an object reference with information about the script of\nfunctionname. If any arguments are null, FindFunctionDefinition returns null.\nUsage\nYou can call FindClassDefinition to get a class definition for a global function. However, the\nScriptDefinition object provides information tailored for functions.\nExamples\nThis example searches the libraries for the running application to find the function definition\nfor f_myfunction:\nScriptDefinition sd_myfunc\nsd_myfunc = FindFunctionDefinition(\"f_myfunction\")\nThis example searches the libraries in the array ls_libraries to find the class definition for\nw_genapp_frame:\nScriptDefinition sd_myfunc\nstring ls_libraries[ ]\n"}
{"page": 607, "text": "Statements, Events, and Functions\nPage 607\n \nls_libraries[1] = \"c:\\pwrs\\bizapp\\windows.pbl\"\nls_libraries[2] = \"c:\\pwrs\\framewk\\windows.pbl\"\nls_libraries[3] = \"c:\\pwrs\\framewk\\ancestor.pbl\"\n \nsd_myfunc = FindFunctionDefinition( &\n      \"f_myfunction\", ls_libraries)\nSee also\nFindClassDefinition\nFindMatchingFunction\nFindTypeDefinition\n2.4.190 FindItem\nFinds the next item in a list.\nTable 2.580:\nTo find the next item\nUse\nIn a ListBox, DropDownListBox, PictureListBox,\nDropDownPictureListBox, or RibbonComboBoxItem control\nSyntax 1\nIn a ListView control based upon its label\nSyntax 2\nBy relative position in a ListView control\nSyntax 3\nBy relative position in a TreeView control\nSyntax 4\n2.4.190.1 Syntax 1: For ListBox, DropDownListBox, and RibbonComboBoxItem controls\nDescription\nFinds the next item in a ListBox that begins with the specified search text.\nApplies to\nListBox, DropDownListBox, PictureListBox, DropDownPictureListBox, and\nRibbonComboBoxItem controls\nSyntax\nlistboxname.FindItem ( text, index )\nTable 2.581:\nArgument\nDescription\nlistboxname\nThe name of the ListBox control in which you want to find an item.\ntext\nA string whose value is the starting text of the item you want to find.\nindex\nThe number of the item just before the first item to be searched. To\nsearch the whole list, specify 0.\nReturn value\n"}
{"page": 608, "text": "Statements, Events, and Functions\nPage 608\nInteger.\nReturns the index of the first matching item. To match, the item must start with the specified\ntext; however, the text in the item can be longer than the specified text. If no match is found\nor if an error occurs, FindItem returns -1. If any argument's value is null, FindItem returns\nnull.\nUsage\nWhen FindItem finds the matching item, it returns the index of the item but does not select\n(highlight) the item. To find and select the item, use the SelectItem function.\nExamples\nAssume the ListBox lb_actions contains the following list:\nTable 2.582:\nIndex number\nItem text\n1\nOpen files\n2\nClose files\n3\nCopy files\n4\nDelete files\nThen these statements start searching for Delete starting with item 2 (Close files). FindItem\nsets Index to 4:\ninteger Index\nIndex = lb_actions.FindItem(\"Delete\", 1)\nThese statements search for items in the RibbonBar ComboBox:\nInteger li_Return\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.AddItem(\"Item1\")\nli_Return = lr_ComboBox.AddItem(\"Item2\")\nli_Return = lr_ComboBox.FindItem(\"Item2\",0)\nSee also\nAddItem\nDeleteItem\nInsertItem\nSelectItem\n2.4.190.2 Syntax 2: For ListView controls\nDescription\nSearches for the next item whose label matches the specified search text.\nApplies to\n"}
{"page": 609, "text": "Statements, Events, and Functions\nPage 609\nListView controls\nSyntax\nlistviewname.FindItem ( startindex, label, partial, wrap )\nTable 2.583:\nArgument\nDescription\nlistviewname\nThe ListView control for which you want to search for items\nstartindex\nThe index number from which you want your search to begin\nlabel\nThe string that is the target of the search\npartial\nIf set to true, the search looks for a partial label match\nwrap\nIf set to true, the search returns to the first index item after it has finished\nReturn value\nInteger.\nReturns the index of the item found if it succeeds and -1 if an error occurs.\nUsage\nThe search starts from startindex + 1 by default. To search from the beginning, specify 0.\nIf partial is set to true, the search string matches any label that begins with the specified text.\nIf partial is set to false, the search string must match the entire label.\nIf wrap is set to true, the search wraps around to the first index item after searching to the\nend. If wrap is set to false, the search stops at the last index item in the ListView.\nFindItem does not select the item it finds. You must use the item's selected property in\nconjunction with FindItem to select the resulting match.\nExamples\nThis example takes the value from a SingleLineEdit control and passes it to FindItem:\nlistviewitem l_lvi\ninteger li_index\nstring ls_label\n \nls_label = sle_find.Text\nIF ls_label = \"\" THEN\n      MessageBox(\"Error\" , &\n         \"Enter the name of a list item\")\n      sle_find.SetFocus()\nELSE\n      li_index = lv_list.FindItem(0,ls_label, TRUE,TRUE)\nEND IF\nIF li_index = -1 THEN\n      MessageBox(\"Error\", \"Item not found.\")\nELSE\n      lv_list.GetItem (li_index, l_lvi )\n      l_lvi.HasFocus = TRUE\n      l_lvi.Selected = TRUE\n      lv_list.SetItem(li_index,l_lvi)\n"}
{"page": 610, "text": "Statements, Events, and Functions\nPage 610\nEND IF\nSee also\nAddItem\nDeleteItem\nInsertItem\nSelectItem\n2.4.190.3 Syntax 3: For ListView controls\nDescription\nSearch for the next item relative to a specific location in the ListView control.\nApplies to\nListView controls\nSyntax\nlistviewname.FindItem ( startindex, direction, focused, selected, cuthighlighted,\n drophighlighted )\nTable 2.584:\nArgument\nDescription\nlistviewname\nThe ListView control for which you want to search for items.\nstartindex\nThe index number from which you want your search to begin.\ndirection\nThe direction in which to search. Values are:\nDirectionAll!\nDirectionUp!\nDirectionDown!\nDirectionLeft!\nDirectionRight!\nfocused\nIf set to true, the search looks for the next ListView item that has focus.\nselected\nIf set to true, the search looks for the next ListView item that is selected.\ncuthighlighted\nIf set to true, the search looks for the next ListView item that is the target\nof a cut operation.\ndrophighlighted\nIf set to true, the search looks for next ListView item that is the target of\na drag and drop operation.\nReturn value\nInteger.\nReturns the index of the item found if it succeeds and -1 if an error occurs.\nUsage\n"}
{"page": 611, "text": "Statements, Events, and Functions\nPage 611\nThe search starts from startindex + 1 by default. If you want to search from the beginning,\nspecify 0.\nFindItem does not select the item it finds. You must use the item's selected property in\nconjunction with FindItem to select the resulting match.\nIf focused, selected, cuthighlighted, and drophighlighted are set to false, the search finds the\nnext item in the ListView control.\nExamples\nThis example uses FindItem to search from the selected ListView item:\nlistviewitem l_lvi\ninteger li_index, li_startindex\n \nli_startindex = lv_list.SelectedIndex()\nli_index = lv_list.FindItem(li_startindex, &\n      DirectionDown!, FALSE, FALSE ,FALSE, FALSE)\n \nIF li_index = -1 THEN\n      MessageBox(\"Error\", \"Item not found.\")\nELSE\n      lv_list.GetItem (li_index, l_lvi)\n      l_lvi.HasFocus = TRUE\n      l_lvi.Selected = TRUE\n      lv_list.SetItem(li_index,l_lvi)\nEND IF\nSee also\nAddItem\nDeleteItem\nInsertItem\nSelectItem\n2.4.190.4 Syntax 4: For TreeView controls\nDescription\nFind an item based on its position in a TreeView control.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.FindItem ( navigationcode, itemhandle )\nTable 2.585:\nArgument\nDescription\ntreeviewname\nThe name of the TreeView control in which you want to find a specified\nitem.\nnavigationcode\nA value of the TreeNavigation enumerated datatype specifying the\nrelationship between itemhandle and the item you want to find. See the\ntable in Usage note for a list of valid values.\n"}
{"page": 612, "text": "Statements, Events, and Functions\nPage 612\nArgument\nDescription\nitemhandle\nA long for the handle of an item related via navigationcode to the item for\nwhich you are searching.\nReturn value\nLong.\nReturns the item handle if it succeeds and -1 if an error occurs.\nUsage\nFindItem does not select the item it finds. You must use the item's selected property in\nconjunction with FindItem to select the result of the FindItem search.\nFindItem never finds a collapsed item, except when looking for ChildTreeItem!, which\ncauses an item to expand. CurrentItem! is not changed until after the clicked event occurs. To\nreturn the correct handle for the current item when the user clicks it, create a custom event to\nreturn the handle and post it in the clicked event.\nIf navigationcode is RootTreeItem!, FirstVisibleTreeItem!, CurrentTreeItem!, or\nDropHighlightTreeItem!, set itemhandle to 0.\nThe following table shows valid values for the navigationcode argument.\nTable 2.586: Valid values for the navigationcode argument of FindItem\nNavigationcode\nvalue\nWhat FindItem finds\nRootTreeItem!\nThe first item at level 1. Returns -1 if no items have been inserted into the\ncontrol.\nNextTreeItem!\nThe sibling after itemhandle. A sibling is an item at the same level with\nthe same parent. Returns -1 if there are no more siblings.\nPreviousTreeItem!The sibling before itemhandle. Returns -1 if there are no more siblings.\nParentTreeItem!\nThe parent of itemhandle. Returns -1 if the item is at level 1.\nChildTreeItem!\nThe first child of itemhandle. If the item is collapsed, ChildtreeItem!\ncauses the node to expand. Returns -1 if the item has no children or if the\nitem is not populated yet.\nFirstVisibleTreeItem!\nThe first item visible in the control, regardless of level. The position of\nthe scroll bar determines the first visible item.\nNextVisibleTreeItem!\nThe next expanded item after itemhandle, regardless of level. The\nNextVisible and PreviousVisible values allow you to walk through all the\nvisible children and branches of an expanded node. Returns -1 if the item\nis the last expanded item in the control.\nTo scroll to an item that is beyond the reach of the visible area of the\ncontrol, use FindItem and then SelectItem.\nPreviousVisibleTreeItem!\nThe next expanded item before itemhandle, regardless of level. Returns\n-1 if the item is the first root item.\n"}
{"page": 613, "text": "Statements, Events, and Functions\nPage 613\nNavigationcode\nvalue\nWhat FindItem finds\nCurrentTreeItem! The selected item. Returns -1 if the control never had focus and nothing\nhas been selected.\nDropHighlightTreeItem!\nThe item whose DropHighlighted property was most recently set. Returns\n-1 if the property was never set or if it has been set back to false because\nof other activity in the control.\nExamples\nTo return the correct handle when the current item is clicked, place this code in a custom\nevent that is posted in the item's clicked event:\nlong ll_tvi\nll_tvi = tv_list.FindItem(CurrentTreeItem!, 0)\nThis example finds the first item on the first level of a TreeView control:\nlong ll_tvi\nll_tvi = tv_list.FindItem(RootTreeItem!, 0)\nSee also\nDeleteItem\nGetItem\nInsertItem\nSelectItem\n2.4.191 FindMatchingFunction\nDescription\nFinds out what function in a class matches a specified signature. The signature is a\ncombination of a script name and an argument list.\nApplies to\nClassDefinition objects\nSyntax\nclassdefobject.FindMatchingFunction ( scriptname, argumentlist )\nTable 2.587:\nArgument\nDescription\nclassdefobject\nThe name of the ClassDefinition object describing the class in which you\nwant to find a function.\nscriptname\nA string whose value is the name of the function.\nargumentlist\nAn unbounded array of strings whose values are the datatypes of the\nfunction arguments. If the variable is passed by reference, the string must\n"}
{"page": 614, "text": "Statements, Events, and Functions\nPage 614\nArgument\nDescription\ninclude \"ref\" before the datatype. If the variable is an array, you must\ninclude array brackets after the datatype.\nThe format is:\n{ ref } datatype { [] }\nFor a bounded array, the argument must include the range, as in:\nref integer[1 TO 10]\nReturn value\nScriptDefinition. Returns an object instance with information about the matching function. If\nno matching function is found, FindMatchingFunction returns null. If any argument is null, it\nalso returns null.\nUsage\nIn searching for the function, PowerBuilder examines the collapsed inheritance hierarchy.\nThe found function may be defined in the current object or in any of its ancestors.\nArguments passed by reference\nTo find a function with an argument that is passed by reference, you must specify the\nREF keyword. If you have a VariableDefinition object for a function argument, check the\nCallingConvention argument to determine if the argument is passed by reference.\nIn documentation for PowerBuilder functions, arguments passed by reference are described\nas a variable, rather than simply a value. The PowerBuilder Browser does not report which\narguments are passed by reference.\nExamples\nThis example gets the ScriptDefinition object that matches the PowerBuilder window object\nfunction OpenUserObjectWithParm and looks for the version with four arguments. If it finds\na match, the example calls the function uf_scriptinfo, which creates a report about the script:\nstring ls_args[]\nScriptDefinition sd\n \nls_args[1] = \"ref dragobject\"\nls_args[2] = \"double\"\nls_args[3] = \"integer\"\nls_args[4] = \"integer\"\n \nsd = c_obj.FindMatchingFunction( &\n      \"OpenUserObjectWithParm\", ls_args)\nIF NOT IsValid(sd) THEN\n      mle_1.Text = \"No matching script\"\nELSE\n      mle_1.Text = uf_scriptinfo(sd)\nEND IF\nThe uf_scriptinfo function gets information about the function that matched the signature and\nbuilds a string. Scriptobj is the ScriptDefinition object passed to the function:\nstring s, lineend\n"}
{"page": 615, "text": "Statements, Events, and Functions\nPage 615\ninteger li\nlineend = \"~r~n\"\n \n// Script name\ns = s + scriptobj.Name + lineend\n// datatype of the return value\ns = s + scriptobj.ReturnType.DataTypeOf + lineend\n \n// List argument names\ns = s + \"Arguments:\" + lineend\nFOR li = 1 to UpperBound(scriptobj.ArgumentList)\n      s = s + scriptobj.ArgumentList[li].Name + lineend\nNEXT\n \n// List local variables\ns = s + \"Local variables:\" + lineend\nFOR li = 1 to UpperBound(scriptobj.LocalVariableList)\n      s = s + scriptobj.LocalVariableList[li].Name & \n         + lineend\nNEXT\nRETURN s\nSee also\nFindClassDefinition\nFindFunctionDefinition\nFindTypeDefinition\n2.4.192 FindNext\nDescription\nFinds the next occurrence of text in the control and highlights it, using criteria set up in a\nprevious call of the Find function.\nApplies to\nRichTextEdit controls and DataWindow controls whose content has the RichTextEdit\npresentation style\nSyntax\ncontrolname.FindNext ( )\nTable 2.588:\nArgument\nDescription\ncontrolname\nThe name of the RichTextEdit or DataWindow control whose contents\nyou want to search\nReturn value\nInteger.\nReturns the number of characters found. FindNext returns 0 if no matching text is found and\n-1 if the DataWindow's presentation style is not RichTextEdit or an error occurs.\nExamples\n"}
{"page": 616, "text": "Statements, Events, and Functions\nPage 616\nThis example searches the RichTextEdit rte_1 for text the user specifies in the SingleLineEdit\nsle_search. The search proceeds forward from the cursor position, is case insensitive, and is\nnot limited to whole words:\ninteger li_charsfound\nli_charsfound = rte_1.Find(sle_search.Text, &\n      TRUE, TRUE, FALSE, TRUE)\nA second button labeled FindNext would have a script like this:\nrte_1.FindNext()\nSee also\nFind\n2.4.193 FindSeries\nDescription\nObtains the number of a series in a graph when you know the series' name.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.FindSeries ( { graphcontrol, } seriesname )\nTable 2.589:\nArgument\nDescription\ncontrolname\nThe name of the graph containing the series for which you want the\nnumber, or the name of the DataWindow control containing the graph\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control containing the series\nseriesname\nA string whose value is the name of the series for which you want the\nnumber\nReturn value\nInteger.\nReturns the number of the series named in seriesname in the graph controlname, or if\ncontrolname is a DataWindow control, in graphcontrol. If an error occurs, FindSeries returns\n-1. If any argument's value is null, FindSeries returns null.\nUsage\nMost of the series manipulation functions require a series number, rather than a name.\nHowever, when you delete and insert series, existing series are renumbered so that the series\nare numbered consecutively. Use FindSeries when you know only a series' name or when the\nnumbering may have changed.\n"}
{"page": 617, "text": "Statements, Events, and Functions\nPage 617\nExamples\nThese statements store the number of the series in the graph gr_product_data that was entered\nin the SingleLineEdit sle_series in SeriesNbr:\ninteger SeriesNbr\nSeriesNbr = &\n      gr_product_data.FindSeries(sle_series.Text)\nThese statements obtain the number of the series named PCs in the graph gr_computers in the\nDataWindow control dw_equipment and store it in SeriesNbr:\ninteger SeriesNbr\nSeriesNbr = &\n      dw_equipment.FindSeries(\"gr_computers\", \"PCs\")\nSee also\nAddSeries\nDeleteSeries\nFindCategory\n2.4.194 FindTypeDefinition\nDescription\nSearches for a type in one or more PowerBuilder libraries (PBLs) and provides information\nabout its type definition. You can also get type definitions for system types.\nSyntax\nFindTypeDefinition ( typename {, librarylist } )\nTable 2.590:\nArgument\nDescription\ntypename\nThe name of a simple datatype, enumerated datatype, or class for which\nyou want information. To find a type definition for a nested type, use this\nform:\nlibraryEntryName`typename\nlibrarylist\n(optional)\nAn array of strings whose values are the fully qualified pathnames of\nPBLs. If you omit librarylist, FindTypeDefinition searches the library list\nassociated with the running application.\nPowerBuilder also searches its own libraries for built-in definitions, such\nas enumerated datatypes and system classes.\nReturn value\nTypeDefinition. Returns an object reference with information about the definition of\ntypename. If any arguments are null, FindTypeDefinition returns null.\nUsage\n"}
{"page": 618, "text": "Statements, Events, and Functions\nPage 618\nThe returned TypeDefinition object is a ClassDefinition, SimpleTypeDefinition, or\nEnumerationDefinition object. You can test the Category property to find out which one it is.\nIf you want to get information for a class, call FindClassDefinition instead. The\narguments are the same and you are saved the step of checking that the returned object is a\nClassDefinition object.\nIf you want to get information for a global function, call FindFunctionDefinition.\nExamples\nThis example gets a TypeDefinition object for the grGraphType enumerated datatype. It\nchecks the category of the type definition and, since it is an enumeration, assigns it to an\nEnumerationDefinition object type and saves the name in a string:\nTypeDefinition td_graphtype\nEnumerationDefinition ed_graphtype\nstring enumname\n \ntd_graphtype = FindTypeDefinition(\"grgraphtype\")\nIF td_graphtype.Category = EnumeratedType! THEN\n      ed_graphtype = td_graphtype\n      enumname = ed_graphtype.Enumeration[1].Name\nEND IF\nThis example is a function that takes a definition name as an argument. The argument is\ntypename. It finds the named TypeDefinition object, checks its category, and assigns it to the\nappropriate definition object:\nTypeDefinition td_def\nSimpleTypeDefinition std_def\nEnumerationDefinition ed_def\nClassDefinition cd_def\n \ntd_def = FindTypeDefinition(typename)\nCHOOSE CASE td_def.Category\nCASE SimpleType!\n      std_def = td_def\nCASE EnumeratedType!\n      ed_def = td_def\nCASE ClassOrStructureType!\n      cd_def = td_def\nEND CHOOSE\nThis example searches the libraries in the array ls_libraries to find the class definition for\nw_genapp_frame:\nTypeDefinition td_windef\nstring ls_libraries[ ]\n \nls_libraries[1] = \"c:\\pwrs\\bizapp\\windows.pbl\"\nls_libraries[2] = \"c:\\pwrs\\framewk\\windows.pbl\"\nls_libraries[3] = \"c:\\pwrs\\framewk\\ancestor.pbl\"\n \ntd_windef = FindTypeDefinition(\"w_genapp_frame\", ls_libraries)\nSee also\nFindClassDefinition\nFindFunctionDefinition\n"}
{"page": 619, "text": "Statements, Events, and Functions\nPage 619\nFindMatchingFunction\n2.4.195 FromAnsi\nDescription\nConverts a blob containing an ANSI character string to a Unicode string.\nSyntax\nFromAnsi ( blob )\nTable 2.591:\nArgument\nDescription\nblob\nA blob containing an ANSI character string you want to convert to a\nUnicode string\nReturn value\nString.\nReturns a character string if it succeeds and an empty string if it fails.\nUsage\nThe FromAnsi function converts an ANSI character string contained in a blob to a Unicode\ncharacter string.\nFromAnsi has the same result as String(blob, EncodingANSI!) and will be obsolete in a\nfuture release of PowerBuilder.\nUnicode file format\nUnicode files sometimes have two extra bytes at the start of the file to indicate that\nthey are Unicode files.\nSee also\nFromUnicode\nString\nToAnsi\nToUnicode\n2.4.196 FromUnicode\nDescription\nConverts a blob containing a Unicode character string to a string in the file format of the\ncurrent version of PowerBuilder.\nSyntax\nFromUnicode ( blob )\n"}
{"page": 620, "text": "Statements, Events, and Functions\nPage 620\nTable 2.592:\nArgument\nDescription\nblob\nA blob containing a Unicode character string you want to convert to a\nstring in the file format of the current version of PowerBuilder\nReturn value\nString.\nReturns a character string if it succeeds and an empty string if it fails.\nUsage\nThe FromUnicode function converts a Unicode blob to a Unicode character string and\nhas the same result as String(blob). This function will be obsolete in a future release of\nPowerBuilder.\nUnicode file format\nUnicode files sometimes have two extra bytes at the start of the file to indicate that\nthey are Unicode files. If you are opening a Unicode file in stream mode, skip the first\ntwo bytes if they are present.\nSee also\nFromAnsi\nToAnsi\nToUnicode\n2.4.197 GarbageCollect\nDescription\nForces immediate garbage collection.\nSyntax\nGarbageCollect ( )\nReturn value\nNone\nUsage\nForces garbage collection to occur immediately. PowerBuilder makes a pass to identify\nunused objects, including those with circular references, then deletes unused objects and\nclasses.\nExamples\nThis statement initiates garbage collection:\nGarbageCollect()\nSee also\n"}
{"page": 621, "text": "Statements, Events, and Functions\nPage 621\nGarbageCollectGetTimeLimit\nGarbageCollectSetTimeLimit\n2.4.198 GarbageCollectGetTimeLimit\nDescription\nGets the current minimum interval for garbage collection.\nSyntax\nGarbageCollectGetTimeLimit ( )\nReturn value\nLong.\nReturns the current minimum garbage collection interval.\nUsage\nReads the current minimum period between garbage collection passes.\nExamples\nThis statement returns the interval between garbage collection passes in the variable\nCollectTime:\nlong CollectTime\n \nCollectTime = GarbageCollectGetTimeLimit()\nSee also\nGarbageCollect\nGarbageCollectSetTimeLimit\n2.4.199 GarbageCollectSetTimeLimit\nDescription\nSets the minimum interval between garbage collection passes.\nSyntax\nGarbageCollectSetTimeLimit ( newtimeinmilliseconds )\nTable 2.593:\nArgument\nDescription\nnewtimeinmilliseconds\nA long (in milliseconds) that you want to set as the minimum period\nbetween garbage collection cycles.\nIf null, the existing interval is not changed.\nReturn value\nLong.\n"}
{"page": 622, "text": "Statements, Events, and Functions\nPage 622\nReturns the interval that existed before this function was called. If newTime is null, then null\nis returned and the current interval is not changed.\nUsage\nSpecifies the minimum interval between garbage collection passes: garbage collection\npasses will not happen before this interval has expired. Garbage collection can effectively\nbe disabled by setting the minimum limit to a very large number. If garbage collection is\ndisabled, unused classes will not be flushed out of the class cache.\nExamples\nThis example sets the interval between garbage collection passes to 1 second and sets the\nvariable OldTime to the length of the previous interval:\nlong OldTime, NewTime\nNewTime = 1000 /* 1 second */\nOldTime = GarbageCollectSetTimeLimit(NewTime)\nSee also\nGarbageCollect\nGarbageCollectGetTimeLimit\n2.4.200 GetAccessToken\nDescription\nGets the access token returned by the authorization server.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetAccessToken ( )\nTable 2.594:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\naccess token.\nReturn value\nString.\nReturns the access token if it succeeds and empty string (\"\") if an error occurs.\nExamples\nThe following example shows the use of the GetAccessToken function to get the access\ntoken:\nstring ls_accesstoken\nTokenResponse lnv_TokenResponse\n"}
{"page": 623, "text": "Statements, Events, and Functions\nPage 623\nls_accesstoken = lnv_TokenResponse.getaccesstoken()\nSee also\nGetBody\nGetExpiresIn\nGetHeader\nGetHeaders\nGetRefreshToken\nGetStatusCode\nGetStatusText\nGetTokenError\nGetTokenType\n2.4.201 GetActiveCategory\nDescription\nGets the active category in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetActiveCategory ( ref RibbonCategoryItem Item )\nTable 2.595:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItem\nA RibbonCategoryItem variable in which you want to store the active\ncategory.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThe following code example gets a copy of the active category and stores it in the\nlr_Category variable.\nInteger li_Return\nLong ll_Handle\nRibbonCategoryItem lr_Category\nll_Handle = rbb_1.InsertCategoryFirst(\"MyCategory\")\nli_Return = rbb_1.GetActiveCategory(lr_Category)\n"}
{"page": 624, "text": "Statements, Events, and Functions\nPage 624\nSee also\nInsertCategory\nInsertCategoryFirst\nInsertCategoryLast\nDeleteCategory\nSetCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nSetActiveCategory\n2.4.202 GetActiveSheet\nDescription\nReturns the currently active sheet in an MDI frame window.\nApplies to\nMDI frame windows\nSyntax\nmdiframewindow.GetActiveSheet ( )\nTable 2.596:\nArgument\nDescription\nmdiframewindow The MDI frame window for which you want the active sheet\nReturn value\nWindow. Returns the sheet that is currently active in mdiframewindow. If no sheet is active,\nGetActiveSheet returns an invalid value. If mdiframewindow is null, GetActiveSheet returns\nnull.\nUsage\nUse the IsValid function to determine whether GetActiveSheet has returned a valid window\nvalue.\nExamples\nThese statements determine the active sheet in the MDI frame window w_frame and change\nthe text of the menu selection m_close on the menu m_file on the menu bar m_main. If no\nsheet is active, the text is Close Window:\n// Declare variable for active sheet\nwindow activesheet\nstring mtext\n \n"}
{"page": 625, "text": "Statements, Events, and Functions\nPage 625\nactivesheet = w_frame.GetActiveSheet()\nIF IsValid(activesheet) THEN\n    // There is an active sheet, so get its title;\n    // change the text of the menu to read\n    // Close plus the title of the active sheet\n    mtext = \"Close \" + activesheet.Title\n    m_main.m_file.m_close.Text = mtext\n \nELSE\n    // No sheet is active, menu says Close Window\n    m_main.m_file.m_close.Text = \"Close Window\"\nEND IF\nSee also\nIsValid\n2.4.203 GetAlignment\nDescription\nObtains the alignment of the paragraph containing the insertion point in a RichTextEdit\ncontrol.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.GetAlignment ( )\nTable 2.597:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to find out the\nalignment of the paragraph containing the insertion point\nReturn value\nAlignment. A value of the Alignment enumerated datatype indicating the alignment of the\nparagraph containing the insertion point.\nUsage\nWhen several paragraphs are selected, the insertion point is at the beginning or end of the\nselection, depending on how the user made the selection. The value reported depends on the\nlocation of the insertion point.\nExamples\nThis examples saves the alignment setting of the paragraph that contains the insertion point:\nalignment l_align\nl_align = rte_1.GetAlignment()\nSee also\nGetSpacing\n"}
{"page": 626, "text": "Statements, Events, and Functions\nPage 626\nGetTextStyle\nSetAlignment\nSetSpacing\nSetTextStyle\n2.4.204 GetApplication\nDescription\nGets the handle of the current Application object so you can get and set properties of the\napplication.\nSyntax\nGetApplication ( )\nReturn value\nApplication. Returns the handle of the current application object.\nUsage\nThe GetApplication function lets you write generic code for an application, making it\nreusable in other applications. You do not have to code the actual name of the application\nwhen you want to set application properties.\nExamples\nTo change whether Toolbar Tips are displayed, you can get the handle of the application\nobject and set the ToolbarTips property:\napplication app\napp = GetApplication()\napp.ToolbarTips = FALSE\nThe previous example could be coded more simply as follows:\nGetApplication().ToolbarTips = FALSE \n2.4.205 GetApplicationButton\nDescription\nGets the application button of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetApplicationButton ( ref RibbonApplicationButtonItem Item )\nTable 2.598:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 627, "text": "Statements, Events, and Functions\nPage 627\nArgument\nDescription\nItem\nA RibbonApplicationButtonItem variable in which you want to store the\napplication button.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nOnly one application button is allowed in a ribbon bar, therefore, you can directly get (set\nor remove) the application button without needing to insert the application button first or\nidentify the application button by its handle.\nExamples\nThis example sets the Text property of the application button to \"MyApp\" and then gets a\ncopy of the application button and stores it in the lr_AppButton2 variable.\nInteger li_Return\nRibbonApplicationButtonItem lr_AppButton, lr_AppButton2\nlr_AppButton.Text = \"MyApp\"\nli_Return = rbb_1.SetApplicationButton(lr_AppButton)\nli_Return = rbb_1.GetApplicationButton(lr_AppButton2)\nSee also\nRemoveApplicationButton\nSetApplicationButton\n2.4.206 GetArgElement\nDescription\nReturns the value in the specified argument.\nApplies to\nWindow ActiveX controls\nSyntax\nactivexcontrol.GetArgElement ( index )\nTable 2.599:\nArgument\nDescription\nactivexcontrol\nIdentifier for the instance of the PowerBuilder window ActiveX control.\nWhen used in HTML, the ActiveX control is the NAME attribute of\nthe OBJECT element. When used in other environments, references the\ncontrol that contains the PowerBuilder window ActiveX.\nindex\nInteger specify the argument to return.\n"}
{"page": 628, "text": "Statements, Events, and Functions\nPage 628\nReturn value\nAny.\nReturns the specified argument.\nUsage\nCall this function after calling InvokePBFunction or TriggerPBEvent to access the updated\nvalue in an argument passed by reference.\nJavaScript scripts must use this function to access arguments passed by reference. VBScript\nscripts can use this function if they established the argument list via calls to SetArgElement.\nExamples\nThis JavaScript example calls the GetArgElement function:\n...\n    theArg = f.textToPB.value;\n    PBRX1.SetArgElement(1, theArg);\n    theFunc = \"of_argref\";\n    retcd = PBRX1.InvokePBFunction(theFunc, numargs);\n    rc = parseInt(PBRX1.GetLastReturn());\n    \n    IF (rc != 1) {\n    alert(\"Error. Empty string.\");\n    }\n    backByRef = PBRX1.GetArgElement(1);\n...\nSee also\nGetLastReturn\nInvokePBFunction\nSetArgElement\nTriggerPBEvent\n2.4.207 GetAutomationNativePointer\nDescription\nGets a pointer to the OLE object associated with the OLEObject variable. The pointer lets\nyou call OLE functions in an external DLL for the object.\nApplies to\nOLEObject\nSyntax\noleobject.GetAutomationNativePointer ( pointer )\nTable 2.600:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable containing the object for which you\nwant the native pointer.\n"}
{"page": 629, "text": "Statements, Events, and Functions\nPage 629\nArgument\nDescription\npointer\nAn UnsignedLong variable in which you want to store the pointer. If\nGetAutomationNativePointer cannot get a valid pointer, pointer is set to\n0.\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if an error occurs.\nUsage\nPointer is a pointer to OLE's IUnknown interface. You can use it with the\nOLE QueryInterface function to get other interface pointers. When you call\nGetAutomationNativePointer, PowerBuilder calls OLE's AddRef function, which locks the\npointer. You can release the pointer in your DLL function or in a PowerBuilder script with\nthe ReleaseAutomationNativePointer function.\nThis function is useful only for external DLL calls. It is not related to the\nSetAutomationPointer function.\nExamples\nThis example creates an OLEObject object, connects to an automation server, and gets a\npointer for making external function calls. After processing, the pointer is released:\nOLEObject oleobj_report\nUnsignedLong lul_oleptr\ninteger li_rtn\n \noleobj_report = CREATE OLEObject\noleobj_report.ConnectToObject(\"report.doc\")\nli_rtn = &\noleobj_report.GetAutomationNativePointer(lul_oleptr)\nIF li_rtn = 0 THEN\n    ... // Call external functions for automation\n    oleobj_report.&\n    ReleaseAutomationNativePointer(lul_oleptr)\nEND IF\nSee also\nGetNativePointer\nReleaseAutomationNativePointer\nReleaseNativePointer\n2.4.208 GetBestHeight\nDescription\nGets the height of the RibbonBar control which is automatically adjusted to best fit the\ncontent (when AutosizeHeight is enabled).\nApplies to\nRibbonBar control\n"}
{"page": 630, "text": "Statements, Events, and Functions\nPage 630\nSyntax\ncontrolname.GetBestHeight ( )\nReturn value\nInteger.\nReturns the height of the RibbonBar control, in PowerBuilder units. If any argument's value\nis null, returns null.\nExamples\nInteger li_Height\nli_Height = rbb_1.GetBestHeight()\n2.4.209 GetBody\n2.4.209.1 Syntax 1: for TokenResponse objects\nDescription\nGets the response body into a string.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetBody ( string data )\nTable 2.601:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\nresponse body.\ndata\nA string variable into which the function returns data.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetBody function to get the response body:\nint li_return\nstring ls_data\nTokenResponse lnv_tokenResponse\nli_return = lnv_tokenResponse.getbody(ls_data)\nSee also\nGetAccessToken\n"}
{"page": 631, "text": "Statements, Events, and Functions\nPage 631\nGetExpiresIn\nGetHeader\nGetHeaders\nGetRefreshToken\nGetStatusCode\nGetStatusText\nGetTokenError\nGetTokenType\n2.4.209.2 Syntax 2: for OAuthRequest objects\nDescription\nGets the body into a string.\nApplies to\nOAuthRequest object\nSyntax\nobjectname.GetBody ( string data )\nobjectname.GetBody ( blob data )\nobjectname.GetBody ( string data, encoding encodingType )\nTable 2.602:\nArgument\nDescription\nobjectname\nA reference to the OAuthRequest object in which you want to get the\nbody.\ndata\nA string or blob variable into which the function returns data.\nThe following data encodings are supported: EncodingANSI!,\nEncodingUTF8!, EncodingUTF16LE! and EncodingUTF16BE!.\nencodingType\nAn encoding value specifying the data which is converted to\nEncodingUTF16LE!.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetBody function to get the response body of\nstring data type:\nint li_return\n"}
{"page": 632, "text": "Statements, Events, and Functions\nPage 632\nstring ls_data\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.getbody(ls_data)\nThe following example shows the use of the GetBody function to get the response body of\nstring data type in encodingUTF8!:\nint li_return\nstring ls_data\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.getbody(ls_data, encodingUTF8!)\nThe following example shows the use of the GetBody function to get the response body of\nblob data type:\nint li_return\nblob lblb_data\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.getbody(lblb_data)\nSee also\nClearHeaders\nGetHeader\nGetHeaders\nSetAccessToken\nSetBody\nSetHeader\nSetHeaders\n2.4.209.3 Syntax 3: for ResourceResponse objects\nDescription\nGets the response body into a string.\nApplies to\nResourceResponse object\nSyntax\nobjectname.GetBody ( string data )\nobjectname.GetBody ( blob data )\nobjectname.GetBody ( string data, encoding encodingType )\nTable 2.603:\nArgument\nDescription\nobjectname\nA reference to the ResourceResponse object in which you want to get the\nresponse body.\n"}
{"page": 633, "text": "Statements, Events, and Functions\nPage 633\nArgument\nDescription\ndata\nA string or blob variable into which the function returns data.\nThe following data encodings are supported: EncodingANSI!,\nEncodingUTF8!, EncodingUTF16LE! and EncodingUTF16BE!.\nencodingType\nAn encoding value specifying the data which is converted to\nEncodingUTF16LE!.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetBody function to get the response body of\nstring data type:\nint li_return\nstring ls_data\nResourceResponse lnv_ResourceResponse\nli_return = lnv_ResourceResponse.getbody(ls_data)\nThe following example shows the use of the GetBody function to get the response body of\nstring data type in encodingUTF8!:\nint li_return\nstring ls_data\nResourceResponse lnv_ResourceResponse\nli_return = lnv_ResourceResponse.getbody(ls_data, encodingUTF8!)\nThe following example shows the use of the GetBody function to get the response body of\nblob data type:\nint li_return\nblob lblb_data\nResourceResponse lnv_ResourceResponse\nli_return = lnv_ResourceResponse.getbody(lblb_data)\nSee also\nGetHeader\nGetHeaders\nGetStatusCode\nGetStatusText\n2.4.210 GetBoxPictureList \nDescription\nGets the list of picture files that are set for the items in the ribbon combo box.\n"}
{"page": 634, "text": "Statements, Events, and Functions\nPage 634\nApplies to\nRibbonComboBoxItem control\nSyntax\ncontrolname.GetBoxPictureList ( )\nTable 2.604:\nArgument\nDescription\ncontrolname\nThe name of the RibbonComboBoxItem control\nReturn value\nString.\nReturns the current picture list with full paths. Multiple pictures are separated by commas.\nExamples\nThis example sets two built-in picture files for the items in the ribbon combo box and then\ngets the list of picture files of the combo box.\nInteger li_Return\nString ls_PictureList\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.SetBoxPictureList (\"PaperSizeA0Small!, PaperSizeA1Small!\")\nls_PictureList = lr_ComboBox.GetBoxPictureList()\nSee also\nSetBoxPictureList\n2.4.211 GetByte\nDescription\nExtracts data of type Byte from a blob variable.\nSyntax\nGetByte ( blobvariable, n, b )\nTable 2.605:\nArgument\nDescription\nblobvariable\nA variable of the Blob datatype from which you want to extract a value of\nthe Byte datatype\nn\nTthe number of the position in blobvariable at which you want to retrieve\na value of the Byte datatype\nb\nVariable of the Byte datatype in which you want to store the returned\ndata of type Byte\nReturn value\n"}
{"page": 635, "text": "Statements, Events, and Functions\nPage 635\nInteger.\nReturns 1 if it succeeds or -1 if n exceeds the scope of blobvariable; it returns null if the value\nof any of its arguments is null.\nUsage\nIf you want to get the value of the initial character in a blob, you can use the Byte function\nwithout using an argument defining the position of the character.\nExamples\nThis example converts the text in a SingleLineEdit to a blob before obtaining the byte value\nof the character at the third position:\nInt li_rtn\nByte lb_byte\nBlob myBlob\nmyBlob = Blob (sle_1.text, EncodingUTF8!)\nli_rtn = GetByte(myBlob, 3, lb_byte)\nmessagebox(\"getbyte\", string(lb_byte))\nSee also\nByte\nSetByte\n2.4.212 GetByteArray\nDescription\nObtains an array of Byte values stored in a blob.\nSyntax\nGetByteArray ( input )\nTable 2.606:\nArgument\nDescription\ninput\nA Blob datatype that you want to return as an array of bytes.\nReturn value\nAny.\nReturns the value of the input variable as an array of Byte datatypes if it succeeds; it returns 0\nif the input variable is not a valid blob.\nUsage\nThe returned value can be assigned directly to a byte array.\nExamples\nThis example converts a blob passed in an argument to an array of bytes:\nByte ly_byte[]\n"}
{"page": 636, "text": "Statements, Events, and Functions\nPage 636\nly_byte[] = GetByteArray(blobarg)\nSee also\nBlob\nGetByte\n2.4.213 GetCategory\nDescription\nGets the category according to its handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetCategory ( Long ItemHandle, ref RibbonCategoryItem Item )\nTable 2.607:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the category you want to obtain.\nItem\nA RibbonCategoryItem variable in which you want to store the category\nidentified by the item handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get the category according to its index by using the GetCategoryByIndex\nfunction.\nYou can also get an item according to the handle by using the GetItem function.\nExamples\nThe following code example inserts a \"MyCategory\" category and then gets a copy of the\ncategory by handle and stores it in the lr_Category variable.\nInteger li_Return\nLong ll_Handle\nRibbonCategoryItem lr_Category\nll_Handle = rbb_1.InsertCategoryLast (\"MyCategory\")\nli_Return = rbb_1.GetCategory (ll_Handle, lr_Category)\nSee also\nInsertCategory\n"}
{"page": 637, "text": "Statements, Events, and Functions\nPage 637\nInsertCategoryFirst\nInsertCategoryLast\nDeleteCategory\nSetCategory\nGetCategoryByIndex\nGetCategoryCount\nSetActiveCategory\nGetActiveCategory\n2.4.214 GetCategoryByIndex\nDescription\nGets the category according to its index in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetCategoryByIndex ( Long Index, ref RibbonCategoryItem Item )\nTable 2.608:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nIndex\nThe index of the category which you want to obtain.\nItem\nA RibbonCategoryItem variable in which you want to store the category\nidentified by the index.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get the category according to its handle by using the GetCategory function or\nthe GetItem function.\nExamples\nThe following code example gets a copy of the category whose index number is 1 and stores\nthe copy in the lr_Category variable.\nInteger li_Return\nLong ll_Handle\nRibbonCategoryItem lr_Category\nll_Handle = rbb_1.InsertCategoryLast (\"MyCategory\")\n"}
{"page": 638, "text": "Statements, Events, and Functions\nPage 638\nli_Return = rbb_1.GetCategoryByIndex (1, lr_Category)\nSee also\nInsertCategory\nInsertCategoryFirst\nInsertCategoryLast\nDeleteCategory\nSetCategory\nGetCategory\nGetCategoryCount\nGetCategoryIndex\nSetActiveCategory\nGetActiveCategory\n2.4.215 GetCategoryCount\nDescription\nDetermines the total number of categories in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetCategoryCount ( )\nTable 2.609:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nReturn value\nLong.\nReturns the total number of categories in RibbonBar. If RibbonBar contains no categories,\nreturns 0. If an error occurs, returns -1.\nExamples\nLong ll_Return\nll_Return = rbb_1.GetCategoryCount()\nSee also\nInsertCategory\nInsertCategoryFirst\nInsertCategoryLast\n"}
{"page": 639, "text": "Statements, Events, and Functions\nPage 639\nDeleteCategory\nSetCategory\nGetCategory\nGetCategoryByIndex\nSetActiveCategory\nGetActiveCategory\n2.4.216 GetCategoryIndex\nDescription\nGets the index of the category in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetCategoryIndex ( Long ItemHandle )\nTable 2.610:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle for the category you want to obtain the index.\nReturn value\nLong.\nReturns the index of the category if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nExamples\nThis example gets the index number of \"MyCategory2\".\nLong ll_Return\nLong ll_Handle, ll_Handle2\nRibbonCategoryItem lr_Category\nll_Handle = rbb_1.InsertCategoryFirst(\"MyCategory1\")\nll_Handle2 = rbb_1.InsertCategoryLast(\"MyCategory2\")\nll_Return = rbb_1.GetCategoryIndex(ll_Handle2)\nSee also\nInsertCategory\nInsertCategoryFirst\nInsertCategoryLast\nDeleteCategory\n"}
{"page": 640, "text": "Statements, Events, and Functions\nPage 640\nSetCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nSetActiveCategory\nGetActiveCategory\n2.4.217 GetCertificateLabel (obsolete)\nDescription\nCalled by EAServer to allow the user to select one of the available SSL certificate labels for\nauthentication. This function is used by PowerBuilder clients connecting to EAServer.\nObsolete function\nGetCertificateLabel is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nSSLCallBack objects\nSyntax\nsslcallback.GetCertificateLabel ( thesessioninfo, labels )\nTable 2.611:\nArgument\nDescription\nsslcallback\nAn instance of a customized SSLCallBack object.\nthesessioninfo\nA CORBAObject that contains information about the SSL session. This\ninformation can optionally be displayed to the user to provide details\nabout the session.\nlabels\nAn array of string values that contains the available certificate labels. The\nuser must select one of these labels.\nReturn value\nString.\nReturns one of the labels passed to the function.\nUsage\nA PowerBuilder application does not usually call the GetCertificateLabel function directly.\nGetCertificateLabel is called by EAServer when an EAServer client has not specified a\ncertificate label for an SSL connection that requires it.\nTo override the behavior of any of the functions of the SSLCallBack object, create a standard\nclass user object that descends from SSLCallBack and customize this object as necessary.\n"}
{"page": 641, "text": "Statements, Events, and Functions\nPage 641\nTo let EAServer know which object to use when a callback is required, specify the name of\nthe object in the callbackImpl SSL property. You can set this property value by calling the\nSetGlobalProperty function.\nIf you do not provide an implementation of GetCertificateLabel, EAServer receives the\nCORBA::NO_IMPLEMENT exception and the default implementation of this callback is\nused. The default implementation always returns the first certificate in the list of labels. If no\nlabels are supplied, the CtsSecurity::NoCertificateException is raised. Any exceptions that\nmay be raised by the function should be added to its prototype.\nIf your implementation of the callback returns an empty string, the default implementation\ndescribed above is used and the first certificate label in the list is returned. If the server\nrequires mutual authentication and that certificate is acceptable to the server, the connection\nproceeds. If the certificate is not acceptable, the connection is refused.\nTo obtain a useful return value, provide the user with available certificate labels from the\nlabels array passed to the function and ask the user to select one of them. You can also supply\nadditional information obtained from the passed thesessioninfo object.\nYou can enable the user to cancel the attempt to connect by throwing an exception\nin this callback function. All exceptions thrown in SSLCallback functions return a\nCTSSecurity::UserAbortedException to the server. You need to catch the exception by\nwrapping the ConnectToServer function in a try-catch block.\nExamples\nThis example checks whether any certificate labels are available. To give the user more\ncontext, it displays host and port information obtained from the SSL session information\nobject in the message box that informs the user that no certificates are available. If certificates\nare available, it opens a response window that displays available certificate labels.\nThe response window returns the text of the selected item using CloseWithReturn:\nint   idx, numLabels\nlong rc\nString ls_rc, sText, sLocation\nw_response w_ssl_response\nCTSSecurity_sslSessionInfo mySessionInfo\nrc = thesessioninfo._narrow(mySessionInfo, &\n   \"SessionInfo\" )\nsLocation = mySessionInfo.getProperty( \"host\" ) + &\n   \":\" + mySessionInfo.getProperty( \"port\" )\nnumLabels = upperbound(labels)\nIF numLabels <= 0 THEN\n  MessageBox (\"Personal certificate required\",  &\n  \"A certificate is required for connection to \" &\n    + sLocation + \"~nNo certificates are available\")\n  ls_rc = \"\"\n    ELSE  \n  sText = \"Available certificates: \"\n  FOR idx=1 to numLabels\n    sText += \"~nCertificate[\" + &  \n      string(idx) + \"]: \" + labels[idx]\n  NEXT\n  OpenWithParm( w_ssl_response, SText )\n  ls_rc = Message.StringParm\n  IF ls_rc = \"cancel\" then \n"}
{"page": 642, "text": "Statements, Events, and Functions\nPage 642\n     userabortedexception uae\n     uae = create userabortedexception\n     uae.setmessage(\"User cancelled connection\" &\n      + \" when asked for certificate\")\n     throw uae\n  END IF\nEND IF\nRETURN ls_rc\nSee also\nConnectToServer (obsolete)\nGetCredentialAttribute (obsolete)\nGetPin (obsolete)\nTrustVerify (obsolete)\n2.4.218 GetCheckBox\nDescription\nGets the check box according to the handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetCheckBox ( Long ItemHandle, ref RibbonCheckBoxItem Item )\nTable 2.612:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle for the check box you want to obtain.\nItem\nA RibbonCheckBoxItem variable in which you want to store the check\nbox identified by the item handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get an item according to the handle by using the GetItem function.\nExamples\nThe following code example inserts a \"MyCheckBox\" check box to the \"MyPanel\" panel and\nthen gets a copy of the check box according to its handle and stores it in the lr_CheckBox\nvariable.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_CheckBox\n"}
{"page": 643, "text": "Statements, Events, and Functions\nPage 643\nRibbonCheckBoxItem lr_CheckBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_CheckBox = rbb_1.InsertCheckBoxFirst (ll_Handle_Panel, \"MyCheckBox\",\n \"Ue_CheckBoxClicked\")\nli_Return = rbb_1.GetCheckBox (ll_Handle_CheckBox, lr_CheckBox)\nSee also\nInsertCheckBox\nInsertCheckBoxFirst\nInsertCheckBoxLast\nDeleteCheckBox\nSetCheckBox\nGetChildItemByIndex\n2.4.219 GetChildCount\nDescription\nGets the child item count in a JSON parser object.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetChildCount ( ParentItemHandle )\nobjectname.GetChildCount ( ParentItemPath )\nTable 2.613:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item count you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem or\nJsonArrayItem type.\nParentItemPath\nA string whose value is the path of the parent item of JsonObjectItem or\nJsonArrayItem type. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nLong.\nReturns the child item count if it succeeds and -1 if an error occurs. If any argument's value is\nnull, the method returns null.\nExample 1\n"}
{"page": 644, "text": "Statements, Events, and Functions\nPage 644\nThis example gets the total number of child items according to the parent item handle and\nthen gets the values of child items in a loop:\nJsonParser lnv_JsonParser\nLong ll_RootObject, ll_ChildCount, ll_Index\nString ls_Json, ls_key\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true}'\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_ChildCount = lnv_JsonParser.GetChildCount(ll_RootObject)\n// Obtains the values of child items\nfor ll_Index = 1 to ll_ChildCount\n ls_key = lnv_JsonParser.GetChildKey(ll_RootObject, ll_Index)\nnext\nExample 2\nThis example gets the total number of child items according to the parent item handle and\nthen gets the value of every array item in a loop:\nString ls_Json, ls_Name\nLong ll_ChildCount, ll_Index, ll_Id, ll_ArrayItem, ll_ObjectItem\nDatetime ldt_Birthday\nJsonParser lnv_JsonParser\nlnv_JsonParser = Create JsonParser\nls_Json = '[{\"id\":1, \"name\":\"evan1\", \"birthday\":2340323884}, {\"id\":2,\n \"name\":\"evan2\", \"birthday\":5340324801}]'\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nLong ll_ArrayItem = lnv_JsonParser.GetRootItem() // Root item is JsonArrayItem!\nll_ChildCount = lnv_JsonParser.GetChildCount(ll_ArrayItem)\n// Gets the array item in a loop\nfor ll_Index = 1 to ll_ChildCount\n // Gets the array item\n Long ll_ObjectItem = lnv_JsonParser.GetChildItem(ll_ArrayItem, ll_Index)\n // Array item is JsonObjectItem!\n if lnv_JsonParser.GetItemType(ll_ObjectItem) = JsonObjectItem! then\n  ll_Id = lnv_JsonParser.GetItemNumber(ll_ObjectItem, \"id\")\n  ls_Name = lnv_JsonParser.GetItemString(ll_ObjectItem, \"name\")\n  ldt_Birthday = lnv_JsonParser.GetItemDateTime(ll_ObjectItem, \"birthday\")\n end if\n ...\nnext\nExample 3\nThis example gets the total number of child items according to the parent item path and then\ngets the value of every array item in a loop:\nString ls_Json, ls_Name, ls_RootPath, ls_ArrayPath, ls_ChildPath\nLong ll_ChildCount, ll_Index, ll_Id\nDatetime ldt_Birthday\nJsonParser lnv_JsonParser\n"}
{"page": 645, "text": "Statements, Events, and Functions\nPage 645\nlnv_JsonParser = Create JsonParser\nls_Json = '[{\"id\":1, \"name\":\"evan1\", \"birthday\":2340323884}, {\"id\":2,\n \"name\":\"evan2\", \"birthday\":5340324801}]'\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nls_RootPath = \"/\"\nll_ChildCount = lnv_JsonParser.GetChildCount(ls_RootPath)\n// Gets the array item in a loop\nfor ll_Index = 1 to ll_ChildCount\n  // Gets the array item\n  ls_ArrayPath = ls_RootPath + String(ll_Index)\n  // Array item is JsonObjectItem!\n  if lnv_JsonParser.GetItemType(ls_ArrayPath) = JsonObjectItem! then\n  ls_ChildPath = ls_ArrayPath + \"/\" + \"id\"\n  ll_Id = lnv_JsonParser.GetItemNumber(ls_ChildPath)\n  ls_ChildPath = ls_ArrayPath + \"/\" + \"name\"\n  ls_Name = lnv_JsonParser.GetItemString(ls_ChildPath)\n  ls_ChildPath = ls_ArrayPath + \"/\" + \"birthday\"\n  ldt_Birthday = lnv_JsonParser.GetItemDateTime(ls_ChildPath)\n  end if\n  //...\nnext\nSee also\nGetChildItem\nGetChildKey\n2.4.220 GetChildItem\nDescription\nGets the handle of the child item in a JSON parser object.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetChildItem ( ParentItemHandle, Index )\nobjectname.GetChildItem ( ParentItemPath, Index )\nTable 2.614:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item handle you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem or\nJsonArrayItem type.\nParentItemPath\nA string whose value is the path of the parent item of JsonObjectItem or\nJsonArrayItem type. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\n"}
{"page": 646, "text": "Statements, Events, and Functions\nPage 646\nArgument\nDescription\nIndex\nA long whose value is the index of the child item.\nReturn value\nLong.\nReturns the handle of the child item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, the method returns null.\nExamples\nThis example gets the child item of department_array according to the parent item handle and\nthe child item index:\nJsonParser lnv_JsonParser\nlnv_JsonParser = create JsonParser\nString ls_Json, ls_name, ls_deptname\nLong ll_id, ll_number\nLong ll_RootObject, ll_department_array, ll_number_item, ll_object_item\nBoolean lb_active\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true, \"department_array\":[999999,\n {\"name\":\"Website\"}, {\"name\":\"PowerBuilder\"}, {\"name\":\"IT\"}]}'\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\n// Gets the root item\nll_id = lnv_JsonParser.GetItemNumber(ll_RootObject, \"id\")\nls_name = lnv_JsonParser.GetItemString(ll_RootObject, \"name\")\nlb_active = lnv_JsonParser.GetItemBoolean(ll_RootObject, \"active\")\n// Get the child item of department_array\nll_department_array = lnv_JsonParser.GetItemArray(ll_RootObject,\n \"department_array\")\nll_number_item = lnv_JsonParser.GetChildItem(ll_department_array, 1)\nll_number = lnv_JsonParser.GetItemNumber(ll_number_item)\nll_object_item = lnv_JsonParser.GetChildItem(ll_department_array, 2)\nls_deptname = lnv_JsonParser.GetItemString(ll_object_item, \"name\")\n\u2026\nThis example gets the child item of department_array according to the parent item path and\nthe child item index:\nJsonParser lnv_JsonParser\nlnv_JsonParser = create JsonParser\nString ls_Json, ls_name, ls_deptname, ls_RootPath, ls_ChildPath\nLong ll_id, ll_number\nLong ll_number_item, ll_object_item\nBoolean lb_active\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true, \"department_array\":[999999,\n {\"name\":\"Website\"}, {\"name\":\"PowerBuilder\"}, {\"name\":\"IT\"}]}'\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nls_RootPath = \"/\"\n// Gets the root item\n"}
{"page": 647, "text": "Statements, Events, and Functions\nPage 647\nll_id = lnv_JsonParser.GetItemNumber(ls_RootPath + \"id\")\nls_name = lnv_JsonParser.GetItemString(\"/name\")\nlb_active = lnv_JsonParser.GetItemBoolean(\"/active\")\n// Get the child item of department_array\nls_ChildPath = ls_RootPath + \"department_array\"\nll_number_item = lnv_JsonParser.GetChildItem(ls_ChildPath, 1)\nll_number = lnv_JsonParser.GetItemNumber(ll_number_item)\nll_object_item = lnv_JsonParser.GetChildItem(\"/department_array\", 2)\nls_deptname = lnv_JsonParser.GetItemString(ll_object_item, \"name\")\nSee also\nGetChildCount\nGetChildKey\n2.4.221 GetChildItemByIndex\nDescription\nGets the child item in a parent (Category, Panel, or Group) according to its index in the\nRibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetChildItemByIndex ( Long Handle, Long Index, ref PowerObject Item )\nTable 2.615:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nHandle\nThe handle of the parent item whose child item you want to obtain. The\nparent item can be Category, Panel, or Group.\nIndex\nThe index of the child item you want to obtain.\nItem\nAn item variable in which you want to store the child item identified by\nthe index.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nThe parent object can be Category, Panel, or Group.\nThe child item for Category is Panel; the child item for Panel can be Group, LargeButton,\nSmallButton, CheckBox, and ComboBox; the child item for Group can be SmallButton,\nCheckBox, and ComboBox.\nExamples\n"}
{"page": 648, "text": "Statements, Events, and Functions\nPage 648\nThis example gets a copy of the \"MySmallButton\" small button from the \"MyPanel\" panel\nand stores it in the lr_SmallButton variable.\nLong ll_CateGoryHandle, ll_PanelHandle, ll_SmallButtonHandle\nInteger li_return, li_return2\nRibbonPanelItem lr_Panel\nRibbonSmallButtonItem lr_SmallButton\nPowerObject lpo_Object\nll_CateGoryHandle = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_PanelHandle = rbb_1.InsertPanelFirst (ll_CateGoryHandle, \"MyPanel\",\n \"TabsSmall!\")\nll_SmallButtonHandle = rbb_1.InsertSmallButtonFirst (ll_PanelHandle,\n \"MySmallButton\", \"EmployeeSmall!\", \"ue_ButtonClicked\")\nli_return = rbb_1.GetChildItemByIndex (ll_CateGoryHandle, 1, lr_Panel)\nIf li_Return = 1 Then\n li_return2 = rbb_1.GetChildItemByIndex (lr_Panel.ItemHandle, 1, lpo_Object)\n If li_return2 = 1 And lpo_Object.ClassName() = \"ribbonsmallbuttonitem\" Then\n  lr_SmallButton = lpo_Object\n End If\nEnd If\nSee also\nGetItemByTag\nGetItemParent\nGetChildItemCount\n2.4.222 GetChildItemCount\nDescription\nDetermines the total number of child items in a parent (Category, Panel, or Group) of the\nRibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetChildItemCount ( Long Handle )\nTable 2.616:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nHandle\nThe handle of the parent object whose child items you want to count. The\nparent object can be Category, Panel, or Group.\nReturn value\nInteger.\nReturns the total number of child items in the parent. If the parent contains no items, returns\n0. If an error occurs, returns -1. If any argument's value is null, returns null.\n"}
{"page": 649, "text": "Statements, Events, and Functions\nPage 649\nUsage\nThe parent object can be Category, Panel, or Group.\nThe child item for Category is Panel; the child item for Panel can be Group, LargeButton,\nSmallButton, CheckBox, and ComboBox; the child item for Group can be SmallButton,\nCheckBox, and ComboBox.\nExamples\nThe following code example counts the panels in the \"TestCategory\" category and returns 2.\nLong ll_Return, ll_Handle_Category, ll_Handle_panel\nll_Handle_Category = rbb_1.InsertCategoryFirst ( \"TestCategory\" )\nll_Handle_Panel = rbb_1.InsertPanelFirst ( ll_Handle_Category, \"TestPanel1\",\n \"EmployeeSmall!\" )\nll_Handle_Panel = rbb_1.InsertPanelLast ( ll_Handle_Category, \"TestPanel2\",\n \"EmployeeSmall!\" )\nll_Return = rbb_1.GetChildItemCount ( ll_Handle_Category )\nSee also\nGetChildItemByIndex\nGetItemByTag\nGetItemParent\n2.4.223 GetChildKey\nDescription\nGets the key name of the child item in a JSON parser object.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetChildKey ( ParentItemHandle, Index )\nobjectname.GetChildKey ( ParentItemPath, Index )\nTable 2.617:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose key name you want to obtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nParentItemPath\nA string whose value is the path of the parent item of JsonObjectItem\ntype. If a key name contains \"/\", use the escape character \"~~/\" to replace\n\"/\".\nIndex\nA long whose value is the index of the child item.\nReturn value\n"}
{"page": 650, "text": "Statements, Events, and Functions\nPage 650\nString.\nReturns the key name of the child item if it succeeds and empty string (\"\") if an error occurs.\nIf any argument's value is null, the method returns null.\nExamples\nThis example gets the key of the child item according to the parent item handle and the child\nitem index:\nJsonParser lnv_JsonParser\nLong ll_RootObject, ll_id\nString ls_Json, ls_key, ls_name\nboolean lb_active\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true}'\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\n// Gets the key of the child item\nls_key = lnv_JsonParser.GetChildKey(ll_RootObject, 1)\nll_id = lnv_JsonParser.GetItemNumber(ll_RootObject, ls_key)\nls_key = lnv_JsonParser.GetChildKey(ll_RootObject, 2)\nls_name = lnv_JsonParser.GetItemString(ll_RootObject, ls_key)\nls_key = lnv_JsonParser.GetChildKey(ll_RootObject, 3)\nlb_active = lnv_JsonParser.GetItemBoolean(ll_RootObject, ls_key)\nThis example gets the key of the child item according to the parent item path and the child\nitem index:\nJsonParser lnv_JsonParser\nLong ll_id\nString ls_Json, ls_key, ls_name, ls_RootPath, ls_ChildPath\nboolean lb_active\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true}'\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nls_RootPath = \"/\"\n// Gets the key of the child item\nls_key = lnv_JsonParser.GetChildKey(ls_RootPath, 1)\nls_ChildPath = ls_RootPath + ls_Key\nll_id = lnv_JsonParser.GetItemNumber(ls_ChildPath)\nls_key = lnv_JsonParser.GetChildKey(ls_RootPath, 2)\nls_name = lnv_JsonParser.GetItemString(ls_RootPath + ls_key)\nls_ChildPath = \"/active\"\nlb_active = lnv_JsonParser.GetItemBoolean(ls_ChildPath)\nSee also\nGetChildCount\nGetChildItem\n2.4.224 GetChildrenList\nDescription\n"}
{"page": 651, "text": "Statements, Events, and Functions\nPage 651\nProvides a list of the children of a routine included in a trace tree model.\nApplies to\nTraceTreeObject, TraceTreeRoutine, and TraceTreeGarbageCollect objects\nSyntax\ninstancename.GetChildrenList ( list )\nTable 2.618:\nArgument\nDescription\ninstancename\nInstance name of the TraceTreeObject, TraceTreeRoutine, or\nTraceTreeGarbageCollect object.\nlist\nAn unbounded array variable of datatype TraceTreeNode in which\nGetChildrenList stores a TraceTreeNode object for each child of a\nroutine. This argument is passed by reference.\nReturn value\nErrorReturn. Returns the following values:\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- The model does not exist\nUsage\nYou use the GetChildrenList function to extract a list of the children of a routine (the\nclasses and routines it calls) included in a trace tree model. Each child listed is defined as a\nTraceTreeNode object and provides the type of activity represented by that child.\nYou must have previously created the trace tree model from a trace file using the BuildModel\nfunction.\nWhen the GetChildrenList function is called for TraceTreeGarbageCollect objects, each child\nlisted usually represents the destruction of a garbage collected object.\nExamples\nThis example checks the activity type of a node included in the trace tree model. If the\nactivity type is an occurrence of a routine, it determines the name of the class that contains\nthe routine and provides a list of the classes and routines called by that routine:\nTraceTree ltct_node\nTraceTreeNode ltctn_list\n...\nCHOOSE CASE node.ActivityType\n    CASE ActRoutine!\n    TraceTreeRoutine ltctrt_rout\n    ltctrt_rout = ltct_node\n   \n    result += \"Enter \" + ltctrt_rout.ClassName &\n       + \".\" + ltctrt_rout.name + \" \" &\n       + String(ltctrt_rout.ObjectID) + \" \" &\n"}
{"page": 652, "text": "Statements, Events, and Functions\nPage 652\n    + String(ltctrt_rout.EnterTimerValue) &\n     + \"~r~n\" ltctrt_rout.GetChildrenList(ltctn_list)\n...\nSee also\nBuildModel\n2.4.225 GetColumn\nDescription\nRetrieves column information for a DataWindow, child DataWindow, or ListView control.\nFor syntax for a DataWindow or a child DataWindow, see the GetColumn method for\nDataWindows in Section 9.53, \u201cGetColumn\u201d in DataWindow Reference.\nApplies to\nListView controls\nSyntax\nlistviewname.GetColumn ( index, label, alignment, width )\nTable 2.619:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to find the\nproperties for a column.\nindex\nAn integer whose value is the index of the column for which you want to\nfind properties.\nlabel\nA string identifying the label of the column for which you want to find\nproperties. This argument is passed by reference.\nalignment\nA value of the enumerated datatype Alignment specifying the alignment\nof the column for which you want to find properties. Values are:\n\u2022 Center!\n\u2022 Justify!\n\u2022 Left!\n\u2022 Right!\nThis argument is passed by reference.\nwidth\nAn integer whose value is the width of the column for which you want to\nfind properties. This argument is passed by reference.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\n"}
{"page": 653, "text": "Statements, Events, and Functions\nPage 653\nUsage\nUse label, alignment, and width to retrieve the properties for a specified column.\nExamples\nThis example uses the instance variable li_col to pass the column number to GetColumn and\nretrieve the properties for the column. The script uses SetColumn to change the column's\nalignment:\nstring ls_label,ls_align\nint li_width\nalignment la_align\n \nIF lv_list.View <> ListViewReport! THEN\n    lv_list.View = ListViewReport!\nEND IF\n \nIF li_col = 0 THEN\n    MessageBox(\"Error!\",\"Click on a Column bar.\", &\n      StopSign!)\nELSE\n    lv_list.GetColumn(li_col, ls_label, la_align, &\n      li_width)\n    lv_list.SetColumn(li_col, ls_label, Right!, &\n      li_width)\nEND IF\nSee also\nSetColumn\n2.4.226 GetComboBox\nDescription\nGets the combo box according to the handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetComboBox ( Long ItemHandle, ref RibbonComboBoxItem Item )\nTable 2.620:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle for the combo box you want to obtain.\nItem\nA RibbonComboBoxItem variable in which you want to store the combo\nbox identified by the item handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\n"}
{"page": 654, "text": "Statements, Events, and Functions\nPage 654\nUsage\nYou can also get an item according to the handle by using the GetItem function.\nExamples\nThe following code example inserts a combo box to the \"MyPanel\" panel and then gets a\ncopy of the combo box according to its handle and stores it in the lr_ComboBox variable.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox\nRibbonComboBoxItem lr_ComboBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_ComboBox = rbb_1.InsertComboBoxFirst (ll_Handle_Panel,\n \"Ue_ComboBoxSelectionChanged\")\nli_Return = rbb_1.GetComboBox (ll_Handle_ComboBox, lr_ComboBox)\nSee also\nInsertComboBox\nInsertComboBoxFirst\nInsertComboBoxLast\nDeleteComboBox\nSetComboBox\nGetChildItemByIndex\n2.4.227 GetCommandDDE\nDescription\nObtains the command sent by the client application when your application is a DDE server.\nSyntax\nGetCommandDDE ( string )\nTable 2.621:\nArgument\nDescription\nstring\nA string variable in which GetCommandDDE will store the command\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs (such as the function was called in the wrong\ncontext). If string is null, GetCommandDDE returns null.\nUsage\nWhen a DDE client application sends a command to your application, the action triggers a\nRemoteExec event in the active window. In that event's script, you call GetCommandDDE to\n"}
{"page": 655, "text": "Statements, Events, and Functions\nPage 655\nfind out what command has been sent. You decide how your application will respond to the\ncommand.\nTo enable DDE server mode, use the function StartServerDDE, in which you decide how\nyour application will be known to other applications.\nExamples\nThis excerpt from a script for the RemoteExec event checks to see if the action requested\nby the DDE client is Open Next Sheet. If it is, the DDE server opens another instance of the\nsheet DataSheet. If the requested action is Shut Down, the DDE server shuts itself down.\nOtherwise, it lets the DDE client know the requested action was invalid.\nThe variables ii_sheetnum and i_DataSheet[ ] are instance variables for the window that\nresponds to the DDE event:\ninteger ii_sheetnum\nDataSheet i_DataSheet[ ]\nThis script that follows uses the local variable ls_Action to store the command sent by the\nclient application:\nstring ls_Action\n \nGetCommandDDE(ls_Action)\nIF ls_Action = \"Open Next Sheet\" THEN\n    ii_sheetnum = ii_sheetnum + 1\n    OpenSheet(i_DataSheet[ii_sheetnum], w_frame_emp)\nELSEIF ls_Action = \"Shut Down\" THEN\n    HALT CLOSE\nELSE\n    RespondRemote(FALSE)\nEND IF\nSee also\nGetCommandDDEOrigin\nStartServerDDE\nStopServerDDE\n2.4.228 GetCommandDDEOrigin\nDescription\nWhen called by the DDE server application, obtains the application name parameter used by\nthe DDE client sending the command.\nSyntax\nGetCommandDDEOrigin ( applstring )\nTable 2.622:\nArgument\nDescription\napplstring\nA string variable in which GetCommandDDEOrigin will store the name\nof the server application\n"}
{"page": 656, "text": "Statements, Events, and Functions\nPage 656\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs (such as the function was called in the wrong\ncontext). If applstring is null, GetCommandDDEOrigin returns null.\nUsage\nThe server application calling this function can use the application name (its own DDEname)\nto determine if it wants to respond to this command. Otherwise, the function provides no\nadditional information about the client.\nExamples\nThis script uses the local variable ls_name to store the name the client application used to\nidentify the server application:\nstring ls_name\nGetCommandDDEOrigin(ls_name)\nSee also\nGetCommandDDE\nStartServerDDE\nStopServerDDE\n2.4.229 GetCommandString\nDescription\nReturns the command string sent by dbmlsync to the synchronization server.\nApplies to\nMLSync controls\nSyntax\nsyncObject.GetCommandString ( )\nTable 2.623:\nArgument\nDescription\nsyncObject\nThe name of the MLSync object that starts a synchronization for\nwhich you want to get the actual dbmlsync command submitted to the\nsynchronization server.\nReturn value\nString.\nReturns the command string that is set for submission to the synchronization server.\nReturns -1 if required properties are missing. (Datasource, Publication, and MLUser, and\nMLServerVersion are required properties.) When this occurs, a descriptive error is written to\nthe ErrorText property of the MLSync object.\n"}
{"page": 657, "text": "Statements, Events, and Functions\nPage 657\nUsage\nTo minimize confusion to an end user, you might want to hide certain command line\narguments in a customized synchronization options window for your MobiLink application.\nIn this case you can call the GetCommandString function to return the command line\ngenerated by the options window, then add on values for the options that you hide from the\nuser.\nExamples\nFor MLSync objects, you can allow a user to edit the command line arguments for a\nsynchronization call as follows:\nlong    rc\nstring    cmd\ncmd = myMLSync.GetCommandString()\n//   Edit cmd however you wish\n...\nrc = myMLSync.Synchronize(cmd)\nSee also\nGetSyncRegistryProperties\nSetParm\nSetSyncRegistryProperties\nSynchronize\n2.4.230 GetCompanyName\nDescription\nReturns the company name for the current execution context.\nApplies to\nContextInformation objects\nSyntax\nservicereference.GetCompanyName ( name )\nTable 2.624:\nArgument\nDescription\nservicereference\nReference to the ContextInformation service instance.\nname\nString into which the function places the company name. This argument\nis passed by reference.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\n"}
{"page": 658, "text": "Statements, Events, and Functions\nPage 658\nCall this function to determine the company name (such as Appeon).\nExamples\nThis example calls the GetCompanyName function:\nString ls_company\nInteger li_return\nContextInformation ci\nci = create ContextInformation  \n//or GetContextService(\"ContextInformation\", ci)\nli_return = ci.GetCompanyName(ls_company)\nIF li_return = 1 THEN\n    sle_co_name.text = ls_company\nEND IF\nSee also\nGetContextService\nGetFixesVersion\nGetHostObject\nGetMajorVersion\nGetMinorVersion\nGetName\nGetShortName\nGetVersionName\n2.4.231 GetContextKeywords\nDescription\nRetrieves one or more values associated with a specified keyword.\nApplies to\nContextKeyword objects\nSyntax\nservicereference.GetContextKeywords ( name, values )\nTable 2.625:\nArgument\nDescription\nservicereference\nReference to the ContextKeyword service instance.\nname\nString specifying the keyword for which the function returns\ncorresponding values.\nvalues\nUnbounded String array into which the function places the values that\ncorrespond to name. This argument is passed by reference.\nReturn value\n"}
{"page": 659, "text": "Statements, Events, and Functions\nPage 659\nInteger.\nReturns the number of elements in values if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to access environment variables.\nExamples\nThis example calls the GetContextKeywords function:\nString ls_keyword\nInteger li_count, li_return\nContextKeyword lcx_key\n \nli_return = this.GetContextService &\n    (\"ContextKeyword\", lcx_key)\nls_keyword = sle_name.Text\nlcx_key.GetContextKeywords &\n    (ls_keyword, is_values)\nFOR li_count = 1 to UpperBound(is_values)\n    lb_parms.AddItem(is_values[li_count])\nNEXT\nSee also\nGetContextService\n2.4.232 GetContextService\nDescription\nReturns a reference to a context-specific instance of the specified service.\nApplies to\nAny object\nSyntax\nGetContextService ( servicename, servicereference )\nTable 2.626:\nArgument\nDescription\nservicename\nString specifying the service object. Valid values are:\n\u2022 ContextInformation -- Context information service\n\u2022 ContextKeyword -- Context keyword service\n\u2022 ErrorLogging -- Error logging service for PowerBuilder components\nrunning in a transaction server such as COM+\n\u2022 Internet -- Internet service\n\u2022 TransactionServer -- Transaction server service for PowerBuilder\ncomponents running in a transaction server such as COM+\n"}
{"page": 660, "text": "Statements, Events, and Functions\nPage 660\nArgument\nDescription\nservicereference\nPowerObject into which the function places a reference to the service\nobject specified by servicename. This argument is passed by reference.\nReturn value\nInteger.\nReturns 1 if the function succeeds and a negative integer if an error occurs. The return value\n-1 indicates an unspecified error.\nUsage\nCall this function to establish a reference to a service object, allowing you to access methods\nand properties in the service object. You must call this function before calling service object\nfunctions.\nIn Windows applications, you can use ContextKeyword or Keyword as the servicename\nargument when you get an instance of the ContextKeyword service.\nUsing a CREATE statement\nYou can instantiate these objects with a PowerScript CREATE statement. However,\nthis always creates an object for the default context (native PowerBuilder execution\nenvironment), regardless of where the application is running.\nExamples\nThis example calls the GetContextService function and displays the class of the service in a\nsingle line edit box:\nInteger li_return\nContextKeyword lcx_key\n \nli_return = this.GetContextService &\n    (\"Keyword\", lcx_key)\nsle_classname.Text = ClassName(lcx_key)\n...\nSee also\nBeginTransaction (obsolete)\nGetCompanyName\nGetContextKeywords\nGetHostObject\nGetMajorVersion\nGetMinorVersion\nGetName\nGetShortName\nGetURL\n"}
{"page": 661, "text": "Statements, Events, and Functions\nPage 661\nGetVersionName\nHyperLinkToURL\nInit (obsolete)\nPostURL\n2.4.233 GetCredentialAttribute (obsolete)\nDescription\nCalled by EAServer to allow the user to supply user credentials dynamically. This function is\nused by PowerBuilder clients connecting to EAServer.\nObsolete function\nGetCredentialAttribute is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nSSLCallBack objects\nSyntax\nsslcallback.GetCredentialAttribute ( thesessioninfo, attr, attrvalues )\nTable 2.627:\nArgument\nDescription\nsslcallback\nAn instance of a customized SSLCallBack object.\nthesessioninfo\nA CORBAObject that contains information about the SSL session. This\ninformation can optionally be displayed to the user to provide details\nabout the session.\nattr\nA long indicating whether the user needs to specify the path name of an\nINI file or a profile file. Values are:\n\u2022 1 -- CRED_ATTR_ENTRUST_INIFILE\n\u2022 2 -- CRED_ATTR_ENTRUST_USERPROFILE\nattrvalues\nAn array of string values that contains the available attribute values.\nReturn value\nString.\nReturns the selected attribute value.\nUsage\nA PowerBuilder application does not usually call the GetCredentialAttribute function\ndirectly. GetCredentialAttribute is called by EAServer if the useEntrustID property has been\nset and the EAServer client has not specified the path name of an Entrust INI file or profile.\n"}
{"page": 662, "text": "Statements, Events, and Functions\nPage 662\nTo override the behavior of any of the functions of the SSLCallBack object, create a standard\nclass user object that descends from SSLCallBack and customize this object as necessary.\nTo let EAServer know which object to use when a callback is required, specify the name of\nthe object in the callbackImpl SSL property. You can set this property value by calling the\nSetGlobalProperty function.\nIf you do not provide an implementation of GetCredentialAttribute, EAServer receives the\nCORBA::NO_IMPLEMENT exception and the default implementation of this callback is\nused. The default implementation always returns the first value in the list of values supplied.\nIf there are no values supplied, it raises CtsSecurity::NoValueException. Any exceptions that\nmay be raised by the function should be added to its prototype.\nIf your implementation of the callback returns an empty string, the default implementation\ndescribed above is used and the first value in the list is returned. If that value is acceptable to\nthe server, the connection proceeds. If the value is not acceptable, the connection is refused.\nTo obtain a useful return value, provide the user with available attribute values from the\nattrvalues array passed to the function and ask the user to select one of them. You can\nalso supply additional information, such as the server certificate, obtained from the passed\nthesessioninfo object.\nYou can enable the user to cancel the attempt to connect by throwing an exception\nin this callback function. All exceptions thrown in SSLCallback functions return a\nCTSSecurity::UserAbortedException to the server. You need to catch the exception by\nwrapping the ConnectToServer function in a try-catch block.\nExamples\nThis example checks whether the server requires the location of an INI file or an Entrust user\nprofile and displays an appropriate message. If the attrvalues array provides a list of choices,\nit displays the choices in a message box and prompts the user to enter a selection in a text\nbox:\nint   idx, numAttrs\nString   sText, sLocation\nnumAttrs = upperbound(attrValues)\nw_response w_ssl_response\nIF attr = 1 THEN\n    MessageBox(\"Entrust INI file required\", &\n      \"Please specify the location of the INI file\")\nELSEIF attr = 2 THEN\n    MessageBox(\"Entrust profile required\", &\n      \"Please specify the location of the profile\")\nEND IF\nIF numAttrs <> 0 THEN\n  sText = \"Locations available: \"\n  FOR idx = 1 to numAttrs\n    sText += \"~nattrValues[\" + string(idx) + \"]: \" &\n      + attrvalues[idx]\n  NEXT\n  OpenWithParm( w_ssl_response, SText )\n  ls_rc = Message.StringParm  IF ls_rc = \"cancel\" then \n    userabortedexception uae\n    uae = create userabortedexception\n    uae.setmessage(\"User cancelled connection\")\n    throw uae\n  END IF\n"}
{"page": 663, "text": "Statements, Events, and Functions\nPage 663\nEND IF\nRETURN ls_rc\nSee also\nConnectToServer (obsolete)\nGetCertificateLabel (obsolete)\nGetPin (obsolete)\nTrustVerify (obsolete)\n2.4.234 GetCurrentDirectory\nDescription\nGets the current directory for your target application. If the application is deployed as a\nnative C/S application, the current directory is the installation directory of the application\nexecutable; if the application is deployed with PowerClient, the current directory is the\ninstallation directory of the application (by default %APPDATA%\\PBApps\\Applications\n\\ServerIP_AppName).\nSyntax\nGetCurrentDirectory ( )\nReturn value\nString. Returns the full path name for the current directory.\nExamples\nThis example puts the current directory name in a SingleLineEdit control:\nsle_1.text = GetCurrentDirectory( )\nSee also\nChangeDirectory\nCreateDirectory\nDirectoryExists\nRemoveDirectory\n2.4.235 GetData\nObtains data from a control.\nTable 2.628:\nTo obtain\nUse\nThe value of a data point in a series in a graph\nSyntax 1\nThe unformatted data from an EditMask control\nSyntax 2\nData from an OLE server\nSyntax 3\n"}
{"page": 664, "text": "Statements, Events, and Functions\nPage 664\n2.4.235.1 Syntax 1: For data points in graphs\nDescription\nGets the value of a data point in a series in a graph.\nApplies to\nGraph controls in windows and user objects, and in DataWindow controls\nSyntax\ncontrolname.GetData ( { graphcontrol, } seriesnumber, datapoint   {, datatype } )\nTable 2.629:\nArgument\nDescription\ncontrolname\nThe name of the graph from which you want data, or the name of the\nDataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph from which you\nwant the data when controlname is a DataWindow.\nseriesnumber\nThe number identifying the series from which you want data.\ndatapoint\nThe number of the data point for which you want the value.\ndatatype\n(scatter graph\nonly)\n(Optional) A value of the grDataType enumerated datatype specifying\nwhether you want the x or y value of the data point in a scatter graph.\nValues are:\n\u2022 xValue! -- The x value of the data point\n\u2022 yValue! -- (Default) The y value of the data point\nReturn value\nDouble.\nReturns the value of the data in datapoint if it succeeds and 0 if an error occurs. If any\nargument's value is null, GetData returns null.\nUsage\nYou can use GetData only for graphs whose values axis is numeric. For graphs with other\ntypes of values axes, use the GetDataValue function instead.\nExamples\nThese statements obtain the data value of data point 3 in the series named Costs in the graph\ngr_computers in the DataWindow control dw_equipment:\ninteger SeriesNbr\ndouble data_value\n// Get the number of the series.\nSeriesNbr = &\n    dw_equipment.FindSeries(\"gr_computers\", \"Costs\")\ndata_value = dw_equipment.GetData( &\n"}
{"page": 665, "text": "Statements, Events, and Functions\nPage 665\n    \"gr_computers\" , SeriesNbr, 3)\nThese statements obtain the data value of the data point under the mouse pointer in the graph\ngr_prod_data and store it in data_value:\ninteger SeriesNbr, ItemNbr\ndouble data_value\ngrObjectType MouseHit\n \nMouseHit = &\n    gr_prod_data.ObjectAtPointer(SeriesNbr, ItemNbr)\nIF MouseHit = TypeSeries! THEN\n    data_value = &\n      gr_prod_data.GetData(SeriesNbr, ItemNbr)\nEND IF\nThese statements obtain the x value of the data point in the scatter graph gr_sales_yr and\nstore it in data_value:\ninteger SeriesNbr, ItemNbr\ndouble data_value\ngr_product_data.ObjectAtPointer(SeriesNbr, ItemNbr)\ndata_value = &\n    gr_sales_yr.GetData(SeriesNbr, ItemNbr, xValue!)\nSee also\nDeleteData\nFindSeries\nGetDataValue\nInsertData\nObjectAtPointer\n2.4.235.2 Syntax 2: For EditMask controls\nDescription\nGets the unformatted text from an EditMask control.\nApplies to\nEditMask controls\nSyntax\neditmaskname.GetData ( datavariable )\nTable 2.630:\nArgument\nDescription\neditmaskname\nThe name of the EditMask control containing the data.\ndatavariable\nA variable to which GetData will assign the unformatted data in the\nEditMask control. The datatype of datavariable must match the datatype\nof the EditMask control, which you select in the Window painter.\nAvailable datatypes are date, DateTime, decimal, double, string, and\ntime.\n"}
{"page": 666, "text": "Statements, Events, and Functions\nPage 666\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, GetData\nreturns null.\nUsage\nYou can find out the datatype of an EditMask control by looking at its MaskDataType\nproperty, which holds a value of the MaskDataType enumerated datatype.\nExamples\nThis example gets data of datatype date from the EditMask control em_date. Formatting\ncharacters for the date are ignored. The String function converts the date to a string so it can\nbe assigned to the SingleLineEdit sle_date:\ndate d\nem_date.GetData(d)\nsle_date.Text = String(d, \"mm-dd-yy\")\nThis example gets string data from the EditMask control em_string and assigns the result to\nsle_string. Characters in the edit mask are ignored:\nstring s\nem_string.GetData(s)\nsle_string.Text = s\n2.4.235.3 Syntax 3: For data in an OLE server\nDescription\nGets data from the OLE server associated with an OLE control using Uniform Data Transfer.\nApplies to\nOLE controls and OLE custom controls\nSyntax\nolename.GetData ( clipboardformat, data )\nTable 2.631:\nArgument\nDescription\nolename\nThe name of the OLE or custom control containing the object you want\nto populate with data\nclipboardformat\nThe format for the data. You can specify a standard format with a\nvalue of the ClipboardFormat enumerated datatype. You can specify a\nnonstandard format as a string.\nValues for clipboardformat are:\nClipFormatBitmap!\nClipFormatDIB!\nClipFormatDIF!\n"}
{"page": 667, "text": "Statements, Events, and Functions\nPage 667\nArgument\nDescription\nClipFormatEnhMetafile!\nClipFormatHdrop!\nClipFormatLocale!\nClipFormatMetafilePict!\nClipFormatOEMText!\nClipFormatPalette!\nClipFormatPenData!\nClipFormatRIFF!\nClipFormatSYLK!\nClipFormatText!\nClipFormatTIFF!\nClipFormatUnicodeText!\nClipFormatWave!\nIf clipboardformat is an empty string or a null value, GetData uses the\nformat ClipFormatText!\ndata\nA string or blob variable that will contain the data from the OLE server.\nIf the data you want to get is not appropriate for a string, you must use a\nblob variable.\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if an error occurs.\nUsage\nGetData will return an error if you specify a clipboard format that the OLE server does not\nsupport. To find out what formats it supports, see the documentation for the OLE server.\nGetData operates via Uniform Data Transfer, a mechanism defined by Microsoft for\nexchanging data with container applications. PowerBuilder enables data transfer via a global\nhandle. The OLE server must also support data transfer via a global handle. If it does not, you\ncannot transfer data to or from that server.\nExamples\nAfter the user has activated a Microsoft Word document and edited its contents, this example\ngets the contents from the OLE control ole_word6 and stores the contents in the string\nls_oledata. The contents of the string are then displayed in the MultiLineEdit mle_text:\nstring ls_oledata\ninteger li_rtn\n \nli_rtn = ole_word6.GetData( &\n    ClipFormatText!, ls_oledata)\n"}
{"page": 668, "text": "Statements, Events, and Functions\nPage 668\nmle_text.Text = ls_oledata\nOne OLE control displays a Microsoft Word document containing a table of data. This\nexample gets the data in the report and assigns it to a graph in a second OLE control.\nMicrosoft Graph in the second control interprets the first row in the table as headings, and\nsubsequent rows as categories or series, depending on the settings on the Data menu:\nstring ls_data\ninteger li_rtn\n \nli_rtn = ole_word.GetData(ClipFormatText!, ls_data)\nIF li_rtn <> 1 THEN RETURN\n \nli_rtn = ole_graph.SetData(ClipFormatText!, ls_data)\nSee also\nSetData\n2.4.236 GetDataDDE\nDescription\nObtains data sent from another DDE application and stores it in the specified string\nvariable. PowerBuilder can use GetDataDDE when acting as a DDE client or a DDE server\napplication.\nSyntax\nGetDataDDE ( string )\nTable 2.632:\nArgument\nDescription\nstring\nA string variable in which GetDataDDE will put the data received from a\nremote DDE application\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs (such as the function was called in the wrong\ncontext). If string is null, GetDataDDE returns null.\nUsage\nGetDataDDE is usually called in the window-level script for a RemoteSend event when your\napplication is a DDE server or HotLinkAlarm event when your application is a DDE client.\nExamples\nAssuming that your PowerBuilder DDE client application has established a hot link with row\n7, column 15 of an Excel spreadsheet, and that the value in that row and column address has\nchanged from red to green (which triggers the HotLinkAlarm event in your application), this\nscript for the HotLinkAlarm event calls GetDataDDE to store the new value in the variable\nStr20:\n// In the script for a HotLinkAlarm event\n"}
{"page": 669, "text": "Statements, Events, and Functions\nPage 669\nstring Str20\nGetDataDDE(Str20)\nSee also\nGetDataDDEOrigin\nOpenChannel\nStartServerDDE\nStopServerDDE\n2.4.237 GetDataDDEOrigin\nDescription\nDetermines the origin of data from a hot-linked DDE server application or a DDE client\napplication, and if successful, stores the application's DDE identifiers in the specified strings.\nPowerBuilder can use GetDataDDEOrigin when it is acting as a DDE client or as a DDE\nserver application.\nSyntax\nGetDataDDEOrigin ( applstring, topicstring, itemstring )\nTable 2.633:\nArgument\nDescription\napplstring\nA string variable in which GetDataDDEOrigin will store the name of the\nserver application\ntopicstring\nA string variable in which GetDataDDEOrigin will store the topic (for\nexample, in Microsoft Excel, the topic could be REGION.XLS)\nitemstring\nA string variable in which GetDataDDEOrigin will store the item\nidentification (for example, in Microsoft Excel, the item could be R1C2)\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs (such as the function was called in the wrong\ncontext). If any argument's value is null, GetDataDDEOrigin returns null.\nUsage\nCall GetDataDDEOrigin in the window-level script for a RemoteSend event or a\nHotLinkAlarm event.\nWhen your application is a DDE server, call GetDataDDEOrigin in the script for the\nRemoteSend event. Use it to determine the topic and item requested by the client. The\napplication name is the application specified by the client (the server's own DDEname).\nWhen your application is a DDE client, call GetDataDDEOrigin in the script for the\nHotLinkAlarm event. Use it to identify the source of the data when hot links may exist for\nmore than one topic within the server application or for more than one application.\n"}
{"page": 670, "text": "Statements, Events, and Functions\nPage 670\nExamples\nThis example illustrates how to call GetDataDDEOrigin:\nstring WhichAppl, WhatTopic, WhatLoc\nGetDataDDEOrigin(WhichAppl, WhatTopic, WhatLoc)\nSee also\nGetDataDDE\nOpenChannel\nStartServerDDE\nStopServerDDE\n2.4.238 GetDataLabelling\nDescription\nDetermines whether the data at a given data point is labeled in a DirectX 3D graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetDataLabelling ({graphcontrol,} series, datapoint, value)\nTable 2.634:\nArgument\nDescription\ncontrolname\nThe name of the graph from which you want data, or the name of the\nDataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control.\nseriesnumber\nThe number that identifies the series for which you want the data label\nsetting.\ndatapoint\nThe data point for which you want to obtain a label.\nvalue\nA boolean passed by reference that indicates whether the data point has a\nlabel.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetDataLabelling returns null.\nUsage\nGetDataLabelling determines whether a data label is set for data points from DirectX 3D\nArea, Bar, Col, or Line graphs. You cannot use this method with DirectX 3D Pie graphs.\n"}
{"page": 671, "text": "Statements, Events, and Functions\nPage 671\nExamples\nIn a DataWindow Clicked event, these statements obtain the number of the series and data\npoint clicked by the user in gr_1 and determine whether the label is set for that data point.\ninteger SeriesNbr, ItemNbr\nboolean refB\ngrObjectType clickedtype\n \nclickedtype = this.ObjectAtPointer(\"gr_1\", &\n   SeriesNbr, ItemNbr)\n \nthis.GetDataLabelling(\"gr_1\", SeriesNbr, &\n   ItemNbr, refB) \nThese statements obtain the number of the series and data point clicked by the user in a graph\nobject and determine whether the label is set for that data point.\ninteger SeriesNbr, ItemNbr\nboolean refB\ngrObjectType clickedtype\n \nclickedtype = this.ObjectAtPointer(SeriesNbr, ItemNbr)\n \nthis.GetDataLabelling(SeriesNbr, ItemNbr, refB) \nSee also\nGetSeriesLabelling\nSetDataLabelling\nSetSeriesLabelling\n2.4.239 GetDataPieExplode\nDescription\nReports the percentage of the pie graph's radius that a pie slice is exploded. An exploded slice\nis moved away from the center of the pie in order to draw attention to the data.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetDataPieExplode ( { graphcontrol, } series, datapoint, percentage )\nTable 2.635:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the percentage a pie slice is\nexploded, or the name of the DataWindow control containing the graph\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control for which you want the percentage a pie slice is\nexploded\nseries\nThe number that identifies the series\n"}
{"page": 672, "text": "Statements, Events, and Functions\nPage 672\nArgument\nDescription\ndatapoint\nThe number of the exploded data point (that is, the pie slice)\npercentage\nAn integer variable in which you want to store the percentage of the\ngraph's radius that the pie slice is exploded\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetDataPieExplode returns null.\nExamples\nThis example reports the percentage that a pie slice is exploded when the user clicks on that\nslice. The code checks whether the graph is a pie graph using the property Graphite. It then\nfinds out whether the user clicked on a pie slice by checking the series and data point values\nset by ObjectAtPointer. The script is for the DoubleClicked event of a graph object:\ninteger series, datapoint\ngrObjectType clickedtype\ninteger percentage\n \npercentage = 50\nIF (This.GraphType <> PieGraph! and &\n    This.GraphType <> Pie3D!) THEN RETURN\nclickedtype = This.ObjectAtPointer(series, &\n    datapoint)\n \nIF (series > 0 and datapoint > 0) THEN\n    This.GetDataPieExplode(series, datapoint, &\n    percentage)\n    MessageBox(\"Explosion Percentage\", &\n      \"Data point \" + This.CategoryName(datapoint) &\n      + \" in series \" + This.SeriesName(series) &\n      + \" is exploded \" + String(percentage) + \"%\")\nEND IF\nSee also\nSetDataPieExplode\n2.4.240 GetDataStyle\nFinds out the appearance of a data point in a graph. Each data point in a series can have\nindividual appearance settings. There are different syntaxes, depending on what settings you\nwant to check.\nTable 2.636:\nTo get the\nUse\nData point's colors\nSyntax 1\nLine style and width used by the data point\nSyntax 2\nFill pattern or symbol for the data point\nSyntax 3\n"}
{"page": 673, "text": "Statements, Events, and Functions\nPage 673\nGetDataStyle provides information about a single data point. The series to which the data\npoint belongs has its own style settings. In general, the style values for the data point are the\nsame as its series' settings. Use SetDataStyle to change the style values for individual data\npoints. Use GetSeriesStyle and SetSeriesStyle to get and set style information for the series.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can find out the fill pattern for a data point or a series in a 2-dimensional\nline graph, but that fill pattern will not be visible.\nFor the enumerated datatype values that GetDataStyle stores in linestyle and enumvariable,\nsee SetDataStyle.\n2.4.240.1 Syntax 1: For the colors of a data point\nDescription\nObtains the colors associated with a data point in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetDataStyle ( { graphcontrol, } seriesnumber, datapointnumber,\n colortype, colorvariable )\nTable 2.637:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the color of a data point, or\nthe name of the DataWindow control containing the graph.\ngraphcontrol\n(Data Window\ncontrol only)\n(Optional) When controlname is a DataWindow control, the name of the\ngraph for which you want the color of a data point.\nseriesnumber\nThe number of the series in which you want the color of a data point.\ndatapointnumber The number of the data point for which you want the color.\ncolortype\nA value of the grColorType enumerated datatype specifying the aspect of\nthe data point for which you want the color. Values are:\n\u2022 Background! -- The background color\n\u2022 Foreground! -- Text (fill color)\n\u2022 LineColor! -- The color of the line\n\u2022 Shade! -- The shaded area of three-dimensional graphics\ncolorvariable\nA long variable in which you want to store the color.\nReturn value\nInteger.\n"}
{"page": 674, "text": "Statements, Events, and Functions\nPage 674\nReturns 1 if it succeeds and -1 if an error occurs. Stores a color value in colorvariable. If any\nargument's value is null, GetDataStyle returns null.\nExamples\nThis example gets the text (foreground) color used for data point 6 in the series named Salary\nin the graph gr_emp_data. It stores the color value in the variable color_nbr:\nlong color_nbr\ninteger SeriesNbr\n \n// Get the number of the series\nSeriesNbr = gr_emp_data.FindSeries(\"Salary\")\n \n// Get the color\ngr_emp_data.GetDataStyle(SeriesNbr, 6, &\n    Foreground!, color_nbr)\nThis example gets the background color used for data point 6 in the series entered in the\nSingleLineEdit sle_series in the DataWindow graph gr_emp_data. It stores the color value in\nthe variable color_nbr:\nlong color_nbr\ninteger SeriesNbr\n \n// Get the number of the series\nSeriesNbr = FindSeries(\"gr_emp_data\", sle_series.Text)\n \n// Get the color\ndw_emp_data.GetDataStyle(\"gr_emp_data\", &\n    SeriesNbr, 6, Background!, color_nbr)\nSee also\nFindSeries\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n2.4.240.2 Syntax 2: For the line style and width used by a data point\nDescription\nObtains the line style and width for a data point in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetDataStyle ( { graphcontrol, } seriesnumber, datapointnumber,\n linestyle, linewidth )\nTable 2.638:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the line style and width of a\ndata point, or the name of the DataWindow control containing the graph.\n"}
{"page": 675, "text": "Statements, Events, and Functions\nPage 675\nArgument\nDescription\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph (in the\nDataWindow control) for which you want the line style and width of a\ndata point.\nseriesnumber\nThe number of the series in which you want the line style and width of a\ndata point.\ndatapointnumber The number of the data point for which you want the line style and width.\nlinestyle\nA variable of type LineStyle in which you want to store the line style.\nlinewidth\nAn integer variable in which you want to store the width of the line. The\nwidth is measured in pixels.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. For the specified series and data point,\nstores its line style in linestyle and the line's width in linewidth. If any argument's value is\nnull, GetDataStyle returns null.\nUsage\nFor the enumerated datatype values that GetDataStyle will store in linestyle, see\nSetDataStyle.\nExamples\nThis example gets the line style and width of data point 10 in the series named Costs in the\ngraph gr_product_data. It stores the information in the variables line_style and line_width:\ninteger SeriesNbr, line_width\nLineStyle line_style\n \n// Get the number of the series\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\ngr_product_data.GetDataStyle(SeriesNbr, 10, &\n    line_style, line_width)\nThis example gets the line style and width for data point 6 in the series entered in the\nSingleLineEdit sle_series in the graph gr_depts in the DataWindow control dw_employees.\nThe information is stored in the variables line_style and line_width:\ninteger SeriesNbr, line_width\nLineStyle line_style\n \n// Get the number of the series\nSeriesNbr = dw_employees.FindSeries( &\n   \" gr_depts \" , sle_series.Text)\n \n// Get the line style and width\ndw_employees.GetDataStyle(\"gr_depts\", SeriesNbr, &\n    6, line_style, line_width)\nSee also\nFindSeries\nGetSeriesStyle\n"}
{"page": 676, "text": "Statements, Events, and Functions\nPage 676\nSetDataStyle\nSetSeriesStyle\n2.4.240.3 Syntax 3: For the fill pattern or symbol of a data point\nDescription\nObtains the fill pattern or symbol of a data point in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetDataStyle ( { graphcontrol, } seriesnumber, datapointnumber,\n enumvariable )\nTable 2.639:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the fill pattern or symbol type\nof a data point, or the name of the DataWindow control containing the\ngraph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph (in the DataWindow\ncontrol) for which you want the fill pattern or symbol type of a data\npoint.\nseriesnumber\nThe number of the series in which you want the fill pattern or symbol\ntype of a data point.\ndatapointnumber The number of the data point for which you want the fill pattern or\nsymbol type.\nenumvariable\nThe variable in which you want to store the data style. You can specify a\nFillPattern or grSymbolType variable. The data style information stored\nwill depend on the variable type.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. Stores, according to the type of\nenumvariable, a value of that enumerated datatype representing the fill pattern or symbol\nused for the specified data point. If any argument's value is null, GetDataStyle returns null.\nUsage\nFor the enumerated datatype values that GetDataStyle will store in enumvariable, see\nSetDataStyle.\nExamples\nThis example gets the pattern used to fill data point 10 in the series named Costs in the graph\ngr_product_data. The information is stored in the variable data_pattern:\n"}
{"page": 677, "text": "Statements, Events, and Functions\nPage 677\ninteger SeriesNbr\nFillPattern data_pattern\n \n// Get the number of the series\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\ngr_product_data.GetDataStyle(SeriesNbr, 10, &\n    data_pattern)\nThis example gets the pattern used to fill data point 6 in the series entered in the\nSingleLineEdit sle_series in the graph gr_depts in the DataWindow control dw_employees.\nThe information is assigned to the variable data_pattern:\ninteger SeriesNbr\nFillPattern data_pattern\n \n// Get the number of the series\nSeriesNbr = dw_employees.FindSeries(\"gr_depts\", &\n    sle_series.Text)\n \n// Get the pattern\ndw_employees.GetDataStyle(\"gr_depts\", SeriesNbr, &\n    6, data_pattern)\nThese statements store in the variable symbol_type the symbol of data point 10 in the series\nnamed Costs in the graph gr_product_data:\ninteger SeriesNbr\ngrSymbolType symbol_type\n \n// Get the number of the series\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\ngr_product_data.GetDataStyle(SeriesNbr, 10, &\n    symbol_type)\nThese statements store the symbol for a data point in the variable symbol_type. The data\npoint is the sixth point in the series named in the SingleLineEdit sle_series in the graph\ngr_depts in the DataWindow control dw_employees:\ninteger SeriesNbr\ngrSymbolType symbol_type\n \n// Get the number of the series\nSeriesNbr = dw_employees.FindSeries(\"gr_depts\", &\n    sle_series.Text)\n \n// Get the symbol\ndw_employees.GetDataStyle(\"gr_depts\", SeriesNbr, &\n    6, symbol_type)\nSee also\nFindSeries\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n2.4.241 GetDataTransparency\nDescription\n"}
{"page": 678, "text": "Statements, Events, and Functions\nPage 678\nObtains the transparency percentage of a data point in a DirectX 3D graph (those with 3D\nrendering).\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetDataTransparency ( { graphcontrol, } seriesnumber, datapoint,\n transparency )\nTable 2.640:\nArgument\nDescription\ncontrolname\nThe name of the graph from which you want data, or the name of the\nDataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control from which you want the data.\nseriesnumber\nThe number that identifies the series from which you want data.\ndatapoint\nThe number of the data point for which you want the transparency value.\ntransparency\nInteger value for percent transparency. A value of 0 means that the\ndata point is opaque and a value of 100 means that it is completely\ntransparent.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetDataTransparency returns null.\nUsage\nGetDataTransparency retrieves data from any DirectX 3D graph (those with 3D rendering).\nExamples\nThese statements obtain the transparency percentage of data point 3 in the series named Costs\nin the graph gr_computers in the DataWindow control dw_equipment:\ninteger SeriesNbr, rtn, transp_value\n \n// Get the number of the series.\nSeriesNbr = dw_equipment.FindSeries( &\n      \"gr_computers\", \"Costs\")\nrtn = dw_equipment.GetDataTransparency( &\n      \"gr_computers\" , SeriesNbr, 3, transp_value)\nThese statements obtain the transparency percentage of data point 2 in the series Costs in the\ngraph gr_computers:\ninteger SeriesNbr, rtn, trans_value\n \nSeriesNbr = gr_computers.FindSeries(\"Costs\")\nrtn = gr_computers.GetDataTransparency( SeriesNbr, &\n"}
{"page": 679, "text": "Statements, Events, and Functions\nPage 679\n      2, transp_value)\nSee also\nFindSeries\nGetSeriesTransparency\nSetSeriesTransparency\nSetDataTransparency\n2.4.242 GetDataValue\nDescription\nObtains the value of a data point in a series in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetDataValue ( { graphcontrol, } seriesnumber, datapoint, datavariable\n {, xory } )\nTable 2.641:\nArgument\nDescription\ncontrolname\nThe name of the graph from which you want data, or the name of the\nDataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control from which you want the data.\nseriesnumber\nThe number that identifies the series from which you want data.\ndatapoint\nThe number of the data point for which you want the value.\ndatavariable\nThe name of a variable that will hold the data value. The variable's\ndatatype can be date, DateTime, double, string, or time. The variable\nmust have the same datatype as the values axis of the graph.\nxory\n(scatter graph\nonly)\n(Optional) A value of the grDataType enumerated datatype specifying\nwhether you want the x or y value of the data point in a scatter graph.\nValues are:\n\u2022 xValue! -- The x value of the data point\n\u2022 yValue! -- (Default) The y value of the data point\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetDataValue returns null.\n"}
{"page": 680, "text": "Statements, Events, and Functions\nPage 680\nUsage\nGetDataValue retrieves data from any graph. The data is stored in datavariable, whose\ndatatype must match the datatype of the graph's values axis. If the values axis is numeric, you\ncan also use the GetData function.\nExamples\nThese statements obtain the data value of data point 3 in the series named Costs in the graph\ngr_computers in the DataWindow control dw_equipment:\ninteger SeriesNbr, rtn\ndouble data_value\n \n// Get the number of the series.\nSeriesNbr = dw_equipment.FindSeries( &\n    \"gr_computers\", \"Costs\")\nrtn = dw_equipment.GetDataValue( &\n    \"gr_computers\" , SeriesNbr, 3, data_value)\nThese statements obtain the data value of the data point under the mouse pointer in the\ngraph gr_prod_data and store it in data_value. If the user does not click on a data point, then\nItemNbr is set to 0. The categories of the graph are time values:\ninteger SeriesNbr, ItemNbr, rtn\ntime data_value\ngrObjectType MouseHit\n \nMouseHit = &\n    gr_prod_data.ObjectAtPointer(SeriesNbr, ItemNbr)\nIF ItemNbr > 0 THEN\n    rtn = gr_prod_data.GetDataValue( &\n      SeriesNbr, ItemNbr, data_value)\nEND IF\nThese statements obtain the x value of the data point in the scatter graph gr_sales_yr and\nstore it in data_value. If the user does not click on a data point, then ItemNbr is set to 0. The\ndatatype of the category axis is Date:\ninteger SeriesNbr, ItemNbr, rtn\ndate data_value\n \ngr_product_data.ObjectAtPointer(SeriesNbr, ItemNbr)\nIF ItemNbr > 0 THEN\n    rtn = gr_sales_yr.GetDataValue( &\n      SeriesNbr, ItemNbr, data_value, xValue!)\nEND IF\nSee also\nDeleteData\nFindSeries\nInsertData\nObjectAtPointer\n2.4.243 GetDateLimits\nDescription\n"}
{"page": 681, "text": "Statements, Events, and Functions\nPage 681\nRetrieves the maximum and minimum date limits specified for the calendar.\nApplies to\nMonthCalendar control\nSyntax\ncontrolname.GetDateLimits ( min, max )\nTable 2.642:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control for which you want to determine\nthe date limits\nmin\nA date value returned by reference that represents the minimum date that\ncan be referenced or displayed in the calendar\nmax\nA date value returned by reference that represents the maximum date that\ncan be referenced or displayed in the calendar\nReturn value\nInteger.\nReturns 0 when both limits are retrieved successfully and one of the following negative\nvalues otherwise:\n-1 -- No limits were set\n-2 -- Unknown failure\nUsage\nUse the SetDateLimits function to set minimum and maximum dates. If no date limits have\nbeen set, GetDateLimits returns -1 and sets min and max to January 1, 1900.\nExamples\nThis example displays a message box that shows the minimum and maximum dates set for a\ncontrol:\ninteger li_return\nDate mindate, maxdate\nstring str1, str2\nli_return = mc_1.GetDateLimits(mindate, maxdate)\nIf li_return = -1 then\n   str1 = \"No minimum and maximum dates are set\"\nelseif li_return = -2 then\n   str1 = \"Unknown failure\"\nelse\n   str1 = \"Minimum date is \" + string(mindate)\n   str2 = \"Maximum date is \" + string(maxdate)\nend if\nMessageBox(\"Date Limits\", str1 + \"~r~n\" + str2)\nSee also\n"}
{"page": 682, "text": "Statements, Events, and Functions\nPage 682\nSetDateLimits\n2.4.244 GetDbmlsyncPath\nDescription\nRetrieves the full path and file name of the dbmlsync.exe that is installed on the workstation.\nApplies to\nMLSync and MLSynchronization controls\nSyntax\nSyncObject.GetDbmlsyncPath ( )\nTable 2.643:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object\nReturn value\nString.\nReturns the value of full path and file name of the synchronization executable. Returns -1\nif.dbmlsync.exe is not found.\nUsage\nThis property uses the value of the synchronization object's MLServerVersion property to\ndecide which version of dbmlsync to return.\nExamples\nThis function enables the use of Help buttons for the Additional Options and\nExtended Options fields as displayed on the default ML Server tab page of the\nw_appname_sync_options dialog box that is generated by the MobiLink synchronization\nwizard. The Clicked event for these Help buttons has the following script:\nstring      sCmd\nsCmd = i_uosync.GetDbmlsyncPath()\nif len(sCmd) > 0 then\n   sCmd += \" ?      \"\n    // sCmd += ' -l' for help with extended options\n   run(sCmd, Normal!)\nend if\n2.4.245 GetDisplayRange\nDescription\nRetrieves the first and last date of the currently displayed date range and returns the number\nof months than span the display.\nApplies to\nMonthCalendar control\n"}
{"page": 683, "text": "Statements, Events, and Functions\nPage 683\nSyntax\ncontrolname.GetDisplayRange ( start, end {, d } )\nTable 2.644:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control for which you want the range of\ndates\nstart\nA date specifying the first date in the displayed range returned by\nreference\nend\nA date specifying the last date in the displayed range returned by\nreference\nd (optional)\nA value of the MonthCalDisplayState enumerated variable. Values are:\nEntirelyDisplayed! -- Gets the range of dates for which all days in each\nmonth are displayed\nPartlyDisplayed! -- Gets the range of dates for which any days in each\nmonth are displayed (default)\nReturn value\nInteger.\nReturns the number of months in the display range if it succeeds and -1 if it fails.\nUsage\nThe GetDisplayRange function retrieves the beginning and end dates of the range of dates\ncurrently displayed in the calendar.\nIf you do not supply the optional d argument (or specify PartlyDisplayed!), GetDisplayRange\nreturns the number of months for which any of the days in the month display. If the calendar\ndisplays one month, the return value is 3, because the last few days of the previous month and\nthe first few days of the next month are included.\nIf you supply EntirelyDisplayed! as the d argument, GetDisplayRange returns the number of\nmonths for which all of the days in the month display. It ignores the leading and trailing days.\nFor example, if the calendar display shows the 12 months from November 2004 to October\n2005 and you do not supply the d argument, GetDisplayRange returns 14 and the start and\nend arguments are set to October 25, 2004 and November 6, 2005.\nIf you supply EntirelyDisplayed! as the d argument, GetDisplayRange returns 12 and the start\nand end arguments are set to November 1, 2004 and October 31, 2005.\nExamples\nThis example displays a message box that shows the number of months in the display range\nand its start and end dates. Because the third argument is set to PartlyDisplayed!, the range\nreturned will be greater than the number of full months displayed. If only one month displays\nand it neither begins on the first day of the week nor ends on the last day of the week,\nli_return will be 3:\n"}
{"page": 684, "text": "Statements, Events, and Functions\nPage 684\ninteger li_return\nDate startdate, enddate\nstring str1, string str2\nli_return = mc_1.GetDisplayRange(startdate, enddate, &\n   PartlyDisplayed!)\nstr1 = \"Range is \" + string(li_return) + \" months\"\nstr2 = \"Start date is \" + string(startdate) + \"~r~n\"\nstr2 += \"End date is \" + string(enddate)\nMessageBox(str1, str2)\nThis example finds out how many complete months are shown in the current display and sets\nthe scroll rate to that number:\ninteger li_return\nDate startdate, enddate\nli_return = mc_1.GetDisplayRange(startdate, enddate, &\n   EntirelyDisplayed!)\nmc_1.ScrollRate = li_return\nSee also\nGetSelectedRange\n2.4.246 GetDotNetCoreVersion\nDescription\nGets the version number of the .NET Core runtime that is currently used to load DLL.\nApplies to\nDotNetAssembly objects\nSyntax\nobjectname.GetDotNetCoreVersion()\nTable 2.645:\nArgument\nDescription\nobjectname\nThe name of the DotNetAssembly object.\nReturn value\nString.\nReturns the version number of .NET Core runtime; or returns an empty string if .NET\nFramework is used.\nExamples\nThe following example returns the latest .NET Core version that is installed on the machine.\nlong ll_return\nstring ls_version\nDotNetAssembly lcs_ass\n"}
{"page": 685, "text": "Statements, Events, and Functions\nPage 685\nlcs_ass = create DotNetAssembly\n//Uses the latest .NET core version to load DLL\nll_return = lcs_ass.LoadWithDotNetCore (\"Appeon.Simple.DLL\")\nif ll_return < 0 then\n                MessageBox (\"Load dll failed\", lcs_ass.errortext)\n                return\nend if\n//Returns the latest .NET core version\nls_version = lcs_ass.GetDotNetCoreVersion( )\nSee also\nCreateInstance\nLoadWithDotNetCore\nLoadWithDotNetFramework\n2.4.247 GetDynamicDate\nDescription\nObtains data of type Date from the DynamicDescriptionArea after you have executed a\ndynamic SQL statement.\nRestriction\nYou can use this function only after executing Format 4 dynamic SQL statements.\nSyntax\nDynamicDescriptionArea.GetDynamicDate ( index )\nTable 2.646:\nArgument\nDescription\nDynamicDescriptionArea\nThe name of the DynamicDescriptionArea, usually SQLDA.\nindex\nAn integer identifying the output parameter descriptor from which you\nwant to get the data. Index must be less than or equal to the value in\nNumOutputs in DynamicDescriptionArea.\nReturn value\nDate.\nReturns the Date data in the output parameter descriptor identified by index in\nDynamicDescriptionArea. Returns 1900-01-01 if an error occurs. If any argument's value is\nnull, GetDynamicDate returns null.\nUsage\nAfter you fetch data using Format 4 dynamic SQL statements, the DynamicDescriptionArea,\nusually SQLDA, contains information about the data retrieved. The SQLDA property\nNumOutputs specifies the number of data descriptors returned. The property array\nOutParmType contains values of the ParmType enumerated datatype specifying the datatype\nof each value returned.\n"}
{"page": 686, "text": "Statements, Events, and Functions\nPage 686\nUse GetDynamicDate when the value of OutParmType is TypeDate! for the value in the\narray that you want to retrieve.\nExamples\nThese statements set Today to the Date data in the second output parameter descriptor:\nDate Today\nToday = GetDynamicDate(SQLDA, 2)\nIf you have executed Format 4 dynamic SQL statements, data is stored in the\nDynamicDescriptionArea. This example finds out the datatype of the stored data and uses a\nCHOOSE CASE statement to assign it to local variables.\nIf the SELECT statement is:\nSELECT emp_start_date FROM employee;\nthen the code at CASE Typedate! will be executed.\nFor each case, other processing could assign the value to a DataWindow so that the value\nwould not be overwritten when another value has the same ParmType:\nDate Datevar\nTime Timevar\nDateTime Datetimevar\nDouble Doublevar\nString Stringvar\n \nFOR n = 1 to SQLDA.NumOutputs\n    CHOOSE CASE SQLDA.OutParmType[n]\n    CASE TypeString!\n      Stringvar = SQLDA.GetDynamicString(n)\n      ... // Other processing\n    CASE TypeDecimal!, TypeDouble!, &\n        TypeInteger!, TypeLong!, &\n        TypeReal!, TypeBoolean!\n      Doublevar = SQLDA.GetDynamicNumber(n)\n      ... // Other processing\n    CASE TypeDate!\n      Datevar = SQLDA.GetDynamicDate(n)\n      ... // Other processing\n    CASE TypeDateTime!\n      Datetimevar = SQLDA.GetDynamicDateTime(n)\n      ... // Other processing\n    CASE TypeTime!\n      Timevar = SQLDA.GetDynamicTime(n)\n      ... // Other processing\n    CASE ELSE\n      MessageBox(\"Dynamic SQL\", &\n          \"datatype unknown.\")\n    END CHOOSE\nNEXT\nSee also\nGetDynamicDateTime\nGetDynamicNumber\nGetDynamicString\nGetDynamicTime\n"}
{"page": 687, "text": "Statements, Events, and Functions\nPage 687\nSetDynamicParm\nUsing dynamic SQL\n2.4.248 GetDynamicDateTime\nDescription\nObtains data of type DateTime from the DynamicDescriptionArea after you have executed a\ndynamic SQL statement.\nRestriction\nYou can use this function only after executing Format 4 dynamic SQL statements.\nSyntax\nDynamicDescriptionArea.GetDynamicDateTime ( index )\nTable 2.647:\nArgument\nDescription\nDynamicDescriptionArea\nThe name of the DynamicDescriptionArea, usually SQLDA.\nindex\nAn integer identifying the output parameter descriptor from which you\nwant to get the data. Index must be less than or equal to the value in\nNumOutputs in DynamicDescriptionArea.\nReturn value\nDateTime.\nReturns the DateTime data in the output parameter descriptor identified by index in\nDynamicDescriptionArea. Returns 1900-01-01 00:00:00.000000 if an error occurs. If any\nargument's value is null, GetDynamicDateTime returns null.\nUsage\nUse GetDynamicDateTime when the value of OutParmType is TypeDateTime! for the value\nthat you want to retrieve from the array.\nTo test for the error value, you must use the DateTime function to construct the value to\nwhich you want to compare the returned value. PowerBuilder does not support DateTime\nliterals.\nExamples\nThese statements set SystemDateTime to the DateTime data in the second output parameter\ndescriptor:\nDateTime SystemDateTime\nSystemDateTime = SQLDA.GetDynamicDateTime(2)\nIF SystemDateTime = &\n    DateTime(1900-01-01, 00:00:00) THEN\n    ... // Error handling\nEND IF\n"}
{"page": 688, "text": "Statements, Events, and Functions\nPage 688\nFor an example of retrieving data from the DynamicDescriptionArea, see GetDynamicDate.\nSee also\nGetDynamicDate\nGetDynamicNumber\nGetDynamicString\nGetDynamicTime\nSetDynamicParm\nUsing dynamic SQL\n2.4.249 GetDynamicDecimal\nDescription\nObtains numeric data from the DynamicDescriptionArea after you have executed a dynamic\nSQL statement.\nRestriction\nYou can use this function only after executing Format 4 dynamic SQL statements.\nSyntax\nDynamicDescriptionArea.GetDynamicDecimal ( index )\nTable 2.648:\nArgument\nDescription\nDynamicDescriptionArea\nThe name of the DynamicDescriptionArea, usually SQLDA.\nindex\nAn integer identifying the output parameter descriptor from which you\nwant to get the data. Index must be less than or equal to the value in\nNumOutputs in DynamicDescriptionArea.\nReturn value\nDecimal.\nReturns the numeric data in the output parameter descriptor identified by index in\nDynamicDescriptionArea. Returns 0 if an error occurs. If any argument's value is null,\nGetDynamicDecimal returns null.\nUsage\nUse GetDynamicDecimal when the value of OutParmType is TypeDecimal! or\nTypeLongLong! for the value that you want to retrieve from the array.\nExamples\nThese statements set DeptId to the numeric data in the second output parameter descriptor:\nInteger DeptId\n"}
{"page": 689, "text": "Statements, Events, and Functions\nPage 689\nDeptId = SQLDA.GetDynamicDecimal(2)\nFor an example of retrieving data from the DynamicDescriptionArea, see GetDynamicDate.\nSee also\nGetDynamicDate\nGetDynamicNumber\nGetDynamicString\nGetDynamicTime\nSetDynamicParm\nUsing dynamic SQL\n2.4.250 GetDynamicNumber\nDescription\nObtains numeric data from the DynamicDescriptionArea after you have executed a dynamic\nSQL statement.\nRestriction\nYou can use this function only after executing Format 4 dynamic SQL statements.\nSyntax\nDynamicDescriptionArea.GetDynamicNumber ( index )\nTable 2.649:\nArgument\nDescription\nDynamicDescriptionArea\nThe name of the DynamicDescriptionArea, usually SQLDA.\nindex\nAn integer identifying the output parameter descriptor from which you\nwant to get the data. Index must be less than or equal to the value in\nNumOutputs in DynamicDescriptionArea.\nReturn value\nDouble.\nReturns the numeric data in the output parameter descriptor identified by index in\nDynamicDescriptionArea. Returns 0 if an error occurs. If any argument's value is null,\nGetDynamicNumber returns null.\nUsage\nUse GetDynamicNumber when the value of OutParmType is TypeByte!, TypeInteger!,\nTypeDouble!, TypeLong!, TypeReal!, or TypeBoolean! for the value that you want to\nretrieve from the array.\nFor OutParmType values of TypeDecimal! or TypeLongLong!, use GetDynamicDecimal\ninstead.\n"}
{"page": 690, "text": "Statements, Events, and Functions\nPage 690\nExamples\nThese statements set DeptId to the numeric data in the second output parameter descriptor:\nInteger DeptId\nDeptId = SQLDA.GetDynamicNumber(2)\nFor an example of retrieving data from the DynamicDescriptionArea, see GetDynamicDate.\nSee also\nGetDynamicDate\nGetDynamicDateTime\nGetDynamicDecimal\nGetDynamicString\nGetDynamicTime\nSetDynamicParm\nUsing dynamic SQL\n2.4.251 GetDynamicString\nDescription\nObtains data of type String from the DynamicDescriptionArea after you have executed a\ndynamic SQL statement.\nRestriction\nYou can use this function only after executing Format 4 dynamic SQL statements.\nSyntax\nDynamicDescriptionArea.GetDynamicString ( index )\nTable 2.650:\nArgument\nDescription\nDynamicDescriptionArea\nThe name of the DynamicDescriptionArea, usually SQLDA.\nindex\nAn integer identifying the output parameter descriptor from which you\nwant to get the data. Index must be less than or equal to the value in\nNumOutputs in DynamicDescriptionArea.\nReturn value\nString. Returns the string data in the output parameter descriptor identified by index in\nDynamicDescriptionArea. Returns the empty string (\"\") if an error occurs. If any argument's\nvalue is null, GetDynamicString returns null.\nUsage\nUse GetDynamicString when the value of OutParmType is TypeString! for the value that you\nwant to retrieve from the array.\n"}
{"page": 691, "text": "Statements, Events, and Functions\nPage 691\nExamples\nThese statements set LName to the String data in the second output descriptor:\nString LName\nLName = SQLDA.GetDynamicString(2)\nFor an example of retrieving data from the DynamicDescriptionArea, see GetDynamicDate.\nSee also\nGetDynamicDate\nGetDynamicDateTime\nGetDynamicNumber\nGetDynamicTime\nSetDynamicParm\nUsing dynamic SQL\n2.4.252 GetDynamicTime\nDescription\nObtains data of type Time from the DynamicDescriptionArea after you have executed a\ndynamic SQL statement.\nRestriction\nYou can use this function only after executing Format 4 dynamic SQL statements.\nSyntax\nDynamicDescriptionArea.GetDynamicTime ( index )\nTable 2.651:\nArgument\nDescription\nDynamicDescriptionArea\nThe name of the DynamicDescriptionArea, usually SQLDA.\nindex\nAn integer identifying the output parameter descriptor from which you\nwant to get the data. Index must be less than or equal to the value in\nNumOutputs in DynamicDescriptionArea.\nReturn value\nTime.\nReturns the Time data in the output parameter descriptor identified by index in\nDynamicDescriptionArea. Returns 00:00:00.000000 if an error occurs. If any argument's\nvalue is null, GetDynamicTime returns null.\nUsage\nUse GetDynamicTime when the value of OutParmType is TypeTime! for the value that you\nwant to retrieve from the array.\n"}
{"page": 692, "text": "Statements, Events, and Functions\nPage 692\nExamples\nThese statements set Start to the Time data in the first output parameter descriptor:\nTime Start\nStart = SQLDA.GetDynamicTime(1)\nFor an example of retrieving data from the DynamicDescriptionArea, see GetDynamicDate.\nSee also\nGetDynamicDate\nGetDynamicDateTime\nGetDynamicNumber\nGetDynamicString\nSetDynamicParm\nUsing dynamic SQL\n2.4.253 GetEnvironment\nDescription\nGets information about the operating system, processor, and screen display of the system.\nSyntax\nGetEnvironment ( environmentinfo )\nTable 2.652:\nArgument\nDescription\nenvironmentinfo\nThe name of the Environment object that will hold the information about\nthe environment\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If environmentinfo is null, GetEnvironment\nreturns null.\nUsage\nIn cross-platform development projects, you can call GetEnvironment in scripts and take\nactions based on the operating system. You can also find out the processor (Intel 386 or 486,\n68000, and so on). The information also includes version numbers of the operating system\nand PowerBuilder.\nYou can call GetEnvironment to find out the number of colors supported by the system and\nthe size of the screen. You can use the size information in a window's Open script to reset its\nX and Y properties.\nExamples\n"}
{"page": 693, "text": "Statements, Events, and Functions\nPage 693\nThis script runs another PowerBuilder application and uses the OSType property of the\nEnvironment object to determine how to specify the path:\nstring path\nenvironment env\ninteger rtn\n \nrtn = GetEnvironment(env)\nIF rtn <> 1 THEN RETURN\n \nCHOOSE CASE env.OSType\nCASE aix!\n    path = \"/export/home/pb_apps/analyze.exe\"\nCASE Windows!, WindowsNT!\n path = \"C:\\PB_apps\\analyze.exe\"\nCASE ELSE\n    RETURN\nEND CHOOSE\nRun(path)\nThis example displays a message box that shows the major, minor, and fixes versions and the\nbuild number of PowerBuilder:\nstring ls_version\nenvironment env\ninteger rtn\nrtn = GetEnvironment(env)\nIF rtn <> 1 THEN RETURN\nls_version = \"Version: \"+ string(env.pbmajorrevision)\nls_version += \".\" + string(env.pbminorrevision)\nls_version += \".\" + string(env.pbfixesrevision)\nls_version += \" Build: \" + string(env.pbbuildnumber)\nMessageBox(\"PowerBuilder Version\", ls_version)\n2.4.254 GetExpiresIn\nDescription\nGets the lifetime of the access token returned by the authorization server.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetExpiresIn ( )\nTable 2.653:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\nlifetime of the access token.\nReturn value\nLong. Values are:\n"}
{"page": 694, "text": "Statements, Events, and Functions\nPage 694\n>0 -- Expiration time of the access token in seconds;\n0 -- Never expires.\nExamples\nThe following example shows the use of the GetExpiresIn function to get the lifetime of the\naccess token:\nlong ll_expiresin\nTokenResponse lnv_TokenResponse\nll_expiresin = lnv_TokenResponse.getexpiresin()\nSee also\nGetAccessToken\nGetBody\nGetHeader\nGetHeaders\nGetRefreshToken\nGetStatusCode\nGetStatusText\nGetTokenError\nGetTokenType\n2.4.255 GetFileOpenName\nDescription\nDisplays the system's Open File dialog box and allows the user to select a file or enter a file\nname.\nSyntax\nGetFileOpenName ( title, pathname, filename {, extension {, filter { , initdir { ,\n aFlag } } } } )\nGetFileOpenName ( title, pathname, filename[ ] {, extension {, filter { , initdir\n { , aFlag } } } } )\nTable 2.654:\nArgument\nDescription\ntitle\nA string whose value is the title of the dialog box.\npathname\nA string variable in which you want to store the returned path. If the user\nselects a single file, the pathname variable contains the path name and\nfile name.\nfilename,\nfilename[ ]\nA string variable in which the returned file name is stored or an array\nof string variables in which multiple selected file names are stored.\nSpecifying an array of string variables enables multiple selection in the\ndialog box.\n"}
{"page": 695, "text": "Statements, Events, and Functions\nPage 695\nArgument\nDescription\nextension\n(optional)\nA string whose value is a 1- to 3-character default file extension. The\ndefault is no extension.\nfilter (optional)\nA string whose value is a text description of the files to include in the list\nbox and the file mask that you want to use to select the displayed files\n(for example, *.* or *.exe). The format for filter is:\ndescription,*. ext\nTo specify multiple filter patterns for a single display string, use a\nsemicolon to separate the patterns, for example:\n\"Graphic Files (*.bmp;*.gif;*.jpg;*.jpeg),\n*.bmp;*.gif;*.jpg;*.jpeg\"\nThe default is:\n\"All Files (*.*),*.*\"\ninitdir (optional)\nA string whose value is the initial directory name. The default is the\ncurrent directory.\naFlag (optional)\nAn unsigned long whose value determines which options are enabled in\nthe dialog box. The value of each option's flag is calculated as 2 to the\npower of (index -1), where index is the integer associated with the option.\nThe value of the aggregate flag passed to GetFileOpenName is the sum of\nthe individual option flags. See the table in the Usage section for a list of\noptions, the index associated with each option, and the option's meaning.\nReturn value\nInteger.\nReturns 1 if it succeeds, 0 if the user clicks the Cancel button or Windows cancels the\ndisplay, and -1 if an error occurs. If any argument's value is null, GetFileOpenName returns\nnull.\nUsage\nIf you specify a DOS-style file extension and the user enters a file name with no extension,\nPowerBuilder appends the default extension to the file name. If you specify a file mask to act\nas a filter, PowerBuilder displays only files that match the mask.\nIf you specify a string for the filename argument, the user can select only one file. The\npathname argument contains the path name and the file name, for example C:\\temp\\test.txt.\nIf you specify a string array for the filename argument, the user can select more than one file.\nIf the user selects multiple files, the pathname argument contains the path only, for example\nC:\\temp. If the user selects a single file, its name is appended to the pathname argument, for\nexample C:\\temp\\test.txt.\nYou use the filter argument to limit the types of files displayed in the list box and to let the\nuser know what those limits are. For example, to display the description Text Files (*.TXT)\nand only files with the extension .TXT, specify the following for filter:\n\"Text Files (*.TXT),*.TXT\"\n"}
{"page": 696, "text": "Statements, Events, and Functions\nPage 696\nTo specify more than one file extension in filter, enter multiple descriptions and extension\ncombinations and separate them with commas. For example:\n\"PIF files, *.PIF, Batch files, *.BAT\"\nThe dialog boxes presented by GetFileOpenName and GetFileSaveName are system dialog\nboxes. They provide standard system behavior, including control over the current directory.\nWhen users change the drive, directory, or folder in the dialog box, they change the current\ndirectory or folder. The newly selected directory or folder becomes the default for file\noperations until they exit the application, unless the optional initdir argument is passed.\nThe aFlag argument is used to pass one or more options that determine the appearance of the\ndialog box. For each option, the value of the flag is 2^(index -1), where index is an integer\nassociated with each option as shown in the following table. You can pass multiple options\nby passing an aggregate flag, calculated by adding the values of the individual flags.\nIf you do not pass an aFlag, the Explorer-style open file dialog box is used. If you do pass\na flag, the old-style dialog box is used by default. Some options do not apply when the\nExplorer-style dialog box is used. For those that do apply, add the option value for using the\nExplorer-style dialog box (2) to the value of the option if you want to display an Explorer-\nstyle dialog box.\nFor example, passing the flag 32768 (2^15) to the GetFileSaveName function opens the old-\nstyle dialog box with the Read Only check box selected by default. Passing the flag 32770\nopens the Explorer-style dialog box with the Read Only check box selected by default.\nTable 2.655: Option values for GetFileOpenName and GetFileSaveName\nIndex Constant name\nDescription\n1\nOFN_CREATEPROMPT\nIf the specified file does not exist, prompt for permission to\ncreate the file. If the user chooses to create the file, the dialog\nbox closes; otherwise the dialog box remains open.\n2\nOFN_EXPLORERUse an Explorer-style dialog box.\n3\nOFN_EXTENSIONDIFFERENT\nThe file extension entered differed from the extensions specified\nin extension.\n4\nOFN_FILEMUSTEXIST\nOnly the names of existing files can be entered.\n5\nOFN_HIDEREADONLY\nHide the Read Only check box.\n6\nOFN_LONGNAMES\nUse long file names. Ignored for Explorer-style dialog boxes.\n7\nOFN_NOCHANGEDIR\nRestore the current directory to its original value if the user\nchanged the directory while searching for files. This option has\nno effect for GetFileOpenName on Windows NT.\n8\nOFN_NODEREFERENCELINKS\nReturn the path and file name of the selected shortcut (.lnk file);\notherwise the path and file name pointed to by the shortcut are\nreturned.\n9\nOFN_NOLONGNAMES\nUse short file names (8.3 format). Ignored for Explorer-style\ndialog boxes.\n10\nOFN_NONETWORKBUTTON\nHide the Network button. Ignored for Explorer-style dialog\nboxes.\n"}
{"page": 697, "text": "Statements, Events, and Functions\nPage 697\nIndex Constant name\nDescription\n11\nOFN_NOREADONLYRETURN\nThe file returned is not read only and is not in a write-protected\ndirectory.\n12\nOFN_NOTESTFILECREATE\nDo not create the file before the dialog box is closed. This option\nshould be specified if the application saves the file on a network\nshare where files can be created but not modified. No check is\nmade for write protection, a full disk, an open drive door, or\nnetwork protection.\nA file cannot be reopened once it is closed.\n13\nOFN_NOVALIDATE\nInvalid characters are allowed in file names.\n14\nOFN_OVERWRITEPROMPT\nUsed in Save As dialog boxes. Generates a message box if the\nselected file already exists.\n15\nOFN_PATHMUSTEXIST\nOnly valid paths and file names can be entered.\n16\nOFN_READONLYSelect the Read Only check box when the Save dialog box is\ncreated.\nOpening a file\nUse the FileOpen function to open a selected file.\nExamples\nThe following example displays a Select File dialog box that allows multiple selection. The\nfile types are TXT, DOC, and all files, and the initial directory is C:\\Program Files\\Appeon.\nThe option flag 18 specifies that the Explorer-style dialog box is used (2^1 = 2), and the Read\nOnly check box is hidden (2^4 = 16). The selected filenames are displayed in a MultiLineEdit\ncontrol.\nIf the user selects a single file, the docpath variable contains both the path and the file name.\nThe example contains an IF clause to allow for this.\nstring docpath, docname[]\ninteger i, li_cnt, li_rtn, li_filenum\nli_rtn = GetFileOpenName(\"Select File\", &\n   docpath, docname[], \"DOC\", &\n   + \"Text Files (*.TXT),*.TXT,\" &\n   + \"Doc Files (*.DOC),*.DOC,\" &\n   + \"All Files (*.*), *.*\", &\n   \"C:\\Program Files\\Appeon\", 18)\nmle_selected.text = \"\"\nIF li_rtn < 1 THEN return\nli_cnt = Upperbound(docname)\n// if only one file is picked, docpath contains the \n// path and file name\nif li_cnt = 1 then\n   mle_selected.text = string(docpath)\nelse\n// if multiple files are picked, docpath contains the \n"}
{"page": 698, "text": "Statements, Events, and Functions\nPage 698\n// path only - concatenate docpath and docname\n   for i=1 to li_cnt\n      mle_selected.text += string(docpath) &\n         + \"\\\" +(string(docname[i]))+\"~r~n\"\n   next\nend if\nIn the following example, the dialog box has the title Open and displays text files, batch files,\nand INI files in the Files of Type drop-down list. The initial directory is d:\\temp. The option\nflag 512 specifies that the old-style dialog box is used and the Network button is hidden (2^9\n= 512).\n// instance variables\n// string is_filename, is_fullname\nint   li_fileid\nif GetFileOpenName (\"Open\", is_fullname, is_filename, &\n   \"txt\", \"Text Files (*.txt),*.txt,INI Files \" &\n   + \"(*.ini), *.ini,Batch Files (*.bat),*.bat\", &\n   \"d:\\temp\", 512) < 1 then return\nli_fileid = FileOpen (is_fullname, StreamMode!)\nFileRead (li_fileid, mle_notepad.text)\nFileClose (li_fileid)   \nSee also\nDirList\nDirSelect\nGetFileSaveName\nGetFolder\n2.4.256 GetFileSaveName\nDescription\nDisplays the system's Save File dialog box with the specified file name displayed in the File\nname box. The user can enter a file name or select a file from the grayed list.\nSyntax\nGetFileSaveName ( title, pathname, filename {, extension {, filter { , initdir { ,\n aFlag } } } } )\nGetFileSaveName ( title, pathname, filename [ ] {, extension {, filter { , initdir\n { , aFlag } } } } )\nTable 2.656:\nArgument\nDescription\ntitle\nA string whose value is the title of the dialog box.\npathname\nA string variable whose value is the default path name and which stores\nthe returned path. If the user selects a single file, the pathname variable\ncontains the path name and file name. The default file name is displayed\nin the File name box; the user can specify another name.\n"}
{"page": 699, "text": "Statements, Events, and Functions\nPage 699\nArgument\nDescription\nfilename,\nfilename[ ]\nA string variable in which the returned file name is stored or an array\nof string variables in which multiple selected file names are stored.\nSpecifying an array of string variables enables multiple selection in the\ndialog box.\nextension\n(optional)\nA string whose value is a 1- to 3-character default file extension. The\ndefault is no extension.\nfilter (optional)\nA string whose value is the description of the displayed files and the file\nextension that you want use to select the displayed files (the filter). The\nformat for filter is: description,*. ext\nThe default is: \"All Files (*.*),*.*\"\ninitdir (optional)\nA string whose value is the initial directory name. The default is the\ncurrent directory.\naFlag (optional)\nAn unsigned long whose value determines which options are enabled\nin the dialog box. The value of each option's flag is calculated as 2 to\nthe power of (index -1), where index is the integer associated with the\noption. The value of the aggregate flag passed to GetFileOpenName is\nthe sum of the individual option flags. See the table in the Usage section\nfor GetFileOpenName for a list of options, the index associated with each\noption, and the option's meaning.\nReturn value\nInteger.\nReturns 1 if it succeeds, 0 if the user clicks the Cancel button or Windows cancels the\ndisplay, and -1 if an error occurs. If any argument's value is null, GetFileSaveName returns\nnull.\nUsage\nIf you specify a DOS-style extension and the user enters a file name with no extension,\nPowerBuilder appends the default extension to the file name. If you specify a file mask to act\nas a filter, PowerBuilder displays only files that match the mask.\nIf you specify a string for the filename argument, the user can select only one file. The\npathname argument contains the path name and the file name, for example C:\\temp\\test.txt.\nIf you specify a string array for the filename argument, the user can select more than one file.\nIf the user selects multiple files, the pathname argument contains the path only, for example\nC:\\temp. If the user selects a single file, its name is appended to the pathname argument,\nfor example C:\\temp\\test.txt. For an example that shows the use of a string array, see the\nGetFileOpenName function.\nFor usage notes on the filter, initdir, and aFlag arguments, see the GetFileOpenName\nfunction.\nExamples\nThese statements display the Select File dialog box so that the user can select a single file.\nThe default file extension is .DOC, the filter is all files, and the initial directory is C:\\My\n"}
{"page": 700, "text": "Statements, Events, and Functions\nPage 700\nDocuments. The aFlag option 32770 specifies that an Explorer-style dialog box is used\nwith the Read Only check box selected when the dialog box is created. If a file is selected\nsuccessfully, its path displays in a SingleLineEdit control:\nstring ls_path, ls_file\nint li_rc\nls_path = sle_1.Text\nli_rc = GetFileSaveName ( \"Select File\", &\n   ls_path, ls_file, \"DOC\", &\n   \"All Files (*.*),*.*\" , \"C:\\My Documents\", &\n   32770)\n \nIF li_rc = 1 Then\n   sle_1.Text = ls_path\nEnd If\nSee also\nDirList\nDirSelect\nGetFileOpenName\nGetFolder\n2.4.257 GetFilesCount\nDescription\nGets the number of files contained in the archive.\nApplies to\nExtractorObject objects\nSyntax\nobjectname.GetFilesCount ( string source )\nTable 2.657:\nArgument\nDescription\nobjectname\nThe name of the ExtractorObject object.\nsource\nThe full path of the compressed package.\nPackages compressed by the LINUX commands are unsupported.\nReturn value\nLong. If any argument's value is null, the method returns null.\nNote: the folder will also be calculated as a file. For example, if a folder contains 3 files, the\ntotal number of files is 4 when decompressing.\nThe return values are:\n\u2022 >= 0 -- the number of files in the compressed package.\n"}
{"page": 701, "text": "Statements, Events, and Functions\nPage 701\n\u2022 -1 -- A general error occurred.\n\u2022 -3 -- The operation is not supported for the source file format.\n\u2022 -5 -- A task thread is currently running.\n\u2022 -6 -- You must enter a password.\n\u2022 -7 -- The password is incorrect.\n\u2022 -9 -- Failed to read the compressed file.\n\u2022 -10 -- Unrecognized format or the encrypted file name option is used for the compressed\ndocument.\n\u2022 -12 -- The compressed file does not exist.\nExamples\nExtractorObject lnv_extractor\nstring ls_source, ls_password\nlong ll_filescount\nlnv_extractor = create ExtractorObject\nls_source = \"E:\\test.rar\"\n//Suppose the package requires a password\nlnv_extractor.Password = ls_password\nll_filescount = lnv_extractor.GetFilesCount (ls_source)\nSee also\nCancel\nExtract\nGetFilesList\n2.4.258 GetFilesList\nDescription\nGets the list of files (and folders) in the compressed package.\nApplies to\nExtractorObject objects\nSyntax\nobjectname.GetFilesList ( string source, ref string list[] )\nTable 2.658:\nArgument\nDescription\nobjectname\nThe name of the ExtractorObject object.\nsource\nThe full path of the compressed package.\n"}
{"page": 702, "text": "Statements, Events, and Functions\nPage 702\nArgument\nDescription\nPackages compressed by the LINUX commands are unsupported.\nlist[]\nThe list of files (and folders) in the compressed package.\nReturn value\nInteger. If any argument's value is null, the method returns null.\nThe return values are:\n\u2022 1 -- Success.\n\u2022 -1 -- A general error occurred.\n\u2022 -3 -- The operation is not supported for the source file format.\n\u2022 -5 -- A task thread is currently running.\n\u2022 -6 -- You must enter a password.\n\u2022 -7 -- The password is incorrect.\n\u2022 -9 -- Failed to read the compressed file.\n\u2022 -10 -- Unrecognized format or the encrypted file name option is used for the compressed\ndocument.\n\u2022 -12 -- The compressed file does not exist.\nExamples\nExtractorObject lnv_extractor\nstring ls_source, ls_password, ls_fileslist[]\nlong ll_return\nlnv_extractor = create ExtractorObject\nls_source = \"E:\\test.rar\"\n//Suppose the package requires a password\nlnv_extractor.Password = ls_password\nll_return = lnv_extractor.GetFilesList (ls_source, ls_fileslist[])\nSee also\nCancel\nExtract\nGetFilesCount\n2.4.259 GetFirstSheet\nDescription\nObtains the top sheet in the MDI frame, which may or may not be active.\n"}
{"page": 703, "text": "Statements, Events, and Functions\nPage 703\nApplies to\nMDI frame windows\nSyntax\nmdiframewindow.GetFirstSheet ( )\nTable 2.659:\nArgument\nDescription\nmdiframewindow The MDI frame window for which you want the top sheet\nReturn value\nWindow. Returns the first (top) sheet in the MDI frame. If no sheet is open in the frame,\nGetFirstSheet returns an invalid value. If mdiframewindow is null, GetFirstSheet returns null.\nUsage\nTo cycle through the open sheets in a frame, use GetFirstSheet and GetNextSheet. Do not use\nthese functions in combination with GetActiveSheet.\nDid GetFirstSheet return a valid window?\nUse the IsValid function to find out if the return value is valid. If it is not, then no\nsheet is open.\nExamples\nThis script for a menu selection returns the top sheet in the MDI frame:\nwindow wSheet\nstring wName\nwSheet = ParentWindow.GetFirstSheet()\nIF IsValid(wSheet) THEN\n    // There is an open sheet\n    wName = wsheet.ClassName()\n    MessageBox(\"First Sheet is\", wName)\nEND IF\nSee also\nGetNextSheet\nIsValid\n2.4.260 GetFixesVersion\nDescription\nReturns the fix level for the current PowerBuilder execution context. For example, at\nmaintenance level 10.2.1, the fix version is 1.\nApplies to\nContextInformation objects\nSyntax\n"}
{"page": 704, "text": "Statements, Events, and Functions\nPage 704\nservicereference.GetFixesVersion ( fixversion )\nTable 2.660:\nArgument\nDescription\nservicereference\nReference to the ContextInformation service instance.\nfixversion\nInteger into which the function places the fix version. This argument is\npassed by reference.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to determine the current fix version.\nExamples\nThis example calls the GetFixesVersion function:\nString ls_name\nConstant String ls_currver = \"8.0.3\"\nInteger li_majver, li_minver, li_fixver\nContextInformation ci\n \nthis.GetContextService (\"ContextInformation\", ci)\nci.GetMajorVersion(li_majver)\nci.GetMinorVersion(li_minver)\nci.GetFixesVersion(li_fixver)\nIF li_majver <> 8 THEN\n    MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nELSEIF li_minver <> 0 THEN\n    MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nELSEIF li_fixver <> 3 THEN\n    MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nEND IF\nSee also\nGetCompanyName\nGetHostObject\nGetMajorVersion\nGetMinorVersion\nGetName\nGetShortName\nGetVersionName\n2.4.261 GetFocus\nDescription\n"}
{"page": 705, "text": "Statements, Events, and Functions\nPage 705\nDetermines the control that currently has focus.\nSyntax\nGetFocus ( )\nReturn value\nGraphicObject. Returns the control that currently has focus. Returns an invalid control\nreference if an error occurs.\nUse the IsValid function to determine whether GetFocus has returned a valid control.\nExamples\nThese statements set which_control equal to the datatype of the control that currently has\nfocus, and then set text_value to the text property of the control:\nGraphicObject which_control\nSingleLineEdit sle_which\nCommandButton cb_which\nstring text_value\n \nwhich_control = GetFocus()\n \nCHOOSE CASE TypeOf(which_control)\n \nCASE CommandButton!\n    cb_which = which_control\n    text_value = cb_which.Text\n \nCASE SingleLineEdit!\n    sle_which = which_control\n    text_value = sle_which.Text\n \nCASE ELSE\n    text_value = \"\"\nEND CHOOSE\nSee also\nIsValid\nSetFocus\n2.4.262 GetFolder\nDescription\nDisplays a folder selection dialog box.\nSyntax\nGetFolder ( title, directory )\nTable 2.661:\nArgument\nDescription\ntitle\nString for a title that displays above a list box containing a tree view for\nfolder selection.\n"}
{"page": 706, "text": "Statements, Events, and Functions\nPage 706\nArgument\nDescription\ndirectory\nString for the directory name passed by reference to the folder selection\ndialog box. The directory name is selected, and its subfolders, if any, are\ndisplayed in a dialog box tree view.\nReturn value\nInteger.\nReturns 1 if the function succeeds, 0 if the user selects cancel (or the dialog box is closed), -1\nif an error occurs.\nUsage\nThe directory selected by the user is returned in the same variable that is passed to the folder\nselection dialog box.\nExamples\nThis example displays the folder contents of the Appeon directory in a folder selection dialog\nbox. The string passed in the title argument displays above the tree view:\nstring ls_path = \"d:\\program files\\appeon\"\ninteger li_result\nli_result = GetFolder( \"my targets\", ls_path )\nsle_1.text=ls_path  \n// puts the user-selected path in a SingleLineEdit box.\nSee also\nDirectoryExists\nDirList\nDirSelect\nGetCurrentDirectory\nGetFileOpenName\nGetFileSaveName\n2.4.263 GetGroup\nDescription\nGets the group according to the handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetGroup ( Long ItemHandle, ref RibbonGroupItem Item )\nTable 2.662:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 707, "text": "Statements, Events, and Functions\nPage 707\nArgument\nDescription\nItemHandle\nThe handle of the group you want to get.\nItem\nA RibbonGroupItem variable in which you want to store the group\nidentified by the item handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get an item according to the handle by using the GetItem function.\nExamples\nThe following code example inserts a group to the \"MyPanel\" panel and then gets a copy of\nthe group according to its handle and stores it in the lr_Group variable.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group\nRibbonGroupItem lr_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupFirst (ll_Handle_Panel)\nli_Return = rbb_1.GetGroup (ll_Handle_Group, lr_Group)\nSee also\nInsertGroup\nInsertGroupFirst\nInsertGroupLast\nDeleteGroup\nSetGroup\nGetChildItemByIndex\n2.4.264 GetGlobalProperty (obsolete)\nDescription\nReturns the value of an SSL global property. This function is used by PowerBuilder clients\nconnecting to EAServer.\nObsolete function\nGetGlobalProperty is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\n"}
{"page": 708, "text": "Statements, Events, and Functions\nPage 708\nSSLServiceProvider object\nSyntax\nsslserviceprovider.GetGlobalProperty ( property,  values)\nTable 2.663:\nArgument\nDescription\nsslserviceprovider Reference to the SSLServiceProvider service instance.\nproperty\nThe name of the SSL property for which you want to return values.\nFor a complete list of supported SSL properties, see your EAServer\ndocumentation for the Connection object.\nvalues\nAn array of string values for the specified SSL property.\nReturn value\nLong.\nReturns one of the following values:\n0 -- Success\n-1 -- Unknown property\n-3 -- Property has no value\n-10 -- An EAServer or SSL failure has occurred\n-11 -- Bad argument list\nUsage\nThe GetGlobalProperty function allows PowerBuilder clients that connect to EAServer\nthrough SSL to access global SSL properties.\nAny properties set using the SSLServiceProvider interface are global to all connections\nmade by the client to all EAServer servers. You can override any of the global settings at the\nconnection level by specifying them as options to the Connection object.\nOnly clients can get and set SSL properties. Server components do not have permission to\nuse the SSLServiceProvider service.\nExamples\nThe following example shows the use of the GetGlobalProperty function to get the value of\nthe sessLingerTime property:\nSSLServiceProvider ssl\nstring ls_values[]\nlong rc\n...\nthis.GetContextService(\"SSLServiceProvider\", ssl)\nrc = ssl.GetGlobalProperty(\"sessLingerTime\", ls_values)\n...\nSee also\n"}
{"page": 709, "text": "Statements, Events, and Functions\nPage 709\nSetGlobalProperty (obsolete)\n2.4.265 GetHeader\n2.4.265.1 Syntax 1: for TokenRequest objects\nDescription\nGets the request header by name.\nApplies to\nTokenRequest object\nSyntax\nobjectname.GetHeader ( string headerName )\nTable 2.664:\nArgument\nDescription\nobjectname\nA reference to the TokenRequest object in which you want to get the\nrequest header.\nheaderName\nA string specifying the header name.\nReturn value\nString.\nReturns the value related to the header name. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetHeader function to get the value of the\ncontent-type header:\nstring ls_header\nTokenRequest lnv_TokenRequest\nls_header = lnv_TokenRequest.getheader(\"content-type\")\nSee also\nAppendParam\nClearHeaders\nGetHeaders\nSetHeader\nSetHeaders\n2.4.265.2 Syntax 2: for TokenResponse objects\nDescription\n"}
{"page": 710, "text": "Statements, Events, and Functions\nPage 710\nGets the response header by name.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetHeader ( string headerName )\nTable 2.665:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\nresponse header.\nheaderName\nA string specifying the header name.\nReturn value\nString.\nReturns the value related to the header name. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetHeader function to get the value of the\ncontent-type header:\nstring ls_header\nTokenResponse lnv_TokenResponse\nls_header = lnv_TokenResponse.getheader(\"content-type\")\nSee also\nGetAccessToken\nGetBody\nGetExpiresIn\nGetHeaders\nGetRefreshToken\nGetStatusCode\nGetStatusText\nGetTokenError\nGetTokenType\n2.4.265.3 Syntax 3: for OAuthRequest objects\nDescription\nGets the request header by name.\n"}
{"page": 711, "text": "Statements, Events, and Functions\nPage 711\nApplies to\nOAuthRequest object\nSyntax\nobjectname.GetHeader ( string headerName )\nTable 2.666:\nArgument\nDescription\nobjectname\nA reference to the OAuthRequest object in which you want to get the\nrequest header.\nheaderName\nA string specifying the header name.\nReturn value\nString.\nReturns the value related to the header name. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetHeader function to get the value of the\ncontent-type header:\nstring ls_header\nOAuthRequest lnv_OAuthRequest\nls_header = lnv_OAuthRequest.getheader(\"content-type\")\nSee also\nClearHeaders\nGetBody\nGetHeaders\nSetAccessToken\nSetBody\nSetHeader\nSetHeaders\n2.4.265.4 Syntax 4: for ResourceResponse objects\nDescription\nGets the response header by name.\nApplies to\nResourceResponse object\nSyntax\n"}
{"page": 712, "text": "Statements, Events, and Functions\nPage 712\nobjectname.GetHeader ( string headerName )\nTable 2.667:\nArgument\nDescription\nobjectname\nA reference to the ResourceResponse object in which you want to get the\nresponse header.\nheaderName\nA string specifying the header name.\nReturn value\nString.\nReturns the value related to the header name. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetHeader function to get the value of the\ncontent-type header:\nstring ls_header\nResourceResponse lnv_ResourceResponse\nls_header = lnv_ResourceResponse.getheader(\"content-type\")\nSee also\nGetBody\nGetHeaders\nGetStatusCode\nGetStatusText\n2.4.266 GetHeaders\n2.4.266.1 Syntax 1: for TokenRequest objects\nDescription\nGets the header of all requests.\nApplies to\nTokenRequest object\nSyntax\nobjectname.GetHeaders ( )\nTable 2.668:\nArgument\nDescription\nobjectname\nA reference to the TokenRequest object in which you want to get the\nrequest header.\n"}
{"page": 713, "text": "Statements, Events, and Functions\nPage 713\nReturn value\nString.\nReturns the header information of all requests. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetHeaders function to get the value of all\nheaders:\nstring ls_headers\nTokenRequest lnv_TokenRequest\nls_headers = lnv_TokenRequest.getheaders()\nSee also\nAppendParam\nClearHeaders\nGetHeader\nSetHeader\nSetHeaders\n2.4.266.2 Syntax 2: for TokenResponse objects\nDescription\nGets the header of all responses.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetHeaders ( )\nTable 2.669:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\nresponse header.\nReturn value\nString.\nReturns the header information of all responses.\nExamples\nThe following example shows the use of the GetHeaders function to get the value of all\nheaders:\n"}
{"page": 714, "text": "Statements, Events, and Functions\nPage 714\nstring ls_headers\nTokenResponse lnv_TokenResponse\nls_headers = lnv_TokenResponse.getheaders()\nSee also\nGetAccessToken\nGetBody\nGetExpiresIn\nGetHeader\nGetRefreshToken\nGetStatusCode\nGetStatusText\nGetTokenError\nGetTokenType\n2.4.266.3 Syntax 3: for OAuthRequest objects\nDescription\nGets the header of all requests.\nApplies to\nOAuthRequest object\nSyntax\nobjectname.GetHeaders ( )\nTable 2.670:\nArgument\nDescription\nobjectname\nA reference to the OAuthRequest object in which you want to get the\nrequest header.\nReturn value\nString.\nReturns the header information of all requests. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetHeaders function to get the value of all\nheaders:\nstring ls_headers\nOAuthRequest lnv_OAuthRequest\n"}
{"page": 715, "text": "Statements, Events, and Functions\nPage 715\nls_headers = lnv_OAuthRequest.getheaders()\nSee also\nClearHeaders\nGetBody\nGetHeader\nSetAccessToken\nSetBody\nSetHeader\nSetHeaders\n2.4.266.4 Syntax 4: for ResourceResponse objects\nDescription\nGets the header of all responses.\nApplies to\nResourceResponse object\nSyntax\nobjectname.GetHeaders ( )\nTable 2.671:\nArgument\nDescription\nobjectname\nA reference to the ResourceResponse object in which you want to get the\nresponse header.\nReturn value\nString.\nReturns the header information of all responses.\nExamples\nThe following example shows the use of the GetHeaders function to get the value of all\nheaders:\nstring ls_headers\nResourceResponse lnv_ResourceResponse\nls_headers = lnv_ResourceResponse.getheaders()\nSee also\nGetBody\nGetHeader\nGetStatusCode\n"}
{"page": 716, "text": "Statements, Events, and Functions\nPage 716\nGetStatusText\n2.4.267 GetHostObject\nDescription\nProvides a reference to the context's host object.\nHost object support\nCurrently, host object support is implemented only in the window ActiveX when\nrunning under Internet Explorer. In this situation GetHostObject returns a reference to\nthe IWebBrowserApp ActiveX automation server object.\nApplies to\nContextInformation objects\nSyntax\nservicereference.GetHostObject ( hostobject )\nTable 2.672:\nArgument\nDescription\nservicereference\nReference to the Context Information service instance\nhostobject\nPowerObject into which the function places a reference to the ActiveX\nautomation server object\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to obtain a reference to the context object model. If running the window\nActiveX under Internet Explorer 3.0 or greater and hostobject is an uninstantiated OleObject\nvariable, the function returns a reference to an ActiveX automation server object, which you\ncan use to control the hosting browser. If host object support is not available, the function\nreturns -1 and hostobject is null.\nExamples\nThis example calls the GetHostObject function. Ici_info is an instance variable of type\nContextInformation, which has been populated using the GetContextService function; ole1 is\nan instance variable of type OLEObject:\nInteger li_return\n \nli_return = ici_info.GetHostObject(ole1)\nIF li_return = 1 THEN\n    sle_1.Text = \"GetHostObject succeeded\"\nELSE\n    sle_1.Text = \"GetHostObject failed\"\n    cb_goback.Enabled = FALSE\n"}
{"page": 717, "text": "Statements, Events, and Functions\nPage 717\n    cb_navigate.Enabled = FALSE\nEND IF\nSee also\nGetCompanyName\nGetName\nGetShortName\nGetVersionName\n2.4.268 GetHttpResponseHeaders\nDescription\nGets all of the response headers' information.\nApplies to\nApplication object\nSyntax\napplicationname.GetHttpResponseHeaders ( )\nTable 2.673:\nArgument\nDescription\napplicationname\nThe name of the application object for which you want to get all of the\nresponse headers\nReturn value\nString.\nReturns the information of all of the response headers or returns an empty string if the current\napplication is not an installable cloud app deployed with PowerServer.\nExamples\nThis example gets information of all headers:\nString ls_Headers\nls_Headers = Getapplication().GetHttpResponseHeaders()\nSee also\nBeginSession\nGetHttpResponseStatusCode\nGetHttpResponseStatusText\nSetHttpRequestHeader\n2.4.269 GetHttpResponseStatusCode\nDescription\n"}
{"page": 718, "text": "Statements, Events, and Functions\nPage 718\nGets the response status code.\nApplies to\nApplication object\nSyntax\napplicationname.GetHttpResponseStatusCode ( )\nTable 2.674:\nArgument\nDescription\napplicationname\nThe name of the application object for which you want to get the\nresponse status code\nReturn value\nLong.\nReturns the response status code or returns -1 if the current application is not an installable\ncloud app deployed with PowerServer.\nExamples\nThis example gets the response status:\nLong ls_StatusCode\nls_StatusCode = Getapplication().GetHttpResponseStatusCode()\nSee also\nBeginSession\nGetHttpResponseHeaders\nGetHttpResponseStatusText\nSetHttpRequestHeader\n2.4.270 GetHttpResponseStatusText\nDescription\nGets the response status description.\nApplies to\nApplication object\nSyntax\napplicationname.GetHttpResponseStatusText ( )\nTable 2.675:\nArgument\nDescription\napplicationname\nThe name of the application object for which you want to get the\nresponse status description\n"}
{"page": 719, "text": "Statements, Events, and Functions\nPage 719\nReturn value\nString.\nReturns the response status description or returns an empty string if the current application is\nnot an installable cloud app deployed with PowerServer.\nExamples\nThis example gets the response status description:\nString ls_StatusText\nls_StatusText = Getapplication().GetHttpResponseStatusText()\nSee also\nBeginSession\nGetHttpResponseHeaders\nGetHttpResponseStatusCode\nSetHttpRequestHeader\n2.4.271 GetInstalledRuntimes\nDescription\nGets the version number of PowerBuilder Runtime that is installed on the current computer.\nSyntax\nGetInstalledRuntimes ( )\nReturn value\nString.\nReturns the version number as a string, or returns null if no PowerBuilder Runtime has been\ninstalled. If multiple version numbers are returned, they will be separated by a comma (\",\").\nExamples\nThis example gets the runtime version on the current machine:\nstring ls_version\nls_version = getinstalledruntimes()\n2.4.272 GetItem\nRetrieves data associated with a specified item in ListView, TreeView, RibbonMenu, or\nRibbonBar controls.\nTable 2.676:\nTo retrieve data associated with a specified\nUse\nListView control item\nSyntax 1\nListView control item and column\nSyntax 2\nTreeView item\nSyntax 3\n"}
{"page": 720, "text": "Statements, Events, and Functions\nPage 720\nTo retrieve data associated with a specified\nUse\nRibbonMenu control\nSyntax 4\nRibbonBar control\nSyntax 5\n2.4.272.1 Syntax 1: For ListView controls\nDescription\nRetrieves a ListViewItem object from a ListView control so you can examine its properties.\nApplies to\nListView controls\nSyntax\nlistviewname.GetItem ( index {, column}, item )\nTable 2.677:\nArgument\nDescription\nlistviewname\nThe name of the ListView control for which you want to retrieve the\nListView item\nindex\nThe index number of the item you want to retrieve\ncolumn\nThe index number of the column for which you want item information\nitem\nThe ListViewItem variable in which you want to store the ListViewItem\nobject\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. Stores a ListViewItem object in a\nListViewItem variable.\nUsage\nYou can retrieve properties for any ListView item with this syntax. If you do not specify\na column, GetItem retrieves properties for the first column of an item. Only report views\ndisplay multiple columns.\nTo retrieve labels only, use syntax 2. You can use GetColumn to obtain column properties\nthat are not specific to a ListView item.\nTo change pictures and other property values associated with a ListView item, use GetItem,\nchange the property values, and use SetItem to apply the changes back to the ListView.\nExamples\nThis example uses GetItem to move the second item in the lv_list ListView control to the\nfifth item. It retrieves item 2, inserts it into the ListView control as item 5, and then deletes\nthe original item:\nlistviewitem l_lvi\n \n"}
{"page": 721, "text": "Statements, Events, and Functions\nPage 721\nlv_list.GetItem(2, l_lvi)\nlv_list.InsertItem(5, l_lvi)\nlv_list.DeleteItem(2)\nSee also\nGetColumn\nSetItem\n2.4.272.2 Syntax 2: For ListView controls\nDescription\nRetrieves the value displayed for a ListView item in a specified column.\nApplies to\nListView controls\nSyntax\nlistviewname.GetItem ( index, column, label )\nTable 2.678:\nArgument\nDescription\nlistviewname\nThe name of the ListView control from which you want to retrieve a\ndisplayed value.\nindex\nThe index number of the item for which you want to retrieve a displayed\nvalue.\ncolumn\nThe index number of the column for which you want to retrieve a value.\nIf the ListView is not a multicolumn report view, all the items are\nconsidered to be in column 1.\nlabel\nA string variable in which you store the displayed value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. Stores the displayed value of the ListView\ncolumn in a string variable.\nUsage\nTo retrieve property values for a ListView item, use Syntax 1.\nExamples\nThis example gets the displayed values from column 1 and column 3 of the first row of the\nlv_list ListView and displays them in the sle_info SingleLineEdit control.\nstring ls_artist, ls_comp\n \nlv_list.GetItem(1, 1 , ls_comp)\nlv_list.GetItem(1, 3 , ls_artist)\nsle_info.text = ls_artist +\" wrote \" + ls_comp + \".\"\n"}
{"page": 722, "text": "Statements, Events, and Functions\nPage 722\nSee also\nSetItem\n2.4.272.3 Syntax 3: For TreeView controls\nDescription\nRetrieves the data associated with the specified item.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.GetItem ( itemhandle, item)\nTable 2.679:\nArgument\nDescription\ntreeviewname\nThe name of the TreeView control in which you want to get data for a\nspecified item\nitemhandle\nThe handle for the item for which you want to retrieve information\nitem\nA TreeViewItem variable in which you want to store the item identified\nby the item handle\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nUse GetItem to retrieve the state information associated with a specific item in a TreeView\n(such as label, handle, or picture index). After you have retrieved the information, you can\nuse it in your application. To change a property of an item, call GetItem to assign the item to\na TreeViewItem variable, change its properties, and call SetItem to copy the changes back to\nthe TreeView.\nExamples\nThis code for the Clicked event gets the clicked item and changes it overlay picture. The\nSetItem function copies the change back to the TreeView:\ntreeviewitem tvi\nThis.SetItem(handle, tvi)\ntvi.OverlayPictureIndex = 1\nThis.SetItem(handle, tvi)\nThis example tracks items in the SelectionChanged event. If there is no prior selection, the\nvalue of l_tviold is zero:\ntreeviewitem l_tvinew, l_tviold\n \n// Get the treeview item that was the old selection\n"}
{"page": 723, "text": "Statements, Events, and Functions\nPage 723\ntv_list.GetItem(oldhandle, l_tviold)\n \n// Get the treeview item that is currently selected\ntv_list.GetItem(newhandle, l_tvinew)\n \n// Print the labels for the two items in the\n// SingleLineEdit\nsle_get.Text = \"Selection changed from \" &\n    + String(l_tviold.Label) + \" to \" &\n    + String(l_tvinew.Label)\nSee also\nInsertItem\n2.4.272.4 Syntax 4: For RibbonMenu controls\nDescription\nGets an item of the ribbon menu.\nApplies to\nRibbonMenu control\nSyntax\ncontrolname.GetItem ( { Long ParentIndex, } Long Index, ref RibbonMenuItem Item )\nTable 2.680:\nArgument\nDescription\ncontrolname\nThe name of the RibbonMenu control in which you want to get data for a\nspecified item\nParentIndex\nThe index of the menu item (RibbonMenuItem) whose submenu you\nwant to get.\nIf not specified, the menu item will be obtained; if specified to a valid\nvalue, the submenu of the menu item (whose index is ParentIndex) will\nbe obtained; if specified to an invalid value, an error would occur and this\noperation would return -1.\nIndex\nThe index of the menu item or submenu item you want to obtain. If index\nis invalid, an error would occur and this operation would return -1.\nItem\nA RibbonMenuItem variable in which you want to store the menu item\nidentified by the index.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nA RibbonMenu control can only contain menu items in no more than two levels.\nExamples\n"}
{"page": 724, "text": "Statements, Events, and Functions\nPage 724\nThis example inserts a \"MenuItem1\" menu item and a \"SubMenuItem1\" submenu item under\n\"MenuItem1\"; and then gets copies of the \"MenuItem1\" menu item and the \"SubMenuItem1\"\nsubmenu items.\nInteger li_Return\nLong ll_Index, ll_Index2\nRibbonMenu lr_Menu\nRibbonMenuItem lr_MenuItem1, lr_SubMenuItem1\nll_Index = lr_Menu.InsertItemLast (\"MenuItem1\", \"AddSmall!\", \"Ue_MenuItem1Clicked\")\nll_Index2 = lr_Menu.InsertItemLast (ll_Index, \"SubMenuItem1\", \"AddSmall!\",\n \"Ue_MenuItem11Clicked\")\nli_Return = lr_Menu.GetItem (ll_Index, lr_MenuItem1)\nli_Return = lr_Menu.GetItem (ll_Index, ll_Index2, lr_SubMenuItem1)\nSee also\nAddSeparatorItem\nDeleteItem\nGetItemCount\nInsertItem\nInsertItemFirst\nInsertItemLast\nSetItem\n2.4.272.5 Syntax 5: For RibbonBar controls\nDescription\nGets an item according to its handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetItem ( Long ItemHandle, ref PowerObject Item )\nTable 2.681:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control from which you want to get the item.\nItemHandle\nThe handle of the item you want to obtain.\nItem\nAn item variable in which you want to store the item identified by the\nitem handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\n"}
{"page": 725, "text": "Statements, Events, and Functions\nPage 725\nUsage\nYou can also get an item according to its tag value by using the GetItemByTag function.\nThe GetItem and GetItemByTag functions can be used to get items including\nApplicationButton, TabButton, Category, Panel, Group, LargeButton, SmallButton,\nCheckBox, and ComboBox; but cannot get RibbonMenuItem, RibbonApplicationMenu, and\nRibbonMenu. To get RibbonMenuItem, you can use the GetItem Syntax 4, GetMasterItem,\nand GetRecentItem functions. To get RibbonApplicationMenu and RibbonMenu, you can use\nthe GetMenu and GetMenuByButtonHandle functions.\nYou can also use the following functions to get the individual control: GetApplicationButton,\nGetCategory, GetCheckBox, GetComboBox, GetGroup, GetLargeButton, GetPanel,\nGetSmallButton, and GetTabButton.\nExamples\nThis example gets the large button or the small button that is being clicked according to the\nhandle and then sets its tag value.\n//Event ue_buttonclicked (long itemhandle)\nPowerObject lpo_Object\nRibbonSmallButtonItem lr_SmallButton\nRibbonLargeButtonItem lr_LargeButton\nInteger li_Return, li_Return2\nli_Return = rbb_1.GetItem(Itemhandle, lpo_Object)\nIf li_Return = 1 Then\n Choose Case lpo_Object.ClassName()\n  Case \"ribbonsmallbuttonitem\"\n   lr_SmallButton = lpo_Object\n   lr_SmallButton.Tag = \"SmallButton Clicked\"\n   li_Return2 = rbb_1.SetItem(lr_SmallButton)\n  Case \"ribbonlargebuttonitem\"\n   lr_LargeButton = lpo_Object\n   lr_LargeButton.Tag = \"LargeButton Clicked\"\n   li_Return2 = rbb_1.SetItem(lr_LargeButton)\n End Choose\nEnd If\n2.4.273 GetItemArray\n2.4.273.1 Syntax 1\nDescription\nGets the value of the item whose type is array.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemArray ( ParentItemHandle, Key )\nTable 2.682:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose array item you want to obtain.\n"}
{"page": 726, "text": "Statements, Events, and Functions\nPage 726\nArgument\nDescription\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonArrayItem type.\nReturn value\nLong.\nReturns the value of the child item of an array if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726].\nExample 1\nThe following code handles a regular JSON string.\nJsonParser lnv_JsonParser\nString ls_Json, ls_name\nLong ll_number_item, ll_number, ll_object_item\nLong ll_RootObject, ll_department_array\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"department_array\":[999999,\n {\"name\":\"Website\"}, {\"name\":\"PowerBuilder\"}, {\"name\":\"IT\"}] }'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_department_array = lnv_JsonParser.GetItemArray(ll_RootObject,\n \"department_array\")\nll_number_item = lnv_JsonParser.GetChildItem(ll_department_array, 1)\nll_number = lnv_JsonParser.GetItemNumber(ll_number_item)\nll_object_item = lnv_JsonParser.GetChildItem(ll_department_array, 2)\nls_name = lnv_JsonParser.GetItemString(ll_object_item, \"name\")\nExample 2\nThe following code handles an irregular JSON string which contains a null value.\nlong ll_loop,i\nlong ll_row  \nlong ll_root,ll_object,ll_item  //receiving the handle of JSON item\nstring ls_json,ls_error\nstring ls_return\nstring ls_key  \njsonparser lnv_jsonparser\nlnv_jsonparser = create jsonparser\nls_json = \"[{~\"ID~\":101,~\"FirstName~\":~\"Li~\"},{~\"ID~\":102,~\"FirstName~\":null}]\" //\n JSON data contains a null value\n//Loads the JSON data\nls_error= lnv_jsonparser.loadstring(ls_json)\nif len(trim(ls_error)) > 0 then\n"}
{"page": 727, "text": "Statements, Events, and Functions\nPage 727\n         messagebox(\"Failed\",\"load json failed:\"+ls_error)\n         return\nend if\n//Obtains the handle of root item\nll_root = lnv_jsonparser.getrootitem()\n//Obtains the data of each row\nfor ll_loop = 1 to lnv_jsonparser.getchildcount(ll_root)\n         //Obtains the handle of each row\n         ll_object = lnv_jsonparser.getchilditem(ll_root,ll_loop)\n         //Inserts a row into datawindow\n         ll_row = dw_1.insertrow(0)\n         //Parses the item value one by one in a row in a loop\n         for i = 1 to lnv_jsonparser.getchildcount(ll_object)\n                   //Obtains the handle and key of each item\n                   ll_item = lnv_jsonparser.getchilditem(ll_object,i)\n                   ls_key = lnv_jsonparser.getchildkey(ll_object,i)\n                   //Checks the data type of each item\n                   choose case lnv_jsonparser.getitemtype(ll_item)\n                            case jsonarrayitem!,jsonobjectitem!\n                                     messagebox(\"Error\",\"Not standard datatype\") //\nItem value cannot be inserted to datawindow\n                            case jsonnumberitem!\n                                     //Obtains number data\n                                    \n dw_1.setitem(ll_row,i,lnv_jsonparser.getitemnumber(ll_item))\n                                     //\ndw_1.setitem(ll_row,ls_key,lnv_jsonparser.getitemnumber(ll_object,ls_key)) or set\n data by column name\n                            case jsonstringitem!\n                                     //Obtains string data\n                                    \n dw_1.setitem(ll_row,i,lnv_jsonparser.getitemstring(ll_item))\n                            case jsonbooleanitem!\n                                     //Obtains boolean data. boolean converted to\n string and inserted to datawindow\n                                    \n dw_1.setitem(ll_row,i,string(lnv_jsonparser.getitemboolean(ll_item)))\n                            case jsonnullitem!\n                                     //null value. Not inserted to datawindow.     \n        \n                   end choose\n         next  //Finish parsing one row\nnext//Start parsing next row\nSee also\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\n"}
{"page": 728, "text": "Statements, Events, and Functions\nPage 728\nGetItemTime\nGetItemType\nGetNumberType\n2.4.273.2 Syntax 2\nDescription\nGets the value of the item whose type is array.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemArray ( ItemPath )\nTable 2.683:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose array item you want to obtain.\nItemPath\nA string whose value is the path of the item of JsonArrayItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nLong.\nReturns the value of the child item of an array if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726].\nExample\nThe following code gets an array according to its item path.\nJsonParser lnv_JsonParser\nString ls_Json, ls_name, ls_Path\nLong ll_number_item, ll_number, ll_object_item\nLong ll_department_array\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"department_array\":[999999,\n {\"name\":\"Website\"}, {\"name\":\"PowerBuilder\"}, {\"name\":\"IT\"}] }'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/department_array\"\nll_department_array = lnv_JsonParser.GetItemArray(ls_Path)\n"}
{"page": 729, "text": "Statements, Events, and Functions\nPage 729\nll_number_item = lnv_JsonParser.GetChildItem(ll_department_array, 1)\nll_number = lnv_JsonParser.GetItemNumber(ll_number_item)\nll_object_item = lnv_JsonParser.GetChildItem(ll_department_array, 2)\nls_name = lnv_JsonParser.GetItemString(ll_object_item, \"name\")\nSee also\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.274 GetItemArrayJSONString\n2.4.274.1 Syntax 1\nDescription\nGets the string value of the item whose type is array.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemArrayJSONString ( ParentItemHandle, Key )\nTable 2.684:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose array item you want to obtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonArrayItem type.\nReturn value\n"}
{"page": 730, "text": "Statements, Events, and Functions\nPage 730\nString.\nReturns the string value of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, the method returns null. If an error occurs, the method throws the exception.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726].\nExample\nThe following code gets the JSON string of an array according to the key name:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Array\nLong ll_RootObject\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"department_array\":[999999,\n {\"name\":\"Website\"}, {\"name\":\"PowerBuilder\"}, {\"name\":\"IT\"}] }'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nls_Array = lnv_JsonParser.GetItemArrayJSONString(ll_RootObject, \"department_array\")\nSee also\nGetItemArray\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.274.2 Syntax 2\nDescription\nGets the string value of the item whose type is array.\nApplies to\nJSONParser objects\n"}
{"page": 731, "text": "Statements, Events, and Functions\nPage 731\nSyntax\nobjectname.GetItemArrayJSONString ( ItemPath )\nTable 2.685:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose array item you want to obtain.\nItemPath\nA string whose value is the path of the item of JsonArrayItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nString.\nReturns the string value of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, the method returns null. If an error occurs, the method throws the exception.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726].\nExample\nThe following code gets the JSON string of an array according to its item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Array, ls_Path\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"department_array\":[999999,\n {\"name\":\"Website\"}, {\"name\":\"PowerBuilder\"}, {\"name\":\"IT\"}] }'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/department_array\"\nls_Array = lnv_JsonParser.GetItemArrayJSONString(ls_Path)\nSee also\nGetItemArray\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\n"}
{"page": 732, "text": "Statements, Events, and Functions\nPage 732\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.274.3 Syntax 3\nDescription\nGets the string value of the item whose type is array.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemArrayJSONString ( ItemHandle )\nTable 2.686:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose array item you want to obtain.\nItemHandle\nA long value specifying the item handle which is JsonObjectItem type.\nReturn value\nString.\nReturns the string value of the item if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, the method throws the exception.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726].\nExample\nThe following code gets the JSON string of an array according to its item handle:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Array\nLong ll_RootObject, ll_ChildArray, ll_Handle\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true,\"array\":[12,34,[56,78]]}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_ChildArray = lnv_JsonParser.GetItemArray(ll_RootObject,\"array\")\nll_Handle = lnv_JsonParser.GetChildItem(ll_ChildArray, 3)\nls_Array = lnv_JsonParser.GetItemArrayJSONString(ll_Handle)\nSee also\n"}
{"page": 733, "text": "Statements, Events, and Functions\nPage 733\nGetItemArray\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.275 GetItemAtPointer\nDescription\nGets the handle or the index of the item under the cursor.\nApplies to\nListView controls, TreeView controls\nSyntax\ncontrolname.GetItemAtPointer ( )\nTable 2.687:\nArgument\nDescription\ncontrolname\nThe name of the control whose handle or index you want to obtain.\nReturn value\nLong.\nReturns the index (ListView) or handle (TreeView) of the item under the cursor. Returns -1\nfor failure.\nUsage\nSystem events that select an item in a ListView or TreeView control, such as the Clicked\nevent, already have an argument that passes the index for the ListView or the handle for the\nTreeView. The GetItemAtPointer function allows you to retrieve the index or handle in user\nevents (or system events without an index or handle argument) for a ListView or TreeView\ncontrol.\nExamples\n"}
{"page": 734, "text": "Statements, Events, and Functions\nPage 734\nThis example places the handle of a TreeView item in a SingleLineEdit box:\ninteger li_index\n \nli_index= tv_1.GetItematPointer ( )\nsle_1.text = string (li_index)\nSee also\nFindItem\nSelectItem\n2.4.276 GetItemBlob\n2.4.276.1 Syntax 1\nDescription\nGets the value of the item whose type is blob.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemBlob ( ItemHandle )\nTable 2.688:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemHandle\nA long whose value is the item handle of JsonStringItem type.\nReturn value\nBlob.\nReturns the blob value of the item if it succeeds; if any argument's value is null, returns null;\nif an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the third item:\nJsonParser lnv_JsonParser\nString ls_Json\nBlob lblb_image\nLong ll_RootObject, ll_item\nlnv_JsonParser = Create JsonParser\n"}
{"page": 735, "text": "Statements, Events, and Functions\nPage 735\nls_Json = '{\"id\":1001, \"name\": \"evan\", \"Blob\":\"dABoAGkAcwAgAGkAcwAgAGIAbABvAGIA\"}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_item = lnv_JsonParser.GetChildItem(ll_RootObject, 3)\nlblb_image = lnv_JsonParser.GetItemBlob(ll_item)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.276.2 Syntax 2\nDescription\nGets the value of the item whose type is blob.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemBlob ( ParentItemHandle, Key )\nTable 2.689:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child item value you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonStringItem type.\nReturn value\n"}
{"page": 736, "text": "Statements, Events, and Functions\nPage 736\nBlob.\nReturns the blob value of the child item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the \"image\" item:\nJsonParser lnv_JsonParser\nString ls_Json\nBlob lblb_image\nLong ll_RootObject, ll_item \nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\": \"evan\", \"image\": \"=F923LDF%$2KS0238D8G\u2026\u2026BASE64\"}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nlblb_image = lnv_JsonParser.GetItemBlob(ll_item, \"image\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.276.3 Syntax 3\nDescription\nGets the value of the item whose type is blob.\nApplies to\nJSONParser objects\n"}
{"page": 737, "text": "Statements, Events, and Functions\nPage 737\nSyntax\nobjectname.GetItemBlob ( ItemPath )\nTable 2.690:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemPath\nA string whose value is the path of the item of JsonStringItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nBlob.\nReturns the blob value of the item if it succeeds; if any argument's value is null, returns null;\nif an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the third item according to its item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Path\nBlob lblb_image\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"Blob\":\"dABoAGkAcwAgAGkAcwAgAGIAbABvAGIA\"}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/Blob\"\nlblb_image = lnv_JsonParser.GetItemBlob(ls_Path)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\n"}
{"page": 738, "text": "Statements, Events, and Functions\nPage 738\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.277 GetItemBoolean\n2.4.277.1 Syntax 1\nDescription\nGets the value of the item whose type is boolean.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemBoolean ( ItemHandle )\nTable 2.691:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemHandle\nA long whose value is the item handle of JsonBooleanItem type.\nReturn value\nBoolean.\nReturns the boolean value of the item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the third child item according to the item handle:\nJsonParser lnv_JsonParser\nString ls_Json\nLong ll_RootObject, ll_item\nBoolean lb_active\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_item = lnv_JsonParser.GetChildItem(ll_RootObject, 3)\n"}
{"page": 739, "text": "Statements, Events, and Functions\nPage 739\nlb_active = lnv_JsonParser.GetItemBoolean(ll_item)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.277.2 Syntax 2\nDescription\nGets the value of the item whose type is boolean.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemBoolean ( ParentItemHandle, Key )\nTable 2.692:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child item value you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonBooleanItem\ntype.\nReturn value\nBoolean.\nReturns the boolean value of the child item if it succeeds; if any argument's value is null,\nreturns null; if an error occurs, the SystemError event will be triggered.\n"}
{"page": 740, "text": "Statements, Events, and Functions\nPage 740\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the \"active\" item according to the parent item handle and the\nkey name:\nJsonParser lnv_JsonParser\nString ls_Json\nLong ll_RootObject\nBoolean lb_active\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nlb_active = lnv_JsonParser.GetItemBoolean(ll_RootObject, \"active\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.277.3 Syntax 3\nDescription\nGets the value of the item whose type is boolean.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemBoolean ( ItemPath )\n"}
{"page": 741, "text": "Statements, Events, and Functions\nPage 741\nTable 2.693:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemPath\nA string whose value is the path of the item of JsonBooleanItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nBoolean.\nReturns the boolean value of the item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the third child item according to the item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Path\nBoolean lb_active\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/active\"\nlb_active = lnv_JsonParser.GetItemBoolean(ls_Path)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\n"}
{"page": 742, "text": "Statements, Events, and Functions\nPage 742\nGetNumberType\n2.4.278 GetItemByTag\nDescription\nGets an item according to its tag in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetItemByTag ( String Tag, ref PowerObject Item )\nTable 2.694:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nTag\nThe tag value of the item you want to obtain.\nItem\nA PowerObject variable in which you want to store the item identified by\nthe tag.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get an item according to its handle by using the GetItem function.\nThe GetItemByTag and GetItem functions can be used to get items including\nApplicationButton, TabButton, Category, Panel, Group, LargeButton, SmallButton,\nCheckBox, and ComboBox; but cannot get RibbonMenuItem, RibbonApplicationMenu, and\nRibbonMenu. To get RibbonMenuItem, you can use the GetItem Syntax 4, GetMasterItem,\nand GetRecentItem functions. To get RibbonApplicationMenu and RibbonMenu, you can use\nthe GetMenu and GetMenuByButtonHandle functions.\nThe GetItemByTag function finds the first item that matches with the tag. It searches in\nthe following order of priority: RibbonApplicationButtonItem > RibbonTabButtonItem >\nRibbonCategoryItem > RibbonPanelItem > RibbonGroupItem > RibbonLargeButtonItem >\nRibbonSmallButtonItem > RibbonCheckBoxItem > RibbonComboBoxItem. The controls\nat high level has priority over those at low level. RibbonBar is at the first-level (the highest\nlevel); ApplicationButton, Category, and TabButton are at the second-level; Panel is at the\nthird-level, what is contained in the Panel is at the fourth-level, and what is contained in the\nGroup is at the fifth-level (the lowest level).\nExample 1\nThis example gets the application button by the tag value:\nInteger li_Return\nRibbonApplicationButtonItem lr_AppButton, lr_AppButton2\n"}
{"page": 743, "text": "Statements, Events, and Functions\nPage 743\nlr_AppButton.Text = \"MyApp\"\nlr_AppButton.Tag = \"MyAppTag\"\nli_Return = rbb_1.SetApplicationButton (lr_AppButton)\nli_Return = rbb_1.GetItemByTag (\"MyAppTag\", lr_AppButton2)\nExample 2\nThis example inserts a large button and a small button with the same tag value \"AddTag\",\nand then searches the item by the tag value \"AddTag\". The large button will be returned\nbecause the large button is searched before the small button according to the search priority.\nInteger li_Return\nRibbonLargeButtonItem lr_LargeButton, lr_LargeButton2\nRibbonSmallButtonItem lr_SmallButton, lr_SmallButton2\nPowerObject lpo_Object\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton,\n ll_Handle_SmallButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_LargeButton.Text = \"AddBig\"\nlr_LargeButton.PictureName = \"AddBig!\"\nlr_LargeButton.Tag = \"AddTag\"\nll_Handle_LargeButton = rbb_1.InsertLargeButtonFirst (ll_Handle_Panel,\n lr_LargeButton)\nlr_SmallButton.Text = \"AddSmall\"\nlr_SmallButton.PictureName = \"AddSmall!\"\nlr_SmallButton.Tag = \"AddTag\"\nll_Handle_SmallButton = rbb_1.InsertSmallButtonLast (ll_Handle_Panel,\n lr_SmallButton)\nli_Return = rbb_1.GetItemByTag (\"AddTag\", lpo_Object)\nIf li_Return <> 1 Then Return\nChoose Case Lower(lpo_Object.ClassName())\n Case \"ribbonlargebuttonitem\"\n  lr_LargeButton2 = lpo_Object\n  MessageBox(\"\",lr_LargeButton2.Text+\"~r~n\"+lr_LargeButton2.PictureName)\n Case \"ribbonsmallbuttonitem\"\n  lr_SmallButton2 = lpo_Object\n  MessageBox(\"\",lr_SmallButton2.Text+\"~r~n\"+lr_SmallButton2.PictureName)\nEnd Choose\nSee also\nGetChildItemByIndex\nGetChildItemCount\nGetItemParent\n2.4.279 GetItemByPath\nDescription\nGets the handle of the item.\nApplies to\n"}
{"page": 744, "text": "Statements, Events, and Functions\nPage 744\nJSONParser objects and JSONGenerator objects\nSyntax\nobjectname.GetItemByPath ( ItemPath )\nTable 2.695:\nArgument\nDescription\nobjectname\nThe name of the JSONParser or JSONGenerator object whose item you\nwant to obtain.\nItemPath\nA string specifying the path of the item. If there is a multi-dimensional\narray, use the number to indicate the order of the array elements. If a key\nname contains \"/\", use the escape character \"~~/\" to replace \"/\".\nReturn value\nLong.\nReturns the item handle if it succeeds and -1 if an error occurs. If any argument's value is\nnull, returns null.\nExample 1\nThis example gets the item handle from a JSONParser object according to the item path from\na one-dimensional array:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Name, ls_Path\nDateTime ldt_DateTime\nLong ll_item\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"data_object\":{\"datetime\":7234930293, \"date\":\n \"2017-09-21\", \"time\": \"12:00:00\",\"age\":[55,22,33]}}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/name\"\nll_item = lnv_JsonParser.GetItemByPath(ls_Path)\nls_Name = lnv_JsonParser.GetItemString(ll_item)\nls_Path = \"/data_object/datetime\"\nll_item = lnv_JsonParser.GetItemByPath(ls_Path)\nldt_DateTime = lnv_JsonParser.GetItemDateTime(ll_item)\nExample 2\nThis example gets the item handle from a JSONParser object according to the item path from\na two-dimensional array. The number indicates the order of the array.\nJsonParser lnv_JsonParser\nString ls_Json, ls_Name, ls_Path\nDateTime ldt_DateTime\nLong ll_item\nlnv_JsonParser = Create JsonParser\nls_Json = '[{\"id\":1001, \"name\":\"evan\", \"data_object\":{\"datetime\":7234930293,\n \"date\": \"2017-09-21\", \"time\": \"12:00:00\",\"age\":[66,22,33]}},' + &\n    '{\"id\":1002, \"name\":\"evan2\", \"data_object\":{\"datetime\":1734930293, \"date\":\n \"2017-09-11\", \"time\": \"11:00:00\",\"age\":[55,23,33]}}]'\n"}
{"page": 745, "text": "Statements, Events, and Functions\nPage 745\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/1/name\"\nll_item = lnv_JsonParser.GetItemByPath(ls_Path)\nls_Name = lnv_JsonParser.GetItemString(ll_item)\nls_Path = \"/2/data_object/datetime\"\nll_item = lnv_JsonParser.GetItemByPath(ls_Path)\nldt_DateTime = lnv_JsonParser.GetItemDateTime(ll_item)\nExample 3\nThis example determines the item handle in a JSONGenerator object according to the item\npath and then adds three child items:\nLong ll_ChildObject\nString ls_RootPath,ls_ChildPath\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject ()\n// Adds an object child item\nls_RootPath = \"/\"\nlnv_JsonGenerator.AddItemObject(ls_RootPath, \"object\")\nls_ChildPath = \"/object\"\nll_ChildObject = lnv_JsonGenerator.GetItemByPath(ls_ChildPath)\nlnv_JsonGenerator.AddItemNumber(ll_ChildObject, \"year\", 2017)\nlnv_JsonGenerator.AddItemDate(ll_ChildObject, \"date\", 2017-09-21)\nlnv_JsonGenerator.AddItemTime(ll_ChildObject, \"time\", 12:00:00)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\nGetPathByItem (JSONGenerator)\n2.4.280 GetItemCount\nDescription\n"}
{"page": 746, "text": "Statements, Events, and Functions\nPage 746\nDetermines the total number of items in a ribbon menu.\nApplies to\nRibbonMenu control\nSyntax\ncontrolname.GetItemCount ( { Long ParentIndex } )\nTable 2.696:\nArgument\nDescription\ncontrolname\nThe name of the RibbonMenu control\nParentIndex\nThe index of the menu item (RibbonMenuItem) whose submenu items\nyou want to count.\nIf not specified, the menu item will be counted; if specified to a valid\nvalue, the submenu items of the menu item (whose index is ParentIndex)\nwill be counted; if specified to an invalid value, an error would occur and\nthis operation would return -1.\nReturn value\nLong.\nReturns the total number of menu items in the menu. If the menu contains no items, returns 0.\nIf an error occurs, returns -1. If any argument's value is null, returns null.\nUsage\nA RibbonMenu control can contain menu items in no more than two levels.\nExamples\nThis example counts the menu item (which returns 1) and its submenu items (which returns\n2).\nLong ll_Index, ll_Index2, ll_Count\nRibbonMenu lr_Menu\nll_Index = lr_Menu.InsertItemLast (\"MenuItem1\", \"AddSmall!\", \"Ue_MenuItem1Clicked\")\nll_Index2 = lr_Menu.InsertItemLast (ll_Index, \"SubMenuItem1\", \"AddSmall!\",\n \"Ue_MenuItem11Clicked\")\nll_Index2 = lr_Menu.InsertItemLast (ll_Index, \"SubMenuItem2\", \"AddSmall!\",\n \"Ue_MenuItem12Clicked\")\nll_Count = lr_Menu.GetItemCount (ll_Index)\nll_Count = lr_Menu.GetItemCount ()\nSee also\nAddSeparatorItem\nDeleteItem\nGetItem\nInsertItem\nInsertItemFirst\n"}
{"page": 747, "text": "Statements, Events, and Functions\nPage 747\nInsertItemLast\nSetItem\n2.4.281 GetItemDate\n2.4.281.1 Syntax 1\nDescription\nGets the value of the item whose type is date.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemDate ( ItemHandle )\nTable 2.697:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemHandle\nA long whose value is the item handle of JsonStringItem type.\nReturn value\nDate.\nReturns the date value of the item if it succeeds; if any argument's value is null, returns null;\nif an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the second item according to the item handle:\nJsonParser lnv_JsonParser\nString ls_Json\nDate ldate_date\nLong ll_RootObject, ll_item\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_item = lnv_JsonParser.GetChildItem(ll_RootObject, 2)\nldate_date = lnv_JsonParser.GetItemDate(ll_item)\nSee also\nGetItemArray\n"}
{"page": 748, "text": "Statements, Events, and Functions\nPage 748\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.281.2 Syntax 2\nDescription\nGets the value of the item whose type is date.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemDate ( ParentItemHandle, Key )\nTable 2.698:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child item value you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonStringItem type.\nReturn value\nDate.\nReturns the date value of the child item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\n"}
{"page": 749, "text": "Statements, Events, and Functions\nPage 749\nExamples\nThis example gets the value of the \"date\" item according to the parent item handle and the\nkey name:\nJsonParser lnv_JsonParser\nString ls_Json\nDate ldate_date\nLong ll_RootObject\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nldate_date = lnv_JsonParser.GetItemDate(ll_RootObject, \"date\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.281.3 Syntax 3\nDescription\nGets the value of the item whose type is date.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemDate ( ItemPath )\nTable 2.699:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\n"}
{"page": 750, "text": "Statements, Events, and Functions\nPage 750\nArgument\nDescription\nItemPath\nA string whose value is the path of the item of JsonStringItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nDate.\nReturns the date value of the item if it succeeds; if any argument's value is null, returns null;\nif an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the second item according to the item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Path\nDate ldate_date\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/date\"\nldate_date = lnv_JsonParser.GetItemDate(ls_Path)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n"}
{"page": 751, "text": "Statements, Events, and Functions\nPage 751\n2.4.282 GetItemDateTime\n2.4.282.1 Syntax 1\nDescription\nGets the value of the item whose type is datetime.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemDateTime ( ItemHandle )\nTable 2.700:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemHandle\nA long whose value is the handle of the item of JsonStringItem or\nJsonNumberItem type.\nReturn value\nDateTime.\nReturns the datetime value of the item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nIf the item value is a number (UTC timestamp), the returned datetime value will be the local\ndatetime converted by using the local timezone. If the item value is a string, the returned\ndatetime value will be the datetime without timezone conversion.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the first item:\nJsonParser lnv_JsonParser\nString ls_Json\nDateTime ldt_datetime\nLong ll_RootObject, ll_item\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_item = lnv_JsonParser.GetChildItem(ll_RootObject, 1)\nldt_datetime = lnv_JsonParser.GetItemDateTime(ll_item)\nSee also\n"}
{"page": 752, "text": "Statements, Events, and Functions\nPage 752\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.282.2 Syntax 2\nDescription\nGets the value of the item whose type is datetime.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemDateTime ( ParentItemHandle, Key )\nTable 2.701:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child item value you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonStringItem and\nJsonNumberItem type. For the JsonStringItem type, formats such as\n\"yyyy-mm-dd hh:mm:ss\" are supported.\nReturn value\nDateTime.\nReturns the datetime value of the child item if it succeeds; if any argument's value is null,\nreturns null; if an error occurs, the SystemError event will be triggered.\n"}
{"page": 753, "text": "Statements, Events, and Functions\nPage 753\nIf the item value is a number (UTC timestamp), the returned datetime value will be the local\ndatetime converted by using the local timezone. If the item value is a string, the returned\ndatetime value will be the datetime without timezone conversion.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the \"datetime\" item:\nJsonParser lnv_JsonParser\nString ls_Json\nDateTime ldt_datetime\nLong ll_RootObject\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nldt_datetime = lnv_JsonParser.GetItemDateTime(ll_RootObject, \"datetime\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.282.3 Syntax 3\nDescription\nGets the value of the item whose type is datetime.\nApplies to\nJSONParser objects\n"}
{"page": 754, "text": "Statements, Events, and Functions\nPage 754\nSyntax\nobjectname.GetItemDateTime ( ItemPath )\nTable 2.702:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemPath\nA string whose value is the path of the item of JsonStringItem or\nJsonNumberItem type. If there is a multi-dimensional array, use the\nnumber to indicate the order of the array. If a key name contains \"/\", use\nthe escape character \"~~/\" to replace \"/\".\nReturn value\nDateTime.\nReturns the datetime value of the item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nIf the item value is a number (UTC timestamp), the returned datetime value will be the local\ndatetime converted by using the local timezone. If the item value is a string, the returned\ndatetime value will be the datetime without timezone conversion.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the first item according to its item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Path\nDateTime ldt_datetime\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/datetime\"\nldt_datetime = lnv_JsonParser.GetItemDateTime(ls_Path)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\n"}
{"page": 755, "text": "Statements, Events, and Functions\nPage 755\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.283 GetItemNumber\n2.4.283.1 Syntax 1\nDescription\nGets the value of the item whose type is number.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemNumber ( ItemHandle )\nTable 2.703:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemHandle\nA long whose value is the item handle of JsonNumberItem type.\nReturn value\nDouble.\nReturns the double value of the item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the first child item according to the item handle:\nJsonParser lnv_JsonParser\nString ls_Json\nLong ll_RootObject, ll_item, ll_id\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\n"}
{"page": 756, "text": "Statements, Events, and Functions\nPage 756\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_item = lnv_JsonParser.GetChildItem(ll_RootObject, 1)\nll_id = lnv_JsonParser.GetItemNumber(ll_item)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.283.2 Syntax 2\nDescription\nGets the value of the item whose type is number.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemNumber ( ParentItemHandle, Key )\nTable 2.704:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child item value you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonNumberItem\ntype.\nReturn value\n"}
{"page": 757, "text": "Statements, Events, and Functions\nPage 757\nDouble.\nReturns the double value of the child item if it succeeds; if any argument's value is null,\nreturns null; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the \"id\" child item according to the parent item handle and the\nkey name:\nJsonParser lnv_JsonParser\nString ls_Json\nLong ll_RootObject, ll_id\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_id = lnv_JsonParser.GetItemNumber(ll_RootObject, \"id\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.283.3 Syntax 3\nDescription\nGets the value of the item whose type is number.\nApplies to\nJSONParser objects\n"}
{"page": 758, "text": "Statements, Events, and Functions\nPage 758\nSyntax\nobjectname.GetItemNumber ( ItemPath )\nTable 2.705:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemPath\nA string whose value is the path of the item of JsonNumberItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nDouble.\nReturns the double value of the item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the first child item according to the item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Path\nLong ll_id\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/id\"\nll_id = lnv_JsonParser.GetItemNumber(ls_Path)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemObject\n"}
{"page": 759, "text": "Statements, Events, and Functions\nPage 759\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.284 GetItemObject\n2.4.284.1 Syntax 1\nDescription\nGets the handle value of the child item whose type is object.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemObject ( ParentItemHandle, Key )\nTable 2.706:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child object item you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonObjectItem type.\nReturn value\nLong.\nReturns the handle value of the child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the \"date_object\" item:\nJsonParser lnv_JsonParser\nString ls_Json\nDateTime ldt_datetime\nDate ldate_date\nTime lt_time\n"}
{"page": 760, "text": "Statements, Events, and Functions\nPage 760\nLong ll_RootObject, ll_date_object\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"date_object\":{\"datetime\":7234930293, \"date\":\n \"2017-09-21\", \"time\": \"12:00:00\"}}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_date_object = lnv_JsonParser.GetItemObject(ll_RootObject, \"date_object\")\nldt_datetime = lnv_JsonParser.GetItemDateTime(ll_date_object , \"datetime\")\nldate_date = lnv_JsonParser.GetItemDate(ll_date_object , \"date\")\nlt_time = lnv_JsonParser.GetItemTime(ll_date_object , \"time\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.284.2 Syntax 2\nDescription\nGets the handle value of the child item whose type is object.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemObject ( ItemPath )\nTable 2.707:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child object item you want to\nobtain.\n"}
{"page": 761, "text": "Statements, Events, and Functions\nPage 761\nArgument\nDescription\nItemPath\nA string whose value is the path of the item of JsonObjectItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nLong.\nReturns the handle value of the child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the \"date_object\" object according to its item path and then gets the values\nof the \"date_object\" object according to the key name:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Path\nDateTime ldt_datetime\nDate ldate_date\nTime lt_time\nLong ll_date_object\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"date_object\":{\"datetime\":7234930293,\n \"date\":\"2017-09-21\", \"time\":\"12:00:00\"}}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/date_object\"\nll_date_object = lnv_JsonParser.GetItemObject(ls_Path)\nldt_datetime = lnv_JsonParser.GetItemDateTime(ll_date_object, \"datetime\")\nldate_date = lnv_JsonParser.GetItemDate(ll_date_object, \"date\")\nlt_time = lnv_JsonParser.GetItemTime(ll_date_object, \"time\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\n"}
{"page": 762, "text": "Statements, Events, and Functions\nPage 762\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.285 GetItemObjectJSONString\n2.4.285.1 Syntax 1\nDescription\nGets the string value of the object item.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemObjectJSONString ( ParentItemHandle, Key )\nTable 2.708:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child object item you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonObjectItem type.\nReturn value\nString.\nReturns the string value of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, the method returns null. If an error occurs, the method throws the exception.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the string value of the \"date_object\" object according to the key name:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Object\nLong ll_RootObject\nlnv_JsonParser = Create JsonParser\n"}
{"page": 763, "text": "Statements, Events, and Functions\nPage 763\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"date_object\":{\"datetime\":7234930293,\n \"date\":\"2017-09-21\", \"time\":\"12:00:00\"}}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nls_Object = lnv_JsonParser.GetItemObjectJSONString(ll_RootObject, \"date_object\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.285.2 Syntax 2\nDescription\nGets the string value of the object item.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemObjectJSONString ( ItemPath )\nTable 2.709:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child object item you want to\nobtain.\nItemPath\nA string whose value is the path of the item of JsonObjectItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\n"}
{"page": 764, "text": "Statements, Events, and Functions\nPage 764\nString.\nReturns the string value of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, the method returns null. If an error occurs, the method throws the exception.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the string value of the \"date_object\" object according to its item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Object, ls_Path\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"date_object\":{\"datetime\":7234930293,\n \"date\":\"2017-09-21\", \"time\":\"12:00:00\"}}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/date_object\"\nls_Object = lnv_JsonParser.GetItemObjectJSONString(ls_Path)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.285.3 Syntax 3\nDescription\nGets the string value of the object item.\nApplies to\nJSONParser objects\n"}
{"page": 765, "text": "Statements, Events, and Functions\nPage 765\nSyntax\nobjectname.GetItemObjectJSONString ( ItemHandle )\nTable 2.710:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child object item you want to\nobtain.\nItemHandle\nA long specifying the item handle which is JsonObjectItem type.\nReturn value\nString.\nReturns the string value of the item if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, the method throws the exception.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the string value of the \"datetime\" object according to its item handle:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Object\nLong ll_RootObject, ll_ChildArray, ll_Handle\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"date_array\":[{\"datetime\":7234930293, \"date\":\n \"2017-09-21\", \"time\": \"12:00:00\"}]}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_ChildArray = lnv_JsonParser.GetItemArray(ll_RootObject,\"date_array\")\nll_Handle = lnv_JsonParser.GetChildItem(ll_ChildArray,1)\nls_Object = lnv_JsonParser.GetItemObjectJSONString(ll_Handle)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\n"}
{"page": 766, "text": "Statements, Events, and Functions\nPage 766\nGetItemObject\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.286 GetItemParent\nDescription\nGets the parent item (Category, Panel, and Group) in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetItemParent ( Long ItemHandle, ref PowerObject Item )\nTable 2.711:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the child item whose parent item you want to obtain.\nItem\nA PowerObject variable in which you want to store the parent item.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nThe parent object can be Category, Panel, or Group.\nThe child item for Category is Panel; the child item for Panel can be Group, LargeButton,\nSmallButton, CheckBox, and ComboBox; the child item for Group can be SmallButton,\nCheckBox, and ComboBox.\nExample 1\nThis example gets the category and stores it in lr_Category variable of type\nRibbonCategoryItem.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_panel\nRibbonCategoryItem lr_Category\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"TestCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"TestPanel\",\n \"EmployeeSmall!\")\nli_Return = rbb_1.GetItemParent (ll_Handle_Panel, lr_Category)\n"}
{"page": 767, "text": "Statements, Events, and Functions\nPage 767\nExample 2\nThis example gets the category and stores it in lpo_Object variable of type PowerObject.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_panel\nPowerObject lpo_Object\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"TestCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"TestPanel\",\n \"EmployeeSmall!\")\nli_Return = rbb_1.GetItemParent (ll_Handle_Panel, lpo_Object)\nSee also\nGetChildItemByIndex\nGetChildItemCount\nGetItemByTag\n2.4.287 GetItemString\n2.4.287.1 Syntax 1\nDescription\nGets the value of the item whose type is string.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemString ( ItemHandle )\nTable 2.712:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemHandle\nA long whose value is the item handle of JsonStringItem type.\nReturn value\nString.\nReturns the string value of the item if it succeeds; if any argument's value is null, returns null;\nif an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\n"}
{"page": 768, "text": "Statements, Events, and Functions\nPage 768\nThis example gets the value of the second child item according to the item handle:\nJsonParser lnv_JsonParser\nString ls_Json, ls_name\nLong ll_RootObject, ll_item\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_item = lnv_JsonParser.GetChildItem(ll_RootObject, 2)\nls_name = lnv_JsonParser.GetItemString(ll_item)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.287.2 Syntax 2\nDescription\nGets the value of the item whose type is string.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemString ( ParentItemHandle, Key )\nTable 2.713:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child item value you want to\nobtain.\n"}
{"page": 769, "text": "Statements, Events, and Functions\nPage 769\nArgument\nDescription\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\nKey\nA string whose value is the key of the child item of JsonStringItem type.\nReturn value\nString.\nReturns the string value of the child item if it succeeds; if any argument's value is null,\nreturns null; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the \"name\" child item according to the parent item handle and\nthe key name:\nJsonParser lnv_JsonParser\nString ls_Json, ls_name\nLong ll_RootObject\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nls_name = lnv_JsonParser.GetItemString(ll_RootObject, \"name\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemTime\nGetItemType\nGetNumberType\n"}
{"page": 770, "text": "Statements, Events, and Functions\nPage 770\n2.4.287.3 Syntax 3\nDescription\nGets the value of the item whose type is string.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemString ( ItemPath )\nTable 2.714:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemPath\nA string whose value is the path of the item of JsonStringItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nString.\nReturns the string value of the item if it succeeds; if any argument's value is null, returns null;\nif an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the second child item according to the item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_name, ls_Path\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/name\"\nls_name = lnv_JsonParser.GetItemString(ls_Path)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\n"}
{"page": 771, "text": "Statements, Events, and Functions\nPage 771\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.288 GetItemTime\n2.4.288.1 Syntax 1\nDescription\nGets the value of the item whose type is time.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemTime ( ItemHandle )\nTable 2.715:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemHandle\nA long whose value is the item handle of JsonStringItem type.\nReturn value\nTime.\nReturns the time value of the item if it succeeds; if any argument's value is null, returns null;\nif an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the third item:\nJsonParser lnv_JsonParser\n"}
{"page": 772, "text": "Statements, Events, and Functions\nPage 772\nString ls_Json\nTime lt_time\nLong ll_RootObject, ll_item\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nll_item = lnv_JsonParser.GetChildItem(ll_RootObject, 3)\nlt_time = lnv_JsonParser.GetItemTime(ll_item)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemType\nGetNumberType\n2.4.288.2 Syntax 2\nDescription\nGets the value of the item whose type is time.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemTime ( ParentItemHandle, Key )\nTable 2.716:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose child item value you want to\nobtain.\nParentItemHandle A long whose value is the handle of the parent item of JsonObjectItem\ntype.\n"}
{"page": 773, "text": "Statements, Events, and Functions\nPage 773\nArgument\nDescription\nKey\nA string whose value is the key of the child item of JsonStringItem type.\nReturn value\nTime.\nReturns the time value of the child item if it succeeds; if any argument's value is null, returns\nnull; if an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the \"time\" item:\nJsonParser lnv_JsonParser\nString ls_Json\nTime lt_time\nLong ll_RootObject\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\nlt_time = lnv_JsonParser.GetItemTime(ll_RootObject, \"time\")\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemType\nGetNumberType\n2.4.288.3 Syntax 3\nDescription\n"}
{"page": 774, "text": "Statements, Events, and Functions\nPage 774\nGets the value of the item whose type is time.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetItemTime ( ItemPath )\nTable 2.717:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item value you want to obtain.\nItemPath\nA string whose value is the path of the item of JsonStringItem type. If\nthere is a multi-dimensional array, use the number to indicate the order\nof the array elements. If a key name contains \"/\", use the escape character\n\"~~/\" to replace \"/\".\nReturn value\nTime.\nReturns the time value of the item if it succeeds; if any argument's value is null, returns null;\nif an error occurs, the SystemError event will be triggered.\nUsage\nIf the item value is null, this function will throw an error, therefore, it is recommended\nthat before executing this function, call GetItemType to check if the item value is null. See\nexample 2 [726] in GetItemArray.\nExamples\nThis example gets the value of the third item according to the item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_Path\nTime lt_time\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}'\nlnv_JsonParser.LoadString(ls_Json)\nls_Path = \"/time\"\nlt_time = lnv_JsonParser.GetItemTime(ls_Path)\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\n"}
{"page": 775, "text": "Statements, Events, and Functions\nPage 775\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemType\nGetNumberType\n2.4.289 GetItemType\nDescription\nGets the type of the item.\nApplies to\nJSONParser and JSONPackage\nSyntax for JSONParser\nobjectname.GetItemType ( ItemHandle )\nobjectname.GetItemType ( ParentItemHandle, Key )\nobjectname.GetItemType ( ItemPath )\nSyntax for JSONPackage\nobjectname.GetItemType ( Key )\nTable 2.718:\nArgument\nDescription\nobjectname\nThe name of the JSONParser or JSONPackage object whose item type\nyou want to obtain.\nItemHandle\nA long whose value is the item handle.\nParentItemHandle A long specifying the parent item handle which is JsonObjectItem type.\nItemPath\nA string specifying the item path. If there is a multi-dimensional array,\nuse the number to indicate the order of the array elements. If a key name\ncontains \"/\", use the escape character \"~~/\" to replace \"/\".\nKey\nA string specifying the key of the child item.\nReturn value\nJsonItemType.\nReturns the JsonItemType enumerated value if it succeeds and null value if an error occurs. If\nany argument's value is null, the method returns null.\nThe JsonItemType enumerated values are:\n"}
{"page": 776, "text": "Statements, Events, and Functions\nPage 776\n\u2022 JsonStringItem! -- Type of the JSON node whose key value pair is a string, such as\n\"name\":\"evan\".\n\u2022 JsonNumberItem! -- Type of the JSON node whose key value pair is a number, such as\n\"id\":1001.\n\u2022 JsonBooleanItem! -- Type of the JSON node whose key value pair is a boolean, such as\n\"active\":true.\n\u2022 JsonNullItem! -- Type of the JSON node whose key value pair is null, such as \"remark\":\nnull.\n\u2022 JsonObjectItem! -- Type of the JSON node whose key value pair is an object, such as\n\"date_object\":{\"datetime\":7234930293, \"date\": \"2017-09-21\", \"time\": \"12:00:00\"}.\n\u2022 JsonArrayItem! -- Type of the JSON node whose key value pair is an array, such\nas \"department_array\":[999999, {\"name\":\"Website\"}, {\"name\":\"PowerBuilder\"},\n{\"name\":\"IT\"}].\nExample 1\nThis example gets the key value and type of the child items according to the item handle in a\nloop:\nJsonParser lnv_JsonParser\nString ls_Json, ls_key, ls_value\nLong ll_RootObject, ll_item, ll_ChildCount, ll_index\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nll_RootObject = lnv_JsonParser.GetRootItem()\n// Gets the key value and type of the child items\nll_ChildCount = lnv_JsonParser.GetChildCount(ll_RootObject)\nfor ll_index = 1 to ll_ChildCount\n ls_key = lnv_JsonParser.GetChildKey(ll_RootObject, ll_index)\n ll_item = lnv_JsonParser.GetChildItem(ll_RootObject, ll_index)\n choose case lnv_JsonParser.GetItemType(ll_item)\n  case JsonStringItem!\n   ls_value = lnv_JsonParser.GetItemString(ll_RootObject, ls_key)\n  case JsonNumberItem!\n   ls_value = string(lnv_JsonParser.GetItemNumber(ll_RootObject, ls_key))\n  case JsonBooleanItem!\n   ls_value = string(lnv_JsonParser.GetItemBoolean(ll_RootObject, ls_key))\n  case JsonNullItem!\n   ls_value = 'Null'\n end choose\n MessageBox(\"Info\", String(ll_index) + ': key = ' + ls_key + ', value = ' +\n ls_value)\nnext\nExample 2\nThis example gets the key value and type of the child items according to the parent item\nhandle in a recursive traversal:\nString ls_Json\n"}
{"page": 777, "text": "Statements, Events, and Functions\nPage 777\nLong ll_RootItem\nJsonParser lnv_JsonParser\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true, \"department_array\":[999999,\n {\"name\":\"Website\"}, {\"name\":\"PowerBuilder\"}, {\"name\":\"IT\"}]}'\n// Loads a string\nlnv_JsonParser.LoadString(ls_Json)\n// Obtains root item (type is JsonObjectItem! or JsonArrayItem!)\nLong ll_RootItem = lnv_JsonParser.GetRootItem()\n// Gets each item recursively (this is a recursive function)\nof_ParseJson(lnv_JsonParser, ll_RootItem)\n// *****************Traverse each item recursively*****************************\npublic function integer of_parsejson (jsonparser anv_jsonparser, long alp_handle);\nlong ll_Index, ll_ChildCount\nlong ll_Child\nstring ls_Null, ls_value\ndouble ldb_value\nboolean lb_value\nJsonItemType ljit_JsonItemType\n// Obtains item type\nljit_JsonItemType = anv_JsonParser.GetItemType(alp_Handle)\n// Gets item recursively or gets value according to the type\nif ljit_JsonItemType = JsonObjectItem! or ljit_JsonItemType = JsonArrayItem! then\n // Gets item recursively\n ll_ChildCount = anv_JsonParser.GetChildCount(alp_Handle)\n for ll_Index = 1 to ll_ChildCount\n  ll_Child = anv_JsonParser.GetChildItem(alp_Handle, ll_Index)\n  of_ParseJson(anv_JsonParser, ll_Child)\n next\nelse // Gets value\n choose case ljit_JsonItemType\n  case JsonStringItem!\n   ls_value = anv_JsonParser.GetItemString(alp_Handle)\n  case JsonNumberItem!\n   ldb_value = anv_JsonParser.GetItemNumber(alp_Handle)\n  case JsonBooleanItem!\n   lb_value = anv_JsonParser.GetItemBoolean(alp_Handle)\n  case JsonNullItem!\n  SetNull(ls_Null)\n end choose\nend if\nreturn 1\nend function\nExample 3\nThis example gets the key value and data type of the child items according to the item path:\nJsonParser lnv_JsonParser\nString ls_Json, ls_key, ls_value, ls_RootPath, ls_ChildPath\nLong ll_ChildCount, ll_index\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1001, \"name\":\"svan\", \"active\":true}'\n"}
{"page": 778, "text": "Statements, Events, and Functions\nPage 778\n// Loads a JSON string\nlnv_JsonParser.LoadString(ls_Json)\nls_RootPath = \"/\"\n// Gets the key value and type of the child items\nll_ChildCount = lnv_JsonParser.GetChildCount(ls_RootPath)\nfor ll_index = 1 to ll_ChildCount\n ls_key = lnv_JsonParser.GetChildKey(ls_RootPath, ll_index)\n ls_ChildPath = ls_RootPath + ls_Key\n choose case lnv_JsonParser.GetItemType(ls_ChildPath)\n  case JsonStringItem!\n  ls_value = lnv_JsonParser.GetItemString(ls_ChildPath)\n  case JsonNumberItem!\n  ls_value = string(lnv_JsonParser.GetItemNumber(ls_ChildPath))\n  case JsonBooleanItem!\n  ls_value = string(lnv_JsonParser.GetItemBoolean(ls_ChildPath))\n  case JsonNullItem!\n  ls_value = 'Null'\n end choose\n MessageBox(\"Info\", String(ll_index) + ': key = ' + ls_key + ', value = ' +\n ls_value)\nnext\nExample 4\nThis example gets the data type of the child items according to the specified index and then\ngets the key value according to the type:\n// JsonItemType GetItemType ( string Key )\nString    ls_KeyValue\nString    ls_KeyName\nJsonPackage    ljpk_Dept\nljpk_Dept =  Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_Dept.loadstring( '{\"dept_id\":100, \"dept_name\":\"R & D8\",\n \"Status\":true, \"array\":[{\"dept_name\":\"R & D8\"}, {\"dept_name\":\"Sales\"},\n {\"dept_name\":\"Finance\"}]}')\nls_KeyName = ljpk_Dept.GetKey( 4 ) //The index of the key in the JSON string\nChoose Case ljpk_Dept.GetItemType(ls_KeyName)    \n    Case JsonStringItem!\n      ls_KeyValue = ljpk_Dept.getvalueString( ls_KeyName )\n    Case JsonNumberItem!\n      ls_KeyValue = String (ljpk_Dept.getvalueNumber( ls_KeyName ))\n    Case JsonBooleanItem!\n      ls_KeyValue = String (ljpk_Dept.GetValueBoolean( ls_KeyName ))\n    Case JsonNullItem!\n      SetNull(ls_KeyValue)\n    Case JsonObjectItem!,JsonArrayItem!\n      ls_KeyValue = ljpk_Dept.GetValue( ls_KeyName )\n    Case Else\n    // Prints message for unknown item type\nEnd Choose\n// Prints key value index 4 output: [{\"dept_name\":\"R & D8\"},{\"dept_name\":\"Sales\"},\n{\"dept_name\":\"Finance\"}]\nExample 5\nThis example loads a JSON string to a JSONParser object and gets and processes the value\naccording to the type.\nInteger  i\n"}
{"page": 779, "text": "Statements, Events, and Functions\nPage 779\nLong     ll_RootHandle\nLong     ll_Objectc\ndouble   ldb_Value\nBoolean  lb_Value\nLong     ll_Object\nString   ls_Return\nString   ls_Value\nString   ls_Key\nJSONItemType ljit_Information\nJsonParser  ljp_Dept\nljp_Dept = Create JsonParser\n// Loads the JSON string to the JSONParser object\nls_Return = ljp_Dept.LoadString ( '{\"Name\":\"Ann.Mo\", \"Boolean\":false,\n \"address\":{\"city\":\"shezhen\"}, \"dept\":[{\"dept_id\":100, \"dept_name\":\"R & D8\",\n \"dept_head_id\":105}, {\"dept_id\":200, \"dept_name\":\"Sales\", \"dept_head_id\":129}]}' )\nIf Trim(ls_Return)<>\"\" Then\n  // Prints error message\n  Return\nEnd If\nll_RootHandle  = ljp_Dept.GetRootItem( )\nFor i = 1 To ljp_Dept.GetChildCount( ll_RootHandle )\n ls_Key  = ljp_Dept.GetChildKey( ll_RootHandle, i )\n // Gets and processes the value according to the type\n Choose Case  ljp_Dept.GetItemType( ll_RootHandle, ls_Key )\n   Case JsonStringItem!\n     ls_Value = ljp_Dept.GetItemString(ll_RootHandle, ls_Key )\n   Case  JsonNumberItem!\n     ldb_Value  = ljp_Dept.GetItemNumber( ll_RootHandle, ls_Key )\n   Case JsonBooleanItem!\n     lb_Value  = ljp_Dept.GetItemBoolean( ll_RootHandle, ls_Key )\n   Case JsonNullItem!\n     ls_Value = \"Null\"\n   Case JsonObjectItem!\n     ll_Object  = ljp_Dept.GetItemObject( ll_RootHandle,\n ljp_Dept.GetChildKey( ll_RootHandle, i )  )\n   Case  JsonArrayItem!\n     ll_Object  = ljp_Dept.GetItemArray( ll_RootHandle, ljp_Dept.GetChildKey(\n  ll_RootHandle, i  )  )\n   Case Else\n     // Prints error message\n End Choose \nNext\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\n"}
{"page": 780, "text": "Statements, Events, and Functions\nPage 780\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetNumberType\n2.4.290 GetJsonBlob\nDescription\nGets the JSON blob data. The returned blob data is encoded with EncodingUTF16LE! by\ndefault.\nApplies to\nJSONGenerator and JSONPackage\nSyntax\nobjectname.GetJsonBlob ( {Encoding e} )\nTable 2.719:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator or JSONPackage object whose data you\nwant to obtain.\ne (optional)\nCharacter encoding of the resulting blob.\nValues are: EncodingANSI!, EncodingUTF8!, EncodingUTF16LE!\n(default), and EncodingUTF16BE!.\nReturn value\nBlob.\nReturns the JSON blob data if it succeeds and empty string (\"\") if an error occurs. If any\nargument's value is null, the method returns null.\nExamples\nThis example gets the JSON blob data.\nblob lblb_Json\nLong ll_RootObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Create an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject()\n// Add a value child item\nlnv_JsonGenerator.AddItemString(ll_RootObject, \"string\", \"string\")\nlnv_JsonGenerator.AddItemNumber(ll_RootObject, \"long\", 100) \nlnv_JsonGenerator.AddItemDateTime(ll_RootObject, \"datetime\", datetime(\"2017-09-21\n 12:00:00\"))\n// Gets the JSON data\n"}
{"page": 781, "text": "Statements, Events, and Functions\nPage 781\nlblb_Json = lnv_JsonGenerator.GetJsonBlob()\nThis example packages the data of DataWindow, DataStore and DataWindowChild object\nand assigns the value to a blob.\nblob lblb_json\ndatastore lds_employee\ndatawindowchild ldwc_active\nJsonPackage lnv_package\nlnv_package = create JsonPackage\n...//Initialize data for lds_employee, ldwc_active\n// package the data\nlnv_package.SetValue(\"d_department\", dw_department, false)\nlnv_package.SetValue(\"d_employee\", lds_employee) \nlnv_package.SetValue(\"dddw_active\", ldwc_active, false)\nlblb_json = lnv_package.GetJsonBlob()\nSee also\nGetJsonString\n2.4.291 GetJsonString\nDescription\nGets the JSON string data.\nApplies to\nJSONGenerator and JSONPackage\nSyntax\nobjectname.GetJsonString ( )\nTable 2.720:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator or JSONPackage object whose data you\nwant to obtain.\nReturn value\nString.\nReturns the JSON string data if it succeeds and empty string (\"\") if an error occurs.\nExample 1\nThis example gets the JSON string data: The result is {\"object\":\n{\"year\":2017,\"date\":\"2017-09-21\",\"time\":\"12:00:00\"},\"array\":[101,102,103]}.\nLong ll_RootObject, ll_ChildObject, ll_ChildArray\nJsonGenerator lnv_JsonGenerator\nstring ls_Json\nlnv_JsonGenerator = create JsonGenerator\n"}
{"page": 782, "text": "Statements, Events, and Functions\nPage 782\n// Create an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject ()\n// Add an Object child item\nll_ChildObject = lnv_JsonGenerator.AddItemObject(ll_RootObject, \"object\")\nlnv_JsonGenerator.AddItemNumber(ll_ChildObject, \"year\", 2017)\nlnv_JsonGenerator.AddItemDate(ll_ChildObject, \"date\", 2017-09-21)\nlnv_JsonGenerator.AddItemTime(ll_ChildObject, \"time\", 12:00:00)\n// Add an array child item\nll_ChildArray = lnv_JsonGenerator.AddItemArray(ll_RootObject, \"array\")\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 101)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 102)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 103)\n// Gets the JSON string\nls_Json = lnv_JsonGenerator.GetJsonString()\nExample 2\nThis example gets the JSON string data: The result is\n[{\"year\":2017,\"date\":\"2017-09-21\",\"time\":\"12:00:00\"},[101,102,103]].\nLong ll_RootArray, ll_ChildObject, ll_ChildArray\nJsonGenerator lnv_JsonGenerator\nstring ls_Json\nlnv_JsonGenerator = create JsonGenerator\n// Create an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n// Add an Object child item\nll_ChildObject = lnv_JsonGenerator.AddItemObject(ll_RootArray)\nlnv_JsonGenerator.AddItemNumber(ll_ChildObject, \"year\", 2017)\nlnv_JsonGenerator.AddItemDate(ll_ChildObject, \"date\", 2017-09-21)\nlnv_JsonGenerator.AddItemTime(ll_ChildObject, \"time\", 12:00:00)\n// Add an array child item\nll_ChildArray = lnv_JsonGenerator.AddItemArray(ll_RootArray)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 101)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 102)\nlnv_JsonGenerator.AddItemNumber(ll_ChildArray, 103)\n// Gets the JSON string\nls_Json = lnv_JsonGenerator.GetJsonString()\nExample 3\nThis example packages the data of DataWindow, DataStore and DataWindowChild object\nand assigns the value to a string.\nstring ls_json\ndatastore lds_employee\ndatawindowchild ldwc_active\nJsonPackage lnv_package\nlnv_package = create JsonPackage\n...//Initialize data for lds_employee, ldwc_active\n// Package the data\nlnv_package.SetValue(\"d_department\", dw_department, false)\nlnv_package.SetValue(\"d_employee\", lds_employee) \nlnv_package.SetValue(\"dddw_active\", ldwc_active, false)\n"}
{"page": 783, "text": "Statements, Events, and Functions\nPage 783\nls_json = lnv_package.GetJsonString()\nSee also\nGetJsonBlob\n2.4.292 GetJWTToken\nDescription\nGets the JWT token using the POST method.\nApplies to\nRESTClient object\nSyntax\nobjectname.GetJWTToken (string urlName, string data, ref string token)\nTable 2.721:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object from which you want to get the JWT\ntoken.\nurlName\nA string value specifying the URL.\ndata\nA string value specifying the data to send.\nIf the user sets the encoding charset in the Content-Type request header,\nthis function will encode the data with the specified charset; if charset is\nnot specified, this function will encode the data in UTF-8 by default.\ntoken\nThe server response which contains the access token.\nIf RESTClient failed to send request or server provides no response, the\nresponse value is an empty string. If the response value is compressed\nas gzip, it will be automatically decompressed. Only gzip compression\nformat is supported at this moment. If the server specified the Content-\nType response header, and in which the encoding charset is specified, this\nfunction will encode the data with the specified charset; if charset is not\nspecified, this function will encode the data in UTF-8 by default.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\n"}
{"page": 784, "text": "Statements, Events, and Functions\nPage 784\n-5 -- Failed to get token.\n-7 -- Failed to decompress data\n-14 -- Code conversion failed\n-15 -- Unsupported character set\nExample 1\nThe following code example gets the data that requires JWT token authentication.\nString ls_P028_JWTToken\nInteger li_P028_GetJWTTokenReturn\nRestClient lrc_P028\nlrc_P028 = Create RestClient\nlrc_P028.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" ) //Sets the request header\n//Gets the JWT token. The second parameter provides the value according to the\n token server request.\nli_P028_GetJWTTokenReturn=lrc_P028.GetJWTToken(\"https://demo.appeon.com/pb/jwt/\nHSExample/api/values/GetToken\", '{\"Username\":\"user1\",\"Password\":\"password1\"}',\n ls_P028_JWTToken)\nIf li_P028_GetJWTTokenReturn = 1 Then\n //Sets the JWT token\n lrc_P028.SetJwtToken( ls_P028_JWTToken)\n //Retrieves data for dw_Data\n lrc_P028.retrieve( dw_Data, \"https://demo.appeon.com/pb/jwt/HSExample/api/\ndepartment/retrieve\")\nElse\n //Prints the GetJWTToken error message if any\nEnd If\nExample 2\nThe following code example gets the data that requires JWT token authentication.\nString ls_P028_JWTToken\nInteger li_P028_GetJWTTokenReturn\nJsonPackage ljpk_JWTINF\nljpk_JWTINF =Create JsonPackage\nRestClient lrc_P028\nlrc_P028 = Create RestClient\n \nlrc_P028.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" ) //Sets the request header\n//Gets the JWT token. The second parameter provides the value according to the\n token server request.\nli_P028_GetJWTTokenReturn=lrc_P028.GetJWTToken(\"https://demo.appeon.com/pb/jwt/\nHSExample/api/values/Authenticate\", '{\"Username\":\"user1\",\"Password\":\"password1\"}',\n ls_P028_JWTToken)\nIf li_P028_GetJWTTokenReturn = 1 Then\n //If the token server returns the token as well as other information, gets the\n token first and then provides it to RestClient\n //in this example, the token server returns a JSON string which contains token,\n therefore, gets the token via the following scripts\n ljpk_JWTINF.Loadstring( ls_P028_JWTToken)\n If ljpk_JWTINF.ContainsKey( \"token\" ) Then\n  ls_P028_JWTToken = ljpk_JWTINF.GetValueString( \"token\" )\n End If\n //Sets the JWT token\n lrc_P028.SetJwtToken( ls_P028_JWTToken)\n //Retrieves data for dw_Data\n"}
{"page": 785, "text": "Statements, Events, and Functions\nPage 785\n lrc_P028.retrieve( dw_Data, \"https://demo.appeon.com/pb/jwt/HSExample/api/\ndepartment/retrieve\")\nElse\n //Prints the GetJWTToken error message if any\nEnd If\nSee also\nSetJWTToken\n2.4.293 GetKey\nDescription\nGets the key name.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetKey ( Index )\nTable 2.722:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object whose key you want to obtain.\nIndex\nA long value specifying the index of the key.\nReturn value\nString.\nReturns the key name if it succeeds and empty string (\"\") if an error occurs. If any argument's\nvalue is null, the method returns null.\nExample\nThis example gets the number of keys first and then gets the name of each key.\nlong ll_index, ll_KeyCount\nstring ls_KeyName\ndatastore lds_employee\ndatawindowchild ldwc_active\nJsonPackage lnv_package\nlnv_package = create JsonPackage\n...//Initialize data for lds_employee, ldwc_active\n// package the data\nlnv_package.SetValue(\"d_department\", dw_department, false)\nlnv_package.SetValue(\"d_employee\", lds_employee) \nlnv_package.SetValue(\"dddw_active\", ldwc_active, false)\nll_KeyCount = lnv_package.KeyCount()\nfor ll_index = 1 to ll_KeyCount\n ls_KeyName = lnv_package.GetKey(ll_index)\n \u2026\n"}
{"page": 786, "text": "Statements, Events, and Functions\nPage 786\nnext\nSee also\nKeyCount\n2.4.294 GetLargeButton\nDescription\nGets the large button according to the handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetLargeButton ( Long ItemHandle, ref RibbonLargeButtonItem Item )\nTable 2.723:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the large button you want to obtain.\nItem\nA RibbonLargeButtonItem variable in which you want to store the large\nbutton identified by the item handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get an item according to the handle by using the GetItem function.\nExamples\nThis example gets a copy of the \"Add\" large button according to its handle and stores it in\nlr_LargeButton variable.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton\nRibbonLargeButtonItem lr_LargeButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_LargeButton = rbb_1.InsertLargeButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddBig!\", \"Ue_LargeButtonClicked\")\nli_Return = rbb_1.GetLargeButton (ll_Handle_LargeButton, lr_LargeButton)\nSee also\nInsertLargeButton\nInsertLargeButtonFirst\n"}
{"page": 787, "text": "Statements, Events, and Functions\nPage 787\nInsertLargeButtonLast\nDeleteLargeButton\nSetLargeButton\nGetChildItemByIndex\n2.4.295 GetLastReturn\nDescription\nReturns the return value from the last InvokePBFunction or TriggerPBEvent function.\nApplies to\nWindow ActiveX controls\nSyntax\nactivexcontrol.GetLastReturn ( )\nTable 2.724:\nArgument\nDescription\nactivexcontrol\nIdentifier for the instance of the PowerBuilder window ActiveX control.\nWhen used in HTML, the ActiveX control is the NAME attribute of the\nobject element. When used in other environments, this references the\ncontrol that contains the PowerBuilder window ActiveX.\nReturn value\nAny.\nReturns the last return value.\nUsage\nCall this function after calling InvokePBFunction or TriggerPBEvent to access the\nreturn value. JavaScript scripts must use this function to access return values from\nInvokePBFunction and TriggerPBEvent. VBScript scripts can either use this function or\naccess the return value using an argument in InvokePBFunction or TriggerPBEvent.\nExamples\nThis JavaScript example calls the GetLastReturn function:\n...\n    retcd = PBRX1.TriggerPBEvent(theEvent, numargs);\n    rc = parseInt(PBRX1.GetLastReturn());\nif (rc != 1) {\n    alert(\"Error. Empty string.\");\n    }\n...\nThis VBScript example calls the GetLastReturn function:\n...\n    retcd = PBRX1.TriggerPBEvent(theEvent, & \n    numargs, args)\n"}
{"page": 788, "text": "Statements, Events, and Functions\nPage 788\n    rc = PBRX1.GetLastReturn()\n    IF rc <> 1 THEN\n    msgbox \"Error. Empty string.\"\n    END IF\n...\nSee also\nGetArgElement\nInvokePBFunction\nSetArgElement\nTriggerPBEvent\n2.4.296 GetLibraryList\nDescription\nGets the files in the library search path of the application.\nSyntax\nGetLibraryList ( )\nReturn value\nString.\nReturns the current library list with complete paths. Multiple libraries are separated by\ncommas.\nUsage\nYou should call GetLibraryList and append any libraries you want to add to the list before\nupdating the search path using the SetLibraryList function.\nExamples\nThis example obtains the list of libraries, adds a library to the list, then resets the list:\nstring ls_list, ls_newlist\n \nls_list = getlibrarylist ()\nls_newlist = ls_list + \",c:\\my_library.pbl\"\nsetlibrarylist (ls_newlist)\nSee also\nAddToLibraryList\nSetLibraryList\n2.4.297 GetMajorVersion\nDescription\nReturns the major version for the current PowerBuilder execution context. For example, at\nmaintenance level 11.5.1 the major version is 11.\nApplies to\n"}
{"page": 789, "text": "Statements, Events, and Functions\nPage 789\nContextInformation objects\nSyntax\nservicereference.GetMajorVersion ( majorversion )\nTable 2.725:\nArgument\nDescription\nservicereference\nReference to the ContextInformation service instance.\nmajorversion\nInteger into which the function places the major version. This argument is\npassed by reference.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to determine the current major version.\nExamples\nThis example calls the GetMajorVersion function:\nString ls_name\nConstant String ls_currver = \"8.0.3\"\nInteger li_majver, li_minver, li_fixver\nContextInformation ci\n \nthis.GetContextService (\"ContextInformation\", ci)\n \nGetMajorVersion(li_majver)\nci.GetMinorVersion(li_minver)\nci.GetFixesVersion(li_fixver)\nIF li_majver <> 8 THEN\n   MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nELSEIF li_minver <> 0 THEN\n   MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nELSEIF li_fixver <> 3 THEN\n   MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nEND IF\nSee also\nGetCompanyName\nGetFixesVersion\nGetHostObject\nGetMinorVersion\nGetName\nGetShortName\n"}
{"page": 790, "text": "Statements, Events, and Functions\nPage 790\nGetVersionName\n2.4.298 GetMasterItem\nDescription\nGets the master menu item of the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.GetMasterItem ( { Long ParentIndex, } Long Index, ref RibbonMenuItem\n Item )\nTable 2.726:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control from which you want\nto get the master menu item\nParentIndex\n(optional)\nThe index of the master menu item (RibbonMenuItem) whose submenu\nyou want to get.\nIf not specified, the master menu item will be obtained; if specified to a\nvalid value, the submenu item under the master menu item (whose index\nis ParentIndex) will be obtained; if specified to an invalid value, an error\nwould occur and this operation would return -1.\nIndex\nThe index of the master menu item or submenu item you want to obtain.\nIf index is invalid, an error would occur and this operation would return\n-1.\nItem\nA RibbonMenuItem variable in which you want to store the master menu\nitem identified by the index.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nThe master menu can have no more than two levels.\nExamples\nThis example inserts an \"Account\" master menu item and an \"Account Settings\" submenu\nitem under \"Account\" and then gets copies of the \"Account\" menu and the \"Account\nSettings\" submenu.\nInteger li_Return\nLong ll_Index, ll_Index2\nRibbonApplicationMenu lr_AppMenu\nRibbonMenuItem lr_MenuItem1, lr_MenuItem2\n"}
{"page": 791, "text": "Statements, Events, and Functions\nPage 791\nll_Index = lr_AppMenu.InsertMasterItemLast (\"Account\", \"AccountBig!\",\n \"Ue_AccountMenuItemClicked\")\nll_Index2 = lr_AppMenu.InsertMasterItemLast (ll_Index, \"Account Settings\",\n \"AccountSettingsBig!\", \"Ue_AccountSettingsClicked\")\nli_Return = lr_AppMenu.GetMasterItem (ll_Index, lr_MenuItem1)\nli_Return = lr_AppMenu.GetMasterItem (ll_Index, ll_Index2, lr_MenuItem2)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.299 GetMasterItemCount\nDescription\nDetermines the total number of the master menu items in the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.GetMasterItemCount ( { Long ParentIndex } )\nTable 2.727:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control\nParentIndex\n(optional)\nThe index of the master menu item (RibbonMenuItem) whose submenu\nitems you want to count.\n"}
{"page": 792, "text": "Statements, Events, and Functions\nPage 792\nArgument\nDescription\nIf not specified, the master menu items will be counted; if specified to a\nvalid value, the submenu items under the master menu item (whose index\nis ParentIndex) will be counted; if specified to an invalid value, an error\nwould occur and this operation would return -1.\nReturn value\nLong.\nReturns the total number of menu items in the master menu. If the master menu contains no\nitems, returns 0. If an error occurs, returns -1. If any argument's value is null, returns null.\nUsage\nThe master menu can have no more than two levels.\nExamples\nThis example inserts an \"Account\" master menu and then inserts two submenu items\n\"Account Settings\" and \"Sign Out\" under \"Account\", and then counts the number of the\nsubmenu items (which returns 2) and the master menu item (which returns 1).\nLong ll_Index, ll_Index2, ll_Count\nRibbonApplicationMenu lr_AppMenu\nll_Index = lr_AppMenu.InsertMasterItemLast (\"Account\", \"AccountBig!\",\n \"Ue_AccountMenuItemClicked\")\nll_Index2 = lr_AppMenu.InsertMasterItemLast (ll_Index, \"Account Settings\",\n \"AccountSettingsBig!\", \"Ue_AccountSettingsBigClicked\")\nll_Index2 = lr_AppMenu.InsertMasterItemLast (ll_Index, \"Sign Out\", \"SignOutBig!\",\n \"Ue_SignOutClicked\")\nll_Count = lr_AppMenu.GetMasterItemCount (ll_Index)\nll_Count = lr_AppMenu.GetMasterItemCount()\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\n"}
{"page": 793, "text": "Statements, Events, and Functions\nPage 793\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.300 GetMenu\nDescription\nGets the menu that is associated with the ribbon button.\nApplies to\nRibbonApplicationButtonItem, RibbonTabButtonItem, RibbonLargeButtonItem,\nRibbonSmallButtonItem controls\nSyntax\nFor RibbonApplicationButtonItem:\ncontrolname.GetMenu ( ref RibbonApplicationMenu ApplicationMenu )\nFor RibbonTabButtonItem, RibbonLargeButtonItem, and RibbonSmallButtonItem:\ncontrolname.GetMenu ( ref RibbonMenu Menu )\nTable 2.728:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationButtonItem, RibbonTabButtonItem,\nRibbonLargeButtonItem, or RibbonSmallButtonItem control.\nApplicationMenu A RibbonApplicationMenu variable in which you want to store the menu.\nMenu\nA RibbonMenu variable in which you want to store the menu.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExample 1\nThis example associates an application menu (which includes an \"Account\" master menu\nitem and a \"RecentMenu1\" recent menu item) to the \"MyApp\" application button; and then\ngets and stores a copy of the application menu.\nInteger li_Return\nRibbonApplicationButtonItem lr_AppButton\nRibbonApplicationMenu lr_AppMenu, lr_AppMenu2\nlr_AppMenu.InsertMasterItemFirst (\"Account\", \"AccountBig!\",\n \"ue_AccountMenuClicked\")\nlr_AppMenu.InsertRecentItemFirst (\"RecentMenu1\", \"ue_RecentMenuClicked\")\nlr_AppButton.Text = \"MyApp\"\nli_Return = lr_AppButton.SetMenu (lr_AppMenu)\n"}
{"page": 794, "text": "Statements, Events, and Functions\nPage 794\nIf li_Return = 1 Then\n li_Return = rbb_1.SetApplicationButton (lr_AppButton)\n li_Return = lr_AppButton.GetMenu (lr_AppMenu2)\nEnd If\nExample 2\nThis example associates a ribbon menu (which includes an \"Add\" menu item) to the tab\nbutton; and then gets a copy of the ribbon menu.\nInteger li_Return, li_Return2\nRibbonTabButtonItem lr_TabButton\nRibbonMenu lr_Menu, lr_Menu2\nlr_Menu.InsertItemFirst (\"Add\", \"AddSmall!\", \"Ue_AddMenuClicked\")\nli_Return = lr_TabButton.SetMenu (lr_Menu)\nIf li_Return = 1 Then\n li_Return2 = lr_TabButton.GetMenu (lr_Menu2)\nEnd If\nSee also\nSetMenu\nGetMenuByButtonHandle\n2.4.301 GetMenuByButtonHandle\nDescription\nGets the menu associated with the ribbon button according to the button handle.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetMenuByButtonHandle ( Long ItemHandle, ref RibbonApplicationMenu\n ApplicationMenu )\ncontrolname.GetMenuByButtonHandle ( Long ItemHandle, ref RibbonMenu Menu )\nTable 2.729:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the button whose menu you want to get.\nApplicationMenu A RibbonApplicationMenu variable in which you want to store the menu.\nMenu\nA RibbonMenu variable in which you want to store the menu.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExample 1\n"}
{"page": 795, "text": "Statements, Events, and Functions\nPage 795\nThis example inserts a \"MyLargeButton\" large button which is associated with a menu and\nthen gets a copy of the menu according to the button handle.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_panel, ll_Handle_Button\nRibbonLargeButtonItem lr_LargeButton\nRibbonMenu lr_Menu, lr_Menu2\nll_Handle_Category = rbb_1.InsertCategoryFirst ( \"MyCategory\" )\nll_Handle_Panel = rbb_1.InsertPanelFirst ( ll_Handle_Category, \"MyPanel\",\n \"EmployeeSmall!\" )\nlr_LargeButton.Text = \"MyLargeButton\"\nlr_LargeButton.PictureName = \"EmployeeBig!\"\nlr_Menu.InsertItemFirst (\"MyMenuItem\", \"EmployeeSmall!\", \"ue_MenuItemClicked\")\nlr_LargeButton.SetMenu (lr_Menu)\nll_Handle_Button = rbb_1.InsertLargeButtonFirst ( ll_Handle_Panel, lr_LargeButton )\nli_Return = rbb_1.GetMenuByButtonHandle ( ll_Handle_Button, lr_Menu2 )\nExample 2\nThis example inserts the \"MyApp\" application button which is associated with a menu\n(including an \"Account\" master item and a \"RecentMenu1\" recent item) and then gets a copy\nof the menu according to the button handle.\nInteger li_Return\nRibbonApplicationButtonItem lr_AppButton,lr_AppButton2\nRibbonApplicationMenu lr_AppMenu, lr_AppMenu2\nli_Return =\n lr_AppMenu.InsertMasterItemFirst(\"Account\",\"AccountBig!\",\"Ue_MasterMenuClicked\")\nli_Return = lr_AppMenu.InsertRecentItemFirst(\"RecentMenu1\",\"Ue_RecentMenuClicked\")\nli_Return = lr_AppButton.SetMenu(lr_AppMenu)\nlr_AppButton.Text = \"MyApp\"\nli_Return = rbb_1.SetApplicationButton(lr_AppButton)\nli_Return = rbb_1.GetApplicationButton(lr_AppButton2)\nli_Return = rbb_1.GetMenuByButtonHandle( lr_AppButton2.ItemHandle, lr_AppMenu2 )\nSee also\nSetMenu\nGetMenu\n2.4.302 GetMessage\nDescription\nReturns the error message from objects of type Throwable.\nSyntax\nthrowableobject.GetMessage ( )\nTable 2.730:\nArgument\nDescription\nthrowableobject\nObject of type Throwable from which you want to retrieve an error\nmessage\n"}
{"page": 796, "text": "Statements, Events, and Functions\nPage 796\nReturn value\nString.\nThe error text for system error objects, such as RuntimeError, is preset.\nUsage\nYou can set the error message for an object of type Throwable using the SetMessage\nfunction.\nExamples\nThis example catches a system error message and displays that error in a message box.\nCatching the system error prevents the application from terminating when the arccosine\nargument, entered by the application user, is not in the required range:\nDouble ld_num\nld_num = Double (sle_1.text)\nTRY\nsle_2.text = string (acos (ld_num))\nCATCH (runtimeerror er)\n   MessageBox(\"Runtime Error\", er.GetMessage())\nEND TRY\nThis example catches and displays a user error message from the Clicked event of a button\nthat calls the user-defined function, wf_acos. The user-defined function catches a runtime\nerror -- preventing the application from terminating -- and then sets the message for a user\nobject, uo_exception, that inherits from the Exception object type:\nTRY\n   wf_acos()\nCATCH (uo_exception u_ex)\n   messageBox(\"Out of Range\", u_ex.GetMessage())\nEND TRY\nCode for the wf_acos function is shown in the SetMessage function.\nSee also\nSetMessage\n2.4.303 GetMinorVersion\nDescription\nReturns the minor version for the current PowerBuilder execution context. For example, at\nmaintenance level 11.5.1 the minor version is 5.\nApplies to\nContextInformation objects\nSyntax\nservicereference.GetMinorVersion ( minorversion )\nTable 2.731:\nArgument\nDescription\nservicereference\nReference to the ContextInformation service instance.\n"}
{"page": 797, "text": "Statements, Events, and Functions\nPage 797\nArgument\nDescription\nminorversion\nInteger into which the function places the minor version. This argument\nis passed by reference.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to determine the current minor version.\nExamples\nThis example calls the GetMinorVersion function:\nString ls_name\nConstant String ls_currver = \"8.0.3\"\nInteger li_majver, li_minver, li_fixver\nContextInformation ci\n \nthis.GetContextService(\"ContextInformation\", ci)\n \nci.GetMajorVersion(li_majver)\nci.GetMinorVersion(li_minver)\nci.GetFixesVersion(li_fixver)\nIF li_majver <> 8 THEN\n   MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nELSEIF li_minver <> 0 THEN\n   MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nELSEIF li_fixver <> 3 THEN\n   MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nEND IF\nSee also\nGetCompanyName\nGetFixesVersion\nGetHostObject\nGetMajorVersion\nGetName\nGetShortName\nGetVersionName\n2.4.304 GetName\nDescription\nGets the name for the current execution context.\nApplies to\n"}
{"page": 798, "text": "Statements, Events, and Functions\nPage 798\nContextInformation objects\nSyntax\nservicereference.GetName ( name )\nTable 2.732:\nArgument\nDescription\nservicereference\nReference to the ContextInformation service instance.\nname\nString into which the function places the name. This argument is passed\nby reference.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to determine the current execution environment.\nThe window plug-in and window ActiveX contexts are obsolete in the current version of\nPowerBuilder. For PowerBuilder 2017 and later applications, the only value passed for the\nname argument is \"PowerBuilder Runtime\".\nExamples\nThis example calls the GetName function. ci is an instance variable of type\nContextInformation:\nString ls_name\n \nthis.GetContextService(\"ContextInformation\", ci)\nci.GetName(ls_name)\nIF ls_name <> \"PowerBuilder Runtime\" THEN\n   cb_close.visible = FALSE\nEND IF\nSee also\nGetCompanyName\nGetContextService\nGetFixesVersion\nGetHostObject\nGetMajorVersion\nGetMinorVersion\nGetShortName\nGetVersionName\n2.4.305 GetNativePointer\nDescription\n"}
{"page": 799, "text": "Statements, Events, and Functions\nPage 799\nGets a pointer to the OLE object associated with the OLE control. The pointer lets you call\nOLE functions in an external DLL for the object.\nApplies to\nOLE controls and OLE custom controls\nSyntax\nolename.GetNativePointer ( pointer )\nTable 2.733:\nArgument\nDescription\nolename\nThe name of the OLE control containing the object for which you want\nthe native pointer.\npointer\nA UnsignedLong variable in which you want to store the pointer. If\nGetNativePointer cannot get a valid pointer, pointer is set to 0.\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if an error occurs.\nUsage\nPointer is a pointer to OLE's IUnknown interface. You can use it with the OLE\nQueryInterface function to get other interface pointers.\nWhen you call GetNativePointer, PowerBuilder calls OLE's AddRef function, which locks\nthe pointer. You must release the pointer in your DLL function or in a PowerBuilder script\nwith the ReleaseNativePointer function.\nOnly for external DLL calls\nThis function is only useful for external DLL calls. It is not related to the\nSetAutomationPointer function.\nExamples\nThis example gets a pointer for the OLECustomControl ocx_spell for making external\nfunction calls for OLE automation:\nUnsignedLong lul_oleptr\ninteger li_rtn\n \nli_rtn = ocx_spell.GetNativePointer(lul_oleptr)\nIF li_rtn = 0 THEN\n   ... // Call external functions for automation\n   ocx_spell.ReleaseNativePointer(lul_oleptr)\nEND IF\nSee also\nGetAutomationNativePointer\nReleaseAutomationNativePointer\n"}
{"page": 800, "text": "Statements, Events, and Functions\nPage 800\nReleaseNativePointer\n2.4.306 GetNextSheet\nDescription\nObtains the sheet that is behind the specified sheet in the MDI frame.\nApplies to\nMDI frame windows\nSyntax\nmdiframewindow.GetNextSheet ( sheet )\nTable 2.734:\nArgument\nDescription\nmdiframewindow The MDI frame window in which you want the next sheet\nsheet\nThe sheet for which you want the sheet that is behind it\nReturn value\nWindow. Returns the sheet that is behind sheet in the MDI frame. If there is no sheet behind\nsheet, GetNextSheet returns an invalid value. If any argument's value is null, GetNextSheet\nreturns null.\nUsage\nTo cycle through the open sheets in a frame, use GetFirstSheet to get the front sheet and\nGetNextSheet one or more times to get the rest of the sheets. Test each return value with\nIsValid to see if you have reached the last sheet. Do not use GetFirstSheet and GetNextSheet\nin combination with GetActiveSheet.\nDid GetNextSheet return a valid window?\nUse the IsValid function to find out if GetNextSheet returned a valid window. If there\nis no sheet behind the one you specified, the return value is not valid.\nExamples\nThe following script for a menu selection loops through the open sheets in front-to-back order\nand displays the names of the open sheets in the ListBox lb_sheets:\nboolean bValid\nwindow wSheet\n \nlb_sheets.Reset()\nwSheet = ParentWindow.GetFirstSheet()\nIF IsValid(wSheet) THEN\n   lb_sheets.AddItem(wSheet.Title)\n   DO\n   wSheet = ParentWindow.GetNextSheet(wSheet)\n   bValid = IsValid (wSheet)\n   IF bValid THEN lb_sheets.AddItem(wSheet.Title)\n"}
{"page": 801, "text": "Statements, Events, and Functions\nPage 801\n   LOOP WHILE bValid\nEND IF\nSee also\nGetFirstSheet\nIsValid\n2.4.307 GetNumberType\nDescription\nGets the type of the number item.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetNumberType ( ItemHandle )\nobjectname.GetNumberType ( ParentItemHandle, Key )\nobjectname.GetNumberType ( ItemPath )\nTable 2.735:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose item type you want to obtain.\nItemHandle\nA long specifying the item handle which is JsonNumberItem type.\nParentItemHandle A long specifying the parent item handle which is JsonObjectItem type.\nKey\nA string specifying the key of the child item which is JsonNumberItem\ntype.\nItemPath\nA string specifying the item path which is JsonNumberItem type. If there\nis a multi-dimensional array, use the number to indicate the order of the\narray elements. If a key name contains \"/\", use the escape character \"~~/\"\nto replace \"/\".\nReturn value\nJsonNumberType.\nReturns the JsonNumberType enumerated value if it succeeds and null value if an error\noccurs. If any argument's value is null, the method returns null.\nThe JsonNumberType enumerated values are:\n\u2022 JsonNumber! -- Type of the JSON valid number.\n\u2022 JsonNaN! -- Type of the JSON invalid number.\n\u2022 JsonPositiveInfinity! -- Type of the JSON positive infinity.\n"}
{"page": 802, "text": "Statements, Events, and Functions\nPage 802\n\u2022 JsonNegativeInfinity! -- Type of the JSON negative infinity.\nExample 1\nThis example determines the type of number values according to the item handle:\nLong    ll_ItemCount, ll_I, ll_RootItem, ll_Child\nString  ls_Json, ls_Return, ls_Key, ls_Value\nDec     ldc_Value\nJsonItemType    ljs_type, ljs_Root\nJsonNumberType  ljsn_type\nJsonparser      ljs_par\nljs_par = Create JsonParser\nls_Json = '{\"value1\":123.45,\"value2\":Infinity,\"value3\":-\nInfinity,\"value4\":NaN,\"value5\":null}'\nls_Return = ljs_par.LoadString(ls_Json)\nIf Len(ls_Return) > 0 Then Return\nll_RootItem = ljs_par.GetRootItem()\nll_ItemCount = ljs_Par.GetChildCount(ll_RootItem)\nljs_Root =  ljs_par.GetItemType(ll_RootItem)\nFor ll_I = 1 To ll_ItemCount\n ll_child = ljs_par.getchilditem( ll_RootItem, ll_i)\n ls_Key = ljs_par.GetChildKey(ll_RootItem, ll_i)\n ljs_type = ljs_par.GetItemType(ll_child)\n Choose Case ljs_type\n  Case Jsonnumberitem!\n   ldc_Value = ljs_par.GetItemNumber(ll_child)\n   If IsNull ( ldc_value ) Then\n    ljsn_type = ljs_par.GetNumberType(ll_child)\n    Choose Case ljsn_type\n     Case JsonNaN!\n      ls_value = \"Nan\"\n     Case JsonPositiveInfinity!\n      ls_value = \"Infinity\"\n     Case JsonNegativeInfinity!\n      ls_value = \"-Infinity\"\n     Case JsonNumber!\n      ls_value = \"null\"\n     Case Else\n    End Choose\n   Else\n    ls_value = String(ldc_value)\n   End If\n  Case Jsonnullitem!\n   ls_value = \"null\"\n End Choose\n ls_Return += ls_Key + \"=\" + ls_Value + \"~r~n\"\nNext\nIf IsValid ( ljs_par ) Then Destroy ( ljs_par )\nExample 2\nThis example determines the type of number values according to the parent item and key\nname:\nLong    ll_ItemCount, ll_I, ll_RootItem\nString  ls_Json, ls_Return, ls_Key, ls_Value\nDec     ldc_Value\nJsonItemType    ljs_type, ljs_Root\nJsonNumberType  ljsn_type\nJsonparser      ljs_par\n"}
{"page": 803, "text": "Statements, Events, and Functions\nPage 803\nljs_par = Create JsonParser\nls_Json = '{\"value1\":123.45,\"value2\":Infinity,\"value3\":-\nInfinity,\"value4\":NaN,\"value5\":null}'\nls_Return = ljs_par.LoadString(ls_Json)\nIf Len(ls_Return) > 0 Then Return\nll_RootItem = ljs_par.GetRootItem()\nll_ItemCount = ljs_Par.GetChildCount(ll_RootItem)\nljs_Root =  ljs_par.GetItemType(ll_RootItem)\nFor ll_I = 1 To ll_ItemCount\n ls_Key = ljs_par.GetChildKey(ll_RootItem, ll_i)\n ljs_type = ljs_par.GetItemType(ll_RootItem, ls_Key)\n Choose Case ljs_type\n  Case Jsonnumberitem!\n   ldc_Value = ljs_par.GetItemNumber(ll_RootItem, ls_Key)\n   If IsNull ( ldc_value ) Then\n    ljsn_type = ljs_par.GetNumberType(ll_RootItem, ls_Key)\n    Choose Case ljsn_type\n     Case JsonNaN!\n      ls_value = \"Nan\"\n     Case JsonPositiveInfinity!\n      ls_value = \"Infinity\"\n     Case JsonNegativeInfinity!\n      ls_value = \"-Infinity\"\n     Case JsonNumber!\n      ls_value = \"null\"\n     Case Else\n    End Choose\n   Else\n    ls_value = String(ldc_value)\n   End If\n  Case Jsonnullitem!\n    ls_value = \"null\"\n End Choose\n ls_Return += ls_Key + \"=\" + ls_Value + \"~r~n\"\nNext\nIf IsValid ( ljs_par ) Then Destroy ( ljs_par )\nExample 3\nThis example determines the type of number values according to the item path:\nLong    ll_ItemCount, ll_I\nString  ls_Json, ls_Return, ls_RootPath, ls_ChildPath, ls_Key, ls_Value\nDec     ldc_Value\nJsonItemType         ljs_type, ljs_Root\nJsonNumberType  ljsn_type\nJsonparser              ljs_par\nljs_par = Create JsonParser\nls_Json = '{\"value1\":123.45,\"value2\":Infinity,\"value3\":-\nInfinity,\"value4\":NaN,\"value5\":null}'\nls_Return = ljs_par.LoadString(ls_Json)\nIf Len(ls_Return) > 0 Then Return\nls_RootPath = \"/\"\nll_ItemCount = ljs_Par.GetChildCount(ls_RootPath)\nljs_Root = ljs_par.GetItemType(ls_RootPath)\nFor ll_I = 1 To ll_ItemCount\n  ls_Key = ljs_par.GetChildKey(ls_RootPath, ll_i)\n  If ljs_Root = jsonobjectitem! Then\n    ls_ChildPath = ls_RootPath + String( ls_Key )\n  Else\n    ls_ChildPath = ls_RootPath + String( ll_I )\n  End If\n"}
{"page": 804, "text": "Statements, Events, and Functions\nPage 804\n  ljs_type = ljs_par.GetItemType(ls_ChildPath)\n  Choose Case ljs_type\n    Case Jsonnumberitem!\n      ldc_Value = ljs_par.GetItemNumber(ls_ChildPath)\n      If IsNull ( ldc_value ) Then\n        ljsn_type = ljs_par.GetNumberType(ls_ChildPath)\n        Choose Case ljsn_type\n          Case JsonNaN!\n            ls_value = \"Nan\"\n          Case JsonPositiveInfinity!\n            ls_value = \"Infinity\"\n          Case JsonNegativeInfinity!\n            ls_value = \"-Infinity\"\n          Case JsonNumber!\n            ls_value = \"null\"\n          Case Else\n        End Choose\n      Else\n        ls_value = String(ldc_value)\n      End If\n    Case Jsonnullitem!\n        ls_value = \"null\"\n  End Choose\n  ls_Return += ls_Key + \"=\" + ls_Value + \"~r~n\"\nNext\nIf IsValid ( ljs_par ) Then Destroy ( ljs_par )\nSee also\nGetItemArray\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\n2.4.308 GetOAuthToken\nDescription\nGets the OAuth 2.0 access token.\nApplies to\nRESTClient object\n"}
{"page": 805, "text": "Statements, Events, and Functions\nPage 805\nSyntax\nobjectname.GetOAuthToken (TokenRequest tokenRequest, ref string token)\nTable 2.736:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object from which you want to get the\nOAuth 2.0 access token.\ntokenRequest\nThe OAuth2.0 Access Token Request object.\ntoken\nThe access token returned from the server.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\n-5 -- Failed to get token\n-11 -- The parameter is invalid\n-12 -- Invalid grant\n-13 -- Invalid SCOPE\nExample\nThe following example adds a new data records and submits it to the server.\nString ls_P020_Responsebody,ls_Token,ls_PostData\nLong ll_InsertRow\nInteger li__P020_SendReturn\nInteger li_P020_GetTokenReturn\nRestClient lrc_P020\nlrc_P020 = Create RestClient \n//Sets the token parameters\nTokenRequest ltreq_Appeon\nltreq_Appeon.tokenlocation = \"https://demo.appeon.com/pb/identityserver/connect/\ntoken\"\nltreq_Appeon.method = \"post\"\nltreq_Appeon.GrantType = \"password\"\nltreq_Appeon.ClientId = \"P0VRQ-ddHn/WWd6lcCNJbaO9ny-JCNHirDJkHNgZ0-M=\"\nltreq_Appeon.ClientSecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" \nltreq_Appeon.UserName = \"TestUser\"\nltreq_Appeon.PassWord = \"TestPassword\"\n//Gets token via RESTClient\nli_P020_GetTokenReturn = lrc_P020.GetOauthtoken( ltreq_Appeon, ls_Token)\nIf li_P020_GetTokenReturn = 1 Then\n"}
{"page": 806, "text": "Statements, Events, and Functions\nPage 806\n lrc_P020.SetRequestHeaders( \"Content-Type:application/\njson;charset=UTF-8~r~nAccept-Encoding:gzip\" )\n lrc_P020.SetOauthToken( ls_Token ) //Sets authentication\n //Adds a new data row\n ll_InsertRow = dw_Data.InsertRow( 0 )\n //Sets the data value\n dw_Data.SetItem(ll_InsertRow,1,0)\n dw_Data.SetItem(ll_InsertRow,2,\"TestCreate\"+String(rand(50)))\n //Once https://demo.appeon.com/PB/webapi_client/api/department/create Web service\n detects that \n //the passed-in department id is smaller than 1, it will automatically finds the\n largest ID \n //value and assigns value to it\n ls_PostData=dw_Data.Exportrowasjson( ll_InsertRow)//Exports the new data row from\n dw_Data to JSON string\n li__P020_SendReturn = lrc_P020.SendPostRequest(\"https://demo.appeon.com/PB/\nwebapi_client/api/department/create\", ls_PostData, ls_P020_Responsebody)\nIf li__P020_SendReturn <> 1 Or lrc_P020.GetResponseStatusCode() <> 201 Then\n //Checks if any error information  \nEnd If\n//Finds out if the new data row exists via https://demo.appeon.com/PB/\nwebapi_client/api/department/retrieve\nlrc_P020.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nElse\n//Gets the token failure error\nEnd If\nIf IsValid(lrc_P020) Then Destroy lrc_P020\nSee also\nSetOAuthToken\n2.4.309 GetObjectRevisionFromRegistry\nDescription\nAssigns synchronization property values saved in the Windows registry to a synchronization\nobject.\nApplies to\nMLSynchronization, MLSync controls\nSyntax\nSyncObject.GetObjectRevisionFromRegistry ( )\nTable 2.737:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object\nReturn value\nInteger.\nReturns the value of ObjectRevision. Returns -1 if the registry key is not found or if the\nSyncRegistryKey property of the synchronization object is not set.\nUsage\n"}
{"page": 807, "text": "Statements, Events, and Functions\nPage 807\nThe registry key is located under the HKEY_CURRENT_USER\\SyncRegistryKey\n\\DBSyncType where SyncRegistryKey is the value of the synchronization object's\nSyncRegistryKey property and DBSyncType is MobiLink.\nSee also\nGetSyncRegistryProperties\nSetSyncRegistryProperties\n2.4.310 GetOrigin\nDescription\nFinds the X and Y coordinates of the upper-left corner of the ListView item.\nApplies to\nListView controls\nSyntax\nlistviewname.GetOrigin ( x , y )\nTable 2.738:\nArgument\nDescription\nlistviewname\nThe ListView control for which you want to find the coordinates of the\nupper-left corner\nx\nAn integer variable in which you want to store the X coordinate for the\nListView control\ny\nAn integer variable in which you want to store the Y coordinate for the\nListView control\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if it fails.\nUsage\nUse GetOrigin to find the position of a dragged object relative to the upper left corner of a\nListView control.\nExamples\nThis example moves a static text clock to the upper-left coordinates of the selected ListView\nitem:\ninteger li_index\nlistviewitem l_lvi\n \nli_index = lv_list.SelectedIndex()\nlv_list.GetItem(li_index, l_lvi)\n \nlv_list.GetOrigin(l_lvi.ItemX, l_lvi.ItemY)\n"}
{"page": 808, "text": "Statements, Events, and Functions\nPage 808\n \nsle_info.Text = \"X is \"+ String(l_lvi.ItemX) &\n   + \" and Y is \" + String(l_lvi.ItemY)\n \nst_clock.Move(l_lvi.itemx , l_lvi.ItemY)\n \nMessageBox(\"Clock Location\", \"X is \" &\n   + String(st_clock.X) &\n   + \", and Y is \" &\n   + String(st_clock.Y)+\".\")\n2.4.311 GetPanel\nDescription\nGets the panel according to the handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetPanel ( Long ItemHandle, ref RibbonPanelItem Item )\nTable 2.739:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the panel you want to obtain.\nItem\nA RibbonPanelItem variable in which you want to store the panel\nidentified by the item handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get an item according to the handle by using the GetItem function.\nExamples\nThis example inserts a \"MyPanel\" panel and then gets a copy of the panel.\nInteger li_Return\nLong ll_Handle_Category,ll_Handle_Panel\nRibbonPanelItem lr_Panel\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nli_Return = rbb_1.GetPanel (ll_Handle_Panel, lr_Panel)\nSee also\nInsertPanel\n"}
{"page": 809, "text": "Statements, Events, and Functions\nPage 809\nInsertPanelFirst\nInsertPanelLast\nDeletePanel\nSetPanel\nGetChildItemByIndex\n2.4.312 GetParagraphSetting\nDescription\nGets the size of the indentation, left margin, or right margin of the paragraph containing the\ninsertion point in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtecontrol.GetParagraphSetting ( whichsetting )\nTable 2.740:\nArgument\nDescription\nrtecontrol\nThe name of the control for which you want paragraph information.\nwhichsetting\nA value of the ParagraphSetting enumerated datatype specifying the\nsetting for which you want the value. Values are:\n\u2022 Indent! -- Returns the indentation of the paragraph\n\u2022 LeftMargin! -- Returns the left margin of the paragraph\n\u2022 RightMargin! -- Returns the right margin of the paragraph\nReturn value\nLong.\nReturns the size of the specified setting in thousandths of an inch. GetParagraphSetting\nreturns -1 if an error occurs. If which setting is null, it returns null.\nExamples\nThis example gets the indentation setting for the current paragraph:\nlong ll_indent\nll_indent = rte_1.GetParagraphSetting(Indent!))\nSee also\nGetAlignment\nGetSpacing\n"}
{"page": 810, "text": "Statements, Events, and Functions\nPage 810\nGetTextColor\nGetTextStyle\nSetParagraphSetting\n2.4.313 GetParent\nDescription\nObtains the parent of the specified object.\nApplies to\nAny object\nSyntax\nobjectname.GetParent ( )\nTable 2.741:\nArgument\nDescription\nobjectname\nA control in a window or user object or an item on a menu for which you\nwant the parent object\nReturn value\nPowerObject. Returns a reference to the parent of objectname.\nExamples\nIn event scripts for a user object that will be used as a tab page, you can use code like the\nfollowing to make references to the parent Tab control generic:\n// a_tab is generic;\n// it does not know about specific pages\ntab a_tab\n \n// a_tab_page is generic;\n// it does not know about specific controls\nuserobject a_tab_page\n \n// Get values for the Tab control and the tab page\na_tab = this.GetParent( )\n// Somewhat redundant, for illustration only\na_tab_page = this   \n \n// Set properties for the tab page\na_tab_page.PowerTipText = \"Important property page\"\n// Set properties for the Tab control\na_tab.PowerTips = TRUE\n \n// Run Tab control functions\na_tab.SelectTab(a_tab_page)\nYou cannot refer to controls on the user object because a_tab_page does not know about\nthem. You cannot refer to specific pages in the Tab control because a_tab does not know\nabout them either.\n"}
{"page": 811, "text": "Statements, Events, and Functions\nPage 811\nIn event scripts for controls on the tab page user object, you can use two levels of GetParent\nto refer to the user object and the Tab control containing the user object as a tab page:\n// For a control, add one more level of GetParent()\n// and you can make the same settings as above\ntab a_tab\nuserobject a_tab_page\n \na_tab_page = this.GetParent()\na_tab = a_tab_page.GetParent()\n \na_tab_page.PowerTipText = \"Important property page\"\na_tab.PowerTips = TRUE\n \na_tab.SelectTab(a_tab_page)\nSee also\nParentWindow\nPronouns\n2.4.314 GetPathByItem\nDescription\nGets the path of the item.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.GetPathByItem ( ItemHandle )\nTable 2.742:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object whose path you want to obtain.\nItemHandle\nA long specifying the handle of the item.\nReturn value\nString.\nReturns the item path if it succeeds. If any argument's value is null, the method returns null.\nIf an error occurs, the method returns the exception.\nExamples\nThis example determines the item path according to the item handle and then adds three child\nitems:\nLong ll_Object\nString ls_RootPath,ls_ObjectPath\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n"}
{"page": 812, "text": "Statements, Events, and Functions\nPage 812\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject ()\n// Adds an object child item\nls_RootPath = \"/\"\nll_Object = lnv_JsonGenerator.AddItemObject(ls_RootPath, \"object\")\nls_ObjectPath = lnv_JsonGenerator.GetPathByItem(ll_Object)\nlnv_JsonGenerator.AddItemNumber(ls_ObjectPath, \"year\", 2017)\nlnv_JsonGenerator.AddItemDate(ls_ObjectPath, \"date\", 2017-09-21)\nlnv_JsonGenerator.AddItemTime(ls_ObjectPath, \"time\", 12:00:00)\nSee also\nGetItemByPath\n2.4.315 GetPin (obsolete)\nDescription\nCalled by EAServer to obtain a PIN for use with an SSL connection. This function is used by\nPowerBuilder clients connecting to EAServer.\nObsolete function\nGetPin is obsolete, because EAServer is no longer supported since PowerBuilder\n2017.\nApplies to\nSSLCallBack objects\nSyntax\nsslcallback.GetPin ( thesessioninfo, timedout )\nTable 2.743:\nArgument\nDescription\nsslcallback\nAn instance of a customized SSLCallBack object.\nthesessioninfo\nA CORBAObject that contains information about the SSL session. This\ninformation can optionally be displayed to the user to provide details\nabout the session.\ntimedout\nA boolean value that indicates the reason for the callback. A value of\ntrue indicates that the PIN timed out and must be obtained again. A value\nof false indicates that the PIN was not specified at the time of the SSL\nconnection.\nReturn value\nString.\nReturns the PIN specified by the user.\nUsage\n"}
{"page": 813, "text": "Statements, Events, and Functions\nPage 813\nA PowerBuilder application does not usually call the GetPin function directly. GetPin is\ncalled by EAServer when an EAServer client has not specified a PIN for logging in to a\nPKCS 11 token for an SSL connection.\nTo override the behavior of any of the functions of the SSLCallBack object, create a standard\nclass user object that descends from SSLCallBack and customize this object as necessary.\nTo let EAServer know which object to use when a callback is required, specify the name of\nthe object in the callbackImpl SSL property. You can set this property value by calling the\nSetGlobalProperty function.\nIf you do not provide an implementation of GetPin, EAServer receives the\nCORBA::NO_IMPLEMENT exception and an empty string is returned. To obtain a\nuseful return value, code the function to request the user to provide a PIN. You can supply\ninformation to the user such as the token name from the passed thesessioninfo object.\nIf an incorrect PIN or an empty string is returned, EAServer invokes the TrustVerify\ncallback.\nYou can enable the user to cancel the attempt to connect by throwing an exception\nin this callback function. All exceptions thrown in SSLCallback functions return a\nCTSSecurity::UserAbortedException to the server. You need to catch the exception by\nwrapping the ConnectToServer function in a try-catch block.\nExamples\nThis example prompts the user to enter a PIN for a new SSL session or when a session has\ntimed out. In practice you would want to replace the user's entry in the text box with asterisks\nand allow the user more than one attempt to enter a correct PIN:\n//instance variables \n//string is_tokenName\n//SSLServiceProvider issp_jag\nCTSSecurity_sslSessionInfo  mySessionInfo\nis_tokenName = mySessionInfo.getProperty( \"tokenName\" )\nw_response w_pin\nIF timedout THEN\n   MessageBox(\"The SSL session has expired\", &\n         \"Please reenter the PIN for access to the \" + &\n      ls_tokenName + \" certificate database.\")\nELSE\n   MessageBox(\"The SSL session requires a PIN\", &\n      \"Please enter the PIN for access to the \" + &\n      ls_tokenName + \" certificate database.\")\nEND IF\nstring s_PIN\nuserabortedexception ue_cancelled\n// open prompt for PIN\nOpen(w_pin)\n// get value entered\ns_PIN = Message.StringParm\n// set property if we're not to abort\nif s_PIN <> ABORT_VALUE then\n   issp_jag.setglobalproperty(\"pin\", s_PIN)\n   \n// otherwise, abort..\n"}
{"page": 814, "text": "Statements, Events, and Functions\nPage 814\nelse\n   ue_cancelled = CREATE userabortedexception\n   ue_cancelled.text = \"User cancelled request when \" &\n      + \"asked for PIN.\"\n   throw ue_cancelled\nend if\nreturn s_PIN\nSee also\nConnectToServer (obsolete)\nGetCertificateLabel (obsolete)\nGetCredentialAttribute (obsolete)\nTrustVerify (obsolete)\n2.4.316 GetRecentItem\nDescription\nGets the recent menu item of the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.GetRecentItem ( Long Index, ref RibbonMenuItem Item )\nTable 2.744:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control from which you want\nto get the recent menu item.\nIndex\nThe index of the recent menu item which you want to obtain. If index is\ninvalid, an error would occur and this operation would return -1.\nItem\nA RibbonMenuItem variable in which you want to store the recent menu\nitem identified by the index.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nThe recent menu can have only one level and can contain no more than 9 items.\nExamples\nThis example inserts a recent menu item \"RecentItem1\" and then gets a copy of the recent\nmenu.\nInteger li_Return\n"}
{"page": 815, "text": "Statements, Events, and Functions\nPage 815\nLong ll_Index\nRibbonApplicationMenu lr_AppMenu\nRibbonMenuItem lr_MenuItem\nll_Index =  lr_AppMenu.InsertRecentItemFirst (\"RecentItem1\",\n \"Ue_RecentItem1Clicked\")\nli_Return = lr_AppMenu.GetRecentItem (ll_Index, lr_MenuItem)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.317 GetRecentItemCount\nDescription\nDetermines the total number of the recent menu items in the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.GetRecentItemCount ()\nTable 2.745:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control\n"}
{"page": 816, "text": "Statements, Events, and Functions\nPage 816\nReturn value\nLong.\nReturns the total number of menu items in the recent menu. If the recent menu contains no\nitems, returns 0. If an error occurs, returns -1.\nUsage\nThe recent menu can have only one level and can contain no more than 9 items.\nExamples\nThis example inserts three recent menu items and then counts the total number of recent\nmenu items (which returns 3).\nLong ll_Return, ll_Count\nRibbonApplicationMenu lr_AppMenu\nll_Return =  lr_AppMenu.InsertRecentItem(1,\"RecentMenu2\",\"Ue_RecentItem2Clicked\")\nll_Return = \n lr_AppMenu.InsertRecentItemFirst(\"RecentMenu1\",\"Ue_RecentItem1Clicked\")\nll_Return =  lr_AppMenu.InsertRecentItemLast(\"RecentMenu3\",\"Ue_RecentItem3Clicked\")\nll_Count = lr_AppMenu.GetRecentItemCount()\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.318 GetRecentTitle\nDescription\n"}
{"page": 817, "text": "Statements, Events, and Functions\nPage 817\nGets the title of the recent menu list in the application menu. The title is displayed on top of\nthe recent menu list.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.GetRecentTitle ( ref String Title )\nTable 2.746:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control from which you want\nto get the title of the recent menu list.\nTitle\nTitle of the recent menu list. It is displayed on top of the recent menu list.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThis example sets the title of the recent menu list to \"Recently Opened Windows\" and then\ngets and stores the title in the ls_Title variable.\nLong li_Return\nString ls_Title\nRibbonApplicationMenu lr_AppMenu\nli_Return = lr_AppMenu.SetRecentTitle(\"Recently Opened Windows\")\nli_Return = lr_AppMenu.GetRecentTitle(ls_Title)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\n"}
{"page": 818, "text": "Statements, Events, and Functions\nPage 818\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.319 GetRecordSet\nDescription\nReturns the current ADO Recordset object.\nApplies to\nADOResultSet objects\nSyntax\nadoresultset.GetRecordSet ( adorecordsetobject )\nTable 2.747:\nArgument\nDescription\nadoresultset\nAn ADOResultSet object that contains an ADO Recordset.\nadorecordsetobjectAn OLEObject object into which the function places the current ADO\nRecordset. This argument is passed by reference.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nUse the GetRecordSet function to return an ADO Recordset as an OLEObject object that can\nbe used in PowerBuilder as a native ADO Recordset. The ADOResultSet object that contains\nthe ADO Recordset must first have been populated using the SetRecordSet or SetResultSet\nfunction.\nExamples\nThis example generates a result set in a ResultSet object from an existing DataStore object.\nThe ResultSet object is used to populate a new ADOResultSet object. The GetRecordSet\nfunction on the ADOResultSet object is used to return an ADO Recordset as an OLEObject\nthat can be used with ADO Recordset methods.\nresultset lrs_resultset\nADOresultset lrs_ADOresultset\nOLEObject loo_ADOrecordset\n// Generate a result set from an existing DataStore\nds_source.GenerateResultSet(lrs_resultset)\n"}
{"page": 819, "text": "Statements, Events, and Functions\nPage 819\n// Create a new ADOResultSet object and populate it\n// from the generated result set\nlrs_ADOresultset = CREATE ADOResultSet\nlrs_ADOresultset.SetResultSet(lrs_resultset)\n// Pass the data in the ADOResultSet object\n// to an OLEObject you can use as an ADO Recordset\nloo_ADOrecordset = CREATE OLEObject\nlrs_ADOresultset.GetRecordSet(loo_ADOrecordset)\n// Call native ADO Recordset methods on the OLEObject\nloo_ADOrecordset.MoveFirst()\nSee also\nGenerateResultSet method for DataWindows in Section 9.42, \u201cGenerateResultSet\u201d in\nDataWindow Reference.\nSetRecordSet\nSetResultSet\n2.4.320 GetRefreshToken\nDescription\nGets the refresh token returned by the authorization server.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetRefreshToken ( )\nTable 2.748:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\nrefresh token.\nReturn value\nString.\nReturns the refresh token if it exists.\nExamples\nThe following example shows the use of the GetRefreshToken function to get the refresh\ntoken:\nstring ls_refreshtoken\nTokenResponse lnv_TokenResponse\nls_refreshtoken = lnv_TokenResponse.getrefreshtoken()\nSee also\n"}
{"page": 820, "text": "Statements, Events, and Functions\nPage 820\nGetAccessToken\nGetBody\nGetExpiresIn\nGetHeader\nGetHeaders\nGetStatusCode\nGetStatusText\nGetTokenError\nGetTokenType\n2.4.321 GetRemote\nAsks a DDE server application to provide data and stores that data in the specified variable.\nThere are two ways of calling GetRemote, depending on the type of DDE connection you\nhave established.\nTable 2.749:\nTo\nUse\nMake a single request of a DDE server application (called a cold link)\nSyntax 1\nRequest data from a DDE server application after you have opened a\nchannel (called a warm link)\nSyntax 2\n2.4.321.1 Syntax 1: For single DDE requests\nDescription\nAsks a DDE server application to provide data and stores that data in the specified variable\nwithout requiring an open channel. This syntax is appropriate when you will make only one\nor two requests of the server.\nSyntax\nGetRemote ( location, target, applname, topicname {, bAnsi} )\nTable 2.750:\nArgument\nDescription\nlocation\nA string whose value is the location of the data you want returned from\nthe DDE server application. The format of location depends on the\nparticular DDE server application that will receive the message.\ntarget\nA string variable into which the returned data will be placed.\napplname\nA string whose value is the DDE name of the DDE server application.\nIf another PowerBuilder application is the DDE server, this is the\napplication name specified in its StartServerDDE function call.\n"}
{"page": 821, "text": "Statements, Events, and Functions\nPage 821\nArgument\nDescription\ntopicname\nA string identifying the data or the instance of the application you want\nto use with the command (for example, in Microsoft Excel, the topic\nname could be system or the name of an open spreadsheet). If another\nPowerBuilder application is the DDE server, this is the topic specified in\nits StartServerDDE function call.\nbAnsi\n(optional)\nA boolean identifying whether the string to get from the DDE server is in\nANSI format. If bAnsi is NULL, false, or empty, PowerBuilder will first\ntry to get the DDE data as a UNICODE formatted string. If bAnsi is true,\nPowerBuilder will try to get the DDE data as an ANSI formatted string.\nReturn value\nInteger.\nReturns 1 if it succeeds and a negative integer if an error occurs. Values are:\n-1 -- Link was not started\n-2 -- Request denied\nIf any argument's value is null, GetRemote returns null.\nUsage\nWhen using DDE, your PowerBuilder application must have an open window, which will be\nthe client window. For this syntax, the active window is the DDE client window.\nFor more information about DDE channels and warm and cold links, see the two syntaxes of\nthe ExecRemote function.\nExamples\nThese statements ask Microsoft Excel to get the data in row 1 column 2 of a worksheet called\nPROFIT.XLS and put it in a PowerBuilder string called ls_ProfData. The single GetRemote\ncall establishes a cold link, gets the data, and ends the link:\nstring ls_ProfData\nGetRemote(\"R1C2\", ls_ProfData, &\n   \"Excel\", \"PROFIT.XLS\")\nSee also\nExecRemote\nSetRemote\n2.4.321.2 Syntax 2: For DDE requests via an open channel\nDescription\nAsks a DDE server application to provide data and stores that data in the specified variable\nwhen you have already established a warm link by opening a channel to the server. A warm\nlink, with an open channel, is more efficient when you intend to make several DDE requests.\nSyntax\n"}
{"page": 822, "text": "Statements, Events, and Functions\nPage 822\nGetRemote ( location, target, handle {, windowhandle} {, bAnsi})\nTable 2.751:\nArgument\nDescription\nlocation\nA string whose value is the location of the data you want returned. The\nformat of the location depends on the DDE application that will receive\nthe request.\ntarget\nA PowerBuilder string variable into which the returned data will be\nplaced.\nhandle\nA long that identifies the channel to the DDE server application. The\nOpenChannel function returns handle when you call it to open a DDE\nchannel.\nwindowhandle\n(optional)\nThe handle to the window that is acting as the DDE client. Specify this\nparameter to control which window the data is returned to when you have\nmore than one open window.\nbAnsi\n(optional)\nA boolean identifying whether the string to get from the DDE server is in\nANSI format. If bAnsi is NULL, false, or empty, PowerBuilder will first\ntry to get the DDE data as a UNICODE formatted string. If bAnsi is true,\nPowerBuilder will try to get the DDE data as an ANSI formatted string.\nReturn value\nInteger.\nReturns 1 if it succeeds and a negative integer if an error occurs. Values are:\n-1 -- Link was not started\n-2 -- Request denied\n-9 -- Handle is null\nUsage\nWhen using DDE, your PowerBuilder application must have an open window, which will be\nthe client window. For this syntax, you can specify the client window with the windowhandle\nargument.\nBefore using this syntax, call OpenChannel to establish a DDE channel.\nFor more information about DDE channels and warm and cold links, see the ExecRemote\nfunction.\nExamples\nThese statements ask the channel identified by handle (a Microsoft Excel worksheet) to\nget the data in row 1 column 2 and save it in a PowerBuilder string called ls_ProfData.\nGetRemote utilizes the warm link established by the OpenChannel function:\nString ls_ProfData\nlong handle\nhandle = OpenChannel(\"Excel\", \"REGION.XLS\")\n...\n"}
{"page": 823, "text": "Statements, Events, and Functions\nPage 823\nGetRemote(\"R1C2\", ls_ProfData, handle)\n...\nCloseChannel(handle)\nThe following example is similar to the previous one. However, it specifically associates the\nDDE channel with the window w_rpt:\nString ls_ProfData\nlong handle\nhandle = OpenChannel(\"Excel\", \"REGION.XLS\", &\n   Handle(w_rpt))\n...\nGetRemote(\"R1C2\", ls_ProfData, &\n   handle, Handle(w_rpt))\n...\nCloseChannel(handle, Handle(w_rpt))\nSee also\nCloseChannel\nExecRemote\nOpenChannel\nSetRemote\n2.4.322 GetRequestHeader\nDescription\nGets the request header by name.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.GetRequestHeader ( headerName )\nTable 2.752:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object in which you want to\nget the request header by name\nheaderName\nA string value specifying the header name\nReturn value\nString.\nReturns a string value related to the specified header. If the argument's value is null, the\nmethod returns null.\nExamples\nThis example gets the request header by name:\n"}
{"page": 824, "text": "Statements, Events, and Functions\nPage 824\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nlnv_HttpClient.GetRequestHeader(\"Accept\")\nlnv_HttpClient.GetRequestHeader(\"Accept-Encoding\")\nlnv_HttpClient.GetRequestHeader(\"Accept-Language\")\nlnv_HttpClient.GetRequestHeader(\"Connection\")\nlnv_HttpClient.GetRequestHeader(\"User-Agent\")\nlnv_HttpClient.GetRequestHeader(\"Cache-Control\")\nSee also\nClearRequestHeaders\nGetRequestHeaders\nSetRequestHeader\nSetRequestHeaders\n2.4.323 GetRequestHeaders\nDescription\nGets all of the request headers' information.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.GetRequestHeaders ( )\nTable 2.753:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object in which you want to\nget all of the request headers\nReturn value\nString.\nReturns information of all of the request headers.\nExamples\nString ls_AllHeaders\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nls_AllHeaders = lnv_HttpClient.GetRequestHeaders()\nSee also\nClearRequestHeaders\nGetRequestHeader\nSetRequestHeader\n"}
{"page": 825, "text": "Statements, Events, and Functions\nPage 825\nSetRequestHeaders\n2.4.324 GetResponseBody\nDescription\nGets the response body into a string or blob value.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nHTTPClient objects\nSyntax\nobjectname.GetResponseBody ( string data )\nobjectname.GetResponseBody ( blob data )\nobjectname.GetResponseBody ( string data, encodingType )\nTable 2.754:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient object for which you want to get the\nresponse body.\ndata\nA string or blob variable into which the function returns the data.\nFor the string data, if the encoding charset is specified in the Content-\nType response header, this function will encode the data with the\nspecified charset; if charset is not specified, this function determines the\nencoding type based on the BOM header, and then converts the data into\nUNICODE.\nencodingType\nA value specifying the encoding type of the string data to be\nreceived: EncodingANSI!, EncodingUTF8!, EncodingUTF16LE!, or\nEncodingUTF16BE!.\nIf this argument is set, the encoding charset in the Content-Type response\nheader will be ignored.\nReturn value\nInteger.\nReturns 1 if it succeeds and a negative value if an error occurs. If any argument's value is\nnull, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Code conversion failed\nExample\n"}
{"page": 826, "text": "Statements, Events, and Functions\nPage 826\nThis example gets the response body and converts to a blob value:\nInteger li_rc, li_StatusCode\nString ls_ContentType, ls_body, ls_string\nBlob lblb_blob\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\n// Send request using GET method\nli_rc = lnv_HttpClient.SendRequest(\"GET\", \"https://demo.appeon.com/PB/\nwebapi_client/employee/102\")\n// Obtain the response message\nif li_rc = 1 then\n // Obtain the response status\n li_StatusCode = lnv_HttpClient.GetResponseStatusCode()\n if li_StatusCode = 200 then\n  // Obtain the header\n  ls_ContentType = lnv_HttpClient.GetResponseHeader(\"Content-Type\") // Obtain the\n specifid header\n  // Obtain the response data\n  lnv_HttpClient.GetResponseBody(ls_body) // No encoding is specified, because\n encoding of the response data is unknown\n  //lnv_HttpClient.GetResponseBody(ls_string, EncodingUTF8!) // Encoding of the\n response data is known to be EncodingUTF8!.\n  //lnv_HttpClient.GetResponseBody(lblb_blob) // Obtain the response data and\n convert to a blob\n  ...\n end if\nend if\nSee also\nGetResponseHeader\nGetResponseHeaders\nGetResponseStatusCode\nGetResponseStatusText\n2.4.325 GetResponseHeader\nDescription\nGets the response header by name.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.GetResponseHeader ( headerName )\nTable 2.755:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object in which you want to\nget the response headers\n"}
{"page": 827, "text": "Statements, Events, and Functions\nPage 827\nArgument\nDescription\nheaderName\nA string whose value is the header name\nReturn value\nString.\nReturns the value related to the specified header. If any argument's value is null, the method\nreturns null.\nExamples\nThis example obtains the information of the \"Content-Type\" header:\nString ls_ContentType\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nls_ContentType = lnv_HttpClient.GetResponseHeader(\"Content-Type\")\nSee also\nGetResponseBody\nGetResponseHeaders\nGetResponseStatusCode\nGetResponseStatusText\n2.4.326 GetResponseHeaders\nDescription\nGets all of the response headers' information.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.GetResponseHeaders ( )\nTable 2.756:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object for which you want to\nget all of the response headers\nReturn value\nString.\nReturns the information of all of the response headers.\nExamples\nThis example gets information of all headers:\nString ls_AllHeaders\n"}
{"page": 828, "text": "Statements, Events, and Functions\nPage 828\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nls_AllHeaders = lnv_HttpClient.GetResponseHeaders()\nSee also\nGetResponseBody\nGetResponseHeader\nGetResponseStatusCode\nGetResponseStatusText\n2.4.327 GetResponseStatusCode\nDescription\nGets the response status code.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.GetResponseStatusCode ( )\nTable 2.757:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object for which you want to\nget the response status code\nReturn value\nLong.\nReturns the response status code.\nExamples\nThis example gets the response status:\nInteger li_rc\nLong ll_StatusCode\nString ls_ContentType\nBlob lblb_blob\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\n// Send request using GET method\nli_rc = lnv_HttpClient.SendRequest(\"GET\", \"https://demo.appeon.com/PB/\nwebapi_client/employee/102\")\n// Obtain the response message\nif li_rc = 1 then\n // Obtain the response status\n ll_StatusCode = lnv_HttpClient.GetResponseStatusCode()\n if ll_StatusCode = 200 then\n  // Obtain headers\n"}
{"page": 829, "text": "Statements, Events, and Functions\nPage 829\n  ls_ContentType = lnv_HttpClient.GetResponseHeader(\"Content-Type\") // Obtain the\n specified header\n  // Obtain the response data\n  lnv_HttpClient.GetResponseBody(lblb_blob)\n  ...\n end if\nend if\nSee also\nGetResponseBody\nGetResponseHeader\nGetResponseHeaders\nGetResponseStatusText\n2.4.328 GetResponseStatusText\nDescription\nGets the response status description.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.GetResponseStatusText ( )\nTable 2.758:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object for which you want to\nget the response status description\nReturn value\nString.\nReturns the response status description.\nExamples\nThis example gets the response status description:\nInteger li_rc, li_StatusCode\nString ls_StatusText\nBlob lblb_blob\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\n// Send request using GET method\nli_rc = lnv_HttpClient.SendRequest(\"GET\", \" https://demo.appeon.com/PB/\nwebapi_client/employee/102\")\n// Obtain the response message\nif li_rc = 1 then\n // Obtain the response status\n"}
{"page": 830, "text": "Statements, Events, and Functions\nPage 830\n li_StatusCode = lnv_HttpClient.GetResponseStatusCode()\n ls_StatusText = lnv_HttpClient.GetResponseStatusText()\n // Obtain the response data\n lnv_HttpClient.GetResponseBody(lblb_blob)\n \u2026\nend if\nSee also\nGetResponseBody\nGetResponseHeader\nGetResponseHeaders\nGetResponseStatusCode\n2.4.329 GetRootItem\nDescription\nGets the handle of the root item.\nApplies to\nJSONParser objects\nSyntax\nobjectname.GetRootItem ( )\nTable 2.759:\nArgument\nDescription\nobjectname\nThe name of the JSONParser object whose root item you want to obtain.\nReturn value\nLong.\nReturns the handle of the root item if it succeeds and null value if an error occurs. If any\nargument's value is null, the method returns null.\nExamples\nString ls_Error, ls_Json\nJsonParser lnv_JsonParser\nLong ll_RootObject\nlnv_JsonParser = Create JsonParser\nls_Json = '{\"id\":1, \"name\":\"evan1\", \"birthday\":2340323884}'\nls_Error = lnv_JsonParser.LoadString(ls_Json)\nif Len(ls_Error) > 0 then\n MessageBox(\"Error\", ls_Error)\nelse\n ll_RootObject = lnv_JsonParser.GetRootItem()\nend if\nSee also\nGetItemArray\n"}
{"page": 831, "text": "Statements, Events, and Functions\nPage 831\nGetItemArrayJSONString\nGetItemBlob\nGetItemBoolean\nGetItemByPath\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemObject\nGetItemObjectJSONString\nGetItemString\nGetItemTime\nGetItemType\nGetNumberType\n2.4.330 GetSelectedDate\nDescription\nRetrieves the selected date.\nApplies to\nMonthCalendar control\nSyntax\ncontrolname.GetSelectedDate ( d )\nTable 2.760:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control for which you want to get the\nselected date\nd\nA date value returned by reference that indicates the date selected\nReturn value\nInteger.\nReturns 0 for success and one of the following negative values otherwise:\n-1 -- A range of dates is selected\n-2 -- Unknown failure\nUsage\nIf a range of dates is selected, GetSelectedDate returns -1 and retrieves the earliest selected\ndate.\n"}
{"page": 832, "text": "Statements, Events, and Functions\nPage 832\nExamples\nThis example retrieves the selected date into seldate:\ninteger li_return\nDate seldate\nli_return = mc_1.GetSelectedDate(seldate)\nSee also\nGetSelectedRange\nSetSelectedDate\nSetSelectedRange\n2.4.331 GetSelectedRange\nDescription\nRetrieves the range of selected dates.\nApplies to\nMonthCalendar control\nSyntax\ncontrolname.GetSelectedRange ( start, end )\nTable 2.761:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control for which you want to determine\nthe range of selected dates\nstart\nA date value returned by reference that indicates the earliest date selected\nwhen a range of dates has been selected\nend\nA date value returned by reference that indicates the latest date selected\nwhen a range of dates has been selected\nReturn value\nInteger.\nReturns 0 for success, -1 if only one date is selected, and -2 for an unknown failure.\nUsage\nIf only one date is selected, GetSelectedRange returns -1 and the selected date is retrieved in\nthe start and end parameters.\nExamples\nThis code in the DateChanged event prompts the user to enter a second date after the first\ndate in a range is entered, and then asks the user to confirm the range selected:\ndate startdate, enddate\n"}
{"page": 833, "text": "Statements, Events, and Functions\nPage 833\ninteger li_return\nli_return = mc_1.GetSelectedRange(startdate, enddate)\nif li_return = -1 then   MessageBox(\"Selected Dates\",   &\n      \"Please select a return date\")\nelseif li_return = 0 then   MessageBox(\"Selected Dates\",   \"You have selected \"&\n      + string(startdate) + \" - \" string(enddate) &\n      + \"~r~nClick OK to confirm\")\nelse   MessageBox(\"Selected Dates\",   &\n      \"An error has occurred. Please reselect your \" &\n      + \"travel dates\")\nend if\nSee also\nGetDisplayRange\nGetSelectedDate\nSetSelectedDate\nSetSelectedRange\n2.4.332 GetSeriesLabelling\nDescription\nDetermines whether the data for a given series is labeled in a DirectX 3D graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetSeriesLabelling ({graphcontrol,} series, value)\nTable 2.762:\nArgument\nDescription\ncontrolname\nThe name of the graph from which you want data, or the name of the\nDataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n{Optional} A string whose value is the name of the graph in the\nDataWindow control.\nseries\nThe string that names the series for which you want the series label\nsetting.\nvalue\nA boolean passed by reference that indicates whether the series has a\nlabel.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetSeriesLabelling returns null.\nUsage\n"}
{"page": 834, "text": "Statements, Events, and Functions\nPage 834\nGetSeriesLabelling retrieves the data from DirectX 3D Area, Bar, Col, or Line graphs. You\ncannot use this method with DirectX 3D Pie graphs.\nExamples\nThese statements obtain the number of the series and datapoint for the graph gr_1 in the\nDataWindow control dw_employee and then set the series label.\ninteger SeriesNbr, ItemNbr\nboolean refB\nstring ls_SeriesName\ngrObjectType clickedtype\n \n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", & \n      SeriesNbr, ItemNbr)\n \n//Get the name of series\nls_SeriesName = dw_employee.SeriesName(\"gr_1\", & \n      SeriesNbr)\n \n// Set Series label\ndw_employee.GetSeriesLabelling(\"gr_1\", & \n      ls_SeriesName, refB)\nThese statements obtain the number of the series and datapoint for the graph gr_1 and then\nset the series label.\ninteger SeriesNbr, ItemNbr\nboolean refB\nstring ls_SeriesName\ngrObjectType clickedtype\n \nclickedtype = gr_1.ObjectAtPointer(SeriesNbr, &\n      ItemNbr)\n \nls_SeriesName = gr_1.SeriesName(SeriesNbr)\n \ngr_1.GetSeriesLabelling(ls_SeriesName, refB)\nSee also\nGetDataLabelling\nSetDataLabelling\nSetSeriesLabelling\n2.4.333 GetSeriesStyle\nFinds out the appearance of a series in a graph. The appearance settings for individual data\npoints can override the series settings, so the values obtained from GetSeriesStyle may not\nreflect the current state of the graph. There are several syntaxes, depending on what settings\nyou want.\nTable 2.763:\nTo\nUse\nGet the series' colors\nSyntax 1\n"}
{"page": 835, "text": "Statements, Events, and Functions\nPage 835\nTo\nUse\nGet the line style and width used by the series\nSyntax 2\nGet the fill pattern or symbol for the series\nSyntax 3\nFind out if the series is an overlay (a series shown as a line on top of\nanother graph type)\nSyntax 4\nGetSeriesStyle provides information about a series. The data points in the series can have\ntheir own style settings. Use SetSeriesStyle to change the style values for a series. Use\nGetDataStyle to get style information for a data point and SetDataStyle to override series\nsettings and set style information for individual data points.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can find out the fill pattern for a data point or a series in a two-dimensional\nline graph, but that fill pattern will not be visible.\n2.4.333.1 Syntax 1: For the colors of a series\nDescription\nObtains the colors associated with a series in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetSeriesStyle ( { graphcontrol, } seriesname, colortype,\n colorvariable )\nTable 2.764:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to obtain the color of a series,\nor the name of the DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control for which you want the color of a series.\nseriesname\nA string whose value is the name of the series for which you want the\ncolor.\ncolortype\nA value of the grColorType enumerated datatype specifying the aspect of\nthe series for which you want the color:\n\u2022 Foreground! -- Text color\n\u2022 Background! -- Background color\n\u2022 LineColor! -- Line color\n\u2022 Shade! -- Shade (for graphs that are 3-dimensional or have solid data\nmarkers)\n"}
{"page": 836, "text": "Statements, Events, and Functions\nPage 836\nArgument\nDescription\ncolorvariable\nA long variable in which you want to store the color's RGB value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. Stores in colorvariable the RGB value of the\nspecified series and item. If any argument's value is null, GetSeriesStyle returns null.\nExamples\nThese statements store in the variable color_nbr the text (foreground) color used for a series\nin the graph gr_emp_data. The series name is the text in the SingleLineEdit sle_series:\nlong color_nbr\ngr_emp_data.GetSeriesStyle(sle_series.Text, &\n   Foreground!, color_nbr)\nThese statements store in the variable color_nbr the background color used for the series PCs\nin the graph gr_computers in the DataWindow control dw_equipment:\nlong color_nbr\n// Get the color.\ndw_equipment.GetSeriesStyle(\"gr_computers\", &\n   \"PCs\", Background!, color_nbr)\nThese statements store the color for the series under the mouse pointer in the graph\ngr_product_data in line_color:\nstring SeriesName\ninteger SeriesNbr, Data_Point\nlong line_color\ngrObjectType MouseHit\n \nMouseHit = ObjectAtPointer(SeriesNbr, Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n   SeriesName = &\n      gr_product_data.SeriesName(SeriesNbr)\n \n   gr_product_data.GetSeriesStyle(SeriesName, &\n      LineColor!, line_color)\nEND IF\nSee also\nAddSeries\nGetDataStyle\nFindSeries\nSetDataStyle\nSetSeriesStyle\n2.4.333.2 Syntax 2: For the line style and width used by a series\nDescription\n"}
{"page": 837, "text": "Statements, Events, and Functions\nPage 837\nObtains the line style and width for a series in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetSeriesStyle ( { graphcontrol, } seriesname, linestyle, linewidth )\nTable 2.765:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the line style and width for a\nseries in a graph, or the name of the DataWindow control containing the\ngraph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control for which you want the line style information.\nseriesname\nA string whose value is the name of the series for which you want the\nline style information.\nlinestyle\nA variable of type LineStyle in which you want to store the line style of\nseriesname.\nlinewidth\nAn integer variable in which you want to store the line width for\nseriesname. The width is measured in pixels.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. Stores in linestyle a value of the LineStyle\nenumerated datatype and in linewidth the width of the line used for the specified series. If any\nargument's value is null, GetSeriesStyle returns null.\nExamples\nThese statements store in the variables line_style and line_width the line style and width for\nthe series under the mouse pointer in the graph gr_product_data:\nstring SeriesName\ninteger SeriesNbr, Data_Point, line_width\nLineStyle line_style\ngrObjectType MouseHit\n \nMouseHit = ObjectAtPointer(SeriesNbr, Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n   SeriesName = &\n      gr_product_data.SeriesName(SeriesNbr)\n \n   gr_product_data.GetSeriesStyle(SeriesName, &\n      line_style, line_width)\nEND IF\nSee also\nAddSeries\n"}
{"page": 838, "text": "Statements, Events, and Functions\nPage 838\nGetDataStyle\nFindSeries\nSetDataStyle\nSetSeriesStyle\n2.4.333.3 Syntax 3: For the fill pattern or symbol of a series\nDescription\nObtains the fill pattern or symbol of a series in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetSeriesStyle ( { graphcontrol, } seriesname, enumvariable )\nTable 2.766:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the style information for a\nseries in a graph, or the name of the DataWindow control containing the\ngraph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control for which you want the style information.\nseriesname\nA string whose value is the name of the series for which you want the\nstyle information.\nenumvariable\nThe variable in which you want to store the style information. You can\nspecify a FillPattern or grSymbolType variable. The style information\nthat GetSeriesStyle stores depends on the variable type.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. Stores in enumvariable a value of the\nappropriate enumerated datatype for the fill pattern or symbol used for the specified series. If\nany argument's value is null, GetSeriesStyle returns null.\nUsage\nSee SetSeriesStyle for a list of the enumerated datatype values that GetSeriesStyle stores in\nenumvariable.\nExamples\nThese statements store in the variable data_pattern the fill pattern for the series under the\nmouse pointer in the graph gr_product_data:\nstring SeriesName\n"}
{"page": 839, "text": "Statements, Events, and Functions\nPage 839\ninteger SeriesNbr, Data_Point\nFillPattern data_pattern\ngrObjectType MouseHit\n \nMouseHit = ObjectAtPointer(SeriesNbr, Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n   SeriesName = &\n      gr_product_data.SeriesName(SeriesNbr)\n \n   gr_product_data.GetSeriesStyle(SeriesName, &\n      data_pattern)\nEND IF\nThis example stores in the variable data_pattern the fill pattern for the series under the pointer\nin the graph gr_depts in the DataWindow control dw_employees. It then sets the fill pattern\nfor the series Total Salary in the graph gr_dept_data to that pattern:\nstring SeriesName\ninteger SeriesNbr, Data_Point\nFillPattern data_pattern\ngrObjectType MouseHit\n \nMouseHit = &\n   ObjectAtPointer(\"gr_depts\" , SeriesNbr, &\n      Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n   SeriesName = &\n       dw_employees.SeriesName(\"gr_depts\" , SeriesNbr)\n \n   dw_employees.GetSeriesStyle(\"gr_depts\" , &\n      SeriesName, data_pattern)\n \n   gr_dept_data.SetSeriesStyle(\"Total Salary\", &\n      data_pattern)\nEND IF\nIn these examples, you can change the datatype of data_pattern (the variable specified as the\nlast argument) to find out the symbol type.\nSee also\nAddSeries\nGetDataStyle\nFindSeries\nSetDataStyle\nSetSeriesStyle\n2.4.333.4 Syntax 4: For determining whether a series is an overlay\nDescription\nReports whether a series in a graph is an overlay -- whether it is shown as a line on top of\nanother graph type.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\n"}
{"page": 840, "text": "Statements, Events, and Functions\nPage 840\nSyntax\ncontrolname.GetSeriesStyle ( { graphcontrol, } seriesname,overlayindicator )\nTable 2.767:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the overlay status of a series\nin a graph, or the name of the DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control for which you want the overlay status.\nseriesname\nA string whose value is the name of the series for which you want the\noverlay status.\noverlayindicator\nA boolean variable in which you want to store a value indicating whether\nthe series is an overlay. GetSeriesStyle sets overlayindicator to true if the\nseries is an overlay and false if it is not.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. Stores in overlayindicator true if\nthe specified series is an overlay and false if it is not. If any argument's value is null,\nGetSeriesStyle returns null.\nExamples\nThese statements find out whether a series in the graph gr_emp_data is an overlay. The series\nname is the text in the SingleLineEdit sle_series:\nboolean is_overlay\ngr_emp_data.GetSeriesStyle(sle_series.Text, &\n   is_overlay)\n2.4.334 GetSeriesTransparency\nDescription\nObtains the transparency percentage of a series in a DirectX 3D graph (those with 3D\nrendering).\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.GetSeriesTransparency ( { graphcontrol, } series, transparency )\nTable 2.768:\nArgument\nDescription\ncontrolname\nThe name of the graph from which you want series transparency data, or\nthe name of the DataWindow control containing the graph.\n"}
{"page": 841, "text": "Statements, Events, and Functions\nPage 841\nArgument\nDescription\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control from which you want the series data.\nseries\nThe string that identifies the series from which you want the transparency\nvalue.\ntransparency\nInteger value for percent transparency. A value of 0 means that the series\nis opaque and a value of 100 means that it is completely transparent.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetSeriesTransparency returns null.\nUsage\nGetSeriesTransparency retrieves data from any DirectX 3D graph (those with 3D rendering).\nExamples\nThese statements obtain the transparency value of the series named Costs in the graph\ngr_computers in the DataWindow control dw_equipment:\nstring SeriesName\ninteger rtn, ser_transp_value\n \n// Get the number of the series.\nSeriesNbr = dw_equipment.FindSeries( &\n    \"gr_computers\", \"Costs\")\nrtn = dw_equipment.GetSeriesTransparency( &\n    \"gr_computers\" , SeriesNbr, ser_transp_value)\nThese statements obtain the transparency value of the series named Income in the graph gr_1.\nstring SeriesName\ninteger rtn, ser_transp_value\n \nSeriesNbr = gr_1.FindSeries(\"Income\")\nrtn = gr_1.GetSeriesTransparency(SeriesName, &\n      ser_transp_value)\nSee also\nFindSeries\nGetDataTransparency\nSetDataTransparency\nSetSeriesTransparency\n2.4.335 GetSessionID\nDescription\nGets the session ID of the current application client. The session ID is a GUID and the string\nlength is 36 characters.\n"}
{"page": 842, "text": "Statements, Events, and Functions\nPage 842\nApplies to\nApplication object\nSyntax\napplicationname.GetSessionID ( )\nTable 2.769:\nArgument\nDescription\napplicationname\nThe name of the application object for which you want to get the session\nID.\nReturn value\nString.\nReturns the session ID if it succeeds or an empty string (\"\") if the current application is not an\ninstallable cloud app or the session is not created successfully.\nThe session ID is a GUID and the string length is 36 characters.\nUsage\nYou can use this function in combination with the PowerServer Web APIs GetAllSessions\nand KillSession to manage the user session(s). For more, see Get/Kill user sessions.\nExample\nThis example gets the session ID of the current application client.\nString    ls_SessionID\nls_SessionID = Getapplication().GetSessionID()\n2.4.336 GetShortName\nDescription\nGets the short name for the current PowerBuilder execution context.\nApplies to\nContextInformation objects\nSyntax\nservicereference.GetShortName ( shortname )\nTable 2.770:\nArgument\nDescription\nservicereference\nReference to the ContextInformation service instance.\nshortname\nString into which the function places the short name. This argument is\npassed by reference.\nReturn value\n"}
{"page": 843, "text": "Statements, Events, and Functions\nPage 843\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to determine the current execution environment. The window plug-in\nand window ActiveX contexts are obsolete in the current version of PowerBuilder. For\nPowerBuilder 2017 and later applications, the only value passed for the shortname argument\nis \"PBRun\".\nExamples\nThis example calls the GetShortName function. ci is an instance variable of type\nContextInformation:\nString ls_name\n \nthis.GetContextService(\"ContextInformation\", ci)\nci.GetShortName(ls_name)\nIF ls_name <> \"PBRun\" THEN\n   cb_close.visible = FALSE\nEND IF\nSee also\nGetCompanyName\nGetContextService\nGetFixesVersion\nGetHostObject\nGetMajorVersion\nGetMinorVersion\nGetName\nGetVersionName\n2.4.337 GetSmallButton\nDescription\nGets the small button according to the handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetSmallButton ( Long ItemHandle, ref RibbonSmallButtonItem Item )\nTable 2.771:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the small button you want to obtain.\n"}
{"page": 844, "text": "Statements, Events, and Functions\nPage 844\nArgument\nDescription\nItem\nA RibbonSmallButtonItem variable in which you want to store the small\nbutton identified by the item handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get an item according to the handle by using the GetItem function.\nExamples\nThis example inserts an \"Add\" small button and then gets a copy of the small button\naccording to its handle.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton\nRibbonSmallButtonItem lr_SmallButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst(ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_SmallButton = rbb_1.InsertSmallButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddSmall!\", \"Ue_SmallButtonClicked\")\nli_Return = rbb_1.GetSmallButton (ll_Handle_SmallButton, lr_SmallButton)\nSee also\nInsertSmallButton\nInsertSmallButtonFirst\nInsertSmallButtonLast\nDeleteSmallButton\nSetSmallButton\nGetChildItemByIndex\n2.4.338 GetSource\nDescription\nGets the HTML source code for the current page's main frame.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.GetSource ( )\nTable 2.772:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\n"}
{"page": 845, "text": "Statements, Events, and Functions\nPage 845\nReturn value\nString.\nExamples\nString ls_wbsource\nls_wbsource = wb_1.getsource()\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGoBack\nGoForward\nNavigate\nPrintAsPDF\nPauseDownload\nRegisterEvent\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.339 GetSpacing\nDescription\nObtains the line spacing of the paragraph containing the insertion point in a RichTextEdit\ncontrol.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.GetSpacing ( )\nTable 2.773:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to find out the\nline spacing of the paragraph containing the insertion point\nReturn value\n"}
{"page": 846, "text": "Statements, Events, and Functions\nPage 846\nSpacing. A value of the Spacing enumerated datatype indicating the line spacing of the\nparagraph containing the insertion point.\nUsage\nWhen the user selects several paragraphs, the insertion point is at the beginning or end of the\nselection, depending on how the user made the selection. The value reported depends on the\nlocation of the insertion point.\nExamples\nThis example stores a value of the enumerated datatype spacing in the variable l_spacing.\nThe value is the spacing for the paragraph with the insertion point:\nspacing l_spacing\nl_spacing = rte_1.GetSpacing()\nSee also\nGetTextStyle\nSetSpacing\nSetTextStyle\n2.4.340 GetStatusCode\n2.4.340.1 Syntax 1: for TokenResponse objects\nDescription\nGets the response status code.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetStatusCode ( )\nTable 2.774:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\nresponse status code.\nReturn value\nLong.\nReturns the response status code.\nExamples\nThe following example shows the use of the GetStatusCode function to get the response\nstatus code:\nlong ll_statuscode\nTokenResponse lnv_TokenResponse\n"}
{"page": 847, "text": "Statements, Events, and Functions\nPage 847\nll_statuscode = lnv_TokenResponse.getstatuscode()\nSee also\nGetAccessToken\nGetBody\nGetExpiresIn\nGetHeader\nGetHeaders\nGetRefreshToken\nGetStatusText\nGetTokenError\nGetTokenType\n2.4.340.2 Syntax 2: for ResourceResponse objects\nDescription\nGets the response status code.\nApplies to\nResourceResponse object\nSyntax\nobjectname.GetStatusCode ( )\nTable 2.775:\nArgument\nDescription\nobjectname\nA reference to the ResourceResponse object in which you want to get the\nresponse status code.\nReturn value\nLong.\nReturns the response status code.\nExamples\nThe following example shows the use of the GetStatusCode function to get the response\nstatus code:\nlong ll_statuscode\nResourceResponse lnv_ResourceResponse\nll_statuscode = lnv_ResourceResponse.getstatuscode( )\nSee also\nGetBody\n"}
{"page": 848, "text": "Statements, Events, and Functions\nPage 848\nGetHeader\nGetHeaders\nGetStatusText\n2.4.341 GetStatusText\n2.4.341.1 Syntax 1: for TokenResponse objects\nDescription\nGets the response status description.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetStatusText ( )\nTable 2.776:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\nresponse status description.\nReturn value\nString.\nReturns the response status description.\nExamples\nThe following example shows the use of the GetStatusText function to get the response status\ntext:\nstring ls_statustext\nTokenResponse lnv_TokenResponse\nls_statustext = lnv_TokenResponse.getstatustext( )\nSee also\nGetAccessToken\nGetBody\nGetExpiresIn\nGetHeader\nGetHeaders\nGetRefreshToken\nGetStatusCode\nGetTokenError\n"}
{"page": 849, "text": "Statements, Events, and Functions\nPage 849\nGetTokenType\n2.4.341.2 Syntax 2: for ResourceResponse objects\nDescription\nGets the response status description.\nApplies to\nResourceResponse object\nSyntax\nobjectname.GetStatusText ( )\nTable 2.777:\nArgument\nDescription\nobjectname\nA reference to the ResourceResponse object in which you want to get the\nresponse status description.\nReturn value\nString.\nReturns the response status description.\nExamples\nThe following example shows the use of the GetStatusText function to get the response status\ntext:\nstring ls_statustext\nResourceResponse lnv_ResourceResponse\nls_statustext = lnv_ResourceResponse.getstatustext( )\nSee also\nGetBody\nGetHeader\nGetHeaders\nGetStatusCode\n2.4.342 GetStatus (obsolete)\nDescription\nReturns the status of the EAServer transaction associated with the calling thread.\nObsolete function\nGetStatus is obsolete, because EAServer is no longer supported since PowerBuilder\n2017.\n"}
{"page": 850, "text": "Statements, Events, and Functions\nPage 850\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.GetStatus ( )\nTable 2.778:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\nReturn value\nInteger.\nReturns -1 if an error occurs and one of the following positive integers if it succeeds:\n1 -- Status active\n2 -- Status marked rollback\n3 -- Status prepared\n4 -- Status committed\n5 -- Status rolled back\n6 -- Status unknown\n7 -- Status no transaction\n8 -- Status preparing\n9 -- Status committing\n10 -- Status rolling back\nUsage\nThe GetStatus function can be used to determine the current status of a transaction by the\nclient or component that initiated the transaction using the BeginTransaction function.\nEAServer must be using the two-phase commit transaction coordinator (OTS/XA).\nGetStatus returns 1 when the transaction has started and no prepares have been issued.\nWhen GetStatus returns 4 or 5, heuristics may exist; otherwise, the transaction would have\nbeen completed and destroyed and the value 7 returned.\nA return value of 6 indicates that the transaction is in a transient condition and a subsequent\ncall will eventually return another status.\nIf GetStatus returns 8, 9, or 10, the transaction has begun but not yet completed the process of\npreparing, committing, or rolling back, probably because responses from participants in the\ntransaction are pending.\nExamples\nThis example shows the use of GetStatus to obtain the state of the current transaction:\n// Instance variable:\n"}
{"page": 851, "text": "Statements, Events, and Functions\nPage 851\n// CORBACurrent corbcurr\ninteger li_rc, li_status\nli_rc = this.GetContextService(\"CORBACurrent\", &\n   corbcurr)\nIF li_rc <> 1 THEN\n   // handle the error\nEND IF\nli_rc = corbcurr.Init( \"iiop://jagserver:2000\")\nIF li_rc <> 1 THEN\n   // handle the error\nELSE\n   li_status = corbcurr.GetStatus()\n   CHOOSE CASE li_status\n      CASE 1\n      // take appropriate action for each value\n      ...\n   END CHOOSE\nEND IF\nSee also\nBeginTransaction (obsolete)\nCommitDocking\nGetContextService\nGetTransactionName (obsolete)\nInit (obsolete)\nResumeTransaction (obsolete)\nRollbackOnly (obsolete)\nRollbackTransaction (obsolete)\nSetTimeout (obsolete)\nSuspendTransaction (obsolete)\n2.4.343 GetSyncRegistryProperties\nDescription\nReturns an integer to determine whether to use synchronization properties saved in the\nregistry.\nApplies to\nMLSynchronization, MLSync controls\nSyntax\nsyncObject.GetSyncRegistryProperties ( )\nTable 2.779:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object.\nReturn value\n"}
{"page": 852, "text": "Statements, Events, and Functions\nPage 852\nInteger.\nReturns 1 for success and -1 for failure. Failure occurs if SyncRegistryKey property is not set\nor if the key does not exist in the Windows registry.\nUsage\nThe GetSyncRegistryProperties function sets synchronization object properties from values\nstored in the registry. The properties it can set include: AdditionalOpts, DownloadOnly,\nExtendedOpts, Host, LogFileName, LogOpts, MLServerVersion, MLUser, ObjectRevision,\nPort, Publication, UploadOnly, UseLogFile, and UseWindow.\nIt cannot set secured properties such as AuthenticateParms, DBPass, and EncryptionKey that\nare never saved to the Windows registry.\nExamples\nThe MLSync object generated by the MobiLink wizard for SQL Anywhere uses the\nfollowing code in its Constructor event:\nlong      rc\nlong      RegistryRevision\nRegistryRevision =this.GetObjectRevisionFromRegistry()\nIF RegistryRevision < this.ObjectRevision THEN\n    rc = this.SetSyncRegistryProperties()\nELSE\n   rc = this.GetSyncRegistryProperties()\nEND IF      \nThis code gets the values of authentication properties stored in the Windows registry only\nif the build number stored in the registry is higher than the build number of the running\napplication.\nSee also\nGetCommandString\nGetObjectRevisionFromRegistry\nSetParm\nSetSyncRegistryProperties\n2.4.344 GetTabButton\nDescription\nGets the tab button according to the handle in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetTabButton ( Long ItemHandle, ref RibbonTabButtonItem Item )\nTable 2.780:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 853, "text": "Statements, Events, and Functions\nPage 853\nArgument\nDescription\nItemHandle\nThe handle of the tab button you want to obtain.\nItem\nA RibbonTabButtonItem variable in which you want to store the tab\nbutton identified by the item handle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get the tab button according to its index using the GetTabButtonByIndex\nfunction.\nYou can also get an item according to the handle by using the GetItem function.\nExamples\nThis example inserts a \"MyTabButton\" tab button and then gets a copy of the tab button\naccording to its handle.\nInteger li_Return\nLong ll_Handle\nRibbonTabButtonItem lr_TabButton\nll_Handle = rbb_1.InsertTabButtonFirst (\"MyTabButton\", \"ArrowUpSmall!\",\n \"Ue_TabButtonClicked\")\nli_Return = rbb_1.GetTabButton (ll_Handle, lr_TabButton)\nSee also\nInsertTabButton\nInsertTabButtonFirst\nInsertTabButtonLast\nDeleteTabButton\nSetTabButton\nGetTabButtonByIndex\nGetTabButtonCount\n2.4.345 GetTabButtonByIndex\nDescription\nGets the tab button according to the index in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetTabButtonByIndex ( Long Index, ref RibbonTabButtonItem Item )\n"}
{"page": 854, "text": "Statements, Events, and Functions\nPage 854\nTable 2.781:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nIndex\nThe index of the tab button you want to obtain.\nItem\nA RibbonTabButtonItem variable in which you want to store the tab\nbutton identified by the index.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also get the tab button according to its handle using the GetTabButton function.\nExample 1\nThis example inserts a \"MyTabButton\" tab button and then gets a copy of the tab button\nwhose index number is 1.\nInteger li_Return\nLong ll_Handle\nRibbonTabButtonItem lr_TabButton\nll_Handle = rbb_1.InsertTabButtonFirst (\"MyTabButton\", \"ArrowUpSmall!\",\n \"Ue_TabButtonClicked\")\nli_Return = rbb_1.GetTabButtonByIndex (1, lr_TabButton)\nExample 2\nThis example searches all tab buttons for the tab button whose tag value is \"up\".\nString  ls_path\nLong    ll_TabCount, ll_I\ninteger li_return\nRibbonTabButtonItem lr_Tab\nls_path = \"Saved Pictures\\down.png\"\nll_TabCount = Rbb_1.GetTabbuttoncount( )\nFor ll_I = 1 To ll_TabCount\n  If rbb_1.Gettabbuttonbyindex(ll_I, lr_Tab) = 1 Then\n     If lr_Tab.tag = \"up\" Then\n        lr_Tab.picturename = ls_path\n        li_return = rbb_1.SetTabButton(lr_Tab.itemhandle, lr_Tab)\n     End If\n  End If\nNext\nSee also\nInsertTabButton\nInsertTabButtonFirst\nInsertTabButtonLast\nDeleteTabButton\nSetTabButton\n"}
{"page": 855, "text": "Statements, Events, and Functions\nPage 855\nGetTabButton\nGetTabButtonCount\n2.4.346 GetTabButtonCount\nDescription\nDetermines the total number of tab buttons in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.GetTabButtonCount ( )\nTable 2.782:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nReturn value\nLong.\nReturns the total number of tab buttons in RibbonBar. If RibbonBar contains no tab buttons,\nreturns 0. If an error occurs, returns -1.\nExamples\nLong ll_Return\nll_Return = rbb_1.GetTabButtonCount()\nSee also\nInsertTabButton\nInsertTabButtonFirst\nInsertTabButtonLast\nDeleteTabButton\nSetTabButton\nGetTabButton\nGetTabButtonByIndex\n2.4.347 GetText\nDescription\nReturns the Value property as a text string with the specified Format or CustomFormat\napplied.\nApplies to\n"}
{"page": 856, "text": "Statements, Events, and Functions\nPage 856\nDatePicker controls\nSyntax\ncontrolname.GetText ( )\nTable 2.783:\nArgument\nDescription\ncontrolname\nThe name of the control for which you want to get the text\nReturn value\nString.\nUsage\nReturns the date and time stored in the Value property as a text string formatted according to\nthe Format property, or if Format is set to dtfCustom!, according to the format specified in\nthe CustomFormat property.\nExamples\nThis example retrieves the date and time stored in the Value property of dp_1 to the string\nls_text:\nstring ls_text\nls_text = dp_1.GetText()\nSee also\nGetValue\nSetValue\n2.4.348 GetTextColor\nDescription\nObtains the color of selected text in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.GetTextColor ( )\nTable 2.784:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to find out the\ncolor of selected text\nReturn value\nLong.\n"}
{"page": 857, "text": "Statements, Events, and Functions\nPage 857\nReturns the long value that specifies the color of the currently selected text. If text of\ndifferent colors is selected, GetTextColor returns the color of the first selected character.\nGetTextColor returns -1 if an error occurs.\nExamples\nThis example stores a long representing the color of the selected text in rte_1:\nlong ll_color\nll_color = rte_1.GetTextColor()\nSee also\nGetTextStyle\nSetTextColor\nSetTextStyle\n2.4.349 GetTextStyle\nDescription\nFinds out whether selected text has text styles (such as bold or italic) assigned to it.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.GetTextStyle ( textstyle )\nTable 2.785:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to find the\nformatting of selected text.\ntextstyle\nA value of the enumerated datatype TextStyle specifying the text style\nyou want to check for. Values are:\nBold!\nItalic!\nStrikeout!\nSubscript!\nSuperscript!\nUnderlined!\nReturn value\nBoolean. Returns true if the selected text is formatted with the specified text style and false if\nit is not. If textstyle is null, GetTextStyle returns null.\nUsage\n"}
{"page": 858, "text": "Statements, Events, and Functions\nPage 858\nText can be formatted with more than one text style. To test for different styles, call\nGetTextStyle more than once.\nExamples\nA previously defined structure is an instance variable istr_text for the current window.\nThe structure contains the boolean fields: b_isBold, b_isItalic, and b_isUnderlined. This\nexample checks whether the selected text has these styles and stores true or false values in the\nstructure for each style:\nistr_text.b_isBold = rte_fancy.GetTextStyle(Bold!)\nistr_text.b_isItalic = rte_fancy.GetTextStyle(Italic!)\nistr_text.b_isUnderlined = &\n   rte_fancy.GetTextStyle(Underlined!)\nSee also\nGetTextColor\nSetSpacing\nSetTextColor\nSetTextStyle\n2.4.350 GetTheme\nDescription\nGets the theme that is currently applied to the application UI.\nSyntax\nGetTheme ( {boolean fullpath} )\nTable 2.786:\nArgument\nDescription\nfullpath\n(optional)\nA boolean whose value indicates whether to get the path of the theme\nfile.\nReturn value\nA string whose value is the theme name (or theme path and name) that is currently applied to\nthe application. If any argument's value is null, the method returns null.\nAn empty string will be returned if one of the following happens:\n\u2022 if no theme is applied (\"Do Not Use Themes\" is selected in the Themes tab of the\nApplication Properties dialog), or\n\u2022 if a theme is applied and the Windows classic style option is selected in the project painter\nwhen building the application, or\n\u2022 if a theme is applied and the application's executable file cannot find the \"theme\" folder at\nruntime.\n"}
{"page": 859, "text": "Statements, Events, and Functions\nPage 859\nExamples\nThis example gets the theme name that is currently applied to the application:\nString ls_themename\nls_themename = GetTheme()\nSee also\nApplyTheme\nSpecifying a theme for the application UI in Users Guide\n2.4.351 GetToday\nDescription\nReturns the value that the calendar uses as today's date.\nApplies to\nDatePicker, MonthCalendar controls\nSyntax\ncontrolname.GetToday ( )\nTable 2.787:\nArgument\nDescription\ncontrolname\nThe name of the control for which you want to get today's date\nReturn value\nDate.\nUsage\nBy default, the current system date is set as the Today date. You can use the SetToday\nfunction to specify a different date.\nExamples\nThis example retrieves the Today date in a DatePicker control into currentdate:\nDate currentdate\ncurrentdate = dp_1.GetToday()\nSee also\nSetToday\n2.4.352 GetTokenError\nDescription\nGets the error information returned by the authorization server if the request privilege grant\nfailed.\n"}
{"page": 860, "text": "Statements, Events, and Functions\nPage 860\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetTokenError ( string type, string description, string uri, string\n state )\nTable 2.788:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\nerror information.\ntype\nA string specifying the error type.\ndescription\nA string specifying the error description.\nuri\nA string specifying the error URI.\nstate\nA string specifying the error state.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the GetTokenError function to get the error\ninformation:\nint li_return\nstring ls_type, ls_description, ls_uri, ls_state\nTokenResponse lnv_tokenResponse\nli_return = lnv_tokenResponse.gettokenerror(ls_type, ls_description, ls_uri,\n ls_state)\nSee also\nGetAccessToken\nGetBody\nGetExpiresIn\nGetHeader\nGetHeaders\nGetRefreshToken\nGetStatusCode\nGetStatusText\nGetTokenType\n"}
{"page": 861, "text": "Statements, Events, and Functions\nPage 861\n2.4.353 GetTokenType\nDescription\nGets the access token type returned by the authorization server.\nApplies to\nTokenResponse object\nSyntax\nobjectname.GetTokenType ( )\nTable 2.789:\nArgument\nDescription\nobjectname\nA reference to the TokenResponse object in which you want to get the\naccess token type.\nReturn value\nString.\nReturns the access token type if it succeeds and empty string (\"\") if an error occurs.\nExamples\nThe following example shows the use of the GetTokenType function to get the token type:\nstring ls_tokentype\nTokenResponse lnv_TokenResponse\nls_tokentype = lnv_TokenResponse.gettokentype( )\nSee also\nGetAccessToken\nGetBody\nGetExpiresIn\nGetHeader\nGetHeaders\nGetRefreshToken\nGetStatusCode\nGetStatusText\nGetTokenError\n2.4.354 GetToolbar\nDescription\nGets the current values for alignment, visibility, and title of the specified toolbar.\n"}
{"page": 862, "text": "Statements, Events, and Functions\nPage 862\nApplies to\nMDI frame and sheet windows\nSyntax\nwindow.GetToolbar ( toolbarindex, visible {, alignment {, floatingtitle } } )\nTable 2.790:\nArgument\nDescription\nwindow\nThe MDI frame or sheet to which the toolbar belongs\ntoolbarindex\nAn integer whose value is the index of the toolbar for which you want the\ncurrent settings\nvisible\nA boolean variable in which you want to store a value indicating whether\nthe toolbar is visible\nalignment\n(optional)\nA variable of the ToolbarAlignment enumerated datatype in which you\nwant to store the current alignment of the toolbar\nfloatingtitle\n(optional)\nA string variable in which you want to store the toolbar title that is\ndisplayed when the alignment is Floating!\nReturn value\nInteger.\nReturns 1 if it succeeds. GetToolbar returns -1 if there is no toolbar for the index you specify\nor if an error occurs. If any argument's value is null, returns null.\nUsage\nTo find out the position of the docked or floating toolbar, call GetToolbarPos.\nExamples\nThis example finds out whether toolbar 1 is visible. It also gets the alignment and title of\ntoolbar 1. The values are stored in the variables lb_visible, lta_align, and ls_title:\ninteger li_rtn\nboolean lb_visible\ntoolbaralignment lta_align\n \nli_rtn = w_frame.GetToolbar(1, lb_visible, &\n   lta_align, ls_title)\nThis example displays the settings for the toolbar index the user specifies in sle_index. The\nIF and CHOOSE CASE statements convert the values to strings so they can be displayed in\nmle_toolbar:\ninteger li_index, li_rtn\nboolean lb_visible\ntoolbaralignment lta_align\nstring ls_visible, ls_align, ls_title\n \nli_index = Integer(sle_index.Text)\nli_rtn = w_frame.GetToolbar(li_index, &\n"}
{"page": 863, "text": "Statements, Events, and Functions\nPage 863\n   lb_visible, lta_align, ls_title)\n \nIF li_rtn = -1 THEN\n   MessageBox(\"Toolbars\", \"Can't get\" &\n      + \" toolbar settings.\")\n   RETURN -1\nEND IF\n \nIF lb_visible = TRUE THEN\n   ls_visible = \"TRUE\"\nELSE\n   ls_visible = \"FALSE\"\nEND IF\n \nCHOOSE CASE lta_align\n   CASE AlignAtTop!\n      ls_align = \"top\"\n   CASE AlignAtLeft!\n      ls_align = \"left\"\n   CASE AlignAtRight!\n      ls_align = \"right\"\n   CASE AlignAtBottom!\n      ls_align = \"bottom\"\n   CASE Floating!\n      ls_align = \"floating\"\nEND CHOOSE\n \nmle_1.Text = ls_visible + \"~r~n\" &\n   + ls_align + \"~r~n\" &\n      + ls_title\nSee also\nGetToolbarPos\nSetToolbar\nSetToolbarPos\n2.4.355 GetToolbarPos\nGets position information for the specified toolbar.\nTable 2.791:\nTo get\nUse\nDocking position of a docked toolbar\nSyntax 1\nCoordinates and size of a floating toolbar\nSyntax 2\n2.4.355.1 Syntax 1: For docked toolbars\nDescription\nGets the position of a docked toolbar.\nApplies to\nMDI frame and sheet windows\nSyntax\n"}
{"page": 864, "text": "Statements, Events, and Functions\nPage 864\nwindow.GetToolbarPos ( toolbarindex, dockrow, offset )\nTable 2.792:\nArgument\nDescription\nwindow\nThe MDI frame or sheet to which the toolbar belongs.\ntoolbarindex\nAn integer whose value is the index of the toolbar for which you want the\ncurrent settings.\ndockrow\nAn integer variable in which you want to store the number of the docking\nrow for the specified toolbar. Docking rows are numbered from left to\nright or top to bottom.\noffset\nAn integer variable in which you want to store the offset of the toolbar\nfrom the beginning of the docking row. For toolbars at the top or bottom,\noffset is measured from the left edge. For toolbars at the left or right,\noffset is measured from the top.\nReturn value\nInteger.\nReturns 1 if it succeeds. GetToolbarPos returns -1 if there is no toolbar for the index you\nspecify or if an error occurs. If any argument's value is null, GetToolbarPos returns null.\nUsage\nTo find out whether the docked toolbar is at the top, bottom, left, or right edge of the\nwindow, call GetToolbar.\nSyntax 1 for GetToolbarPos gets the most recent docked position, even if the toolbar is\ncurrently floating.\nExamples\nIn this example, the user has specified a toolbar index in sle_2. The example gets the toolbar\nposition information and displays it in a MultiLineEdit mle_1:\ninteger li_index, li_rtn\ninteger li_dockrow, li_offset\n \nli_index = Integer(sle_2.Text)\nli_rtn = w_frame.GetToolbarPos(li_index, &\n   li_dockrow, li_offset)\n \n// Report the position settings\nIF li_rtn = 1 THEN\n   mle_1.Text = String(li_dockrow) + \"~r~n\" &\n      + String(li_offset)\nELSE\n   mle_1.Text = \"Can't get toolbar position\"\nEND IF\nSee also\nGetToolbar\nSetToolbar\n"}
{"page": 865, "text": "Statements, Events, and Functions\nPage 865\nSetToolbarPos\n2.4.355.2 Syntax 2: For floating toolbars\nDescription\nGets the position and size of a floating toolbar.\nApplies to\nMDI frame and sheet windows\nSyntax\nwindow.GetToolbarPos ( toolbarindex, x, y, width, height )\nTable 2.793:\nArgument\nDescription\nwindow\nThe MDI frame or sheet to which the toolbar belongs.\ntoolbarindex\nAn integer whose value is the index of the toolbar for which you want the\ncurrent settings.\nx\nAn integer variable in which you want to store the x coordinate of the\nfloating toolbar. If the toolbar is docked, x is set to the most recent value.\ny\nAn integer variable in which you want to store the y coordinate of the\nfloating toolbar. If the toolbar is docked, y is set to the most recent value.\nwidth\nAn integer variable in which you want to store the width of the floating\ntoolbar. If the toolbar is docked, width is set to the most recent value.\nheight\nAn integer variable in which you want to store the height of the floating\ntoolbar. If the toolbar is docked, height is set to the most recent value.\nReturn value\nInteger.\nReturns 1 if it succeeds. GetToolbarPos returns -1 if there is no toolbar for the index you\nspecify or if an error occurs. If any argument's value is null, returns null.\nUsage\nTo find out whether the toolbar is floating, call GetToolbar.\nSyntax 2 for GetToolbarPos gets the most recent floating position, even if the toolbar is\ncurrently docked.\nExamples\nThis example gets the x and y coordinates and the width and height of\ntoolbar 1:\nint ix, iy, iw, ih, li_rtn\n \nli_rtn = w_frame.GetToolbarPos(1, ix, iy, iw, ih)\nIF li_rtn = -1 THEN\n   mle_1.Text = \"Can't get toolbar position\"\n"}
{"page": 866, "text": "Statements, Events, and Functions\nPage 866\nELSE\n   mle_1.Text = String(ix) + \"~r~n\" &\n      + String(iy) + \"~r~n\" &\n      + String(iw) + \"~r~n\" &\n         + String(ih)\nEND IF\nSee also\nGetToolbar\nSetToolbar\nSetToolbarPos\n2.4.356 GetTransactionName (obsolete)\nDescription\nReturns a string describing the EAServer transaction associated with the calling thread.\nObsolete function\nGetTransactionName is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.GetTransactionName (  )\nTable 2.794:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\nReturn value\nString.\nReturns a printable string describing the transaction if a transaction exists and an empty string\notherwise.\nUsage\nThe GetTransactionName function returns a string identifying the transaction associated with\nthe calling thread. This string is typically used for debugging.\nGetTransactionName can be called by a client or a component that is marked as OTS style.\nEAServer must be using the two-phase commit transaction coordinator (OTS/XA).\nExamples\nThis example shows the use of GetTransactionName to return information about a transaction\nto a client:\n"}
{"page": 867, "text": "Statements, Events, and Functions\nPage 867\n// Instance variables:\n// CORBACurrent corbcurr\nstring ls_transacname\n// Get an instance of the CORBACurrent object\n// and initialize it   \n...\nls_transacname = corbcurr.GetTransactionName()\n   MessageBox(\"Transaction Name\", ls_transacname)\nSee also\nBeginTransaction (obsolete)\nCommitDocking\nGetContextService\nGetStatus (obsolete)\nInit (obsolete)\nResumeTransaction (obsolete)\nRollbackOnly (obsolete)\nRollbackTransaction (obsolete)\nSetTimeout (obsolete)\nSuspendTransaction (obsolete)\n2.4.357 GetURL\nDescription\nReturns HTML for the specified URL.\nApplies to\nInet objects (Obsolete)\nSyntax\nservicereference.GetURL ( urlname, data )\nTable 2.795:\nArgument\nDescription\nservicereference\nReference to the Internet service instance\nurlname\nString specifying the URL whose source data is returned in data\ndata\nInternetResult descendant containing an overridden InternetData function\nthat handles the HTML source for urlname\nReturn value\nInteger.\nReturns values as follows:\n"}
{"page": 868, "text": "Statements, Events, and Functions\nPage 868\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-4 -- Cannot connect to the Internet\nUsage\nCall this function to access HTML source for a URL.\nData references a standard class user object that descends from InternetResult and that has an\noverridden InternetData function. This overridden function then performs the processing you\nwant with the returned HTML. Because the Internet returns data asynchronously, data must\nreference a variable that remains in scope after the function executes (such as a window-level\ninstance variable).\nFor more information on the InternetResult standard class user object and the InternetData\nfunction, use the PowerBuilder Browser.\nTimeout value for retrieving HTML source\nThe GetURL function relies on wininet.dll to obtain the HTML source and returns\n-1 when the retrieval time exceeds the DLL timeout value. When you install Internet\nExplorer 7 or later, the default timeout value for this DLL is 30 seconds. Although it\nis possible to change the timeout value by configuring a DWORD ReceiveTimeOut\nregistry key under HKEY_CURRENT_USER\\ SOFTWARE\\Microsoft\\Windows\n\\CurrentVersion\\Internet Settings, this is not recommended, since it can also affect the\nbehavior of the Internet Explorer browser.\nExamples\nThis example calls the GetURL function. Iinet_base is an instance variable of type inet:\niir_msgbox = CREATE n_ir_msgbox\niinet_base.GetURL(sle_url.text, iir_msgbox)\nSee also\nHyperLinkToURL\nInternetData\nPostURL\n2.4.358 GetValue\nGets the value from a control.\nTable 2.796:\nTo obtain\nUse\nThe date and time in the Value property of the DatePicker control.\nSyntax 1\nThe value of the key of the JSONPackage object\nSyntax 2\n"}
{"page": 869, "text": "Statements, Events, and Functions\nPage 869\n2.4.358.1 Syntax 1: for DatePicker control\nDescription\nReturns the date and time in the Value property of the control.\nApplies to\nDatePicker control\nSyntax\ncontrolname.GetValue ( d, t )\ncontrolname.GetValue ( dt )\nTable 2.797:\nArgument\nDescription\ncontrolname\nThe name of the control for which you want to get the date and time\nd\nThe date value in the Value property returned by reference\nt\nThe time value in the Value property returned by reference\ndt\nThe DateTime value in the Value property returned by reference\nReturn value\nInteger.\nReturns 1 for success and one of the following negative values for failure:\n-1 -- Invalid date and/or time values\n-2 -- Other error\nUsage\nThe GetValue function can return the date and time parts of the Value property in separate\ndate and time variables or a single DateTime variable.\nExamples\nIn this example, the GetValue function is called twice, once to return separate date and time\nvalues and once to return a DateTime value. The values returned are written to a multiline\nedit control:\ndate d\ntime t\ndatetime dt\ninteger li_ret1, li_ret2\nli_ret1 = dp_1.GetValue(d, t)\nli_ret2 = dp_1.GetValue(dt)\nmle_1.text += string(d) + \" ~r~n\"\nmle_1.text += string(t) + \" ~r~n\"\nmle_1.text += string(dt) + \" ~r~n\"\nSee also\nGetText\n"}
{"page": 870, "text": "Statements, Events, and Functions\nPage 870\nSetValue\n2.4.358.2 Syntax 2: for JSONPackage object\nDescription\nGets the value of the key. The key item must be a string, object, or array.\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValue ( Key )\nTable 2.798:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key. If more than one key with the same name\nalready exists, the value of the first key will be obtained.\nReturn value\nString. Returns the key value if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis example gets data from the server and then imports the data to the DataWindow,\nDataStore and DataWindowChild controls:\nint li_rc\nstring ls_JsonPackage, ls_DepartmentJson, ls_EmployeeJson, ls_DeptJson\ndatastore lds_employee\ndatawindowchild ldwc_dept\nHttpClient lnv_HttpClient\nJsonPackage lnv_package\nlds_employee = create datastore\nlds_employee.dataobject = \"d_employee\"\ndw_employee.getchild(\"dept_id\", ldwc_dept)\nlnv_HttpClient = create HttpClient\nlnv_package = create JsonPackage\n// Request JSON data package from the server\nli_rc = lnv_HttpClient.SendRequest(\"GET\", \"https://demo.appeon.com/PB/\nwebapi_client/getjsonpackage/employee/102\")\n// Get the data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n lnv_HttpClient.GetResponseBody(ls_JsonPackage)\n \n"}
{"page": 871, "text": "Statements, Events, and Functions\nPage 871\n // Extract the JSON data package\n lnv_package.LoadString(ls_JsonPackage)\n ls_DepartmentJson = lnv_package.GetValue(\"d_department\")\n ls_EmployeeJson = lnv_package.GetValue(\"d_employee\")\n ls_DeptJson = lnv_package.GetValue(\"dddw_dept\")\n \n // Import data to DataWindow, DataStore and DataWindowChild\n dw_department.ImportJson(ls_DepartmentJson)\n lds_employee.ImportJson(ls_EmployeeJson)\n ldwc_dept.ImportJson(ls_DeptJson)\nend if\nSee also\nSetValue\n2.4.359 GetValueBlob\nDescription\nGets the blob value of the key.\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValueBlob ( Key )\nTable 2.799:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key of the item of JsonStringItem type. If more\nthan one key with the same name already exists, the value of the first key\nwill be obtained.\nReturn value\nBlob. Returns the key value if it succeeds. If any argument's value is null, the method returns\nnull. If an error occurs, throw the exception.\nExamples\nThis example obtains the picture path (a blob value) from the JSON string.\n// Blob GetValueBlob (string Key)\nString    ls_PicturePath\nJsonPackage    ljpk_User\nljpk_User = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_User.loadstring ( '{\"id\":100, \"name\":\"Henry.Ken\", \"birthday\":\"1998-01-01\",\n \"picturepath\":\"QTpcV29ya0RvY3VtZW50XFVwZ3JhZGVc5Zu+54mHXGF1dG9ydW4uQk1Q\" }')\n"}
{"page": 872, "text": "Statements, Events, and Functions\nPage 872\n// Gets the key value: A:\\WorkDocument\\Upgrade\\images\\autorun.BMP\nls_PicturePath = String(ljpk_User.GetValueBlob(\"picturepath\"),EncodingUTF8!)\nSee also\nSetValueBlob\nGetValueBoolean\nGetValueDate\nGetValueDateTime\nGetValueNumber\nGetValueString\nGetValueTime\nGetValueToDataWindow\n2.4.360 GetValueBoolean\nDescription\nGets the boolean value of the key.\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValueBoolean ( Key )\nTable 2.800:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key of the item of JsonBooleanItem type. If more\nthan one key with the same name already exists, the value of the first key\nwill be obtained.\nReturn value\nBoolean. Returns the key value if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis example gets the boolean value of the Status key from the JSON string.\n// Boolean GetValueBoolean ( string Key )\nBoolean    lbl_Status\nJsonPackage    ljpk_Dept\nljpk_Dept = Create JsonPackage\n"}
{"page": 873, "text": "Statements, Events, and Functions\nPage 873\n// Loads the JSON string to the JSONPackage object \nljpk_Dept.loadstring( '{\"dept_id\":100, \"dept_name\":\"R & D8\", \"Status\":true}')\n// Checks if the type of the key value is boolean\nIf ljpk_Dept.GetItemType(\"Status\") = JsonBooleanItem! Then\n lbl_Status = ljpk_Dept.GetValueBoolean( \"Status\" ) // Gets the key value\n If Not(lbl_Status) Then  // If the return value is not true\n     // Prints the error message\n End If\nEnd If\nSee also\nSetValueBoolean\nGetValueBlob\nGetValueDate\nGetValueDateTime\nGetValueNumber\nGetValueString\nGetValueTime\nGetValueToDataWindow\n2.4.361 GetValueDate\nDescription\nGets the date value of the key.\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValueDate ( Key )\nTable 2.801:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key of the item of JsonStringItem type. If more\nthan one key with the same name already exists, the value of the first key\nwill be obtained.\nReturn value\nDate. Returns the key value if it succeeds. If any argument's value is null, the method returns\nnull. If an error occurs, throw the exception.\n"}
{"page": 874, "text": "Statements, Events, and Functions\nPage 874\nExamples\nThis example obtains the value of the birthday key from the JSON string, and converts the\nvalue from a string to a date.\nThe developer is recommended to check if the type of the key value is date before executing\nGetValueDate. If it is not a valid date-type value or it is a datetime-type value, the program\nwill throw an exception.\n// Date GetValueDate ( string Key )\nDate    ld_Birthday\nJsonPackage    ljpk_User\nljpk_User = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_User.loadstring( '{\"id\":100,\"name\":\"Henry.Ken\",\"birthday\":\"1998-12-01\n \",\"CreateDate\":1543900359 }')\n// Gets the value of the birthday key\nld_Birthday = ljpk_User.GetValueDate(\"birthday\")\nSee also\nSetValueDate\nGetValueBlob\nGetValueBoolean\nGetValueDateTime\nGetValueNumber\nGetValueString\nGetValueTime\nGetValueToDataWindow\n2.4.362 GetValueDateTime\nDescription\nGets the datetime value of the key.\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValueDateTime ( Key )\nTable 2.802:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\n"}
{"page": 875, "text": "Statements, Events, and Functions\nPage 875\nArgument\nDescription\nKey\nA string specifying the key of the item of JsonStringItem or\nJsonNumberItem type. For the JsonStringItem type, formats such as\n\"yyyy-mm-dd hh:mm:ss\" are supported. If the item value is a number\n(UTC timestamp), the returned datetime value will be the local datetime\nconverted using the local timezone. If the item value is a string, the\nreturned datetime value will not be converted using a timezone.\nIf more than one key with the same name already exists, the value of the\nfirst key will be obtained.\nReturn value\nDateTime. Returns the key value if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis example obtains the datetime value of the birthday key from the JSON string.\nGetValueDateTime can also get the long-type value or the string-type value. The developer is\nrecommended to check if the type of a string-type value is datetime, otherwise, the program\nmay throw an exception.\n// DateTime GetValueDateTime (string Key)\nDateTime    ldt_CreateDate,ldt_Birthday\nJsonPackage    ljpk_User\nljpk_User = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_User.loadstring( '{\"id\":100,\"name\":\"Henry.Ken\",\"birthday\":\"1998-12-01\n 08:02:30\",\"CreateDate\":1543900359 }')\n// GetValueDateTime can also get a long value such as CreateDate\nldt_CreateDate = ljpk_User.GetValueDateTime(\"CreateDate\")\nldt_Birthday = ljpk_User.GetValueDateTime(\"birthday\")\nSee also\nSetValueDateTime\nGetValueBlob\nGetValueBoolean\nGetValueDate\nGetValueNumber\nGetValueString\nGetValueTime\nGetValueToDataWindow\n2.4.363 GetValueNumber\nDescription\nGets the number value of the key.\n"}
{"page": 876, "text": "Statements, Events, and Functions\nPage 876\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValueNumber ( Key )\nTable 2.803:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key of the item of JsonNumberItem type. If more\nthan one key with the same name already exists, the value of the first key\nwill be obtained.\nReturn value\nNumber. Returns the key value if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis example gets the value of the dept_id key in the JSON string.\n// Double GetValueNumber ( string Key )\nDouble    ldb_DeptID\nJsonPackage    ljp_Dept\nljp_Dept = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljp_Dept.loadstring( '{\"dept_id\":100,\"dept_name\":\"R & D8\",\"dept_head_id\":105}')\n// Gets the key value: ldb_DeptID = 100\nldb_DeptID = ljp_Dept.GetValueNumber( \"dept_id\" )\nSee also\nSetValueNumber\nGetValueBlob\nGetValueBoolean\nGetValueDate\nGetValueDateTime\nGetValueString\nGetValueTime\nGetValueToDataWindow\n2.4.364 GetValueString\nDescription\n"}
{"page": 877, "text": "Statements, Events, and Functions\nPage 877\nGets the string value of the key.\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValueString ( Key )\nTable 2.804:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key of the item of JsonStringItem type. If more\nthan one key with the same name already exists, the value of the first key\nwill be obtained.\nReturn value\nString. Returns the key value if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis example obtains the string value (\"R & D8\") of the dept_name key from the JSON\nstring.\n// String GetValueString ( string Key )\nString  ls_DeptName\nJsonPackage ljp_Dept\nljp_Dept = Create JsonPackage\n// Loads the JSON string to the JSONPackage object.\nljp_Dept.loadstring( '{\"dept_id\":100,\"dept_name\":\"R & D8\",\"dept_head_id\":105}')\n// Gets the key value: ls_DeptName = R & D8\nls_DeptName = ljp_Dept.GetValueString ( \"dept_name\" )\nSee also\nSetValueString\nGetValueBlob\nGetValueBoolean\nGetValueDate\nGetValueDateTime\nGetValueNumber\nGetValueTime\nGetValueToDataWindow\n"}
{"page": 878, "text": "Statements, Events, and Functions\nPage 878\n2.4.365 GetValueTime\nDescription\nGets the time value of the key.\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValueTime ( Key )\nTable 2.805:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key of the item of JsonStringItem type. If more\nthan one key with the same name already exists, the value of the first key\nwill be obtained.\nReturn value\nTime. Returns the key value if it succeeds. If any argument's value is null, the method returns\nnull. If an error occurs, throw the exception.\nExamples\nThis example obtains the time value of the starttime key from the JSON string.\n// Time GetValueTime ( string Key )\nTime    lt_Start\nJsonPackage    ljpk_User\nljpk_User = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_User.loadstring( '{\"id\":100,\"name\":\"Henry.Ken\",\"starttime\":\"08:02:30\",\"endtime\":1543900359 }\n// Gets the value of the starttime key: lt_Start = 08:02:30\nlt_Start = ljpk_User.GetValueTime(\"starttime\")\nSee also\nSetValueTime\nGetValueBlob\nGetValueBoolean\nGetValueDate\nGetValueDateTime\nGetValueNumber\nGetValueString\n"}
{"page": 879, "text": "Statements, Events, and Functions\nPage 879\nGetValueToDataWindow\n2.4.366 GetValueToDataWindow\nDescription\nGets the value of the key and inserts it into a DataWindow control, DataStore object, or\nDataWindowChild object.\nIf more than one key with the same name exists, then get the value of the first key. Notice\nthat the IgnoreCase property (true by default) determines whether the key name will be\nmatched in a case-sensitive manner.\nThis function will fail to import data properly, if the DataWindow is in query mode.\nApplies to\nJSONPackage\nSyntax\nobjectname.GetValueToDataWindow (string key, dwcontrol DWControl {, boolean\n resetflag} {, string error} {, DWBuffer dwbuffer {, long startrow {, long\n endrow } } } )\nTable 2.806:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key of the item of JsonStringItem type. The key\nvalue is the JSON-formatted data which is in the format described in\nSection 4.7.1, \u201cSupported JSON formats\u201d in Application Techniques.\nIf it is DataWindow JSON, GetValueToDataWindow will ignore the\nmapping-method element of the JSON data.\ndwcontrol\nA reference to a DataWindow control, DataStore, or DataWindowChild.\nresetflag\n(optional)\nA boolean value specifying whether dwcontrol should automatically reset\nthe update flag. The default is TRUE.\nerror (optional)\nA variable into which the returned warning or error message will be\nplaced.\nWhen there are a large amount of error messages, the error information\nwill only display the total number of errors, and the detailed message of\nthe first 10 errors.\nThe import warning caused by data type mismatch will not affect the\nreturn value of ImportJsonByKey; although the data of the mismatched\ncolumns will not be imported, the rest columns (even only one column)\nthat are matched will be imported successfully; and that row will be\nregarded as a successful import and counted into the return value.\nThe import error caused by DW presentation style mismatch, invalid\narguments, startrow value greater than the number of rows,etc. will\nbe regarded as a failure, and represented by a negative return value of\nGetValueToDataWindow, instead of being placed into this variable. See\nthe Return Value section for more.\n"}
{"page": 880, "text": "Statements, Events, and Functions\nPage 880\nArgument\nDescription\nMost of the messages placed into this variable are warnings (such as data\ntype mismatch) rather than errors. Developers can adjust the JSON data\naccording to the message or simply ignore the message if the problematic\ncolumn is not critical and the corresponding DataWindow column can be\nleft blank.\ndwbuffer\n(optional)\nA value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to import the data. For a list of\nvalid values, see Section 6.9, \u201cDWBuffer\u201d in DataWindow Reference.\nFor plain JSON: If not specified, imports the JSON data to the Primary!\nbuffer. If specified, imports the JSON data to the specified buffer.\nFor DataWindow JSON: If not specified, imports data of all of the\nbuffers from the JSON string to the corresponding buffers and, if any,\nimports the data for DataWindowChild. If specified, imports data of the\nspecified buffer from the JSON string to the corresponding buffer.\nstartrow\n(optional)\nThe number of the first detail object in the JSON Array that you want to\nimport. The default is 1. If it is 0 or negative, 1 is used.\nendrow\n(optional)\nThe number of the last detail object in the JSON Array that you want\nto import. The default is the rest of the objects. If it is 0 or negative, it\nindicates the rest of rows.\nReturn value\nLong. Returns the number of rows that were imported if it succeeds and one of the following\nnegative integers if an error occurs. The return value will count the rows imported into the\nprimary, filter, and delete buffers, but not the rows imported into DataWindowChild.\n0 -- When all of the data in the JSON string is null, or the JSON string only contains data for\nDataWindowChild, or no JSON key matches with the DataWindow column.\n-1 -- General error.\n-2 -- No row is supplied or the startrow value supplied is greater than the number of rows in\nthe JSON data.\n-3 -- Invalid argument.\n-4 -- Invalid JSON.\n-5 -- JSON format error.\n-6 -- Unsupported DataWindow presentation style for import.\n-7 -- Error resolving DataWindow nesting.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\nUsage\n"}
{"page": 881, "text": "Statements, Events, and Functions\nPage 881\nThere is no forced conversion between strings and numbers. For example, the number 123\nin JSON string will not be imported into the DataWindow column of char(10) type. For such\ncase, a data type mismatch warning will be recorded in the error argument.\nA boolean value (true or false) will be converted to 0 or 1 when imported from the JSON\nstring to the DataWindow; however, 0 or 1 will not be converted to a boolean value (true or\nfalse) when exported from the DataWindow to the JSON string.\nIf the string length in JSON is larger than the string length in DataWindow, the string\nwill be truncated when imported into the DataWindow. For example, JSON string\n[{\"name\":\"TestForTrancate\"}] is imported as \"Test\" when the data type of DataWindow\ncolumn \"name\" is char(4).\nWhen the number value is imported from the JSON string to the DataWindow column of\nnumber data type (with uncertain precision), the value will have uncertain decimals, for\nexample, 6.78 becomes 6.78000020980835 after imported from the JSON string to the\nDataWindow.\nExample 1\nThis example obtains the key value from the JSON string and sets the value to DataWindow.\n// long GetValueToDataWindow ( string key, dwcontrol DWControl )\nInteger    li_Return\nJsonPackage    ljpk_Dept\nljpk_Dept = Create JsonPackage\n// The DataWindow column name and type must match with that in the JSON string\ndw_Dept.DataObject = \"d_example_dept\"  \n// Loads the DataWindow JSON string to the JsonPackage object\nljpk_Dept.LoadString('{\"name\":\"Powerbuilder\", \"dept\":\n{\"identity\":\"70c86603-983b-4bd9-adbc-259436e43cbd\", \"version\":1,\n \"platform\":\"PowerBuilder\", \"mapping-method\":0, \"dataobject\":\n{\"name\":\"d_example_dept\", \"meta-columns\":[{\"name\":\"dept_id\", \"index\":0,\n \"datatype\":\"long\", \"nullable\":1}, {\"name\":\"dept_name\", \"index\":1,\n \"datatype\":\"string\", \"nullable\":1}, {\"name\":\"dept_head_id\", \"index\":2,\n \"datatype\":\"long\", \"nullable\":1}], \"primary-rows\":[{\"row-status\":0, \"columns\":\n{\"dept_id\":[100], \"dept_name\":[\"R & D8\"], \"dept_head_id\":[105]}}, {\"row-status\":0,\n \"columns\":{\"dept_id\":[200], \"dept_name\":[\"Sales\"], \"dept_head_id\":[129]}}, {\"row-\nstatus\":0, \"columns\":{\"dept_id\":[300], \"dept_name\":[\"Finance\"], \"dept_head_id\":\n[102]}}, {\"row-status\":0, \"columns\":{\"dept_id\":[400], \"dept_name\":[\"Marketing\"],\n \"dept_head_id\":[1576]}}, {\"row-status\":0, \"columns\":{\"dept_id\":[500], \"dept_name\":\n[\"Shipping\"], \"dept_head_id\":[703]}}, {\"row-status\":0, \"columns\":{\"dept_id\":[999],\n \"dept_name\":[\"test4\"], \"dept_head_id\":[null]}}]}}}')\n// Loads the data from the JSON string to DataWindow\nli_Return = ljpk_Dept.GetValueToDatawindow (\"dept\", dw_Dept)\nIf li_Return <= 0 Then\n  // Prints the error message\nEnd If\n// Loads the plain JSON string to the JsonPackage object\nljpk_Dept.LoadString('{\"dept2\":[{\"dept_id\":100, \"dept_name\":\"R & D8\",\n \"dept_head_id\":105}, {\"dept_id\":200, \"dept_name\":\"Sales\", \"dept_head_id\":129},\n {\"dept_id\":300, \"dept_name\":\"Finance\", \"dept_head_id\":102}, {\"dept_id\":400,\n \"dept_name\":\"Marketing\", \"dept_head_id\":1576}, {\"dept_id\":500,\n \"dept_name\":\"Shipping\", \"dept_head_id\":703}]}')\n// Loads the data from the JSON string to DataWindow\nli_Return = ljpk_Dept.GetValueToDatawindow (\"dept2\", dw_Dept)\nIf li_Return <= 0 Then\n  // Prints the error message\nEnd If\n"}
{"page": 882, "text": "Statements, Events, and Functions\nPage 882\nExample 2\nThis example obtains the data in rows 2 through 4 from the JSON string and sets the data to\nDataWindow.\n// long GetValueToDataWindow ( string key, dwcontrol DWControl, boolean resetflag,\n DWBuffer dwbuffer, long startrow, long endrow )\nInteger    li_Return \nJsonPackage    ljpk_Dept\nljpk_Dept = Create JsonPackage\n// The DataWindow column name and type must match with that in the JSON string\ndw_Dept.DataObject = \"d_example_dept\"\nljpk_Dept.LoadString('{\"dept\":[{\"dept_id\":100, \"dept_name\":\"R & D8\",\n \"dept_head_id\":105}, {\"dept_id\":200, \"dept_name\":\"Sales\", \"dept_head_id\":129},\n {\"dept_id\":300, \"dept_name\":\"Finance\", \"dept_head_id\":102}, {\"dept_id\":400,\n \"dept_name\":\"Marketing\", \"dept_head_id\":1576}, {\"dept_id\":500,\n \"dept_name\":\"Shipping\", \"dept_head_id\":703}]}')\n// Loads the data from the JSON string to DataWindow: startrow:2, endrow:4.\n// GetValueToDataWindow returns 3, indicating 3 rows have been imported.\nli_Return = ljpk_Dept.GetValueToDataWindow(\"dept\", dw_Dept, False, Filter!, 2, 4 )\ndw_Dept.SetFilter(\"\") // Displays the data imported to the Filter buffer\ndw_Dept.Filter()\nExample 3\nThis example obtains the key value from the JSON string and imports the value to the\nspecified DataWindow buffer.\n// long GetValueToDataWindow ( string key, dwcontrol DWControl, string error,\n DWBuffer dwbuffer )\nInteger    li_Return \nString    ls_Error\nJsonPackage    ljpk_Dept\nljpk_Dept = Create JsonPackage\n// The DataWindow column name and type must match with that in the JSON string\ndw_Dept.DataObject = \"d_example_dept\"\nljpk_Dept.LoadString('{\"dept1\":\n[{\"dept_id\":500,\"dept_name\":\"Shipping\",\"dept_head_id\":703}],\"dept2\":\n[{\"dept_id\":\"100\",\"dept_name\":\"R & D8\",\"dept_head_id\":\"test\"}]}') // 105\n// Loads the data of dept1 from the JSON string to DataWindow\nli_Return = ljpk_Dept.GetValueToDataWindow(\"dept1\", dw_Dept, ls_Error, Primary! )\n// Prints ls_error. It is an empty string.\n// Loads the data of dept2 from the JSON string. \n// The value type in the JSON string does not match with that in the DataWindow.\n Error is saved to ls_Error.\nli_Return = ljpk_Dept.GetValueToDataWindow(\"dept2\", dw_Dept, ls_Error, Primary! )\n// Prints ls_Error.\n// Total errors: 2 \n// Row 1, node \"dept_id\" in the JSON object has a different data type from column 1\n in the Primary buffer. \n// Row 1, node \"dept_head_id\" in the JSON object has a different data type from\n column 3 in the Primary buffer.\nSee also\nSetValueByDataWindow\nGetValueBlob\n"}
{"page": 883, "text": "Statements, Events, and Functions\nPage 883\nGetValueBoolean\nGetValueDate\nGetValueDateTime\nGetValueNumber\nGetValueString\nGetValueTime\n2.4.367 GetVersionName\nDescription\nGets complete version information for the current PowerBuilder execution context. A\ncomplete version includes a major version, a minor version, and a fix level (such as 8.0.3).\nApplies to\nContextInformation objects\nSyntax\nservicereference.GetVersionName ( name )\nTable 2.807:\nArgument\nDescription\nservicereference\nReference to the ContextInformation service instance.\nname\nString into which the function places the version name. This argument is\npassed by reference.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to determine the maintenance level of the current context.\nExamples\nThis example calls the GetVersionName function. ci is an instance variable of type\nContextInformation:\nString ls_name\nString ls_version\nConstant String ls_currver = \"8.0.3\"\n \nGetContextService(\"ContextInformation\", ci)\nci.GetVersionName(ls_version)\nIF ls_version <> ls_currver THEN\n   MessageBox(\"Error\", &\n      \"Must be at Version \" + ls_currver)\nEND IF\n"}
{"page": 884, "text": "Statements, Events, and Functions\nPage 884\nSee also\nGetCompanyName\nGetFixesVersion\nGetHostObject\nGetMajorVersion\nGetMinorVersion\nGetName\nGetShortName\n2.4.368 GoBack\nDescription\nGoes back from the current page to the last page.\nThis function is effective only when the canGoBack parameter of the\nNavigationStateChanged event is TRUE.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.GoBack ( )\nTable 2.808:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nExamples\nInteger li_rtn\nli_rtn = wb_1.goback()\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoForward\n"}
{"page": 885, "text": "Statements, Events, and Functions\nPage 885\nNavigate\nPrintAsPDF\nPauseDownload\nRegisterEvent\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.369 GoForward\nDescription\nJumps from the current page to the next page.\nThis function is effective only when the canGoForward parameter of the\nNavigationStateChanged event is TRUE.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.GoForward ( )\nTable 2.809:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nExamples\nInteger li_rtn\nli_rtn = wb_1.GoForward()\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\n"}
{"page": 886, "text": "Statements, Events, and Functions\nPage 886\nNavigate\nPrintAsPDF\nPauseDownload\nRegisterEvent\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.370 Handle\nDescription\nObtains the Windows handle of a PowerBuilder object. You can get the handle of the\napplication, a window, or a control, but not a drawing object.\nSyntax\nHandle ( objectname {, previous } )\nTable 2.810:\nArgument\nDescription\nobjectname\nThe name of the PowerBuilder object for which you want the handle.\nObjectname can be any PowerBuilder object, including an application or\ncontrol, but cannot be a drawing object.\nprevious\n(optional)\n(Obsolete argument) A boolean indicating whether you want the handle\nof the previous instance of an application. You can use this argument\nwith the Application object only.\nIn current versions of Windows, Handle always returns 0 when this\nargument is set to true.\nReturn value\nLongptr. Long if the application is compiled as 32-bit, and longlong if compiled as 64-bit.\nReturns the handle of objectname. If objectname is an application and previous is true,\nHandle always returns 0.\nIf objectname cannot be referenced at runtime, Handle returns 0 (for example, if objectname\nis a window and is not open).\nUsage\nUse Handle when you need an object handle as an argument to Windows Software\nDevelopment Kit (SDK) functions or the PowerBuilder Send function.\nUse IsValid instead of the Handle function to determine whether a window is open.\n"}
{"page": 887, "text": "Statements, Events, and Functions\nPage 887\nWhen you ask for the handle of the application, Handle returns 0 when you are using the\nPowerBuilder Run command. As far as Windows is concerned, your application does not\nhave a handle when it is run from PowerBuilder. When you build and run an executable\nversion of your application, the Handle function returns a valid handle for the application.\nIf you ask for the handle of a previous instance of an application by setting the previous\nflag to true, Handle always returns 0 in current versions of Windows. Use the Windows\nFindWindow function to determine whether an instance of the application's main window is\nalready open.\nExamples\nThis statement returns the handle to the window w_child:\nHandle(w_child)\nThese statements use an external function called FlashWindow to change the title bar of a\nwindow to inactive and then return it to active. The external function declaration is:\nfunction boolean flashwindow(uint hnd, boolean inst) &    library \"user.exe\"\nThe code that flashes the window's title bar is:\ninteger nLoop       // Loop counter\nlong hWnd       // Handle to control\n// Get the handle to a PowerBuilder window.\nhWnd = Handle(Parent)\n// Make the title bar flash 300 times.\nFOR nLoop = 1 to 300\n   FlashWindow (hWnd, true)\nNEXT\n// Return the window to its original state.\nFlashWindow (hWnd, FALSE)\nFor applications, the Handle function does not return a useful value when the previous flag\nis true. You can use the FindWindow Windows function to determine whether a Windows\napplication is already running. FindWindow returns the handle of a window with a given\ntitle.\nDeclare FindWindow and SetForegroundWindow as global external functions:\nPUBLIC FUNCTION unsignedlong FindWindow (long  &\n   classname, string windowname) LIBRARY \"user32.dll\" &\n   ALIAS FOR FindWindowW\nPUBLIC FUNCTION int SetForegroundWindow (unsignedlong &\n   hwnd) LIBRARY \"user32.dll\" ALIAS FOR  &\n   SetForegroundWindowW\nThen add code like the following to your application's Open event:\nunsignedlong hwnd\nhwnd = FindWindow( 0, \"Main Window\")\nif hwnd = 0 then\n   // no previous instance, so open the main window\n   open( w_main )\nelse\n   // open the previous instance window and halt\n   SetForegroundWindow( hwnd )\n   HALT CLOSE\n"}
{"page": 888, "text": "Statements, Events, and Functions\nPage 888\nend if\nSee also\nSend\n2.4.371 HexDecode\nDescription\nDecodes a string value using Hex decoder.\nApplies to\nCoderObject object\nSyntax\ncoder.HexDecode ( variable )\nTable 2.811:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA string whose value is the data you want to decode with Hex decoder.\nReturn value\nBlob. Returns the result of the decoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement decodes the data that is encoded using Hex.\nBlob lblb_data\nString ls_HexStr\nCoderObject lnv_CoderObject\nlnv_CoderObject = Create CoderObject\n// ls_HexStr = lnv_CoderObject.HexEncode(Blob(\"Test Hex\", EncodingANSI!))\nls_HexStr = \"5465737420486578\"\nlblb_data = lnv_CoderObject.HexDecode(ls_HexStr)\nmessagebox(\"HexDecode\", string(lblb_data, EncodingANSI!))\nSee also\nHexEncode\nBase32Decode\nBase32Encode\nBase64Decode\nBase64Encode\nBase64UrlDecode\n"}
{"page": 889, "text": "Statements, Events, and Functions\nPage 889\nBase64UrlEncode\nUrlEncode\nUrlDecode\n2.4.372 HexEncode\nDescription\nEncodes a blob value using Hex encoder.\nApplies to\nCoderObject object\nSyntax\ncoder.HexEncode ( variable )\nTable 2.812:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA blob whose value is the data you want to encode with Hex encoder.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nReturn value\nString. Returns the result of the encoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement encodes the data using Hex and returns the encoded data.\nBlob lblb_data\nString ls_HexStr\nlblb_data = Blob(\"Test Hex\", EncodingANSI!)\nCoderObject lnv_CoderObject\nlnv_CoderObject = Create CoderObject\nls_HexStr = lnv_CoderObject.HexEncode(lblb_data)\nSee also\nHexDecode\nBase32Decode\nBase32Encode\nBase64Decode\n"}
{"page": 890, "text": "Statements, Events, and Functions\nPage 890\nBase64Encode\nBase64UrlDecode\nBase64UrlEncode\nUrlEncode\nUrlDecode\n2.4.373 Hide\nDescription\nMakes an object or control invisible. Users cannot interact with an invisible object. It does\nnot respond to any events, so the object is also, in effect, disabled.\nApplies to\nAny object\nSyntax\nobjectname.Hide ( )\nTable 2.813:\nArgument\nDescription\nobjectname\nThe name of the object or control you want to make invisible\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If objectname is null, Hide returns null.\nUsage\nIf the object you want to hide is already invisible, then Hide has no effect.\nYou cannot use Hide to hide a drop-down or cascading menu or any menu that has an MDI\nframe window as its parent window. Nor can you hide a window that has been opened as an\nMDI sheet.\nYou can use the Disable function to disable menu items, which displays them in the disabled\ncolor and makes them inactive.\nTo disable an object so that it does not respond to events, but is still visible, set its Enabled\nproperty.\nYou can set an object's Visible property instead of calling Hide:\nobjectname.Visible = false\nThis statement:\nlb_Options.Visible = FALSE\nis equivalent to:\n"}
{"page": 891, "text": "Statements, Events, and Functions\nPage 891\nlb_Options.Hide()\nExamples\nThis statement hides the ListBox lb_options:\nlb_options.Hide()\nIn the script for a menu item, this statement hides the CommandButton cb_delete on the\nactive sheet in the MDI frame w_mdi. The active sheets are of type w_sheet:\nw_sheet w_active\nw_active = w_mdi.GetActiveSheet()\nIF IsValid(w_active) THEN w_active.cb_delete.Hide()\nSee also\nShow\n2.4.374 HMAC\nDescription\nCalculates the HMAC value of a blob.\nApplies to\nCrypterObject object\nSyntax\ncrypter.HMAC ( algorithm, variable, key)\nTable 2.814:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object.\nalgorithm\nA value of the HMACAlgorithm enumerated type that specifies the type\nof HMAC algorithm.\nValues are:\n\u2022 HMACMD5! \u2013 HMAC-MD5\n\u2022 HMACSHA1! \u2013 HMAC-SHA1\n\u2022 HMACSHA224! \u2013 HMAC-SHA224\n\u2022 HMACSHA256! \u2013 HMAC-SHA256\n\u2022 HMACSHA384! \u2013 HMAC-SHA384\n\u2022 HMACSHA512! \u2013 HMAC-SHA512\nvariable\nA blob whose value is the data you want to process with HMAC.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n"}
{"page": 892, "text": "Statements, Events, and Functions\nPage 892\nArgument\nDescription\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nkey\nA blob specifying the secret key.\nReturn value\nBlob. Returns the result of the HMAC if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement encrypts the data using HMACMD5.\nBlob lblb_data\nBlob lblb_key\nBlob lblb_hmac\nString ls_data\nlblb_data = Blob(\"Test HMAC\", EncodingANSI!)\nlblb_key = Blob(\"Test HMAC Key\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n// Encrypt with HMAC\nlblb_hmac= lnv_CrypterObject.HMAC(HMACMD5!, lblb_data, lblb_key)\nCoderobject lnv_code\nLnv_code = create coderobject\n//Encode the HMAC blob data to be hex data and output as a string\nLs_data = lnv_code.hexencode(lblb_hmac)\nSee also\nSymmetricEncrypt\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricSign\nAsymmetricVerifySign\nAsymmetricGenerateKey\nMD5\nSHA\n2.4.375 Hour\nDescription\nObtains the hour in a time value. The hour is based on a 24-hour clock.\n"}
{"page": 893, "text": "Statements, Events, and Functions\nPage 893\nSyntax\nHour ( time )\nTable 2.815:\nArgument\nDescription\ntime\nThe time from which you want to obtain the hour\nReturn value\nInteger.\nReturns an integer (00 to 23) whose value is the hour portion of time. If time is null, Hour\nreturns null.\nExamples\nThis statement returns the current hour:\nHour(Now())\nThis statement returns 19:\nHour(19:01:31)\nSee also\nMinute\nNow\nSecond\nHour method for DataWindows in Section 2.4.48, \u201cHour\u201d in DataWindow Reference.\n2.4.376 HyperLinkToURL\nDescription\nOpens the default Web browser, displaying the specified URL.\nApplies to\nInet objects (Obsolete)\nSyntax\nservicereference.HyperlinkToURL ( url )\nTable 2.816:\nArgument\nDescription\nservicereference\nReference to the Internet service instance\nurl\nString specifying the URL to open in the default Web browser\nReturn value\n"}
{"page": 894, "text": "Statements, Events, and Functions\nPage 894\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to display a URL from a PowerBuilder application.\nExamples\nThis example calls the HyperlinkToURL function. Iinet_base is an instance variable of type\ninet:\nGetContextService(\"Internet\", iinet_base)\niinet_base.HyperlinkToURL(sle_url.text)\nSee also\nGetURL\nPostURL\n2.4.377 Idle\nDescription\nSets a timer so that PowerBuilder triggers an Application Idle event when there has been no\nuser activity for a specified number of seconds.\nSyntax\nIdle ( n )\nTable 2.817:\nArgument\nDescription\nn\nThe number of seconds of user inactivity allowed before PowerBuilder\ntriggers an Application Idle event. A value of 0 terminates Idle detection.\nReturn value\nInteger.\nReturns 1 if it starts the timer, and -1 if it cannot start the timer or n is 0 and the timer has not\nbeen started. Note that when the timer has been started and you change n, Idle does not start\na new timer; it resets the current timer interval to the new number of seconds. If n is null, Idle\nreturns null. The return value is usually not used.\nUsage\nUse Idle to shut off or restart an application when there is no user activity. This is often done\nfor security reasons.\nIdle starts a timer after each user activity (such as a keystroke or a mouse click), and after n\nseconds of inactivity it triggers an Idle event. The Idle event script for an application typically\ncloses some windows, logs off the database, and exits the application or calls the Restart\nfunction.\n"}
{"page": 895, "text": "Statements, Events, and Functions\nPage 895\nThe timer is reset when any of the following activities occur:\n\u2022 A mouse movement or mouse click in any window of the application\n\u2022 Any keyboard activity when a window of the PowerBuilder application is current\n\u2022 A mouse click or any mouse movement over the icon when a PowerBuilder application is\nminimized\n\u2022 Any keyboard activity when the PowerBuilder application is minimized and is current (its\nname is highlighted)\n\u2022 Any retrieval on a visible DataWindow that causes the edit control to be painted\nTip\nTo capture movement, write script in the MouseMove or Key events of the window\nor sheet. (Keyboard activity does not trigger MouseMove events.) Disable the\nDataWindow control and tab ordering during iterative retrieves so the Idle timer is not\nreset.\nExamples\nThis statement sends an Idle event after five minutes of inactivity:\nIdle(300)\nThis statement turns off idle detection:\nIdle(0)\nThis example shows how to use the Idle event to stop the application and restart it after two\nminutes of inactivity. This is often used for computers that provide information in a public\nplace.\nInclude this statement in the script for the application's Open event:\nIdle(120) // Sends an Idle event after 2 minutes.\nInclude these statements in the script for the application's Idle event to terminate the\napplication and then restart it:\n// Statements to set the database to the desired\n// state\n...\nRestart() // Restarts the application\nSee also\nRestart\nTimer\n2.4.378 ImpersonateClient\nDescription\n"}
{"page": 896, "text": "Statements, Events, and Functions\nPage 896\nAllows a COM object running on COM+ to take on the security attributes of the client for the\nduration of a call.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.ImpersonateClient (  )\nTable 2.818:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nImpersonateClient allows a COM object to run in the client's security context for the duration\nof a call. Running in the client's security context gives the server process access to the same\nresources as the client. This can either restrict or expand the server's access to resources.\nFor example, if the client does not have update rights to a database but the server does,\nimpersonating the client before accessing the database prevents the client from updating the\ndatabase.\nAfter completing the processing that requires the client's security context, call RevertToSelf\nto revert to the server's security context.\nExamples\nThis example creates an instance of the transaction server context object and impersonates\nthe client to perform some processing:\nTransactionServer txninfo_test\ninteger li_rc\nli_rc = GetContextService( \"TransactionServer\",  &\n     txninfo_test )\n// Handle error if necessary\n \n// Impersonate the client\ntxninfo_test.ImpersonateClient()\n// Perform processing with client security context\n...\n// Revert to server's security context\ntxninfo_test.RevertToSelf()\nSee also\nIsCallerInRole\nIsImpersonating\nIsSecurityEnabled\n"}
{"page": 897, "text": "Statements, Events, and Functions\nPage 897\nRevertToSelf\n2.4.379 ImportClipboard\nDescription\nInserts data into a DataWindow control, DataStore object, or graph control from tab-\nseparated, comma-separated, or XML data on the clipboard.\nFor DataWindow and DataStore syntax, see the ImportClipboard method for DataWindows\nin Section 9.95, \u201cImportClipboard\u201d in DataWindow Reference.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects, because their data comes directly from the DataWindow.\nSyntax\ngraphname.ImportClipboard ( { importtype} {, startrow {, endrow {,\n startcolumn } } } )\nTable 2.819:\nArgument\nDescription\nimporttype\n(optional)\nAn enumerated value of the SaveAsType DataWindow constant. Valid\ntype arguments for ImportClipboard are:\nText!\nCSV!\nXML!\nIf you want to generate an XML trace file, the XML! argument is\nrequired.\ngraphname\nThe name of the graph control to which you want to copy data from the\nclipboard.\nstartrow\n(optional)\nThe number of the first detail row in the clipboard that you want to copy.\nThe default is 1.\nFor default XML import, if startrow is supplied, the first N (startrow -1)\nelements are skipped, where N is the DataWindow row size.\nFor template XML import, if startrow is supplied, the first (startrow -1)\noccurrences of the repetitive row mapping defined in the template are\nskipped.\nendrow\n(optional)\nThe number of the last detail row in the clipboard that you want to copy.\nThe default is the rest of the rows.\nFor default XML import, if endrow is supplied, import stops when N *\nendrow elements have been imported, where N is the DataWindow row\nsize.\nFor template XML import, if endrow is supplied, import stops after\nendrow occurrences of the repetitive row mapping defined in the template\nhave been imported.\n"}
{"page": 898, "text": "Statements, Events, and Functions\nPage 898\nArgument\nDescription\nstartcolumn\n(optional)\nThe number of the first column in the clipboard that you want to copy.\nThe default is 1.\nFor default XML import, if startcolumn is supplied, import skips the first\n(startcolumn - 1) elements in each row.\nThis argument has no effect on template XML import.\nReturn value\nReturns the number of rows that were imported if it succeeds and one of the following\nnegative integers if an error occurs:\n-1 -- No rows or startrow value supplied is greater than the number of rows in the string\n-2 -- Input data does not match number of columns or required column type\n-3 -- Invalid argument\n-4 -- Invalid input\n-11 -- XML Parsing Error; XML parser libraries not found, or XML not well formed\n-12 -- XML Template does not exist or does not match the DataWindow\nIf any argument's value is null, ImportClipboard returns null. If the optional importtype\nargument is specified and is not a valid type, ImportClipboard returns -3.\nUsage\nThe clipboard data must be formatted in tab-separated or comma-separated columns or in\nXML. The datatypes and order of the DataWindow object's columns must match the data on\nthe clipboard.\nFor graphs, ImportClipboard uses only three columns and ignores other columns. Each row\nof data must contain three pieces of information. The information depends on the type of\ngraph:\n\u2022 For all graph types except scatter, the first column to be imported is the series name, the\nsecond column contains the category, and the third column contains the data.\n\u2022 For scatter graphs, the first column to be imported is the series name, the second column is\nthe data's x value, and the third column is the y value.\nIf a series or category already exists in the graph, the data is assigned to it. Otherwise, the\nseries and categories are added to the graph.\nYou can add data to more than one series by specifying different series names in the first\ncolumn.\nExamples\nIf the clipboard contains the data shown below and the graph does not have any data yet, then\nthe next statement produces a graph with two series and three categories. The clipboard data\nis:\nSales 94Jan3000\n"}
{"page": 899, "text": "Statements, Events, and Functions\nPage 899\nSales 94Mar2200\nSales 94May2500\nSales 95Jan4000\nSales 95Mar3200\nSales 95May3500\nThis statement copies all the data in the clipboard, as shown above, to gr_employee:\ngr_employee.ImportClipboard()\nThis statement copies the data from the clipboard starting with row 2 column 3 and copying\nto row 30 column 5 to the graph gr_employee:\ngr_employee.ImportClipboard(2, 30, 3)\nSee also\nImportFile\nImportString\n2.4.380 ImportFile\n2.4.380.1 Syntax 1: for Graph controls\nDescription\nInserts data into a DataWindow control, DataStore object, or graph control from data in a file.\nThe data can be tab-separated text, comma-separated text, XML, or dBase format 2 or 3. The\nformat of the file depends on whether the target is a DataWindow (or DataStore) or a graph\nand on the type of graph.\nFor DataWindow and DataStore syntax, see the ImportFile method for DataWindows in\nSection 9.96, \u201cImportFile\u201d in DataWindow Reference.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects, because their data comes directly from the DataWindow.\nSyntax\ngraphname.ImportFile (  { importtype}, filename {, startrow {, endrow {,\n startcolumn } } } )\nTable 2.820:\nArgument\nDescription\ngraphname\nThe name of the graph control to which you want to copy data from the\nspecified file.\nimporttype\n(optional)\nAn enumerated value of the SaveAsType DataWindow constant. If this\nargument is specified, the importtype argument can be specified without\nan extension. Valid type arguments for ImportFile are:\nText!\nCSV!\nXML!\n"}
{"page": 900, "text": "Statements, Events, and Functions\nPage 900\nArgument\nDescription\nDBase2!\nDBase3!\nfilename\nA string whose value is the name of the file from which you want to\ncopy data. The file must be an ASCII, tab-separated file (TXT), comma-\nseparated file (CSV), Extensible ), or dBase format 2 or 3 file (DBF).\nSpecify the file's full name. If the optional importtype is not specified, the\nname must end in the appropriate extension.\nIf filename is an empty string or if it is null, ImportFile displays the\nFile Open dialog box and allows the user to select a file. The remaining\narguments are ignored.\nstartrow\n(optional)\nThe number of the first detail row in the file that you want to copy. The\ndefault is 1.\nFor default XML import, if startrow is supplied, the first N (startrow -1)\nelements are skipped, where N is the DataWindow row size.\nFor template XML import, if startrow is supplied, the first (startrow -1)\noccurrences of the repetitive row mapping defined in the template are\nskipped.\nendrow\n(optional)\nThe number of the last detail row in the file that you want to copy. The\ndefault is the rest of the rows.\nFor default XML import, if endrow is supplied, import stops when N *\nendrow elements have been imported, where N is the DataWindow row\nsize.\nFor template XML import, if endrow is supplied, import stops after\nendrow occurrences of the repetitive row mapping defined in the template\nhave been imported.\nstartcolumn\n(optional)\nThe number of the first column in the file that you want to copy. The\ndefault is 1.\nFor default XML import, if startcolumn is supplied, import skips the first\n(startcolumn - 1) elements in each row.\nThis argument has no effect on template XML import.\nReturn value\nLong. Returns the number of rows that were imported if it succeeds and one of the following\nnegative integers if an error occurs:\n-1 -- No rows or startrow value supplied is greater than the number of rows in the file\n-2 -- Empty file or input data does not match number of columns or required column type\n-3 -- Invalid argument\n-4 -- Invalid input\n-5 -- Could not open the file\n-6 -- Could not close the file\n"}
{"page": 901, "text": "Statements, Events, and Functions\nPage 901\n-7 -- Error reading the text\n-8 -- Unsupported file name suffix (must be *.txt, *.csv, *.dbf or *.xml)\n-10 -- Unsupported dBase file format (not version 2 or 3)\n-11 -- XML Parsing Error; XML parser libraries not found or XML not well formed\n-12 -- XML Template does not exist or does not match the DataWindow\n-15 -- File size exceeds limit\nIf any argument's value is null, ImportFile returns null. If the optional importtype argument is\nspecified and is not a valid type, ImportFile returns -3.\nUsage\nThe format of the file can be indicated by specifying the optional importtype parameter, or by\nincluding the appropriate file extension.\nFor graph controls, ImportFile only uses three columns and ignores other columns. Each row\nof data must contain three pieces of information. The information depends on the type of\ngraph:\n\u2022 For all graph types except scatter, the first column to be imported is the series name, the\nsecond column contains the category, and the third column contains the data.\n\u2022 For scatter graphs, the first column to be imported is the series name, the second column is\nthe data's x value, and the third column is the y value.\nYou can add data to more than one series by specifying different series names in the first\ncolumn. To let users select the file to import, specify a null string for filename. PowerBuilder\ndisplays the Select Import File dialog box.\nDouble quotes\nThe location and number of double quote marks in a field in a tab delimited file affect how\nthey are handled when the file is imported. If a string is enclosed in one pair of double quotes,\nthe quotes are discarded. If it is enclosed in three pairs of double quotes, one pair is retained\nwhen the string is imported. If the string is enclosed in two pairs of double quotes, the first\npair is considered to enclose a null string, and the rest of the string is discarded.\nWhen there is a double quote at the beginning of a string, any characters after the second\ndouble quote are discarded. If there is no second double quote, the tab character delimiting\nthe fields is not recognized as a field separator and all characters up to the next occurrence\nof a double quote, including a carriage return, are considered to be part of the string. A\nvalidation error is generated if the combined strings exceed the length of the first string.\nDouble quotes after the first character in the string are rendered literally. Here are some\nexamples of how tab-delimited strings are imported into a two-column DataWindow:\nTable 2.821:\nText in file\nResult\n\"Joe\" TAB\n\"Donaldson\"\nJoe Donaldson\n"}
{"page": 902, "text": "Statements, Events, and Functions\nPage 902\nText in file\nResult\nBernice TAB\n\"\"\"Ramakrishnan\"\"\"\nBernice \"Ramakrishnan\"\n\"\"Mary\"\" TAB \"\"Li\"\"\nEmpty cells\n\"Mich\"ael TAB\n\"\"\"Lopes\"\"\"\nMich \"Lopes\"\n\"Amy TAB Doherty\"\nAmy<TAB>Doherty in first cell, second cell empty\n3\"\"\" TAB 4\"\n3\"\"\" 4\"\nSpecifying a null string for file name\nIf you specify a null string for filename, the remaining arguments are ignored. All the\nrows and columns in the file are imported.\nExamples\nThis statement copies all the data in the file D:\\EMPLOYEE.TXT to gr_employee starting at\nthe first row:\ngr_employee.ImportFile(\"D:\\EMPLOYEE.TXT\")\nThis statement copies the data from the file D:\\EMPLOYEE.TXT starting with row 2 column\n3 and ending with row 30 column 5 to the graph gr_employee:\ngr_employee.ImportFile(\"D:\\EMPLOYEE.TXT\", 2, 30, 3)\nThe following statements are equivalent. Both import the contents of the XML file named\nmyxmldata:\ngr_control.ImportFile(myxmldata.xml)\ngr_control.ImportFile(XML!, myxmldata)\nThis example causes PowerBuilder to display the Specify Import File dialog box:\nstring null_str\nSetNull(null_str)\ndw_main.ImportFile(null_str)\nSee also\nImportClipboard\nImportString\n2.4.380.2 Syntax 2: for JSONGenerator objects\nDescription\nImports a JsonObjectItem item from a JSON file.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.ImportFile ( long ParentItemHandle, string FileName )\n"}
{"page": 903, "text": "Statements, Events, and Functions\nPage 903\nobjectname.ImportFile ( long ParentItemHandle, string Key, string FileName )\nobjectname.ImportFile ( string ParentItemPath, string FileName )\nobjectname.ImportFile ( string ParentItemPath, string Key, string FileName )\nobjectname.ImportFile ( string FileName )\nTable 2.822:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to import a\nJSON file\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\nKey\nA string whose value is the key of the child item\nFileName\nA string whose value is the name of a JSON file\nReturn value\nLong. Returns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis code example loads the string from the JSON file into the array item of the\nJSONGenerator object:\nLong ll_RootArray\nString ls_FileName, ls_Json\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\n//example.json contains {\"id\":1001, \"name\":\"evan\", \"active\":true}\nls_FileName = \"example.json\"\nlnv_JsonGenerator.ImportFile(ll_RootArray, ls_FileName)\n//Result is [{\"id\":1001,\"name\":\"evan\",\"active\":true}]\nls_Json = lnv_JsonGenerator.GetJsonString()\nExample 2\nThis code example loads the string from the JSON file into the object item of the\nJSONGenerator object:\nLong ll_RootObject\nString ls_FileName, ls_Json\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n//Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject()\n"}
{"page": 904, "text": "Statements, Events, and Functions\nPage 904\n//example.json contains {\"id\":1001, \"name\":\"evan\", \"active\":true}\nls_FileName = \"example.json\"\nlnv_JsonGenerator.ImportFile(ll_RootObject, \"Import\", ls_FileName)\n//Result is {\"Import\":{\"id\":1001,\"name\":\"evan\",\"active\":true}}\nls_Json = lnv_JsonGenerator.GetJsonString()\nExample 3\nThis code example loads the string from the JSON file into the array item of the\nJSONGenerator object:\nString ls_Path\nString ls_FileName, ls_Json\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n//Create an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\n// example.json contains {\"id\":1001, \"name\":\"evan\", \"active\":true}\nls_FileName = \"example.json\"\nlnv_JsonGenerator.ImportFile(ls_Path, ls_FileName)\n//Result is [{\"id\":1001,\"name\":\"evan\",\"active\":true}]\nls_Json = lnv_JsonGenerator.GetJsonString()\nExample 4\nThis code example loads the string from the JSON file into the object item of the\nJSONGenerator object:\nString ls_Path\nString ls_FileName, ls_Json\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n//Creates an object root item\nlnv_JsonGenerator.CreateJsonObject()\nls_Path = \"/\"\n//example.json contains {\"id\":1001, \"name\":\"evan\", \"active\":true}\nls_FileName = \"example.json\"\nlnv_JsonGenerator.ImportFile(ls_Path, \"Import\", ls_FileName)\n//Result is {\"Import\":{\"id\":1001,\"name\":\"evan\",\"active\":true}}\nls_Json = lnv_JsonGenerator.GetJsonString()\nExample 5\nThis code example imports the string from the JSON file as the root item of the\nJSONGenerator object:\nString ls_FileName, ls_Json\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n//num.json contains {\"value\":123.45,\"value1\":Infinity,\"value2\":-\nInfinity,\"value3\":NaN,\"value4\":null}\nls_FileName = \"num.json\"\nlnv_JsonGenerator.ImportFile(ls_FileName)\n"}
{"page": 905, "text": "Statements, Events, and Functions\nPage 905\n//Result is {\"value\":123.45,\"value1\":Infinity,\"value2\":-\nInfinity,\"value3\":NaN,\"value4\":null}\nls_Json = lnv_JsonGenerator.GetJsonString()\nSee also\nImportString\n2.4.381 ImportString\n2.4.381.1 Syntax 1: for Graph controls\nDescription\nInserts data into a DataWindow control, DataStore object, or graph control from tab-\nseparated, comma-separated, or XML data in a string. The way data is arranged in the string\nin tab-delimited columns depends on whether the target is a DataWindow (or DataStore) or a\ngraph, and on the type of graph.\nFor DataWindow and DataStore syntax, see the ImportString method for DataWindows in\nSection 9.100, \u201cImportString\u201d in DataWindow Reference.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects, because their data comes directly from the DataWindow.\nSyntax\ngraphname.ImportString ( { importtype}, string {, startrow {, endrow {,\n startcolumn } } } )\nTable 2.823:\nArgument\nDescription\ngraphname\nThe name of the graph control to which you want to copy data from the\nspecified string.\nimporttype\n(optional)\nA value of the SaveAsType enumerated datatype specifying the format of\nthe imported string. Valid type arguments are:\nText!\nCSV!\nXML!\nIf you want to generate an XML trace file, the XML! argument is\nrequired.\nstring\nA string from which you want to copy the data. The string should contain\ntab-separated or comma-separated columns or XML with one row per\nline (see Usage).\nstartrow\n(optional)\nThe number of the first detail row in the string that you want to copy. The\ndefault is 1.\nFor default XML import, if startrow is supplied, the first N (startrow -1)\nelements are skipped, where N is the DataWindow row size.\n"}
{"page": 906, "text": "Statements, Events, and Functions\nPage 906\nArgument\nDescription\nFor template XML import, if startrow is supplied, the first (startrow -1)\noccurrences of the repetitive row mapping defined in the template are\nskipped.\nendrow\n(optional)\nThe number of the last detail row in the string that you want to copy. The\ndefault is the rest of the rows.\nFor default XML import, if endrow is supplied, import stops when N *\nendrow elements have been imported, where N is the DataWindow row\nsize.\nFor template XML import, if endrow is supplied, import stops after\nendrow occurrences of the repetitive row mapping defined in the template\nhave been imported.\nstartcolumn\n(optional)\nThe number of the first column in the string that you want to copy. The\ndefault is 1.\nFor default XML import, if startcolumn is supplied, import skips the first\n(startcolumn - 1) elements in each row.\nThis argument has no effect on template XML import.\nReturn value\nReturns the number of data points that were imported if it succeeds and one of the following\nnegative integers if an error occurs:\n-1 -- No rows or startrow value supplied is greater than the number of rows in the string\n-2 -- Empty string or input data does not match number of columns or required column type\n-3 -- Invalid argument\n-4 -- Invalid input\n-11 -- XML Parsing Error; XML parser libraries not found or XML not well formed\n-12 -- XML Template does not exist or does not match the DataWindow\nIf any argument's value is null, ImportString returns null. If the optional importtype argument\nis specified and is not a valid type, ImportString returns -3.\nUsage\nFor graph controls, ImportString only uses three columns on each line and ignores other\ncolumns. The three columns must contain information that depends on the type of graph:\n\u2022 For all graph types except scatter, the first column to be imported is the series name, the\nsecond column contains the category, and the third column contains the data.\n\u2022 For scatter graphs, the first column to be imported is the series name, the second column is\nthe data's x value, and the third column is the y value.\nYou can add data to more than one series by specifying different series names in the first\ncolumn.\n"}
{"page": 907, "text": "Statements, Events, and Functions\nPage 907\nExamples\nThese statements copy the data from the string ls_Text starting with row 2 column 3 and\nending with row 30 column 5 to the graph gr_employee:\nstring ls_Text\nls_Text = . . .\ngr_employee.ImportString(ls_Text, 2, 30, 3)\nThe following script stores data for two series in the string ls_gr and imports the data into the\ngraph gr_custbalance. The categories in the data are A, B, and C:\nstring ls_gr\n \nls_gr = \"series1~tA~t12~r~n\"\nls_gr = ls_gr + \"series1~tB~t13~r~n\"\nls_gr = ls_gr + \"series1~tC~t14~r~n\"\nls_gr = ls_gr + \"series2~tA~t15~r~n\"\nls_gr = ls_gr + \"series2~tB~t14~r~n\"\nls_gr = ls_gr + \"series2~tC~t12.5~r~n\"\n \ngr_custbalance.ImportString(ls_gr, 1)\nSee also\nImportClipboard\nImportFile\n2.4.381.2 Syntax 2: for JSONGenerator objects\nDescription\nImports a JsonObjectItem item from a JSON string.\nApplies to\nJSONGenerator objects\nSyntax\nobjectname.ImportString ( long ParentItemHandle, string Value )\nobjectname.ImportString ( long ParentItemHandle, string Key, string Value )\nobjectname.ImportString ( string ParentItemPath, string Value )\nobjectname.ImportString ( string ParentItemPath, string Key, string Value )\nobjectname.ImportString ( string Value )\nTable 2.824:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator object in which you want to import a\nJSON file\nParentItemHandle A long whose value is the handle of the parent item of JsonArrayItem or\nJsonObjectItem type\nParentItemPath\nA string whose value is the path of the parent item of JsonArrayItem or\nJsonObjectItem type\n"}
{"page": 908, "text": "Statements, Events, and Functions\nPage 908\nArgument\nDescription\nKey\nA string whose value is the key of the child item\nValue\nA string whose value is the value of a JsonObjectItem item\nReturn value\nLong. Returns the handle of the new child item if it succeeds and -1 if an error occurs. If any\nargument's value is null, the method returns null.\nExample 1\nThis code example imports a JSON string to the array item of the JSONGenerator object:\nLong ll_RootArray\nString ls_Json\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true}'\n// Creates an array root item\nll_RootArray = lnv_JsonGenerator.CreateJsonArray()\nlnv_JsonGenerator.ImportString(ll_RootArray, ls_Json)\nlnv_JsonGenerator.ImportString(ll_RootArray, \"[11,22,33]\")\n//Result is [{\"id\":1001,\"name\":\"evan\",\"active\":true},[11,22,33]]\nExample 2\nThis code example imports a JSON string to the object item of the JSONGenerator object:\nLong ll_RootObject\nString ls_Json\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true}'\n// Creates an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject()\nlnv_JsonGenerator.ImportString(ll_RootObject, \"Import1\", ls_Json)\nlnv_JsonGenerator.ImportString(ll_RootObject, \"Import2\", \"[11,22,33]\")\n//Result is {\"Import1\":{\"id\":1001,\"name\":\"evan\",\"active\":true},\"Import2\":\n[11,22,33]}\nExample 3\nThis code example imports a JSON string to the array item of the JSONGenerator object:\nString ls_Json, ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true}'\n// Creates an array root item\nlnv_JsonGenerator.CreateJsonArray()\nls_Path = \"/\"\nlnv_JsonGenerator.ImportString(ls_Path, ls_Json)\n"}
{"page": 909, "text": "Statements, Events, and Functions\nPage 909\nlnv_JsonGenerator.ImportString(ls_Path, \"[11,22,33]\")\n//Result is [{\"id\":1001,\"name\":\"evan\",\"active\":true},[11,22,33]]\nExample 4\nThis code example imports a JSON string to the object item of the JSONGenerator object:\nString ls_Json, ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\nls_Json = '{\"id\":1001, \"name\":\"evan\", \"active\":true}'\n// Creates an object root item\nlnv_JsonGenerator.CreateJsonObject()\nls_Path = \"/\"\nlnv_JsonGenerator.ImportString(ls_Path, \"Import1\", ls_Json)\nlnv_JsonGenerator.ImportString(ls_Path, \"Import2\", \"[11,22,33]\")\n//Result is {\"Import1\":{\"id\":1001,\"name\":\"evan\",\"active\":true},\"Import2\":\n[11,22,33]}\nExample 5\nThis code example imports a JSON string as the root item of the JSONGenerator object:\nString ls_Json, ls_Path\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\nls_Json = '{\"value\":123.45,\"value1\":Infinity,\"value2\":-\nInfinity,\"value3\":NaN,\"value4\":null}'\nlnv_JsonGenerator.ImportString(ls_Json)\nls_Path = \"/\"\nlnv_JsonGenerator.ImportString(ls_Path, \"Import2\", \"[11,22,33]\")\n//Result is {\"value\":123.45,\"value1\":Infinity,\"value2\":-\nInfinity,\"value3\":NaN,\"value4\":null,\"Import2\":[11,22,33]}\nSee also\nImportFile\n2.4.382 ImportJSON\nDescription\nLoads the RibbonBar content from a JSON string. ECMA-404 JSON standard is supported.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.ImportJSON ( Data )\nTable 2.825:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 910, "text": "Statements, Events, and Functions\nPage 910\nArgument\nDescription\nData\nA JSON string that contains the RibbonBar content.\nReturn value\nInteger.\n1 - Successful.\n-1 - An internal error occurs.\n-2 - The library fails to load.\n-5 - Any of the following: 1) JSON syntax error; 2) JSON encode error; 3) JSON data is null.\nIf any argument's value is null, returns null.\nExamples\nThis example loads a JSON string to create the ribbon bar:\nInteger li_return\nstring ls_Json\nls_Json = '{\"BuiltinTheme\":0,\"Font\":\"FaceName:Tahoma;TextSize:8\",\"RibbonItems\":\n{\"Category\":[{\"Text\":\"Category\",\"Panel\":\n[{\"Text\":\"Panel\",\"PictureName\":\"TabsSmall!\",\"RibbonItem\":[{\"SmallButton\":\n{\"Text\":\"SmallButton\",\"PictureName\":\"EmployeeSmall!\",\"Clicked\":\"ue_ButtonClicked\"}}]}]}],\"TabButt\n[{\"Text\":\"TabButton\",\"PictureName\":\"ArrowUpSmall!\",\"Clicked\":\"ue_TabButtonClicked\"}]}}'\nli_return = rbb_1.ImportJSON(ls_Json)\nSee also\nExportJSON\nExportXML\nExportToJSONFile\nExportToXMLFile\nImportJSON\nImportXML\nImportFromXMLFile\nImportFromJSONFile\n2.4.383 ImportXML\nDescription\nLoads the RibbonBar content from an XML string. XML version 1.0 is supported.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.ImportXML ( Data )\n"}
{"page": 911, "text": "Statements, Events, and Functions\nPage 911\nTable 2.826:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nData\nAn XML string that contains the RibbonBar content.\nReturn value\nInteger.\n1 - Successful.\n-1 - An internal error occurs.\n-2 - The library fails to load.\n-5 - Any of the following: 1) XML syntax error; 2) XML encode error; 3) XML data is null.\nIf any argument's value is null, returns null.\nExamples\nThis example loads an XML string to create the ribbon bar:\nInteger li_return\nstring ls_xml\nls_xml = '<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?>&\n   <RibbonBar Font=\"FaceName:Tahoma; TextSize:8\" BuiltinTheme=\"0\">&\n     <RibbonItems>&\n      <Categories>&\n       <Category Text=\"MyCategory\" Enabled=\"true\" Visible=\"true\">&\n        <Panel Text=\"MyPanel\" Enabled=\"true\" Visible=\"true\"\n PictureName=\"TabsSmall!\">&\n         <SmallButton Text=\"MySmallButton\" Clicked=\"ue_ButtonClicked\"\n PictureName=\"EmployeeSmall!\"/>&\n        </Panel>&\n       </Category>&\n      </Categories>&\n     </RibbonItems>&\n   </RibbonBar>'\nli_return = rbb_1.ImportXML(ls_xml)\nSee also\nExportJSON\nExportXML\nExportToJSONFile\nExportToXMLFile\nImportJSON\nImportFromXMLFile\nImportFromJSONFile\n2.4.384 ImportFromJSONFile\nDescription\n"}
{"page": 912, "text": "Statements, Events, and Functions\nPage 912\nLoads the RibbonBar content from a JSON file. ECMA-404 JSON standard is supported.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.ImportFromJSONFile ( FileName )\nTable 2.827:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nFileName\nA string whose value is the full name of the JSON file that contains the\nRibbonBar content.\nReturn value\nInteger.\n1 - Successful.\n-1 - An internal error occurs.\n-2 - The library fails to load.\n-3 - The specified file does not exist.\n-4 - The specified file extension is wrong.\n-5 - Any of the following: 1) JSON syntax error; 2) JSON encode error; 3) JSON data is null.\nIf any argument's value is null, returns null.\nExamples\nThis example loads a JSON file to create the ribbon bar:\nInteger li_return\nli_return = rbb_1.ImportFromJSONFile (\"Export1.json\")\nSee also\nExportJSON\nExportXML\nExportToJSONFile\nExportToXMLFile\nImportJSON\nImportXML\nImportFromXMLFile\n2.4.385 ImportFromXMLFile\nDescription\n"}
{"page": 913, "text": "Statements, Events, and Functions\nPage 913\nLoads the RibbonBar content from an XML file. XML version 1.0 is supported.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.ImportFromXMLFile ( FileName )\nTable 2.828:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nFileName\nA string whose value is the full name of the XML file that contains the\nRibbonBar content.\nReturn value\nInteger.\n1 - Successful.\n-1 - An internal error occurs.\n-2 - The library fails to load.\n-3 - The specified file does not exist.\n-4 - The specified file extension is wrong.\n-5 - Any of the following: 1) XML syntax error; 2) XML encode error; 3) XML data is null.\nIf any argument's value is null, returns null.\nExamples\nThis example loads an XML file to create a ribbon bar:\nInteger li_return\nli_return = rbb_1.ImportFromXMLFile (\"Export2.xml\")\nSee also\nExportJSON\nExportXML\nExportToJSONFile\nExportToXMLFile\nImportJSON\nImportXML\nImportFromJSONFile\n2.4.386 IncomingCallList\nDescription\n"}
{"page": 914, "text": "Statements, Events, and Functions\nPage 914\nProvides a list of the callers of a routine included in a performance analysis model.\nApplies to\nProfileRoutine object\nSyntax\niinstancename.IncomingCallList ( list, aggregrateduplicateroutinecalls )\nTable 2.829:\nArgument\nDescription\ninstancename\nInstance name of the ProfileRoutine object.\nlist\nAn unbounded array variable of datatype ProfileCall in which\nIncomingCallList stores a ProfileCall object for each caller of the routine.\nThis argument is passed by reference.\naggregateduplicateroutinecalls\nA boolean indicating whether duplicate routine calls will result in the\ncreation of a single or of multiple ProfileCall objects.\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- The model does not exist\nUsage\nUse this function to extract a list of the callers of a routine included in a performance analysis\nmodel. Each caller is defined as a ProfileCall object and provides the called routine and the\ncalling routine, the number of times the call was made, and the elapsed time. The callers are\nlisted in no particular order.\nYou must have previously created the performance analysis model from a trace file using the\nBuildModel function.\nThe aggregateduplicateroutinecalls argument indicates whether duplicate routine calls\nwill result in the creation of a single or of multiple ProfileCall objects. This argument\nhas no effect unless line tracing is enabled and a calling routine calls the current routine\nfrom more than one line. If aggregateduplicateroutinecalls is true, a new ProfileCall\nobject is created that aggregates all calls from the calling routine to the current routine. If\naggregateduplicateroutinecalls is false, multiple ProfileCall objects are returned, one for each\nline from which the calling routine called the called routine.\nExamples\nThis example gets a list of the routines included in a performance analysis model and then\ngets a list of the routines that called each routine:\nLong ll_cnt\nProfileCall lproc_call[]\n \nlpro_model.BuildModel()\n"}
{"page": 915, "text": "Statements, Events, and Functions\nPage 915\nlpro_model.RoutineList(i_routinelist)\n \nFOR ll_cnt = 1 TO UpperBound(iprort_list)\n    iprort_list[ll_cnt].IncomingCallList(lproc_call, & \n      TRUE)\n    ...\nNEXT\nSee also\nBuildModel\nOutgoingCallList\n2.4.387 Init (obsolete)\nDescription\nInitializes an instance of the CORBACurrent service object for client- or component-\nmanaged transactions.\nObsolete function\nInit is obsolete, because EAServer is no longer supported since PowerBuilder 2017.\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.Init ( { connection | URL} )\nTable 2.830:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance.\nconnection\nThe name of the Connection object for which a connection has already\nbeen established to a valid EAServer host. Either connection or URL is\nrequired if the Init function is called by a client.\nURL\nString. The name of a URL that identifies a valid EAServer host. Either\nconnection or URL is required if the Init function is called by a client.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following values if the service object could not be\ninitialized:\n-1 -- Unknown error\n-2 -- Service object not running in EAServer (no argument) or Connection object not\nconnected to EAServer (argument is Connection object)\n-3 -- ORB initialization error\n"}
{"page": 916, "text": "Statements, Events, and Functions\nPage 916\n-4 -- Error on a call to the ORB.resolve_initial_references(\"TransactionCurrent\") method\n-5 -- Error on a call to the narrow method\nUsage\nThe Init function can be called from a PowerBuilder component running in EAServer whose\ntransaction property is marked as OTS style, or by a PowerBuilder client. The Init function\nmust be called to initialize the CORBACurrent object before any other functions are called.\nEAServer must be using the two-phase commit transaction coordinator (OTS/XA) and a\nreference to the CORBACurrent object must first be obtained using the GetContextService\nfunction.\nWhen Init is called from a PowerBuilder component running in EAServer, no arguments are\nrequired. If the calling component is not marked as OTS style, the CORBACurrent object is\nnot initialized.\nWhen Init is called from a PowerBuilder client and the client is responsible for the\ntransaction, the CORBACurrent object must be initialized by calling Init with either a\nConnection object or a URL string as the argument. In the case of a Connection object, the\nclient must already be connected to a valid EAServer host using that Connection object.\nUsing a Connection object is preferred because the code is more portable.\nExamples\nThis example shows the use of Init in a PowerBuilder EAServer component to initialize an\ninstance of the CORBACurrent object:\n// Instance variables:\n// CORBACurrent corbcurr\nint li_rc\nli_rc = this.GetContextService(\"CORBACurrent\", corbcurr)\nIF li_rc <> 1 THEN \n    // handle the errorELSE\n    li_rc = corbcurr.init()\n    IF li_rc <> 0 THEN\n      // handle the error\n    END IF\nEND IF\nIn this example, Init is called by a PowerBuilder client application that has already connected\nto EAServer using the myconn Connection object and has created a reference called corbcurr\nto the CORBACurrent object:\nli_rc = corbcurr.init( myconn )\nIF li_rc <> 0 THEN\n    // handle the errorEND IF\nIn this example, the PowerBuilder client application calls the Init function using a valid URL:\nli_rc = corbcurr.init( \"iiop://localhost:2000\" )\nIF li_rc <> 0 THEN\n    // handle the errorEND IF\nSee also\nBeginTransaction (obsolete)\nCommitDocking\n"}
{"page": 917, "text": "Statements, Events, and Functions\nPage 917\nGetContextService\nGetStatus (obsolete)\nGetTransactionName (obsolete)\nResumeTransaction (obsolete)\nRollbackOnly (obsolete)\nRollbackTransaction (obsolete)\nSetTimeout (obsolete)\nSuspendTransaction (obsolete)\n2.4.388 InputFieldChangeData\nDescription\nModifies the data value of input fields in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.InputFieldChangeData ( inputfieldname, inputfieldvalue )\nTable 2.831:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to change the\ndata in the specified input fields.\ninputfieldname\nA string whose value is the name of input fields whose value you want to\nchange. There can be more than one input field with a given name.\ninputfieldvalue\nA string whose value is the data to be assigned to the specified input\nfields.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nInputFieldChangeData returns null.\nUsage\nAll the input fields that have the same name contain the same data. When you call\nInputFieldChangeData, you affect all the fields of the specified name.\nExamples\nThis script is part of the SelectionChanged event for the ListBox lb_instruments. When the\nuser clicks on an item in the ListBox, the selected instrument name is assigned to the input\nfield called instrument in the RichTextEdit rte_1:\n"}
{"page": 918, "text": "Statements, Events, and Functions\nPage 918\ninteger rtn\nrtn = rte_1.InputFieldChangeData &\n    (\"instrument\", lb_instruments.SelectedItem())\n \nst_status.Text = String(rtn)\nIf the text in rte_1 looks like this:\nDear {title} {lastname}:\nWe're happy you have rented a {instrument} for your child. Please perform regular\nmaintenance for the {instrument} as instructed by your child's teacher. You can buy\n{instrument} supplies and instruction books at your local music stores.\nThen after the user picks trumpet in the ListBox, the script inserts trumpet for every\noccurrence of the {instrument} field. The other fields are not affected:\nDear {title} {lastname}:\nWe're happy you have rented a trumpet for your child. Please perform regular maintenance\nfor the trumpet as instructed by your child's teacher. You can buy trumpet supplies and\ninstruction books at your local music stores.\nSee also\nInputFieldCurrentName\nInputFieldDeleteCurrent\nInputFieldGetData\nInputFieldInsert\nInputFieldLocate\nDataSource\n2.4.389 InputFieldCurrentName\nDescription\nGets the name of the input field when the insertion point is in an input field in a RichTextEdit\ncontrol.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.InputFieldCurrentName ( )\nTable 2.832:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to get the input\nfield's name\nReturn value\n"}
{"page": 919, "text": "Statements, Events, and Functions\nPage 919\nString. Returns the name of the input field. If the insertion point is not in an input field or if\nan error occurs, it returns the empty string (\"\").\nExamples\nThis example gets the name of the input field containing the insertion point:\nstring ls_inputname\nls_inputname = rte_1.InputFieldCurrentName()\nSee also\nInputFieldChangeData\nInputFieldDeleteCurrent\nInputFieldGetData\nInputFieldInsert\nInputFieldLocate\nDataSource\n2.4.390 InputFieldDeleteCurrent\nDescription\nDeletes the input field that is selected in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.InputFieldDeleteCurrent ( )\nTable 2.833:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to delete the\ninput field that is selected\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if there is no input field at the insertion point, the input field is\nactivated for editing, or an error occurs.\nUsage\nAll the input fields that have the same name contain the same data but they can be deleted\nindependently. If one of a group of input fields with the same name is deleted, the others are\nnot affected. If all the input fields of the same name are deleted, the RichTextEdit control\nremembers the data from those input fields. It will use that data to initialize a new input field\nthat has the same name as the deleted fields.\n"}
{"page": 920, "text": "Statements, Events, and Functions\nPage 920\nThe input field must be the only selection. If other text is selected too,\nInputFieldDeleteCurrent fails. When an input field is the current and only selection, the\nhighlight flashes.\nInputFieldDeleteCurrent deletes only the current field. Other fields with the same name\nwithin the document are not affected. If the RichTextEdit control uses the DataSource\nfunction to share data with a DataWindow, the current field is deleted from all instances of\nthe document.\nExamples\nThis example deletes the input field containing the insertion point:\ninteger li_rtn\nli_rtn = rte_1.InputFieldDeleteCurrent()\nSee also\nInputFieldChangeData\nInputFieldGetData\nInputFieldCurrentName\nInputFieldInsert\nInputFieldLocate\nDataSource\n2.4.391 InputFieldGetData\nDescription\nGet the data in the specified input field in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.InputFieldGetData ( inputfieldname )\nTable 2.834:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to get data from\nthe selected input field\ninputfieldname\nA string whose value is the name of input field from which you want to\nget the data\nReturn value\nString.\nThe data in the input field. InputFieldGetData returns the empty string (\"\") if the field does\nnot exist or an error occurs.\n"}
{"page": 921, "text": "Statements, Events, and Functions\nPage 921\nExamples\nThis example gets the data in the input field empname:\nstring ls_name\nls_name = rte_1.InputFieldGetData(empname)\nSee also\nInputFieldChangeData\nInputFieldCurrentName\nInputFieldDeleteCurrent\nInputFieldInsert\nInputFieldLocate\nDataSource\n2.4.392 InputFieldInsert\nDescription\nInserts a named input field at the insertion point in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.InputFieldInsert ( inputfieldname )\nTable 2.835:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to insert an\ninput field\ninputfieldname\nA string whose value is the name of input field to be inserted. The name\ndoes not have to be unique\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If inputfieldname is null, InputFieldInsert\nreturns null.\nUsage\nThere can be several input fields with the same name. Fields of a given name all have the\nsame data value. When you call InputFieldChangeData for a named input field, all fields with\nthat name are changed.\nExamples\nIf there is a selection, InputFieldInsert replaces the selection with the field.\n"}
{"page": 922, "text": "Statements, Events, and Functions\nPage 922\nrte_1.selecttext(1,2,1,5)\nrte_1.inputfieldinsert(\"lastname\")\nSee also\nInputFieldChangeData\nInputFieldCurrentName\nInputFieldDeleteCurrent\nInputFieldGetData\nInputFieldLocate\nDataSource\n2.4.393 InputFieldLocate\nDescription\nLocates an input field in a RichTextEdit control and moves the insertion point there.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.InputFieldLocate ( location {, inputfieldname } )\nTable 2.836:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to locate an\ninput field.\nlocation\nA value of the Location enumerated datatype that specifies the\noccurrence of the input field you want to locate. Values are:\n\u2022 First! -- The first occurrence in the document of inputfieldname, or if\nno name is specified, the first input field in the document\n\u2022 Last! -- The last occurrence in the document of inputfieldname, or if no\nname is specified, the last input field in the document\n\u2022 Next! -- The occurrence of inputfieldname that is after the insertion\npoint, or if no name is specified, the next input field of any name after\nthe insertion point\n\u2022 Prior! -- The occurrence of inputfieldname before the insertion point,\nor if no name is specified, the next input field of any name before the\ninsertion point\ninputfieldname\nA string whose value is the name of the input field you want to locate. If\nthere are multiple occurrences of inputfieldname in the control, location\nspecifies the one to be located.\n"}
{"page": 923, "text": "Statements, Events, and Functions\nPage 923\nReturn value\nString.\nReturns the name of the input field it located if it succeeds. InputFieldLocate returns an\nempty string if no matching input field is found or if an error occurs. If any argument is null,\nInputFieldLocate returns null.\nUsage\nThere can be several input fields with the same name. Fields of a given name all have the\nsame data value.\nExamples\nThis example locates the next input field after the insertion point. If found, ls_name is set to\nthe name of the input field:\nstring ls_name\nls_name = rte_1.InputFieldLocate(Next!)\nThis example locates the last input field in the document:\nstring ls_name\nls_name = rte_1.InputFieldLocate(Last!)\nThis example locates the last occurrence in the document of the input field named address. If\nfound, ls_name is set to the value \"address\":\nstring ls_name\nls_name = rte_1.InputFieldLocate(Last!, \"address\")\nSee also\nInputFieldChangeData\nInputFieldCurrentName\nInputFieldDeleteCurrent\nInputFieldGetData\nInputFieldInsert\nDataSource\n2.4.394 InsertCategory\n2.4.394.1 Syntax 1: for Graph controls\nDescription\nInserts a category on the category axis of a graph at the specified position. Existing categories\nare renumbered to keep the category numbering sequential.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects, because their data comes directly from the DataWindow.\nSyntax\n"}
{"page": 924, "text": "Statements, Events, and Functions\nPage 924\ncontrolname.InsertCategory ( categoryvalue, categorynumber )\nTable 2.837:\nArgument\nDescription\ncontrolname\nThe name of the graph into which you want to insert a category.\ncategoryvalue\nA value that is the category you want to insert. The category must\nbe unique within the graph. The value you specify must be the same\ndatatype as the datatype of the category axis.\ncategorynumber\nThe number of the category before which you want to insert the new\ncategory. To add the category at the end, specify 0. If the axis is\nsorted, the category will be integrated into the existing order, ignoring\ncategorynumber.\nReturn value\nInteger.\nReturns the number of the category if it succeeds and -1 if an error occurs. If the category\nalready exists, it returns the number of the existing category. If any argument's value is null,\nInsertCategory returns null.\nUsage\nCategories are discrete. Even on a date or time axis, each category is separate with no\ntimeline-style connection between categories. Only scatter graphs, which do not have discrete\ncategories, have a continuous category axis.\nWhen the axis datatype is string, category names are unique if they have different\ncapitalization. Also, you can specify the empty string (\"\") as the category name. However,\nbecause category names must be unique, there can be only one category with that name.\nWhen you use InsertCategory to create a new category, there will be holes in each of the\nseries for that category. Use AddData or InsertData to create data points for the new category.\nEquivalent syntax\nIf you want to add a category to the end of a series, you can use AddCategory instead, which\nrequires fewer arguments.\nThis statement:\ngr_data.InsertCategory(\"Qty\", 0)\nis equivalent to:\ngr_data.AddCategory(\"Qty\")\nExamples\nThese statements insert a category called Macs before the category named PCs in the graph\ngr_product_data:\ninteger CategoryNbr\n \n"}
{"page": 925, "text": "Statements, Events, and Functions\nPage 925\n// Get the number of the category.\nCategoryNbr = FindCategory(\"PCs\")\ngr_product_data.InsertCategory(\"Macs\", CategoryNbr)\nIn a graph reporting mail volume in the afternoon, these statements add three categories to a\ntime axis. If the axis is sorted, the order in which you add the categories does not matter:\ncatnum = gr_mail.InsertCategory(13:00, 0)\ncatnum = gr_mail.InsertCategory(12:00, 0)\ncatnum = gr_mail.InsertCategory(13:00, 0)\nSee also\nAddData\nAddCategory\nFindCategory\nFindSeries\nInsertData\nInsertSeries\n2.4.394.2 Syntax 2: for RibbonBar controls\nDescription\nInserts a category in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertCategory ( Long ItemHandleAfter, String Text )\ncontrolname.InsertCategory ( Long ItemHandleAfter, RibbonCategoryItem Item )\nTable 2.838:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandleAfter The handle of the category on the same level after which you want to\ninsert the category.\nText\nThe title of the category to be inserted.\nItem\nA category item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\n"}
{"page": 926, "text": "Statements, Events, and Functions\nPage 926\nThis example inserts the \"MyCategory2\" category after the \"MyCategory1\" category.\nLong ll_Handle, ll_Handle2\nll_Handle = rbb_1.InsertCategoryFirst ( \"MyCategory1\" )\nll_Handle2 = rbb_1.InsertCategory ( ll_Handle, \"MyCategory2\" )\nExample 2\nThis example also inserts the \"MyCategory2\" category after the \"MyCategory1\" category.\nIt first defines a category item with various properties (including Text, Tag etc.) and then\ninserts it after the \"MyCategory1\" category.\nLong ll_Handle,ll_Handle2\nRibbonCategoryItem lr_Category\nll_Handle = rbb_1.InsertCategoryFirst (\"MyCategory1\")\nlr_Category.Text = \"MyCategory2\"\nlr_Category.Tag = \"MyCategory2\"\nll_Handle2 = rbb_1.InsertCategory (ll_Handle, lr_Category)\nSee also\nInsertCategoryFirst\nInsertCategoryLast\nDeleteCategory\nSetCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nSetActiveCategory\nGetActiveCategory\n2.4.395 InsertCategoryFirst\nDescription\nInserts a category as the first item in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertCategoryFirst ( String Text )\ncontrolname.InsertCategoryFirst ( RibbonCategoryItem Item )\nTable 2.839:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 927, "text": "Statements, Events, and Functions\nPage 927\nArgument\nDescription\nText\nThe title of the category to be inserted.\nItem\nA category item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\nThis example inserts the \"MyCategory1\" category as the first category in the ribbon bar.\nLong ll_Handle\nll_Handle = rbb_1.InsertCategoryFirst (\"MyCategory1\")\nExample 2\nThis example also inserts the \"MyCategory1\" category as the first category in the ribbon bar.\nIt first defines a category item with various properties (including Text, Tag etc.) and then\ninserts it as the first category in the ribbon bar.\nLong ll_Handle\nRibbonCategoryItem lr_Category\nlr_Category.Text = \"MyCategory1\"\nlr_Category.Tag = \"MyCategory1\"\nll_Handle = rbb_1.InsertCategoryFirst (lr_Category)\nSee also\nInsertCategory\nInsertCategoryLast\nDeleteCategory\nSetCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nSetActiveCategory\nGetActiveCategory\n2.4.396 InsertCategoryLast\nDescription\nInserts a category as the last item in the RibbonBar control.\nApplies to\n"}
{"page": 928, "text": "Statements, Events, and Functions\nPage 928\nRibbonBar control\nSyntax\ncontrolname.InsertCategoryLast ( String Text )\ncontrolname.InsertCategoryLast ( RibbonCategoryItem Item )\nTable 2.840:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nText\nThe title of the category to be inserted.\nItem\nA category item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\nThis example inserts the \"MyCategory3\" category as the last category in the ribbon bar.\nLong ll_Handle\nll_Handle = rbb_1.InsertCategoryLast (\"MyCategory3\")\nExample 2\nThis example also inserts the \"MyCategory3\" category as the last category in the ribbon bar.\nIt first defines a category item with various properties (including Text, Tag etc.) and then\ninserts it as the last category in the ribbon bar.\nLong ll_Handle\nRibbonCategoryItem lr_Category\nlr_Category.Text = \"MyCategory3\"\nlr_Category.Tag = \"MyCategory3\"\nll_Handle = rbb_1.InsertCategoryLast (lr_Category)\nSee also\nInsertCategory\nInsertCategoryFirst\nDeleteCategory\nSetCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nSetActiveCategory\n"}
{"page": 929, "text": "Statements, Events, and Functions\nPage 929\nGetActiveCategory\n2.4.397 InsertCheckBox\nDescription\nInserts a check box in the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertCheckBox ( Long ParentHandle, Long ItemHandleAfter, String Text,\n String Clicked )\ncontrolname.InsertCheckBox ( Long ParentHandle, Long ItemHandleAfter,\n RibbonCheckBoxItem Item )\nTable 2.841:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nParentHandle\nThe handle of the panel or group in which you want to insert a check box.\nItemHandleAfter The handle of the item (check box, combo box, large button, small\nbutton, or group) on the same level after which you want to insert the\ncheck box.\nText\nThe text that displays in the check box.\nClicked\nThe name of the Clicked user event to be bound with the check box. The\nClicked user event for the check box must have a long parameter for\nreceiving the handle of the check box. For details, see Clicked.\nItem\nA check box item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the check box must be defined correctly according to the\nrequirements of RibbonCheckBoxItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts the \"Print Using XSLFOP\" check box after the \"Distill Custom\nPostScript\" check box and binds both check boxes with the \"Ue_CheckBoxClicked\" user\nevent.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_CheckBox, ll_Handle_CheckBox2\n"}
{"page": 930, "text": "Statements, Events, and Functions\nPage 930\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_CheckBox = rbb_1.InsertCheckBoxFirst (ll_Handle_Panel, \"Distill Custom\n PostScript\", \"Ue_CheckBoxClicked\")\nll_Handle_CheckBox2 = rbb_1.InsertCheckBox (ll_Handle_Panel, ll_Handle_CheckBox,\n \"Print Using XSLFOP\", \"Ue_CheckBoxClicked\")\n//Ue_CheckBoxClicked user event must have a long parameter for receiving the handle\n//of CheckBox where the mouse is clicking.\n//event type long ue_checkboxclicked(long itemhandle);\n//RibbonCheckBoxItem lr_CheckBox\n//rbb_1.GetCheckBox(ItemHandle,lr_CheckBox)\n////...\n//\n//Return 1\n//end event\nExample 2\nThis example inserts the \"Print Using XSLFOP\" check box after the \"Distill\nCustom PostScript\" check box and binds it with the \"Ue_CheckBoxClicked\" and\n\"Ue_CheckBoxSelected\" user events. It first defines a check box item with various\nproperties (including Text, Clicked, Selected etc.) and then inserts it after the \"Distill Custom\nPostScript\" check box.\nLong ll_Handle_Category,ll_Handle_Panel,ll_Handle_CheckBox,ll_Handle_CheckBox2\nRibbonCheckBoxItem lr_CheckBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_CheckBox = rbb_1.InsertCheckBoxFirst (ll_Handle_Panel, \"Distill Custom\n PostScript\", \"Ue_CheckBoxClicked\")\nlr_CheckBox.Text = \"Print Using XSLFOP\"\nlr_CheckBox.Clicked = \"Ue_CheckBoxClicked\"\nlr_CheckBox.Selected = \"Ue_CheckBoxSelected\"\nll_Handle_CheckBox2 = rbb_1.InsertCheckBox (ll_Handle_Panel, ll_Handle_CheckBox,\n lr_CheckBox)\n//Ue_CheckBoxSelected user event must have a long parameter for receiving the\n handle\n//of CheckBox where the mouse is hovering over. \n//event type long ue_checkboxselected(long itemhandle);\n//RibbonCheckBoxItem lr_CheckBox\n//rbb_1.GetCheckBox(ItemHandle,lr_CheckBox)\n////...\n//\n//Return 1\n//end event\nSee also\nInsertCheckBoxFirst\nInsertCheckBoxLast\nDeleteCheckBox\nSetCheckBox\nGetCheckBox\nGetChildItemByIndex\n"}
{"page": 931, "text": "Statements, Events, and Functions\nPage 931\n2.4.398 InsertCheckBoxFirst\nDescription\nInserts a check box as the first item in the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertCheckBoxFirst ( Long ParentHandle, String Text, String Clicked )\ncontrolname.InsertCheckBoxFirst ( Long ParentHandle, RibbonCheckBoxItem Item )\nTable 2.842:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nParentHandle\nThe handle of the panel or group into which you want to insert a check\nbox.\nText\nThe text that displays in the check box.\nClicked\nThe name of the Clicked user event to be bound with the check box. The\nClicked user event for the check box must have a long parameter for\nreceiving the handle of the check box. For details, see Clicked.\nItem\nA check box item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the check box must be defined correctly according to the\nrequirements of RibbonCheckBoxItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts the \"MyCheckBox1\" check box as the first item in a panel and binds it\nwith the \"Ue_CheckBoxClicked\" user event, and then inserts \"MyCheckBox2\" check box as\nthe first item in a group and binds it with the same \"Ue_CheckBoxClicked\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_CheckBox, ll_Handle_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_CheckBox = rbb_1.InsertCheckBoxFirst (ll_Handle_Panel, \"MyCheckBox1\",\n \"Ue_CheckBoxClicked\")\n//Group\nll_Handle_Group = rbb_1.InsertGroupLast (ll_Handle_Panel)\nll_Handle_CheckBox = rbb_1.InsertCheckBoxFirst (ll_Handle_Group, \"MyCheckBox2\",\n \"Ue_CheckBoxClicked\")\n"}
{"page": 932, "text": "Statements, Events, and Functions\nPage 932\nExample 2\nThis example inserts the \"MyCheckBox1\" check box as the first item in a panel and binds it\nwith the \"Ue_CheckBoxClicked\" and \"Ue_CheckBoxSelected\" user events. It first defines\na check box item with various properties (including Text, Clicked, Selected etc.) and then\ninserts it as the first item in a panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_CheckBox\nRibbonCheckBoxItem lr_CheckBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_CheckBox.Text = \"MyCheckBox1\"\nlr_CheckBox.Clicked = \"Ue_CheckBoxClicked\"\nlr_CheckBox.Selected = \"Ue_CheckBoxSelected\"\nll_Handle_CheckBox = rbb_1.InsertCheckBoxFirst (ll_Handle_Panel, lr_CheckBox)\nSee also\nInsertCheckBox\nInsertCheckBoxLast\nDeleteCheckBox\nSetCheckBox\nGetCheckBox\nGetChildItemByIndex\n2.4.399 InsertCheckBoxLast\nDescription\nInserts a check box as the last item in the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertCheckBoxLast ( Long ParentHandle, String Text, String Clicked )\ncontrolname.InsertCheckBoxLast ( Long ParentHandle, RibbonCheckBoxItem Item )\nTable 2.843:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nParentHandle\nThe handle of the panel or group into which you want to insert a check\nbox.\nText\nThe text that displays in the check box.\nClicked\nThe name of the Clicked user event to be bound with the check box. The\nClicked user event for the check box must have a long parameter for\nreceiving the handle of the check box. For details, see Clicked.\n"}
{"page": 933, "text": "Statements, Events, and Functions\nPage 933\nArgument\nDescription\nItem\nA check box item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the check box must be defined correctly according to the\nrequirements of RibbonCheckBoxItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts the \"MyCheckBox3\" check box as the last item in a panel and binds it\nwith the \"Ue_CheckBoxClicked\" user event, and then inserts the \"MyCheckBox4\" check box\nas the last item in a group and binds it with the same \"Ue_CheckBoxClicked\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_CheckBox, ll_Handle_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_CheckBox = rbb_1.InsertCheckBoxLast (ll_Handle_Panel, \"MyCheckBox3\",\n \"Ue_CheckBoxClicked\")\n//Group\nll_Handle_Group = rbb_1.InsertGroupLast (ll_Handle_Panel)\nll_Handle_CheckBox = rbb_1.InsertCheckBoxLast (ll_Handle_Group, \"MyCheckBox4\",\n \"Ue_CheckBoxClicked\")\nExample 2\nThis example inserts the \"MyCheckBox3\" check box as the last item in a panel and binds it\nwith the \"Ue_CheckBoxClicked\" and \"Ue_CheckBoxSelected\" user events. It first defines\na check box item with various properties (including Text, Clicked, Selected etc.) and then\ninserts it as the first item in a panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_CheckBox\nRibbonCheckBoxItem lr_CheckBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_CheckBox.Text = \"MyCheckBox3\"\nlr_CheckBox.Clicked = \"Ue_CheckBoxClicked\"\nlr_CheckBox.Selected = \"Ue_CheckBoxSelected\"\nll_Handle_CheckBox = rbb_1.InsertCheckBoxLast (ll_Handle_Panel, lr_CheckBox)\nSee also\nInsertCheckBox\nInsertCheckBoxFirst\nDeleteCheckBox\nSetCheckBox\n"}
{"page": 934, "text": "Statements, Events, and Functions\nPage 934\nGetCheckBox\nGetChildItemByIndex\n2.4.400 InsertClass\nDescription\nInserts a new object of the specified OLE class in an OLE control.\nSyntax\nole2control.InsertClass ( classname )\nTable 2.844:\nArgument\nDescription\nole2control\nThe name of the OLE control in which you want to create a new object\nclassname\nA string whose value is the name of the class of the object you want to\ncreate\nReturn value\nInteger. Returns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Invalid class name\n-9 -- Other error\nIf any argument's value is null, InsertClass returns null.\nUsage\nClassnames are stored in the Registration database. Examples of classnames include:\nExcel.Sheet\nExcel.Chart\nWord.Document\nExamples\nThis example inserts an empty Excel spreadsheet into the OLE control, ole_1:\ninteger result\nresult = ole_1.InsertClass(\"excel.sheet\")\nSee also\nInsertFile\nInsertObject\nLinkTo\n2.4.401 InsertColumn\nDescription\n"}
{"page": 935, "text": "Statements, Events, and Functions\nPage 935\nInserts a column with the specified label, alignment, and width at the specified location.\nApplies to\nListView controls\nSyntax\nlistviewname.InsertColumn ( index, label, alignment, width )\nTable 2.845:\nArgument\nDescription\nlistviewname\nThe name of the ListView control to which you want to insert a column.\nindex\nAn integer whose value is the number of the column before which you\nare inserting a new column.\nlabel\nA string whose value is the name of the column you are inserting.\nalignment\nA value of the enumerated datatype Alignment specifying the alignment\nof the column you are inserting. Values are:\nCenter!\nJustify!\nLeft!\nRight!\nwidth\nAn integer whose value is the width of the column you are inserting, in\nPowerBuilder units.\nReturn value\nInteger. Returns the column index value if it succeeds and -1 if an error occurs.\nUsage\nYou can insert a column anywhere in the control. If the index you specify is greater than the\ncurrent number of columns, the column is inserted after the last column.\nExamples\nThis example inserts a column named Location, makes it right-aligned, and sets the column\nwidth to 300:\nlv_list.InsertColumn(2 , \"Location\" , Right! , 300)\nSee also\nAddColumn\nDeleteColumn\n2.4.402 InsertComboBox\nDescription\nInserts a combo box in the panel or group of the RibbonBar control.\n"}
{"page": 936, "text": "Statements, Events, and Functions\nPage 936\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertComboBox ( Long ParentHandle, Long ItemHandleAfter, String\n SelectionChanged )\ncontrolname.InsertComboBox ( Long ParentHandle, Long ItemHandleAfter,\n RibbonComboBoxItem Item )\nTable 2.846:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nParentHandle\nThe handle of the panel or group into which you want to insert a combo\nbox.\nItemHandleAfter The handle of the item (check box, combo box, large button, small\nbutton, or group) on the same level after which you want to insert the\ncombo box.\nSelectionChanged The name of the SelectionChanged user event to be bound with the\ncombo box. The SelectionChanged user event for the combo box must\nhave two long parameters for receiving the handle and index number of\nthe combo box. For details, see SelectionChanged.\nItem\nA combo box item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the combo box must be defined correctly according\nto the requirements of RibbonComboBoxItem. For details, see Modified, Selected, and\nSelectionChanged.\nExample 1\nThis example inserts a combo box after another combo box in a panel. Both combo boxes are\nbound with the \"Ue_ComboBoxSelectionChanged\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox, ll_Handle_ComboBox2\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_ComboBox = rbb_1.InsertComboBoxFirst (ll_Handle_Panel,\n \"Ue_ComboBoxSelectionChanged\")\nll_Handle_ComboBox2 = rbb_1.InsertComboBox (ll_Handle_Panel, ll_Handle_ComboBox,\n \"Ue_ComboBoxSelectionChanged\")\n//Ue_ComboBoxSelectionChanged user event must have two long parameters for\n receiving the handle and \n"}
{"page": 937, "text": "Statements, Events, and Functions\nPage 937\n//index number of the selected ComboBox.\n//event type long ue_comboboxselectionchanged(long itemhandle, long index);\n//Integer li_Return\n//String ls_Text\n//\n//RibbonComboBoxItem lr_ComboBox\n//li_Return = rbb_1.GetComboBox(ItemHandle,lr_ComboBox)\n//If li_Return = 1 Then\n// ls_Text = lr_ComboBox.Text(Index)\n//End If\n//\n//Return 1\n//end event\nExample 2\nThis example inserts the \"MyComboBox2\" combo box after another combo box in a panel\nand binds it with \"Ue_ComboBoxSelectionChanged\", \"Ue_ComboBoxSelected\" and\n\"Ue_ComboBoxModified\" user events. It first defines a combo box item with various\nproperties (including Label, PictureName, SelectionChanged, Selected, Modified etc.) and\nthen inserts it after another combo box.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox, ll_Handle_ComboBox2\nRibbonComboBoxItem lr_ComboBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_ComboBox = rbb_1.InsertComboBoxFirst (ll_Handle_Panel,\n \"Ue_ComboBoxSelectionChanged\")\nlr_ComboBox.Label = \"MyComboBox2\"\nlr_ComboBox.PictureName = \"HelpSmall!\"\nlr_ComboBox.SelectionChanged = \"Ue_ComboBoxSelectionChanged\"\nlr_ComboBox.Selected = \"Ue_ComboBoxSelected\"\nlr_ComboBox.Modified = \"Ue_ComboBoxModified\"\nll_Handle_ComboBox2 = rbb_1.InsertComboBox (ll_Handle_Panel, ll_Handle_ComboBox,\n lr_ComboBox)\n//Ue_ComboBoxModified user event must have a long parameter for receiving the\n handle\n//of ComboBox that is changed.\n//event type long ue_comboboxmodified(long itemhandle);\n//RibbonComboBoxItem lr_ComboBox\n//rbb_1.GetComboBox(ItemHandle,lr_ComboBox)\n////...\n//\n//return 1\n//end event\n//Ue_ComboBoxSelected user event must have a long parameter for receiving the\n handle \n//of ComboBox where the mouse is hovering over.\n//event type long ue_comboboxselected(long itemhandle);\n//RibbonComboBoxItem lr_ComboBox\n//rbb_1.GetComboBox(ItemHandle,lr_ComboBox)\n////...\n//\n//return 1\n//end event\nSee also\nInsertComboBoxFirst\n"}
{"page": 938, "text": "Statements, Events, and Functions\nPage 938\nInsertComboBoxLast\nDeleteComboBox\nSetComboBox\nGetComboBox\nGetChildItemByIndex\n2.4.403 InsertComboBoxFirst\nDescription\nInserts a combo box as the first item in the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertComboBoxFirst ( Long ParentHandle, String SelectionChanged )\ncontrolname.InsertComboBoxFirst ( Long ParentHandle, RibbonComboBoxItem Item )\nTable 2.847:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nParentHandle\nThe handle of the panel or group in which you want to insert a combo\nbox.\nSelectionChanged The name of the SelectionChanged user event to be bound with the\ncombo box. The SelectionChanged user event for the combo box must\nhave two long parameters for receiving the handle and index number of\nthe combo box. For details, see SelectionChanged.\nItem\nA combo box item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the combo box must be defined correctly according\nto the requirements of RibbonComboBoxItem. For details, see Modified, Selected, and\nSelectionChanged.\nExample 1\nThis example inserts a combo box as the first item in a panel and binds it with the\n\"Ue_ComboBoxSelectionChanged\" user event, and then inserts another combo box as the\nfirst item in a group and binds it with the same \"Ue_ComboBoxSelectionChanged\" user\nevent.\n"}
{"page": 939, "text": "Statements, Events, and Functions\nPage 939\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox, ll_Handle_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_ComboBox = rbb_1.InsertComboBoxFirst (ll_Handle_Panel,\n \"Ue_ComboBoxSelectionChanged\")\n//Group\nll_Handle_Group = rbb_1.InsertGroupLast (ll_Handle_Panel)\nll_Handle_ComboBox = rbb_1.InsertComboBoxFirst (ll_Handle_Group,\n \"Ue_ComboBoxSelectionChanged\")\nExample 2\nThis example inserts the \"MyComboBox\" combo box as the first item in a panel and\nbinds it with the \"Ue_ComboBoxSelectionChanged\", \"Ue_ComboBoxSelected\", and\n\"Ue_ComboBoxModified\" user events. It first defines a combo box item with various\nproperties (including Label, PictureName, SelectionChanged, Selected, Modified etc.) and\nthen inserts it as the first item in a panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox\nRibbonComboBoxItem lr_ComboBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_ComboBox.Label = \"MyComboBox\"\nlr_ComboBox.PictureName = \"HelpSmall!\"\nlr_ComboBox.SelectionChanged = \"Ue_ComboBoxSelectionChanged\"\nlr_ComboBox.Selected = \"Ue_ComboBoxSelected\"\nlr_ComboBox.Modified = \"Ue_ComboBoxModified\"\nll_Handle_ComboBox = rbb_1.InsertComboBoxFirst (ll_Handle_Panel, lr_ComboBox)\nSee also\nInsertComboBox\nInsertComboBoxLast\nDeleteComboBox\nSetComboBox\nGetComboBox\nGetChildItemByIndex\n2.4.404 InsertComboBoxLast\nDescription\nInserts a combo box as the last item in the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertComboBoxLast ( Long ParentHandle, String SelectionChanged )\ncontrolname.InsertComboBoxLast ( Long ParentHandle, RibbonComboBoxItem Item )\n"}
{"page": 940, "text": "Statements, Events, and Functions\nPage 940\nTable 2.848:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nParentHandle\nThe handle of the panel or group into which you want to insert a combo\nbox.\nSelectionChanged The name of the SelectionChanged user event to be bound with the\ncombo box. The SelectionChanged user event for the combo box must\nhave two long parameters for receiving the handle and index number of\nthe combo box. For details, see SelectionChanged.\nItem\nA combo box item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the combo box must be defined correctly according\nto the requirements of RibbonComboBoxItem. For details, see Modified, Selected, and\nSelectionChanged.\nExample 1\nThis example inserts a combo box as the last item in a panel and binds it with the\n\"Ue_ComboBoxSelectionChanged\" user event, and then inserts another combo box as the\nlast item in a group and binds it with the same \"Ue_ComboBoxSelectionChanged\" user\nevent.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox, ll_Handle_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_ComboBox = rbb_1.InsertComboBoxLast (ll_Handle_Panel,\n \"Ue_ComboBoxSelectionChanged\")\n//Group\nll_Handle_Group = rbb_1.InsertGroupLast (ll_Handle_Panel)\nll_Handle_ComboBox = rbb_1.InsertComboBoxLast (ll_Handle_Group,\n \"Ue_ComboBoxSelectionChanged\")\nExample 2\nThis example inserts the \"MyComboBox\" combo box as the last item in a panel and\nbinds it with the \"Ue_ComboBoxSelectionChanged\", \"Ue_ComboBoxSelected\", and\n\"Ue_ComboBoxModified\" user events. It first defines a combo box item with various\nproperties (including Label, PictureName, SelectionChanged, Selected, Modified etc.) and\nthen inserts it as the last item.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox\nRibbonComboBoxItem lr_ComboBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\n"}
{"page": 941, "text": "Statements, Events, and Functions\nPage 941\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_ComboBox.Label = \"MyComboBox\"\nlr_ComboBox.PictureName = \"HelpSmall!\"\nlr_ComboBox.SelectionChanged = \"Ue_ComboBoxSelectionChanged\"\nlr_ComboBox.Selected = \"Ue_ComboBoxSelected\"\nlr_ComboBox.Modified = \"Ue_ComboBoxModified\"\nll_Handle_ComboBox = rbb_1.InsertComboBoxLast (ll_Handle_Panel, lr_ComboBox)\nSee also\nInsertComboBox\nInsertComboBoxFirst\nDeleteComboBox\nSetComboBox\nGetComboBox\nGetChildItemByIndex\n2.4.405 InsertData\nDescription\nInserts a data point in a series of a graph. You can specify the category for the data point or\nits position in the series. Does not apply to scatter graphs.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects, because their data comes directly from the DataWindow.\nSyntax\ncontrolname.InsertData ( seriesnumber, datapoint, datavalue {, categoryvalue } )\nTable 2.849:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to insert data into a series.\nseriesnumber\nThe number that identifies the series in which you want to insert data.\ndatapoint\nThe number of the data point before which you want to insert the data.\ndatavalue\nThe value of the data point you want to insert.\ncategoryvalue\n(optional)\nThe category for this data value on the category axis. The datatype of\ncategoryvalue should match the datatype of the category axis. In most\ncases, you should include categoryvalue. Otherwise, an uncategorized\nvalue will be added to the series.\nReturn value\nInteger. Returns the number of the data value if it succeeds and -1 if an error occurs. If any\nargument's value is null, InsertData returns null.\nUsage\n"}
{"page": 942, "text": "Statements, Events, and Functions\nPage 942\nWhen you specify datapoint without specifying categoryvalue, InsertData inserts the data\npoint in the category at that position, shifting existing data points to the following categories.\nThe shift may cause there to be uncategorized data points at the end of the axis.\nWhen you specify categoryvalue, InsertData ignores the position in datapoint and puts the\ndata point in the specified category, replacing any data value that is already there. If the\ncategory does not exist, InsertData creates the category at the end of the axis.\nTo modify the value of a data point at a specified position, use ModifyData.\nScatter graphs\nTo add data to a scatter graph, use Syntax 2 of AddData.\nEquivalent syntax\nIf you want to add a data point to the end of a series or to an existing category in a series, you\ncan use AddData instead, which requires fewer arguments.\nInsertData and ModifyData behave differently when you specify datapoint to indicate a\nposition for inserting or modifying data. However, they behave the same as AddData when\nyou specify a position of 0 and a category. All three modify the value of a data point when\nthe category already exists. All three insert a category with a data value at the end of the axis\nwhen the category does not exist.\nWhen you specify a position as well as a category, and that category already exists,\nInsertData ignores the position and modifies the data of the specified category, but\nModifyData changes the category label at that position.\nThis statement:\ngr_data.InsertData(1, 0, 44, \"Qty\")\nis equivalent to:\ngr_data.ModifyData(1, 0, 44, \"Qty\")\nand is also equivalent to:\ngr_data.AddData(1, 44, \"Qty\")\nWhen you specify a position, the following statements are not equivalent:\n\u2022 InsertData ignores the position and modifies the data value of the Qty category:\ngr_data.InsertData(1, 4, 44, \"Qty\")\n\u2022 ModifyData changes the category label and the data value at position 4:\ngr_data.ModifyData(1, 4, 44, \"Qty\")\nExamples\nAssuming the category label Jan does not already exist, these statements insert a data value\nin the series named Costs before the data point for Mar and assign the data point the category\nlabel Jan in the graph gr_product_data:\ninteger SeriesNbr, CategoryNbr\n"}
{"page": 943, "text": "Statements, Events, and Functions\nPage 943\n \n// Get the numbers of the series and category.\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\nCategoryNbr = gr_product_data.FindCategory(\"Mar\")\ngr_product_data.InsertData(SeriesNbr, &\n    CategoryNbr, 1250, \"Jan\")\nThese statements insert the data value 1250 after the data value for Apr in the series named\nRevenues in the graph gr_product_data. The data is inserted in the category after Apr, and the\nrest of the data, if any, moves over a category:\ninteger SeriesNbr, CategoryNbr\n \n// Get the number of the series and category.\nCategoryNbr = gr_product_data.FindCategory(\"Apr\")\nSeriesNbr = gr_product_data.FindSeries(\"Revenues\")\n \ngr_product_data.InsertData(SeriesNbr, &\n    CategoryNbr + 1, 1250)\nSee also\nAddData\nFindCategory\nFindSeries\nGetData\n2.4.406 InsertDocument\nDescription\nInserts a rich text format or plain text file into a RichTextEdit control, DataWindow control,\nor DataStore object. The new content is added in one of two ways:\n\u2022 The new content can be inserted at the insertion point.\n\u2022 The new content can replace all existing content.\nApplies to\nRichTextEdit controls, DataWindow controls, and DataStore objects\nSyntax\nrtename.InsertDocument ( filename, clearflag { , filetype } )\nTable 2.850:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control, DataWindow control, or\nDataStore object in which you want to display the file. The DataWindow\nobject in the DataWindow control (or DataStore) must be a RichTextEdit\nDataWindow.\nfilename\nA string whose value is the name of the file you want to display in the\nRichTextEdit control. Filename can include the file's path.\n"}
{"page": 944, "text": "Statements, Events, and Functions\nPage 944\nArgument\nDescription\nclearflag\nA boolean value specifying whether the new file will replace the current\ncontents of the control. Values are:\n\u2022 true -- Replace the current contents with the file\n\u2022 false -- Insert the file into the existing contents at the insertion point\nfiletype\n(optional)\nA value of the FileType enumerated datatype specifying the type of file\nbeing opened. Values are:\n\u2022 FileTypeRichText! -- (Default) The file being opened is in rich text\nformat (RTF)\n\u2022 FileTypeText! -- The file being opened is plain ASCII text (TXT)\n\u2022 FileTypeHTML! -- The file being opened is in HTML format (HTM or\nHTML)\n\u2022 FileTypeDoc! -- The file being opened is in Microsoft Word format\n(DOC)\nIf filetype is not specified, PowerBuilder uses the filename extension to\ndecide whether to read the file as rich text or plain text. If the extension\nis not one of the supported file type extensions, PowerBuilder attempts to\nread the file as rich text. To insert files with extensions such as INI, LOG,\nor SQL, you must specify FileTypeText!.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nInsertDocument returns null.\nUsage\nYou cannot insert a document into a rich text control when the control's DisplayOnly\nproperty is set to true. If you try to do this, PowerBuilder displays a runtime error message.\nWhen the control supports headers and footers (the HeaderFooter property is set to true),\ninserting a document can replace, but not add to, existing header and footer text. You must\nset clearflag to true to replace the existing header and footer text with header and footer text\nfrom the inserted document.\nNot all RTF formatting is supported. PowerBuilder supports version 1.2 of the RTF standard,\nexcept for the following:\n\u2022 No support for formatted tables\n\u2022 No drawing objects\nAny unsupported formatting is ignored.\nExamples\n"}
{"page": 945, "text": "Statements, Events, and Functions\nPage 945\nThis example inserts a document into rte_1 and reports the return value in a StaticText\ncontrol:\ninteger rtn\nrtn = rte_1.InsertDocument(\"c:\\pb\\test.rtf\", &\n    TRUE, FileTypeRichText!)\nst_status.Text = String(rtn)\nSee also\nInputFieldInsert\nInsertPicture\nDataSource\n2.4.407 InsertFile\nDescription\nInserts an object into an OLE control. A copy of the specified file is embedded in the OLE\nobject.\nSyntax\nolecontrol.InsertFile ( filename )\nTable 2.851:\nArgument\nDescription\nolecontrol\nThe name of the OLE control.\nfilename\nA string whose value is the name of the file whose contents you want to\nbe the data in the embedded OLE object. Filename should include the\nfile's path.\nReturn value\nInteger. Returns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- File not found\n-9 -- Other error\nIf any argument's value is null, InsertFile returns null.\nUsage\nThe contents of the specified file is embedded in the OLE object. There is no further link\nbetween the object in PowerBuilder and the file.\nExamples\nThis example creates a new OLE object in the control ole_1. It is an Excel object and\ncontains data from the spreadsheet EXPENSE.XLS:\ninteger result\nresult = ole_1.InsertFile(\"c:\\xls\\expense.xls\")\nSee also\n"}
{"page": 946, "text": "Statements, Events, and Functions\nPage 946\nInsertClass\nInsertObject\nLinkTo\nPaste\n2.4.408 InsertGroup\nDescription\nInserts a group in the panel of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertGroup ( Long PanelHandle, Long ItemHandleAfter )\ncontrolname.InsertGroup ( Long PanelHandle, Long ItemHandleAfter, RibbonGroupItem\n Item )\nTable 2.852:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nPanelHandle\nThe handle of the panel into which you want to insert a group.\nItemHandleAfter The handle of the item (check box, combo box, large button, small\nbutton, group) on the same level after which you want to insert the group.\nItem\nA group item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\nThis example inserts a group after another in the \"MyPanel\" panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group, ll_Handle_Group2\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupFirst (ll_Handle_Panel)\nll_Handle_Group2 = rbb_1.InsertGroup (ll_Handle_Panel, ll_Handle_Group)\nExample 2\nThis example defines a group item, specifies its NewLine property, and then inserts it after\nanother group in the \"MyPanel\" panel.\n"}
{"page": 947, "text": "Statements, Events, and Functions\nPage 947\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group, ll_Handle_Group2\nRibbonGroupItem lr_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupFirst (ll_Handle_Panel)\nlr_Group.newline = True\nll_Handle_Group2 = rbb_1.InsertGroup (ll_Handle_Panel, ll_Handle_Group, lr_Group)\nSee also\nInsertGroupFirst\nInsertGroupLast\nDeleteGroup\nSetGroup\nGetGroup\nGetChildItemByIndex\n2.4.409 InsertGroupFirst\nDescription\nInserts a group as the first item in the panel.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertGroupFirst ( Long PanelHandle )\ncontrolname.InsertGroupFirst ( Long PanelHandle, RibbonGroupItem Item )\nTable 2.853:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nPanelHandle\nThe handle of the panel into which you want to insert a group.\nItem\nA group item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\nThis example inserts a group as the first item in the \"MyPanel\" panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group\n"}
{"page": 948, "text": "Statements, Events, and Functions\nPage 948\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupFirst (ll_Handle_Panel)\nExample 2\nThis example also inserts a group as the first item in the \"MyPanel\" panel. It defines a group\nitem lr_Group and then inserts it as the first item in the \"MyPanel\" panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group\nRibbonGroupItem lr_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupFirst (ll_Handle_Panel, lr_Group)\nSee also\nInsertGroup\nInsertGroupLast\nDeleteGroup\nSetGroup\nGetGroup\nGetChildItemByIndex\n2.4.410 InsertGroupLast\nDescription\nInserts a group as the last item in the panel.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertGroupLast ( Long PanelHandle )\ncontrolname.InsertGroupLast ( Long PanelHandle, RibbonGroupItem Item )\nTable 2.854:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nPanelHandle\nThe handle of the panel into which you want to insert a group.\nItem\nA group item to be inserted.\nReturn value\nLong.\n"}
{"page": 949, "text": "Statements, Events, and Functions\nPage 949\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\nThis example inserts a group as the last item in the \"MyPanel\" panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupLast (ll_Handle_Panel)\nExample 2\nThis example also inserts a group as the last item in the \"MyPanel\" panel. It defines a group\nitem lr_Group and then inserts it as the last item in the \"MyPanel\" panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group\nRibbonGroupItem lr_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupLast (ll_Handle_Panel, lr_Group)\nSee also\nInsertGroup\nInsertGroupFirst\nDeleteGroup\nSetGroup\nGetGroup\nGetChildItemByIndex\n2.4.411 InsertItem\nInserts an item into a ListBox, RibbonComboBoxItem, ListView, TreeView, or RibbonMenu\ncontrol.\nTable 2.855:\nTo insert an item into a\nUse\nListBox or DropDownListBox control\nSyntax 1\nPictureListBox, DropDownPictureListBox, or RibbonComboBoxItem\ncontrol\nSyntax 2\nListView control when only the label and picture index need to be\nspecified\nSyntax 3\nListView control when more than the label and picture index need to be\nspecified\nSyntax 4\nTreeView control when only the label and picture index need to be\nspecified\nSyntax 5\n"}
{"page": 950, "text": "Statements, Events, and Functions\nPage 950\nTo insert an item into a\nUse\nTreeView control when more than the label and picture index need to be\nspecified\nSyntax 6\nRibbonMenu control\nSyntax 7\n2.4.411.1 Syntax 1: For ListBox and DropDownListBox controls\nDescription\nInserts an item into the list of values in a list box.\nApplies to\nListBox and DropDownListBox controls\nSyntax\nlistboxname.InsertItem ( item,  index )\nTable 2.856:\nArgument\nDescription\nlistboxname\nThe name of the ListBox or DropDownListBox into which you want to\ninsert an item\nitem\nA string whose value is the text of the item you want to insert\nindex\nThe number of the item in the list before which you want to insert the\nitem\nReturn value\nInteger. Returns the final position of the item. Returns -1 if an error occurs. If any argument's\nvalue is null, InsertItem returns null.\nUsage\nInsertItem inserts the new item before the item identified by index. If the items in\nlistboxname are sorted (its Sorted property is true), PowerBuilder resorts the items after the\nnew item is inserted. The return value reflects the new item's final position in the list.\nAddItem and InsertItem do not update the Items property array. You can use FindItem to find\nitems added at runtime.\nExamples\nThis statement inserts the item Run Application before the fifth item in lb_actions:\nlb_actions.InsertItem(\"Run Application\", 5)\nIf the Sorted property is false, the statement above returns 5 (the previous item 5 becomes\nitem 6). If the Sorted property is true, the list is sorted after the item is inserted and the\nfunction returns the index of the final position of the item.\nIf the ListBox lb_Cities has the following items in its list and its Sorted property is set to true,\nthen the following example inserts Denver at the top, sorts the list, and sets li_pos to 4. If the\n"}
{"page": 951, "text": "Statements, Events, and Functions\nPage 951\nListBox's Sorted property is false, then the statement inserts Denver at the top of the list and\nsets li_pos to 1. The list is:\nAlbany\nBoston\nChicago\nNew York\nThe example code is:\nstring ls_City = \"Denver\"\ninteger li_pos\nli_pos = lb_Cities.InsertItem(ls_City, 1)\nSee also\nAddItem\nDeleteItem\nFindItem\nReset\nTotalItems\n2.4.411.2 Syntax 2: For PictureListBox, DropDownPictureListBox, RibbonComboBoxItem\ncontrols\nDescription\nInserts an item into the list of values in a picture list box.\nApplies to\nPictureListBox, DropDownPictureListBox, and RibbonComboBoxItem controls\nSyntax\nlistboxname.InsertItem ( item {, pictureindex }, index )\nTable 2.857:\nArgument\nDescription\nlistboxname\nThe name of the PictureListBox or DropDownPictureListBox or\nRibbonComboBoxItem into which you want to insert an item\nitem\nA string whose value is the text of the item you want to insert\npictureindex\n(optional)\nAn integer specifying the index of the picture you want to associate with\nthe newly added item\nindex\nThe number of the item in the list before which you want to insert the\nitem\nReturn value\nInteger. Returns the final position of the item. Returns -1 if an error occurs. If any argument's\nvalue is null, InsertItem returns null.\nUsage\n"}
{"page": 952, "text": "Statements, Events, and Functions\nPage 952\nIf you do not specify a picture index, the newly added item will not have a picture.\nIf you specify a picture index that does not exist, that number is still stored with the picture.\nIf you add pictures to the picture array so that the index becomes valid, the item will then\nshow the corresponding picture.\nFor additional notes about items in ListBoxes and examples of how the Sorted property\naffects the item order, see Syntax 1.\nExamples\nThis statement inserts the item Run Application before the fifth item in plb_actions. The item\nhas no picture assigned to it:\nplb_actions.InsertItem(\"Run Application\", 5)\nThis statement inserts the item Run Application before the fifth item in plb_actions and\nassigns it picture index 4:\nplb_actions.InsertItem(\"Run Application\", 4, 5)\nThese statements insert three items to the ribbon combo box:\nInteger li_Return\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.SetBoxPictureList(\"PaperSizeA0Small!,PaperSizeA1Small!\")\nli_Return = lr_ComboBox.InsertItem(\"Item2\",1,1)\nli_Return = lr_ComboBox.InsertItem(\"Item3\",2,2)\nli_Return = lr_ComboBox.InsertItem(\"Item1\",1)\nSee also\nAddItem\nDeleteItem\nFindItem\nReset\nTotalItems\n2.4.411.3 Syntax 3: For ListView controls\nDescription\nInserts an item into a ListView control.\nApplies to\nListView controls\nSyntax\nlistviewname.InsertItem ( index, label, pictureindex )\nTable 2.858:\nArgument\nDescription\nlistviewname\nThe name of the ListView control to which you are adding an item\n"}
{"page": 953, "text": "Statements, Events, and Functions\nPage 953\nArgument\nDescription\nindex\nAn integer whose value is the index number of the item before which you\nare inserting a new item\nlabel\nA string whose value is the name of the item you are adding\npictureindex\nAn integer whose value is the index number of the picture of the item you\nare adding\nReturn value\nInteger. Returns index if it succeeds and -1 if an error occurs.\nUsage\nIf you need to set more than the label and picture index, use Syntax 4.\nExamples\nThis example inserts an item in the ListView in position 11:\nlv_list.InsertItem(11 , \"Presentation\" , 1)\nSee also\nAddItem\n2.4.411.4 Syntax 4: For ListView controls\nDescription\nInserts an item into a ListView control.\nApplies to\nListView controls\nSyntax\nlistviewname.InsertItem ( index, item )\nTable 2.859:\nArgument\nDescription\nlistviewname\nThe name of the ListView control into which you are inserting an item\nindex\nAn integer whose value is the index number of the item you are adding\nitem\nA system structure of datatype ListViewItem in which InsertItem stores\nthe item you are inserting\nReturn value\nInteger. Returns index if it succeeds and -1 if an error occurs.\nUsage\nThe index you specify is the position of the item you are adding to a ListView.\nIf you need to insert just the label and picture index into the ListView control, use Syntax 3.\n"}
{"page": 954, "text": "Statements, Events, and Functions\nPage 954\nExamples\nThis example moves a ListView item from the second position into the fifth position. It uses\nGetItem to retrieve the state information from item 2, inserts it into the ListView control as\nitem 5, and then deletes the original item:\nlistviewitem l_lvi\nlv_list.GetItem(2 , l_lvi)\nlv_list.InsertItem(5 , l_lvi)\nlv_list.DeleteItem(2)\nSee also\nAddItem\n2.4.411.5 Syntax 5: For TreeView controls\nDescription\nInserts an item at a specific level and order in a TreeView control.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.InsertItem ( handleparent, handleafter, label, pictureindex )\nTable 2.860:\nArgument\nDescription\ntreeviewname\nThe name of the TreeView control in which you want to insert an item.\nhandleparent\nThe handle of the item one level above the item you want to insert. To\ninsert an item at the first level, specify 0.\nhandleafter\nThe handle of the item on the same level that you will insert the item\nimmediately after.\nlabel\nThe label of the item you are inserting.\npictureindex\nThe Index of the index of the picture you are adding to the image list.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs.\nUsage\nUse this syntax to set just the label and picture index. Use the next syntax if you need to set\nadditional properties for the item.\nIf the TreeView's SortType property is set to a value other than Unsorted!, the inserted item is\nsorted with its siblings.\nIf you are inserting the first child of an item, use InsertItemLast or InsertItemFirst instead.\nThose functions do not require a handleafter value.\n"}
{"page": 955, "text": "Statements, Events, and Functions\nPage 955\nExamples\nThis example inserts a TreeView item that is on the same level as the current TreeView item.\nIt uses FindItem to get the current item and its parent, then inserts the new item beneath the\nparent item:\nlong ll_tvi, ll_tvparent\nll_tvi = tv_list.FindItem(currenttreeitem! , 0)\nll_tvparent = tv_list.FindItem(parenttreeitem!,ll_tvi)\ntv_list.InsertItem(ll_tvparent,ll_tvi,\"Hindemith\", 2)\nSee also\nGetItem\n2.4.411.6 Syntax 6: For TreeView controls\nDescription\nInserts an item at a specific level and order in a TreeView control.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.InsertItem ( handleparent, handleafter, item )\nTable 2.861:\nArgument\nDescription\ntreeviewname\nThe name of the TreeView control into which you want to insert an item.\nhandleparent\nThe handle of the item one level above the item you want to insert. To\ninsert an item at the first level, specify 0.\nhandleafter\nThe handle of the item on the same level that you will insert the item\nimmediately after.\nitem\nA TreeViewItem structure for the item you are inserting.\nReturn value\nLong.\nReturns the handle of the item inserted if it succeeds and -1 if an error occurs.\nUsage\nUse the previous syntax to set just the label and picture index. Use this syntax if you need to\nset additional properties for the item.\nIf the TreeView's SortType property is set to a value other than Unsorted!, the inserted item is\nsorted with its siblings.\nIf you are inserting the first child of an item, use InsertItemLast or InsertItemFirst instead.\nThose functions do not require a handleafter value.\nExamples\n"}
{"page": 956, "text": "Statements, Events, and Functions\nPage 956\nThis example inserts a TreeView item that is on the same level as the current TreeView item.\nIt uses FindItem to get the current item and its parent, then inserts the new item beneath the\nparent item:\nlong ll_tvi, ll_tvparent\ntreeviewitem  l_tvi\nll_tvi = tv_list.FindItem(currenttreeitem! , 0)\nll_tvparent = tv_list.FindItem(parenttreeitem!,ll_tvi)\ntv_list.GetItem(ll_tvi , l_tvi)\ntv_list.InsertItem(ll_tvparent,ll_tvi, l_tvi)\nSee also\nGetItem\n2.4.411.7 Syntax 7: For RibbonMenu controls\nDescription\nInserts a menu item at the specified position in a ribbon menu.\nApplies to\nRibbonMenu control\nSyntax\ncontrolname.InsertItem ({Long ParentIndex, } Long Index, String Text, String\n PictureName, String Clicked )\ncontrolname.InsertItem ({Long ParentIndex, } Long Index, RibbonMenuItem Item )\nTable 2.862:\nArgument\nDescription\ncontrolname\nThe name of the RibbonMenu control into which you want to insert a\nmenu item.\nParentIndex\nThe index of the menu item (RibbonMenuItem) into which you want to\ninsert a submenu item.\nIt cannot be an index of a separator (that is RibbonMenuItem with\nItemType 1). If not specified, a menu item will be inserted at the\nspecified position; if specified to a valid value, a submenu item will be\ninserted at the specified position under the menu item (whose index is\nParentIndex); if specified to an invalid value, an error would occur and\nthis operation would return -1.\nIndex\nThe index number of the menu item or submenu item before which you\nare inserting a new menu item. If index is invalid, an error would occur\nand this operation would return -1.\nText\nThe text that displays in the menu item or submenu item.\nPictureName\nThe name of the file that contains the picture. The image is displayed in\n16*16 pixels.\nClicked\nThe name of the Clicked user event to be bound with the menu item. The\nClicked user event for the menu item must be defined with the required\nparameters and types. For details, see Clicked.\n"}
{"page": 957, "text": "Statements, Events, and Functions\nPage 957\nArgument\nDescription\nItem\nA RibbonMenuItem item you want to insert. Only RibbonMenuItem\nwith \"Normal(0)\" or \"Separator(1)\" ItemType is supported. If\nRibbonMenuItem is with other ItemType such as \"Recent(2)\", an error\nwould occur and this operation would return -1.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly menu items with the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with\nItemType 0 or 1) can be added to the RibbonMenu control.\nA RibbonMenu control can contain menu items in no more than two levels.\nThe user events to be bound with the menu item must be defined correctly according to the\nrequirements of RibbonMenuItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a \"MenuItem1\" menu item and then inserts two submenu items\n\"SubMenuItem1\" and \"SubMenuItem2\" under \"MenuItem1\".\nLong ll_Return, ll_Index\nRibbonMenu lr_Menu\nll_Index =  lr_Menu.InsertItem (1, \"MenuItem1\", \"AddSmall!\", \"Ue_MenuItem1Clicked\")\nll_Return =  lr_Menu.InsertItem (ll_Index, 1, \"SubMenuItem1\", \"AddSmall!\",\n \"Ue_SubMenuItem1Clicked\")\nll_Return =  lr_Menu.InsertItem (ll_Index, 2, \"SubMenuItem2\", \"AddSmall!\",\n \"Ue_SubMenuItem2Clicked\")\nExample 2\nThis example also inserts a \"MenuItem1\" menu item and then inserts two submenu\nitems \"SubMenuItem1\" and \"SubMenuItem2\" under \"MenuItem1\". It first defines three\nRibbonMenu items (lr_MenuItem1, lr_SubMenuItem1, lr_SubMenuItem2) with various\nproperties (including binding with \"Ue_MenuItem1Clicked\" and \"Ue_MenuItem1Selected\"\nuser events), and then inserts lr_MenuItem1 as the menu item, and lr_SubMenuItem1 and\nlr_SubMenuItem2 as the submenu items.\nLong ll_Return, ll_Index\nRibbonMenu lr_Menu\nRibbonMenuItem lr_MenuItem1, lr_SubMenuItem1, lr_SubMenuItem2\nlr_MenuItem1.Text = \"MenuItem1\"\nlr_MenuItem1.PictureName = \"AddSmall!\"\nlr_MenuItem1.Clicked = \"Ue_MenuItem1Clicked\"\nlr_MenuItem1.Selected = \"Ue_MenuItem1Selected\"\nlr_SubMenuItem1.Text = \"SubMenuItem1\"\nlr_SubMenuItem2.Text = \"SubMenuItem2\"\nll_Index =  lr_Menu.InsertItem (1, lr_MenuItem1)\nll_Return =  lr_Menu.InsertItem (ll_Index, 1, lr_SubMenuItem1)\n"}
{"page": 958, "text": "Statements, Events, and Functions\nPage 958\nll_Return =  lr_Menu.InsertItem (ll_Index, 2, lr_SubMenuItem2)\nSee also\nAddSeparatorItem\nDeleteItem\nGetItem\nGetItemCount\nInsertItemFirst\nInsertItemLast\nSetItem\n2.4.412 InsertItemFirst\nInserts an item as the first child of a parent item.\nTable 2.863:\nTo insert an item as the first child of its parent\nUse\nWhen you only need to specify the item label and picture index\nSyntax 1\nWhen you need to specify more than the item label and picture index\nSyntax 2\nRibbonMenu control\nSyntax 3\n2.4.412.1 Syntax 1: For TreeView controls\nDescription\nInserts an item as the first child of its parent.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.InsertItemFirst ( handleparent, label, pictureindex )\nTable 2.864:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to specify an item as the first\nchild of its parent.\nhandleparent\nThe handle of the item that will be the inserted item's parent. To insert the\nitem at the first level, specify 0.\nlabel\nThe label of the item you want to specify as the first child of its parent.\npictureindex\nThe picture index for the item you want to specify as the first child of its\nparent.\nReturn value\n"}
{"page": 959, "text": "Statements, Events, and Functions\nPage 959\nLong.\nReturns the handle of the item inserted if it succeeds and -1 if an error occurs.\nExamples\nThis example populates the first level of a TreeView using InsertItemFirst:\nlong ll_lev1, ll_lev2 ,ll_lev3 ,ll_lev4\nint index\ntv_list.PictureHeight = 32\ntv_list.PictureWidth = 32\nll_lev1 = tv_list.InsertItemFirst(0,\"Composers\",1)\nll_lev2 = tv_list.InsertItemLast(ll_lev1, &\n    \"Beethoven\",2)\nll_lev3 = tv_list.InsertItemLast(ll_lev2, &\n    \"Symphonies\", 3)\nFOR index = 1 to 9\n    ll_lev4 = tv_list.InsertItemSort(ll_lev3, &\n      \"Symphony # \" + String(index) , 4)\nNEXT\ntv_list.ExpandItem(ll_lev3)\ntv_list.ExpandItem(ll_lev4)\nSee also\nInsertItem\nInsertItemLast\nInsertItemSort\n2.4.412.2 Syntax 2: For TreeView controls\nDescription\nInserts an item as the first child of an item.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.InsertItemFirst ( handleparent, item )\nTable 2.865:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to specify an item as the first\nchild of its parent.\nhandleparent\nThe handle of the item that will be the inserted item's parent. To insert the\nitem at the first level, specify 0.\nitem\nA TreeViewItem structure for the item you are inserting.\nReturn value\nLong.\nReturns the handle of the item inserted if it succeeds and -1 if an error occurs.\n"}
{"page": 960, "text": "Statements, Events, and Functions\nPage 960\nUsage\nIf SortType is anything except Unsorted!, items are sorted after they are added and the\nTreeView is always in a sorted state. Therefore, calling InsertItemFirst, InsertItemLast, and\nInsertItemSort produces the same result.\nExamples\nThis example inserts the current item as the first item beneath the root item in a TreeView\ncontrol:\nlong          ll_handle, ll_roothandle\ntreeviewitem  l_tvi\nll_handle = tv_list.FindItem(CurrentTreeItem!, 0)\nll_roothandle = tv_list.FindItem(RootTreeItem!, 0)\ntv_list.GetItem(ll_handle , l_tvi)\n \ntv_list.InsertItemFirst(ll_roothandle, l_tvi)\nSee also\nInsertItem\nInsertItemLast\nInsertItemSort\n2.4.412.3 Syntax 3: For RibbonMenu controls\nDescription\nInserts a menu item as the first item in a ribbon menu.\nApplies to\nRibbonMenu control\nSyntax\ncontrolname.InsertItemFirst ( { Long ParentIndex, } String Text, String\n PictureName, String Clicked )\ncontrolname.InsertItemFirst ( { Long ParentIndex, } RibbonMenuItem Item )\nTable 2.866:\nArgument\nDescription\ncontrolname\nThe RibbonMenu control into which you want to insert a menu item as\nthe first item.\nParentIndex\nThe index of the menu item (RibbonMenuItem) into which you want to\ninsert a submenu item.\nIt cannot be an index of a separator (that is RibbonMenuItem with\nItemType 1). If not specified, a menu item will be inserted as the first\nitem; if specified to a valid value, a submenu item will be inserted as the\nfirst item under the menu item (whose index is ParentIndex); if specified\nto an invalid value, an error would occur and this operation would return\n-1.\nText\nThe text that displays in the menu item or submenu item.\n"}
{"page": 961, "text": "Statements, Events, and Functions\nPage 961\nArgument\nDescription\nPictureName\nThe name of the file that contains the picture. The image will be\ndisplayed in 16*16 pixels.\nClicked\nThe name of the Clicked user event to be bound with the menu item. The\nClicked user event for the menu item must be defined with the required\nparameters and types. For details, see Clicked.\nItem\nA RibbonMenuItem item you want to insert. Only RibbonMenuItem\nwith \"Normal(0)\" or \"Separator(1)\" ItemType is supported. If\nRibbonMenuItem is with other ItemType such as \"Recent(2)\", an error\nwould occur and this operation would return -1.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly menu items with the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with\nItemType 0 or 1) can be added to the RibbonMenu control.\nA RibbonMenu control can contain menu items in no more than two levels.\nThe user events to be bound with the menu item must be defined correctly according to the\nrequirements of RibbonMenuItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a \"MenuItem1\" menu item as the first item and then inserts two\nsubmenu items under \"MenuItem1\" in the following display order: \"SubMenuItem1\",\n\"SubMenuItem2\".\nLong ll_Return,ll_Index\nRibbonMenu lr_Menu\nll_Index =  lr_Menu.InsertItemFirst(\"MenuItem1\",\"AddSmall!\",\"Ue_MenuItem1Clicked\")\nll_Return = \n lr_Menu.InsertItemFirst(ll_Index,\"SubMenuItem2\",\"AddSmall!\",\"Ue_MenuItem12Clicked\")\nll_Return = \n lr_Menu.InsertItemFirst(ll_Index,\"SubMenuItem1\",\"AddSmall!\",\"Ue_MenuItem11Clicked\")\nExample 2\nThis example also inserts a \"MenuItem1\" menu item as the first item and then\ninserts two submenu items under \"MenuItem1\" in the following display order:\n\"SubMenuItem1\", \"SubMenuItem2\". It first defines three RibbonMenu items (lr_MenuItem1,\nlr_SubMenuItem1, lr_SubMenuItem2) with various properties (including binding with\nthe \"Ue_MenuItem1Clicked\" and \"Ue_MenuItem1Selected\" user events), and then inserts\nlr_MenuItem1 as the first menu item \"MenuItem1\", and inserts the other two as the\nsubmenu items under \"MenuItem1\" in the following display order: \"SubMenuItem1\",\n\"SubMenuItem2\".\nLong ll_Return,ll_Index\nRibbonMenu lr_Menu\n"}
{"page": 962, "text": "Statements, Events, and Functions\nPage 962\nRibbonMenuItem lr_MenuItem1,lr_SubMenuItem1,lr_SubMenuItem2\nlr_MenuItem1.Text = \"MenuItem1\"\nlr_MenuItem1.PictureName = \"AddSmall!\"\nlr_MenuItem1.Clicked = \"Ue_MenuItem1Clicked\"\nlr_MenuItem1.Selected = \"Ue_MenuItem1Selected\"\nlr_SubMenuItem1.Text = \"SubMenuItem1\"\nlr_SubMenuItem2.Text = \"SubMenuItem2\"\nll_Index =  lr_Menu.InsertItemFirst(lr_MenuItem1)\nll_Return =  lr_Menu.InsertItemFirst(ll_Index,lr_SubMenuItem2)\nll_Return =  lr_Menu.InsertItemFirst(ll_Index,lr_SubMenuItem1)\nSee also\nAddSeparatorItem\nDeleteItem\nGetItem\nGetItemCount\nInsertItem\nInsertItemLast\nSetItem\n2.4.413 InsertItemLast\nInserts an item as the last child of a parent item.\nTable 2.867:\nTo insert an item as the last child of its parent\nUse\nWhen you only need to specify the item label and picture index\nSyntax 1\nWhen you need to specify more than item label and picture index\nSyntax 2\nRibbonMenu control\nSyntax 3\n2.4.413.1 Syntax 1: For TreeView controls\nDescription\nInserts an item as the last child of its parent.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.InsertItemLast ( handleparent, label, pictureindex )\nTable 2.868:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to specify an item as the last\nchild of its parent.\n"}
{"page": 963, "text": "Statements, Events, and Functions\nPage 963\nArgument\nDescription\nhandleparent\nThe handle of the item that will be the inserted item's parent. To insert the\nitem at the first level, specify 0.\nlabel\nThe label of the item you want to specify as the last child of its parent.\npictureindex\nThe picture index for the item you want to specify as the last child of its\nparent.\nReturn value\nLong.\nReturns the handle of the item inserted if it succeeds and -1 if an error occurs.\nUsage\nIf more than the item label and Index need to be specified, use syntax 2.\nIf SortType is anything except Unsorted!, items are sorted after they are added and the\nTreeView is always in a sorted state. Therefore, calling InsertItemFirst, InsertItemLast, and\nInsertItemSort produces the same result.\nExamples\nThis example populates the first three levels of a TreeView using InsertItemLast:\nlong  ll_lev1, ll_lev2, ll_lev3, ll_lev4\nint   index\n \ntv_list.PictureHeight = 32\ntv_list.PictureWidth = 32\n \nll_lev1 = tv_list.InsertItemLast(0,\"Composers\",1)\nll_lev2 = tv_list.InsertItemLast(ll_lev1, &\n    \"Beethoven\",2)\nll_lev3 = tv_list.InsertItemLast(ll_lev2, &  \n    \"Symphonies\",3)\nFOR index = 1 to 9\n    ll_lev4 = tv_list.InsertItemSort(ll_lev3, &\n      \"Symphony # \" String(index), 4)\nNEXT\n \ntv_list.ExpandItem(ll_lev3)\ntv_list.ExpandItem(ll_lev4)\nSee also\nInsertItem\nInsertItemFirst\nInsertItemSort\n2.4.413.2 Syntax 2: For TreeView controls\nDescription\nInserts an item as the last child of its parent.\nApplies to\n"}
{"page": 964, "text": "Statements, Events, and Functions\nPage 964\nTreeView controls\nSyntax\ntreeviewname.InsertItemLast ( handleparent, item )\nTable 2.869:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to specify an item as the last\nchild of its parent.\nhandleparent\nThe handle of the item that will be the inserted item's parent. To insert the\nitem at the first level, specify 0.\nitem\nA TreeViewItem structure for the item you are inserting.\nReturn value\nLong.\nReturns the handle of the item inserted if it succeeds and -1 if an error occurs.\nUsage\nIf SortType is anything except Unsorted!, items are sorted after they are added and the\nTreeView is always in a sorted state. Therefore, calling InsertItemFirst, InsertItemLast, and\nInsertItemSort produces the same result.\nExamples\nThis example inserts the current item as the last item beneath the root item in a TreeView\ncontrol:\nlong         ll_handle, ll_roothandle\ntreeviewitem l_tvi\n \nll_handle = tv_list.FindItem(CurrentTreeItem!, 0)\nll_roothandle = tv_list.FindItem(RootTreeItem!, 0)\ntv_list.GetItem(ll_handle , l_tvi)\n \ntv_list.InsertItemLast(ll_roothandle, l_tvi)\nSee also\nInsertItem\nInsertItemFirst\nInsertItemSort\n2.4.413.3 Syntax 3: For RibbonMenu controls\nDescription\nInserts a menu item as the last item in a ribbon menu.\nApplies to\nRibbonMenu control\nSyntax\n"}
{"page": 965, "text": "Statements, Events, and Functions\nPage 965\ncontrolname.InsertItemLast ( { Long ParentIndex, } String Text, String PictureName,\n String Clicked )\ncontrolname.InsertItemLast ( { Long ParentIndex, } RibbonMenuItem Item )\nTable 2.870:\nArgument\nDescription\ncontrolname\nThe RibbonMenu control into which you want to insert a menu item as\nthe last item.\nParentIndex\nThe index of the menu item (RibbonMenuItem) into which you want to\ninsert a submenu item.\nIt cannot be an index of a separator (that is RibbonMenuItem with\nItemType 1). If not specified, a menu item will be inserted as the last\nitem; if specified to a valid value, a submenu item will be inserted as the\nlast item under the menu item (whose index is ParentIndex); if specified\nto an invalid value, an error would occur and this operation would return\n-1.\nText\nThe text that displays in the menu item or submenu item.\nPictureName\nThe name of the file that contains the picture. The image will be\ndisplayed in 16*16 pixels.\nClicked\nThe name of the Clicked user event to be bound with the menu item. The\nClicked user event for the menu item must be defined with the required\nparameters and types. For details, see Clicked.\nItem\nA RibbonMenuItem item you want to insert. Only RibbonMenuItem\nwith \"Normal(0)\" or \"Separator(1)\" ItemType is supported. If\nRibbonMenuItem is with other ItemType such as \"Recent(2)\", an error\nwould occur and this operation would return -1.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly menu items with the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with\nItemType 0 or 1) can be added to the RibbonMenu control.\nA RibbonMenu control can contain menu items in no more than two levels.\nThe user events to be bound with the menu item must be defined correctly according to the\nrequirements of RibbonMenuItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a \"MenuItem1\" menu item as the last item and then inserts two\nsubmenu items under \"MenuItem1\" in the following display order: \"SubMenuItem1\",\n\"SubMenuItem2\".\nLong ll_Return,ll_Index\n"}
{"page": 966, "text": "Statements, Events, and Functions\nPage 966\nRibbonMenu lr_Menu\nll_Index = lr_Menu.InsertItemLast (\"MenuItem1\", \"AddSmall!\", \"Ue_MenuItem1Clicked\")\nll_Return = lr_Menu.InsertItemLast (ll_Index, \"SubMenuItem1\", \"AddSmall!\",\n \"Ue_MenuItem11Clicked\")\nll_Return = lr_Menu.InsertItemLast (ll_Index, \"SubMenuItem2\", \"AddSmall!\",\n \"Ue_MenuItem12Clicked\")\nExample 2\nThis example also inserts a \"MenuItem1\" menu item as the last item and then\ninserts two submenu items under \"MenuItem1\" in the following display order:\n\"SubMenuItem1\", \"SubMenuItem2\". It first defines three RibbonMenu items (lr_MenuItem1,\nlr_SubMenuItem1, lr_SubMenuItem2) with various properties (including binding with\nthe \"Ue_MenuItem1Clicked\" and \"Ue_MenuItem1Selected\" user events), and then\ninserts lr_MenuItem1 as the last menu item \"MenuItem1\", and inserts the other two as\nthe submenu items under \"MenuItem1\" in the following display order: \"SubMenuItem1\",\n\"SubMenuItem2\".\nLong ll_Return, ll_Index\nRibbonMenu lr_Menu\nRibbonMenuItem lr_MenuItem1, lr_SubMenuItem1, lr_SubMenuItem2\nlr_MenuItem1.Text = \"MenuItem1\"\nlr_MenuItem1.PictureName = \"AddSmall!\"\nlr_MenuItem1.Clicked = \"Ue_MenuItem1Clicked\"\nlr_MenuItem1.Selected = \"Ue_MenuItem1Selected\"\nlr_SubMenuItem1.Text = \"SubMenuItem1\"\nlr_SubMenuItem2.Text = \"SubMenuItem2\"\nll_Index = lr_Menu.InsertItemLast (lr_MenuItem1)\nll_Return = lr_Menu.InsertItemLast (ll_Index, lr_SubMenuItem1)\nll_Return = lr_Menu.InsertItemLast (ll_Index, lr_SubMenuItem2)\nSee also\nAddSeparatorItem\nDeleteItem\nGetItem\nGetItemCount\nInsertItem\nInsertItemFirst\nSetItem\n2.4.414 InsertItemSort\nInserts a child item in sorted order under the parent item.\nTable 2.871:\nTo insert an item in sorted order\nUse\nWhen you only need to specify the item label and picture index\nSyntax 1\nWhen you need to specify more than the item label and picture index\nSyntax 2\n"}
{"page": 967, "text": "Statements, Events, and Functions\nPage 967\n2.4.414.1 Syntax 1: For TreeView controls\nDescription\nInserts an item in sorted order, if possible.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.InsertItemSort ( handleparent, label, pictureindex )\nTable 2.872:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to insert and sort an item as a\nchild of its parent, according to its label.\nhandleparent\nThe handle of the item that will be the inserted item's parent. To insert the\nitem at the first level, specify 0.\nlabel\nThe label by which you want to sort the item as a child of its parent.\npictureindex\nThe picture index for the item you want to sort as a child of its parent,\naccording to its label.\nReturn value\nLong.\nReturns the handle of the item inserted if it succeeds and -1 if an error occurs.\nUsage\nIf SortType is anything except Unsorted!, the TreeView is always in a sorted state and you do\nnot need to use InsertItemSort -- you can use any insert function.\nIf SortType is Unsorted!, InsertItemSort attempts to insert the item at the correct place in\nalphabetic ascending order. If the list is out of order, it does its best to find the correct place,\nbut results may be unpredictable.\nExamples\nThis example populates the fourth level of a TreeView control:\nlong ll_lev1, ll_lev2, ll_lev3, ll_lev4\nint  index\n \ntv_list.PictureHeight = 32\ntv_list.PictureWidth = 32\n \nll_lev1 = tv_list.InsertItemLast(0,\"Composers\",1)\nll_lev2 = tv_list.InsertItemLast(ll_lev1,&\n    \"Beethoven\",2)\nll_lev3 = tv_list.InsertItemLast(ll_lev2,&\n    \"Symphonies\",3)\nFOR index = 1 to 9\n    ll_lev4 = tv_list.InsertItemSort(ll_lev3, &\n      \"Symphony # \" + String(index), 4)\nNEXT\n"}
{"page": 968, "text": "Statements, Events, and Functions\nPage 968\n \ntv_list.ExpandItem(ll_lev3)\ntv_list.ExpandItem(ll_lev4)\nSee also\nInsertItem\nInsertItemLast\nInsertItemFirst\n2.4.414.2 Syntax 2: For TreeView controls\nDescription\nInserts an item in sorted order, if possible.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.InsertItemSort ( handleparent, item )\nTable 2.873:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to sort an item as a child of its\nparent, according to its label.\nhandleparent\nThe handle of the item that will be the inserted item's parent. To insert the\nitem at the first level, specify 0.\nitem\nA TreeViewItem structure for the item you are inserting.\nReturn value\nLong.\nReturns the handle of the item inserted if it succeeds and -1 if an error occurs.\nUsage\nIf SortType is anything except Unsorted!, the TreeView is always in a sorted state and you do\nnot need to use InsertItemSort -- you can use any insert function.\nIf SortType is Unsorted!, InsertItemSort attempts to insert the item at the correct place in\nalphabetic ascending order. If the list is out of order, it does its best to find the correct place,\nbut results may be unpredictable.\nExamples\nThis example inserts the current item beneath the root item in a TreeView control and sorts it\naccording to its label:\nlong ll_handle, ll_roothandle\ntreeviewitem l_tvi\n \nll_handle = tv_list.FindItem(CurrentTreeItem!, 0)\n"}
{"page": 969, "text": "Statements, Events, and Functions\nPage 969\nll_roothandle = tv_list.FindItem(RootTreeItem!, 0)\ntv_list.GetItem(ll_handle , l_tvi)\n \ntv_list.InsertItemSort(ll_roothandle, l_tvi)\nSee also\nInsertItem\nInsertItemLast\nInsertItemFirst\n2.4.415 InsertLargeButton\nDescription\nInserts a large button in the panel of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertLargeButton ( Long PanelHandle, Long ItemHandleAfter, String\n Text, String PictureName, String Clicked )\ncontrolname.InsertLargeButton ( Long PanelHandle, Long ItemHandleAfter,\n RibbonLargeButtonItem Item )\nTable 2.874:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nPanelHandle\nThe handle of the panel into which you want to insert a large button.\nItemHandleAfter The handle of the item (check box, combo box, large button, small\nbutton, group) on the same level after which you want to insert the large\nbutton.\nText\nThe text that displays in the large button.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n32*32.\nClicked\nThe name of the Clicked user event to be bound with the large button.\nThe Clicked user event for the large button must have a long parameter\nfor receiving the handle of the large button. For details, see Clicked.\nItem\nA large button item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\n"}
{"page": 970, "text": "Statements, Events, and Functions\nPage 970\nThe user events to be bound with the large button must be defined correctly according to the\nrequirements of RibbonLargeButtonItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a \"Delete\" large button after the \"Add\" large button in the \"MyPanel\"\npanel. Both buttons are bound with the \"Ue_LargeButtonClicked\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton,\n ll_Handle_LargeButton2\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_LargeButton = rbb_1.InsertLargeButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddBig!\", \"Ue_LargeButtonClicked\")\nll_Handle_LargeButton2 = rbb_1.InsertLargeButton (ll_Handle_Panel,\n ll_Handle_LargeButton, \"Delete\", \"DeleteBig!\", \"Ue_LargeButtonClicked\")\n//Ue_LargeButtonClicked user event must have a long parameter for receiving the\n handle \n//of LargeButton where the mouse is clicking.\n//event type long ue_largebuttonclicked(long itemhandle);\n//RibbonLargeButtonItem lr_LargeButton\n//rbb_1.GetLargeButton(ItemHandle,lr_LargeButton)\n////...\n//Return 1\n//end event\nExample 2\nThis example inserts a \"Delete\" large button after the \"Add\" large button in the \"MyPanel\"\npanel. It first defines a large button item with various properties (including Text,\nPictureName, Clicked, SSelected etc.) and then inserts it after the \"Add' large button. The\n\"Add\" button is bound with the \"Ue_LargeButtonClicked\" user event, and the \"Delete\"\nbutton is bound with the \"Ue_LargeButtonClicked\" and \"Ue_LargeButtonSelected\" user\nevents.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton,\n ll_Handle_LargeButton2\nRibbonLargeButtonItem lr_LargeButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_LargeButton = rbb_1.InsertLargeButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddBig!\", \"Ue_LargeButtonClicked\")\nlr_LargeButton.Text = \"Delete\"\nlr_LargeButton.PictureName = \"DeleteBig!\"\nlr_LargeButton.Clicked = \"Ue_LargeButtonClicked\"\nlr_LargeButton.Selected = \"Ue_LargeButtonSelected\"\nll_Handle_LargeButton2 = rbb_1.InsertLargeButton (ll_Handle_Panel,\n ll_Handle_LargeButton, lr_LargeButton)\n//Ue_LargeButtonSelected user event must have a long parameter for receiving the\n handle \n//of LargeButton where the mouse is hovering over.\n//event type long ue_largebuttonselected(long itemhandle);\n//RibbonLargeButtonItem lr_LargeButton\n//rbb_1.GetLargeButton(ItemHandle,lr_LargeButton)\n////...\n//\n"}
{"page": 971, "text": "Statements, Events, and Functions\nPage 971\n//Return 1\n//end event\nSee also\nInsertLargeButtonFirst\nInsertLargeButtonLast\nDeleteLargeButton\nSetLargeButton\nGetLargeButton\nGetChildItemByIndex\n2.4.416 InsertLargeButtonFirst\nDescription\nInserts a large button as the first item in the panel of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertLargeButtonFirst ( Long PanelHandle, String Text, String\n PictureName, String Clicked )\ncontrolname.InsertLargeButtonFirst ( Long PanelHandle, RibbonLargeButtonItem Item )\nTable 2.875:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nPanelHandle\nThe handle of the panel into which you want to insert a large button.\nText\nThe text that displays in the large button.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n32*32.\nClicked\nThe name of the Clicked user event to be bound with the large button.\nThe Clicked user event for the large button must have a long parameter\nfor receiving the handle of the large button. For details, see Clicked.\nItem\nA large button item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the large button must be defined correctly according to the\nrequirements of RibbonLargeButtonItem. For details, see Clicked and Selected.\n"}
{"page": 972, "text": "Statements, Events, and Functions\nPage 972\nExample 1\nThis example inserts the \"Add\" large button as the first item in the panel and binds it with the\n\"Ue_LargeButtonClicked\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_LargeButton = rbb_1.InsertLargeButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddBig!\", \"Ue_LargeButtonClicked\")\nExample 2\nThis example defines a large button item with various properties (including binding with the\n\"Ue_LargeButtonClicked\" and \"Ue_LargeButtonSelected\" user events) and then inserts it as\nthe first item in the panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton\nRibbonLargeButtonItem lr_LargeButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_LargeButton.Text = \"Add\"\nlr_LargeButton.PictureName = \"AddBig!\"\nlr_LargeButton.Clicked = \"Ue_LargeButtonClicked\"\nlr_LargeButton.Selected = \"Ue_LargeButtonSelected\"\nll_Handle_LargeButton = rbb_1.InsertLargeButtonFirst (ll_Handle_Panel,\n lr_LargeButton)\nSee also\nInsertLargeButton\nInsertLargeButtonFirst\nInsertLargeButtonLast\nDeleteLargeButton\nSetLargeButton\nGetLargeButton\nGetChildItemByIndex\n2.4.417 InsertLargeButtonLast\nDescription\nInserts a large button as the last item in the panel of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertLargeButtonLast ( Long PanelHandle, String Text, String\n PictureName, String Clicked )\ncontrolname.InsertLargeButtonLast ( Long PanelHandle, RibbonLargeButtonItem Item )\n"}
{"page": 973, "text": "Statements, Events, and Functions\nPage 973\nTable 2.876:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nPanelHandle\nThe handle of the panel into which you want to insert a large button.\nText\nThe text that displays in the large button.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n32*32.\nClicked\nThe name of the Clicked user event to be bound with the large button.\nThe Clicked user event for the large button must have a long parameter\nfor receiving the handle of the large button. For details, see Clicked.\nItem\nA large button item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the large button must be defined correctly according to the\nrequirements of RibbonLargeButtonItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts the \"Add\" large button as the last item in the panel and binds it with\n\"Ue_LargeButtonClicked\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_LargeButton = rbb_1.InsertLargeButtonLast (ll_Handle_Panel, \"Add\",\n \"AddBig!\", \"Ue_LargeButtonClicked\")\nExample 2\nThis example defines a large button item with various properties (including binding with the\n\"Ue_LargeButtonClicked\" and \"Ue_LargeButtonSelected\" user events) and then inserts it as\nthe last item in the panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton\nRibbonLargeButtonItem lr_LargeButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_LargeButton.Text = \"Add\"\nlr_LargeButton.PictureName = \"AddBig!\"\nlr_LargeButton.Clicked = \"Ue_LargeButtonClicked\"\nlr_LargeButton.Selected = \"Ue_LargeButtonSelected\"\nll_Handle_LargeButton = rbb_1.InsertLargeButtonLast (ll_Handle_Panel,\n lr_LargeButton)\nSee also\n"}
{"page": 974, "text": "Statements, Events, and Functions\nPage 974\nInsertLargeButton\nInsertLargeButtonFirst\nInsertLargeButtonLast\nDeleteLargeButton\nSetLargeButton\nGetLargeButton\nGetChildItemByIndex\n2.4.418 InsertMasterItem\nDescription\nInserts a master menu item at the specified position in the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.InsertMasterItem ( { Long ParentIndex, } Long Index, String Text,\n String PictureName, String Clicked )\ncontrolname.InsertMasterItem ( { Long ParentIndex, } Long Index, RibbonMenuItem\n Item )\nTable 2.877:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control.\nParentIndex\nThe index of the master menu item (RibbonMenuItem) into which you\nwant to insert a submenu item.\nIt cannot be an index of a separator (that is RibbonMenuItem with\nItemType 1). If not specified, a master menu item will be inserted at the\nspecified position; if specified to a valid value, a submenu item will be\ninserted at the specified position under the master menu item (whose\nindex is ParentIndex); if specified to an invalid value, an error would\noccur and this operation would return -1.\nIndex\nThe index number of the master menu item or submenu item before\nwhich you are inserting a master menu item. If index is invalid, an error\nwould occur and this operation would return -1.\nText\nThe text that displays in the master menu item or submenu item.\nPictureName\nThe name of the file that contains the picture. The image is displayed in\n32*32 pixels.\nClicked\nThe name of the Clicked user event to be bound with the master menu\nitem. The Clicked user event for the master menu item (RibbonMenuItem\nwith \"Normal(0)\" type) must have three long parameters for receiving\nthe handle of the application button and the index numbers of the master\nmenu item and submenu item. For details, see Clicked.\n"}
{"page": 975, "text": "Statements, Events, and Functions\nPage 975\nArgument\nDescription\nItem\nA RibbonMenuItem item you want to insert. Only RibbonMenuItem\nwith \"Normal(0)\" or \"Separator(1)\" ItemType is supported. If\nRibbonMenuItem is with other ItemType such as \"Recent(2)\", an error\nwould occur and this operation would return -1.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly the menu item with the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with\nItemType 0 or 1) can be added as a master menu item.\nThe master menu can have no more than two levels.\nThe user events to be bound with the master menu item must be defined correctly according\nto the requirements of RibbonMenuItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a master menu item \"Account\" and a submenu item \"Account Settings\"\nunder \"Account\" and binds the master menu item with the \"Ue_AccountMasterItemClicked\"\nuser event and the submenu item with the \"Ue_AccountSettingsClicked\" user event.\nLong ll_Return, ll_Index\nRibbonApplicationMenu lr_AppMenu\nll_Index = lr_AppMenu.InsertMasterItem (1,\"Account\", \"AccountBig!\",\n \"Ue_AccountMasterItemClicked\")\nll_Return = lr_AppMenu.InsertMasterItem (ll_Index, 1, \"Account Settings\",\n \"AccountSettingsBig!\", \"Ue_AccountSettingsClicked\")\nExample 2\nThis example defines three RibbonMenuItem items (lr_MenuItem1, lr_SubMenuItem1,\nlr_MenuSeparator1) with various properties (lr_MenuSeparator1 is set to item type 1,\nwhich means it will be displayed as a separator line; lr_MenuItem1 is set to bind with the\n\"Ue_AccountMasterItemClicked\" user event), and then inserts lr_MenuItem1 as a master\nmenu item, lr_SubMenuItem1 as a submenu item, and lr_MenuSeparator1 as a separator line\ndisplayed below both the new submenu item and the new master menu item.\nLong ll_Return, ll_Index\nRibbonApplicationMenu lr_AppMenu\nRibbonMenuItem lr_MenuItem1, lr_SubMenuItem1, lr_MenuSeparator1\nlr_MenuItem1.Text = \"Account\"\nlr_MenuItem1.PictureName = \"AccountBig!\"\nlr_MenuItem1.Clicked = \"Ue_AccountMasterItemClicked\"\nlr_SubMenuItem1.Text = \"Account Settings\"\nlr_MenuSeparator1.ItemType = 1\nll_Index = lr_AppMenu.InsertMasterItem (1, lr_MenuItem1)\nll_Return = lr_AppMenu.InsertMasterItem (ll_Index, 1, lr_SubMenuItem1)\nll_Return = lr_AppMenu.InsertMasterItem (ll_Index, 2, lr_MenuSeparator1)\n"}
{"page": 976, "text": "Statements, Events, and Functions\nPage 976\nll_Index = lr_AppMenu.InsertMasterItem (2, lr_MenuSeparator1)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.419 InsertMasterItemFirst\nDescription\nInserts a master menu item as the first item in the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.InsertMasterItemFirst ( { Long ParentIndex, } String Text, String\n PictureName, String Clicked )\ncontrolname.InsertMasterItemFirst ( { Long ParentIndex, } RibbonMenuItem Item )\nTable 2.878:\nArgument\nDescription\ncontrolname\nThe RibbonApplicationMenu control in which you want to insert a\nmaster menu item as the first item.\nParentIndex\nThe index of the master menu item (RibbonMenuItem) into which you\nwant to insert a submenu item.\n"}
{"page": 977, "text": "Statements, Events, and Functions\nPage 977\nArgument\nDescription\nIt cannot be an index of a separator (that is RibbonMenuItem with\nItemType 1). If not specified, a master menu item will be inserted as the\nfirst item; if specified to a valid value, a submenu item will be inserted as\nthe first item under the master menu item (whose index is ParentIndex);\nif specified to an invalid value, an error would occur and this operation\nwould return -1.\nText\nThe text that displays in the master menu item or submenu item.\nPictureName\nThe name of the file that contains the picture. The image will be\ndisplayed in 32*32 pixels.\nClicked\nThe name of the Clicked user event to be bound with the master menu\nitem. The Clicked user event for the master menu item (RibbonMenuItem\nwith \"Normal(0)\" type) must have three long parameters for receiving\nthe handle of the application button and the index numbers of the master\nmenu item and submenu item. For details, see Clicked.\nItem\nA RibbonMenuItem item you want to insert. Only RibbonMenuItem\nwith \"Normal(0)\" or \"Separator(1)\" ItemType is supported. If\nRibbonMenuItem is with other ItemType such as \"Recent(2)\", an error\nwould occur and this operation would return -1.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly the menu item with the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with\nItemType 0 or 1) can be added as a master menu item.\nThe master menu can have no more than two levels.\nThe user events to be bound with the master menu item must be defined correctly according\nto the requirements of RibbonMenuItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a master menu item \"Account\" as the first item and a submenu item\n\"Account Settings\" as the first item under \"Account\" and binds the master menu item\nwith the \"Ue_AccountMasterItemClicked\" user event and the submenu item with the\n\"Ue_AccountSettingsClicked\" user event.\nLong ll_Return, ll_Index\nRibbonApplicationMenu lr_AppMenu\nll_Index = lr_AppMenu.InsertMasterItemFirst (\"Account\", \"AccountBig!\",\n \"Ue_AccountMasterItemClicked\")\nll_Return = lr_AppMenu.InsertMasterItemFirst (ll_Index, \"Account Settings\",\n \"AccountSettingsBig!\", \"Ue_AccountSettingsClicked\")\nExample 2\n"}
{"page": 978, "text": "Statements, Events, and Functions\nPage 978\nThis example defines three RibbonMenuItem items (lr_MenuItem1, lr_SubMenuItem1,\nlr_MenuSeparator1) with various properties (lr_MenuSeparator1 is set to item type 1,\nwhich means it will be displayed as a separator line; lr_MenuItem1 is set to bind with the\n\"Ue_AccountMasterItemClicked\" user event; lr_SubMenuItem1 is set to bind with the\n\"Ue_SignOutMenuItemClicked\" user event), and then inserts lr_MenuItem1 as a master\nmenu item as the first item, lr_SubMenuItem1 as a submenu item as the first item, and\nlr_MenuSeparator1 as a separator line displayed above the new submenu item.\nLong ll_Return, ll_Index\nRibbonApplicationMenu lr_AppMenu\nRibbonMenuItem lr_MenuItem1, lr_SubMenuItem1, lr_MenuSeparator1\nlr_MenuItem1.Text = \"Account\"\nlr_MenuItem1.PictureName = \"AccountBig!\"\nlr_MenuItem1.Clicked = \"Ue_AccountMasterItemClicked\"\nlr_SubMenuItem1.Text = \"Sign Out\"\nlr_SubMenuItem1.PictureName = \"SignOutBig!\"\nlr_SubMenuItem1.Clicked = \"Ue_SignOutMenuItemClicked\"\nlr_MenuSeparator1.ItemType = 1\nll_Index = lr_AppMenu.InsertMasterItemFirst (lr_MenuItem1)\nll_Return = lr_AppMenu.InsertMasterItemFirst (ll_Index, lr_SubMenuItem1)\nll_Return = lr_AppMenu.InsertMasterItemFirst (ll_Index, lr_MenuSeparator1)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.420 InsertMasterItemLast\nDescription\n"}
{"page": 979, "text": "Statements, Events, and Functions\nPage 979\nInserts a master menu item as the last item in the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.InsertMasterItemLast ( { Long ParentIndex, } String Text, String\n PictureName, String Clicked )\ncontrolname.InsertMasterItemLast ( { Long ParentIndex, } RibbonMenuItem Item )\nTable 2.879:\nArgument\nDescription\ncontrolname\nThe RibbonApplicationMenu control in which you want to insert a\nmaster menu item as the last item.\nParentIndex\nThe index of the master menu item (RibbonMenuItem) into which you\nwant to insert a submenu item.\nIt cannot be an index of a separator (that is RibbonMenuItem with\nItemType 1). If not specified, a master menu item will be inserted as the\nlast item; if specified to a valid value, a submenu item will be inserted as\nthe last item under the master menu item (whose index is ParentIndex);\nif specified to an invalid value, an error would occur and this operation\nwould return -1.\nText\nThe text that displays in the master menu item or submenu item.\nPictureName\nThe name of the file that contains the picture. The image will be\ndisplayed in 32*32 pixels.\nClicked\nThe name of the Clicked user event to be bound with the master menu\nitem. The Clicked user event for the master menu item (RibbonMenuItem\nwith \"Normal(0)\" type) must have three long parameters for receiving\nthe handle of the application button and the index numbers of the master\nmenu item and submenu item. For details, see Clicked.\nItem\nA RibbonMenuItem item you want to insert. Only RibbonMenuItem\nwith \"Normal(0)\" or \"Separator(1)\" ItemType is supported. If\nRibbonMenuItem is with other ItemType such as \"Recent(2)\", an error\nwould occur and this operation would return -1.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly the menu item with the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with\nItemType 0 or 1) can be added as a master menu item.\nThe master menu can have no more than two levels.\n"}
{"page": 980, "text": "Statements, Events, and Functions\nPage 980\nThe user events to be bound with the master menu item must be defined correctly according\nto the requirements of RibbonMenuItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a master menu item \"Account\" as the last item and a submenu item\n\"Account Settings\" as the last item under \"Account\" and binds the master menu item\nwith the \"Ue_AccountMasterItemClicked\" user event and the submenu item with the\n\"Ue_AccountSettingsClicked\" user event.\nLong ll_Return,ll_Index\nRibbonApplicationMenu lr_AppMenu\nll_Index = lr_AppMenu.InsertMasterItemLast (\"Account\", \"AccountBig!\",\n \"Ue_AccountMasterItemClicked\")\nll_Return = lr_AppMenu.InsertMasterItemLast (ll_Index, \"Account Settings\",\n \"AccountSettingsBig!\", \"Ue_AccountSettingsClicked\")\nExample 2\nThis example defines three RibbonMenuItem items (lr_MenuItem1, lr_SubMenuItem1,\nlr_MenuSeparator1), specifies various properties of them (lr_MenuSeparator1 is set to item\ntype 1, which means it will be displayed as a separator line; lr_MenuItem1 is set to bind\nwith the \"Ue_AccountMasterItemClicked\" user event), and then inserts lr_MenuItem1 as a\nmaster menu item as the last item, lr_SubMenuItem1 as a submenu item as the last item, and\nlr_MenuSeparator1 as a separator line displayed below the new submenu item.\nLong ll_Return, ll_Index\nRibbonApplicationMenu lr_AppMenu\nRibbonMenuItem lr_MenuItem1, lr_SubMenuItem1, lr_MenuSeparator1\nlr_MenuItem1.Text = \"Account\"\nlr_MenuItem1.PictureName = \"AccountBig!\"\nlr_MenuItem1.Clicked = \"Ue_AccountMasterItemClicked\"\nlr_SubMenuItem1.Text = \"Account Settings\"\nlr_MenuSeparator1.ItemType = 1\nll_Index = lr_AppMenu.InsertMasterItemLast (lr_MenuItem1)\nll_Return = lr_AppMenu.InsertMasterItemLast (ll_Index, lr_SubMenuItem1)\nll_Return = lr_AppMenu.InsertMasterItemLast (ll_Index, lr_MenuSeparator1)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\n"}
{"page": 981, "text": "Statements, Events, and Functions\nPage 981\nInsertMasterItemFirst\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.421 InsertObject\nDescription\nDisplays the standard Insert Object dialog box, allowing the user to choose a new or existing\nOLE object, and inserts the selected object in the OLE control.\nSyntax\nolecontrol.InsertObject ( )\nTable 2.880:\nArgument\nDescription\nolecontrol\nThe name of the OLE control in which you want to insert an object\nReturn value\nInteger. Returns 0 if it succeeds and one of the following values if an error occurs:\n1 -- User canceled out of dialog box\n-9 -- Error\nIf any argument's value is null, InsertObject returns null.\nExamples\nThis example displays the standard Insert Object dialog box so that the user can select an\nOLE object. InsertObject inserts the selected object in the ole_1 control:\ninteger result\nresult = ole_1.InsertObject()\nSee also\nInsertClass\nInsertFile\nLinkTo\n2.4.422 InsertPanel\nDescription\n"}
{"page": 982, "text": "Statements, Events, and Functions\nPage 982\nInserts a panel in the category of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertPanel ( Long CategoryHandle, Long ItemHandleAfter, String Text,\n String PictureName )\ncontrolname.InsertPanel ( Long CategoryHandle, Long ItemHandleAfter,\n RibbonPanelItem Item )\nTable 2.881:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nCategoryHandle\nThe handle of the category into which you want to insert a panel.\nItemHandleAfter The handle of the panel on the same level after which you want to insert\nthe panel.\nText\nThe title of the panel to be inserted.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n16*16. The picture will be shown when the panel is collapsed (a panel\nis collapsed automatically when the window width becomes too small to\ndisplay the panel). See Section 4.4.1, \u201cIntroduction to RibbonBar items\u201d\nin Users Guide for more.\nItem\nA panel item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\nThis example inserts the \"MyPanel2\" panel after \"MyPanel1\" in the \"MyCategory\" category.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Panel2\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel1\",\n \"AddSmall!\")\nll_Handle_Panel2 = rbb_1.InsertPanel (ll_Handle_Category, ll_Handle_Panel,\n \"MyPanel2\", \"BOMSmall!\")\nExample 2\nThis example also inserts the \"MyPanel2\" panel after \"MyPanel1\" in the \"MyCategory\"\ncategory. It first defines a panel item with various properties (including Text, PictureName\netc.) and then inserts it after \"MyPanel1\" in the \"MyCategory\" category.\nLong ll_Handle_Category,ll_Handle_Panel,ll_Handle_Panel2\n"}
{"page": 983, "text": "Statements, Events, and Functions\nPage 983\nRibbonPanelItem lr_Panel\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel1\",\n \"AddSmall!\")\nlr_Panel.Text = \"MyPanel2\"\nlr_Panel.PictureName = \"BOMSmall!\"\nll_Handle_Panel2 = rbb_1.InsertPanel (ll_Handle_Category, ll_Handle_Panel,\n lr_Panel)\nSee also\nInsertPanelFirst\nInsertPanelLast\nDeletePanel\nSetPanel\nGetPanel\nGetChildItemByIndex\n2.4.423 InsertPanelFirst\nDescription\nInserts a panel as the first item in the category of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertPanelFirst ( Long CategoryHandle, String Text, String\n PictureName )\ncontrolname.InsertPanelFirst ( Long CategoryHandle, RibbonPanelItem Item )\nTable 2.882:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nCategoryHandle\nThe handle of the category into which you want to insert a panel.\nText\nThe title of the panel to be inserted.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n16*16. The picture will be shown when the panel is collapsed (a panel\nis collapsed automatically when the window width becomes too small to\ndisplay the panel). See Section 4.4.1, \u201cIntroduction to RibbonBar items\u201d\nin Users Guide for more.\nItem\nA panel item to be inserted.\nReturn value\nLong.\n"}
{"page": 984, "text": "Statements, Events, and Functions\nPage 984\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\nThis example inserts the \"MyPanel\" panel as the first item in the \"MyCategory\" category.\nLong ll_Handle_Category, ll_Handle_Panel\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nExample 2\nThis example also inserts the \"MyPanel\" panel as the first item in the \"MyCategory\"\ncategory. It first defines a panel item with various properties (including Text, PictureName\netc.) and then inserts it as the first item in the \"MyCategory\" category.\nLong ll_Handle_Category, ll_Handle_Panel\nRibbonPanelItem lr_Panel\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nlr_Panel.Text = \"MyPanel1\"\nlr_Panel.PictureName = \"BOMSmall!\"\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, lr_Panel)\nSee also\nInsertPanel\nInsertPanelLast\nDeletePanel\nSetPanel\nGetPanel\nGetChildItemByIndex\n2.4.424 InsertPanelLast\nDescription\nInserts a panel as the last item in the category of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertPanelLast (Long CategoryHandle, String Text, String PictureName )\ncontrolname.InsertPanelLast (Long CategoryHandle, RibbonPanelItem Item )\nTable 2.883:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 985, "text": "Statements, Events, and Functions\nPage 985\nArgument\nDescription\nCategoryHandle\nThe handle of the category into which you want to insert a panel.\nText\nThe title of the panel to be inserted.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n16*16. The picture will be shown when the panel is collapsed (a panel\nis collapsed automatically when the window width becomes too small to\ndisplay the panel). See Section 4.4.1, \u201cIntroduction to RibbonBar items\u201d\nin Users Guide for more.\nItem\nA panel item to be inserted.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nExample 1\nThis example inserts the \"MyPanel\" panel as the last item in the \"MyCategory\" category.\nLong ll_Handle_Category,ll_Handle_Panel\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelLast (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nExample 2\nThis example also inserts the \"MyPanel\" panel as the last item in the \"MyCategory\" category.\nIt first defines a panel item with various properties (including Text, PictureName etc.) and\nthen inserts it as the last item in the \"MyCategory\" category.\nLong ll_Handle_Category, ll_Handle_Panel\nRibbonPanelItem lr_Panel\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nlr_Panel.Text = \"MyPane3\"\nlr_Panel.PictureName = \"BOMSmall!\"\nll_Handle_Panel = rbb_1.InsertPanelLast (ll_Handle_Category, lr_Panel)\nSee also\nInsertPanel\nInsertPanelFirst\nDeletePanel\nSetPanel\nGetPanel\nGetChildItemByIndex\n2.4.425 InsertPicture\nDescription\n"}
{"page": 986, "text": "Statements, Events, and Functions\nPage 986\nInserts an image at the insertion point in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.InsertPicture ( filename{, format } )\nTable 2.884:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to insert an\nimage\nfilename\nA string whose value is the name of the file that contains the image\nformat\nAn integer whose value determines the format in which the image is\nsaved in the RTF file. Values are:\n\u2022 1 -- BMP\n\u2022 2 -- WMF (default)\n\u2022 3 -- PNG\n\u2022 4 -- JPG\nReturn value\nInteger. Returns 1 if it succeeds. Returns -2 if the compression format of a .tif file is not\nsupported and -1 if a different error occurs. If filename is null, InsertPicture returns null.\nUsage\nIf there is a selection, InsertPicture inserts the image at the beginning of the selection. The\nfollowing file types are supported: .bmp, .wmf, .jpeg, .png, and .gif. The .tif file type is also\nsupported if it uses the LZW compression format.\nExamples\nThis example inserts a PNG file at the insertion point in the RichTextEdit control rte_1. The\nPNG file will be saved in the RTF file in WMF format:\ninteger li_rtn\nli_rtn = rte_1.InsertPicture(\"c:\\windows\\earth.png\")\nThis example inserts a JPG file at the insertion point in the RichTextEdit control rte_1. The\nJPG file will be saved in the RTF file in JPG format:\ninteger li_rtn\nli_rtn = rte_1.InsertPicture(\"c:\\windows\\earth.jpg\", 4)\nSee also\nInputFieldInsert\n"}
{"page": 987, "text": "Statements, Events, and Functions\nPage 987\nInsertDocument\n2.4.426 InsertRecentItem\nDescription\nInserts a recent menu item at the specified position in the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.InsertRecentItem ( Long Index, String Text, String Clicked )\nTable 2.885:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control into which you want to\ninsert a recent menu item.\nIndex\nThe index number of the recent menu item before which you are inserting\na recent menu item. If index is invalid, an error would occur and this\noperation would return -1.\nText\nThe text that displays in the recent menu item.\nClicked\nThe name of the Clicked user event to be bound with the recent menu\nitem. The Clicked user event for the recent menu item (RibbonMenuItem\nwith \"Recent(2)\" type) must have two long parameters for receiving the\nhandle of the application button and the index number of the recent menu\nitem. For details, see Clicked.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly the menu item with the \"Recent\" type (that is RibbonMenuItem with ItemType 2) can\nbe added as a recent menu item.\nThe recent menu can have only one level; and can contain no more than 9 items.\nThe user events to be bound with the recent menu item must be defined correctly according to\nthe requirements of RibbonMenuItem. For details, see Clicked and Selected.\nExamples\nThis example inserts a recent menu item \"RecentItem1\" and binds it with the\n\"Ue_RecentItem1Clicked\" user event.\nLong ll_Return\nRibbonApplicationMenu lr_AppMenu\n"}
{"page": 988, "text": "Statements, Events, and Functions\nPage 988\nll_Return =  lr_AppMenu.InsertRecentItem (1, \"RecentItem1\",\n \"Ue_RecentItem1Clicked\")\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.427 InsertRecentItemFirst\nDescription\nInserts a recent menu item as the first item in the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.InsertRecentItemFirst ( String Text, String Clicked )\nTable 2.886:\nArgument\nDescription\ncontrolname\nThe RibbonApplicationMenu control in which you want to insert a recent\nmenu item as the first item.\nText\nThe text that displays in the recent menu item.\nClicked\nThe name of the Clicked user event to be bound with the recent menu\nitem. The Clicked user event for the recent menu item (RibbonMenuItem\n"}
{"page": 989, "text": "Statements, Events, and Functions\nPage 989\nArgument\nDescription\nwith \"Recent(2)\" type) must have two long parameters for receiving the\nhandle of the application button and the index number of the recent menu\nitem. For details, see Clicked.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly the menu item with the \"Recent\" type (that is RibbonMenuItem with ItemType 2) can\nbe added as a recent menu item.\nThe recent menu can have only one level; and can contain no more than 9 items.\nThe user events to be bound with the recent menu item must be defined correctly according to\nthe requirements of RibbonMenuItem. For details, see Clicked and Selected.\nExamples\nThis example inserts a recent menu item \"RecentItem1\" as the first item and binds it with the\n\"Ue_RecentItem1Clicked\" user event.\nLong ll_Return\nRibbonApplicationMenu lr_AppMenu\nll_Return = lr_AppMenu.InsertRecentItemFirst (\"RecentItem1\",\n \"Ue_RecentItem1Clicked\")\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemLast\n"}
{"page": 990, "text": "Statements, Events, and Functions\nPage 990\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.428 InsertRecentItemLast\nDescription\nInserts a recent menu item as the last item in the application menu.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.InsertRecentItemLast ( String Text, String Clicked )\nTable 2.887:\nArgument\nDescription\ncontrolname\nThe RibbonApplicationMenu control in which you want to insert a recent\nmenu item as the last item.\nText\nThe text that displays in the recent menu item.\nClicked\nThe name of the Clicked user event to be bound with the recent menu\nitem. The Clicked user event for the recent menu item (RibbonMenuItem\nwith \"Recent(2)\" type) must have two long parameters for receiving the\nhandle of the application button and the index number of the recent menu\nitem. For details, see Clicked.\nReturn value\nLong.\nReturns the position of the item if it succeeds and -1 if an error occurs. If any argument's\nvalue is null, returns null.\nUsage\nOnly the menu item with the \"Recent\" type (that is RibbonMenuItem with ItemType 2) can\nbe added as a recent menu item.\nThe recent menu can have only one level; and can contain no more than 9 items.\nThe user events to be bound with the recent menu item must be defined correctly according to\nthe requirements of RibbonMenuItem. For details, see Clicked and Selected.\nExamples\nThis example inserts a recent menu item \"RecentItem1\" as the last item and binds it with the\n\"Ue_RecentItem1Clicked\" user event.\nLong ll_Return\nRibbonApplicationMenu lr_AppMenu\n"}
{"page": 991, "text": "Statements, Events, and Functions\nPage 991\nll_Return =  lr_AppMenu.InsertRecentItemLast (\"RecentItem1\",\n \"Ue_RecentItem1Clicked\")\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nSetMasterItem\nSetRecentItem\nSetRecentTitle\n2.4.429 InsertSeries\nDescription\nInserts a series in a graph at the specified position. Existing series in the graph are\nrenumbered to keep the numbering sequential.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects, because their data comes directly from the DataWindow.\nSyntax\ncontrolname.InsertSeries ( seriesname,  seriesnumber )\nTable 2.888:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to insert a series.\nseriesname\nA string containing the name of the series you want to insert. The series\nname must be unique within the graph.\n"}
{"page": 992, "text": "Statements, Events, and Functions\nPage 992\nArgument\nDescription\nseriesnumber\nThe number of the series before which you want to insert the new series.\nTo add the new series at the end, specify 0.\nReturn value\nInteger. Returns the number of the series if it succeeds and -1 if an error occurs. If the series\nnamed in seriesname exists already, it returns the number of the existing series. If any\nargument's value is null, InsertSeries returns null.\nUsage\nSeries names are unique if they have different capitalization.\nEquivalent syntax\nIf you want to add a series to the end of the list, you can use AddSeries instead, which\nrequires fewer arguments.\nThis statement:\ngr_data.InsertSeries(\"Costs\", 0)\nis equivalent to:\ngr_data.AddSeries(\"Costs\")\nExamples\nThese statements insert a series before the series named Income in the graph\ngr_product_data:\ninteger SeriesNbr\n \n// Get the number of the series.\nSeriesNbr = FindSeries(\"Income\")\ngr_product_data.InsertSeries(\"Costs\", SeriesNbr)\nSee also\nAddData\nAddSeries\nFindCategory\nFindSeries\nInsertCategory\nInsertData\n2.4.430 InsertSmallButton\nDescription\nInserts a small button in the panel or group of the RibbonBar control.\nApplies to\n"}
{"page": 993, "text": "Statements, Events, and Functions\nPage 993\nRibbonBar control\nSyntax\ncontrolname.InsertSmallButton (Long ParentHandle, Long ItemHandleAfter, String\n Text, String PictureName, String Clicked )\ncontrolname.InsertSmallButton (Long ParentHandle, Long ItemHandleAfter,\n RibbonSmallButtonItem Item )\nTable 2.889:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nParentHandle\nThe handle of the panel or group into which you want to insert a small\nbutton.\nItemHandleAfter The handle of the item (check box, combo box, large button, small\nbutton, group) on the same level after which you want to insert the small\nbutton.\nText\nThe text that displays in the small button.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n16*16.\nClicked\nThe name of the Clicked user event to be bound with the small button.\nThe Clicked user event for the small button must have a long parameter\nfor receiving the handle of the small button. For details, see Clicked.\nItem\nA small button item you want to insert.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the small button must be defined correctly according to the\nrequirements of RibbonSmallButtonItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a \"Delete\" small button after the \"Add\" small button in the \"MyPanel\"\npanel. Both buttons are bound with the \"Ue_SmallButtonClicked\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton,\n ll_Handle_SmallButton2\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_SmallButton = rbb_1.InsertSmallButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddSmall!\", \"Ue_SmallButtonClicked\")\nll_Handle_SmallButton2 = rbb_1.InsertSmallButton (ll_Handle_Panel,\n ll_Handle_SmallButton, \"Delete\", \"DeleteSmall!\", \"Ue_SmallButtonClicked\")\n"}
{"page": 994, "text": "Statements, Events, and Functions\nPage 994\n//Ue_SmallButtonClicked user event must have a long parameter for receiving the\n handle \n//of SmallButton where the mouse is clicking. Refer to the Clicked property of\n RibbonSmallButtonItem.\n//event type long ue_smallbuttonclicked(long itemhandle);\n//RibbonSmallButtonItem lr_SmallButton\n//rbb_1.GetSmallButton(ItemHandle,lr_SmallButton)\n////...\n//\n//Return 1\n//end event\nExample 2\nThis example inserts a \"Delete\" small button after the \"Add\" small button in the\n\"MyPanel\" panel and binds the \"Delete\" button with the \"Ue_SmallButtonClicked\" and\n\"Ue_SmallButtonSelected\" user events. It first defines a small button item with various\nproperties (including Text, PictureName, Clicked, Selected etc.) and then inserts it after the\n\"Add' small button.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton,\n ll_Handle_SmallButton2\nRibbonSmallButtonItem lr_SmallButton\nll_Handle_Category = rbb_1.InsertCategoryFirst(\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst(ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_SmallButton = rbb_1.InsertSmallButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddSmall!\", \"Ue_SmallButtonClicked\")\nlr_SmallButton.Text = \"Delete\"\nlr_SmallButton.PictureName = \"DeleteSmall!\"\nlr_SmallButton.Clicked = \"Ue_SmallButtonClicked\"\nlr_SmallButton.Selected = \"Ue_SmallButtonSelected\"\nll_Handle_SmallButton2 = rbb_1.InsertSmallButton (ll_Handle_Panel,\n ll_Handle_SmallButton, lr_SmallButton)\n//Ue_SmallButtonSelected user event must have a long parameter for receiving the\n handle \n//of SmallButton where the mouse is hovering over. Refer to the Selected property\n of RibbonSmallButtonItem.\n//event type long ue_smallbuttonselected(long itemhandle);\n//RibbonSmallButtonItem lr_SmallButton\n//rbb_1.GetSmallButton(ItemHandle,lr_SmallButton)\n////...\n//\n//Return 1\n//end event\nSee also\nInsertSmallButtonFirst\nInsertSmallButtonLast\nDeleteSmallButton\nSetSmallButton\nGetSmallButton\nGetChildItemByIndex\n"}
{"page": 995, "text": "Statements, Events, and Functions\nPage 995\n2.4.431 InsertSmallButtonFirst\nDescription\nInserts a small button as the first item in the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertSmallButtonFirst ( Long ParentHandle, String Text, String\n PictureName, String Clicked )\ncontrolname.InsertSmallButtonFirst ( Long ParentHandle, RibbonSmallButtonItem\n Item )\nTable 2.890:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nParentHandle\nThe handle of the panel or group into which you want to insert the small\nbutton.\nText\nThe text that displays in the small button.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n16*16.\nClicked\nThe name of the Clicked user event to be bound with the small button.\nThe Clicked user event for the small button must have a long parameter\nfor receiving the handle of the small button. For details, see Clicked.\nItem\nA small button item you want to insert.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the small button must be defined correctly according to the\nrequirements of RibbonSmallButtonItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts the \"Add\" small button as the first item in a panel and then inserts\nthe \"Add2\" small button as the first item in a group. Both buttons are bound with the\n\"Ue_SmallButtonClicked\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton, ll_Handle_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\n"}
{"page": 996, "text": "Statements, Events, and Functions\nPage 996\nll_Handle_SmallButton = rbb_1.InsertSmallButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddSmall!\", \"Ue_SmallButtonClicked\")\n//Group\nll_Handle_Group = rbb_1.InsertGroupLast (ll_Handle_Panel)\nll_Handle_SmallButton = rbb_1.InsertSmallButtonFirst (ll_Handle_Group, \"Add2\",\n \"AddSmall!\", \"Ue_SmallButtonClicked\")\nExample 2\nThis example inserts the \"Add\" small button as the first item in a panel and binds it with\n\"Ue_SmallButtonClicked\" and \"Ue_SmallButtonSelected\" user events. It first defines a small\nbutton item with various properties (including Text, PictureName, Clicked, Selected etc.) and\nthen inserts it as the first item in a panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton\nRibbonSmallButtonItem lr_SmallButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_SmallButton.Text = \"Add\"\nlr_SmallButton.PictureName = \"AddSmall!\"\nlr_SmallButton.Clicked = \"Ue_SmallButtonClicked\"\nlr_SmallButton.Selected = \"Ue_SmallButtonSelected\"\nll_Handle_SmallButton = rbb_1.InsertSmallButtonFirst (ll_Handle_Panel,\n lr_SmallButton)\nSee also\nInsertSmallButton\nInsertSmallButtonLast\nDeleteSmallButton\nSetSmallButton\nGetSmallButton\nGetChildItemByIndex\n2.4.432 InsertSmallButtonLast\nDescription\nInserts a small button as the last item in the panel or group of the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertSmallButtonLast ( Long ParentHandle, String Text, String\n PictureName, String Clicked )\ncontrolname.InsertSmallButtonLast ( Long ParentHandle, RibbonSmallButtonItem Item )\nTable 2.891:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 997, "text": "Statements, Events, and Functions\nPage 997\nArgument\nDescription\nParentHandle\nThe handle of the panel or group into which you want to insert the small\nbutton.\nText\nThe text that displays in the small button.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n16*16.\nClicked\nThe name of the Clicked user event to be bound with the small button.\nThe Clicked user event for the small button must have a long parameter\nfor receiving the handle of the small button. For details, see Clicked.\nItem\nA small button item you want to insert.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the small button must be defined correctly according to the\nrequirements of RibbonSmallButtonItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts the \"Add\" small button as the last item in a panel and then inserts\nthe \"Add2\" small button as the last item in a group. Both buttons are bound with the\n\"Ue_SmallButtonClicked\" user event.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton, ll_Handle_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_SmallButton = rbb_1.InsertSmallButtonLast (ll_Handle_Panel, \"Add\",\n \"AddSmall!\", \"Ue_SmallButtonClicked\")\n//Group\nll_Handle_Group = rbb_1.InsertGroupLast (ll_Handle_Panel)\nll_Handle_SmallButton = rbb_1.InsertSmallButtonLast (ll_Handle_Group, \"Add2\",\n \"AddSmall!\", \"Ue_SmallButtonClicked\")\nExample 2\nThis example inserts the \"Add\" small button as the last item in a panel and binds it with the\n\"Ue_SmallButtonClicked\" and \"Ue_SmallButtonSelected\" user events. It first defines a small\nbutton item with various properties (including Text, PictureName, Clicked, Selected etc.) and\nthen inserts it as the last item in a panel.\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton\nRibbonSmallButtonItem lr_SmallButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nlr_SmallButton.Text = \"Add\"\nlr_SmallButton.PictureName = \"AddSmall!\"\n"}
{"page": 998, "text": "Statements, Events, and Functions\nPage 998\nlr_SmallButton.Clicked = \"Ue_SmallButtonClicked\"\nlr_SmallButton.Selected = \"Ue_SmallButtonSelected\"\nll_Handle_SmallButton = rbb_1.InsertSmallButtonLast (ll_Handle_Panel,\n lr_SmallButton)\nSee also\nInsertSmallButton\nInsertSmallButtonFirst\nDeleteSmallButton\nSetSmallButton\nGetSmallButton\nGetChildItemByIndex\n2.4.433 InsertTabButton\nDescription\nInserts a tab button in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertTabButton ( Long ItemHandleAfter, String Text, String\n PictureName, String Clicked )\ncontrolname.InsertTabButton ( Long ItemHandleAfter, RibbonTabButtonItem Item )\nTable 2.892:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandleAfter The handle of the tab button after which you want to insert a tab button.\nText\nThe text that displays in the tab button.\nPictureName\nThe name of the file that contains the picture. It will be displayed in\n16*16 pixels.\nClicked\nThe name of the Clicked user event to be bound with the tab button. The\nClicked user event for the tab button must have a long parameter for\nreceiving the handle of the tab button. For details, see Clicked.\nItem\nA tab button item you want to insert.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\n"}
{"page": 999, "text": "Statements, Events, and Functions\nPage 999\nUsage\nThe user events to be bound with the tab button must be defined correctly according to the\nrequirements of RibbonTabButtonItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts a \"TabButton2\" tab button after the \"TabButton1\" tab button and binds\nboth buttons with the \"Ue_TabButtonClicked\" user event.\nLong ll_Handle, ll_Handle2\nll_Handle = rbb_1.InsertTabButtonFirst (\"TabButton1\", \"ArrowUpSmall!\",\n \"Ue_TabButtonClicked\" )\nll_Handle2 = rbb_1.InsertTabButton (ll_Handle, \"TabButton2\", \"ArrowUpSmall!\",\n \"Ue_TabButtonClicked\" )\n//Ue_TabButtonClicked user event must have a long parameter for receiving the\n handle of TabButton \n//where the mouse is clicking. Refer to the Clicked property of\n RibbonTabButtonItem.\n//event type long ue_tabbuttonclicked(long itemhandle);\n//RibbonTabButtonItem lr_TabButton\n//rbb_1.GetTabButton(ItemHandle,lr_TabButton)\n//...\n//Return 1\n//end event\nExample 2\nThis example inserts a \"TabButton2\" tab button after the \"TabButton1\" tab button. It defines\na tab button item with various properties (including Text, Clicked, Selected etc.) and then\ninserts it after the \"TabButton1\" tab button. The \"TabButton1\" tab button is bound with\nthe \"Ue_TabButtonClicked\" user event. The \"TabButton2\" tab button is bound with the\n\"Ue_TabButtonClicked\" and \"Ue_TabButtonSelected\" user events.\nLong ll_Handle,ll_Handle2\nRibbonTabButtonItem lr_TabButton\nll_Handle =\n rbb_1.InsertTabButtonFirst(\"TabButton1\",\"ArrowUpSmall!\",\"Ue_TabButtonClicked\")\nlr_TabButton.Text = \"TabButton2\"\nlr_TabButton.Clicked = \"Ue_TabButtonClicked\"\nlr_TabButton.Selected = \"Ue_TabButtonSelected\"\nll_Handle2 = rbb_1.InsertTabButton(ll_Handle,lr_TabButton)\n//Ue_TabButtonSelected user event must have a long parameter for receiving the\n handle of TabButton \n//where the mouse is hovering over. Refer to the Selected property of\n RibbonTabButtonItem.\n//event type long ue_tabbuttonselected(long itemhandle);\n//RibbonTabButtonItem lr_TabButton\n//rbb_1.GetTabButton(ItemHandle,lr_TabButton)\n//...\n//Return 1\n//end event\nSee also\nInsertTabButtonFirst\nInsertTabButtonLast\n"}
{"page": 1000, "text": "Statements, Events, and Functions\nPage 1000\nDeleteTabButton\nSetTabButton\nGetTabButton\nGetTabButtonByIndex\nGetTabButtonCount\n2.4.434 InsertTabButtonFirst\nDescription\nInserts a tab button as the first item in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertTabButtonFirst ( String Text, String PictureName, String\n Clicked )\ncontrolname.InsertTabButtonFirst ( RibbonTabButtonItem Item )\nTable 2.893:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nText\nThe text that displays in the tab button.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n16*16.\nClicked\nThe name of the Clicked user event to be bound with the tab button. The\nClicked user event for the tab button must have a long parameter for\nreceiving the handle of the tab button. For details, see Clicked.\nItem\nA tab button item you want to insert.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the tab button must be defined correctly according to the\nrequirements of RibbonTabButtonItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts the \"TabButton1\" as the first tab button in the ribbon bar, and binds it\nwith the \"Ue_TabButtonClicked\" user event.\n"}
{"page": 1001, "text": "Statements, Events, and Functions\nPage 1001\nLong ll_Handle\nll_Handle = rbb_1.InsertTabButtonFirst (\"TabButton1\", \"ArrowUpSmall!\",\n \"Ue_TabButtonClicked\")\nExample 2\nThis example inserts the \"TabButton1\" as the first tab button in the ribbon bar, and binds it\nwith the \"Ue_TabButtonClicked\" and \"Ue_TabButtonSelected\" user events. It first defines a\ntab button item with various properties (including Text, PictureName, Clicked, Selected etc.)\nand then inserts it as the first tab button in the ribbon bar.\nLong ll_Handle\nRibbonTabButtonItem lr_TabButton\nlr_TabButton.Text = \"TabButton1\"\nlr_TabButton.PictureName = \"ArrowUpSmall!\"\nlr_TabButton.Clicked = \"Ue_TabButtonClicked\"\nlr_TabButton.Selected = \"Ue_TabButtonSelected\"\nll_Handle = rbb_1.InsertTabButtonFirst (lr_TabButton)\nSee also\nInsertTabButton\nInsertTabButtonLast\nDeleteTabButton\nSetTabButton\nGetTabButton\nGetTabButtonByIndex\nGetTabButtonCount\n2.4.435 InsertTabButtonLast\nDescription\nInserts a tab button as the last item in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.InsertTabButtonLast ( String Text, String PictureName, String Clicked )\ncontrolname.InsertTabButtonLast ( RibbonTabButtonItem Item )\nTable 2.894:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nText\nThe text that displays in the tab button.\nPictureName\nThe name of the file that contains the picture. It will be displayed as\n16*16.\n"}
{"page": 1002, "text": "Statements, Events, and Functions\nPage 1002\nArgument\nDescription\nClicked\nThe name of the Clicked user event to be bound with the tab button. The\nClicked user event for the tab button must have a long parameter for\nreceiving the handle of the tab button. For details, see Clicked.\nItem\nA tab button item you want to insert.\nReturn value\nLong.\nReturns the handle of the inserted item if it succeeds and -1 if an error occurs. If any\nargument's value is null, returns null.\nUsage\nThe user events to be bound with the tab button must be defined correctly according to the\nrequirements of RibbonTabButtonItem. For details, see Clicked and Selected.\nExample 1\nThis example inserts the \"TabButton3\" as the last tab button in the ribbon bar, and binds it\nwith the \"Ue_TabButtonClicked\" user event.\nLong ll_Handle\nll_Handle = rbb_1.InsertTabButtonLast (\"TabButton3\", \"ArrowUpSmall!\",\n \"Ue_TabButtonClicked\")\nExample 2\nThis example inserts the \"TabButton3\" as the last tab button in the ribbon bar, and binds it\nwith the \"Ue_TabButtonClicked\" and \"Ue_TabButtonSelected\" user events. It first defines a\ntab button item with various properties (including Text, PictureName, Clicked, Selected etc.)\nand then inserts it as the last tab button in the ribbon bar.\nLong ll_Handle\nRibbonTabButtonItem lr_TabButton\nlr_TabButton.Text = \"TabButton3\"\nlr_TabButton.PictureName = \"ArrowUpSmall!\"\nlr_TabButton.Clicked = \"Ue_TabButtonClicked\"\nlr_TabButton.Selected = \"Ue_TabButtonSelected\"\nll_Handle = rbb_1.InsertTabButtonLast(lr_TabButton)\nSee also\nInsertTabButton\nInsertTabButtonFirst\nDeleteTabButton\nSetTabButton\nGetTabButton\nGetTabButtonByIndex\nGetTabButtonCount\n"}
{"page": 1003, "text": "Statements, Events, and Functions\nPage 1003\n2.4.436 Int\nDescription\nDetermines the largest whole number less than or equal to a number.\nSyntax\nInt ( n )\nTable 2.895:\nArgument\nDescription\nn\nThe number for which you want the largest whole number that is less\nthan or equal to it\nReturn value\nInteger.\nReturns the largest whole number less than or equal to n. If n is too small or too large to be\nrepresented as an integer, Int returns 0. If n is null, Int returns null.\nUsage\nWhen the result for Int would be smaller than -32768 or larger than 32767, Int returns 0\nbecause the result cannot be represented as an integer.\nExamples\nThese statements return 3.0:\nInt(3.2)\nInt(3.8)\nThe following statements return -4.0:\nInt(-3.2)\nInt(-3.8)\nThese statements remove the decimal portion of the variable and store the resulting integer in\nli_nbr:\ninteger li_nbr\nli_nbr = Int(3.2) // li_nbr = 3\nSee also\nCeiling\nRound\nTruncate\nInt method for DataWindows in Section 2.4.50, \u201cInt\u201d in DataWindow Reference.\n2.4.437 Integer\nDescription\n"}
{"page": 1004, "text": "Statements, Events, and Functions\nPage 1004\nConverts the value of a string to an integer or obtains an integer value that is stored in a blob.\nSyntax\nInteger ( stringorblob )\nTable 2.896:\nArgument\nDescription\nstringorblob\nA string whose value you want returned as an integer or a blob in which\nthe first value is the integer value. The rest of the contents of the blob is\nignored. Stringorblob can also be an Any variable containing a string or\nblob.\nReturn value\nInteger.\nReturns the value of stringorblob as an integer if it succeeds and 0 if stringorblob is not a\nvalid number or is an incompatible datatype. If stringorblob is null, Integer returns null.\nUsage\nTo distinguish between a string whose value is the number 0 and a string whose value is not a\nnumber, use the IsNumber function before calling the Integer function.\nExamples\nThis statement returns the string 24 as an integer:\nInteger(\"24\")\nThis statement returns the contents of the SingleLineEdit sle_Age as an integer:\nInteger(sle_Age.Text)\nThis statement returns 0:\nInteger(\"3ABC\") // 3ABC is not a number.\nThis example checks whether the text of sle_data is a number before converting, which is\nnecessary if the user might legitimately enter 0:\ninteger li_new_data\nIF IsNumber(sle_data.Text) THEN\n    li_new_data = Integer(sle_data.Text)\nELSE\n    SetNull(li_new_data)\nEND IF\nAfter assigning blob data from the database to lb_blob, this example obtains the integer value\nstored at position 20 in the blob:\ninteger i\ni = Integer(BlobMid(lb_blob, 20, 2))\nSee also\nDouble\n"}
{"page": 1005, "text": "Statements, Events, and Functions\nPage 1005\nDec\nIsNumber\nLong\nReal\nInteger method for DataWindows in Section 2.4.51, \u201cInteger\u201d in DataWindow Reference.\n2.4.438 InternetData\nDescription\nProcesses the HTML data returned by a GetURL or PostURL function. The Context object\ncalls this function; you do not call this function explicitly. Instead, you override this function\nin a customized descendant of the InternetResult standard class user object.\nApplies to\nInternetResult objects\nSyntax\nservicereference.InternetData ( data )\nTable 2.897:\nArgument\nDescription\nservicereference\nReference to the Internet service instance\ndata\nBlob containing the complete data requested by a GetURL or PostURL\nfunction\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nOverride this function in a user object that is a descendant of InternetResult. The overridden\nfunction must contain one argument of type blob, which is passed by value. It should return\nan integer, processing data as appropriate for the situation.\nDo not call this function explicitly\nDo not code calls to this function. The GetURL and PostURL functions include\nan argument that references an instantiated InternetResult descendant. When these\nfunctions complete, the Context object calls the InternetData function, returning\nHTML in data.\nExamples\nThis example shows code you might use in an overridden InternetData function to display\ndata from a GetURL function:\n"}
{"page": 1006, "text": "Statements, Events, and Functions\nPage 1006\nMessageBox(\"HTML from GetURL\",   &\n   String(data, EncodingANSI!))\nRETURN 1\nThe blob contains the actual data and is not Unicode encoded, therefore you must use the\nEncodingANSI! argument of the String function.\nSee also\nGetURL\nPostURL\n2.4.439 IntHigh\nDescription\nReturns the high word of a long value.\nSyntax\nIntHigh ( long )\nTable 2.898:\nArgument\nDescription\nlong\nA long value\nReturn value\nInteger.\nReturns the high word of long if it succeeds and -1 if an error occurs. If long is null, IntHigh\nreturns null.\nUsage\nOne use for IntHigh is for decoding values returned by external C functions and Windows\nmessages.\nExamples\nThese statements decode a long value LValue into its low and high integers:\ninteger nLow, nHigh\nlong LValue = 274489\nnLow = IntLow (LValue)  //The Low Integer is 12345.\nnHigh = IntHigh(LValue) //The High Integer is 4.\nSee also\nIntLow\n2.4.440 IntLow\nDescription\nReturns the low word of a long value.\n"}
{"page": 1007, "text": "Statements, Events, and Functions\nPage 1007\nSyntax\nIntLow ( long )\nTable 2.899:\nArgument\nDescription\nlong\nA long value\nReturn value\nInteger. Returns the low word of long if it succeeds and -1 if an error occurs. If long is null,\nIntLow returns null.\nUsage\nOne use for IntLow is for decoding values returned by external C functions and Windows\nmessages.\nExamples\nThese statements decode a long value LValue into its low and high integers:\ninteger nLow, nHigh\nlong LValue = 12345\nnLow = IntLow(LValue)   //The Low Integer is 12345.\nnHigh = IntHigh(LValue) //The High Integer is 0.\nSee also\nIntHigh\n2.4.441 InvokePBFunction\nDescription\nInvokes the specified user-defined window function in the child window contained in a\nPowerBuilder window ActiveX control.\nApplies to\nWindow ActiveX controls\nSyntax\nactivexcontrol.InvokePBFunction ( name {, numarguments {, arguments } })\nTable 2.900:\nArgument\nDescription\nactivexcontrol\nIdentifier for the instance of the PowerBuilder Window ActiveX control.\nWhen used in HTML, this is the NAME attribute of the object element.\nWhen used in other environments, this references the control that\ncontains the PowerBuilder window ActiveX.\nname\nString specifying the name of the user-defined window function. This\nargument is passed by reference.\n"}
{"page": 1008, "text": "Statements, Events, and Functions\nPage 1008\nArgument\nDescription\nnumarguments\n(optional)\nInteger specifying the number of elements in the arguments array. The\ndefault is zero.\narguments\n(optional)\nVariant array containing function arguments. In PowerBuilder, Variant\nmaps to the Any datatype. This argument is passed by reference.\nIf you specify this argument, you must also specify numarguments. If\nyou do not specify this argument and the function contains arguments,\npopulate the argument list by calling the SetArgElement function once\nfor each argument.\nJavaScript cannot use this argument.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to invoke a user-defined window function in the child window contained in\na PowerBuilder window ActiveX control.\nTo check the PowerBuilder function's return value, call the GetLastReturn function.\nJavaScript cannot use the arguments argument.\nExamples\nThis JavaScript example calls the InvokePBFunction function:\nfunction invokeFunc(f) {\n    var retcd;\n    var rc;\n    var numargs;\n    var theFunc;\n    var theArg;\n    retcd = 0;\n    numargs = 1;\n    theArg = f.textToPB.value;\n    PBRX1.SetArgElement(1, theArg);\n    theFunc = \"of_args\";\n    retcd = PBRX1.InvokePBFunction(theFunc, numargs);\n    rc = parseInt(PBRX1.GetLastReturn());\n    IF (rc != 1) {\n    alert(\"Error. Empty string.\");\n    }\n    PBRX1.ResetArgElements();\n}\nThis VBScript example calls the InvokePBFunction function:\nSub invokeFunction_OnClick()\n    Dim retcd\n    Dim myForm\n    Dim args(1)\n    Dim rc\n    Dim numargs\n    Dim theFunc\n"}
{"page": 1009, "text": "Statements, Events, and Functions\nPage 1009\n    Dim rcfromfunc\n    retcd = 0\n    numargs = 1\n    rc = 0\n    theFunc = \"of_args\"\n    Set myForm = Document.buttonForm\n    args(0) = buttonForm.textToPB.value\n    retcd = PBRX1.InvokePBFunction(theFunc, & \n    numargs, args)\n    rc = PBRX1.GetLastReturn()\n    IF rc <> 1 THEN\n    msgbox \"Error. Empty string.\"\n    END IF\n    PBRX1.ResetArgElements()\nEND sub\nSee also\nGetLastReturn\nSetArgElement\nTriggerPBEvent\n2.4.442 _Is_A (obsolete)\nDescription\nChecks to see whether a CORBA object is an instance of a class that implements a particular\ninterface.\nThis function is used by PowerBuilder clients connecting to EAServer.\nObsolete function\n_Is_A is obsolete, because EAServer is no longer supported since PowerBuilder 2017.\nApplies to\nCORBAObject objects\nSyntax\ncorbaobject._Is_A ( classname )\nTable 2.901:\nArgument\nDescription\ncorbaobject\nAn object of type CORBAObject that you want to test\nclassname\nThe interface that will be used for the test\nReturn value\nBoolean.\nReturns true if the class of the object implements the specified interface and false if it does\nnot.\n"}
{"page": 1010, "text": "Statements, Events, and Functions\nPage 1010\nUsage\nBefore making a call to _Narrow, you can call _Is_A to verify that a CORBA object is an\ninstance of a class that implements the interface to which you want to narrow the object.\nExamples\nThe following example checks to see that a CORBA object reference is an instance of a class\nthat implements n_Bank_Account:\nCORBAObject my_corbaobj\nn_Bank_Account my_account\n...\n...\nif (my_corbaobj._is_a(\"n_Bank_Account\")) then\n    my_corbaobj._narrow(my_account,\"n_Bank_Account\")\nend if\nmy_account.withdraw(100.0)\nSee also\n_Narrow (obsolete)\n2.4.443 IsAlive\nDescription\nDetermines whether a server object is still running.\nApplies to\nOLEObject objects, OLETxnObject objects\nSyntax\noleobject.IsAlive (  )\nTable 2.902:\nArgument\nDescription\noleobject\nThe name of an OLEObject or OLETxnObject variable that is connected\nto an automation server or COM object\nReturn value\nBoolean.\nReturns true if the server object appears to be running and false if it is dead.\nUsage\nUse the IsAlive function to determine whether a server process has died. This function does\nnot replace the error-handling capability provided by the ExternalException and Error events.\nIt provides a way to check the viability of the server at intervals or before specific operations\nto avoid runtime errors.\nIf IsAlive returns true, the server may only appear to be running, because the true state of the\nserver may be masked. This is more likely to occur when the server is running on a different\n"}
{"page": 1011, "text": "Statements, Events, and Functions\nPage 1011\ncomputer, because DCOM may be using cached information to determine the state of the\nserver. A false return value always indicates that the server is dead.\nExamples\nThis example creates an OLEObject variable and calls ConnectToNewObject to create and\nconnect to a new instance of a PowerBuilder COM object. After performing some processing,\nit checks whether the server is still running before performing additional processing:\nOLETxnObject EmpObj\nInteger li_rc\n \nEmpObj = CREATE OLEObject\nli_rc = EmpObj.ConnectToNewObject(\"PB70COM.employee\")\n// Perform some work with the COM object\n...\nIF EmpObj.IsAlive()THEN\n// Continue processing\nEND IF\n2.4.444 IsAllArabic\nDescription\nTests whether a particular string is composed entirely of Arabic characters.\nSyntax\nIsAllArabic ( string )\nTable 2.903:\nArgument\nDescription\nstring\nA string whose value you want to test to find out if it is composed\nentirely of Arabic characters\nReturn value\nBoolean.\nReturns true if string is composed entirely of Arabic characters and false if it is not. The\npresence of numbers, spaces, and punctuation marks will also result in a return value of false.\nUsage\nIf you are not running a version of Windows that supports right-to-left languages, IsAllArabic\nis set to false.\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns true\nif the SingleLineEdit sle_name is composed entirely of Arabic characters:\nIsAllArabic(sle_name.Text)\nSee also\nIsAnyArabic\n"}
{"page": 1012, "text": "Statements, Events, and Functions\nPage 1012\nIsArabic\nIsArabicAndNumbers\nReverse\n2.4.445 IsAllHebrew\nDescription\nTests whether a particular string is composed entirely of Hebrew characters.\nSyntax\nIsAllHebrew ( string )\nTable 2.904:\nArgument\nDescription\nstring\nA string whose value you want to test to find out if it is composed\nentirely of Hebrew characters\nReturn value\nBoolean.\nReturns true if string is composed entirely of Hebrew characters and false if it is not. The\npresence of numbers, spaces, and punctuation marks will also result in a return value of false.\nUsage\nIf you are not running a version of Windows that supports right-to-left languages,\nIsAllHebrew is set to false.\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns true\nif the SingleLineEdit sle_name is composed entirely of Hebrew characters:\nIsAllHebrew(sle_name.Text)\nSee also\nIsAnyHebrew\nIsHebrew\nIsHebrewAndNumbers\nReverse\n2.4.446 IsAnyArabic\nDescription\nTests whether a particular string contains at least one Arabic character.\nSyntax\n"}
{"page": 1013, "text": "Statements, Events, and Functions\nPage 1013\nIsAnyArabic ( string )\nTable 2.905:\nArgument\nDescription\nstring\nA string whose value you want to test to find out if it contains at least one\nArabic character\nReturn value\nBoolean.\nReturns true if string contains at least one Arabic character and false if it does not.\nUsage\nIf you are not running a version of Windows that supports right-to-left languages,\nIsAnyArabic is set to false.\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns true\nif the SingleLineEdit sle_name contains at least one Arabic character:\nIsAnyArabic(sle_name.Text)\nSee also\nIsAllArabic\nIsArabic\nIsArabicAndNumbers\nReverse\n2.4.447 IsAnyHebrew\nDescription\nTests whether a particular string contains at least one Hebrew character.\nSyntax\nIsAnyHebrew ( string )\nTable 2.906:\nArgument\nDescription\nstring\nA string whose value you want to test to find out if it contains at least one\nHebrew character\nReturn value\nBoolean.\n"}
{"page": 1014, "text": "Statements, Events, and Functions\nPage 1014\nReturns true if string contains at least one Hebrew character and false if it does not.\nUsage\nIf you are not running a version of Windows that supports right-to-left languages,\nIsAnyHebrew is set to false.\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns true\nif the SingleLineEdit sle_name contains at least one Hebrew character:\nIsAnyHebrew(sle_name.Text)\nSee also\nIsAllHebrew\nIsHebrew\nIsHebrewAndNumbers\nReverse\n2.4.448 IsArabic\nDescription\nTests whether a particular character is an Arabic character. For a string, IsArabic tests only\nthe first character on the left.\nSyntax\nIsArabic ( character )\nTable 2.907:\nArgument\nDescription\ncharacter\nA character or string whose value you want to test to find out if it is an\nArabic character.\nReturn value\nBoolean.\nReturns true if character is an Arabic character and false if it is not.\nUsage\nIf you are not running a version of Windows that supports right-to-left languages, IsArabic is\nset to false.\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns true\nif the SingleLineEdit sle_name begins with an Arabic character:\nIsArabic(sle_name.Text)\n"}
{"page": 1015, "text": "Statements, Events, and Functions\nPage 1015\nSee also\nIsAllArabic\nIsAnyArabic\nIsArabicAndNumbers\nReverse\n2.4.449 IsArabicAndNumbers\nDescription\nTests whether a particular string is composed entirely of Arabic characters or numbers.\nSyntax\nIsArabicAndNumbers ( string )\nTable 2.908:\nArgument\nDescription\nstring\nA string whose value you want to test to find out if it is composed\nentirely of Arabic characters or numbers\nReturn value\nBoolean.\nReturns true if string is composed entirely of Arabic characters or numbers and false if it is\nnot.\nUsage\nIf you are not running a version of Windows that supports right-to-left languages,\nIsArabicAndNumbers is set to false.\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns true\nif the SingleLineEdit sle_name is composed entirely of Arabic characters and numbers:\nIsArabicAndNumbers(sle_name.Text)\nSee also\nIsAllArabic\nIsAnyArabic\nIsArabic\nReverse\n2.4.450 IsCallerInRole\nDescription\n"}
{"page": 1016, "text": "Statements, Events, and Functions\nPage 1016\nIndicates whether the direct caller of a COM object running on COM+ is in a specified role\n(either individually or as part of a group).\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.IsCallerInRole ( role )\nTable 2.909:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nrole\nA string expression containing the name of a role\nReturn value\nBoolean.\nReturns true if the direct caller is in the specified role and false if it is not.\nUsage\nIn COM+, a role is a name that represents the set of access permissions for a specific user or\ngroup of users. For example, a component that provides access to a sales database might have\ndifferent roles for managers and salespersons.\nIn your code, you use IsCallerInRole to determine whether the caller of the current method is\nassociated with a specific role before you execute code that performs a task restricted to users\nin that role.\nIsCallerInRole only determines whether the direct caller of the current method is in the\nspecified role. The direct caller may be either a client process or a server process.\nPackage must run in a dedicated server process\nTo support role-checking, the COM+ package must be activated as a Server package,\nnot a Library package. Server packages run in a dedicated server process. Library\npackages run in the creator's process and are used primarily for debugging.\nIsCallerInRole only returns a meaningful value when security checking is enabled. Security\nchecking can be enabled in the COM/COM+ Project wizard or the Project painter\nExamples\nThe following example shows a call to a function (f_checkrole) that takes the name of a role\nas an argument and returns an integer. In this example only managers can place orders with a\nvalue over $20,000:\ninteger rc\nlong ordervalue\nIF ordervalue > 20,000 THEN\n    rc = f_checkrole(\"Manager\")\n    IF rc <> 1\n"}
{"page": 1017, "text": "Statements, Events, and Functions\nPage 1017\n    // handle negative values and exit\n    ELSE\n    // continue processing\n    END IF \nEND IF\nThe f_checkrole function checks whether a component is running on COM+ and if security\nchecking is enabled. Then it checks whether the direct caller is in the role passed in as an\nargument. If any of the checks fail, the function returns a negative value:\nTransactionServer ts\ninteger li_rc\nstring str_role \n \nli_rc = GetContextService( \"TransactionServer\", ts)\n// handle error if necessary\n \n// Find out if running on COM+\nIF ts.which() <> 2 THEN RETURN -1\n \n// Find out if security is enabled\nIF NOT ts.IsSecurityEnabled() THEN RETURN -2\n \n// Find out if the caller is in the role\nIF NOT ts.IsCallerInRole(str_role) THEN\n    RETURN -3\nELSE\n    RETURN 1\nEND IF  \nSee also\nImpersonateClient\nIsImpersonating\nIsSecurityEnabled\nRevertToSelf\n2.4.451 IsDate\nDescription\nTests whether a string value is a valid date.\nSyntax\nIsDate ( datevalue )\nTable 2.910:\nArgument\nDescription\ndatevalue\nA string whose value you want to test to determine whether it is a valid\ndate\nReturn value\nBoolean.\n"}
{"page": 1018, "text": "Statements, Events, and Functions\nPage 1018\nReturns true if datevalue is a valid date and false if it is not. If datevalue is null, IsDate\nreturns null.\nUsage\nYou can use IsDate to test whether a user-entered date is valid before you convert it to a date\ndatatype. To convert a value into a date value, use the Date function. The year value must be\nin the range 01 to 9999.\nExamples\nThis statement returns true:\nIsDate(\"Jan 1, 05\")\nThis statement returns false:\nIsDate(\"Jan 32, 2005\")\nIf the SingleLineEdit sle_Date_Of_Hire contains 7/1/99, these statements store 1999-07-01 in\nHireDate:\nDate HireDate\nIF IsDate(sle_Date_Of_Hire.text) THEN\n    HireDate = Date(sle_Date_Of_Hire.text)\nEND IF\nSee also\nIsDate method for DataWindows in Section 2.4.52, \u201cIsDate\u201d in DataWindow Reference.\n2.4.452 IsHebrew\nDescription\nTests whether a particular character is a Hebrew character. For a string, IsHebrew tests only\nthe first character on the left.\nSyntax\nIsHebrew ( character )\nTable 2.911:\nArgument\nDescription\ncharacter\nA character or string whose value you want to test to find out if it is a\nHebrew character\nReturn value\nBoolean.\nReturns true if character is a Hebrew character and false if it is not.\nUsage\nIf you are not running a version of Windows that supports right-to-left languages, IsHebrew\nis set to false.\n"}
{"page": 1019, "text": "Statements, Events, and Functions\nPage 1019\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns true\nif the SingleLineEdit sle_name begins with a Hebrew character:\nIsHebrew(sle_name.Text)\nSee also\nIsAllHebrew\nIsAnyHebrew\nIsHebrewAndNumbers\nReverse\n2.4.453 IsHebrewAndNumbers\nDescription\nTests whether a particular string is composed entirely of Hebrew characters and numbers.\nSyntax\nIsHebrewAndNumbers ( string )\nTable 2.912:\nArgument\nDescription\nstring\nA string whose value you want to test to find out if it is composed\nentirely of Hebrew characters and numbers\nReturn value\nBoolean.\nReturns true if string is composed entirely of Hebrew characters and numbers and false if it is\nnot.\nUsage\nIf you are not running a version of Windows that supports right-to-left languages,\nIsHebrewAndNumbers is set to false.\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns true\nif the SingleLineEdit sle_name is composed entirely of Hebrew characters and numbers:\nIsHebrewAndNumbers(sle_name.Text)\nSee also\nIsAllHebrew\nIsAnyHebrew\nIsHebrew\n"}
{"page": 1020, "text": "Statements, Events, and Functions\nPage 1020\nReverse\n2.4.454 IsImpersonating\nDescription\nQueries whether a COM object running on COM+ is impersonating the client.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.IsImpersonating (  )\nTable 2.913:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nBoolean.\nReturns true if the component is impersonating the client and false if it is not.\nUsage\nCOM objects running on COM+ can use the ImpersonateClient function to run in the client's\nsecurity context so that the server process has access to the same resources as the client. Use\nIsImpersonating to determine whether the ImpersonateClient function has been called without\na matching call to RevertToSelf.\nExamples\nThe following example creates an instance of the TransactionServer service and checks\nwhether the COM object is currently running on the client's security context. If it is not, it\nimpersonates the client, performs some processing using the client's security context, then\nreverts to the object's security context:\nTransactionServer txninfo_test\ninteger li_rc\n \nli_rc = GetContextService( \"TransactionServer\",  &\n    txninfo_test )\nIF NOT txninfo_test.IsImpersonating() THEN\n    txninfo_test.ImpersonateClient()\nEND IF\n// continue processing as client\ntxninfo_test.RevertToSelf()\nSee also\nImpersonateClient\nIsCallerInRole\nIsSecurityEnabled\n"}
{"page": 1021, "text": "Statements, Events, and Functions\nPage 1021\nRevertToSelf\n2.4.455 IsInTransaction (obsolete)\nDescription\nIndicates whether a component is executing in a transaction.\nObsolete function\nIsInTransaction is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.IsInTransaction (  )\nTable 2.914:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nBoolean.\nReturns true if the component is executing as part of a transaction and false if it is not.\nUsage\nComponent methods can call IsInTransaction to determine whether they are executing within\na transaction.\nMethods in components that are declared to be transactional always execute as part of a\ntransaction.\nMethods in components that have a transaction type of Supports Transaction may or may not\nbe running in the context of an EAServer transaction, depending on whether the component\nis instantiated directly by a base client or by another component. In components that have this\ntransaction type, you can use IsInTransaction to determine whether the component is running\nin a transaction.\nThe IsInTransaction function corresponds to the isInTransaction transaction primitive in\nEAServer.\nExamples\nThe following example shows the use of the IsInTransaction function:\nTransactionServer ts\nInteger li_rc\nlong ll_rv\n \n"}
{"page": 1022, "text": "Statements, Events, and Functions\nPage 1022\nli_rc = this.GetContextService(\"TransactionServer\", &\n    ts)\nIF ts.IsInTransaction = TRUE THEN\n    // execute logic based on the transaction context\nEND IF\nSee also\nEnableCommit\nIsTransactionAborted (obsolete)\nLookup (obsolete)\nSetAbort\nSetComplete\nWhich\n2.4.456 IsMinimized\nDescription\nGets whether the RibbonBar control is minimized or not.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.IsMinimized ( )\nReturn value\nBoolean.\nReturns TRUE if it is minimized and FALSE if it is not minimized.\nUsage\nWhen the RibbonBar control is minimized, only the application button title, the category title,\nand the tab header will be displayed.\nExamples\nBoolean lb_IsMini\nlb_IsMini = rbb_1.IsMinimized()\nSee also\nSetMinimized\n2.4.457 IsNull\nDescription\nReports whether the value of a variable or expression is null.\nSyntax\nIsNull ( any )\n"}
{"page": 1023, "text": "Statements, Events, and Functions\nPage 1023\nTable 2.915:\nArgument\nDescription\nany\nA variable or expression that you want to test to determine whether its\nvalue is null\nReturn value\nBoolean.\nReturns true if any is null and false if it is not.\nUsage\nUse IsNull to test whether a user-entered value or a value retrieved from the database is null.\nIf one or more columns in a DataWindow are required columns, that is, they must contain\ndata, you do not want to update the database if the columns have null values. You can use\nFindRequired to find rows in which those columns have null values, instead of using IsNull\nto evaluate each row and column.\nSetting a variable to null\nTo set a variable to null, use the SetNull function. In standard PowerBuilder applications, if a\nvariable is not set to null explicitly by calling the SetNull function, calling the IsNull function\nagainst the variable returns false.\nIf the variable is of a reference type (a type derived from the PowerObject base class), IsNull\nreturns true if the variable has not been initialized by assigning an instantiated object to it. In\nthe following example, IsNull returns false in a standard PowerBuilder application:\ndataStore ds\nboolean b\nb = IsNull(ds)\nMessageBox(\"IsNull\", string(b)) \nIf the variable is explicitly set to null, IsNull returns true in standard PowerBuilder\napplications:\nSetNull(ds)\nb = IsNull(ds)\nMessageBox(\"IsNull\", string(b)) \nExamples\nThese statements set lb_test to true:\ninteger a, b\nboolean lb_test\nSetNull(b)\nlb_test = IsNull(a + b)\nSee also\nIsValid\nSetNull\n"}
{"page": 1024, "text": "Statements, Events, and Functions\nPage 1024\nIsNull method for DataWindows in Section 2.4.54, \u201cIsNull\u201d in DataWindow Reference.\n2.4.458 IsNumber\nDescription\nReports whether the value of a string is a number.\nSyntax\nIsNumber ( string )\nTable 2.916:\nArgument\nDescription\nstring\nA string whose value you want to test to determine whether it is a valid\nPowerScript number\nReturn value\nBoolean.\nReturns true if string is a valid PowerScript number and false if it is not. If string is null,\nIsNumber returns null.\nUsage\nUse IsNumber to check that text in an edit control can be converted to a number.\nTo convert a string to a specific numeric datatype, use the Double, Dec, Integer, Long, or\nReal function.\nExamples\nThis statement returns true:\nIsNumber(\"32.65\")\nThis statement returns false:\nIsNumber(\"A16\")\nIf the SingleLineEdit sle_Age contains 32, these statements store 32 in li_YearsOld:\ninteger li_YearsOld\nIF IsNumber(sle_Age.Text) THEN\n    li_YearsOld = Integer(sle_Age.Text)\nEND IF\nSee also\nDouble\nDec\nInteger\nLong\nReal\n"}
{"page": 1025, "text": "Statements, Events, and Functions\nPage 1025\nIsNumber method for DataWindows in Section 2.4.55, \u201cIsNumber\u201d in DataWindow\nReference.\n2.4.459 IsPBApp\nDescription\nReports whether the current application is a native C/S application compiled using Pcode or\nmachine code.\nSyntax\nIsPBApp ( )\nReturn value\nBoolean.\nReturns true if the current application is a native C/S application compiled using Pcode or\nmachine code and false if it is not.\nExamples\nThis example executes the scripts only when the application is deployed as a native C/S\napplication:\nBoolean lb_IsPBApp\nlb_IsPBApp = IsPBApp ( )\nIF lb_IsPBApp THEN\n    ...\nEND IF\nSee also\nIsPowerClientApp\nIsPowerServerApp\n2.4.460 IsPowerClientApp\nDescription\nReports whether the current application is deployed using PowerClient.\nSyntax\nIsPowerClientApp ( )\nReturn value\nBoolean.\nReturns true if the current application is deployed with PowerClient and false if it is not.\nExamples\nThis example executes the scripts only when the application is deployed with PowerClient:\nBoolean lb_IsPowerClientApp\nlb_IsPowerClientApp = IsPowerClientApp ( )\nIF lb_IsPowerClientApp THEN\n"}
{"page": 1026, "text": "Statements, Events, and Functions\nPage 1026\n    ...\nEND IF\nSee also\nIsPBApp\nIsPowerServerApp\n2.4.461 IsPowerServerApp\nDescription\nReports whether the current application is an installable cloud application deployed using\nPowerServer.\nSyntax\nIsPowerServerApp ( )\nReturn value\nBoolean.\nReturns true if the current application is deployed using PowerServer and false if it is not.\nExamples\nThis example executes the scripts only when the application is deployed using PowerServer:\nBoolean lb_IsPowerServerApp\nlb_IsPowerServerApp = IsPowerServerApp ( )\nIF lb_IsPowerServerApp THEN\n    ...\nEND IF\nSee also\nIsPBApp\nIsPowerClientApp\n2.4.462 IsPreview\nDescription\nReports whether a RichTextEdit control is in preview mode.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.IsPreview ( )\nTable 2.917:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control for which you want to know\nwhether it is in preview mode\n"}
{"page": 1027, "text": "Statements, Events, and Functions\nPage 1027\nReturn value\nBoolean.\nReturns true if rtename is in preview mode and false if it is in data entry mode.\nExamples\nThis example switches the RichTextEdit control rte_1 to preview mode if it is not already in\npreview mode and then prints it:\nIF NOT rte_1.IsPreview() THEN\n    rte_1.Preview(TRUE)\n    rte_1.Print(1, \"1-4\", FALSE, TRUE)\nEND IF\nSee also\nPreview\n2.4.463 IsSecurityEnabled\nDescription\nIndicates whether or not security checking is enabled for a COM object running on COM+.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.IsSecurityEnabled (  )\nTable 2.918:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nBoolean.\nReturns true if security checking is enabled and false if it is not.\nUsage\nUse IsSecurityEnabled to determine whether security checking is enabled for the current\nCOM object.\nIf the COM object is running in the creator's process, IsSecurityEnabled always returns false.\nExamples\nThe following example determines whether security checking is enabled and, if it is, checks\nwhether the direct caller is in the Manager role before completing the call:\nTransactionServer ts\ninteger li_rc\nstring str_role = \"Admin\"\n"}
{"page": 1028, "text": "Statements, Events, and Functions\nPage 1028\n \nli_rc = GetContextService( \"TransactionServer\",  &\n     ts )\n// Find out if security is enabled.\nIF ts.IsSecurityEnabled() THEN\n       // Find out if the caller is in the role.\n    IF NOT ts.IsCallerInRole(str_role) THEN\n        // do not complete call\n    ELSE\n    // execute call normally\n    END IF\nELSE\n    // security is not enabled\n    // do not complete call\nEND IF\nSee also\nImpersonateClient\nIsCallerInRole\nIsImpersonating\nRevertToSelf\n2.4.464 IsTime\nDescription\nReports whether the value of a string is a valid time value.\nSyntax\nIsTime ( timevalue )\nTable 2.919:\nArgument\nDescription\ntimevalue\nA string whose value you want to test to determine whether it is a valid\ntime\nReturn value\nBoolean.\nReturns true if timevalue is a valid time and false if it is not. If timevalue is null, IsTime\nreturns null.\nUsage\nUse IsTime to test to whether a value a user enters in an edit control is a valid time.\nTo convert a string to an time value, use the Time function.\nExamples\nThis statement returns true:\nIsTime(\"8:00:00 am\")\n"}
{"page": 1029, "text": "Statements, Events, and Functions\nPage 1029\nThis statement returns false:\nIsTime(\"25:00\")\nIf the SingleLineEdit sle_EndTime contains 4:15 these statements store 04:15:00 in\nlt_QuitTime:\nTime lt_QuitTime\nIF IsTime sle_EndTime.Text) THEN\n    lt_QuitTime = Time(sle_EndTime.Text)\nEND IF\nSee also\nTime\nIsTime method for DataWindows in Section 2.4.59, \u201cIsTime\u201d in DataWindow Reference.\n2.4.465 IsTransactionAborted (obsolete)\nDescription\nDetermines whether the current transaction, in which an EAServer component participates,\nhas been aborted.\nObsolete function\nIsTransactionAborted is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.IsTransactionAborted (  )\nTable 2.920:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nBoolean.\nReturns true if the current transaction has been aborted and false if it has not.\nUsage\nThe IsTransactionAborted function allows a component to verify that the current transaction\nis still viable before performing updates to the database.The IsTransactionAborted function\ncorresponds to the isRollbackOnly transaction primitive in EAServer.\nExamples\n"}
{"page": 1030, "text": "Statements, Events, and Functions\nPage 1030\nThe following example checks to see whether the transaction has been aborted. If it has not, it\nupdates the database and calls EnableCommit. If it has been aborted, it calls DisableCommit.\n// Instance variables: \nids_datastore, ts\nInteger li_rc\nlong ll_rv\n \nli_rc = this.GetContextService(\"TransactionServer\", ts)\nIF li_rc <> 1 THEN\n    // handle the error\nEND IF\n...\nIF ts.IsTransactionAborted() = FALSE THEN\n    ll_rv = ids_datastore.Update()\n    IF ll_rv = 1 THEN\n      ts.EnableCommit()\n    ELSE\n      ts.DisableCommit()\n    END IF\nEND IF\nSee also\nEnableCommit\nIsInTransaction (obsolete)\nLookup (obsolete)\nSetAbort\nSetComplete\nWhich\n2.4.466 IsValid\nDescription\nDetermines whether an object variable is instantiated -- whether its value is a valid object\nhandle.\nSyntax\nIsValid ( objectvariable )\nTable 2.921:\nArgument\nDescription\nobjectvariable\nAn object variable or a variable of type Any -- typically a reference to an\nobject that you are testing for validity\nReturn value\nBoolean.\nReturns true if objectvariable is an instantiated object. Returns false if objectvariable is not\nan object, or if it is an object that is not instantiated. If objectvariable is null, IsValid returns\nnull.\n"}
{"page": 1031, "text": "Statements, Events, and Functions\nPage 1031\nUsage\nUse IsValid instead of the Handle function to determine whether a window is open.\nExamples\nThis statement determines whether the window w_emp is open and if it is not, opens it:\nIF IsValid(w_emp) = FALSE THEN Open(w_emp)\nThis example returns -1 because the IsValid function returns false. Although the\nobjectvariable argument is a valid string, it is not an instantiated object. The IsValid method\nwould return true only if la_value was an instantiated object:\nany la_value\n \nla_value = \"I'm a string\"\nIF NOT IsValid(la_value) THEN return -1\nSee also\nHandle\n2.4.467 KeyCount\nDescription\nGets the total number of keys.\nApplies to\nJSONPackage\nSyntax\nobjectname.KeyCount ( )\nTable 2.922:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nReturn value\nLong.\nReturns the number of keys if it succeeds and -1 if an error occurs.\nExamples\nThis example sets the value for keys and then gets the number of keys:\nlong ll_KeyCount\ndatastore lds_employee\ndatawindowchild ldwc_active\nJsonPackage lnv_package\nlnv_package = create JsonPackage\n"}
{"page": 1032, "text": "Statements, Events, and Functions\nPage 1032\n...//Initialize data for lds_employee, ldwc_active\n// package the data \nlnv_package.SetValue(\"d_department\", dw_department, false)\nlnv_package.SetValue(\"d_employee\", lds_employee) \nlnv_package.SetValue(\"dddw_active\", ldwc_active, false)\n// ll_KeyCount will return 3\nll_KeyCount = lnv_package.KeyCount()\n2.4.468 KeyDown\nDescription\nDetermines whether the user pressed the specified key on the computer keyboard.\nSyntax\nKeyDown ( keycode )\nTable 2.923:\nArgument\nDescription\nkeycode\nA value of the KeyCode enumerated datatype that identifies a key on the\ncomputer keyboard or an integer whose value is the ASCII code for a\nkey. Not all ASCII values are recognized; see Usage. See also the table of\nKeyCode values in Usage.\nReturn value\nBoolean.\nReturns true if keycode was pressed and false if it was not. If keycode is null, KeyDown\nreturns null.\nUsage\nKeyDown does not report what character the user typed -- it reports whether the user was\npressing the specified key when the event whose script is calling KeyDown was triggered.\nThe DataWindow columns with RichText edit style does not support the KeyDown event.\nEvents\nYou can call KeyDown in a window's Key event or a keypress event for a control to\ndetermine whether the user pressed a particular key. The Key event occurs whenever the user\npresses a key as long as the insertion point is not in a line edit. The Key event is triggered\nrepeatedly if the user holds down a repeating key. For controls, you can define a user event\nfor pbm_keydown or pbm_dwnkey (DataWindows), and call KeyDown in its script.\nYou can also call KeyDown in a mouse event, such as Clicked, to determine whether the user\nalso pressed a modifier key, such as Ctrl.\nKeyCodes and ASCII values\nKeyDown does not distinguish between uppercase and lowercase letters or other characters\nand their shifted counterparts. For example, KeyA! refers to the A key -- the user may have\n"}
{"page": 1033, "text": "Statements, Events, and Functions\nPage 1033\ntyped \"A\" or \"a.\" Key9! refers to both \"9\" and \"(\". Instead, you can test whether a modifier\nkey is also pressed.\nKeyDown does not test whether Caps Lock or other toggle keys are in a toggled-on state,\nonly whether the user is pressing it.\nKeyDown only detects ASCII values 65-90 (KeyA! - KeyZ!) and 48-57 (Key0! - Key9!).\nThese ASCII values detect whether the key was pressed, whether or not the user also pressed\nShift or Caps Lock. KeyDown does not detect other ASCII values (such as 97-122 for\nlowercase letters).\nThe following table categorizes KeyCode values by type of key and provides explanations of\nnames that might not be obvious.\nTable 2.924: KeyCode values for keyboard keys\nType of key\nKeyCode values and descriptions\nMouse buttons\nKeyLeftButton! -- Left mouse button\nKeyMiddleButton! -- Middle mouse button\nKeyRightButton! -- Right mouse button\nLetters\nKeyA! - KeyZ! -- A - Z, uppercase or lowercase\nOther symbols\nKeyQuote! -- ' and \"\nKeyEqual! -- = and +\nKeyComma! -- , and <\nKeyDash! -- - and _\nKeyPeriod! -- . and >\nKeySlash! -- / and ?\nKeyBackQuote! -- ` and ~\nKeyLeftBracket! -- [ and {\nKeyBackSlash! -- \\ and |\nKeyRightBracket! -- ] and }\nKeySemiColon! -- ; and:\nNon-printing\ncharacters\nKeyBack! -- Backspace\nKeyTab!\nKeyEnter!\nKeySpaceBar!\nFunction keys\nKeyF1! - KeyF12! -- Function keys F1 to F12\nControl keys\nKeyShift!\nKeyControl!\nKeyAlt!\nKeyPause!\n"}
{"page": 1034, "text": "Statements, Events, and Functions\nPage 1034\nType of key\nKeyCode values and descriptions\nKeyCapsLock!\nKeyEscape!\nKeyPrintScreen!\nKeyInsert!\nKeyDelete!\nNavigation keys\nKeyPageUp!\nKeyPageDown!\nKeyEnd!\nKeyHome!\nKeyLeftArrow!\nKeyUpArrow!\nKeyRightArrow!\nKeyDownArrow!\nNumeric and\nsymbol keys\nKey0! -- 0 and )\nKey1! -- 1 and !\nKey2! -- 2 and @\nKey3! -- 3 and #\nKey4! -- 4 and $\nKey5! -- 5 and %\nKey6! -- 6 and ^\nKey7! -- 7 and &\nKey8! -- 8 and *\nKey9! -- 9 and (\nKeypad numbers KeyNumpad0! - KeyNumpad9! 0 - 9 on numeric keypad\nKeypad symbols\nKeyMultiply! -- * on numeric keypad\nKeyAdd! -- + on numeric keypad\nKeySubtract! -- - on numeric keypad\nKeyDecimal! -- . on numeric keypad\nKeyDivide! -- / on numeric keypad\nKeyNumLock!\nKeyScrollLock!\nExamples\nThe following code checks whether the user pressed the F1 key or the Ctrl key and executes\nsome statements appropriate to the key pressed:\n"}
{"page": 1035, "text": "Statements, Events, and Functions\nPage 1035\nIF KeyDown(KeyF1!) THEN\n. . . // Statements for the F1 key\nELSEIF KeyDown(KeyControl!) THEN\n. . . // Statements for the CTRL key\nEND IF\nThis statement tests whether the user pressed Tab, Enter, or any of the scrolling keys:\nIF (KeyDown(KeyTab!) OR KeyDown(KeyEnter!) OR &\n        KeyDown(KeyDownArrow!) OR KeyDown(KeyUpArrow!) &\n          OR KeyDown(KeyPageDown!) OR KeyDown(KeyPageUp!))&\n            THEN ...\nThis statement tests whether the user pressed the A key (ASCII value 65):\nIF KeyDown(65) THEN ...\nThis statement tests whether the user pressed the Shift key and the A key:\nIF KeyDown(65) AND KeyDown(KeyShift!) THEN ...\nThis statement in a Clicked event checks whether the Shift is also pressed:\nIF KeyDown(KeyShift!) THEN ...\n2.4.469 LastPos\nDescription\nFinds the last position of a target string in a source string.\nSyntax\nLastPos ( string1, string2 {, searchlength } )\nTable 2.925:\nArgument\nDescription\nstring1\nThe string in which you want to find string2.\nstring2\nThe string you want to find in string1.\nsearchlength\n(optional)\nA long that limits the search to the leftmost searchlength characters of the\nsource string string1. The default is the entire string.\nReturn value\nLong.\nReturns a long whose value is the starting position of the last occurrence of string2 in\nstring1 within the characters specified in searchlength. If string2 is not found in string1 or if\nsearchlength is 0, LastPos returns 0. If any argument's value is null, LastPos returns null.\nUsage\nThe LastPos function is case sensitive. The entire target string must be found in the source\nstring.\nExamples\n"}
{"page": 1036, "text": "Statements, Events, and Functions\nPage 1036\nThis statement returns 6, because the position of the last occurrence of RU is position 6:\nLastPos(\"BABE RUTH\", \"RU\")\nThis statement returns 3:\nLastPos(\"BABE RUTH\", \"B\")\nThis statement returns 0, because the case does not match:\nLastPos(\"BABE RUTH\", \"be\") \nThis statement searches the leftmost 4 characters and returns 0, because the only occurrence\nof RU is after position 4. The search length must be at least 7 (to include the complete string\nRU) before the statement returns 6 for the starting position of the last occurrence of RU:\nLastPos(\"BABE RUTH\", \"RU\", 4)\nThese statements change the text in the SingleLineEdit sle_group. The last instance of the\ntext NY is changed to North East:\nlong place_nbr\nplace_nbr = LastPos(sle_group.Text, \"NY\")\nsle_group.SelectText(place_nbr, 2 )\nsle_group.ReplaceText(\"North East\")\nThese statements separate the return value of GetBandAtPointer into the band name and row\nnumber. The LastPos function finds the position of the (last) tab in the string and the Left and\nMid functions extract the information to the left and right of the tab:\nstring s, ls_left, ls_right\ninteger li_tab\n \ns = dw_groups.GetBandAtPointer()\nli_tab = LastPos(s, \"~t\")\n \nls_left = Left(s, li_tab - 1)\nls_right = Mid(s, li_tab + 1)\nThese statements tokenize a source string backwards:\n// Tokenize the source string backwards\n// Results in \"pbsyc.dll  powerbuilder  \n// shared  appeon  programs  c:\nstring  sSource = &\n  'c:\\program files\\Appeon\\Common\\PowerBuilder\\Runtime 19.2.0.2382\\pbsyc.dll'\nstring  sFind   = '\\'\nstring  sToken\nlong  llStart, llEnd\nllEnd = Len(sSource) + 1\nDO   llStart = LastPos(sSource, sFind, llEnd)\n   sToken = Mid(sSource, (llStart + 1), &\n      (llEnd - llStart))\n   mle_comment.text += sToken + '  '\n   llEnd = llStart - 1\nLOOP WHILE llStart > 1\nSee also\n"}
{"page": 1037, "text": "Statements, Events, and Functions\nPage 1037\nPos\n2.4.470 Left\nDescription\nObtains a specified number of characters from the beginning of a string.\nSyntax\nLeft ( string, n )\nTable 2.926:\nArgument\nDescription\nstring\nThe string you want to search\nn\nA long specifying the number of characters you want to return\nReturn value\nString.\nReturns the leftmost n characters in string if it succeeds and the empty string (\"\") if an error\noccurs. If any argument's value is null, Left returns null. If n is greater than or equal to the\nlength of the string, Left returns the entire string. It does not add spaces to make the return\nvalue's length equal to n.\nExamples\nThis statement returns BABE:\nLeft(\"BABE RUTH\", 4)\nThis statement returns BABE RUTH:\nLeft(\"BABE RUTH\", 40)\nThese statements store the first 40 characters of the text in the SingleLineEdit sle_address in\nemp_address:\nstring emp_address\nemp_address = Left(sle_address.Text, 40)\nFor sample code that uses Left to parse two tab-separated values, see the Pos function.\nSee also\nMid\nPos\nRight\nLeft method for DataWindows in Section 2.4.63, \u201cLeft\u201d in DataWindow Reference.\n2.4.471 LeftA\nDescription\n"}
{"page": 1038, "text": "Statements, Events, and Functions\nPage 1038\nTemporarily converts a string from Unicode to DBCS based on the current locale, then\nreturns the specified number of bytes from the string.\nSyntax\nLeftA (string, n)\nTable 2.927:\nArgument\nDescription\nstring\nThe string you want to search from left to right\nn\nA long specifying the number of bytes of the characters in the return\nstring\nReturn value\nString.\nReturns the characters for the leftmost n bytes in the source string if it succeeds and the\nempty string (\"\") if an error occurs. If any argument's value is null, LeftA returns null. If n is\ngreater than or equal to the length of the string, LeftA returns the entire string. It does not add\nspaces to make the return value's length equal to n.\nUsage\nLeftA replaces the functionality that Left had in DBCS environments in PowerBuilder 9.\nIn SBCS environments, Left, LeftW, and LeftA return the same results.\n2.4.472 LeftW (obsolete)\nDescription\nObtains a specified number of characters from the beginning of a string.\nThis function is obsolete. It has the same behavior as Left in all environments.\nSyntax\nLeftW ( string, n )\n2.4.473 LeftTrim\nDescription\nRemoves spaces from the beginning of a string.\nSyntax\nLeftTrim ( string {, removeallspaces } )\nTable 2.928:\nArgument\nDescription\nstring\nThe string you want returned with leading spaces deleted\n"}
{"page": 1039, "text": "Statements, Events, and Functions\nPage 1039\nArgument\nDescription\nremoveallspaces\nA boolean indicating that all types of spaces should be deleted\nReturn value\nString.\nReturns a copy of string with leading spaces deleted if it succeeds and the empty string (\"\") if\nan error occurs. If string is null, LeftTrim returns null.\nUsage\nIf you do not include the optional removeallspaces argument or its value is false, only the\nspace character (U+0020) is removed from the string.\nIf the removeallspaces argument is set to true, all types of space characters are removed.\nThis is a list of white spaces:\nCHARACTER TABULATION (U+0009)\nLINE FEED (U+000A)\nLINE TABULATION (U+000B)\nFORM FEED (U+000C)\nCARRIAGE RETURN (U+000D)\nSPACE (U+0020)\nNO-BREAK SPACE (U+00A0)\nEN QUAD (U+2000)\nEM QUAD (U+2001)\nEN SPACE (U+2002)\nEM SPACE (U+2003)\nTHREE-PER-EM SPACE (U+2004)\nFOUR-PER-EM SPACE (U+2005)\nSIX-PER-EM SPACE (U+2006)\nFIGURE SPACE (U+2007)\nPUNCTUATION SPACE (U+2008)\nTHIN SPACE (U+2009)\nHAIR SPACE (U+200A)\nZERO WIDTH SPACE (U+200B)\nIDEOGRAPHIC SPACE (U+3000)\nZERO WIDTH NO-BREAK SPACE (U+FEFF)\nExamples\n"}
{"page": 1040, "text": "Statements, Events, and Functions\nPage 1040\nThis statement returns RUTH when the leading spaces are all space characters:\nLeftTrim(\" RUTH\")\nThis statement returns RUTH when the leading spaces include other types of space characters\nsuch as tab characters:\nLeftTrim(\" RUTH\", true)\nThese statements delete leading spaces from the text in the MultiLineEdit mle_name and\nstore the result in emp_name:\nstring emp_name\nemp_name = LeftTrim(mle_name.Text)\nSee also\nRightTrim\nTrim\nLeftTrim method for DataWindows in Section 2.4.65, \u201cLeftTrim\u201d in DataWindow Reference.\n2.4.474 LeftTrimW (obsolete)\nDescription\nRemoves spaces from the beginning of a string.\nThis function is obsolete. It has the same behavior as LeftTrim in all environments.\nSyntax\nLeftTrimW ( string )\n2.4.475 Len\nDescription\nReports the length of a string or a blob.\nSyntax\nLen ( stringorblob )\nTable 2.929:\nArgument\nDescription\nstringorblob\nThe string or blob for which you want the length in number of characters\nor in number of bytes\nReturn value\nLong.\nReturns a long whose value is the length of stringorblob if it succeeds and -1 if an error\noccurs. If stringorblob is null, Len returns null.\nUsage\n"}
{"page": 1041, "text": "Statements, Events, and Functions\nPage 1041\nLen counts the number of characters in a string. The null that terminates a string is not\nincluded in the count.\nIf you specify a size when you declare a blob, that is the size reported by Len. If you do not\nspecify a size for the blob, Len initially reports the blob's length as 0. PowerBuilder assigns a\nsize to the blob the first time you assign data to the blob. Len reports the length of the blob as\nthe number characters it can contain.\nExamples\nThis statement returns 0:\nLen(\"\")\nThese statements store in the variable s_address_len the length of the text in the\nSingleLineEdit sle_address:\nlong s_address_len\ns_address_len = Len(sle_address.Text)\nThe following scenarios illustrate how the declaration of blobs affects their length, as\nreported by Len.\nIn the first example, an instance variable called ib_blob is declared but not initialized with a\nsize. If you call Len before data is assigned to ib_blob, Len returns 0. After data is assigned,\nLen returns the blob's new length.\nThe declaration of the instance variable is:\nblob ib_blob\nThe sample code is:\nlong ll_len\nll_len = Len(ib_blob) // ll_len set to 0\nib_blob = Blob( \"Test String\")\nll_len = Len(ib_blob)   // ll_len set to 22\nIn the second example, ib_blob is initialized to the size 100 when it is declared. When you\ncall Len for ib_blob, it always returns 100. This example uses BlobEdit, instead of Blob, to\nassign data to the blob because its size is already established. The declaration of the instance\nvariable is:\nblob{100} ib_blob\nThe sample code is:\nlong ll_len\nll_len = Len(ib_blob) // ll_len set to 100\nBlobEdit(ib_blob, 1, \"Test String\")\nll_len = Len(ib_blob) // ll_len set to 100\nSee also\nLen method for DataWindows in Section 2.4.66, \u201cLen\u201d in DataWindow Reference.\n2.4.476 LenA\nDescription\n"}
{"page": 1042, "text": "Statements, Events, and Functions\nPage 1042\nWhen the argument is a string, temporarily converts the string from Unicode to DBCS based\non the current locale, then calculates its length in bytes. When the argument is a blob, no\nconversion takes place.\nSyntax\nLenA (stringorblob)\nTable 2.930:\nArgument\nDescription\nstringorblob\nThe string or blob for which you want the length in number of bytes\nReturn value\nLong.\nReturns a long whose value is the length of stringorblob if it succeeds and -1 if an error\noccurs. If stringorblob is null, Len returns null.\nUsage\nLenA replaces the functionality that Len had in DBCS environments in PowerBuilder 9.\nIn SBCS environments, Len, LenW, and LenA return the same results.\nIf you specify a size when you declare a blob, that is the size reported by LenA. If you do not\nspecify a size for the blob, LenA initially reports the blob's length as 0. PowerBuilder assigns\na size to the blob the first time you assign data to the blob. LenA reports the length of the\nblob as the number of single-byte characters it can contain. Len and LenW report the size of\nthe blob as the number of double-byte characters it can contain.\n2.4.477 LenW (obsolete)\nDescription\nReports the length of a string or a blob.\nThis function is obsolete. It has the same behavior as Len in all environments.\nSyntax\nLenW ( stringorblob )\n2.4.478 Length\nDescription\nReports the length in bytes of an open OLE stream.\nLen function\nTo get the length of a string or blob, use the Len function.\nApplies to\nOLEStream objects\n"}
{"page": 1043, "text": "Statements, Events, and Functions\nPage 1043\nSyntax\nolestream.Length ( sizevar )\nTable 2.931:\nArgument\nDescription\nolestream\nThe name of an OLE stream variable that has been opened\nsizevar\nA long variable in which Length will store the size of olestream\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Stream is not open\n-9 -- Other error\nIf any argument's value is null, Length returns null.\nExamples\nThis example opens an OLE object in the file MYSTUFF.OLE and assigns it to the\nOLEStorage object stg_stuff. Then it opens the stream called info in stg_stuff and assigns it\nto the stream object olestr_info. Finally, it finds out the stream's length and stores the value in\nthe variable info_len.\nThe example does not check the function's return values for success, but you should be sure\nto check the return values in your code:\nboolean lb_memexists\nOLEStorage stg_stuff\nOLEStream olestr_info\nlong info_len\n \nstg_stuff = CREATE oleStorage\nstg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\n \nolestr_info.Open(stg_stuff, \"info\", &\n    stgRead!, stgExclusive!)\nolestr_info.Length(info_len)\nSee also\nOpen\nRead\nSeek\nWrite\n2.4.479 LibraryCreate\nDescription\nCreates an empty PowerBuilder library with optional comments.\nSyntax\n"}
{"page": 1044, "text": "Statements, Events, and Functions\nPage 1044\nLibraryCreate ( libraryname {, comments } )\nTable 2.932:\nArgument\nDescription\nlibraryname\nA string whose value is the name of the PowerBuilder library you want to\ncreate. If you want to create the library somewhere other than the current\ndirectory, enter the full path name.\ncomments\n(optional)\nA string whose value is the comments you want to associate with the\nlibrary.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nLibraryCreate returns null.\nUsage\nLibraryCreate creates a PowerBuilder library file (PBL) in the current directory, unless\nyou specify a directory path as part of libraryname. If you do not specify an extension,\nLibraryCreate adds the extension .PBL.\nExamples\nThis statement in Windows NT creates a library named dwTemp in the PB directory on drive\nC and associates a comment with the library:\nLibraryCreate(\"c:\\pb\\dwTemp.pbl\", &\n    \"Temporary library for dynamic DataWindows\")\nSee also\nLibraryDelete\nLibraryDirectory\nLibraryExport\nLibraryImport\n2.4.480 LibraryDelete\nDescription\nDeletes a library file or, if you specify a DataWindow object, deletes the DataWindow object\nfrom the library.\nSyntax\nLibraryDelete ( libraryname {, objectname, objecttype } )\nTable 2.933:\nArgument\nDescription\nlibraryname\nA string whose value is the name of the PowerBuilder library you want\nto delete or from which you want to delete a DataWindow object. If you\n"}
{"page": 1045, "text": "Statements, Events, and Functions\nPage 1045\nArgument\nDescription\ndo not specify a full path, LibraryDelete uses the system's standard file\nsearch order to find the file.\nobjectname\n(optional)\nA string whose value is the name of the DataWindow object you want to\ndelete from libraryname.\nobjecttype\n(optional)\nA value of the LibImportType enumerated datatype identifying the\ntype of object you want to delete. The only supported object type is\nImportDataWindow!.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nLibraryDelete returns null.\nUsage\nYou can delete DataWindow objects from a library in a script with the LibraryDelete\nfunction. To delete other types of objects, use the Library painter.\nExamples\nThis statement deletes a library called dwTemp in the current directory and on the current\napplication library path:\nLibraryDelete(\"dwTemp.pbl\")\nSee also\nLibraryCreate\nLibraryDirectory\nLibraryExport\nLibraryImport\n2.4.481 LibraryDirectory\nDescription\nObtains a list of the objects in a PowerBuilder library. The information provided is the object\nname, the date and time it was last modified, and any comments for the object. You can get a\nlist of all objects or just objects of a specified type.\nSyntax\nLibraryDirectory ( libraryname, objecttype )\nTable 2.934:\nArgument\nDescription\nlibraryname\nA string whose value is the name of the PowerBuilder library for which\nyou want the contents. If you do not specify a full path, LibraryDirectory\nuses the operating system's standard file search order to find the file.\n"}
{"page": 1046, "text": "Statements, Events, and Functions\nPage 1046\nArgument\nDescription\nobjecttype\nA value of the LibDirType enumerated datatype identifying the type of\nobjects you want listed:\n\u2022 DirAll! -- All objects\n\u2022 DirApplication! -- Application objects\n\u2022 DirDataWindow! -- DataWindow objects\n\u2022 DirFunction! -- Function objects\n\u2022 DirMenu! -- Menu objects\n\u2022 DirPipeline! -- Pipeline objects\n\u2022 DirProject! -- Project objects\n\u2022 DirQuery! -- Query objects\n\u2022 DirStructure! -- Structure objects\n\u2022 DirUserObject! -- User objects\n\u2022 DirWindow! -- Window objects\nReturn value\nString.\nLibraryDirectory returns a tab-separated list with one object per line. The format of the list is:\nname ~t date/time modified ~t comments ~n\nReturns the empty string (\"\") if an error occurs. If any argument's value is null,\nLibraryDirectory returns null.\nUsage\nIf you call LibraryDirectory with a PBD file as the first argument, no comments are displayed\nbecause they are not included in PBD files.\nYou can display the result of LibraryDirectory in a DataWindow control by passing the\nreturned string to the ImportString function for that DataWindow. The DataWindow should\ncontain three string columns. The columns must be wide enough to fit the data in the input\nstring. If not, PowerBuilder reports validation errors.\nTo return the object's type, use LibraryDirectoryEx.\nFor an example of parsing tab-delimited data, see the Pos function.\nExamples\nThis code imports the string returned by LibraryDirectory to the DataWindow dw_list and\nthen redraws the dw_list. The DataWindow was defined with an external source and three\nstring columns:\n"}
{"page": 1047, "text": "Statements, Events, and Functions\nPage 1047\nString ls_entries\n \nls_entries = LibraryDirectory( &\n \"c:\\pb\\dwTemp.pbl\", DirUserObject!)\ndw_list.SetRedraw(FALSE)\ndw_list.Reset( )\ndw_list.ImportString(ls_Entries)\ndw_list.SetRedraw(TRUE)\nSee also\nImportString\nLibraryCreate\nLibraryDelete\nLibraryDirectoryEx\nLibraryExport\nLibraryImport\n2.4.482 LibraryDirectoryEx\nDescription\nObtains a list of the objects in a PowerBuilder library. The information provided is the object\nname, the date and time it was last modified, any comments for the object, and the object's\ntype. You can get a list of all objects or just objects of a specified type.\nSyntax\nLibraryDirectoryEx ( libraryname, objecttype )\nTable 2.935:\nArgument\nDescription\nlibraryname\nA string whose value is the name of the PowerBuilder library for which\nyou want the contents. If you do not specify a full path, LibraryDirectory\nuses the operating system's standard file search order to find the file.\nobjecttype\nA value of the LibDirType enumerated datatype identifying the type of\nobjects you want listed:\n\u2022 DirAll! -- All objects\n\u2022 DirApplication! -- Application objects\n\u2022 DirDataWindow! -- DataWindow objects\n\u2022 DirFunction! -- Function objects\n\u2022 DirMenu! -- Menu objects\n\u2022 DirPipeline! -- Pipeline objects\n\u2022 DirProject! -- Project objects\n"}
{"page": 1048, "text": "Statements, Events, and Functions\nPage 1048\nArgument\nDescription\n\u2022 DirQuery! -- Query objects\n\u2022 DirStructure! -- Structure objects\n\u2022 DirUserObject! -- User objects\n\u2022 DirWindow! -- Window objects\nReturn value\nString.\nLibraryDirectoryEx returns a tab-separated list with one object per line. The format of the list\nis:\nname ~t date/time modified ~t comments ~t   type~n\nReturns the empty string (\"\") if an error occurs. If any argument's value is null,\nLibraryDirectoryEx returns null.\nUsage\nIf you call LibraryDirectoryEx with a PBD file as the first argument, no comments are\ndisplayed because they are not included in PBD files.\nYou can display the result of LibraryDirectoryEx in a DataWindow control by passing the\nreturned string to the ImportString function for that DataWindow. The DataWindow should\ncontain four string columns. The columns must be wide enough to fit the data in the input\nstring. If not, PowerBuilder reports validation errors.\nIf you do not need to return the object's type, you can use LibraryDirectory.\nFor an example of parsing tab-delimited data, see the Pos or LastPos function.\nExamples\nThis code imports the string returned by LibraryDirectoryEx to the DataWindow dw_list and\nthen redraws the dw_list. The DataWindow was defined with an external source and four\nstring columns:\nString ls_entries\n \nls_entries = LibraryDirectoryEx( &\n \"c:\\pb\\dwTemp.pbl\", DirUserObject!)\ndw_list.SetRedraw(FALSE)\ndw_list.Reset( )\ndw_list.ImportString(ls_Entries)\ndw_list.SetRedraw(TRUE)\nSee also\nImportString\nLibraryCreate\nLibraryDelete\nLibraryDirectory\n"}
{"page": 1049, "text": "Statements, Events, and Functions\nPage 1049\nLibraryExport\nLibraryImport\n2.4.483 LibraryExport\nDescription\nExports an object from a library. The object is exported as syntax.\nSyntax\nLibraryExport ( libraryname, objectname, objecttype )\nTable 2.936:\nArgument\nDescription\nlibraryname\nA string whose value is the name of the PowerBuilder library from\nwhich you want to export an object. If you do not specify a full path,\nLibraryExport uses the system's standard file search order to find the file.\nobjectname\nA string whose value is the name of the object you want to export\nobjecttype\nA value of the LibExportType enumerated datatype identifying the type\nof objects you want to export:\n\u2022 ExportApplication! -- Application object\n\u2022 ExportDataWindow! -- DataWindow object\n\u2022 ExportFunction! -- Function object\n\u2022 ExportMenu! -- Menu object\n\u2022 ExportPipeline! -- Pipeline objects\n\u2022 ExportProject! -- Project objects\n\u2022 ExportQuery! -- Query objects\n\u2022 ExportStructure! -- Structure object\n\u2022 ExportUserObject! -- User objects\n\u2022 ExportWindow! -- Window object\nReturn value\nString.\nReturns the syntax of the object if it succeeds. The syntax is the same as the syntax returned\nwhen you export an object in the Library painter except that LibraryExport does not include\nan export header. Returns the empty string (\"\") if an error occurs. If any argument's value is\nnull, LibraryExport returns null.\n"}
{"page": 1050, "text": "Statements, Events, and Functions\nPage 1050\nExamples\nThese statements export the DataWindow object dw_emp from the library called dwTemp to\na string named ls_dwsyn and then use it to create a DataWindow:\nString ls_dwsyn, ls_errors\nls_dwsyn = LibraryExport(\"c:\\pb\\dwTemp.pbl\", &\n    \"d_emp\", ExportDataWindow!)\ndw_1.Create(ls_dwsyn, ls_errors)\nSee also\nCreate method for DataWindows in Section 9.13, \u201cCreate\u201d in DataWindow Reference.\nLibraryCreate\nLibraryDelete\nLibraryDirectory\nLibraryImport\n2.4.484 LibraryImport\nDescription\nImports a DataWindow object into a library. LibraryImport uses the syntax of the\nDataWindow object, which is specified in text format, to recreate the object in the library.\nSyntax\nLibraryImport ( libraryname, objectname, objecttype, syntax, errors   {,\n comments } )\nTable 2.937:\nArgument\nDescription\nlibraryname\nA string specifying the name of the PowerBuilder library into which you\nwant to import the entry. If you do not specify a full path, LibraryImport\nuses the system's standard file search order to find the file.\nobjectname\nA string specifying the name of the DataWindow object you want to\nimport.\nobjecttype\nA value of the LibImportType enumerated datatype identifying the\ntype of object you want to import. The only supported object type is\nImportDataWindow!.\nsyntax\nA string specifying the syntax of the DataWindow object you want to\nimport.\nerrors\nA string variable that you want to fill with any error messages that occur.\ncomments\n(optional)\nA string specifying the comments you want to associate with the entry.\nReturn value\nInteger.\n"}
{"page": 1051, "text": "Statements, Events, and Functions\nPage 1051\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nLibraryImport returns null.\nUsage\nWhen you import a DataWindow, any errors that occur are stored in the string variable you\nspecify for the error argument.\nWhen your application creates a DataWindow dynamically at runtime, you can use\nLibraryImport to save that DataWindow object in a library.\nExamples\nThese statements import the DataWindow object d_emp into the library called dwTemp\nand store any errors in ErrorBuffer. Note that the syntax is obtained by using the Describe\nfunction:\nstring dwsyntax, ErrorBuffer\ninteger rtncode\n \ndwsyntax = dw_1.Describe(\"DataWindow.Syntax\")\nrtncode = LibraryImport(\"c:\\pb\\dwTemp.pbl\", &\n    \"d_emp\", ImportDataWindow!, &\n      dwsyntax, ErrorBuffer )\nThese statements import the DataWindow object d_emp into the library called dwTemp, store\nany errors in ErrorBuffer, and associate the comment Employee DataWindow 1 with the\nentry:\nstring dwsyntax, ErrorBuffer\ninteger rtncode\n \ndwsyntax = dw_1.Describe(\"DataWindow.Syntax\")\nrtncode = LibraryImport(\"c:\\pb\\dwTemp.pbl\", &\n    \"d_emp\", ImportDataWindow!, &\n      dwsyntax, ErrorBuffer, &\n        \"Employee DataWindow 1\")\nSee also\nDescribe method for DataWindows in Section 9.23, \u201cDescribe\u201d in DataWindow Reference.\nLibraryCreate\nLibraryDelete\nLibraryDirectory\nLibraryImport\n2.4.485 LineCount\nDescription\nDetermines the number of lines in an edit control that allows multiple lines.\nApplies to\nRichTextEdit, MultiLineEdit, EditMask, and DataWindow controls\nSyntax\n"}
{"page": 1052, "text": "Statements, Events, and Functions\nPage 1052\neditname.LineCount ( )\nTable 2.938:\nArgument\nDescription\neditname\nThe name of the DataWindow control, EditMask, MultiLineEdit, or\nRichTextEdit for which you want the number of lines\nReturn value\nLong.\nReturns the number of lines in editname if it succeeds and -1 if an error occurs. If editname is\nnull, LineCount returns null.\nUsage\nLineCount counts each visible line, whether it was the result of wrapping or carriage returns.\nWhen you call LineCount for a DataWindow, it reports the number of lines in the edit control\nover the current row and column. A user can enter multiple lines in a DataWindow column\nonly if it has a text datatype and its box is large enough to display those lines. The size of the\ncolumn's box determines the number of lines allowed in the column. When the user is typing,\nlines do not wrap automatically; the user must press enter to type additional lines.\nIn a MultiLineEdit control, lines wrap when the user's typing fills the control horizontally,\nunless either the HScrollBar or AutoHScroll property is true. If horizontal scrolling is enabled\nwith these properties, the user must press enter to type additional lines.\nA RichTextEdit control always contains an end-of-file mark even if there is no text in the\ncontrol. Therefore, its line count is always at least 1. Other edit controls, when empty, have a\nline count of 0.\nExamples\nIf the MultiLineEdit mle_Instructions has 9 lines, this example sets li_Count to 9:\ninteger li_Count\nli_Count = mle_Instructions.LineCount()\nThese statements display a MessageBox if fewer than two lines have been entered in the\nMultiLineEdit mle_Address:\ninteger li_Lines\nli_Lines = mle_Address.LineCount()\nIF li_Lines < 2 THEN\n    MessageBox(\"Warning\", \"2 lines are required.\")\nEND IF\n2.4.486 LineLength\nDescription\nDetermines the length of the line containing the insertion point in an edit control.\nApplies to\nRichTextEdit, MultiLineEdit, and EditMask controls\n"}
{"page": 1053, "text": "Statements, Events, and Functions\nPage 1053\nSyntax\neditname.LineLength ( )\nTable 2.939:\nArgument\nDescription\neditname\nThe name of the RichTextEdit, MultiLineEdit, or EditMask in which you\nwant to determine the length of the line containing the insertion point\nReturn value\nLong.\nReturns the length of the line containing the insertion point in editname. Returns -1 if an error\noccurs. If editname is null, LineLength returns null.\nUsage\nIf the control contains a selection instead of a single insertion point, LineLength counts the\nline at the beginning of the selection.\nPowerBuilder remembers where the insertion point is in each editable control. When the user\nmoves the focus to another control, you can still find out the length of the line most recently\nedited by calling the LineLength function for that control.\nInsertion point in editable controls\nBecause PowerBuilder remembers the position of the insertion point, users can\nresume editing at the insertion point if they make the control active by tabbing to it.\nWhen users make a control active by clicking on it, they move the insertion point as\nwell.\nFor an EditMask control, LineLength reports the length of the mask, regardless of the number\nof characters the user has entered.\nExamples\nIf the insertion point is positioned anywhere in line 5 of mle_Contact and line 5 contains the\ntext Select All, il_linelength is set to 10 (the length of line 5):\ninteger li_linelength\nli_linelength = mle_Contact.LineLength()\nSee also\nPosition\nSelectedLine\nSelectedStart\nTextLine\n2.4.487 LineList\nDescription\n"}
{"page": 1054, "text": "Statements, Events, and Functions\nPage 1054\nProvides a list of the lines in a routine included in a performance analysis model.\nApplies to\nProfileRoutine object\nSyntax\niinstancename.LineList ( list )\nTable 2.940:\nArgument\nDescription\ninstancename\nInstance name of the ProfileRoutine object.\nlist\nAn unbounded array variable of datatype ProfileLine in which LineList\nstores a ProfileLine object for each line in the routine. This argument is\npassed by reference.\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- The model does not exist\nUsage\nUse this function to extract a list of the lines in a routine included in the performance analysis\nmodel. You must have previously created the performance analysis model from a trace file\nusing the BuildModel function. Each line is defined as a ProfileLine object and provides the\nnumber of times the line was hit, any calls made from the line, and the time spent on the line\nand in any called functions. The lines are listed in numeric order.\nLines are not returned for database statements and objects. If line information was not logged\nin the trace file, lines are not returned.\nExamples\nThis example gets a list of the routines included in a performance analysis model and then\ngets a list of the lines in each routine:\nLong ll_cnt\nProfileLine lproln_line[]\n \nlpro_model.BuildModel()\nlpro_model.RoutineList(iprort_list)\n \nFOR ll_cnt = 1 TO UpperBound(iprort_list)\n    iprort_list[ll_cnt].LineList(lproln_line)\n    ...\nNEXT\nSee also\nBuildModel\n"}
{"page": 1055, "text": "Statements, Events, and Functions\nPage 1055\n2.4.488 LinkTo\nDescription\nEstablishes a link between an OLE control and a file or an item within the file.\nSyntax\nolecontrol.LinkTo ( filename {, sourceitem } )\nTable 2.941:\nArgument\nDescription\nolecontrol\nThe name of the OLE control in which you want to insert a linked object.\nfilename\nA string whose value is the file name containing the data that you want\nto insert in olecontrol, with a link connecting the object in PowerBuilder\nto the original data. If you do not specify sourceitem, a link is established\nwith the whole file.\nsourceitem\n(optional)\nA string that names an item within file name to which you want to\nlink. The way you specify sourceitem is determined by the OLE server\napplication.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- File not found\n-2 -- Item not found\n-9 -- Other error\nIf any argument's value is null, LinkTo returns null.\nExamples\nThis example creates an object in the OLE control, ole_1. The object is linked to the file C:\n\\XLS\\EXPENSE.XLS:\ninteger result\nresult = ole_1.LinkTo(\"c:\\xls\\expense.xls\")\nThis example links to a section of rows and columns in the same spreadsheet as in the\nprevious example:\ninteger result\nresult = ole_1.LinkTo(\"c:\\xls\\expense.xls\", &\n    \"R1C1:R5C5\")\nSee also\nInsertFile\nInsertObject\nPasteLink\n"}
{"page": 1056, "text": "Statements, Events, and Functions\nPage 1056\nPasteSpecial\n2.4.489 LoadDockingState\nDescription\nLoads two arrays of equal size: type names of persisted sheets and the corresponding IDs.\nApplies to\nWindow objects\nSyntax\nLoadDockingState ( regkey, windowtypes, sheetnames )\nTable 2.942:\nArgument\nDescription\nregkey\nThe registry key where the information was stored using the\nLoadDockingState function.\nwindowtypes\nA string array of window types for all the child windows that were\npersisted.\nsheetnames\nA string array of the unique IDs for the persisted child windows\ncorresponding to the types in the sheetnames array.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nLoadDockingState returns null.\nUsage\nTo retrieve the MDI states that were saved using the SaveDockingState function,\nuses LoadDockingState to get the window information from the registry. Next, use\nOpenSheetFromDockingState or OpenSheetWithParmFromDockingState to open each of\nthe persisted sheets. Finally, use CommitDocking to do the final arrangement and make the\nsheets visible.\n2.4.490 LoadFile\nDescription\nLoads a JSON file to the JSONParser or JSONPackage objects.\nApplies to\nJSONParser and JSONPackage\nRequired JSON format\n\u2022 For JSONParser object: The file content that can be loaded by the JSONParser object must\nbe JSON-formatted.\n"}
{"page": 1057, "text": "Statements, Events, and Functions\nPage 1057\n\u2022 For JSONPackage object: The file content that can be loaded by the JSONPackage object\nmust be an object which contains a set of key/value pairs where key is the name of a\nJSONObjectItem-type object (corresponding to the data being added into the package, such\nas \"d_department\" and \"d_employee_syntax\") and the value for the key can be a string,\nobject, or array in the following formats: plain JSON, or DataWindow JSON.\nHere is the structure of this JSON format:\n{ \"KEY1\":VALUE1, \"KEY2\":VALUE2, \"KEY3\":VALUE3\u2026 }\nHere is an example of this JSON format:\n{\n\"d_department\": {\"department_id\":1, \"name\":\"developer\"},\n\"d_employee\": [{\"empoyee_id\":1, \"name\":\"my name1\"}, {\"empoyee_id\":2, \"name\":\"my\n name2\"}],\n\"d_employee_syntax\": \"release 17;\\r\\n datawindow(units=0 timer_interval=0\n color=1073741824...\"\n}\nSyntax\nobjectname.LoadFile ( FileName )\nTable 2.943:\nArgument\nDescription\nobjectname\nThe name of the JSONParser or JSONPackage object to which the JSON\nfile will be loaded.\nFileName\nA string whose value is the file full name. Only the JSON or TXT file\ntype is supported.\nIf the function is called by JSONParser, the file content must be JSON\nformatted.\nIf the function is called by JSONPackage, the file content must be JSON\ndata of JsonObjectItem type.\nReturn value\nString.\nReturns the empty string (\"\") if it succeeds and the error message if an error occurs. If any\nargument's value is null, the method returns null.\nUsage\nIf a file is already loaded by this function, calling this function again will clean up the\noriginal file and then load the new file.\nExamples\nThis example loads a JSON file into the JSONParser object:\nString ls_Error\nJsonParser lnv_JsonParser\nlnv_JsonParser = Create JsonParser\n"}
{"page": 1058, "text": "Statements, Events, and Functions\nPage 1058\nls_Error = lnv_JsonParser.LoadFile(\"c:\\employee.json\")\nif Len(ls_Error) > 0 then\n MessageBox(\"Error\", ls_Error)\nend if\nThis example loads data from the employees.txt file and then loads the \"d_employee\" data\ninto the DataWindow:\nstring ls_EmployeeJson, ls_Error\nJsonPackage lnv_package\nlnv_package = create JsonPackage\nls_Error = lnv_package.LoadFile (\"d:\\temp\\employees.txt\")\nif Len(ls_Error) = 0 then\n ls_EmployeeJson = lnv_package.GetValue(\"d_employee\")\n dw_1.ImportJson(ls_EmployeeJson)\nelse\n Messagebox(\"Error\", ls_Error)\nend if\nSee also\nLoadString\n2.4.491 LoadString\nDescription\nLoads a JSON string to the JSONParser or JSONPackage objects.\nApplies to\nJSONParser and JSONPackage\nRequired JSON format\n\u2022 For JSONParser object: The string that can be loaded by the JSONParser object must be\nJSON-formatted.\n\u2022 For JSONPackage object: The file content that can be loaded by the JSONPackage object\nmust be an object which contains a set of key/value pairs where key is the name of a\nJSONObjectItem-type object (corresponding to the data being added into the package, such\nas \"d_department\" and \"d_employee_syntax\") and the value for the key can be a string,\nobject, or array in the following formats: plain JSON, or DataWindow JSON.\nHere is the structure of this JSON format:\n{ \"KEY1\":VALUE1, \"KEY2\":VALUE2, \"KEY3\":VALUE3\u2026 }\nHere is an example of this JSON format:\n{\n\"d_department\": {\"department_id\":1, \"name\":\"developer\"},\n\"d_employee\": [{\"empoyee_id\":1, \"name\":\"my name1\"}, {\"empoyee_id\":2, \"name\":\"my\n name2\"}],\n\"d_employee_syntax\": \"release 17;\\r\\n datawindow(units=0 timer_interval=0\n color=1073741824...\"\n}\nSyntax\n"}
{"page": 1059, "text": "Statements, Events, and Functions\nPage 1059\nobjectname.LoadString ( JsonData )\nTable 2.944:\nArgument\nDescription\nobjectname\nThe name of the JSONParser or JSONPackage object to which the JSON\nstring will be loaded.\nJsonData\n(For JSONParser object) A JSON-formatted string.\n(For JSONPackage object) The JSON data of JsonObjectItem type.\nReturn value\nString.\nReturns the empty string (\"\") if it succeeds and the error message if an error occurs. If any\nargument's value is null, the method returns null.\nUsage\nIf a string is already loaded by this function, calling this function again will clean up the\noriginal string and then load the new string.\nExamples\nThis example loads a JSON string into the JSONParser object:\nString ls_Error\nJsonParser lnv_JsonParser \nlnv_JsonParser = Create JsonParser\nString ls_Json = '{\"id\":1, \"name\":\"evan1\", \"birthday\":2340323884}'\nls_Error = lnv_JsonParser.LoadString(ls_Json)\nif Len(ls_Error) > 0 then\n MessageBox(\"Error\", ls_Error)\nend if\nThis example gets the data from the server and then loads the \"d_employee\" data to the\nDataWindow:\nint li_rc\nstring ls_JsonPackage, ls_Error, ls_EmployeeJson\nHttpClient lnv_HttpClient\nJsonPackage lnv_package\nlnv_HttpClient = create HttpClient\nlnv_package = create JsonPackage\n// Request the JSON data package from server\nli_rc = lnv_HttpClient.SendRequest(\"GET\", \"https://demo.appeon.com/PB/\nwebapi_client/getjsonpackage/employee/102\")\n// Get the data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n lnv_HttpClient.GetResponseBody(ls_JsonPackage)\n // Extract the JSON data package\n ls_Error = lnv_package.LoadString(ls_JsonPackage)\n if Len(ls_Error) = 0 then\n  ls_EmployeeJson = lnv_package.GetValue(\"d_employee\")\n  dw_1.ImportJson(ls_EmployeeJson)\n"}
{"page": 1060, "text": "Statements, Events, and Functions\nPage 1060\n else\n  Messagebox(\"Error\", ls_Error)\n end if\nend if\nSee also\nLoadFile\n2.4.492 LoadInk\nDescription\nLoads ink from a file or blob into an InkPicture control.\nApplies to\nInkPicture controls\nSyntax\ninkpicname.LoadInk ( t | b )\nTable 2.945:\nArgument\nDescription\ninkpicname\nThe name of the InkPicture control into which you want to load ink.\nt\nA string containing the name and location of a file that contains the ink\nyou want to load into the control.\nb\nThe name of a blob passed by reference that contains the ink you want to\nload into the control.\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\nUse the LoadInk function to load ink that has been saved to a file or a blob into the control.\nExamples\nThe following example loads ink from a file. Since the user will select a single file, the\nsecond argument to GetFileOpenName contains the file's path and its name, so the third\nargument can be ignored:\nstring ls_inkpath, ls_inkname\nGetFileOpenName(\"Select Ink File\", ls_inkpath,  &\n   ls_inkname)\nip_1.LoadInk(ls_inkpath)\nThe following example loads ink from a blob:\nstring ls_inkpath, ls_inkname\ninteger li_filenum\nblob lblb_ink\n"}
{"page": 1061, "text": "Statements, Events, and Functions\nPage 1061\nGetFileOpenName(\"Select Ink File\", ls_inkpath,  &\n   ls_inkname)\nli_filenum = FileOpen(ls_inkpath, StreamMode!)\nIf li_filenum <> 1 Then   FileRead(li_filenum, lblb_ink)\n   FileClose(li_filenum)\n   ip_1.LoadInk(lblb_ink)\nEnd If\nSee also\nLoadPicture\nResetInk\nResetPicture\nSaveInk\nSave\n2.4.493 LoadPicture\nDescription\nLoads a picture from a file or blob into an InkPicture control.\nApplies to\nInkPicture controls\nSyntax\ninkpicname.LoadPicture ( t | b )\nTable 2.946:\nArgument\nDescription\ninkpicname\nThe name of the InkPicture control into which you want to load a picture.\nt\nA string containing the name and location of a file that contains the\npicture you want to load into the control.\nb\nThe name of a blob passed by reference that contains the picture you\nwant to load into the control.\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\nUse the LoadPicture function to load an image into an InkPicture control.\nExamples\nThe following example loads an image from a file. Since the user will select a single file,\nthe second argument to GetFileOpenName contains the file's path and its name, so the third\nargument can be ignored:\n"}
{"page": 1062, "text": "Statements, Events, and Functions\nPage 1062\nstring ls_path, ls_name\nGetFileOpenName(\"Select Image\", ls_path, ls_name)\nip_1.LoadPicture(ls_path)\nThe following example loads an image from a blob:\nstring ls_path, ls_name\ninteger li_filenum\nblob lblb_ink\nGetFileOpenName(\"Select Ink File\", ls_path, ls_name)\nli_filenum = FileOpen(ls_path, StreamMode!)\nIf li_filenum <> 1 Then   FileRead(li_filenum, lblb_ink)\n   FileClose(li_filenum)\n   ip_1.LoadInk(lblb_ink)\nEnd If\nSee also\nLoadInk\nResetInk\nResetPicture\nSaveInk\nSave\n2.4.494 LoadWithDotNetCore\nDescription\nLoads a .NET Core assembly.\nApplies to\nDotNetAssembly objects\nSyntax\nobjectname.LoadWithDotNetCore ( readonly string assemblypath {, string\n dotnetcoreversion })\nTable 2.947:\nArgument\nDescription\nobjectname\nThe name of the DotNetAssembly object.\nassemblypath\nThe name and location of the .NET assembly (*.dll).\nThe location can be an absolute path or a relative path. When a relative\npath is executed in the development environment, it is relative to\nthe location of the PBT file; when a relative path is executed in the\nproduction environment, it is relative to the installation location of the\napplication's executable file.\ndotnetcoreversion\n(optional)\nThe highest .NET Core version to be supported. 2.1 and later versions\nare supported. For example, if the value is 3, it supports 3.x, the latest\nrelease for version 3 which is currently installed on the machine. If the\n"}
{"page": 1063, "text": "Statements, Events, and Functions\nPage 1063\nArgument\nDescription\nvalue is not specified, it supports the latest version currently installed on\nthe machine.\nReturn value\nInteger.\nReturns values as follows. If any argument's value is null, the method returns null.\n1 -- Success.\n-1 -- Unknown error.\n-2 -- Could not find the assembly.\n-3 -- It's not a valid assembly.\n-4 -- The assembly requires a dependent assembly.\n-19 -- Cannot find the .NET Core runtime.\n-20 -- Failed to load the .NET Core virtual machine.\nExamples\nThe following example loads a DLL with .NET Core 2.1.6:\nLong ll_return\nString ls_dll\nDotNetAssembly  lcs_ass\n//Specifies a DLL in the relative path\nls_dll = \"Appeon.Simple.dll\"\n//Instantiates the DotNetAssembly object\nlcs_ass = create DotNetAssembly\n//Loads the DLL with .NET Core 2.1.6\nll_return = lcs_ass.LoadWithDotNetCore(ls_dll,\"2.1.6\")\n//Loads the DLL with the most curret .NET Core version on this machine\n//ll_return = lcs_ass.LoadWithDotNetCore(ls_dll)\n//Checks the result\nIf ll_return < 0 then\n   Messagebox(\"Load \"+ls_dll+\" Failed\", lcs_ass.ErrorText)\n   Return ll_return\nEnd if\nSee also\nCreateInstance\nGetDotNetCoreVersion\nLoadWithDotNetFramework\n2.4.495 LoadWithDotNetFramework\nDescription\n"}
{"page": 1064, "text": "Statements, Events, and Functions\nPage 1064\nLoads a .NET framework assembly.\nApplies to\nDotNetAssembly objects\nSyntax\nobjectname.LoadWithDotNetFramework ( readonly string assemblypath {, boolean\n customappdomain })\nTable 2.948:\nArgument\nDescription\nobjectname\nThe name of the DotNetAssembly object.\nassemblypath\nThe name and location of the .NET assembly (*.dll).\nThe location can be an absolute path or a relative path. When a relative\npath is executed in the development environment, it is relative to\nthe location of the PBT file; when a relative path is executed in the\nproduction environment, it is relative to the installation location of the\napplication's executable file.\ncustomappdomain\n(optional)\nBoolean whether to create a new appdomain to load the assembly. A new\nappdomain will automatically disconnect from the DLL to release the\nDLL when the application exits; otherwise, the DLL will be occupied\nuntil the PowerBuilder IDE exits.\nTrue -- to create a new appdomain to load the assembly.\nFalse -- (default) to use the default appdomain to load the assembly. It is\nrecommended to set to False at runtime (when the application executable\nruns).\nFor the custom appdomain parameter, you can learn more at https://\ndocs.microsoft.com/en-us/dotnet/api/system.appdomain?Redirected\nfrom=MSDN&view=netframework-4.8.\nReturn value\nInteger.\nReturns values as follows. If any argument's value is null, the method returns null.\n1 -- Success.\n-1 -- Unknown error.\n-2 -- Could not find the assembly.\n-3 -- It's not a valid assembly.\n-4 -- The assembly requires a dependent assembly.\nUsage\nThe .NET DLL file supported by PowerBuilder must be either a .NET Framework class\nlibrary or a .NET Standard class library.\n"}
{"page": 1065, "text": "Statements, Events, and Functions\nPage 1065\nThe DLL file will require the corresponding version of .NET Framework installed, especially\nif the DLL file is a .NET Standard class library. Please check the Microsoft website or the\nfollowing table for the compatible versions between .NET Standard and .NET Framework.\nTable 2.949:\n.NET\nStandard\n1.0\n1.1\n1.2\n1.3\n1.4\n1.5\n1.6\n2.0\n.NET\nFramework\n4.5\n4.5\n4.5.1\n4.6\n4.6.1\n4.7.2\n4.7.2\n4.7.2\nIf the DLL makes reference to another project, DLL, or Nuget package, please copy them\ninto the same location.\nWhen the DLL failed to load and triggered an exception, the exception message will be\nstored in the ErrorText property.\nIf you are prompted with missing dependent DLLs, even after you have provided the required\nDLLs in the required location, you can exit PowerBuilder IDE to release DLL and then\ntry again, or you can set customappdomain to true (to automatically release DLL when\napplication exits).\nWhen customappdomain is true, and if the following errors occur with the usage of\noleobject(sqlca.getadoconnection()), you can set customappdomain to false to avoid the error.\nFigure 2.1:\nExamples\nThe following example loads a DLL in the relative path:\nLong ll_return\nString ls_dll\nDotNetAssembly  lcs_ass\n//Specifies a DLL in the relative path\nLs_dll = \"Appeon.Simple.dll\"\n//Instantiates the DotNetAssembly object\nLcs_ass = create DotNetAssembly\n//Loads the DLL\nLl_return = lcs_ass.LoadWithDotNetFramework(ls_dll)\n//Checks the result\nIf ll_return < 0 then\n"}
{"page": 1066, "text": "Statements, Events, and Functions\nPage 1066\n Messagebox(\"Load \"+ls_dll+\" Failed\", lcs_ass.ErrorText)\n Return ll_return\nEnd if\nSee also\nCreateInstance\nGetDotNetCoreVersion\nLoadWithDotNetCore\n2.4.496 Log\nReturns the natural logarithm of a number. For an ErrorLogging object, this function can be\nused to write a string to the log file maintained by the object's container.\nTable 2.950:\nTo\nUse\nDetermine the natural logarithm of a number\nSyntax 1\nWrite a string to a log file\nSyntax 2\n2.4.496.1 Syntax 1: For all objects\nDescription\nDetermines the natural logarithm of a number.\nSyntax\nLog ( n ) \nTable 2.951:\nArgument\nDescription\nn\nThe number for which you want the natural logarithm (base e). The value\nof n must be greater than 0.\nReturn value\nDouble.\nReturns the natural logarithm of n. An execution error occurs if n is negative or zero. If n is\nnull, Log returns null.\nInverse of Log\nThe inverse of the Log function is the Exp function.\nExamples\nThis statement returns 2.302585092:\nLog(10)\n"}
{"page": 1067, "text": "Statements, Events, and Functions\nPage 1067\nThis statement returns -.693147. . .:\nLog(0.5)\nBoth these statements result in an error at runtime:\nLog(0)\nLog(-2)\nAfter the following statements execute, the value of a is 200:\ndouble a, b =  Log(200)\na = Exp(b)// a = 200\nSee also\nExp\nLogTen\nLog method for DataWindows in Section 2.4.68, \u201cLog\u201d in DataWindow Reference.\n2.4.496.2 Syntax 2: For ErrorLogging objects\nDescription\nWrites a string to the log file maintained by the object's container.\nApplies to\nErrorLogging objects\nSyntax\nerrorlogobj.Log ( message )\nTable 2.952:\nArgument\nDescription\nerrorlogobj\nReference to the ErrorLogging service instance\nmessage\nThe text string you want to write to the log\nReturn value\nNone.\nUsage\nThe ErrorLogging object provides the ability to write messages to the log file used by the\nobject's container.\nBefore you call the Log function, create an instance of the ErrorLogging service by calling\nthe GetContextService function.\nExamples\nThe following example shows how to write a string to the log for COM+:\nErrorLogging el\n"}
{"page": 1068, "text": "Statements, Events, and Functions\nPage 1068\nthis.GetContextService(\"ErrorLogging\", el)\nel.log(\"Write this string to log\")\nSee also\nGetContextService\n2.4.497 LogTen\nDescription\nDetermines the base 10 logarithm of a number.\nSyntax\nLogTen ( n )\nTable 2.953:\nArgument\nDescription\nn\nThe number for which you want the base 10 logarithm. The value of n\nmust not be negative.\nUsage\nDouble.\nReturns the base 10 logarithm of n. An execution error occurs if n is negative. If n is null,\nLogTen returns null.\nInverse of LogTen\nThe expression 10^n is the inverse of LogTen(n). To obtain the value of n in the equation r =\nLogTen(n), use n = 10^r.\nExamples\nThis statement returns 1:\nLogTen(10)\nThe following statements both return 0:\nLogTen(1)\n \nLogTen(0)\nThis statement results in an execution error:\nLogTen( - 2)\nAfter the following statements execute, the value of a is 200:\ndouble a, b = LogTen(200)\na = 10^b// a = 200\nSee also\nExp\n"}
{"page": 1069, "text": "Statements, Events, and Functions\nPage 1069\nLogTen\nLogTen method for DataWindows in Section 2.4.69, \u201cLogTen\u201d in DataWindow Reference.\n2.4.498 Long\nConverts data into data of type long. There are two syntaxes.\nTable 2.954:\nTo\nUse\nCombine two unsigned integers into a long value\nSyntax 1\nConvert a string whose value is a number into a long or to obtain a long\nvalue stored in a blob\nSyntax 2\n2.4.498.1 Syntax 1: For combining integers\nDescription\nCombines two unsigned integers into a long value.\nSyntax\nLong ( lowword, highword )\nTable 2.955:\nArgument\nDescription\nlowword\nAn UnsignedInteger to be the low word in the long\nhighword\nAn UnsignedInteger to be the high word in the long\nReturn value\nLong.\nReturns the long if it succeeds and -1 if an error occurs. If any argument's value is null, Long\nreturns null.\nUsage\nUse Long for passing values to external C functions or specifying a value for the LongParm\nproperty of PowerBuilder's Message object.\nExamples\nThese statements convert the UnsignedIntegers nLow and nHigh into a long value:\nUnsignedInt nLow // Low integer 16 bits\nUnsignedInt nHigh // High integer 16 bits\nlong LValue // Long value 32 bits\n \nnLow = 12345\nnHigh = 0\nLValue =  Long(nLow, nHigh)\nMessageBox(\"Long Value\", Lvalue)\n"}
{"page": 1070, "text": "Statements, Events, and Functions\nPage 1070\n2.4.498.2 Syntax 2: For converting strings and blobs\nDescription\nConverts a string whose value is a number into a long or obtains a long value stored in a blob.\nSyntax\nLong ( stringorblob )\nTable 2.956:\nArgument\nDescription\nstringorblob\nThe string you want returned as a long or a blob in which the first\nvalue is the long value. The rest of the contents of the blob is ignored.\nStringorblob can also be an Any variable containing a string or blob.\nReturn value\nLong.\nReturns the value of stringorblob as a long if it succeeds and 0 if stringorblob is not a valid\nPowerScript number or if it is an incompatible datatype. If stringorblob is null, Long returns\nnull.\nUsage\nTo distinguish between a string whose value is the number 0 and a string whose value is not a\nnumber, use the IsNumber function before calling the Long function.\nExamples\nThis statement returns 2167899876 as a long:\nLong(\"2167899876\")\nAfter assigning blob data from the database to lb_blob, the following example obtains the\nlong value stored at position 20 in the blob:\nlong lb_num\nlb_num = Long(BlobMid(lb_blob, 20, 4))\nFor an example of assigning and extracting values from a blob, see Real.\nSee also\nDec\nDouble\nInteger\nLongLong\nReal\nLong method for DataWindows in Section 2.4.70, \u201cLong\u201d in DataWindow Reference.\n2.4.499 LongLong\nConverts data into data of type longlong. There are two syntaxes.\n"}
{"page": 1071, "text": "Statements, Events, and Functions\nPage 1071\nTable 2.957:\nTo\nUse\nCombine two unsigned long values into a longlong value\nSyntax 1\nConvert a string whose value is a number into a longlong or obtain a\nlonglong value stored in a blob\nSyntax 2\n2.4.499.1 Syntax 1: For combining longs\nDescription\nCombines two unsigned longs into a longlong value.\nSyntax\nLongLong ( lowword, highword )\nTable 2.958:\nArgument\nDescription\nlowword\nAn UnsignedLong to be the low word in the longlong\nhighword\nAn UnsignedLong to be the high word in the longlong\nReturn value\nLongLong.\nReturns the longlong if it succeeds and -1 if an error occurs. If any argument's value is null,\nLongLong returns null.\nUsage\nUse LongLong for passing values to external C++ and Java functions.\nExamples\nThese statements convert the UnsignedLongs lLow and lHigh into a long value:\nUnsignedLong lLow      //Low long 32 bits\nUnsignedLong lHigh     //High long 32 bits\nlonglong LLValue       //LongLong value 64 bits\n \nlLow = 1234567890\nlHigh = 9876543210\nLLValue =  LongLong(lLow, lHigh)\nMessageBox(\"LongLong Value\", LLValue)\n2.4.499.2 Syntax 2: For converting strings and blobs\nDescription\nConverts a string whose value is a number into a longlong or obtains a longlong value stored\nin a blob.\nSyntax\nLongLong ( stringorblob )\n"}
{"page": 1072, "text": "Statements, Events, and Functions\nPage 1072\nTable 2.959:\nArgument\nDescription\nstringorblob\nThe string you want returned as a longlong or a blob in which the\nfirst value is the longlong value. The rest of the contents of the blob is\nignored. Stringorblob can also be an Any variable containing a string or\nblob.\nReturn value\nLongLong.\nReturns the value of stringorblob as a longlong if it succeeds and 0 if stringorblob is not a\nvalid PowerScript number or if it is an incompatible datatype. If stringorblob is null, Long\nreturns null.\nUsage\nTo distinguish between a string whose value is the number 0 and a string whose value is not a\nnumber, use the IsNumber function before calling the LongLong function.\nExamples\nThis statement returns 216789987654321 as a longlong:\nLongLong(\"216789987654321\")\nAfter assigning blob data from the database to lb_blob, the following example obtains the\nlonglong value stored at position 20 in the blob:\nlonglong llb_num\nllb_num = LongLong(BlobMid(lb_blob, 20, 4))\nFor an example of assigning and extracting values from a blob, see Real.\nSee also\nDec\nDouble\nInteger\nReal\n2.4.500 Lookup (obsolete)\nAllows a PowerBuilder client or component to obtain a factory or home interface in order\nto create an instance of an EAServer component. This function is used by PowerBuilder\nclients connecting to components running in EAServer, and by PowerBuilder components\nconnecting to other components running on the same server.\nObsolete function\nLookup is obsolete, because EAServer is no longer supported since PowerBuilder\n2017.\n"}
{"page": 1073, "text": "Statements, Events, and Functions\nPage 1073\nTable 2.960:\nTo\nUse\nObtain the factory interface of a CORBA-compliant component running\nin EAServer\nSyntax 1\nObtain the home interface of an EJB component running in EAServer\nSyntax 2\n2.4.500.1 Syntax 1: For CORBA-compliant EAServer components\nDescription\nAllows a PowerBuilder client or component to obtain the factory interface of an EAServer\ncomponent in order to create an instance of the component.\nApplies to\nConnection objects, TransactionServer objects\nSyntax\nobjname.Lookup (objectvariable , componentname )\nTable 2.961:\nArgument\nDescription\nobjname\nThe name of the Connection object used to establish the connection or of\nan instance of the TransactionServer context object.\nobjectvariable\nA global, instance, or local variable of the factory interface type.\ncomponentname\nA string whose value is the name of the component instance to be\ncreated. You can optionally prepend a package name followed by a slash\nto the component name (for example, \"mypackage/mycomponent\").\nReturn value\nLong.\nReturns 0 if it succeeds and a negative number if an error occurs.\nUsage\nThe Lookup function can be used as an alternative to the CreateInstance function. It obtains a\nreference to a factory interface that you can use to create an instance of a component running\nin EAServer.\nUse the Connection object's Lookup function to enable a PowerBuilder client to access a\ncomponent running in EAServer. You can supply a server name or a list of server names in\nthe location property of the Connection object.\nUse the TransactionServer object's Lookup function to enable a PowerBuilder component\nrunning in EAServer to access another component running on the same server.\nTo use the Lookup function, you need to create an EAServer proxy library for the\nSessionManager package to obtain a proxy for the factory interface. Include this proxy library\nin your library list.\n"}
{"page": 1074, "text": "Statements, Events, and Functions\nPage 1074\nExamples\nThe following example uses Lookup to instantiate the factory interface for the\nn_Bank_Account component, then it uses the factory's create method to create an instance of\nthe component:\n// Instance variable:\n// Connection myconnect\nFactory my_Factory\nCORBAObject mycorbaobj\nn_Bank_Account my_account\nlong ll_result\n \nll_result = &\n    myconnect.lookup(my_Factory,\"Bank/n_Bank_Account\")\nmycorbaobj = my_Factory.create()\nmycorbaobj._narrow(my_account, \"Bank/n_Bank_Account\")\nmy_account.withdraw(100.0)\nSee also\nCreateInstance\n2.4.500.2 Syntax 2: For instances of an EJB component\nDescription\nAllows a PowerBuilder client or component to obtain the home interface of an EJB\ncomponent in EAServer in order to create an instance of the component.\nApplies to\nConnection objects, TransactionServer objects\nSyntax\nobjname.Lookup (objectvariable , componentname {, homeid} )\nTable 2.962:\nArgument\nDescription\nobjname\nThe name of the Connection object used to establish the connection or of\nan instance of the TransactionServer context object.\nobjectvariable\nA global, instance, or local variable of the type of the home interface to\nbe created.\ncomponentname\nA string whose value is the name of the EJB component to be created.\nYou can optionally prepend a package name followed by a slash to the\ncomponent name (for example, \"mypackage/mycomponent\").\nhomeid\nA string whose value is the name of the home interface to be created.\nThis argument is optional\nReturn value\nLong.\nReturns 0 if it succeeds and a negative number if an error occurs.\n"}
{"page": 1075, "text": "Statements, Events, and Functions\nPage 1075\nUsage\nEJBConnection\nYou can also use the Lookup method of the EJBConnection PowerBuilder extension\nobject to create an instance of an EJB component running on any J2EE compliant\napplication server. For more information, see Lookup.\nThe Lookup function creates an instance of the home interface of an EJB component so that\nyou can use it to create an instance of the EJB. Use the Connection object's Lookup function\nto enable a PowerBuilder client to access a component running in EAServer. You can supply\na server name or a list of server names in the location property of the Connection object. Use\nthe TransactionServer object's Lookup function to enable a PowerBuilder component running\nin EAServer to access an EJB component running on the same server.\nThe Lookup function uses the standard CORBA naming service to resolve componentname\nto a CORBA object that is then narrowed to the home interface name of the component. If\nyou do not specify the third argument to the Lookup function, PowerBuilder expects the\nhome interface name to have the format PackageName/CompNameHome. However, most\nEJB components use a standard Java package directory structure and the home interface\nname has a format such as com/domain/project/CompNameHome.\nYou can ensure that a PowerBuilder client or component can locate the component's\nhome interface by supplying the third argument to the Lookup function to specify\nthe home interface name. A component's home interface name is defined in the\ncom.sybase.jaguar.component.home.ids property in the EAServer repository. The home.ids\nproperty has a format like this:\nIDL:com/domain/project/CompNameHome:1.0\nThe third argument should be the value of the component's home.ids string without the\nleading IDL: and trailing :1.0. For example:\nts.lookup(MyCartHome, \"shopping/cart\", &\n   \"com/sybase/shopping/CartHome\")\nAlternatively, you can use the fully-qualified Java class name of the home interface specified\nin dot notation. For example:\nts.lookup(MyCartHome, \"shopping/cart\", &\n   \"com.sybase.shopping.CartHome\")\nLookup is case sensitive\nLookup in EAServer is case sensitive. Make sure that the case in the string you\nspecify in the argument to the lookup function matches the case in the ejb.home\nproperty.\nExamples\nThe following example uses Lookup with the Connection object to locate the home interface\nof the Multiply session EJB in the Java package abc.xyz.math:\n// Instance variable:\n"}
{"page": 1076, "text": "Statements, Events, and Functions\nPage 1076\n// Connection myconnect\nMultiply myMultiply\nMultiplyHome myMultiplyHome\nlong ll_result, ll_product\n \nll_result = &\n   myconnect.lookup(myMultiplyHome,\"Math/Multiply\", &\n     \"abc.xyz.math.MultiplyHome)\nIF ll_result <> = 0 THEN\n   MessageBox(\"Lookup failed\", myconnect.errtext)\nELSE\n  try\n    myMultiply = myMultiplyHome.create()\n  catch (ctscomponents_createexception ce)\n    MessageBox(\"Create exception\", ce.getmessage())\n    // handle exception\n  end try\n  ll_product = myMultiply.multiply(1234, 4567)\nEND IF\nEntity beans have a findByPrimaryKey method that you can use to find an EJB saved in the\nprevious session. This example uses that method to find a shopping cart saved for Dirk Dent:\n// Instance variable:\n// Connection myconnect\nCart myCart\nCartHome myCartHome\nlong ll_result\n \nll_result = &\n  myconnect.lookup(myCartHome,\"Shopping/Cart\", &\n     \"com.mybiz.shopping.CartHome\")\nIF ll_result <> = 0 THEN\n  MessageBox(\"Lookup failed\", myconnect.errtext)\nELSE\n  TRY\n     myCart = myCartHome.findByPrimaryKey(\"DirkDent\")\n     myCart.addItem(101)\n  CATCH ( ctscomponents_finderexception fe )\n     MessageBox(\"Finder exception\", &\n         fe.getmessage())\n   END TRY\nEND IF\nNonvisual objects deployed from PowerBuilder to EAServer can use an instance of the\nTransactionServer context object to locate the home interface of an EJB component in the\nsame server:\nCalcHome MyCalcHome\nCalc MyCalc\nTransactionServer ts\nErrorLogging errlog\nlong ll_result\n \nthis.GetContextService(\"TransactionServer\", ts)\nthis.GetContextService(\"ErrorLogging\", errlog)\nll_result = ts.lookup(MyCalcHome, \"Utilities/Calc\", &\n   \"com.biz.access.utilities.CalcHome\")\nIF ll_result <> 0 THEN\n  errlog.log(\"Lookup failed: \" + string(ll_result))\nELSE\n  TRY     MyCalc = MyCalcHome.create()\n     MyCalc.square(12)\n  CATCH (ctscomponents_createexception ce)\n"}
{"page": 1077, "text": "Statements, Events, and Functions\nPage 1077\n     errlog.log(\"Create exception: \" + ce.getmessage())\n  END TRY\nEND IF\nSee also\nConnectToServer (obsolete)\n2.4.501 Lower\nDescription\nConverts all the characters in a string to lowercase.\nSyntax\nLower ( string )\nTable 2.963:\nArgument\nDescription\nstring\nThe string you want to convert to lowercase letters\nReturn value\nString.\nReturns string with uppercase letters changed to lowercase if it succeeds and the empty string\n(\"\") if an error occurs. If string is null, Lower returns null.\nExamples\nThis statement returns babe ruth:\nLower(\"Babe Ruth\")\nSee also\nUpper\nLower method for DataWindows in Section 2.4.72, \u201cLower\u201d in DataWindow Reference.\n2.4.502 LowerBound\nDescription\nObtains the lower bound of a dimension of an array.\nSyntax\nLowerBound ( array {, n } )\nTable 2.964:\nArgument\nDescription\narray\nThe name of the array for which you want the lower bound of a\ndimension\n"}
{"page": 1078, "text": "Statements, Events, and Functions\nPage 1078\nArgument\nDescription\nn (optional)\nThe number of the dimension for which you want the lower bound. The\ndefault is 1\nReturn value\nLong.\nReturns the lower bound of dimension n of array and -1 if n is greater than the number of\ndimensions of the array. If any argument's value is null, LowerBound returns null.\nUsage\nFor variable-size arrays, memory is allocated for the array when you assign values to it.\nBefore you assign values, the lower bound is 1 and the upper bound is 0.\nExamples\nThe following statements illustrate the values LowerBound reports for fixed-size arrays and\nfor variable-size arrays before and after memory has been allocated:\ninteger a[5], b[2,5]\nLowerBound(a)    // Returns 1\nLowerBound(a, 1) // Returns 1\nLowerBound(a, 2) // Returns -1, a has only 1 dim\nLowerBound(b, 2) // Returns 1\n \ninteger c[ ]\nLowerBound(c)    // Returns 1\nc[50] = 900\nLowerBound(c)    // Returns 1\n \ninteger d[-10 to 50]\nLowerBound(d)    // Returns  - 10\nSee also\nUpperBound\n2.4.503 mailAddress\nDescription\nUpdates the mailRecipient array for a mail message.\nApplies to\nmailSession object\nSyntax\nmailsession.mailAddress ( { mailmessage } )\nTable 2.965:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session in which you want to\naddress the message.\n"}
{"page": 1079, "text": "Statements, Events, and Functions\nPage 1079\nArgument\nDescription\nmailmessage\n(optional)\nA mailMessage structure containing information about the message. If\nyou omit mailmessage, mailAddress displays an Address dialog box.\nReturn value\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnFailure!\nmailReturnInsufficientMemory!\nmailReturnUserAbort!\nIf any argument's value is null, mailAddress returns null.\nUsage\nThe mailRecipient array contains information about recipients of a mail message or the\noriginator of a message. The originator is not used when you send a message.\nIf there is an error in the mailRecipient array, mailAddress displays the Address dialog box\nso the user can fix the address. If you pass a mailMessage structure that is a validly addressed\nmessage (such as a message that the user received) nothing happens because the addresses are\ncorrect.\nIf you do not specify a mailMessage, the mail system displays an Address dialog box that\nallows users to look for addresses and maintain their personal address list. The user cannot\nselect addresses for addressing a message.\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nExamples\nThese statements create a mail session, send mail with an attached TXT file, and then log off\nthe mail system and destroy the mail session object:\nmailSession mSes\nmailReturnCode mRet\nmailMessage mMsg\nmailFileDescription mAttach\n// Create a mail session\nmSes = CREATE mailSession\n// Log on to the session\nmRet = mSes.mailLogon(mailNewSession!)\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Mail\", 'Logon failed.')\n    RETURN\nEND IF\n  mMsg.AttachmentFile[1] = mAttach\n  mRet = mSes.mailAddress(mMsg)\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Mail\", 'Addressing failed.')\n    RETURN\nEND IF\n// Send the mail\nmRet = mSes.mailSend(mMsg)\n"}
{"page": 1080, "text": "Statements, Events, and Functions\nPage 1080\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Mail\", 'Sending mail failed.')\n    RETURN\nEND IF\nmSes.mailLogoff()\nDESTROY mSes\nSee also\nmailLogoff\nmailLogon\nmailResolveRecipient\nmailSend\n2.4.504 mailDeleteMessage\nDescription\nDeletes a mail message from the user's electronic mail inbox.\nApplies to\nmailSession object\nSyntax\nmailsession.mailDeleteMessage ( messageid )\nTable 2.966:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session in which you want to delete\nthe message\nmessageid\nA string whose value is the ID of the mail message to be deleted\nReturn value\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnFailure!\nmailReturnInsufficientMemory!\nmailReturnInvalidMessage!\nmailReturnUserAbort!\nIf any argument's value is null, mailDeleteMessage returns null.\nUsage\nTo get a list of message IDs in the user's inbox, call the mailGetMessages function. Before\ncalling mail functions, you must declare and create a mailSession object and call mailLogon\nto establish a mail session.\n"}
{"page": 1081, "text": "Statements, Events, and Functions\nPage 1081\nExamples\nAssume the DataWindow dw_inbox contains a list of mail items (sender, subject, postmark,\nand message ID), and that the mail session mSes has been created and a successful logon has\noccurred. This script for the clicked event for dw_inbox deletes the selected message from\nthe mail system:\nstring sID\ninteger nRow\nmailReturnCode mRet\n \nnRow = GetClickedRow()\nIF nRow > 0 THEN\n    sID = GetItemString(nRow, \"messageID\")\n    mRet = mSes.mailDeleteMessage(sID)\nEND IF\nSee also\nmailGetMessages\nmailLogon\n2.4.505 mailGetMessages\nDescription\nPopulates the messageID array of a mailSession object with the message IDs in the user's\ninbox.\nApplies to\nmailSession object\nSyntax\nmailsession.mailGetMessages ( { messagetype, } { unreadonly } )\nTable 2.967:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session in which you want to get the\nmessages.\nmessagetype\n(optional)\nA string whose value is a message type. The default message type is\nIPM or an empty string (\"\"), which identifies interpersonal messages.\nThe other standard type is IPC, which identifies hidden, interprocess\nmessages. Your mail administrator may have established other user-\ndefined message types.\nunreadonly\n(optional)\nA boolean value indicating you want only the IDs of unread messages.\nValues are:\n\u2022 TRUE -- Get IDs for unread messages only\n\u2022 FALSE -- Get IDs for all messages\nReturn value\n"}
{"page": 1082, "text": "Statements, Events, and Functions\nPage 1082\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnFailure!\nmailReturnInsufficientMemory!\nmailReturnNoMessages!\nmailReturnUserAbort!\nIf any argument's value is null, mailGetMessages returns null.\nUsage\nMailGetMessages only retrieves message IDs, which it stores in the mailSession object's\nMessageID array. A message ID serves as an argument for other mail functions. With\nmailReadMessage, for example, it identifies the message you want to read.\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nExamples\nThis example populates a DataWindow with the messages in the user's inbox. The\nDataWindow is defined with an external data source and has three columns: msgid, msgdate,\nand msgsubject. MailGetMessages fills the MessageID array in the mailSession object and\nmailReadMessage gets the information for each ID.\nThe example assumes that the application has already created the mailSession object mSes\nand logged on:\nmailMessage msg\nlong n, c_row\n \nmSes.mailGetMessages()\nFOR n = 1 to UpperBound(mSes.MessageID[])\n    mSes.mailReadMessage(mSes.MessageID[n], &\n    msg, mailEnvelopeOnly!, FALSE)\n    c_row = dw_1.InsertRow(0)\n    dw_1.SetItem(c_row, \"msgid\", mSes.MessageID[n])\n    dw_1.SetItem(c_row, \"msgdate\", msg.DateReceived)\n    // Truncate subject to fit defined column size\n    dw_1.SetItem(c_row, \"msgsubject\", &\n    Left(msg.Subject, 50))\nNEXT\nSee also\nmailDeleteMessage\nmailReadMessage\n2.4.506 mailHandle\nDescription\nObtains the handle of a mailSession object.\nApplies to\nmailSession object\n"}
{"page": 1083, "text": "Statements, Events, and Functions\nPage 1083\nSyntax\nmailsession.mailHandle ( )\nTable 2.968:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session for which you want the\nhandle\nReturn value\nUnsignedLong.\nReturns the internal handle of the mail session object. If mailsession is null, mailHandle\ndisplays an error message.\nUsage\nAfter you have logged on, your mailSession has a valid handle. You can use that handle\nto call external mail functions. MAPI has additional functions that PowerBuilder does not\nimplement directly.\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nExamples\nThis statement returns the handle of the current mail session:\ncurrent_session. mailHandle()\n2.4.507 mailLogoff\nDescription\nEnds the mail session, breaking the connection between the PowerBuilder application and\nmail. If the mail application was already running when PowerBuilder began the mail session,\nit is left in the same state.\nApplies to\nmailSession object\nSyntax\nmailsession.mailLogoff ( )\nTable 2.969:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session from which you want to log\noff\nReturn value\n"}
{"page": 1084, "text": "Statements, Events, and Functions\nPage 1084\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnFailure!\nmailReturnInsufficientMemory!\nUsage\nTo release the memory used by the mailSession object, use the DESTROY keyword after\nending the mail session.\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nExamples\nThis statement terminates the current mail session:\ncurrent_session. mailLogoff()\nDESTROY current_session\nSee also\nmailLogon\n2.4.508 mailLogon\nDescription\nEstablishes a mail session for the PowerBuilder application. The PowerBuilder application\ncan start a new session or join an existing session.\nApplies to\nmailSession object\nSyntax\nmailsession.mailLogon ( { profile, password } {, logonoption } )\nTable 2.970:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session you want to logon to.\nprofile (optional) A string whose value is the user's mail system profile or user ID.\npassword\n(optional)\nA string whose value is the user's mail system password.\nlogonoption\n(optional)\nA value of the mailLogonOption enumerated datatype specifying the\nlogon options:\n\u2022 mailNewSession! -- Starts a new mail session, whether or not the mail\napplication is already running\n\u2022 mailDownLoad! -- Forces the mail application to download any new\nmessages from the server to the user's inbox. Starts a new mail session\nonly if the mail application is not running\n"}
{"page": 1085, "text": "Statements, Events, and Functions\nPage 1085\nArgument\nDescription\n\u2022 mailNewSessionWithDownLoad! -- Starts a new mail session and\nforces new messages to be downloaded from the server to the user's\ninbox\nThe default is to use an existing session if possible and not to force new\nmessages to be downloaded.\nReturn value\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnLoginFailure!\nmailReturnInsufficientMemory!\nmailReturnTooManySessions!\nmailReturnUserAbort!\nIf any argument's value is null, mailLogon returns null.\nUsage\nIf you do not direct mailLogon to start a new session and the mail application is already\nrunning on the user's computer, then the PowerBuilder mail session attaches to the existing\nsession. A profile and password are not necessary.\nWhen mailLogon establishes a new session, then the mail system's dialog box prompts for the\nprofile and password if the script does not supply them.\nThe download option forces the mail server to download the latest messages to the user's\ninbox. This ensures that the inbox is up to date; it does not make the messages available to\nPowerBuilder. To access messages, use mailGetMessages and mailReadMessage.\nBefore calling mailLogon, you must declare and create a mailSession object.\nExamples\nIn this example, the mailSession object new_session is an instance variable of the window.\nThe window's Open event script allocates memory for the mailSession object and logs on.\nDuring the logon process, the mail application displays a dialog box prompting for the profile\nand password:\nnew_session = CREATE mailSession\nnew_session.mailLogon(mailNewSession!)\nThis example establishes a new mail session and makes the user's inbox up to date. The user\nwill not be prompted for an ID and password because user information is provided. Here the\nmailSession object is a local variable:\nmailSession new_session\nnew_session = CREATE mailSession\nnew_session.mailLogon(\"jpl\", \"hotstuff\", &\n    mailNewSessionWithDownLoad!)\nSee also\n"}
{"page": 1086, "text": "Statements, Events, and Functions\nPage 1086\nmailLogoff\n2.4.509 mailReadMessage\nDescription\nOpens a mail message whose ID is stored in the mail session's message array. You can\nchoose to read the entire message or the envelope (sender, date received, and so on) only. If a\nmessage has attachments, they are stored in a temporary file. You can also choose to have the\nmessage text written to in a temporary file.\nApplies to\nmailSession object\nSyntax\nmailsession.mailReadMessage ( messageid, mailmessage, readoption, mark )\nTable 2.971:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session in which you want to read a\nmessage.\nmessageid\nA string whose value is the ID of the mail message you want to read.\nmailmessage\nA mailMessage structure in which mailReadMessage stores the message\ninformation.\nreadoption\nA value of the mailReadOption enumerated datatype:\n\u2022 mailEntireMessage! -- Obtain header, text, and attachments\n\u2022 mailEnvelopeOnly! -- Obtain header information only\n\u2022 mailBodyAsFile! -- Obtain header, text, and attachments, and treat the\nmessage text as the first attachment, storing it in a temporary file\nmailBodyAsFile! is not supported for Extended MAPI. It works as\nmailEntireMessage! when used in PowerScript code.\n\u2022 mailSuppressAttachments! -- Obtain header and text, but no\nattachments\nmark\nA boolean indicating whether you want to mark the message as read in\nthe user's inbox. Values are:\n\u2022 TRUE -- Mark the message as read\n\u2022 FALSE -- Do not mark the message as read\nReturn value\nMailReturnCode. Returns one of the following values:\nmailReturnSuccess!\n"}
{"page": 1087, "text": "Statements, Events, and Functions\nPage 1087\nmailReturnFailure!\nmailReturnInsufficientMemory!\nIf any argument's value is null, mailReadMessage returns null.\nUsage\nTo obtain the message IDs for the messages in the user's inbox, call mailGetMessages.\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nReading attachments\nIf a message has an attachment and you do not suppress attachments, information\nabout it is stored in the AttachmentFile property of the mailMessage object. The\nAttachmentFile property is a mailFileDescription object. Its PathName property has\nthe location of the temporary file that mailReadMessage created for the attachment.\nBy default, the temporary file is in the directory specified by the TEMP environment\nvariable.\nBe sure to delete this temporary file when you no longer need it.\nExamples\nIn this example, mail is displayed in a window with a DataWindow dw_inbox that lists mail\nmessages and a MultiLineEdit mle_note that displays the message text. Assuming that the\napplication has created the mailSession object mSes and successfully logged on, and that\ndw_inbox contains a list of mail items (sender, subject, postmark, and message ID); this\nscript for the Clicked event for dw_inbox displays the text of the selected message in the\nMultiLineEdit mle_note:\ninteger nRow, nRet\nstring sMessageID\nstring sRet, sName\n \n// Find out what Mail Item was selected\nnRow = GetClickedRow()\nIF nRow > 0 THEN\n    // Get the message ID from the row\n    sMessageID = GetItemString(nRow, 'MessageID')\n \n    // Reread the message to obtain entire contents\n    // because previously we read only the envelope\n    mRet = mSes.mailReadMessage(sMessageID, mMsg &\n    mailEntireMessage!, TRUE)\n \n    // Display the text\n    mle_note.Text = mMsg.NoteText\nEND IF\nSee mailGetMessages for an example that creates a list of mail messages in a DataWindow\ncontrol, the type of setup that this example expects. See also the mail examples in the Code\nExamples sample application supplied with PowerBuilder.\nSee also\nmailGetMessages\n"}
{"page": 1088, "text": "Statements, Events, and Functions\nPage 1088\nmailLogon\nmailSend\n2.4.510 mailRecipientDetails\nDescription\nDisplays a dialog box with the specified recipient's address information.\nApplies to\nmailSession object\nSyntax\nmailsession.mailRecipientDetails ( mailrecipient {, allowupdates } )\nTable 2.972:\nArgument\nDescription\nmailsession\nA mailSession identifying the session in which you want to display the\ndetail information for a recipient.\nmailrecipient\nA mailRecipient structure containing valid address information.\nMailrecipient must contain a recipient identifier returned by mailAddress,\nmailResolveRecipient, or mailReadMessage.\nallowupdates\n(optional)\nA boolean indicating whether updates to the recipient's name will be\nallowed. If the user does not have update privileges for the mail system,\nthen allowupdates is ignored. The default is false.\nallowupdates is always true for Extended MAPI.\nReturn value\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnFailure!\nmailReturnInsufficientMemory!\nmailReturnUnknownRecipient!\nmailReturnUserAbort!\nIf any argument's value is null, mailRecipientDetails returns null.\nUsage\nThe effect of setting allowupdates to true depends on the mail system and the user's\nprivileges.\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nExamples\nThis example gets the message IDs from the user's inbox and reads the first message. It then\ncalls mailRecipientDetails to display address information for the first recipient. Recipient\n"}
{"page": 1089, "text": "Statements, Events, and Functions\nPage 1089\nis an array of structures and a property of mailMessage. Each array element is one of the\nmessage's recipients. The example does not check how many values there are in the message\nID or recipient arrays and it assumes that the application has already created a mailSession\nobject and logged on:\nmailMessage msg\ninteger n\nlong c_row\n \nmSes.mailGetMessages()\nmSes.mailReadMessage(mSes.MessageID[1], &\n    msg, mailEnvelopeOnly!, FALSE )\nmSes.mailRecipientDetails(msg.Recipient[1])\nSee also\nmailResolveRecipient\nmailSend\n2.4.511 mailResolveRecipient\nDescription\nObtains a valid e-mail address based on a partial or full user name and optionally updates\ninformation in the system's address list if the user has privileges to do so.\nApplies to\nmailSession object\nSyntax\nmailsession.mailResolveRecipient ( recipient {, allowupdates } )\nTable 2.973:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session in which you want to resolve\nthe recipient.\nrecipient\nA mailRecipient structure or a string variable whose value is a recipient's\nname. The recipient's name is a property of the mailRecipient structure.\nMailResolveRecipient sets the value of the string to the recipient's full\nname or the structure to the resolved address information.\nallowupdates\n(optional)\nA boolean indicating whether updates to the recipient's name will be\nallowed. If the user does not have update privileges for the mail system,\nthen allowupdates is ignored. The default is false.\nallowupdates is always false for Extended MAPI.\nReturn value\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnFailure!\n"}
{"page": 1090, "text": "Statements, Events, and Functions\nPage 1090\nmailReturnInsufficientMemory!\nmailReturnUserAbort!\nIf any argument's value is null, mailResolveRecipient returns null.\nUsage\nUse mailResolveRecipient to verify that a name is a valid address in the mail system. The\nfunction reports mailReturnFailure! if the name is not found.\nIf you supply a mailRecipient structure, mailResolveRecipient fills the structure with\nvalid address information when it resolves the address. If you supply a name as a string,\nmailResolveRecipient replaces the string's value with the full user name as recognized by the\nmail system. An address specified as a string is adequate for users in the local mail system.\nIf you are sending mail through gateways to other systems, you should obtain full address\ndetails in a mailRecipient structure.\nIf more than one address on the mail system matches the partial address information you\nsupply to mailResolveRecipient, the mail system may display a dialog box allowing the user\nto choose the desired name.\nIf you supply a mailRecipient structure that already has address information,\nmailResolveRecipient corrects the information if it differs from the mail system. If you set\nallowupdates to true and the information differs from the mail system, mailResolveRecipient\ncorrects the mail system's information if the user has rights to do so. Be careful that the\naddress information you have is correct when you allow updating.\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nExamples\nThis example checks whether there is a user J Smith is on the mail system. If there is a user\nwhose name matches, such as Jane Smith or Jerry Smith, the variable mname is set to the full\nname. If both names are on the system, the mail system displays a dialog box from which the\nuser chooses a name. Mname is set to the user's choice. The application has already created\nthe mailSession object mSes and logged on:\nmailReturnCode mRet\nstring mname\nmname = \"Smith, J\"\nmRet = mSes.mailResolveRecipient(mname)\nIF mRet = mailReturnSuccess! THEN\n    MessageBox(\"Address\", mname + \" found.\")\nELSEIF mRet = mailReturnFailure! THEN\n    MessageBox(\"Address\", \"J Smith not found.\")\nELSE\n    MessageBox(\"Address\", \"Request not evaluated.\")\nEND IF\nIn this example, sle_to contains the full or partial name of a mail recipient. This example\nassigns the name to a mailRecipient object and calls mailResolveRecipient to find the name\nand get address details. If the name is found, mailRecipientDetails displays the information\nand the full name is assigned to sle_to. The application has already created the mailSession\nobject mSes and logged on:\nmailReturnCode mRet\n"}
{"page": 1091, "text": "Statements, Events, and Functions\nPage 1091\nmailRecipient mRecip\n \nmRecip.Name = sle_to.Text\nmRet = mSes.mailResolveRecipient(mRecip)\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox (\"Address\", &\n      sle_to.Text + \"not found.\")\nELSE\n    mRet = mSes.mailRecipientDetails(mRecipient)\n    sle_to.Text = mRecipient.Name\nEND IF\nSee also\nmailAddress\nmailLogoff\nmailLogon\nmailRecipientDetails\nmailSend\n2.4.512 mailSaveMessage\nDescription\nCreates a new message in the user's inbox or replaces an existing message.\nApplies to\nmailSession object\nSyntax\nmailsession.mailSaveMessage ( messageid, mailmessage )\nTable 2.974:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session in which you want to save\nthe mail message.\nmessageid\nA string whose value is the message ID of the message being replaced. If\nyou are saving a new message, specify an empty string (\"\").\nmailmessage\nA mailMessage structure containing the message being saved.\nReturn value\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnFailure!\nmailReturnInsufficientMemory!\nmailReturnInvalidMessage!\nmailReturnUserAbort!\n"}
{"page": 1092, "text": "Statements, Events, and Functions\nPage 1092\nmailReturnDiskFull!\nIf any argument's value is null, mailSaveMessage returns null.\nUsage\nBefore saving a message, you must address the message even if you are replacing an existing\nmessage. The message can be addressed to someone else for sending later.\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nExamples\nThis example creates a new message in the inbox of the current user, which will be sent later\nto Jerry Smith. The application has already created the mailSession object mSes and logged\non:\nmailRecipient recip\nmailMessage msg\nmailReturnCode mRet\n \nrecip.Name = \"Smith, Jerry\"\nmRet = mSes.mailResolveRecipient(recip)\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Save New Message\", &\n    \"Invalid address.\")\n    RETURN\n END IF\n \nmsg.NoteText = mle_note.Text\nmsg.Subject = sle_subject.Text\nmsg.Recipient[1] = recip\n \nmRet = mSes.mailSaveMessage(\"\", msg)\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Save New Message\", &\n      \"Failed somehow.\")\nEND IF\nThis example replaces the last message in the user Jane Smith's inbox. It gets the message ID\nfrom the MessageID array in the mailSession object mSes. It changes the message subject, re-\naddresses the message to the user, and saves the message. The application has already created\nthe mailSession object mSes and logged on:\nmailRecipient recip\nmailMessage msg\nmailReturnCode mRet\nstring s_ID\n \nmRet = mSes.mailGetMessages()\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"No Messages\", \"Inbox empty.\")\n    RETURN\nEND IF\ns_ID = mSes.MessageID[UpperBound(mSes.MessageID)]\nmRet = mSes.mailReadMessage(s, msg, &\n    mailEntireMessage!, FALSE )\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Message\", \"Can't read message.\")\n    RETURN\nEND IF\n \n"}
{"page": 1093, "text": "Statements, Events, and Functions\nPage 1093\nmsg.Subject = msg.Subject + \" Test\"\nrecip.Name = \"Smith, Jane\"\nmRet = mSes.mailResolveRecipient( recip )\nmsg.Recipient[1] = recip\nmRet = mSes.mailSaveMessage(s_ID, msg)\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Save Old Message\", \"Failed somehow.\")\nEND IF\nSee also the mail examples in the samples that are supplied with PowerBuilder.\nSee also\nmailReadMessage\nmailResolveRecipient\n2.4.513 mailSend\nDescription\nSends a mail message. If no message information is supplied, the mail system provides a\ndialog box for entering it before sending the message.\nApplies to\nmailSession object\nSyntax\nmailsession.mailSend ( { mailmessage } )\nTable 2.975:\nArgument\nDescription\nmailsession\nA mailSession object identifying the session in which you want to send\nthe mail message\nmailmessage\n(optional)\nA mailMessage structure\nReturn value\nmailReturnCode. Returns one of the following values:\nmailReturnSuccess!\nmailReturnFailure!\nmailReturnInsufficientMemory!\nmailReturnLoginFailure!\nmailReturnUserAbort!\nmailReturnDiskFull!\nmailReturnTooManySessions!\nmailReturnTooManyFiles!\n"}
{"page": 1094, "text": "Statements, Events, and Functions\nPage 1094\nmailReturnTooManyRecipients!\nmailReturnUnknownRecipient!\nmailReturnAttachmentNotFound!\nIf any argument's value is null, mailSend returns null.\nUsage\nBefore calling mail functions, you must declare and create a mailSession object and call\nmailLogon to establish a mail session.\nFor mailSend, mailOriginator! is not a valid value for the Recipient property of the\nmailMessage object. The valid values are mailto!, mailcc!, and mailbcc!. To specify that the\nsender receive a copy of the message, use mailcc!.\nExamples\nThese statements create a mail session, send a message, and then log off the mail system and\ndestroy the mail session object:\nmailSession mSes\nmailReturnCode mRet\nmailMessage mMsg\n \n// Create a mail session\nmSes = create mailSession\n \n// Log on to the session\nmRet = mSes.mailLogon(mailNewSession!)\nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Mail\", 'Logon failed.')\n    RETURN\nEND IF\n \n// Populate the mailMessage structure\nmMsg.Subject = mle_subject.Text\nmMsg.NoteText = 'Luncheon at 12:15'\nmMsg.Recipient[1].name = 'Smith, John'\nmMsg.Recipient[2].name = 'Shaw, Sue'\n \n// Send the mail\nmRet = mSes.mailSend(mMsg)\n \nIF mRet <> mailReturnSuccess! THEN\n    MessageBox(\"Mail Send\", 'Mail not sent')\n    RETURN\nEND IF\n \nmSes.mailLogoff()\nDESTROY mSes\nSee also the mail examples in the samples supplied with PowerBuilder.\nSee also\nmailReadMessage\nmailResolveRecipient\n2.4.514 Match\nDescription\n"}
{"page": 1095, "text": "Statements, Events, and Functions\nPage 1095\nDetermines whether a string's value contains a particular pattern of characters.\nSyntax\nMatch ( string, textpattern )\nTable 2.976:\nArgument\nDescription\nstring\nThe string in which you want to look for a pattern of characters\ntextpattern\nA string whose value is the text pattern\nReturn value\nBoolean.\nReturns true if string matches textpattern and false if it does not. Match also returns false\nif either argument has not been assigned a value or the pattern is invalid. If any argument's\nvalue is null, Match returns null.\nUsage\nMatch enables you to evaluate whether a string contains a general pattern of characters. To\nfind out whether a string contains a specific substring, use the Pos function.\nTextpattern is similar to a regular expression. It consists of metacharacters, which have\nspecial meaning, and ordinary characters, which match themselves. You can specify that the\nstring begin or end with one or more characters from a set, or that it contain any characters\nexcept those in a set.\nA text pattern consists of metacharacters, which have special meaning in the match string,\nand nonmetacharacters, which match the characters themselves.The following tables explain\nthe meaning and use of these metacharacters.\nTable 2.977: Metacharacters used by Match function\nMetacharacterMeaning\nExample\nCaret (^)\nMatches the beginning of a string\n^C matches C at the\nbeginning of a string.\nDollar sign\n($)\nMatches the end of a string\ns$ matches s at the\nend of a string.\nPeriod (.)\nMatches any character\n. . . matches\nthree consecutive\ncharacters.\nBackslash\n(\\)\nRemoves the following metacharacter's special\ncharacteristics so that it matches itself\n\\$ matches $.\nCharacter\nclass (a\ngroup of\ncharacters\nenclosed\nMatches any of the enclosed characters\n[AEIOU] matches A,\nE, I, O, or U.\nYou can use hyphens\nto abbreviate ranges\n"}
{"page": 1096, "text": "Statements, Events, and Functions\nPage 1096\nMetacharacterMeaning\nExample\nin square\nbrackets\n([ ]))\nof characters in a\ncharacter class. For\nexample, [A-Za-z]\nmatches any letter.\nComplemented\ncharacter\nclass (first\ncharacter\ninside the\nbrackets is a\ncaret)\nMatches any character not in the group following the\ncaret\n[^0-9] matches any\ncharacter except\na digit, and [^A-\nZa-z] matches any\ncharacter except a\nletter.\nThe metacharacters asterisk (*), plus (+), and question mark (?) are unary operators that are\nused to specify repetitions in a regular expression:\nTable 2.978: Unary operators used as metacharacters by Match function\nMetacharacterMeaning\nExample\n* (asterisk)\nIndicates zero or more occurrences\nA* matches zero or\nmore As (no As, A,\nAA, AAA, and so on)\n+ (plus)\nIndicates one or more occurrences\nA+ matches one A or\nmore than one A (A,\nAAA, and so on)\n? (question\nmark)\nIndicates zero or one occurrence\nA? matches an empty\nstring (\"\") or A\nSample patterns\nThe following table shows various text patterns and sample text that matches each pattern:\nTable 2.979: Text pattern examples for Match function\nThis pattern\nMatches\nAB\nAny string that contains AB; for example, ABA, DEABC, graphAB_one\nB*\nAny string that contains 0 or more Bs; for example, AC, B, BB, BBB,\nABBBC, and so on\nAB*C\nAny string containing the pattern AC or ABC or ABBC, and so on (0 or\nmore Bs)\nAB+C\nAny string containing the pattern ABC or ABBC or ABBBC, and so on\n(1 or more Bs)\nABB*C\nAny string containing the pattern ABC or ABBC or ABBBC, and so on\n(1 B plus 0 or more Bs)\n^AB\nAny string starting with AB\n"}
{"page": 1097, "text": "Statements, Events, and Functions\nPage 1097\nThis pattern\nMatches\nAB?C\nAny string containing the pattern AC or ABC (0 or 1 B)\n^[ABC]\nAny string starting with A, B, or C\n[^ABC]\nA string containing any characters other than A, B, or C\n^[^abc]\nA string that begins with any character except a, b, or c\n^[^a-z]$\nAny single-character string that is not a lowercase letter (^ and $ indicate\nthe beginning and end of the string)\n[A-Z]+\nAny string with one or more uppercase letters\n^[0-9]+$\nAny string consisting only of digits\n^[0-9][0-9][0-9]$ Any string consisting of exactly three digits\n^([0-9][0-9]\n[0-9])$\nAny consisting of exactly three digits enclosed in parentheses\nExamples\nThis statement returns true if the text in sle_ID begins with one or more uppercase or\nlowercase letters (^ at the beginning of the pattern means that the beginning of the string must\nmatch the characters that follow):\nMatch(sle_ID.Text, \"^[A-Za-z]\")\nThis statement returns false if the text in sle_ID contains any digits (^ inside a bracket is a\ncomplement operator):\nMatch(sle_ID.Text, \"[^0-9]\")\nThis statement returns true if the text in sle_ID contains one uppercase letter:\nMatch(sle_ID.Text, \"[A-Z]\")\nThis statement returns true if the text in sle_ID contains one or more uppercase letters (+\nindicates one or more occurrences of the pattern):\nMatch(sle_ID.Text, \"[A-Z]+\")\nThis statement returns false if the text in sle_ID contains anything other than two digits\nfollowed by a letter (^ and $ indicate the beginning and end of the string):\nMatch(sle_ID.Text, \"^[0-9][0-9][A-Za-z]$\")\nSee also\nPos\nMatch method for DataWindows in Section 2.4.73, \u201cMatch\u201d in DataWindow Reference.\n2.4.515 MatchW (obsolete)\nDescription\nDetermines whether a string's value contains a particular pattern of characters.\nThis function is obsolete. It has the same behavior as Match in all environments.\n"}
{"page": 1098, "text": "Statements, Events, and Functions\nPage 1098\nSyntax\nMatchW ( string, textpattern )\n2.4.516 Max\nDescription\nDetermines the larger of two numbers.\nSyntax\nMax ( x,  y )\nTable 2.980:\nArgument\nDescription\nx\nThe number to which you want to compare y\ny\nThe number to which you want to compare x\nReturn value\nThe datatype of x or y, whichever datatype is more precise. If any argument's value is null,\nMax returns null.\nUsage\nIf either of the values being compared is null, Max returns null.\nExamples\nThis statement returns 7:\nMax(4,7)\nThis statement returns -4:\nMax(- 4, - 7)\nThis statement returns 8.2, a decimal value:\nMax(8.2, 4)\nSee also\nMin\nMax method for DataWindows in Section 2.4.74, \u201cMax\u201d in DataWindow Reference.\n2.4.517 MD5\nDescription\nCalculates the MD5 value of a blob.\nApplies to\nCrypterObject object\n"}
{"page": 1099, "text": "Statements, Events, and Functions\nPage 1099\nSyntax\ncrypter.MD5 (variable)\nTable 2.981:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object\nvariable\nA blob whose value is the data you want to process with MD5.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nReturn value\nBlob. Returns the result of the MD5 if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis statement encrypts the data with MD5.\nBlob lblb_data\nBlob lblb_md5\nString ls_data\nlblb_data = Blob(\"Test MD5\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n// Encrypt with MD5\nlblb_md5 = lnv_CrypterObject.MD5(lblb_data)\nCoderobject lnv_code\nLnv_code = create coderobject\n//Encode the MD5 blob data to be hex data and output as a string\nLs_data = lnv_code.hexencode(lblb_md5)\nSee also\nSymmetricEncrypt\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricSign\nAsymmetricVerifySign\nAsymmetricGenerateKey\nSHA\n"}
{"page": 1100, "text": "Statements, Events, and Functions\nPage 1100\nHMAC\n2.4.518 MemberDelete\nDescription\nDeletes a member from an OLE object in a storage. The member can be another OLE object\n(a substorage) or a stream.\nApplies to\nOLEStorage objects\nSyntax\nolestorage.MemberDelete ( membername )\nTable 2.982:\nArgument\nDescription\nolestorage\nThe name of an object variable of type OLEStorage containing the\nmember (substorage or stream) you want to delete\nmembername\nA string specifying the name of the member you want to delete from the\nstorage\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The storage is not open\n-2 -- Member not found\n-3 -- Insufficient resources or too many files open\n-4 -- Access denied\n-5 -- Invalid storage state\n-9 -- Other error\nIf any argument's value is null, MemberDelete returns null.\nExamples\nThis example creates a storage object and opens an OLE object in a file. It checks whether\nwordobj is a substorage within that object and, if so, deletes it and saves the object back to\nthe file:\nboolean lb_memexists\ninteger result\n \nstg_stuff = CREATE OLEStorage\nstg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\n \nstg_stuff.MemberExists(\"wordobj\", lb_memexists)\nIF lb_memexists THEN\n"}
{"page": 1101, "text": "Statements, Events, and Functions\nPage 1101\n    result = stg_stuff.MemberDelete(\"wordobj\")\n    IF result = 0 THEN stg_stuff.Save()\nEND IF\nSee also\nMemberExists\nMemberRename\nOpen\n2.4.519 MemberExists\nDescription\nDetermines whether the named member is part of an OLE object in a storage. The member\ncan be another OLE object (a substorage) or a stream.\nApplies to\nOLEStorage objects\nSyntax\nolestorage.MemberExists ( membername, exists )\nTable 2.983:\nArgument\nDescription\nolestorage\nThe name of an object variable of type OLEStorage that you want to\ncheck\nmembername\nA string whose value is the name of the member that you want to check\nexists\nA boolean variable that will store whether or not the member exists\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The storage is not open\n-9 -- Other error\nIf any argument's value is null, MemberExists returns null.\nExamples\nThis example creates a storage object and opens an OLE object in a file. It checks whether\nwordobj is a substorage within that object and, if so, deletes it and saves the object back to\nthe file:\nboolean lb_memexists\ninteger result\n \nstg_stuff = CREATE OLEStorage\nstg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\n"}
{"page": 1102, "text": "Statements, Events, and Functions\nPage 1102\n \nstg_stuff.MemberExists(\"wordobj\", lb_memexists)\nIF lb_memexists THEN\n    result = stg_stuff.MemberDelete(\"wordobj\")\n    IF result = 0 THEN stg_stuff.Save( )\nEND IF\nSee also\nMemberDelete\nMemberRename\nOpen\n2.4.520 MemberRename\nDescription\nRenames a member in an OLE storage. The member can be another OLE object (a\nsubstorage) or a stream.\nApplies to\nOLEStorage objects\nSyntax\nolestorage.MemberRename ( membername, newname )\nTable 2.984:\nArgument\nDescription\nolestorage\nThe name of an object variable of type OLEStorage containing the\nmember (substorage or stream) you want to rename\nmembername\nA string whose value is the name of the member you want to rename\nnewname\nA string whose value is the new name to be assigned to the member\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The storage is not open\n-2 -- Member not found\n-3 -- Insufficient resources or too many files open\n-4 -- Access denied\n-5 -- Invalid storage state\n-6 -- Duplicate name\n-9 -- Other error\nIf any argument's value is null, MemberRename returns null.\n"}
{"page": 1103, "text": "Statements, Events, and Functions\nPage 1103\nExamples\nThis example creates a storage object and opens an OLE object in a file. It checks whether\nwordobj is a substorage within that object, and if so renames it to memo and saves the object\nback to the file:\nboolean lb_memexists\ninteger result\n \nstg_stuff = CREATE OLEStorage\nstg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\n \nstg_stuff.MemberExists(\"wordobj\", lb_memexists)\nIF lb_memexists THEN\n    result = &\n    stg_stuff.MemberRename(\"wordobj\", \"memo\")\n    IF result = 0 THEN stg_stuff.Save()\nEND IF\nSee also\nMemberDelete\nMemberExists\nOpen\n2.4.521 MessageBox\nDescription\nDisplays a system MessageBox with the title, text, icon, and buttons you specify.\nSyntax\nMessageBox ( title, text {, icon {, button {, default } } } )\nTable 2.985:\nArgument\nDescription\ntitle\nA string specifying the title of the message box, which appears in the\nbox's title bar.\ntext\nThe text you want to display in the message box. The text can be a\nnumeric datatype (double or longlong), a string, or a boolean value.\nicon\n(optional)\nA value of the Icon enumerated datatype indicating the icon you want to\ndisplay on the left side of the message box. Values are:\n\u2022 Information! (Default)\n\u2022 StopSign!\n\u2022 Exclamation!\n\u2022 Question!\n\u2022 None!\n"}
{"page": 1104, "text": "Statements, Events, and Functions\nPage 1104\nArgument\nDescription\nbutton (optional) A value of the Button enumerated datatype indicating the set of\nCommandButtons you want to display at the bottom of the message box.\nThe buttons are numbered in the order listed in the enumerated datatype.\nValues are:\n\u2022 OK! -- (Default) OK button\n\u2022 OKCancel! -- OK and Cancel buttons\n\u2022 YesNo! -- Yes and No buttons\n\u2022 YesNoCancel! -- Yes, No, and Cancel buttons\n\u2022 RetryCancel! -- Retry and Cancel buttons\n\u2022 AbortRetryIgnore! -- Abort, Retry, and Ignore buttons\ndefault (optional) The number of the button you want to be the default button. The default\nis 1. If you specify a number larger than the number of buttons displayed,\nMessageBox uses the default.\nReturn value\nInteger.\nReturns the number of the selected button (1, 2, or 3) if it succeeds and -1 if an error occurs.\nIf any argument's value is null, MessageBox returns null.\nUsage\nIf the value of title or text is null, the MessageBox does not display. Unless you specify\notherwise, PowerBuilder continues executing the script when the user clicks the button or\npresses enter, which is appropriate when the MessageBox has one button. If the box has\nmultiple buttons, you will need to include code in the script that checks the return value and\ntakes an appropriate action.\nBefore continuing with the current application, the user must respond to the MessageBox.\nHowever, the user can switch to another application without responding to the MessageBox.\nWhen you are running a version of Windows that supports right-to-left languages and want\nto display Arabic or Hebrew text for the message and buttons, set the RightToLeft property\nof the application object to true. The characters of the message will display from right to\nleft. However, the button text will continue to display in English unless you are running a\nlocalized version of PowerBuilder.\nWhen MessageBox does not work\nControls capture the mouse in order to perform certain operations. For instance,\nCommandButtons capture the mouse during mouse clicks, Edit controls capture for\ntext selection, and scroll bars capture during scrolling. If a MessageBox is invoked\nwhile the mouse is captured, unexpected results can occur.\n"}
{"page": 1105, "text": "Statements, Events, and Functions\nPage 1105\nBecause MessageBox grabs focus, you should not use it when focus is changing, such\nas in a LoseFocus event. Instead, you might display a message in the window's title or a\nMultiLineEdit.\nMessageBox also causes confusing behavior when called after PrintOpen. For details, see\nPrintOpen.\nExamples\nThis statement displays a MessageBox with the title Greeting, the text Hello User, the default\nicon (Information!), and the default button (the OK button):\nMessageBox(\"Greeting\", \"Hello User\")\nThe following statements display a MessageBox titled Result and containing the result of\na function, the Exclamation icon, and the OK and Cancel buttons (the Cancel button is the\ndefault):\ninteger Net\nlong Distance = 3.457\n \nNet = MessageBox(\"Result\", Abs(Distance), &\n    Exclamation!, OKCancel!, 2)\nIF Net = 1 THEN\n ... // Process OK.\nELSE\n ... // Process CANCEL.\nEND IF\n2.4.522 Mid\nDescription\nObtains a specified number of characters from a specified position in a string.\nSyntax\nMid ( string, start {, length } )\nTable 2.986:\nArgument\nDescription\nstring\nThe string from which you want characters returned.\nstart\nA long specifying the position of the first character you want returned.\n(The position of the first character of the string is 1).\nlength (optional)\nA long whose value is the number of characters you want returned. If you\ndo not enter length or if length is greater than the number of characters to\nthe right of start, Mid returns the remaining characters in the string.\nReturn value\nString.\nReturns characters specified in length of string starting at character start. If start is greater\nthan the number of characters in string, the Mid function returns the empty string (\"\"). If\nlength is greater than the number of characters remaining after the start character, Mid returns\n"}
{"page": 1106, "text": "Statements, Events, and Functions\nPage 1106\nthe remaining characters. The return string is not filled with spaces to make it the specified\nlength. If any argument's value is null, Mid returns null.\nUsage\nTo search a string for the position of the substring that you want to extract, use the Pos\nfunction. Use the return value for the start argument of Mid. To extract a specified number of\ncharacters from the beginning or end of a string, use the Left or the Right function.\nExamples\nThis statement returns RUTH:\nMid(\"BABE RUTH\", 5, 5)\nThis statement returns \"\":\nMid(\"BABE RUTH\", 40, 5)\nThis statement returns BE RUTH:\nMid(\"BABE RUTH\", 3)\nThese statements store the characters in the SingleLineEdit sle_address from the 40th\ncharacter to the end in ls_address_extra:\nstring ls_address_extra\nls_address_extra = Mid(sle_address.Text, 40)\nThe following user-defined function, called str_to_int_array, converts a string into an array of\nintegers. Each integer in the array will contain two characters (one characters as the high byte\n(ASCII value * 256) and the second character as the low byte). The function arguments are\nstr, a string passed by value, and iarr, an integer array passed by reference. The length of the\narray is initialized before the function is called. If the integer array is longer than the string,\nthe script stores spaces. If the string is longer, the script ignores the extra characters.\nTo call the function, use code like the following:\nint rtn\niarr[20]=0 // Initialize the array, if necessary\nrtn = str_to_int_array(\"This is a test.\", iarr)\nThe str_to_int_array function is:\nlong stringlen, arraylen, i\nstring char1, char2\n \n// Get the string and array lengths\narraylen = UpperBound(iarr)\nstringlen = Len(str)\n \n// Loop through the array\nFOR i = 1 to arraylen\n    IF (i*2 <= stringlen) THEN\n      // Get two chars from str\n      char1 = Mid(str, i*2, 1)\n      char2 = Mid(str, i*2 - 1, 1)\n    ELSEIF (i*2 - 1 <= stringlen) THEN\n      // Get the last char\n      char1 = \" \"\n      char2 = Mid(str, i*2 - 1, 1)\n"}
{"page": 1107, "text": "Statements, Events, and Functions\nPage 1107\n    ELSE\n      // Use spaces if beyond the end of str\n      char1 = \" \"\n      char2 = \" \"\n    END IF\n    iarr[i] = Asc(char1) * 256 + Asc(char2)\nNEXT\nRETURN 1\nFor sample code that converts the integer array back to a string, see Asc.\nSee also\nAscA\nLeft\nPos\nRight\nUpperBound\nMid method for DataWindows in Section 2.4.76, \u201cMid\u201d in DataWindow Reference.\n2.4.523 MidA\nDescription\nTemporarily converts a string to DBCS, then returns the specified number of bytes from the\nstring, starting from a specified position.\nSyntax\nMidA (string, start {, length})\nTable 2.987:\nArgument\nDescription\nstring\nThe string you want to search.\nstart\nA long specifying the position of the first byte you want returned. (The\nposition of the first byte of the string is 1.)\nlength (optional)\nA long whose value is the number of bytes you want returned. If you do\nnot enter length or if length is greater than the number of bytes to the\nright of start, MidA returns the remaining bytes in the string.\nReturn value\nString.\nReturns characters specified by the number of bytes searched in a source string, beginning at\nthe byte specified in the start argument. If start is greater than the number of bytes in string,\nthe MidA function returns an empty string (\"\"). If length is greater than the number of bytes\nremaining after the start character, MidA returns the remaining bytes. The return string is\nnot filled with spaces to make it the specified length. If any argument's value is null, MidA\nreturns null.\nUsage\n"}
{"page": 1108, "text": "Statements, Events, and Functions\nPage 1108\nMidA replaces the functionality that Mid had in DBCS environments in PowerBuilder 9.\n2.4.524 MidW (obsolete)\nDescription\nObtains a specified number of characters from a specified position in a string.\nThis function is obsolete. It has the same behavior as Mid.\nSyntax\nMidW ( string, start {, length } )\n2.4.525 Min\nDescription\nDetermines the smaller of two numbers.\nSyntax\nMin ( x, y )\nTable 2.988:\nArgument\nDescription\nx\nThe number to which you want to compare y\ny\nThe number to which you want to compare x\nReturn value\nThe datatype of x or y, whichever datatype is more precise. If any argument's value is null,\nMin returns null.\nUsage\nIf either of the values being compared is null, Min returns null.\nExamples\nThis statement returns 4:\nMin(4,7)\nThis statement returns -7:\nMin(- 4, - 7)\nThis statement returns 3.0, a decimal value:\nMin(9.2,3.0)\nSee also\nMax\nMin method for DataWindows in Section 2.4.78, \u201cMin\u201d in DataWindow Reference.\n"}
{"page": 1109, "text": "Statements, Events, and Functions\nPage 1109\n2.4.526 Minute\nDescription\nObtains the number of minutes in the minutes portion of a time value.\nSyntax\nMinute ( time )\nTable 2.989:\nArgument\nDescription\ntime\nThe time value from which you want the minutes\nReturn value\nInteger.\nReturns the minutes portion of time (00 to 59). If time is null, Minute returns null.\nExamples\nThis statement returns 1:\nMinute(19:01:31)\nSee also\nHour\nSecond\nMinute method for DataWindows in Section 2.4.79, \u201cMinute\u201d in DataWindow Reference.\n2.4.527 Mod\nDescription\nObtains the remainder (modulus) of a division operation.\nSyntax\nMod ( x, y )\nTable 2.990:\nArgument\nDescription\nx\nThe number you want to divide by y\ny\nThe number you want to divide into x\nReturn value\nThe datatype of x or y, whichever datatype is more precise. If any argument's value is null,\nMod returns null.\nExamples\n"}
{"page": 1110, "text": "Statements, Events, and Functions\nPage 1110\nThis statement returns 2:\nMod(20, 6)\nThis statement returns 1.5:\nMod(25.5, 4)\nThis statement returns 2.5:\nMod(25, 4.5)\nSee also\nMod method for DataWindows in Section 2.4.80, \u201cMod\u201d in DataWindow Reference.\n2.4.528 ModifyData\nChanges the value of a data point in a series on a graph. There are two syntaxes depending on\nthe type of graph.\nTable 2.991:\nTo modify a data point in\nUse\nAll graph types except scatter\nSyntax 1\nScatter graphs\nSyntax 2\n2.4.528.1 Syntax 1: For all graph types except scatter\nDescription\nChanges the value of a data point in a series on a graph. You can specify the data point to be\nmodified by position or by category.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects (their data comes directly from the DataWindow).\nSyntax\ncontrolname.ModifyData (seriesnumber, datapoint, datavalue   {, categoryvalue } )\nTable 2.992:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to modify data.\nseriesnumber\nThe number of the series in which you want to modify data.\ndatapoint\nThe number of the data point for which you want to modify the data.\ndatavalue\nThe new value of the data point. The datatype of datavalue is the same as\nthe datatype of the values axis of the graph.\ncategoryvalue\n(optional)\nThe category for datavalue. The datatype of categoryvalue is the same as\nthe datatype of the category axis of the graph.\n"}
{"page": 1111, "text": "Statements, Events, and Functions\nPage 1111\nUsage\nWhen you specify categoryvalue, ModifyData changes the category value at the specified\nposition, as well as the data value. If the name you specify already exists at another position,\nthe data at that position is modified instead and the position in datapoint is ignored (the same\nbehavior as InsertData).\nWhen you specify a position of 0, ModifyData always behaves the same as InsertData. For a\ncomparison of AddData, InsertData, and ModifyData, see the Usage section in InsertData.\nExamples\nThese statements change the data for Apr in the series named Costs in the graph\ngr_product_data:\ninteger SeriesNbr, CategoryNbr\n// Get the number of the series.\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\nCategoryNbr = gr_product_data.FindCategory(\"Apr\")\ngr_product_data.ModifyData(SeriesNbr, &\n    CategoryNbr, 1250)\nSee also\nAddData\nFindCategory\nFindSeries\nInsertCategory\nInsertData\n2.4.528.2 Syntax 2: For scatter graphs\nDescription\nChanges the value of a data point in a series on a graph. You specify the data point by\nposition and provide an x and y value.\nApplies to\nGraph controls in windows and user objects. Does not apply to graphs within DataWindow\nobjects (their data comes directly from the DataWindow).\nSyntax\ncontrolname.ModifyData ( seriesnumber, datapoint, xvalue, yvalue )\nTable 2.993:\nArgument\nDescription\ncontrolname\nThe name of the scatter graph in which you want to modify data in a\nseries\nseriesnumber\nThe number that identifies the series in which you want to modify data\ndatapoint\nThe number of the data point for which you want to modify data\nxvalue\nThe new x value of the data you want to modify\n"}
{"page": 1112, "text": "Statements, Events, and Functions\nPage 1112\nArgument\nDescription\nyvalue\nThe new y value of the data you want to modify\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, ModifyData\nreturns null.\nUsage\nFor scatter graphs, there are no categories. You specify the position in the series whose data\nyou want to modify and provide the x and y values for the data.\nExamples\nThese statements modify the data point 9 in the series named Test One in the scatter graph\ngr_product_data:\ninteger SeriesNbr\nSeriesNbr = gr_product.FindSeries(\"Test One\")\ngr_product_data.ModifyData(SeriesNbr, &\n    9, 4.55, 86.38)\nSee also\nAddData\nFindSeries\n2.4.529 Month\nDescription\nDetermines the month of a date value.\nSyntax\nMonth ( date )\nTable 2.994:\nArgument\nDescription\ndate\nThe date from which you want the month\nReturn value\nInteger.\nReturns an integer (1 to 12) whose value is the month portion of date. If date is null, Month\nreturns null.\nExamples\nThis statement returns 1:\n"}
{"page": 1113, "text": "Statements, Events, and Functions\nPage 1113\nMonth(2004-01-31)\nThese statements store in start_month the month entered in the SingleLineEdit sle_start_date:\ninteger start_month\nstart_month = Month(date(sle_start_date.Text))\nSee also\nDay\nDate\nYear\nMonth method for DataWindows in Section 2.4.82, \u201cMonth\u201d in DataWindow Reference.\n2.4.530 Move\nDescription\nMoves a control or object to another position relative to its parent window, or for some\nwindow objects, relative to the screen.\nApplies to\nAny object or control\nSyntax\nobjectname.Move ( x, y )\nTable 2.995:\nArgument\nDescription\nobjectname\nThe name of the object or control you want to move to a new location\nx\nThe x coordinate of the new location in PowerBuilder units\ny\nThe y coordinate of the new location in PowerBuilder units\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs or if objectname is a maximized window. If\nany argument's value is null, Move returns null.\nUsage\nThe x and y coordinates you specify are the new coordinates of the upper-left corner of\nthe object or control. If the shape of the object or control is not rectangular (such as, a\nRadioButton or Oval), x and y are the coordinates of the upper-left corner of the box\nenclosing it. For a line control, x and y are the BeginX and BeginY properties.\nWhen you move controls, drawing objects, and child windows, the coordinates you specify\nare relative to the upper-left corner of the parent window. When you use Move to position\nmain, pop-up, and response windows, the coordinates you specify are relative to the upper-\nleft corner of the display screen.\n"}
{"page": 1114, "text": "Statements, Events, and Functions\nPage 1114\nMove does not move a maximized sheet or window. If the window is maximized, Move\nreturns -1.\nYou can specify coordinates outside the frame of the parent window or screen, which\neffectively makes the object or control invisible.\nTo draw the image of a Picture control at a particular position, without actually moving the\ncontrol, use the Draw function.\nThe Move function changes the X and Y properties of the moved object.\nEquivalent syntax\nThe syntax below directly sets the X and Y properties of an object or control. Although the\nresult is equivalent to using the Move function, it causes PowerBuilder to redraw objectname\ntwice, first at the new location of X and then at the new X and Y location:\nobjectname.X = x\nobjectname.Y = y\nThese statements cause PowerBuilder to redraw gb_box1 twice:\ngb_box1.X = 150\ngb_box1.Y = 200\nThis statement has the same result but redraws gb_box1 once:\ngb_box1.Move(150,200)\nExamples\nThis statement changes the X and Y properties of gb_box1 to 150 and 200, respectively, and\nmoves gb_box1 to the new location:\ngb_box1.Move(150, 200)\nThis statement moves the picture p_Train2 next to the picture p_Train1:\nP_Train2.Move(P_Train1.X + P_Train1.Width, &\n    P_Train1.Y) \n2.4.531 MoveTab\nDescription\nMoves a tab page to another position in a Tab control, changing its index number.\nApplies to\nTab controls\nSyntax\ntabcontrolname.MoveTab (source, destination )\nTable 2.996:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control containing the tab you want to move.\n"}
{"page": 1115, "text": "Statements, Events, and Functions\nPage 1115\nArgument\nDescription\nsource\nAn integer whose value is the index of the tab you want to move.\ndestination\nAn integer whose value is the index of the destination tab before which\nsource is moved. If destination is 0 or greater than the number of tabs,\nsource is moved to the end.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nMoveTab also reorders the tab pages in the Tab control's Control array (which is a property\nthat lists the tab pages within the Tab control) to match the new tab order.\nExamples\nThis example moves the first tab to the end:\ntab_1.MoveTab(1, 0)\nThis example move the fourth tab to the first position:\ntab_1.MoveTab(4, 1)\nThis example move the fourth tab to the third position:\ntab_1.MoveTab(4, 3)\nSee also\nOpenTab\nSelectTab\n2.4.532 _Narrow (obsolete)\nDescription\nConverts a CORBA object reference from a general supertype to a more specific subtype.\nThis function is used by PowerBuilder clients connecting to EAServer.\nObsolete function\n_Narrow is obsolete, because EAServer is no longer supported since PowerBuilder\n2017.\nApplies to\nCORBAObject objects\nSyntax\ncorbaobject._Narrow ( newremoteobject, classname )\n"}
{"page": 1116, "text": "Statements, Events, and Functions\nPage 1116\nTable 2.997:\nArgument\nDescription\ncorbaobject\nAn object of type CORBAObject that you want to convert\nnewremoteobject A variable that will contain the converted object reference\nclassname\nThe class name of the subtype to which you want to narrow the object\nreference\nReturn value\nLong.\nReturns 0 if it succeeds and a negative number if an error occurs.\nUsage\nThe _Narrow function allows you to narrow proxy objects in a CORBA-compatible client\nthat connects to EAServer. For additional examples, see the functions on the See also list.\nExamples\nThe following example narrows a CORBA object reference to the n_Bank_Account\ninterface:\nCORBAObject my_corbaobj\nn_Bank_Account my_account\n...\n...\nmy_corbaobj._narrow(my_account,\"Bank/n_Bank_Account\")\n \nmy_account.withdraw(100.0)\nIn this example, the component is an EJB component that resides in a separate domain in\nEAServer. In this case, the SimpleBean component's classes are in the ../classes/adomain/\nasimplepackage subdirectory:\nCORBAObject my_corbaobj\nSimpleBean my_simplebean\nSimpleBeanHome my_simplebeanhome\n...\nmy_corbaobj._narrow(my_simplebeanhome, \n  \"adomain/asimplepackage/SimpleBeanHome\")\n \nSee also\n_Is_A (obsolete)\n2.4.533 Navigate\nDescription\nBrowses the specified Web page.\nApplies to\nWebBrowser control\nSyntax\n"}
{"page": 1117, "text": "Statements, Events, and Functions\nPage 1117\ncontrolname.Navigate ( string url )\nTable 2.998:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nurl\nThe address of the page to browse.\nReturn value\nInteger.\n\u2022 1 -- Success.\n\u2022 -1 -- General error.\n\u2022 -2 -- Failed to get the browser instance.\n\u2022 -5 -- Invalid URL.\nExamples\nThis example navigates to the Appeon website:\nInteger li_rtn\nli_rtn = wb_1.Navigate(\"http://www.appeon.com\")\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nPrintAsPDF\nPauseDownload\nRegisterEvent\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.534 NextActivity\nDescription\n"}
{"page": 1118, "text": "Statements, Events, and Functions\nPage 1118\nProvides the next activity in a trace file.\nApplies to\nTraceFile objects\nSyntax\ninstancename.NextActivity ( )\nTable 2.999:\nArgument\nDescription\ninstancename\nInstance name of the TraceFile object\nReturn value\nTraceActivityNode\nUsage\nYou use the NextActivity function to read the next activity in a trace file. The activity\nis returned as a TraceActivityNode object. If there are no more activities or if the file is\nnot open, an invalid object is returned. You can then use the LastError property of the\nTraceFile object to determine what kind of error occurred. To use this function, you must\nhave previously opened the trace file with the Open function. You use the NextActivity and\nOpen functions as well as the other properties and functions provided by the TraceFile object\nto access the contents of a trace file directly. For example, you would use these functions\nif you want to perform your own analysis of the tracing data instead of using the available\nmodeling objects.\nExamples\nThis example opens a trace file and then uses a user-defined function called\nof_dumpactivitynode to report the appropriate information for each activity depending on its\nactivity type:\nString ls_filename, ls_line\nTraceFile ltf_file\nTraceActivityNode ltan_node\nls_filename = sle_filename.text\nltf_file = CREATE TraceFile\nltf_file.Open(ls_filename)\nls_line = \"CollectionTime = \" + &\n    String(ltf_file.CollectionTime) + \"~r~n\" + &\n      \"Num Activities = \" + &\n        String(ltf_file.NumberOfActivities) + \"~r~n\nmle_output.text = ls_line\nltan_node = ltf_file.NextActivity()\nDO WHILE IsValid(ltan_node)\n    ls_line = of_dumpactivitynode(ltan_node)\n    ltan_node = ltf_file.NextActivity()\n    mle_output.text = ls_line\nLOOP\nSee also\nOpen\n"}
{"page": 1119, "text": "Statements, Events, and Functions\nPage 1119\nClose\nReset\n2.4.535 Now\nDescription\nObtains the current time based on the system time of the client machine.\nSyntax\nNow ( )\nReturn value\nTime.\nReturns the current time based on the system time of the client machine.\nUsage\nUse Now to compare a time to the system time or to display the system time on the screen.\nYou can use the Timer function to trigger a Timer event which causes Now to refresh the\ndisplay.\nExamples\nThis statement returns the current system time.\nNow()\nThis example displays the current time in the StaticText st_time. It keeps the time up-to-date\nby setting a timer that triggers a Timer event every 60 seconds. Code in the window's Open\nevent displays the initial time and starts the timer. Code in the Timer event displays the time\nagain.\nThe following code appears in the window's Open event script:\nst_time.Text = String(Now(), \"hh:mm\")\nTimer(60)\nA single line in the Timer event script refreshes the time display:\nst_time.Text = String(Now(), \"hh:mm\")\nSee also\nToday\nNow method for DataWindows in Section 2.4.83, \u201cNow\u201d in DataWindow Reference.\n2.4.536 ObjectAtPointer\nDescription\nFinds out where the user clicked in a graph. ObjectAtPointer reports the region of the graph\nunder the pointer and stores the associated series and data point numbers in the designated\nvariables.\n"}
{"page": 1120, "text": "Statements, Events, and Functions\nPage 1120\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.ObjectAtPointer ( { graphcontrol, } seriesnumber, datapoint )\nTable 2.1000:\nArgument\nDescription\ncontrolname\nThe name of the graph object for which you want the object under the\npointer, or the DataWindow control containing the graph\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control for which you want the object under the pointer\nseriesnumber\nAn integer variable in which you want to store the number of the series\nunder the pointer\ndatapoint\nAn integer variable in which you want to store the number of the data\npoint under the pointer\nReturn value\ngrObjectType. Returns a value of the grObjectType enumerated datatype if the user clicks\nanywhere in the graph (including an empty area) and a null value if the user clicks outside the\ngraph.\nValues of grObjectType and the parts of the graph associated with them are:\n\u2022 TypeCategory! -- A label for a category\n\u2022 TypeCategoryAxis! -- The category axis or between the category labels\n\u2022 TypeCategoryLabel! -- The label of the category axis\n\u2022 TypeData! -- A data point or other data marker\n\u2022 TypeGraph! -- Any place within the graph control that is not another grObjectType\n\u2022 TypeLegend! -- Within the legend box, but not on a series label\n\u2022 TypeSeries! -- The line that connects the data points of a series when the graph's type is\nline or on the series label in the legend box\n\u2022 TypeSeriesAxis! -- The series axis of a 3D graph\n\u2022 TypeSeriesLabel! -- The label of the series axis of a 3D graph\n\u2022 TypeTitle! -- The title of the graph\n\u2022 TypeValueAxis! -- The value axis, including on the value labels\n"}
{"page": 1121, "text": "Statements, Events, and Functions\nPage 1121\n\u2022 TypeValueLabel! -- The user clicked the label of the value axis\nUsage\nThe ObjectAtPointer function allows you to find out how the user is interacting with the\ngraph. The function returns a value of the grObjectType enumerated datatype identifying the\npart of the graph. When the user clicks in a series, data point, or category, ObjectAtPointer\nstores the series and/or data point numbers in designated variables.\nWhen the user clicks a data point (or other data mark, such as line or bar), or on the series\nlabels in the legend, ObjectAtPointer stores the series number in the designated variable.\nWhen the user clicks on a data point or category tickmark label, ObjectAtPointer stores the\ndata point number in the designated variable.\nWhen the user clicks in a series, but not on the actual data point, ObjectAtPointer stores 0 in\ndatapoint and when the user clicks in a category, ObjectAtPointer stores 0 in seriesnumber.\nWhen the user clicks other parts of the graph, ObjectAtPointer stores 0 in both variables.\nCall ObjectAtPointer first\nObjectAtPointer is most effective as the first function call in the script for the Clicked\nevent for the graph control. Make sure you enable the graph control (the default is\ndisabled). Otherwise, the Clicked event script is never run.\nExamples\nThese statements store the series number and data point number at the pointer location in the\ngraph named gr_product in SeriesNbr and ItemNbr. If the object type is TypeSeries! they\nobtain the series name, and if it is TypeData! they get the data value:\ninteger SeriesNbr, ItemNbr\ndouble data_value\ngrObjectType object_type\nstring SeriesName\n \nobject_type = &\n      gr_product.ObjectAtPointer(SeriesNbr, ItemNbr)\nIF object_type = TypeSeries! THEN\n      SeriesName = &\n         gr_product.SeriesName(SeriesNbr)\nELSEIF object_type = TypeData! THEN\n      data_value = &\n         gr_product.GetData(SeriesNbr, ItemNbr)\nEND IF\nThese statements store the series number and data point number at the pointer location in\nthe graph named gr_computers in the DataWindow control dw_equipment in SeriesNbr and\nItemNbr:\ninteger SeriesNbr, ItemNbr\ndw_equipment.ObjectAtPointer(\"gr_computers\", &\n      SeriesNbr, ItemNbr)\nSee also\nAddData\nAddSeries\n"}
{"page": 1122, "text": "Statements, Events, and Functions\nPage 1122\n2.4.537 OffsetPos\nDescription\nSets the offset for progress bar controls.\nApplies to\nProgress bar controls\nSyntax\ncontrol.OffsetPos (increment )\nTable 2.1001:\nArgument\nDescription\ncontrol\nThe name of the progress bar control\nincrement\nAn integer that is added to the start position of the progress bar control\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if there is an error.\nExamples\nThis statement offsets the start position of a horizontal progress bar by 10:\nHProgressBar.OffsetPos ( 10 )\nSee also\nSelectionRange\nSetRange\nStepIt\n2.4.538 Open\nOpens a window, an OLE object, or a trace file.\nFor windows\nOpen displays a window and makes all its properties and controls available to scripts.\nTable 2.1002:\nTo\nUse\nOpen an instance of a particular window datatype\nSyntax 1\nAllow the application to select the window's datatype when the script is\nexecuted\nSyntax 2\nFor OLE objects\n"}
{"page": 1123, "text": "Statements, Events, and Functions\nPage 1123\nOpen loads an OLE object contained in a file or storage into an OLE control or storage object\nvariable. The source and the target are then connected for the purposes of saving work.\nTable 2.1003:\nTo open\nUse\nAn OLE object in a file and load it into an OLE control\nSyntax 3\nAn OLE object in a storage object in memory and load it into an OLE\ncontrol\nSyntax 4\nAn OLE object in an OLE storage file and load it into a storage object in\nmemory\nSyntax 5\nAn OLE object that is a member of an open OLE storage and load it into\na storage object in memory\nSyntax 6\nA stream in an OLE storage object in memory and load it into a stream\nobject\nSyntax 7\nFor trace files\nOpen opens the specified trace file for reading.\nTable 2.1004:\nTo\nUse\nOpen a trace file\nSyntax 8\n2.4.538.1 Syntax 1: For windows of a known datatype\nDescription\nOpens a window object of a known datatype. Open displays the window and makes all its\nproperties and controls available to scripts.\nApplies to\nWindow objects\nSyntax\nOpen ( windowvar {, parent } )\nTable 2.1005:\nArgument\nDescription\nwindowvar\nThe name of the window you want to display. You can specify a window\nobject defined in the Window painter (which is a window datatype) or a\nvariable of the desired window datatype. Open places a reference to the\nopened window in windowvar.\nparent (child and\npop-up windows\nonly) (optional)\nThe window you want make the parent of the child or pop-up window\nyou are opening. If you open a child or pop-up window and omit parent,\n"}
{"page": 1124, "text": "Statements, Events, and Functions\nPage 1124\nArgument\nDescription\nPowerBuilder associates the window being opened with the currently\nactive window.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Open returns\nnull.\nUsage\nYou must open a window before you can access the properties of the window. If you access\nthe window's properties before you open it, an execution error will occur.\nTo reference an open window in scripts, use windowvar.\nCalling Open twice\nIf you call Syntax 1 of the Open function twice for the same window, PowerBuilder\nactivates the window twice; it does not open two instances of the window.\nTo open an array of windows where each window has different datatype, use Syntax 2 of\nOpen.\nParent windows for the opened window\nGenerally, if you are opening a child or a pop-up window and specify parent, the window\nidentified by parent is the parent of the opened window (windowname or windowvar). When\na parent window is closed, all its child and pop-up windows are closed too.\nNot all types of windows can be parent windows. Only a window whose borders are not\nconfined within another window can be a parent. A child window or a window opened as a\nsheet cannot be a parent.\nIf you specify a confined window as a parent, PowerBuilder checks its parent, and that\nwindow's parent, until it finds a window that it can use as a parent. Therefore if you open a\npop-up window and specify a sheet as its parent, PowerBuilder makes the MDI frame that\ncontains the sheet its parent.\nIf you do not specify a parent for a child or pop-up window, the active window becomes the\nparent. Therefore, if one pop-up is active and you open another pop-up, the first pop-up is\nthe parent, not the main window. When the first pop-up is closed, PowerBuilder closes the\nsecond pop-up too.\nHowever, in an MDI application, the active sheet is not the active window and cannot be the\nparent. In Windows, it is clear that the MDI frame, not the active sheet, is the active window\n-- its title bar is the active color and it displays the menu.\nMouse behavior and response windows\nControls capture the mouse in order to perform certain operations. For instance,\nCommandButtons capture during mouse clicks, edit controls capture for text\n"}
{"page": 1125, "text": "Statements, Events, and Functions\nPage 1125\nselection, and scroll bars capture during scrolling. If a response window is opened\nwhile the mouse is captured, unexpected results can occur.\nBecause a response window grabs focus, you should not open it when focus is changing, such\nas in a LoseFocus event.\nExamples\nThis statement opens an instance of a window named w_employee:\nOpen(w_employee)\nThe following statements open an instance of a window of the type w_employee:\nw_employee w_to_open\nOpen(w_to_open)\nThe following code opens an instance of a window of the type child named cw_data and\nmakes w_employee the parent:\nchild cw_data\nOpen(cw_data, w_employee)\nThe following code opens two windows of type w_emp:\nw_emp w_e1, w_e2\nOpen(w_e1)\nOpen(w_e2)\nSee also\nClose\nOpenWithParm\nShow\n2.4.538.2 Syntax 2: For windows of unknown datatype\nDescription\nOpens a window object when you do not know its datatype until the application is running.\nOpen displays the window and makes all its properties and controls available to scripts.\nApplies to\nWindow objects\nSyntax\nOpen ( windowvar, windowtype {, parent } )\nTable 2.1006:\nArgument\nDescription\nwindowvar\nA window variable, usually of datatype window. Open places a reference\nto the opened window in windowvar.\nwindowtype\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nwindowvar.\n"}
{"page": 1126, "text": "Statements, Events, and Functions\nPage 1126\nArgument\nDescription\nparent (child and\npop-up windows\nonly) (optional)\nThe window you want to make the parent of the child or pop-up window\nyou are opening. If you open a child or pop-up window and omit parent,\nPowerBuilder associates the window being opened with the currently\nactive window.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Open returns\nnull.\nUsage\nYou must open a window before you can access the properties of the window. If you access\nthe window's properties before you open it, an execution error will occur.\nTo reference an open window in scripts, use windowvar.\nThe window object specified in windowtype must be the same datatype as windowvar (the\ndatatype includes datatypes inherited from it). The datatype of windowvar is usually window,\nfrom which all windows are inherited, but it can be any ancestor of windowtype. If it is not\nthe same type, an execution error will occur.\nUse this syntax to open an array of windows when each window in the array will have a\ndifferent datatype. See the last example, in which the window datatypes are stored in one\narray and are used for the windowtype argument when each window in another array is\nopened.\nConsiderations when specifying a window type\nWhen you use Syntax 2, PowerBuilder opens an instance of a window of the datatype\nspecified in windowtype and places a reference to this instance in the variable\nwindowvar.\nIf windowtype is a descendant window, you can only reference properties, events, functions,\nor structures that are part of the definition of windowvar. For example, if a user event is\ndeclared for windowtype, you cannot reference it.\nThe object specified in windowtype is not automatically included in your executable\napplication. To include it, you must save it in a PBD file (PowerBuilder dynamic library) that\nyou deliver with your application.\nFor information about the parent of an opened window, see Syntax 1.\nExamples\nThis example opens a window of the type specified in the string s_w_name and stores the\nreference to the window in the variable w_to_open. The SELECT statement retrieves data\nspecifying the window type from the database and stores it in s_w_name:\nwindow w_to_open\nstring s_w_name\n \nSELECT next_window INTO  : s_w_name FROM routing_table\n"}
{"page": 1127, "text": "Statements, Events, and Functions\nPage 1127\nWHERE...  ;\n \nOpen(w_to_open, s_w_name)\nThis example opens an array of ten windows of the type specified in the string is_w_emp1\nand assigns a title to each window in the array. The string is_w_emp1 is an instance variable\nwhose value is a window type:\ninteger n\nwindow win_array[10]\n \nFOR n = 1 to 10\n      Open(win_array[n], is_w_emp1)\n      win_array[n].title = \"Window \" + string(n)\nNEXT\nThe following statements open four windows. The type of each window is stored in the array\nw_stock_type. The window reference from the Open function is assigned to elements in the\narray w_stock_win:\nwindow w_stock_win[ ]\nstring w_stock_type[4]\n \nw_stock_type[1] = \"w_stock_wine\"\nw_stock_type[2] = \"w_stock_scotch\"\nw_stock_type[3] = \"w_stock_beer\"\nw_stock_type[4] = \"w_stock_soda\"\n \nFOR n = 1 to 4\n      Open(w_stock_win[n], w_stock_type[n])\nNEXT\nSee also\nClose\nOpenWithParm\nShow\n2.4.538.3 Syntax 3: For loading an OLE object from a file into a control\nDescription\nOpens an OLE object in a file and loads it into an OLE control.\nApplies to\nOLE controls\nSyntax\nolecontrol.Open ( OLEsourcefile )\nTable 2.1007:\nArgument\nDescription\nolecontrol\nThe name of the OLE control into which you want to load an OLE object.\nOLEsourcefile\nA string specifying the name of an OLE storage file containing\nthe object. The file must already exist and contain an OLE object.\n"}
{"page": 1128, "text": "Statements, Events, and Functions\nPage 1128\nArgument\nDescription\nOLEsourcefile can include a path for the file, as well as path information\ninside the OLE storage.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The file is not found or its data has an invalid format\n-9 -- Other error\nIf any argument's value is null, Open returns null.\nExamples\nThis example opens the object in the file MYSTUFF.OLE and loads it into in the control\nole_1:\ninteger result\nresult = ole_1.Open(\"c:\\ole2\\mystuff.ole\")\nSee also\nInsertFile\nSave\nSaveAs\n2.4.538.4 Syntax 4: For opening an OLE object in memory into a control\nDescription\nOpens an OLE object that is in a OLE storage object in memory and loads it into an OLE\ncontrol.\nApplies to\nOLE controls\nSyntax\nolecontrol.Open ( sourcestorage, substoragename )\nTable 2.1008:\nArgument\nDescription\nolecontrol\nThe name of the OLE control into which you want to load an OLE object\nsourcestorage\nThe name of an object variable of OLEStorage containing the object you\nwant to load into olecontrol\nsubstoragename\nA string specifying the name of a substorage that contains the desired\nobject within storagename\nReturn value\n"}
{"page": 1129, "text": "Statements, Events, and Functions\nPage 1129\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-2 -- The parent storage is not open\n-9 -- Other error\nIf any argument's value is null, Open returns null.\nExamples\nThis example opens the object in the substorage excel_obj within the storage variable\nstg_stuff and loads it into the control ole_1. Olest_stuff is already open:\ninteger result\nresult = ole_1.Open(stg_stuff, \"excel_obj\")\nThis example opens a substorage in the storage variable stg_stuff and loads it into the control\nole_1. The substorage name is specified in the variable stuff_1. Olest_stuff is already open:\ninteger result\nstring stuff_1 = \"excel_obj\"\nresult = ole_1.Open(stg_stuff, stuff_1)\nSee also\nInsertFile\nSave\nSaveAs\n2.4.538.5 Syntax 5: For opening an OLE object in a file into an OLEStorage\nDescription\nOpens an OLE object in an OLE storage file and loads it into a storage object in memory.\nApplies to\nOLE storage objects\nSyntax\nolestorage.Open ( OLEsourcefile {, readmode {, sharemode } } )\nTable 2.1009:\nArgument\nDescription\nolestorage\nThe name of an object variable of type OLEStorage into which you want\nto load the OLE object.\nOLEsourcefile\nA string specifying the name of an OLE storage file containing\nthe object. The file must already exist and contain OLE objects.\nOLEsourcefile can include the file's path, as well as path information\nwithin the storage.\nreadmode\n(optional)\nA value of the enumerated datatype stgReadMode that specifies the type\nof access you want for OLEsourcefile. Values are:\n"}
{"page": 1130, "text": "Statements, Events, and Functions\nPage 1130\nArgument\nDescription\n\u2022 stgReadWrite! -- (Default) Read/Write access. If the file does not exist,\nOpen creates it.\n\u2022 stgRead! -- Read-only access. You cannot change OLEsourcefile.\n\u2022 stgWrite! -- Write access. You can rewrite OLEsourcefile but not read\nits current contents. If the file does not exist, Open creates it.\nsharemode\n(optional)\nA value of the enumerated datatype stgShareMode that specifies how\nother attempts, by your own or other applications, to open OLEsourcefile\nwill fare. Values are:\n\u2022 stgExclusive! -- (Default) No other attempt to open OLEsourcefile will\nsucceed.\n\u2022 stgDenyNone! -- Any other attempt to open OLEsourcefile will\nsucceed.\n\u2022 stgDenyRead! -- Other attempts to open OLEsourcefile for reading\nwill fail.\n\u2022 stgDenyWrite -- Other attempts to open OLEsourcefile for writing will\nfail.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The file is not an OLE storage file\n-3 -- The file is not found\n-9 -- Other error\nIf any argument's value is null, Open returns null.\nUsage\nAn OLE storage file is structured like a directory. Each OLE object can contain other OLE\nobjects (substorages) and other data (streams). You can open the members of an OLE storage\nbelonging to a server application if you know the structure of the storage. However, the\nPowerBuilder functions for manipulating storages are provided so that you can build your\nown storage files for organizing the OLE objects used in your applications.\nThe whole file can be an OLE object and substorages within the file can also be OLE objects.\nMore frequently, the structure for a storage file you create is a root level that is not an\nOLE object but contains independent OLE objects as substorages. Any level in the storage\nhierarchy can contain OLE objects or be simply a repository for another level of substorages.\nOpening nested objects\nBecause you can specify path information within an OLE storage with a backslash\nas the separator, you can open a deeply nested object with a single call to Open.\n"}
{"page": 1131, "text": "Statements, Events, and Functions\nPage 1131\nHowever, there is no error checking for the path you specify and if the Open fails, you\nwo not know why. It is strongly recommended that you open each object in the path\nuntil you get to the one you want.\nExamples\nThis example opens the object in the file MYSTUFF.OLE and loads it into the OLEStorage\nvariable stg_stuff:\ninteger result\nOLEStorage stg_stuff\n \nstg_stuff = CREATE OLEStorage\nresult = stg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\nThis example opens the same object for reading:\ninteger result\nOLEStorage stg_stuff\n \nstg_stuff = CREATE OLEStorage\nresult = stg_stuff.Open(\"c:\\ole2\\mystuff.ole\", &\n      stgRead!)\nThis example opens the object in the file MYSTUFF.OLE and loads it into the OLEStorage\nvariable stg_stuff, as in the previous example. Then it opens the substorage drawing_1 into a\nsecond storage variable, using Syntax 6 of Open. This example does not include code to close\nand destroy any of the objects that were opened.\ninteger result\nOLEStorage stg_stuff, stg_drawing\n \nstg_stuff = CREATE OLEStorage\nresult = stg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\nIF result >= 0 THEN\n      stg_drawing = CREATE OLEStorage\n      result = opest_drawing.Open(\"drawing_1\", &\n         stgRead!, stgDenyNone!, stg_stuff)\nEND IF\nThis example opens the object in the file MYSTUFF.OLE and loads it into the OLEStorage\nvariable stg_stuff. Then it checks whether a stream called info exists in the OLE object, and if\nso, opens it with read access using Syntax 7 of Open. This example does not include code to\nclose and destroy any of the objects that were opened.\ninteger result\nboolean str_found\nOLEStorage stg_stuff\nOLEStream mystream\n \nstg_stuff = CREATE OLEStorage\nresult = stg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\nIF result < 0 THEN RETURN\n \nresult = stg_stuff.MemberExists(\"info\", str_found)\nIF result < 0 THEN RETURN\n \nIF str_found THEN\n      mystream = CREATE OLEStream\n      result = mystream.Open(stg_stuff, \"info\", &\n         stgRead!, stgDenyNone!)\n"}
{"page": 1132, "text": "Statements, Events, and Functions\nPage 1132\n      IF result < 0 THEN RETURN\nEND IF\nSee also\nClose\nSave\nSaveAs\n2.4.538.6 Syntax 6: For opening an OLE storage member into a storage\nDescription\nOpens a member of an open OLE storage and loads it into another OLE storage object in\nmemory.\nApplies to\nOLE storage objects\nSyntax\nolestorage.Open ( substoragename, readmode, sharemode, sourcestorage )\nTable 2.1010:\nArgument\nDescription\nolestorage\nThe name of a object variable of type OLEStorage into which you want\nto load the OLE object.\nsubstoragename\nA string specifying the name of the storage member within sourcestorage\nthat you want to open. Note the reversed order of the sourcestorage and\nsubstoragename arguments from Syntax 4.\nreadmode\nA value of the enumerated datatype stgReadMode that specifies the type\nof access you want for substoragename. Values are:\n\u2022 stgReadWrite! -- Read/write access. If the member does not exist,\nOpen creates it.\n\u2022 stgRead! -- Read-only access. You cannot change substoragename.\n\u2022 stgWrite! -- Write access. You can rewrite substoragename but not\nread its current contents. If the member does not exist, Open creates it.\nsharemode\nA value of the enumerated datatype stgShareMode that specifies\nhow other attempts, by your own or other applications, to open\nsubstoragename will fare. Values are:\n\u2022 stgExclusive! -- (Default) No other attempt to open substoragename\nwill succeed.\n\u2022 stgDenyNone! -- Any other attempt to open substoragename will\nsucceed.\n\u2022 stgDenyRead! -- Other attempts to open substoragename for reading\nwill fail.\n"}
{"page": 1133, "text": "Statements, Events, and Functions\nPage 1133\nArgument\nDescription\n\u2022 stgDenyWrite -- Other attempts to open substoragename for writing\nwill fail.\nsourcestorage\nAn open OLEStorage object containing substoragename.\nReturn value\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-2 -- The parent storage is not open\n-3 -- The member is not found (when opened for reading)\n-9 -- Other error\nIf any argument's value is null, Open returns null.\nUsage\nAn OLE storage file is structured like a directory. Each OLE object can contain other OLE\nobjects (substorages) and other data (streams). You can open the members of an OLE\nstorage belonging to a server application if you know the structure of the storage. However,\nPowerBuilder's functions for manipulating storages are provided so that you can build your\nown storage files for organizing the OLE objects used in your applications.\nThe whole file can be an OLE object and substorages within the file can also be OLE objects.\nMore frequently, the structure for a storage file you create is a root level that is not an\nOLE object but contains independent OLE objects as substorages. Any level in the storage\nhierarchy can contain OLE objects or be simply a repository for another level of substorages.\nOpening nested objects\nBecause you can specify path information within an OLE storage with a backslash\nas the separator, you can open a deeply nested object with a single call to Open.\nHowever, there is no error checking for the path you specify and if the Open fails, you\nwill not know why. It is strongly recommended that you open each object in the path\nuntil you get to the one you want.\nExamples\nThis example opens the object in the file MYSTUFF.OLE and loads it into the OLEStorage\nvariable stg_stuff, as in the previous example. Then it opens the substorage drawing_1 into a\nsecond storage variable. This example does not include code to close and destroy any of the\nobjects that were opened.\ninteger result\nOLEStorage stg_stuff, stg_drawing\n \nstg_stuff = CREATE OLEStorage\nresult = stg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\nIF result >= 0 THEN\n      stg_drawing = CREATE OLEStorage\n"}
{"page": 1134, "text": "Statements, Events, and Functions\nPage 1134\n      result = opest_drawing.Open(\"drawing_1\", &\n         stgRead!, stgDenyNone!, stg_stuff)\nEND IF\nSee also\nClose\nSave\nSaveAs\n2.4.538.7 Syntax 7: For opening OLE streams\nDescription\nOpens a stream in an open OLE storage object and loads it into an OLE stream object.\nApplies to\nOLE stream objects\nSyntax\nolestream.Open ( sourcestorage, streamname {, readmode {, sharemode } } )\nTable 2.1011:\nArgument\nDescription\nolestream\nThe name of a object variable of type OLEStream into which you want to\nload the OLE object.\nsourcestorage\nAn OLE storage that contains the stream to be opened.\nstreamname\nA string specifying the name of the stream within sourcestorage that you\nwant to open.\nreadmode\n(optional)\nA value of the enumerated datatype stgReadMode that specifies the type\nof access you want for streamname. Values are:\n\u2022 stgReadWrite! -- Read/write access. If streamname does not exist,\nOpen creates it.\n\u2022 stgRead! -- Read-only access. You cannot change streamname.\n\u2022 stgWrite! -- Write access. You can rewrite streamname but not read its\ncurrent contents. If streamname does not exist, Open creates it.\nsharemode\n(optional)\nA value of the enumerated datatype stgShareMode that specifies how\nother attempts, by your own or other applications, to open streamname\nwill fare. Values are:\n\u2022 stgExclusive! -- No other attempt to open streamname will succeed.\n\u2022 stgDenyNone! -- Any other attempt to open streamname will succeed.\n\u2022 stgDenyRead! -- Other attempts to open streamname for reading will\nfail.\n"}
{"page": 1135, "text": "Statements, Events, and Functions\nPage 1135\nArgument\nDescription\n\u2022 stgDenyWrite -- Other attempts to open streamname for writing will\nfail.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Stream not found\n-2 -- Stream already exists\n-3 -- Stream is already open\n-4 -- Storage not open\n-5 -- Access denied\n-6 -- Invalid name\n-9 -- Other error\nIf any argument's value is null, Open returns null.\nExamples\nThis example opens the object in the file MYSTUFF.OLE and loads it into the OLEStorage\nvariable stg_stuff. Then it checks whether a stream called info exists in the OLE object, and if\nso, opens it with read access. This example does not include code to close and destroy any of\nthe objects that were opened.\ninteger result\nboolean str_found\nOLEStorage stg_stuff\nOLEStream mystream\n \nstg_stuff = CREATE OLEStorage\nresult = stg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\nIF result < 0 THEN RETURN\n \nresult = stg_stuff.MemberExists(\"info\", str_found)\nIF result < 0 THEN RETURN\n \nIF str_found THEN\n      mystream = CREATE OLEStream\n      result = mystream.Open(stg_stuff, \"info\", &\n         stgRead!, stgDenyNone!)\n      IF result < 0 THEN RETURN\nEND IF\nSee also\nClose\n2.4.538.8 Syntax 8: For opening trace files\nDescription\nOpens the specified trace file for reading.\n"}
{"page": 1136, "text": "Statements, Events, and Functions\nPage 1136\nApplies to\nTraceFile object\nSyntax\ninstancename.Open ( filename )\nTable 2.1012:\nArgument\nDescription\ninstancename\nInstancename of the TraceFile object\nfilename\nA string identifying the name of the trace file you want to read\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileAlreadyOpenError! -- The specified trace file has already been opened\n\u2022 FileOpenError! -- The trace file can not be opened for reading\n\u2022 FileInvalidFormatError! -- The file does not have the correct format\n\u2022 EnterpriseOnlyFeature! -- (Obsolete) This function is supported only in the Enterprise\nedition of PowerBuilder 12.6 and earlier versions.\n\u2022 SourcePBLError! -- The source libraries cannot be found\nUsage\nYou use this syntax to access the contents of a specified trace file created from a running\nPowerBuilder application. You can then use the properties and functions provided by the\nTraceFile object to perform your own analysis of tracing data instead of using the available\nmodeling objects.\nExamples\nThis example opens a trace file:\nTraceFile ltf_file\nString ls_filename\n \nltf_file = CREATE TraceFile\nltf_file.Open(ls_filename)\n...\nSee also\nClose\nReset\nNextActivity\n"}
{"page": 1137, "text": "Statements, Events, and Functions\nPage 1137\n2.4.539 OpenChannel\nDescription\nOpens a channel to a DDE server application.\nSyntax\nOpenChannel ( applname, topicname {, windowhandle } )\nTable 2.1013:\nArgument\nDescription\napplname\nA string specifying the DDE name of the DDE server application.\ntopicname\nA string identifying the data or the instance of the application you want to\nuse (for example, in Microsoft Excel, the topic name could be System or\nthe name of an open spreadsheet).\nwindowhandle\n(optional)\nThe handle of the window that you want to act as the DDE client. Specify\nthis parameter to control which window is acting as the DDE client when\nyou have more than one open window.\nReturn value\nLong.\nReturns the handle to the channel (a positive integer) if it succeeds. If an error occurs,\nOpenChannel returns a negative integer. Values are:\n-1 -- Open failed\n-9 -- Handle is null\nUsage\nUse OpenChannel to open a channel to a DDE server application and leave it open so you can\nefficiently execute more than one DDE request. This type of DDE conversation is called a\nwarm link. Because you open a channel, the operating system does not have to poll all open\napplications every time you send or ask for data.\nThe following is an outline of a warm-link conversation:\n\u2022 Open a DDE channel with OpenChannel and check that it returns a valid channel handle (a\npositive value).\n\u2022 Execute several DDE functions. You can use the following functions:\nExecRemote ( command, handle, <windowhandle> )\nGetRemote ( location, target, handle, <windowhandle> )\nSetRemote ( location, value, handle, <windowhandle> )\n\u2022 Close the DDE channel with CloseChannel.\nIf you only need to use a remote DDE function once, you can call ExecRemote, GetRemote,\nor SetRemote without opening a channel. This is called a cold link. Without an open channel,\n"}
{"page": 1138, "text": "Statements, Events, and Functions\nPage 1138\nthe operating system polls all running applications to find the specified server application\neach time you call a DDE function.\nYour PowerBuilder application can also be a DDE server.\nFor more information, see StartServerDDE.\nAbout server applications\nEach application decides how it supports DDE. You must check each potential server\napplication's documentation to find out its DDE name, what its valid topics are, and\nhow it expects locations to be specified.\nExamples\nThese statements open a channel to the active spreadsheet REGION.XLS in Microsoft Excel\nand set handle to the handle to the channel:\nlong handle\nhandle = OpenChannel(\"Excel\", \"REGION.XLS\")\nThe following example opens a DDE channel to Excel and requests data from three\nspreadsheet cells. In the PowerBuilder application, the data is stored in the string array\ns_regiondata. The client window for the DDE conversation is w_ddewin:\nlong handle\nstring s_regiondata[3]\nhandle = OpenChannel(\"Excel\", \"REGION.XLS\", &\n      Handle(w_ddewin))\nGetRemote(\"R1C2\", s_regiondata[1], handle, &\n      Handle(w_ddewin))\nGetRemote(\"R1C3\", s_regiondata[2], handle, &\n      Handle(w_ddewin))\nGetRemote(\"R1C4\", s_regiondata[3], handle, &\n      Handle(w_ddewin))\nCloseChannel(handle, Handle(w_ddewin))\nSee also\nCloseChannel\nExecRemote\nGetRemote\nSetRemote\n2.4.540 OpenSheet\nDescription\nOpens a sheet within an MDI (multiple document interface) frame window and creates a\nmenu item for selecting the sheet on the specified menu.\nApplies to\nWindow objects\nSyntax\nOpenSheet ( sheetrefvar {, windowtype }, mdiframe {, position {, arrangeopen } } )\n"}
{"page": 1139, "text": "Statements, Events, and Functions\nPage 1139\nTable 2.1014:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheet places a reference to the open sheet in sheetrefvar.\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\nmdiframe\nThe name of an MDI frame window.\nposition\n(optional)\nThe number of the menu item (in the menu associated with the sheet) to\nwhich you want to append the names of the open sheets. Menu bar menu\nitems are numbered from the left, beginning with 1. The default value of\n0 lists the open sheets under the next-to-last menu item.\narrangeopen\n(optional)\nA value of the ArrangeOpen enumerated datatype specifying how you\nwant the sheet arranged in the MDI frame in relation to other sheets when\nit is opened:\n\u2022 Cascaded! -- (Default) Cascade the sheet relative to other open sheets,\nso that its title bar is below the previously opened sheet.\n\u2022 Layered! -- Layer the sheet so that it fills the frame and covers\npreviously opened sheets.\n\u2022 Original! -- Open the sheet in its original size and cascade it.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, OpenSheet\nreturns null. In some cases, such as if the windowtype argument is invalid, OpenSheet throws\na runtime error and does not return a value; therefore, it is recommended that you both test\nthe return value and wrap the function call in a try-catch block as shown in the first example\nin the Examples section.\nUsage\nA sheet is a document window that is contained within an MDI frame window. MDI\napplications allow several sheets to be open at the same time. The newly opened sheet\nbecomes the active sheet. If the opened sheet has an associated menu, that menu becomes the\nmenu at the top of the frame.\nWhen you specify windowtype, the window object specified in windowtype must be the\nsame datatype as sheetrefvar (a datatype includes datatypes inherited from it). The datatype\nof sheetrefvar is usually window, from which all windows are inherited, but it can be any\nancestor of windowtype. If it is not the same type, an execution error occurs.\nPowerBuilder does not automatically copy objects that are dynamically referenced (through\nstring variables) into your executable. To include the window object specified in windowtype\nin your application, list it in the resource (PBR) file that you use when you build the\nexecutable. For more information about PBR files for an executable, see Section 7.3.5.2,\n\u201cUsing PowerBuilder resource files\u201d in Users Guide.\n"}
{"page": 1140, "text": "Statements, Events, and Functions\nPage 1140\nOpenSheet opens a sheet and appends its name to the item on the menu bar specified in\nposition. If position is 0 or greater than the number of items on the menu bar, PowerBuilder\nappends the name of the sheet to the next-to-last menu item in the menu bar. In most MDI\napplications, the next-to-last menu item on the menu bar is the Window menu, which\ncontains options for arranging sheets, as well as the list of open sheets.\nPowerBuilder cannot append the sheets to a menu that does not have any other menu\nselections. Make sure that the menu you specify or, if you leave out position, the next-to-last\nmenu, has at least one other item.\nIf more than nine sheets are open in the frame, the first nine are listed on the menu specified\nby position and a final item More Windows is added.\nSheets in a frame cannot be made invisible. When you open a sheet, the value of the Visible\nproperty is ignored. Changing the Visible property when the window is already open has no\neffect.\nOpening response windows\nDo not use the OpenSheet function to open a response window.\nExamples\nThis example opens the sheet child_1 in the MDI frame MDI_User in its original size. It\nappends the name of the opened sheet to the second menu item in the menu bar, which is now\nthe menu associated with child_1, not the menu associated with the frame. OpenSheet might\nreturn -1 or throw a runtime error if the call fails. To ensure that both of these possibilities are\ntrapped, this example checks the return value of the function and uses a try-catch statement to\ncatch a possible runtime error:\ninteger li_return\ntry\n   li_return = Opensheet (child_1, MDI_User, 2, &\n      Original!)\n   if IsNull(li_return) then\n         MessageBox (\"Failure\", \"Null argument provided\")\n   elseif li_return= 1 then\n         MessageBox (\"Success\", \"Sheet opened.\")\n   else\n         MessageBox (\"Failure\", \"Sheet open failed.\")\n   end if\ncatch (runtimeerror rt)\n   Messagebox(\"Failure\",\"Sheet open failed. \" &\n      + rt.getmessage()) //Handle the error or not\nend try\nThis example opens an instance of the window object child_1 as an MDI sheet and stores\na reference to the opened window in child. The name of the sheet is appended to the fourth\nmenu associated with child_1 and is layered:\nwindow child\nOpenSheet(child, \"child_1\", MDI_User, 4, Layered!)\nSee also\nArrangeSheets\nGetActiveSheet\n"}
{"page": 1141, "text": "Statements, Events, and Functions\nPage 1141\nOpenSheetWithParm\n2.4.541 OpenSheetAsDocument\nDescription\nOpens a sheet as a document within an MDI frame window for dockable windows.\nApplies to\nWindow objects\nSyntax\nOpenSheetAsDocument ( sheetrefvar {, windowtype }, mdiframe, sheetname {,\n tabalign } )\nTable 2.1015:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetAsDocument places a reference to the open sheet in\nsheetrefvar.\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\nmdiframe\nThe name of an MDI frame window.\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\ntabalign\n(optional)\nA boolean that, when used, creates a new tab group and indicates the\nalignment of the sheets in the group. When true, the tabs in the group\nalign vertically. When false, the tabs align horizontally.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetAsDocument returns null. In some cases, such as if the windowtype argument is\ninvalid, OpenSheetAsDocument throws a runtime error and does not return a value; therefore,\nit is recommended that you both test the return value and wrap the function call in a try-catch\nblock.\nUsage\nTabbed documents can be in more than one tab group. Users can create additional tab groups\nby dragging one tab outside of the current group. If there is more than one tab group, use the\nmdiframe argument to specify in which one to open a sheet. Instead of specifying the parent\nwindow, specify an already open sheet in the tab group where you want to open your new\nsheet.\n2.4.542 OpenSheetDocked\nDescription\n"}
{"page": 1142, "text": "Statements, Events, and Functions\nPage 1142\nOpens a sheet docked in a specified position within an MDI frame window for dockable\nwindows.\nApplies to\nWindow objects\nSyntax\nOpenSheetDocked ( sheetrefvar {, windowtype }, mdiframe, position, sheetname )\nTable 2.1016:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetDocked places a reference to the open sheet in sheetrefvar.\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\nmdiframe\nThe name of an MDI frame window.\nposition\nAn enumerated type that specifies where to dock the sheet:\n\u2022 WindowDockLeft!\n\u2022 WindowDockRight!\n\u2022 WindowDockTop!\n\u2022 WindowDockBottom!\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetDocked returns null. In some cases, such as if the windowtype argument is\ninvalid, OpenSheetDocked throws a runtime error and does not return a value; therefore, it\nis recommended that you both test the return value and wrap the function call in a try-catch\nblock.\nUsage\nOpen the sheet, docked in a specified position.\n2.4.543 OpenSheetFromDockingState\nDescription\nOpens one or more persisted sheets within an MDI frame window for dockable windows.\nApplies to\n"}
{"page": 1143, "text": "Statements, Events, and Functions\nPage 1143\nWindow objects\nSyntax\nOpenSheetFromDockingState ( sheetrefvar {, windowtype }, mdiframe, sheetname )\nTable 2.1017:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetFromDockingState places a reference to the open sheet in\nsheetrefvar.\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\nmdiframe\nThe name of an MDI frame window.\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetFromDockingState returns null.\nUsageOpen persisted sheets in their saved docking states.\n2.4.544 OpenSheetInTabGroup\nDescription\nOpens a sheet in a tab group within an MDI frame window for dockable windows.\nApplies to\nWindow objects\nSyntax\nOpenSheetInTabGroup ( sheetrefvar {, windowtype }, siblingname, sheetname )\nTable 2.1018:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetInTabGroup places a reference to the open sheet in\nsheetrefvar.\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\nsiblingname\nThe name of a sibling window in either a docked state or in a non-\ndocument tab group. The sheet opens in that tab group.\n"}
{"page": 1144, "text": "Statements, Events, and Functions\nPage 1144\nArgument\nDescription\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetInTabGroup returns null. In some cases, such as if the windowtype argument is\ninvalid, OpenSheetInTabGroup throws a runtime error and does not return a value; therefore,\nit is recommended that you both test the return value and wrap the function call in a try-catch\nblock.\nUsage\nThe first sheet opened in a main window cannot be opened using OpenSheetInTabGroup\nor OpenSheetWithParmInTabGroup. To create a tab group, open the first sheet as a docked\nsheet and then use that sheet as the siblingname argument.\n2.4.545 OpenSheetWithParm\nDescription\nOpens a sheet within an MDI (multiple document interface) frame window and\ncreates a menu item for selecting the sheet on the specified menu, as OpenSheet does.\nOpenSheetWithParm also stores a parameter in the system's Message object so that it is\naccessible to the opened sheet.\nApplies to\nWindow objects\nSyntax\nOpenSheetWithParm ( sheetrefvar, parameter {, windowtype }, mdiframe {, position {,\n arrangeopen } } )\nTable 2.1019:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetWithParm places a reference to the open sheet in sheetrefvar.\nparameter\nThe parameter you want to store in the Message object when the sheet is\nopened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Numeric\n\u2022 PowerObject\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\n"}
{"page": 1145, "text": "Statements, Events, and Functions\nPage 1145\nArgument\nDescription\nmdiframe\nThe name of the MDI frame window in which you want to open this\nsheet.\nposition\n(optional)\nThe number of the menu item (in the menu associated with the sheet) to\nwhich you want to append the names of the open sheets. Menu bar menu\nitems are numbered from the left, beginning with 1. The default is to list\nthe open sheets under the next-to-last menu item.\narrangeopen\n(optional)\nA value of the ArrangeOpen enumerated datatype specifying how you\nwant the sheets arranged in the MDI frame when they are opened:\n\u2022 Cascaded! -- (Default) Cascade the sheet relative to other open sheets\nso that its title bar is below the previously opened sheet.\n\u2022 Layered! -- Layer the sheet so that it fills the frame and covers\npreviously opened sheets.\n\u2022 Original! -- Open the sheet in its original size and cascade it.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetWithParm returns null. In some cases, such as if the windowtype argument is\ninvalid, OpenSheetWithParm throws a runtime error and does not return a value; therefore, it\nis recommended that you both test the return value and wrap the function call in a try-catch\nblock as shown in the first example in the Examples section.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenSheetWithParm, scripts for the opened sheet would check\none of the following properties.\nTable 2.1020:\nMessage object\nproperty\nArgument datatype\nMessage.DoubleParm\nNumeric\nMessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nMessage.StringParmString\nIn the opened window, it is a good idea to access the value passed in the Message object\nimmediately (because some other script may use the Message object for another purpose).\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you get a null object\nreference, which causes an error. For example, if you pass the name of a control on\n"}
{"page": 1146, "text": "Statements, Events, and Functions\nPage 1146\na window that is being closed, that control will not exist when a script accesses the\nparameter.\nOpening response windows\nDo not use the OpenSheetWithParm function to open a response window.\nSee the usage notes for OpenSheet, which also apply to OpenSheetWithParm.\nExamples\nThis example opens the sheet w_child_1 in the MDI frame MDI_User in its original size\nand stores MA in message.StringParm. It appends the names of the open sheet to the\nsecond menu item in the menu bar of MDI_User (the menu associated with w_child_1).\nOpenSheetWithParm might return -1 or throw a runtime error if the call fails. To ensure that\nboth of these possibilities are trapped, this example checks the return value of the function\nand uses a try-catch statement to catch a possible runtime error:\ninteger li_return\ntry\n    li_return = OpenSheetWithParm(w_child_1, \"MA\", &\n         MDI_User, 2, Original!)\n   if IsNull(li_return) then\n         MessageBox (\"Failure\", \"Null argument provided\")\n   elseif li_return= 1 then\n         MessageBox (\"Success\", \"Sheet opened.\")\n   else\n         MessageBox (\"Failure\", \"Sheet open failed.\")\n   end if\ncatch (runtimeerror rt)\n   Messagebox(\"Failure\", \"Sheet open failed. \" &\n      + rt.getmessage()) //Handle the error\nend try\nThe next example illustrates how to access parameters passed in the Message object. These\nstatements are in the scripts for two different windows. The script for the first window\ndeclares child as a window and opens an instance of w_child_1 as an MDI sheet. The name\nof the sheet is appended to the fourth menu item associated with w_child_1 and is layered.\nThe script also passes a reference to the SingleLineEdit control sle_state as a PowerObject\nparameter of the Message object. The script for the Open event of w_child_1 uses the text in\nthe edit control to determine what type of calculations to perform. Note that this would fail\nif sle_state no longer existed when the second script refers to it. As an alternative, you could\npass the text itself, which would be stored in the String parameter of Message.\nThe second script determines the text in the SingleLineEdit and performs processing based on\nthat text.\nThe script for the first window is:\nwindow child\nOpenSheetWithParm(child, sle_state, &\n      \"w_child_1\", MDI_User, 4, Layered!)\nThe second script, for the Open event in w_child_1, is:\nSingleLineEdit sle_state\nsle_state = Message.PowerObjectParm\n"}
{"page": 1147, "text": "Statements, Events, and Functions\nPage 1147\nIF sle_state.Text = \"overtime\" THEN\n... // overtime hours calculations\nELSEIF sle_state.Text = \"vacation\" THEN\n... // vacation processing\nELSEIF sle_state.Text = \"standard\" THEN\n... // standard hours calculations\nEND IF\nSee also\nArrangeSheets\nOpenSheet\n2.4.546 OpenSheetWithParmAsDocument\nDescription\nOpens a sheet as a document within an MDI frame window for dockable windows.\nOpenSheetWithParmAsDocument also stores a parameter in the system's Message object so\nthat it is accessible to the opened sheet.\nApplies to\nWindow objects\nSyntax\nOpenSheetWithParmAsDocument ( sheetrefvar, parameter {, windowtype }, mdiframe,\n sheetname {, tabalign } )\nTable 2.1021:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetWithParmAsDocument places a reference to the open sheet in\nsheetrefvar.\nparameter\nThe parameter you want to store in the Message object when the sheet is\nopened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Double\n\u2022 PowerObject\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\nmdiframe\nThe name of an MDI frame window.\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\ntabalign\n(optional)\nA boolean that, when used, creates a new tab group and indicates the\nalignment of the sheets in the group. When true, the tabs in the group\nalign vertically. When false, the tabs align horizontally.\nReturn value\n"}
{"page": 1148, "text": "Statements, Events, and Functions\nPage 1148\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetWithParmAsDocument returns null. In some cases, such as if the windowtype\nargument is invalid, OpenSheetWithParmAsDocument throws a runtime error and does not\nreturn a value; therefore, it is recommended that you both test the return value and wrap the\nfunction call in a try-catch block.\nUsage\nTabbed documents can be in more than one tab group. Users can create additional tab groups\nby dragging one tab outside of the current group. If there is more than one tab group, use the\nmdiframe argument to specify in which one to open a sheet. Instead of specifying the parent\nwindow, specify an already open sheet in the tab group where you want to open your new\nsheet.\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenSheetWithParmAsDocument, scripts for the opened sheet\nwould check one of the following properties.\nTable 2.1022:\nMessage object\nproperty\nArgument datatype\nMessage.DoubleParm\nDouble\nMessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nMessage.StringParmString\nIn the opened window, it is a good idea to access the value passed in the Message object\nimmediately (because some other script may use the Message object for another purpose).\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you get a null object\nreference, which causes an error. For example, if you pass the name of a control on\na window that is being closed, that control will not exist when a script accesses the\nparameter.\n2.4.547 OpenSheetWithParmDocked\nDescription\nOpens a sheet docked in a specified position within an MDI frame window for dockable\nwindows. OpenSheetWithParmDocked also stores a parameter in the system's Message\nobject so that it is accessible to the opened sheet.\nApplies to\nWindow objects\nSyntax\nOpenSheetWithParmDocked ( sheetrefvar, parameter {, windowtype }, mdiframe,\n position, sheetname )\n"}
{"page": 1149, "text": "Statements, Events, and Functions\nPage 1149\nTable 2.1023:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetWithParmDocked places a reference to the open sheet in\nsheetrefvar.\nparameter\nThe parameter you want to store in the Message object when the sheet is\nopened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Double\n\u2022 PowerObject\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\nmdiframe\nThe name of an MDI frame window.\nposition\nAn enumerated type that specifies where to dock the sheet:\n\u2022 WindowDockLeft!\n\u2022 WindowDockRight!\n\u2022 WindowDockTop!\n\u2022 WindowDockBottom!\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetWithParmDocked returns null. In some cases, such as if the windowtype argument\nis invalid, OpenSheetWithParmDocked throws a runtime error and does not return a value;\ntherefore, it is recommended that you both test the return value and wrap the function call in a\ntry-catch block.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenSheetWithParmDocked, scripts for the opened sheet\nwould check one of the following properties.\nTable 2.1024:\nMessage object\nproperty\nArgument datatype\nMessage.DoubleParm\nDouble\n"}
{"page": 1150, "text": "Statements, Events, and Functions\nPage 1150\nMessage object\nproperty\nArgument datatype\nMessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nMessage.StringParmString\nIn the opened window, it is a good idea to access the value passed in the Message object\nimmediately (because some other script may use the Message object for another purpose).\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you get a null object\nreference, which causes an error. For example, if you pass the name of a control on\na window that is being closed, that control will not exist when a script accesses the\nparameter.\n2.4.548 OpenSheetWithParmFromDockingState\nDescription\nOpens one or more persisted sheets within an MDI frame window for dockable windows.\nOpenSheetWithParmFromDockingState also stores a parameter in the system's Message\nobject so that it is accessible to the opened sheet.\nApplies to\nWindow objects\nSyntax\nOpenSheetWithParmFromDockingState ( sheetrefvar, parameter {, windowtype },\n mdiframe, sheetname )\nTable 2.1025:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetWithParmFromDockingState places a reference to the open\nsheet in sheetrefvar.\nparameter\nThe parameter you want to store in the Message object when the sheet is\nopened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Double\n\u2022 PowerObject\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\n"}
{"page": 1151, "text": "Statements, Events, and Functions\nPage 1151\nArgument\nDescription\nmdiframe\nThe name of an MDI frame window.\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetWithParmFromDockingState returns null.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenSheetWithParmFromDockingState, scripts for the opened\nsheet would check one of the following properties.\nTable 2.1026:\nMessage object\nproperty\nArgument datatype\nMessage.DoubleParm\nDouble\nMessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nMessage.StringParmString\nIn the opened window, it is a good idea to access the value passed in the Message object\nimmediately (because some other script may use the Message object for another purpose).\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you get a null object\nreference, which causes an error. For example, if you pass the name of a control on\na window that is being closed, that control will not exist when a script accesses the\nparameter.\n2.4.549 OpenSheetWithParmInTabGroup\nDescription\nOpens a sheet in a tab group within an MDI frame window for dockable windows.\nOpenSheetWithParmInTabGroup also stores a parameter in the system's Message object so\nthat it is accessible to the opened sheet.\nApplies to\nWindow objects\nSyntax\n"}
{"page": 1152, "text": "Statements, Events, and Functions\nPage 1152\nOpenSheetWithParmInTabGroup ( sheetrefvar, parameter {, windowtype }, siblingname,\n sheetname )\nTable 2.1027:\nArgument\nDescription\nsheetrefvar\nThe name of any window variable that is not an MDI frame window.\nOpenSheetInwithParmTabGroup places a reference to the open sheet in\nsheetrefvar.\nparameter\nThe parameter you want to store in the Message object when the sheet is\nopened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Double\n\u2022 PowerObject\nwindowtype\n(optional)\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nsheetrefvar.\nsiblingname\nThe name of a sibling window in either a docked state or in a non-\ndocument tab group. The sheet opens in that tab group.\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenSheetWithParmInTabGroup returns null. In some cases, such as if the windowtype\nargument is invalid, OpenSheetWithParmInTabGroup throws a runtime error and does not\nreturn a value; therefore, it is recommended that you both test the return value and wrap the\nfunction call in a try-catch block.\nUsage\nThe first sheet opened in a main window cannot be opened using OpenSheetInTabGroup\nor OpenSheetWithParmInTabGroup. To create a tab group, open the first sheet as a docked\nsheet and then use that sheet as the siblingname argument.\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenSheetWithParmInTabGroup, scripts for the opened sheet\nwould check one of the following properties.\nTable 2.1028:\nMessage object\nproperty\nArgument datatype\nMessage.DoubleParm\nDouble\nMessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\n"}
{"page": 1153, "text": "Statements, Events, and Functions\nPage 1153\nMessage object\nproperty\nArgument datatype\nMessage.StringParmString\nIn the opened window, it is a good idea to access the value passed in the Message object\nimmediately (because some other script may use the Message object for another purpose).\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you get a null object\nreference, which causes an error. For example, if you pass the name of a control on\na window that is being closed, that control will not exist when a script accesses the\nparameter.\n2.4.550 OpenTab\nOpens a visual user object and makes it a tab page in the specified Tab control and makes all\nits properties and controls available to scripts.\nTable 2.1029:\nTo open\nUse\nA user object as a tab page\nSyntax 1\nA user object as a tab page, allowing the application to select the user\nobject's type at runtime\nSyntax 2\n2.4.550.1 Syntax 1: For user objects of a known datatype\nDescription\nOpens a custom visual user object of a known datatype as a tab page in a Tab control.\nApplies to\nTab controls\nSyntax\ntabcontrolname.OpenTab ( userobjectvar, index )\nTable 2.1030:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control in which you want to open the user object as\na tab page.\nuserobjectvar\nThe name of the custom visual user object you want to open as a tab\npage. You can specify a custom visual user object defined in the User\nObject painter (which is a user object datatype) or a variable of the\ndesired user object datatype. OpenTab places a reference to the opened\ncustom visual user object in userobjectvar.\n"}
{"page": 1154, "text": "Statements, Events, and Functions\nPage 1154\nArgument\nDescription\nindex\nThe number of the tab before which you want to insert the new tab. If\nindex is 0 or greater than the number of tabs, the tab page is inserted at\nthe end.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, OpenTab\nreturns null.\nUsage\nUse Syntax 1 when you know what user object you want to open. Use Syntax 2 when the\napplication will determine what type of user object to open when the script runs.\nThe tab page for the user object does not become selected. Scripts for constructor events of\nthe controls on the user object do not run until the tab page is selected.\nYou must open a user object before you can access the properties of the user object. If you\naccess the user object's properties before you open it, an execution error will occur.\nA user object that is part of a Tab control's definition (that is, it was added to the Tab control\nin the Window painter) does not have to be opened in a script. PowerBuilder opens it when it\nopens the window containing the Tab control.\nOpenTab adds the newly opened user object to the Tab control's Control array, which is a\nproperty that lists the tab pages within the Tab control.\nOpening the same object twice\nIf you call Syntax 1 twice to open the same user object, PowerBuilder does open\nthe user object again as another tab page, in contrast to the behavior of Open and\nOpenUserObject.\nBehavior change\nIn previous releases, calling the OpenTab function to open a user object as a tab page\ndisplayed the tab page even if the user object's Visible property was set to false. In\ncurrent releases, the user object's Visible property must be set to true for the tab page\nto display.\nExamples\nThis statement opens an instance of a user object named u_Employee as a tab page in the Tab\ncontrol tab_1:\ntab_1.OpenTab(u_Employee, 0)\nThe following statements open an instance of a user object u_to_open as a tab page in the\nTab control tab_1. It becomes the first tab in the control:\nu_employee u_to_open\ntab_1.OpenTab(u_to_open, 1)\n"}
{"page": 1155, "text": "Statements, Events, and Functions\nPage 1155\nSee also\nOpenTabWithParm\n2.4.550.2 Syntax 2: For user objects of unknown datatype\nDescription\nOpens a visual user object as a tab page within a Tab control when the datatype of the user\nobject is not known until the script is executed.\nApplies to\nTab controls\nSyntax\ntabcontrolname.OpenTab ( userobjectvar, userobjecttype, index )\nTable 2.1031:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control in which you want to open the user object as\na tab page.\nuserobjectvar\nA variable of datatype UserObject. OpenTab places a reference to the\nopened user object in userobjectvar.\nuserobjecttype\nA string whose value is the name of the user object you want to open.\nThe datatype of userobjecttype must be a descendant of userobjectvar.\nindex\nThe number of the tab before which you want to insert the new tab. If\nindex is 0 or greater than the number of tabs, the tab page is inserted at\nthe end\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, OpenTab\nreturns null.\nUsage\nUse Syntax 1 when you know what user object you want to open. Use Syntax 2 when the\napplication will determine what type of user object to open when the script runs.\nThe tab page for the user object does not become selected. Scripts for Constructor events of\nthe controls on the user object do not run until the tab page is selected.\nYou must open a user object before you can access the properties of the user object. If you\naccess the user object's properties before you open it, an execution error will occur.\nA user object that is part of a Tab control's definition (that is, it was added to the Tab control\nin the Window painter) does not have to be opened in a script. PowerBuilder opens it when it\nopens the window containing the Tab control.\nOpenTab adds the newly opened user object to the Tab control's Control array, which is a\nproperty that lists the tab pages within the Tab control.\n"}
{"page": 1156, "text": "Statements, Events, and Functions\nPage 1156\nBehavior change\nIn previous releases, calling the OpenTab function to open a user object as a tab page\ndisplayed the tab page even if the user object's Visible property was set to false. In\ncurrent releases, the user object's Visible property must be set to true for the tab page\nto display.\nConsiderations when specifying a user object type\nWhen you use Syntax 2, PowerBuilder opens an instance of a user object of the\ndatatype specified in userobjecttype and places a reference to this instance in the\nvariable userobjectvar. To refer to the instance in scripts, use userobjectvar.\nIf userobjecttype is a descendant user object, you can only refer to properties, events,\nfunctions, or structures that are part of the definition of userobjectvar. For example, if a user\nevent is declared for userobjecttype, you cannot reference it.\nThe object specified in userobjecttype is not automatically included in your executable\napplication. To include it, you must save it in a PBD file (PowerBuilder dynamic library) that\nyou deliver with your application.\nExamples\nThe following example opens a user object as the last tab page in the Tab control tab_1. The\nuser object is of the type specified in the string s_u_name and stores the reference to the user\nobject in the variable u_to_open:\nUserObject u_to_open\nstring s_u_name\n \ns_u_name = sle_user.Text\ntab_1.OpenTab(u_to_open, s_u_name, 0)\nSee also\nOpenTabWithParm\n2.4.551 OpenTabWithParm\nAdds a visual user object to the specified window and makes all its properties and controls\navailable to scripts, as OpenTab does. OpenTabWithParm also stores a parameter in the\nsystem's Message object so that it is accessible to the opened object.\nTable 2.1032:\nTo open\nUse\nA user object as a tab page\nSyntax 1\nA user object as a tab page, allowing the application to select the user\nobject's type at runtime\nSyntax 2\n2.4.551.1 Syntax 1: For user objects of a known datatype\nDescription\n"}
{"page": 1157, "text": "Statements, Events, and Functions\nPage 1157\nOpens a custom visual user object of a known datatype as a tab page in a Tab control and\nstores a parameter in the system's Message object.\nApplies to\nTab controls\nSyntax\ntabcontrolname.OpenTabWithParm ( userobjectvar, parameter, index )\nTable 2.1033:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control in which you want to open the user object as\na tab page.\nuserobjectvar\nThe name of the custom visual user object you want to open as a tab\npage. You can specify a custom visual user object defined in the User\nObject painter (which is a user object datatype) or a variable of the\ndesired user object datatype. OpenTabWithParm places a reference to the\nopened custom visual user object in userobjectvar.\nparameter\nThe parameter you want to store in the Message object when the user\nobject is opened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Numeric\n\u2022 PowerObject\nindex\nThe number of the tab before which you want to insert the new tab. If\nindex is 0 or greater than the number of tabs, the tab page is inserted at\nthe end.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenTabWithParm returns null.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenTabWithParm, scripts for the opened user object would\ncheck one of the following properties.\nTable 2.1034:\nMessage object\nproperty\nArgument datatype\nmessage.DoubleParm\nNumeric\nmessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\n"}
{"page": 1158, "text": "Statements, Events, and Functions\nPage 1158\nMessage object\nproperty\nArgument datatype\nmessage.StringParmString\nIn the opened user object, it is a good idea to access the value passed in the Message object\nimmediately because some other script may use the Message object for another purpose.\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you get a null object\nreference, which causes an error. For example, if you pass the name of a control on\na window that is being closed, that control will not exist when a script accesses the\nparameter.\nSee also the usage notes for OpenTab, all of which apply to OpenTabWithParm.\nExamples\nThis statement opens an instance of a user object named u_Employee as a tab page in the\nTab control tab_empsettings. It also stores the string James Newton in Message.StringParm.\nThe Constructor event script for the user object uses the string parameter as the text of a\nStaticText control st_empname in the object. The script that opens the tab page has the\nfollowing statement:\ntab_empsettings.OpenTabWithParm(u_Employee, &\n      \"James Newton\", 0)\nThe user object's Constructor event script has the following statement:\nst_empname.Text = Message.StringParm\nThe following statements open an instance of a user object u_to_open as the first tab page\nin the Tab control tab_empsettings and store a number in message.DoubleParm. The last\nstatement selects the tab page:\nu_employee u_to_open\ninteger age = 50\ntab_1.OpenTabWithParm(u_to_open, age, 1)\ntab_1.SelectTab(u_to_open)\nSee also\nOpenTab\n2.4.551.2 Syntax 2: For user objects of unknown datatype\nDescription\nOpens a visual user object as a tab page within a Tab control when the datatype of the user\nobject is not known until the script is executed. In addition, OpenTabWithParm stores a\nparameter in the system's Message object so that it is accessible to the opened object.\nApplies to\nTab controls\n"}
{"page": 1159, "text": "Statements, Events, and Functions\nPage 1159\nSyntax\ntabcontrolname.OpenTabWithParm ( userobjectvar, parameter, userobjecttype, index )\nTable 2.1035:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control in which you want to open the user object as\na tab page.\nuserobjectvar\nA variable of datatype UserObject. OpenTabWithParm places a reference\nto the opened user object in userobjectvar\nparameter\nThe parameter you want to store in the Message object when the user\nobject is opened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Numeric\n\u2022 PowerObject\nuserobjecttype\nA string whose value is the datatype of the user object you want to open.\nThe datatype of userobjecttype must be a descendant of userobjectvar.\nindex\nThe number of the tab before which you want to insert the new tab. If\nindex is 0 or greater than the number of tabs, the tab page is inserted at\nthe end.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenTabWithParm returns null.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenTabWithParm, scripts for the opened user object would\ncheck one of the following properties.\nTable 2.1036:\nMessage object\nproperty\nArgument datatype\nmessage.DoubleParm\nNumeric\nmessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nmessage.StringParmString\nIn the opened user object, it is a good idea to access the value passed in the Message object\nimmediately because some other script may use the Message object for another purpose.\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you will get a null object\nreference, which causes an error. For example, if you pass the name of a control on\n"}
{"page": 1160, "text": "Statements, Events, and Functions\nPage 1160\na window that is being closed, that control will not exist when a script accesses the\nparameter.\nSee also the usage notes for OpenTab, all of which apply to OpenTabWithParm.\nExamples\nThe following statement opens an instance of a user object u_data of type u_benefit_plan\nas the last tab page in the Tab control tab_1. The parameter \"Benefits\" is stored in\nmessage.StringParm:\nUserObject u_data\ntab_1.OpenTabWithParm(u_data, &\n      \"Benefits\", \"u_benefit_plan\", 0)\nThese statements open a user object of the type specified in the string s_u_name and store\nthe reference to the user object in the variable u_to_open. The script gets the value of\ns_u_name, the type of user object to open, from the database. The parameter is the text of the\nSingleLineEdit sle_loc, so it is stored in Message.StringParm. The user object becomes the\nthird tab page in the Tab control tab_1:\nUserObject u_to_open\nstring s_u_name, e_location\n \ne_location = sle_location.Text\n \nSELECT next_userobj INTO  : s_u_name\nFROM routing_table\nWHERE ...  ;\n \ntab_1.OpenTabWithParm(u_to_open, &\n      e_location, s_u_name, 3)\nThe following statements open a user object of the type specified in the string s_u_name and\nstore the reference to the user object in the variable u_to_open. The parameter is numeric so\nit is stored in message.DoubleParm. The user object becomes the first tab page in the Tab\ncontrol tab_1:\nUserObject u_to_open\ninteger age = 60\nstring s_u_name\n \ns_u_name = sle_user.Text\ntab_1.OpenTabWithParm(u_to_open, age, &\n      s_u_name, 1)\nSee also\nOpenTab\n2.4.552 OpenUserObject\nAdds a user object to a window or visual user object and makes all its properties and controls\navailable to scripts.\nTable 2.1037:\nTo\nUse\nOpen an instance of a specified visual user object\nSyntax 1\n"}
{"page": 1161, "text": "Statements, Events, and Functions\nPage 1161\nTo\nUse\nOpen a visual user object, allowing the application to select the user\nobject's type at runtime\nSyntax 2\n2.4.552.1 Syntax 1: For user objects of a known datatype\nDescription\nOpens a user object of a known datatype.\nApplies to\nWindow objects and visual user objects\nSyntax\nobjectname.OpenUserObject ( targetobjectvar {, x, y } )\nTable 2.1038:\nArgument\nDescription\nobjectname\nThe name of the window or user object in which to open the target user\nobject.\ntargetobjectvar\nThe name of the user object you want to display. You can specify a user\nobject defined in the User Object painter (which is a user object datatype)\nor a variable of the desired user object datatype. OpenUserObject places a\nreference to the opened user object in targetobjectvar.\nx (optional)\nThe x coordinate in PowerBuilder units of the target object within the\nfirst object's frame. The default is 0.\ny (optional)\nThe y coordinate in PowerBuilder units of the target object within the\nfirst object's frame. The default is 0.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenUserObject returns null.\nUsage\nUse Syntax 1 when you know what user object you want to open. Use Syntax 2 when the\napplication will determine what type of user object to open when the script runs.\nYou must open a user object before you can access its properties. If you access the user\nobject's properties before you open it, an execution error occurs.\nA user object that is part of a window definition (for example, if you added it in the Window\npainter), you do not need to open it using a script: PowerBuilder opens the object when it\nopens the window.\nAt runtime, OpenUserObject adds the newly opened user object to the first object's Control\narray.\nTarget objects are not automatically closed at runtime when you open and then close\nobjectname. You need to explicitly call CloseUserObject to destroy a target user object,\n"}
{"page": 1162, "text": "Statements, Events, and Functions\nPage 1162\nusually when the objectname object closes. If you do not destroy the target object, it holds on\nto its allocated memory, resulting in a memory leak.\nPowerBuilder displays the user object when it next updates the display or at the end of the\nscript, whichever comes first. For example, if you open several user objects in a script, they\nall display at once when the script is complete, unless some other statements cause a change\nin the screen's appearance (for example, the MessageBox function displays a message or the\nscript changes a visual property of a control).\nCalling OpenUserObject twice\nIf you call Syntax 1 twice to open the same user object, PowerBuilder activates the\nuser object twice; it does not open two instances of the user object.\nExamples\nThis statement displays an instance of a user object named u_Employee in the upper left\ncorner of window w_emp (coordinates 0,0):\nw_emp.OpenUserObject(u_Employee)\nThe following statements display an instance of a user object u_to_open at 200,100 in the\nwindow w_empstatus:\nu_employee u_to_open\nw_empstatus.OpenUserObject(u_to_open, 200, 100)\nThe following statement displays an instance of a user object u_data at location 20,100 in\nw_info:\nw_info.OpenUserObject(u_data, 20, 100)\nSee also\nOpenUserObjectWithParm\n2.4.552.2 Syntax 2: For user objects of unknown datatype\nDescription\nOpens a user object when the datatype of the user object is not known until the script is\nexecuted.\nApplies to\nWindow objects and visual user objects\nSyntax\nobjectname.OpenUserObject ( targetobjectvar, targetobjecttype {, x, y } )\nTable 2.1039:\nArgument\nDescription\nobjectname\nThe name of the window or user object in which to open the target user\nobject.\ntargetobjectvar\nA variable of datatype DragObject. OpenUserObject places a reference to\nthe opened user object in targetobjectvar.\n"}
{"page": 1163, "text": "Statements, Events, and Functions\nPage 1163\nArgument\nDescription\ntargetobjecttype\nA string whose value is the name of the user object you want to display.\nThe datatype of targetobjecttype must be a descendant of targetobjectvar.\nx (optional)\nThe x coordinate in PowerBuilder units of the user object within the first\nobject's frame. The default is 0.\ny (optional)\nThe y coordinate in PowerBuilder units of the user object within the first\nobject's frame. The default is 0.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenUserObject returns null.\nUsage\nUse Syntax 1 when you know what user object you want to open. Use Syntax 2 when the\napplication will determine what type of user object to open when the script runs.\nYou must open a user object before you can access its properties. If you access the user\nobject's properties before you open it, an execution error occurs.\nA user object that is part of a window definition (for example, if you added it in the Window\npainter), you do not need to open it using a script: PowerBuilder opens the object when it\nopens the window.\nAt runtime, OpenUserObject adds the newly opened user object to the first object's Control\narray.\nTarget objects are not automatically closed at runtime when you open and then close\nobjectname. You need to explicitly call CloseUserObject to destroy a target user object,\nusually when the objectname object closes. If you do not destroy the target object, it holds on\nto its allocated memory, resulting in a memory leak.\nPowerBuilder displays the user object when it next updates the display or at the end of the\nscript, whichever comes first. For example, if you open several user objects in a script, they\nwill all display at once when the script is complete, unless some other statements cause a\nchange in the screen's appearance (for example, the MessageBox function displays a message\nor the script changes a visual property of a control).\nThe userobjecttype argument\nWhen you use Syntax 2, PowerBuilder opens an instance of a user object of the\ndatatype specified in userobjecttype and places a reference to this instance in the\nvariable userobjectvar. To refer to the instance in scripts, use userobjectvar.\nIf userobjecttype is a descendant user object, you can only refer to properties, events,\nfunctions, or structures that are part of the definition of userobjectvar. For example, if a user\nevent is declared for userobjecttype, you cannot reference it.\nThe object specified in userobjecttype is not automatically included in your executable\napplication. To include it, you must save it in a PBD file (PowerBuilder dynamic library) that\nyou deliver with your application.\nExamples\n"}
{"page": 1164, "text": "Statements, Events, and Functions\nPage 1164\nThe following example displays a user object of the type specified in the string s_u_name and\nstores the reference to the user object in the variable u_to_open. The user object is located at\n100,200 in the window w_info:\nDragObject u_to_open\nstring s_u_name\n \ns_u_name = sle_user.Text\nw_info.OpenUserObject(u_to_open, s_u_name, 100, 200)\nSee also\nOpenUserObjectWithParm\n2.4.553 OpenUserObjectWithParm\nAdds a user object to a window or visual user object and makes all its properties and controls\navailable to scripts, as OpenUserObject does. OpenUserObjectWithParm also stores a\nparameter in the system's Message object so that it is accessible to the opened object.\nTable 2.1040:\nTo\nUse\nOpen an instance of a specified visual user object\nSyntax 1\nOpen a visual user object, allowing the application to select the user\nobject's type at runtime\nSyntax 2\n2.4.553.1 Syntax 1: For user objects of a known datatype\nDescription\nOpens a user object of a known datatype and stores a parameter in the system's Message\nobject.\nApplies to\nWindow objects and visual user objects\nSyntax\nobjectname.OpenUserObjectWithParm ( targetobjectvar, parameter {, x, y } )\nTable 2.1041:\nArgument\nDescription\nobjectname\nThe name of the window or user object in which to open the target user\nobject.\ntargetobjectvar\nThe name of the target object you want to display. You can specify a user\nobject defined in the User Object painter (which is a user object datatype)\nor a variable of the desired user object datatype. OpenUserObject places a\nreference to the opened target object in targetobjectvar.\nparameter\nThe parameter you want to store in the Message object when the target\nobject is opened. Parameter must have one of these datatypes:\n\u2022 String\n"}
{"page": 1165, "text": "Statements, Events, and Functions\nPage 1165\nArgument\nDescription\n\u2022 Numeric\n\u2022 PowerObject\nx (optional)\nThe x coordinate in PowerBuilder units of the target object within the\nobjectname object. The default is 0.\ny (optional)\nThe y coordinate in PowerBuilder units of the target object within the\nobjectname object. The default is 0.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenUserObjectWithParm returns null.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenUserObjectWithParm, scripts for the opened user object\ncheck one of the following properties:\nTable 2.1042:\nMessage object\nproperty\nArgument datatype\nmessage.DoubleParm\nNumeric\nmessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nmessage.StringParmString\nIn the target user object, consider accessing the value passed in the Message object\nimmediately, because some other script may use the Message object for another purpose.\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you get a null object\nreference, which causes an error. For example, if you pass the name of a control on\na window that is being closed, that control will not exist when a script accesses the\nparameter.\nSee also the usage notes for OpenUserObject, all of which apply to\nOpenUserObjectWithParm.\nExamples\nThis statement displays an instance of a user object named u_Employee in the window\nw_emp and stores the string James Newton in Message.StringParm. The Constructor\nevent script for the user object uses the string parameter as the text of a StaticText control\nst_empname in the object. The script that opens the user object has the following statement:\nw_emp.OpenUserObjectWithParm(u_Employee, \"Jim Newton\")\n"}
{"page": 1166, "text": "Statements, Events, and Functions\nPage 1166\nThe target user object's Constructor event script has the following statement:\nst_empname.Text = Message.StringParm\nThe following statements display an instance of a user object u_to_open in the window\nw_emp and store a number in message.DoubleParm:\nu_employee u_to_open\ninteger age = 50\nw_emp.OpenUserObjectWithParm(u_to_open, age)\nSee also\nCloseWithReturn\nOpenUserObject\nOpenWithParm\n2.4.553.2 Syntax 2: For user objects of unknown datatype\nDescription\nOpens a user object when the datatype of the user object is not known until the script is\nexecuted. In addition, OpenUserObjectWithParm stores a parameter in the system's Message\nobject so that it is accessible to the opened object.\nApplies to\nWindow objects and user objects\nSyntax\nobjectname.OpenUserObjectWithParm ( targetobjectvar, parameter, targetobjecttype {,\n x, y } )\nTable 2.1043:\nArgument\nDescription\nobjectname\nThe name of the window or user object in which to open the target user\nobject.\ntargetobjectvar\nA variable of datatype DragObject. OpenUserObjectWithParm places a\nreference to the opened target object in targetobjectvar.\nparameter\nThe parameter you want to store in the Message object when the target\nobject is opened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Numeric\n\u2022 PowerObject\ntargetobjecttype\nA string whose value is the datatype of the target object to open. The\ndatatype of targetobjecttype must be a descendant of targetobjectvar.\nx (optional)\nThe x coordinate in PowerBuilder units of the user object within the\nobjectname object's frame. The default is 0.\n"}
{"page": 1167, "text": "Statements, Events, and Functions\nPage 1167\nArgument\nDescription\ny (optional)\nThe y coordinate in PowerBuilder units of the target object within the\nobjectname object's frame. The default is 0.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenUserObjectWithParm returns null.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenUserObjectWithParm, scripts for the opened user object\ncheck one of the following properties.\nTable 2.1044:\nMessage object\nproperty\nArgument datatype\nmessage.DoubleParm\nNumeric\nmessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nmessage.StringParmString\nIn the target user object, consider accessing the value passed in the Message object\nimmediately, because some other script may use the Message object for another purpose.\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you will get a null object\nreference, which causes an error. For example, if you pass the name of a control on\nan object that is being closed, that control will not exist when a script accesses the\nparameter.\nSee also the usage notes for OpenUserObject, all of which apply to\nOpenUserObjectWithParm.\nExamples\nThe following statement displays an instance of a user object u_data of type u_benefit_plan\nat location 20,100 in the container object w_hresource. The parameter \"Benefits\" is stored in\nmessage.StringParm:\nDragObject u_data\nw_hresource.OpenUserObjectWithParm(u_data, &\n      \"Benefits\", \"u_benefit_plan\", 20, 100)\nThese statements open a user object of the type specified in the string s_u_name and store the\nreference to the object in the variable u_to_open. The script gets the value of s_u_name, the\ntype of user object to open, from the database. The parameter is the text of the SingleLineEdit\nsle_loc, so it is stored in Message.StringParm. The target object is at the default coordinates\n0,0 in the objectname object w_info:\n"}
{"page": 1168, "text": "Statements, Events, and Functions\nPage 1168\nDragObject u_to_open\nstring s_u_name, e_location\n \ne_location = sle_location.Text\n \nSELECT next_userobj INTO  : s_u_name\nFROM routing_table\nWHERE ...  ;\n \nw_info.OpenUserObjectWithParm(u_to_open, &\n      e_location, s_u_name)\nThe following statements display a user object of the type specified in the string s_u_name\nand store the reference to the object in the variable u_to_open. The parameter is numeric,\nso it is stored in message.DoubleParm. The target object is at the coordinates 100,200 in the\nobjectname object w_emp:\nuserobject u_to_open\ninteger age = 60\nstring s_u_name\n \ns_u_name = sle_user.Text\nw_emp.OpenUserObjectWithParm(u_to_open, age, &\n      s_u_name, 100, 200)\nSee also\nCloseWithReturn\nOpenUserObject\nOpenWithParm\n2.4.554 OpenWithParm\nDisplays a window and makes all its properties and controls available to scripts, as Open\ndoes. OpenWithParm also stores a parameter in the system's Message object so that it is\naccessible to the opened window.\nTable 2.1045:\nTo\nUse\nOpen an instance of a particular window datatype\nSyntax 1\nAllow the application to select the window's datatype when the script is\nexecuted\nSyntax 2\n2.4.554.1 Syntax 1: For windows of a known datatype\nDescription\nOpens a window object of a known datatype. OpenWithParm displays the window and makes\nall its properties and controls available to scripts. It also stores a parameter in the system's\nMessage object.\nApplies to\nWindow objects\nSyntax\n"}
{"page": 1169, "text": "Statements, Events, and Functions\nPage 1169\nOpenWithParm ( windowvar, parameter {, parent } )\nTable 2.1046:\nArgument\nDescription\nwindowvar\nThe name of the window you want to display. You can specify a window\nobject defined in the Window painter (which is a window datatype)\nor a variable of the desired window datatype. OpenWithParm places a\nreference to the open window in windowvar.\nparameter\nThe parameter you want to store in the Message object when the window\nis opened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Numeric\n\u2022 PowerObject\nparent (child and\npop-up windows\nonly) (optional)\nThe window you want make the parent of the child or pop-up window\nyou are opening. If you open a child or pop-up window and omit parent,\nPowerBuilder associates the window being opened with the currently\nactive window.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenWithParm returns null.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenWithParm, your scripts for the opened window would\ncheck one of the following properties.\nTable 2.1047:\nMessage object\nproperty\nArgument datatype\nMessage.DoubleParm\nNumeric\nMessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nMessage.StringParmString\nIn the opened window, it is a good idea to access the value passed in the Message object\nimmediately because some other script may use the Message object for another purpose.\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you will get a null object\nreference, which causes an error. For example, if you pass the name of a control on\n"}
{"page": 1170, "text": "Statements, Events, and Functions\nPage 1170\na window that is being closed, that control will not exist when a script accesses the\nparameter.\nPassing several values as a structure\nTo pass several values, create a user-defined structure to hold the values and access\nthe PowerObjectParm property of the Message object in the opened window. The\nstructure is passed by value, not by reference, so you can access the information even\nif the original structure has been destroyed.\nSee also the usage notes for Open, all of which apply to OpenWithParm.\nExamples\nThis statement opens an instance of a window named w_employee and stores the string\nparameter in Message.StringParm. The script for the window's Open event uses the string\nparameter as the text of a StaticText control st_empname. The script that opens the window\nhas the following statement:\nOpenWithParm(w_employee, \"James Newton\")\nThe window's Open event script has the following statement:\nst_empname.Text = Message.StringParm\nThe following statements open an instance of a window of the type w_employee. Since the\nparameter is a number it is stored in Message.DoubleParm:\nw_employee w_to_open\ninteger age = 50\nOpenWithParm(w_to_open, age)\nThe following statement opens an instance of a child window named cw_data and makes\nw_employee the parent. The window w_employee must already be open. The parameter\nbenefit_plan is a string and is stored in Message.StringParm:\nOpenWithParm(cw_data, \"benefit_plan\", w_employee)\nSee also\nCloseWithReturn\nOpen\n2.4.554.2 Syntax 2: For windows of unknown datatype\nDescription\nOpens a window object when you do not know its datatype until the application is running.\nOpenWithParm displays the window and makes all its properties and controls available to\nscripts. It also stores a parameter in the system's Message object.\nApplies to\nWindow objects\nSyntax\n"}
{"page": 1171, "text": "Statements, Events, and Functions\nPage 1171\nOpenWithParm ( windowvar, parameter, windowtype {, parent } )\nTable 2.1048:\nArgument\nDescription\nwindowvar\nA window variable, usually of datatype window. OpenWithParm places a\nreference to the open window in windowvar.\nparameter\nThe parameter you want to store in the Message object when the window\nis opened. Parameter must have one of these datatypes:\n\u2022 String\n\u2022 Numeric\n\u2022 PowerObject\nwindowtype\nA string whose value is the datatype of the window you want to open.\nThe datatype of windowtype must be the same or a descendant of\nwindowvar.\nparent (child and\npop-up windows\nonly)\nThe window you want to make the parent of the child or pop-up window\nyou are opening. If you open a child or pop-up window and omit parent,\nPowerBuilder associates the window being opened with the currently\nactive window.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOpenWithParm returns null.\nUsage\nThe system Message object has three properties for storing data. Depending on the datatype\nof the parameter specified for OpenWithParm, your scripts for the opened window would\ncheck one of the following properties.\nTable 2.1049:\nMessage object\nproperty\nArgument datatype\nMessage.DoubleParm\nNumeric\nMessage.PowerObjectParm\nPowerObject (PowerBuilder objects, including user-defined structures)\nMessage.StringParmString\nIn the opened window, it is a good idea to access the value passed in the Message object\nimmediately because some other script may use the Message object for another purpose.\nAvoiding null object references\nWhen you pass a PowerObject as a parameter, you are passing a reference to the\nobject. The object must exist when you refer to it later or you will get a null object\n"}
{"page": 1172, "text": "Statements, Events, and Functions\nPage 1172\nreference, which causes an error. For example, if you pass the name of a control on\na window that is being closed, that control will not exist when a script accesses the\nparameter.\nPassing several values as a structure\nTo pass several values, create a user-defined structure to hold the values and access\nthe PowerObjectParm property of the Message object in the opened window. The\nstructure is passed by value, not by reference, so you can access the information even\nif the original structure has been destroyed.\nSee also the usage notes for Open, all of which apply to OpenWithParm.\nExamples\nThese statements open a window of the type specified in the string s_w_name and store the\nreference to the window in the variable w_to_open. The script gets the value of s_w_name,\nthe type of window to open, from the database. The parameter in e_location is text, so it is\nstored in Message.StringParm:\nwindow w_to_open\nstring s_w_name, e_location\n \ne_location = sle_location.Text\n \nSELECT next_window INTO :s_w_name\nFROM routing_table\nWHERE ... ;\n \nOpenWithParm(w_to_open, e_location, s_w_name)\nThe following statements open a window of the type specified in the string c_w_name, store\nthe reference to the window in the variable wc_to_open, and make w_emp the parent window\nof wc_to_open. The parameter is numeric, so it is stored in Message.DoubleParm:\nwindow wc_to_open\nstring c_w_name\ninteger age = 60\n \nc_w_name = \"w_c_emp1\"\n \nOpenWithParm(wc_to_open, age, c_w_name, w_emp)\nSee also\nCloseWithReturn\nOpen\n2.4.555 OutgoingCallList\nDescription\nProvides a list of the calls to other routines included in a performance analysis model.\nApplies to\nProfileLine and ProfileRoutine objects\n"}
{"page": 1173, "text": "Statements, Events, and Functions\nPage 1173\nSyntax\ninstancename.OutgoingCallList ( list, aggregate )\nTable 2.1050:\nArgument\nDescription\ninstancename\nInstance name of the ProfileLine or ProfileRoutine object.\nlist\nAn unbounded array variable of datatype ProfileCall in which\nOutgoingCallList stores a ProfileCall object for each call to other routines\nfrom within this routine. This argument is passed by reference.\naggregate\n(ProfileRoutine\nonly)\nA boolean indicating whether duplicate routine calls will result in the\ncreation of a single or of multiple ProfileCall objects.\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- The model does not exist\nUsage\nYou use the OutgoingCallList function to extract a list of the calls from a line and/or routine\nto other routines in a performance analysis model. You must have previously created the\nperformance analysis model from a trace file using the BuildModel function. Each caller\nis defined as a ProfileCall object and provides the called routine and the calling routine,\nthe number of times the call was made, and the elapsed time. The routines are listed in no\nparticular order.\nThe aggregate argument indicates whether duplicate routine calls result in the creation of a\nsingle or of multiple ProfileCall objects. This argument has no effect unless line tracing is\nenabled and a calling routine calls the current routine from more than one line. If aggregate\nis true, a new ProfileCall object is created that aggregates all calls from the calling routine\nto the current routine. If aggregate is false, multiple ProfileCall objects are returned, one for\neach line from which the calling routine called the called routine.\nExamples\nThis example gets a list of the routines included in a performance analysis model and then\ngets a list of the routines called by each routine:\nLong ll_cnt\nProfileCall lproc_call[]\n \nlpro_model.BuildModel()\nlpro_model.RoutineList(iprort_list)\n \nFOR ll_cnt = 1 TO UpperBound(iprort_list)\n      iprort_list[ll_cnt].OutgoingCallList(lproc_call, & \n         TRUE)\n"}
{"page": 1174, "text": "Statements, Events, and Functions\nPage 1174\n      ...\nNEXT\nSee also\nBuildModel\nIncomingCallList\n2.4.556 PageCount\nDescription\nReturns the total number of pages in the document in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.PageCount ( )\nTable 2.1051:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want the page count\nReturn value\nInteger. Returns the number of pages in the RichTextEdit control. Returns 1 if the control\ncontains no text and -1 if an error occurs.\nUsage\nThe number of pages in the document is determined by the amount of text and the layout\nspecifications, such as page size, margins, font size, and so on.\nWhen the RichTextEdit control shares data with a DataWindow, there is an instance of the\ndocument for each row of the DataWindow. PageCount reports the page count of a single\ninstance. Multiply the value of the DataWindow's RowCount function by the page count to\nget the total number of pages.\nExamples\nThis example displays the number of pages in the document in the RichTextEdit rte_1 as the\ntext of the StaticText st_status:\nst_status.Text = String(rte_1.PageCount())\nSee also\nLineCount\nLineLength\nRowCount method for DataWindows in Section 2.4.110, \u201cRowCount\u201d in DataWindow\nReference.\n"}
{"page": 1175, "text": "Statements, Events, and Functions\nPage 1175\n2.4.557 PageCreated\nDescription\nReports whether a tab page has been created.\nApplies to\nUser objects used as tab pages\nSyntax\nuserobject.PageCreated ( )\nTable 2.1052:\nArgument\nDescription\nuserobject\nThe name of the tab page whose existence you want to test\nReturn value\nBoolean. Returns true if the user object is a tab page and has been created and false if the user\nobject is not a tab page or has not been created.\nUsage\nA window will open more quickly if the creation of graphical representations is delayed for\ntab pages with many controls. However, scripts cannot refer to a control on a tab page until\nthe tab page's Constructor event has run and a graphical representation of the control has been\ncreated. When the CreateOnDemand property of the Tab control is selected, scripts cannot\nreference controls on tab pages that the user has not viewed. PageCreated allows you to test\nwhether a particular tab page has already been created.\nExamples\nThis example tests whether tabpage_2 has been created and, if not, creates it:\nIF tab_1.CreateOnDemand = True THEN\n   IF tab_1.tabpage_2.PageCreated() = False THEN\n      tab_1.tabpage_2.CreatePage()\n   END IF\nEND IF\nSee also\nCreatePage\n2.4.558 ParentWindow\nDescription\nObtains the parent window of a window.\nApplies to\nWindow objects\nSyntax\nwindowname.ParentWindow ( )\n"}
{"page": 1176, "text": "Statements, Events, and Functions\nPage 1176\nTable 2.1053:\nArgument\nDescription\nwindowname\nThe name of a window for which you want to obtain the parent object\nReturn value\nWindow. Returns the parent of windowname. Returns a null object reference if an error\noccurs or if windowname is null.\nUsage\nThe ParentWindow function, along with the pronoun Parent, allows you to write more\ngeneral scripts by avoiding the coding of actual window names. Parent refers to the window\nthat contains the current object or control -- the local environment. ParentWindow returns the\nparent window of a specified window.\nWhether a window has a parent depends on its type and how it was opened. You can specify\nthe parent when you open the window. For windows that always have parents, PowerBuilder\nchooses the parent if you do not specify it. Response windows and child windows always\nhave a parent window. The parent of a sheet in an MDI application is the MDI frame\nwindow.\nPop-up windows have a parent window when they are opened from another window but\nwhen used in an MDI application, the parent of the pop-up is the MDI frame. A pop-up\nwindow opened from the application's Open event does not have a parent.\nThe ParentWindow property of the Menu object can be used like a pronoun in Menu scripts.\nIt identifies the window with which the menu is associated when your program is running.\nFor more information, see Section 4.6.6.3, \u201cReferring to objects in your application\u201d in Users\nGuide.\nExamples\nThese statements return the parent of child_1. The parent is a window of the datatype Win1:\nWin1 w_parent\nw_parent = child_1.ParentWindow()\nThe following script for a Cancel button in a pop-up window triggers an event for the\nparent window of the button's parent window (the window that contains the button). Then\nit closes the button's window. The parent window of that window will have a script for the\ncancelrequested event:\nParent.ParentWindow().TriggerEvent(\"cancelrequested\")\nClose(Parent)\n2.4.559 Paste\nDescription\nInserts (pastes) the contents of the clipboard into the specified control. For editable controls,\ntext on the clipboard is pasted at the insertion point. For OLE controls, the OLE object on the\nclipboard replaces any object already in the control.\nApplies to\n"}
{"page": 1177, "text": "Statements, Events, and Functions\nPage 1177\nEditMask, InkEdit, MultiLineEdit, SingleLineEdit, RichTextEdit, DropDownListBox,\nDropDownPictureListBox, DataWindow, OLE controls\nSyntax\ncontrolname.Paste ( )\nTable 2.1054:\nArgument\nDescription\ncontrolname\nThe name of the DataWindow control, EditMask, InkEdit,\nMultiLineEdit, SingleLineEdit, RichTextEdit, DropDownListBox,\nDropDownPictureListBox, or OLE control into which you want to insert\nthe contents of the clipboard.\nIf controlname is a DataWindow, text is pasted into the edit control over\nthe current row and column. If controlname is a DropDownListBox or\nDropDownPictureListBox, the AllowEdit property must be true\nReturn value\nInteger for DataWindow, InkEdit, and list boxes, Long for other controls.\nFor edit controls, returns the number of characters that were pasted into controlname. If\nnothing has been cut or copied (the clipboard is empty), the Paste function does not change\nthe contents of the edit control and returns 0. If the clipboard contains nontext data (for\nexample, a bitmap or OLE object) and the control cannot accept that data, Paste does not\nchange the contents and returns 0.\nFor OLE controls, returns 0 if it succeeds and one of the following negative values if an error\noccurs:\n-1 -- No data or clipboard content is not embeddable\n-9 -- Other error\nUsage\nFor editable controls, if text is selected in controlname, Paste replaces the text with the\ncontents of the clipboard. If the clipboard contains more lines than fit in the edit control, only\nthe number of lines that fit are pasted.\nIn a DataWindow control, the text is pasted into the edit control over the current row and\ncolumn. If the clipboard contains more text that is allowed for that column, the text is\ntruncated. If the clipboard text does not match the column's datatype, all the text is truncated,\nso that any selected text is replaced with an empty string.\nYou can paste bitmaps, as well as text, into a RichTextEdit control.\nTo insert a specific string in controlname or to replace selected text with a specific string, use\nthe ReplaceText function.\nWhen you use Paste to put an OLE object in an OLE control, the data is embedded in the\nPowerBuilder application, not linked.\nExamples\n"}
{"page": 1178, "text": "Statements, Events, and Functions\nPage 1178\nIf the clipboard contains Proposal good for 90 days and no text is selected, this statement\npastes Proposal good for 90 days in mle_Comment1 at the insertion point and returns 25:\nmle_Comment1.Paste()\nIf the clipboard contains the string Final Edition, mle_Comment2 contains This is a\nPreliminary Draft, and the text in mle_Comment2 is selected, this statement deletes This is a\nPreliminary Draft, replaces it with Final Edition, and returns 13:\nmle_Comment2.Paste()\nIf the clipboard contains an OLE object, this statement makes it the contents of the control\nole_1 and returns 0:\nole_1.Paste()\nSee also\nCopy\nCut\nPasteLink\nPasteSpecial\nReplaceText\n2.4.560 PasteLink\nDescription\nPastes a link to the contents of the clipboard into the control. The server application for the\nobject on the clipboard must be running.\nApplies to\nOLE controls\nSyntax\nolecontrol.PasteLink ( )\nTable 2.1055:\nArgument\nDescription\nolecontrol\nThe name of the OLE control into which you want to paste the object on\nthe clipboard\nReturn value\nInteger. Returns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- No data or the contents of the clipboard is not linkable\n-9 -- Other error\nIf ole2control is null, PasteLink returns null.\nUsage\n"}
{"page": 1179, "text": "Statements, Events, and Functions\nPage 1179\nWhen you copy data to the clipboard from an application that supports OLE (the server\napplication), you can paste the object into PowerBuilder's OLE control with a link to the\noriginal data. Object information about the source of the data is only available if the server\napplication is running. You do not need to worry about running the server application if\nyou are working with an OLE object that PowerBuilder knows about, such as an object in a\nPowerBuilder library or an object that is part of a control's definition in a window. For these\nobjects, PowerBuilder runs the server application in the background to enable the link.\nPasteLink fails, however, if the user switches to a server application, copies the data, quits the\napplication, and then tries to paste and link the object in their PowerBuilder application.\nExamples\nIf the clipboard contains an OLE object and the object's server application is running, then\nthe following example pastes the object in the control ole_1 and sets li_result to 0:\ninteger li_result\nli_result = ole_1.PasteLink()\nSee also\nLinkTo\nPaste\nPasteSpecial\n2.4.561 PasteRTF\nDescription\nPastes rich text data from a string into a DataWindow control, DataStore object, or\nRichTextEdit control.\nApplies to\nDataWindow controls, DataStore objects, and RichTextEdit controls\nSyntax\nrtename.PasteRTF ( richtextstring {, band } )\nTable 2.1056:\nArgument\nDescription\nrtename\nThe name of the DataWindow control, DataStore object, or RichTextEdit\ncontrol into which you want to paste data in rich text format. The\nDataWindow object in the DataWindow control or DataStore must be a\nRichTextEdit DataWindow.\nrichtextstring\nA string whose value is data with rich text formatting.\nband\n(optional)\nA value of the Band enumerated datatype specifying the band into which\nthe rich text data is pasted. Values are:\n\u2022 Detail! -- The data is pasted into the detail band\n\u2022 Header! -- The data is pasted into the header band\n"}
{"page": 1180, "text": "Statements, Events, and Functions\nPage 1180\nArgument\nDescription\n\u2022 Footer! -- The data is pasted into the footer band\nThe default is the band that contains the insertion point.\nReturn value\nLong. Returns -1 if an error occurs. If richtextstring is null, PasteRTF returns null.\nUsage\nA DataWindow in the RichText presentation style has only three bands. There are no\nsummary or trailer bands and there are no group headers and footers.\nExamples\nThis statement pastes rich text in the string ls_richtext into the header of the RichTextEdit\nrte_message:\nstring ls_richtext\nrte_message.PasteRTF(ls_richtext, Header!)\nSee also\nCopyRTF\n2.4.562 PasteSpecial\nDescription\nDisplays a standard OLE dialog allowing the user to choose whether to embed or link the\nOLE object on the clipboard when pasting it in the specified control. Embedding is the\nequivalent of calling the Paste function, and linking is the same as calling PasteLink.\nApplies to\nOLE controls\nSyntax\nolecontrol.PasteSpecial ( )\nTable 2.1057:\nArgument\nDescription\nolecontrol\nThe name of the OLE control into which you want to paste the object on\nthe clipboard\nReturn value\nInteger. Returns 0 if it succeeds and one of the following values if an error occurs:\n1 -- User canceled without selecting a paste option\n-1 -- No data found\n-9 -- Other error\n"}
{"page": 1181, "text": "Statements, Events, and Functions\nPage 1181\nIf ole2control is null, PasteSpecial returns null.\nUsage\nFor information about when an object on the clipboard is linkable, see PasteLink.\nExamples\nIf the clipboard contains an OLE object and the object's server application is running, then\nthe following example lets the user choose to embed or link the object in the control ole_1:\ninteger li_result\nli_result = ole_1.PasteSpecial()\nSee also\nLinkTo\nPaste\nPasteLink\n2.4.563 PauseDownload\nDescription\nSuspends the download progress of the file.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.PauseDownload ( integer ItemId )\nTable 2.1058:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nItemId\nThe ID used to identify the file. The minimum value is 1.\nItemId should be the return value of DownloadingStart or\nDownloadingStateChanged event.\nReturn value\nInteger.\n\u2022 1 -- Success.\n\u2022 -2 -- Failed to get the browser instance.\n\u2022 -6 -- The specified download task does not exist.\nExamples\nInteger li_rtn, li_itemid\nli_rtn = wb_1.pausedownload(li_itemid)\n"}
{"page": 1182, "text": "Statements, Events, and Functions\nPage 1182\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\nPrintAsPDF\nRefresh\nRegisterEvent\nResumeDownload\nStopNavigation\nUnregisterEvent\nZoom\n2.4.564 PBAddCookie (Obsolete)\nDescription\nAdds a cookie to the Web service proxy object that will be sent to the server each time you\ncall a Web service method.\nSyntax\nproxyObj.PBAddCookie ( acookie )\nTable 2.1059:\nArgument\nDescription\nproxyObj\nThe proxy object that you deploy from a Web Service Proxy project\nacookie\nAn any containing information about the cookie you want to add\nReturn value\nNone.\nUsage\nIf there is already a cookie with the same name and URI that you set in the acookie argument,\nyou will replace the existing cookie when you invoke a Web service method. For the types of\ninformation you can include in the acookie argument, see the methods of the SoapPBCookie\nclass in SoapPBCookie.\nThe SoapPBCookie class is defined in the pbwsclient.pbx extension that you can import into\nyour application library. It is valid for .NET Web services engine only.\n"}
{"page": 1183, "text": "Statements, Events, and Functions\nPage 1183\nExamples\nThe following example adds a cookie named myCookie that is sent to the server after you\nconnect to a Web service from an objProxy proxy client:\nSoapPBCookie acookie\nacookie=create SoapPBCookie\n \nacookie.SetUri(\"http://myServer/webservice/Svc1.wsdl\")\nacookie.SetName(\"myCookie\")\nacookie.SetValue(\"My Value\")\nobjProxy.PBAddCookie(acookie)\nSee also\nPBGetCookies\n2.4.565 PBGetCookies (Obsolete)\nDescription\nGets the cookies associated with a .NET Web service that you invoke from a proxy object.\nSyntax\nproxyObj.PBGetCookies ( URI )\nTable 2.1060:\nArgument\nDescription\nproxyObj\nThe proxy object that you deploy from a Web Service Proxy project\nURI\nThe URI of the Web service that you invoke with the proxy object\nReturn value\nSoapPBCookie[ ]\n. An array of an instance of the SoapPBCookie class.\nUsage\nThe SoapPBCookie class is defined in the pbwsclient.pbx extension that you can import into\nyour application library. You must first connect to the Web service with an instance of the\nSoapConnection class that is also defined in this extension.\nFor more information about connecting to a Web service, see Section 7.2, \u201cBuilding a Web\nServices Client (Obsolete)\u201d in Application Techniques. For cookie properties you can set or\nreturn with the SoapPBCookie class, see SoapPBCookie.\nExamples\nThe following example enters the names and values of the cookies associated with a Web\nservice in a MultiLineEdit control:\nwsproxy_service proxy\nsoapPBCookie retu_cookies[]\n//create instance of a SoapConnection object\n//create instance of the Web service proxy\nendpoint = \"https://www.appeon.com/webservice/Svc.asmx\"\n"}
{"page": 1184, "text": "Statements, Events, and Functions\nPage 1184\nretu_cookies = proxy.pbgetcookies(endpoint)\nmle_1.text = string(upperbound(retu_cookies))&\n   +\" total cookies\" + \"~r~n\"\nfor i= 1 to upperbound(retu_cookies)\n   mle_1.text += \"Cookie\"+ string(i)& \n      +\"~r~n=====================~r~n\"   \n   mle_1.text +=\"getName = \" &\n      + retu_cookies[i].getname() +\"~r~n\"\n   mle_1.text +=\"getValue = \" &\n      + retu_cookies[i].getvalue()+\"~r~n\"\nnext   \nSee also\nPBAddCookie\n2.4.566 PBGetMenuString\nDescription\nGets the name of the item at a given position in a menu.\nSyntax\nPBGetMenuString ( hmenu, nPos, caption, nMaxLength)\nTable 2.1061:\nArgument\nDescription\nhmenu\nA long for the menu handle\nnPos\nAn integer for the position of the menu item, counting from 0 at the\nleftmost or topmost position\ncaption\nA string passed by reference that captures the name (Text property) of the\nmenu item\nnMaxLength\nAn integer that sets the maximum length of the value passed in the\ncaption argument\nReturn value\nLong. Returns 1if it succeeds and -1 if an error occurs. If any argument is null,\nPBGetMenuString returns null.\nUsage\nUse PBGetMenuString to get the name of a menu item. This function is useful for some\nautomated testing programs that cannot get menu item names from the Text property for\nmenus that use the contemporary style.\nExamples\nThis statement gets the first menu item of the submenu of the w_main window using the\nGetMenu and GetSubMenu WIN32 API functions from the user.dll library:\nstring ls_menu \nlong hmenu\nlong submenu\nint ll_ret\n"}
{"page": 1185, "text": "Statements, Events, and Functions\nPage 1185\nhmenu = GetMenu(handle(w_main))\nsubmenu = GetSubMenu(hmenu,0)\nll_ret = PBGetMenuString(submenu,0,ls_menu,5)\nmessagebox (\"Menu Test\", \"return value = &   \"+string(ll_ret)+ \" menu caption is\n \"+ls_menu)\nThis example assumes you have made the following Local External Functions declarations:\nfunction long GetMenu ( long hwnd) library  \"user32.dll\"\nfunction long GetSubMenu ( long hparent,int pos) &\n      library  \"user32.dll\"\n2.4.567 Pi\nDescription\nMultiplies pi by a specified number.\nSyntax\nPi ( n )\nTable 2.1062:\nArgument\nDescription\nn\nThe number you want to multiply by pi (3.14159265358979323...)\nReturn value\nDouble. Returns the result of multiplying n by pi if it succeeds and -1 if an error occurs. If n\nis null, Pi returns null.\nUsage\nUse Pi to convert angles to and from radians.\nExamples\nThis statement returns pi:\nPi(1)\nBoth these statements return the area of a circle with the radius id_Rad, an instance variable\nof type double:\nPi(1) * id_Rad^2\n \nPi(id_Rad^2)\nThe following statements compute the cosine of a 45-degree angle:\nreal degree = 45.0, cosine\ncosine = Cos(degree * (Pi(2)/360))\nSee also\nCos\nSin\n"}
{"page": 1186, "text": "Statements, Events, and Functions\nPage 1186\nTan\nPi method for DataWindows in Section 2.4.92, \u201cPi\u201d in DataWindow Reference.\n2.4.568 PixelsToUnits\nDescription\nConverts pixels to PowerBuilder units. Because pixels are not usually square, you also\nspecify whether you are converting the pixels' horizontal or vertical measurement.\nSyntax\nPixelsToUnits ( pixels, type )\nTable 2.1063:\nArgument\nDescription\npixels\nAn integer or long whose value is the number of pixels you want to\nconvert to PowerBuilder units.\ntype\nA value of the ConvertType enumerated datatype value indicating how to\nconvert the value:\n\u2022 XPixelsToUnits! -- Convert the pixels in the horizontal direction.\n\u2022 YPixelsToUnits! -- Convert the pixels in the vertical direction.\nReturn value\nInteger or long. Returns the converted value if it succeeds and -1 if an error occurs. If any\nargument's value is null, PixelsToUnits returns null.\nIf the value of the first argument is an integer type, then the return value is an integer type; if\nthe value of the first argument is a long type, then the return value is a long type; if the value\nof the first argument is a numeric value, then the return value is a long type by default.\nExamples\nThese statements convert 35 horizontal pixels to PowerBuilder units and set the variable\nValue equal to the converted value:\nlong Value\nValue = PixelsToUnits(35, XPixelsToUnits!)\nSee also\nUnitsToPixels\n2.4.569 Play\nDescription\nStarts playing an animation (an AVI clip).\nApplies to\nAnimation controls\n"}
{"page": 1187, "text": "Statements, Events, and Functions\nPage 1187\nSyntax\nanimationname.Play ( from, to, replay )\nTable 2.1064:\nArgument\nDescription\nanimationname\nThe name of the animation control displaying the AVI clip.\nfrom\nA long value in the range 0 to 65,535 indicating the frame where playing\nstarts.The value 0 starts playing the clip at the first frame.\nto\nA long value in the range -1 to 65,535 indicating the frame where playing\nends. The value -1 stops playing the clip at the last frame.\nreplay\nA long value in the range -1 to 65,535 indicating the number of times to\nreplay the clip. The value -1 continues playing the clip indefinitely.\nReturn value\nInteger. Returns 1 for success and -1 for failure.\nUsage\nStart plays an opened AVI file in an animation control. If you specify a value for any\nargument that is not in the specified range, Start does nothing and returns -1.\nExamples\nThis example starts playing an AVI clip at the first frame, plays to the last frame, and\ncontinues playing the clip indefinitely:\ninteger li_return\nli_return = am_1.Play(0, -1, -1)\nSee also\nStop\n2.4.570 PointerX\nDescription\nDetermines the distance of the pointer from the left edge of the specified object.\nApplies to\nAny object or control\nSyntax\nobjectname.PointerX ( )\nTable 2.1065:\nArgument\nDescription\nobjectname\nThe name of the control or window for which you want the pointer's\ndistance from the left edge. If you do not specify objectname, PointerX\nreports the distance from the left edge of the current sheet or window.\n"}
{"page": 1188, "text": "Statements, Events, and Functions\nPage 1188\nReturn value\nInteger. Returns the pointer's distance from the left edge of objectname in PowerBuilder units\nif it succeeds and -1 if an error occurs.\nExamples\nIn a script for a control in a window, the following example stores the distance of the pointer\nfrom the edge of the window in the variable li_dist. If the pointer is 5 units from the left edge\nof the window, li_dist equals 5:\ninteger li_dist\nli_dist = Parent.PointerX()\nThis statement in a control's RButtonDown script displays a pop-up menu m_Appl.M_Help\nat the cursor position:\nm_Appl.m_Help.PopMenu(Parent.PointerX(), &\n   Parent.PointerY())\nIf the previous example was part of the window's RButtonDown script, instead of a control in\nthe window, the following statement displays the pop-up menu at the cursor position:\nm_Appl.m_Help.PopMenu(This.PointerX(), &\n   This.PointerY())\nSee also\nPointerY\nPopMenu\nWorkSpaceHeight\nWorkSpaceWidth\nWorkSpaceX\nWorkSpaceY\n2.4.571 PointerY\nDescription\nDetermines the distance of the pointer from the top of the specified object.\nApplies to\nAny object or control\nSyntax\nobjectname.PointerY ( )\nTable 2.1066:\nArgument\nDescription\nobjectname\nThe name of the control or window for which you want the pointer's\ndistance from the top. If you do not specify objectname, PointerY reports\nthe distance from the top of the current sheet or window.\n"}
{"page": 1189, "text": "Statements, Events, and Functions\nPage 1189\nReturn value\nInteger. Returns the pointer's distance from the top of objectname in PowerBuilder units if it\nsucceeds and -1 if an error occurs. If objectname is null, PointerY returns null.\nExamples\nIn a script for a control in a window, the following example stores the distance of the pointer\nfrom the top of the window in the variable li_dist. If the pointer is 10 units from the top of the\nwindow, li_dist equals 10:\ninteger li_Dist\nli_Dist = Parent.PointerY()\nThis statement in a control's RButtonDown script displays a pop-up menu m_Appl.M_Help\nat the cursor position:\nm_Appl.M_Help.PopMenu(Parent.PointerX(), &\n   Parent.PointerY())\nSee also\nPointerX\nPopMenu\nWorkSpaceHeight\nWorkSpaceWidth\nWorkSpaceX\nWorkSpaceY\n2.4.572 PopMenu\nDescription\nDisplays a menu at the specified location.\nApplies to\nMenu objects\nSyntax\nmenuname.PopMenu ( xlocation, ylocation )\nTable 2.1067:\nArgument\nDescription\nmenuname\nThe fully qualified name of a menu on a menu bar you want to display at\nthe specified location\nxlocation\nThe distance in PowerBuilder units of the displayed menu from the left\nedge of the window\nylocation\nThe distance in PowerBuilder units of the displayed menu from the top of\nthe window\n"}
{"page": 1190, "text": "Statements, Events, and Functions\nPage 1190\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPopMenu returns null.\nUsage\nIf the menu object is not associated with the window so that it was opened when the\nwindow was opened, you must use CREATE to allocated memory for the menu (see the last\nexample).\nIf the Visible property of the menu is false, you must make the menu visible before you can\ndisplay it as a pop-up menu.\nThe coordinates you specify for PopMenu are relative to the active window. In an MDI\napplication, the coordinates are relative to the frame window, which is the active window.\nTo display a menu at the cursor position, call PointerX and PointerY for the active window\n(the frame window in an MDI application) to get the coordinates of the cursor. (See the\nexamples.)\nCalling PopMenu in an object script\nPopMenu must be called in an object script. It should not be called in a global\nfunction.\nExamples\nThese statements display the menu m_Emp.M_Procedures at location 100, 200 in the active\nwindow. M_Emp is the menu associated with the window:\nm_Emp.M_Procedures.PopMenu(100, 200)\nThis statement displays the menu m_Appl.M_File at the cursor position, where m_Appl is the\nmenu associated with the window.\nm_Appl.M_file.PopMenu(PointerX(), PointerY())\nThese statements display a pop-up menu at the cursor position. Menu4 was created in the\nMenu painter and includes a menu called m_language. Menu4 is not the menu for the active\nwindow. NewMenu is an instance of Menu4 (datatype Menu4):\nMenu4 NewMenu\nNewMenu = CREATE Menu4\nNewMenu.m_language.PopMenu(PointerX(), PointerY())\nIn an MDI application, the last line would include the MDI frame as the object for the pointer\nfunctions:\nNewMenu.m_language.PopMenu( &\n   w_frame.PointerX(), w_frame.PointerY())\n2.4.573 PopulateError\nDescription\nFills in the Error object without causing a SystemError event.\nSyntax\n"}
{"page": 1191, "text": "Statements, Events, and Functions\nPage 1191\nPopulateError ( number, text )\nTable 2.1068:\nArgument\nDescription\nnumber\nThe integer to be stored in the number property of the Error object\ntext\nThe string to be stored in text property of the Error object\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. The return value is usually not used.\nUsage\nIf the values you want to populate the Error object with depend on the current value of\na variable in your script, you can use PopulateError to assign values to the number and\ntext fields in the Error object (the remaining fields of the Error object will be populated\nautomatically, including the line number of the error). Then you can call SignalError without\narguments to trigger a SystemError. You will need to include code in the SystemError\nevent script to recognize and handle the error you have created. If there is no script for the\nSystemError event, the SignalError function does nothing.\nExamples\nThe gf_DoSomething function takes a table name and a record and returns 0 for success and\na negative number for an error. The following statements set the number and text values in\nthe Error object according to a script variable, then trigger a SystemError event once the\nprocessing is complete:\nli_result = gf_DoSomething(\"Company\", record_id)\n \nIF (li_result < 0) THEN\n   CHOOSE CASE li_result\n   CASE -1 \n      PopulateError(1, \"No company record exists & \n      record id: \" + record_id)\n   CASE -2 \n      PopulateError(2, \"That company record is & \n      currently locked. Please try again later.\")\n   CASE -3 \n      PopulateError(3, \"The company record could & \n      not be updated.\")\n   CASE else \n      PopulateError(999, \"Update failed.\") \n   END CHOOSE \n   SignalError()\nEND IF\nSee also\nSignalError\n2.4.574 Pos\nDescription\nFinds one string within another string.\n"}
{"page": 1192, "text": "Statements, Events, and Functions\nPage 1192\nSyntax\nPos ( string1, string2 {, start } )\nTable 2.1069:\nArgument\nDescription\nstring1\nThe string in which you want to find string2.\nstring2\nThe string you want to find in string1.\nstart (optional)\nA long indicating where the search will begin in string1. The default is 1.\nReturn value\nLong. Returns a long whose value is the starting position of the first occurrence of string2 in\nstring1 after the position specified in start. If string2 is not found in string1 or if start is not\nwithin string1, Pos returns 0. If any argument's value is null, Pos returns null.\nUsage\nThe Pos function is case sensitive.\nExamples\nThis statement returns 6:\nPos(\"BABE RUTH\", \"RU\")\nThis statement returns 1:\nPos(\"BABE RUTH\", \"B\")\nThis statement returns 0, because the case does not match:\nPos(\"BABE RUTH\", \"be\") \nThis statement starts searching at position 4 and returns 0, because position 4 is after the\noccurrence of BE:\nPos(\"BABE RUTH\", \"BE\", 4 )\nThese statements change the text NY in the SingleLineEdit sle_group to North East:\nlong place_nbr\nplace_nbr = Pos(sle_group.Text, \"NY\")\nsle_group.SelectText(place_nbr, 2)\nsle_group.ReplaceText(\"North East\")\nThese statements separate the return value of GetBandAtPointer into the band name and row\nnumber. The Pos function finds the position of the tab in the string and the Left and Mid\nfunctions extract the information to the left and right of the tab:\nstring s, ls_left, ls_right\ninteger li_tab\n \ns = dw_groups.GetBandAtPointer()\nli_tab = Pos(s, \"~t\", 1)\n \nls_left = Left(s, li_tab - 1)\n"}
{"page": 1193, "text": "Statements, Events, and Functions\nPage 1193\nls_right = Mid(s, li_tab + 1)\nYou could write similar code for a generic parsing function with three arguments. The string\ns would be an argument passed by value and ls_left and ls_right would be strings passed by\nreference.\nOther functions that return a pair of tab-separated values for which you could use the parsing\nfunction are GetObjectAtPointer and GetValue.\nSee also\nGetValue method for DataWindows in Section 9.92, \u201cGetValue\u201d in DataWindow Reference.\nGetObjectAtPointer method for DataWindows in Section 9.74, \u201cGetObjectAtPointer\u201d in\nDataWindow Reference.\nLastPos\nLeft\nMid\nRight\nPos method for DataWindows in Section 2.4.93, \u201cPos\u201d in DataWindow Reference.\n2.4.575 PosA\nDescription\nTemporarily converts a string from Unicode to DBCS based on the current locale, then finds\none string within another string.\nSyntax\nPosA (string1, string2 {, start})\nTable 2.1070:\nArgument\nDescription\nstring1\nThe string in which you want to find string2.\nstring2\nThe string you want to find in string1.\nstart (optional)\nA long indicating the position in string1 where the search will begin.\nThe position is indicated by the number of bytes you specify for this\nargument. The default is 1.\nReturn value\nLong. Returns a long whose value is the starting position of the first occurrence of string2 in\nstring1 after the position in bytes specified by start. If string2 is not found in string1 or if start\nis not within string1, PosA returns 0. If any argument's value is null, PosA returns null.\nUsage\nPosA replaces the functionality that Pos had in DBCS environments in PowerBuilder 9. In\nSBCS environments, Pos, PosW, and PosA return the same results.\n"}
{"page": 1194, "text": "Statements, Events, and Functions\nPage 1194\n2.4.576 PosW (obsolete)\nDescription\nFinds one string within another string.\nThis function is obsolete. It has the same behavior as Pos in all environments.\nSyntax\nPosW ( string1, string2 {, start } )\n2.4.577 Position\nReports the position of the insertion point in an editable control.\nTable 2.1071:\nTo report\nUse\nThe position of the insertion point in any editable control (except\nRichTextEdit)\nSyntax 1\nThe position of the insertion point or the start and end of selected\ntext in a RichTextEdit control or a DataWindow whose object has the\nRichTextEdit presentation style\nSyntax 2\n2.4.577.1 Syntax 1: For editable controls, except RichTextEdit\nDescription\nDetermines the position of the insertion point in an edit control.\nApplies to\nDataWindow, EditMask, InkEdit, MultiLineEdit, SingleLineEdit, or DropDownListBox,\nDropDownPictureListBox controls\nSyntax\neditname.Position ( )\nTable 2.1072:\nArgument\nDescription\neditname\nThe name of the DataWindow control, EditMask, InkEdit, MultiLineEdit,\nSingleLineEdit, or DropDownListBox, or DropDownPictureListBox\ncontrol in which you want to find the location of the insertion point\nReturn value\nInteger for DataWindow, InkEdit, and list boxes, Long for other controls.\nReturns the location of the insertion point in editname if it succeeds and -1 if an error occurs.\nIf editname is null, Position returns null.\nUsage\n"}
{"page": 1195, "text": "Statements, Events, and Functions\nPage 1195\nPosition reports the position number of the character immediately following the insertion\npoint. For example, Position returns 1 if the cursor is at the beginning of editname. If text is\nselected in editname, Position reports the number of the first character of the selected text.\nIn a DataWindow control, Position reports the insertion point's position in the edit control\nover the current row and column.\nExamples\nIf mle_EmpAddress contains Boston Street, the cursor is immediately after the n in Boston,\nand no text is selected, this statement returns 7:\nmle_EmpAddress.Position()\nIf mle_EmpAddress contains Boston Street and Street is selected, this statement returns 8\n(the position of the S in Street):\nmle_EmpAddress.Position()\nSee also\nSelectedLine\nSelectedStart\n2.4.577.2 Syntax 2: For RichTextEdit controls\nDescription\nDetermines the line and column position of the insertion point or the start and end of selected\ntext in an RichTextEdit control.\nApplies to\nRichTextEdit and DataWindow controls\nSyntax\nrtename.Position ( fromline, fromchar {, toline, tochar } )\nTable 2.1073:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you\nwant to find the location of the insertion point or selected text. The\nDataWindow object in the DataWindow control must be a RichTextEdit\nDataWindow.\nfromline\nA long variable in which you want to save the number of the line where\nthe insertion point or the start of the selection is.\nfromchar\nA long variable in which you want to save the number in the line of the\nfirst character in the selection or after the insertion point.\ntoline (optional)\nA long variable in which you want to save the number of the line where\nthe selection ends.\ntochar (optional)\nA long variable in which you want to save the number in the line of the\ncharacter before which the selection ends.\n"}
{"page": 1196, "text": "Statements, Events, and Functions\nPage 1196\nReturn value\nBand enumerated datatype. Returns the band (Detail!, Header!, or Footer!) containing the\nselection or insertion point.\nUsage\nPosition reports the position of the insertion point if you omit the toline and tochar\narguments. If text is selected, the insertion point can be at the beginning or the end of the\nselection. For example, if the user dragged down to select text, the insertion point is at the\nend.\nIf there is a selection, a character argument can be set to 0 to indicate that the selection begins\nor ends at the start of a line, with nothing else selected on that line. When the user drags up,\nthe selection can begin at the start of a line and fromchar is set to 0. When the user drags\ndown, the selection can end at the beginning of a line and tochar is set to 0.\nSelection or insertion point\nTo find out whether there is a selection or just an insertion point, specify all four arguments.\nIf toline and tochar are set to 0, then there is no selection, only an insertion point. If there is a\nselection and you want the position of the insertion point, you will have to call Position again\nwith only two arguments. This difference is described next.\nThe position of the insertion point and end of selection can differ\nWhen reporting the position of selected text, the positions are inclusive -- Position reports the\nfirst line and character and the last line and character that are selected. When reporting the\nposition of the insertion point, Position identifies the character just after the insertion point.\nTherefore, if text is selected and the insertion point is at the end, the values for the insertion\npoint and the end of the selection differ.\nTo illustrate, suppose the first four characters in line 1 are selected and the insertion point is\nat the end. If you request the position of the insertion point:\nrte_1.Position(ll_line, ll_char)\nThen:\n\u2022 ll_line is set to 1\n\u2022 ll_char is set to 5, the character following the insertion point\nIf you request the position of the selection:\nrte_1.Position(ll_startline, ll_startchar, &\n   ll_endline, ll_endchar)\n\u2022 ll_startline and ll_startchar are both set to 1\n\u2022 ll_endline is 1 and ll_endchar is set to 4, the last character in the selection\nPassing values to SelectText\nBecause values obtained with Position provide more information that simply a selection\nrange, you cannot pass the values directly to SelectText. In particular, 0 is not a valid\ncharacter position when selecting text, although it is meaningful in describing the selection.\n"}
{"page": 1197, "text": "Statements, Events, and Functions\nPage 1197\nExamples\nThis example calls Position to get the band and the line and column values for the beginning\nand end of the selection. The values are converted to strings and displayed in the StaticText\nst_status:\ninteger li_rtn\nlong ll_startline, ll_startchar\nlong ll_endline, ll_endchar\nstring ls_s, ls_band\nband l_band\n \n// Get the band and start and end of the selection\nl_band = rte_1.Position(ll_startline, ll_startchar,&\n   ll_endline, ll_endchar)\n \n// Convert position values to strings\nls_s = \"Start line/char: \" + String(ll_startline) &\n   + \", \" + String(ll_startchar)\nls_s = ls_s + \" End line/char: \" &\n   + String(ll_endline) + \", \" + String(ll_endchar)\n \n// Convert Band datatype to string\nCHOOSE CASE l_band\nCASE Detail!\n   ls_band = \" Detail\"\nCASE Header!\n   ls_band = \" Header\"\nCASE Footer!\n   ls_band = \" Footer\"\nCASE ELSE\n   ls_band = \" No band\"\nEND CHOOSE\n   ls_s = ls_s + ls_band\n \n// Display the information\nst_status.Text = ls_s\nThis example extends the current selection down 1 line. It takes into account whether there is\nan insertion point or a selection, whether the insertion point is at the beginning or end of the\nselection, and whether the selection ends at the beginning of a line:\ninteger rtn\nlong l1, c1, l2, c2, linsert, cinsert\nlong l1select, c1select, l2select, c2select\n \n// Get selectio start and end\nrte_1.Position(l1, c1, l2, c2)\n \n// Get insertion point\nrte_1.Position(linsert, cinsert)\n \nIF l2 = 0 and c2 = 0 THEN //insertion point\n   l1select = linsert\n   c1select = cinsert\n   l2select = l1select + 1 // Add 1 to end line\n   c2select = c1select\n \nELSEIF l2 > l1 THEN // Selection, ins pt at end\n   IF c2 = 0 THEN // End of selection (ins pt)\n   // at beginning of a line (char 0)\n      c2 = 999 // Change to end of prev line\n      l2 = l2 - 1\n"}
{"page": 1198, "text": "Statements, Events, and Functions\nPage 1198\n   END IF\n \n   l1select = l1\n   c1select = c1\n   l2select = l2 + 1 // Add 1 to end line\n   c2select = c2\n \nELSEIF l2 < l1 THEN // selection, ins pt at start\n   IF c1 = 0 THEN // End of selection (not ins pt)\n   // at beginning of a line\n      c1 = 999 // Change to end of prev line\n      l1 = l1 - 1\n   END IF\n   l1select = l2\n   c1select = c2\n   l2select = l1 + 1 // Add 1 to end line\n   // (start of selection)\n   c2select = c1\n \nELSE // l1 = l2, selection on one line\n   l1select = l1\n   l2select = l2 + 1 // Add 1 to line\n   IF c1 < c2 THEN // ins pt at end\n      c1select = c1\n      c2select = c2\n   ELSE // c1 > c2, ins pt at start\n      c1select = c2\n      c2select = c1\n   END IF\nEND IF\n \n// Select the extended selection\nrtn = rte_1.SelectText( l1select, c1select, &\n   l2select, c2select )\nFor an example of selecting each word in a RichTextEdit control, see SelectTextWord.\nSee also\nSelectedLine\nSelectedStart\nSelectText\n2.4.578 Post\nDescription\nAdds a message to the message queue for a window, either a PowerBuilder window or\nwindow of another application.\nSyntax\nPost ( handle, message#, word, long )\nTable 2.1074:\nArgument\nDescription\nhandle\nA long whose value is the system handle of a window (that you have\ncreated in PowerBuilder or another application) to which you want to\npost a message.\n"}
{"page": 1199, "text": "Statements, Events, and Functions\nPage 1199\nArgument\nDescription\nmessage#\nAn UnsignedInteger whose value is the system message number of the\nmessage you want to post.\nword\nA long whose value is the integer value of the message. If this argument\nis not used by the message, enter 0.\nlong\nThe long value of the message or a string.\nReturn value\nBoolean. If any argument's value is null, Post returns null.\nUsage\nUse Post or Send when you want to trigger system events that are not PowerBuilder-defined\nevents. Post is asynchronous; it adds a message to the end of the window's message queue.\nSend is synchronous; its message triggers an event immediately.\nTo obtain the handle of a PowerBuilder window, use the Handle function.\nTo trigger PowerBuilder events, use TriggerEvent or PostEvent. These functions run the\nscript associated with the event. They are easier to code and bypass the messaging queue.\nWhen you specify a string for long, Post stores a copy of the string and passes a pointer to it.\nExamples\nThis statement scrolls the window w_date down one page after all the previous messages in\nthe message queue for the window have been processed:\nPost(Handle(w_date), 277, 3, 0)\nSee also\nHandle\nPostEvent\nSend\nTriggerEvent\n2.4.579 PostData\nDescription\nSends the string or blob data with POST method.\nApplies to\nHTTPClient objects\nSyntax\nobjectname.PostData ( data, bufferSize )\nTable 2.1075:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient object for which you want to post the data.\n"}
{"page": 1200, "text": "Statements, Events, and Functions\nPage 1200\nArgument\nDescription\ndata\nA string or blob value specifying the data to post.\nbufferSize\nA long value specifying the buffer size. For the string data, each\nPowerBuilder character takes up two bytes of storage.\nReturn value\nInteger.\nReturns values as follows. If any argument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Timed out\nExamples\nThis example request information in a loop:\nInteger i, li_PackCount, li_rc\nString ls_TotalStrData, ls_NextData\nBlob lblb_NextData\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\n// Read the file to ls_TotalStrData and calculate li_PackCount\n// ...\n// Construct a POST request\n// Content-Length indicates the total bytes of data being sent\n// Each PB character takes up two bytes of storage\nlnv_HttpClient.SetRequestHeader(\"Content-Length\", String(Len(ls_TotalStrData)*2))\n// Start posting data and request information\nif lnv_HttpClient.PostDataStart(\"https://demo.appeon.com/PB/webapi_client/\nemployee/102/photo\") = 1 then\n for i = 1 to li_PackCount\n  ls_NextData = mid(ls_TotalStrData, (i - 1) * 1024 + 1, 1024)\n  li_rc = lnv_HttpClient.PostData(ls_NextData, Len(ls_NextData)* 2)\n  if li_rc <> 1 then exit\n next\nend if\nif li_rc = 1 then\n li_rc = lnv_HttpClient.PostDataEnd()\nend if\nSee also\nPostDataStart\nPostDataEnd\n2.4.580 PostDataEnd\nDescription\nFinishes sending the data with POST method.\nApplies to\n"}
{"page": 1201, "text": "Statements, Events, and Functions\nPage 1201\nHTTPClient objects\nSyntax\nobjectname.PostDataEnd ( )\nTable 2.1076:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient object for which you want to end posting\ndata.\nReturn value\nInteger.\nReturns values as follows. If any argument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Timed out\nExamples\nInteger i, li_PackCount, li_rc\nBlob lblb_photo, lblb_NextData\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\n// Read photo to lblb_photo and calculate li_PackCount\n// ...\nlnv_HttpClient.SetRequestHeader(\"Content-Type\", \"multipart/form-data;\n boundary--------------------------359875084413580694217125\")\n// Construct a POST request\nlnv_HttpClient.SetRequestHeader(\"Content-Length\", string(len(lblb_photo)))\n// Start posting data and request information\nif lnv_HttpClient.PostDataStart(\"https://demo.appeon.com/PB/webapi_client/\nemployee/102/photo\") = 1 then\n for i = 1 to li_PackCount\n  lblb_NextData = blobmid(lblb_photo, (i - 1) * 1024 + 1, 1024)\n  li_rc = lnv_HttpClient.PostData(lblb_NextData, 1024)\n  if li_rc <> 1 then exit\n next\nend if\nif li_rc = 1 then\n li_rc = lnv_HttpClient.PostDataEnd()\nend if\nSee also\nPostData\nPostDataStart\n2.4.581 PostDataStart\nDescription\n"}
{"page": 1202, "text": "Statements, Events, and Functions\nPage 1202\nStarts sending the data with POST method.\nIf IgnoreServerCertificate or CheckForServerCertRevocation is set to verify the server\ncertificate, and if the verification fails, an error code will be returned.\nApplies to\nHTTPClient objects\nSyntax\nobjectname.PostDataStart ( urlName )\nTable 2.1077:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient object for which you want to start posting\ndata.\nurlName\nA string value specifying the URL.\nReturn value\nInteger.\nReturns values as follows. If any argument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timed out\n-7 -- Certification revocation checking has been enabled, but the revocation check failed to\nverify whether a certificate has been revoked. The server used to check for revocation might\nbe unreachable.\n-8 -- SSL certificate is invalid.\n-9 -- SSL certificate was revoked.\n-10 -- The function is unfamiliar with the Certificate Authority that generated the server's\ncertificate.\n-11 -- SSL certificate common name (host name field) is incorrect, for example,\nif you entered www.appeon.com and the common name on the certificate says\nwww.demo.appeon.com.\n-12 -- SSL certificate date that was received from the server is bad. The certificate is expired.\n-13 -- The certificate was not issued for server authenticate purpose.\n-14 -- The application experienced an internal error loading the SSL libraries.\n-15 -- More than one type of errors when validating the server certificate.\nExamples\n"}
{"page": 1203, "text": "Statements, Events, and Functions\nPage 1203\nThis example requests information in a loop:\nInteger i, li_PackCount, li_rc\nBlob lblb_photo, lblb_NextData\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\n// Read photo to lblb_photo and calculate li_PackCount\n//...\nlnv_HttpClient.SetRequestHeader(\"Content-Type\", \"multipart/form-data;\n boundary--------------------------359875084413580694217125\")\n// Construct a POST request\nlnv_HttpClient.SetRequestHeader(\"Content-Length\", string(len(lblb_photo)))\n// Start posting data and request information\nif lnv_HttpClient.PostDataStart(\"https://demo.appeon.com/PB/webapi_client/\nemployee/102/photo\") = 1 then\n for i = 1 to li_PackCount\n  lblb_NextData = blobmid(lblb_photo, (i - 1) * 1024 + 1, 1024)\n  li_rc = lnv_HttpClient.PostData(lblb_NextData, 1024)\n  if li_rc <> 1 then exit\n next\nend if\nif li_rc = 1 then\n li_rc = lnv_HttpClient.PostDataEnd()\nend if\nSee also\nPostData\nPostDataEnd\n2.4.582 PostEvent\nDescription\nAdds an event to the end of the event queue of an object.\nApplies to\nAny object, except the application object\nSyntax\nobjectname.PostEvent ( event {, word, long } )\nTable 2.1078:\nArgument\nDescription\nobjectname\nThe name of any PowerBuilder object or control (except an application)\nthat has events associated with it.\nevent\nA value of the TrigEvent enumerated datatype that identifies\na PowerBuilder event (for example, Clicked!, Modified!, or\nDoubleClicked!) or a string whose value is the name of an event. The\nevent must be a valid event for objectname and a script must exist for the\nevent in objectname.\nword (optional)\nA long value to be stored in the WordParm property of the system's\nMessage object. If you want to specify a value for long, but not word,\n"}
{"page": 1204, "text": "Statements, Events, and Functions\nPage 1204\nArgument\nDescription\nenter 0. (For cross-platform compatibility, WordParm and LongParm are\nboth longs).\nlong\n(optional)\nA long value or a string that you want to store in the LongParm property\nof the system's Message object. When you specify a string, a pointer to\nthe string is stored in the LongParm property, which you can access with\nthe String function (see Usage).\nReturn value\nBoolean. Returns true if it is successful and false if the event is not a valid event for\nobjectnameobjectname. Also returns true if no script exists for the event in objectname. If any\nargument's value is null, PostEvent returns null.\nUsage\nYou cannot post events to the event queue for an application object. Use TriggerEvent\ninstead.\nYou cannot post or trigger events for objects that do not have events, such as drawing objects.\nYou cannot post or trigger events in a batch application that has no user interface because the\napplication has no event queue.\nAfter you call PostEvent, check the return code to determine whether PostEvent succeeded.\nYou can pass information to the event script with the word and long arguments. The\ninformation is stored in the Message object. In your script, you can reference the WordParm\nand LongParm fields of the Message object to access the information. Note that the Message\nobject is saved and restored just before the posted event script runs so that the information\nyou passed is available even if other code has used the Message object too.\nIf you have specified a string for long, you can access it in the triggered event by using the\nString function with the keyword \"address\" as the format parameter. (Note that PowerBuilder\nhas stored the string at an arbitrary memory location and you are relying on nothing else\nhaving altered the pointer or the stored string.) Your event script might begin as follows:\nstring PassedString\nPassedString = String(Message.LongParm, \"address\")\nTriggerEvent and PostEvent are useful for preventing duplication of code. If two controls\nperform the same task, you can use PostEvent in one control's event script to execute the\nother's script, instead of repeating the code in two places. For example, if both a button and a\nmenu delete data, the button's Clicked script can perform the deletion and the menu's Clicked\nevent script can post an event that runs the button's Clicked event script.\nChoosing PostEvent or TriggerEvent\nBoth PostEvent and TriggerEvent cause event scripts to be executed. PostEvent is\nasynchronous; it adds the event to the end of an object's event queue. TriggerEvent is\nsynchronous; the event is triggered immediately.\nUse PostEvent when you want the current event script to complete before the posted event\nscript runs. TriggerEvent interrupts the current script to run the triggered event's script. Use it\nwhen you need to interrupt a process, such as canceling printing.\n"}
{"page": 1205, "text": "Statements, Events, and Functions\nPage 1205\nIf the function is the last line in an event script and there are no other events pending,\nPostEvent and TriggerEvent have the same effect.\nEvents and messages in Windows\nBoth PostEvent and TriggerEvent cause a script associated with an event to be executed.\nHowever, these functions do not send the actual event message. This is important when you\nare choosing the target object and event. The following background information explains this\nconcept.\nMany PowerBuilder functions send Windows messages, which in turn trigger events and run\nscripts. For example, the Close function sends a Windows close message (WM_CLOSE).\nPowerBuilder maps the message to its internal close message (PBM_CLOSE), then runs the\nClose event's script and closes the window.\nIf you use TriggerEvent or PostEvent with Close! as the argument, PowerBuilder runs the\nClose event's script but it does not close the window because it did not receive the close\nmessage. Therefore, the choice of which event to trigger is important. If you trigger the\nClicked! event for a button whose script calls the Close function, PowerBuilder runs the\nClose event's script and closes the window.\nUse Post or Send when you want to trigger system events that are not PowerBuilder-defined\nevents.\nExamples\nThis statement adds the Clicked event to the event queue for CommandButton cb_OK. The\nevent script will be executed after any other pending event scripts are run:\ncb_OK.PostEvent(Clicked!)\nThis statement adds the user-defined event cb_exit_request to the event queue in the parent\nwindow:\nParent.PostEvent(\"cb_exit_request\")\nThis example posts an event for cb_exit_request with an argument and then retrieves that\nvalue from the Message object in the event's script.\nThe first part of the example is code for a button in a window. It adds the user-defined event\ncb_exit_request to the event queue in the parent window. The value 455 is stored in the\nMessage object for the use of the event's script:\nParent.PostEvent(\"cb_exit_request\", 455, 0)\nThe second part of the example is the beginning of the cb_exit_request event script, which\nassigns the value passed in the Message object to a local variable. The script can use the\nvalue in whatever way is appropriate to the situation:\ninteger numarg\nnumarg = Message.WordParm\nSee also\nPost\nSend\nTriggerEvent\n"}
{"page": 1206, "text": "Statements, Events, and Functions\nPage 1206\n2.4.583 PostURL\nDescription\nPerforms an HTTP Post, allowing a PowerBuilder application to send a request through CGI,\nNSAPI, or ISAPI.\nApplies to\nInet objects (Obsolete)\nSyntax\nservicereference.PostURL ( urlname, urldata, headers, {serverport, } data )\nTable 2.1079:\nArgument\nDescription\nservicereference\nReference to the Internet service instance.\nurlname\nString specifying the URL to post.\nurldata\nBlob specifying arguments to the URL specified by urlname.\nheaders\nString specifying HTML headers. In Netscape, a newline (~n) is required\nafter each HTTP header and a final newline after all headers.\nserverport\n(optional)\nSpecifies the server port number for the request. The default value for\nthis argument is 0, which means that the port number is determined by\nthe system (port 80 for HTTP requests).\ndata\nInternetResult instance into which the function returns HTML.\nReturn value\nInteger. Returns values as follows:\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-4 -- Cannot connect to the Internet\n-5 -- Unsupported secure (HTTPS) connection attempted\n-6 -- Internet request failed\nUsage\nCall this function to invoke a CGI, NSAPI, or ISAPI function.\nData references a standard class user object that descends from InternetResult and that has\nan overridden InternetData function. This overridden function then performs the required\nprocessing with the returned HTML. Because the Internet returns data asynchronously,\ndata must reference a variable that remains in scope after the function executes (such as a\nwindow-level instance variable).\nTo simulate a form submission, you need to send a header that indicates the proper Content-\nType. For forms, the proper Content-Type header is:\n"}
{"page": 1207, "text": "Statements, Events, and Functions\nPage 1207\nContent-Type: application/x-www-form-urlencoded\nFor more information on the InternetResult standard class user object and the InternetData\nfunction, use the PowerBuilder Browser.\nTimeout value for sending a request\nThe PostURL function relies on wininet.dll to post a request and returns -1 when the\nposting time exceeds the DLL timeout value. When you install Internet Explorer 7\nor later, the default timeout value for this DLL is 30 seconds. Although it is possible\nto change the timeout value by configuring a ReceiveTimeOut registry key under\nHKEY_CURRENT_USER\\ SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n\\Internet Settings, this is not recommended, since it can also affect the behavior of the\nInternet Explorer browser.\nExamples\nThis example calls the PostURL function using server port 8080. Iinet is an instance variable\nof type inet:\nBlob lblb_args\nString ls_headers\nString ls_url\nLong ll_length\n \niir_msgbox = CREATE n_ir_msgbox\nls_url = \"https://www.appeon.com/\"\nls_url += \"cgi-bin/pbcgi60.exe/\"\nls_url += \"myapp/n_cst_html/f_test?\"\nlblb_args = blob(\"\")\nll_length = Len(lblb_args)\nls_headers = \"Content-Length: \" &\n   + String(ll_length) + \"~n~n\"\niinet.PostURL &\n   (ls_url, lblb_args, ls_headers, 8080, iir_msgbox)\nThis example shows the use of a header with the correct content-type for a form:\nBlob lblb_args\nString ls_headers\nString ls_url\nString ls_args\nlong ll_length\ninteger li_rc\nli_rc = GetContextService( \"Internet\", iinet_base )\nIF li_rc = 1 THEN   ir = CREATE n_ir   ls_url = \"http://localhost/Site/\ntesturl.stm?\"\n   ls_args = \"user=MyName&pwd=MyPasswd\"\n   lblb_args = Blob( ls_args )\n   ll_length = Len( lblb_args )\n   ls_header = \"Content-Type: \" + &\n      \"application/x-www-form-urlencoded~n\" + &\n      \"Content-Length: \" + String( ll_length ) + \"~n~n\"\n   li_rc = iinet.PostURL( ls_url, lblb_args, &\n      ls_header, ir )\nEND IF\nSee also\nGetURL\n"}
{"page": 1208, "text": "Statements, Events, and Functions\nPage 1208\nHyperLinkToURL\nInternetData\n2.4.584 Preview\nDescription\nDisplays the contents of a RichTextEdit control as either a preview of the document as it\nwould print or in an editing view.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.Preview ( previewsetting )\nTable 2.1080:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control which you want to preview or edit.\npreviewsetting\nA boolean value indicating whether to put the RichTextEdit into preview\nor edit mode. Values are:\n\u2022 True -- Preview the contents of the RichTextEdit as it would look\nwhen printed\n\u2022 False -- Displays the contents in editable form\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nUsage\nA RichTextEdit control has two ways of viewing the content: edit mode and preview mode.\nThe Preview function switches between the two.\nEdit mode\nEdit mode displays the text in readable form. The user can enter, select, and change text.\nThere are properties for controlling the display of nonprinting characters in the text, such as\ncarriage returns, spaces, tabs, and input fields. In edit mode, the toolbar, ruler bar, and tab\nbar, if visible, display above the editing area of the control.\nPreview mode\nPreview mode displays a miniature page within the control. The page is sized to fit within\nthe control. Any selection is canceled when the control switches to preview mode. The user\ncannot edit text in preview mode, but scripts can call functions for selecting and changing\ntext, including inserting documents. Users can page through the control contents in preview\nmode by using the up arrow and down arrow keys, or the Page Up and Page Down keys.\nIf you call ShowHeadFoot when the control is in preview mode, you return to edit mode with\nthe header and footer editing panels displayed.\n"}
{"page": 1209, "text": "Statements, Events, and Functions\nPage 1209\nMake sure the RichTextEdit control is big enough to display the page formatting and\nscrolling controls available in preview mode.\nExamples\nThis example previews the page layout of the RichTextEdit rte_1:\nrte_1.Preview(TRUE)\nSee also\nIsPreview\n2.4.585 Print\nSends data to the current printer (or spooler, if the user has a spooler set up). There are\nseveral syntaxes.\nFor syntax for DataWindows or DataStores, see the Print method for DataWindows in\nSection 9.118, \u201cPrint\u201d in DataWindow Reference.\nTable 2.1081:\nTo\nUse\nInclude a visual object, such as a window or a graph control in a print job Syntax 1\nSend one or more lines of text as part of a print job\nSyntax 2\nPrint the contents of an RTE control\nSyntax 3\n2.4.585.1 Syntax 1: For printing a visual object in a print job\nDescription\nIncludes a visual object, such as a window or a graph control, in a print job that you have\nstarted with the PrintOpen function.\nApplies to\nAny object\nSyntax\nobjectname.Print ( printjobnumber, x, y {, width, height } )\nTable 2.1082:\nArgument\nDescription\nobjectname\nThe name of the object that you want to print. The object must either be a\nwindow or an object whose ancestor type is DragObject, which includes\nall the controls that you can place in a window.\nprintjobnumber\nThe number the PrintOpen function assigns to the print job.\nx\nAn integer whose value is the x coordinate on the page of the left corner\nof the object, in thousandths of an inch.\ny\nAn integer whose value is the y coordinate on the page of the left corner\nof the object, in thousandths of an inch.\n"}
{"page": 1210, "text": "Statements, Events, and Functions\nPage 1210\nArgument\nDescription\nwidth (optional)\nAn integer specifying the printed width of the object in thousandths of an\ninch. If omitted, PowerBuilder uses the object's original width.\nheight (optional)\nAn integer specifying the printed height of the object in thousandths of an\ninch. If omitted, PowerBuilder uses the object's original height.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Print\nreturns null.\nUsage\nPowerBuilder manages print jobs by opening the job, sending data, and closing the job.\nWhen you use Syntax 2 or 3, you must call the PrintOpen function and the PrintClose or\nPrintCancel functions yourself to manage the process.\nPowerBuilder copies the area of the screen occupied by the control to the printer. If any other\nwindow or application displays on the screen in that area in front of the control while the\ncontrol is being printed, that window or application will also be printed.\nPrint area and margins\nThe print area is the physical page size minus any margins in the printer itself.\nExamples\nThis example prints the CommandButton cb_close in its original size at location 500, 1000:\nlong Job\nJob = PrintOpen( )\ncb_close.Print(Job, 500,1000)\nPrintClose(Job)\nThis example opens a print job, which defines a new page, then prints a title using the third\nsyntax of Print. Then it uses this syntax of Print to print a graph on the first page and a\nwindow on the second page:\nlong Job\nJob = PrintOpen( )\nPrint(Job, \"Report of Year-to-Date Sales\")\ngr_sales1.Print(Job, 1000,PrintY(Job)+500, &\n   6000,4500)\nPrintPage(Job)\nw_sales.Print(Job, 1000,500, 6000,4500)\nPrintClose(Job)\nSee also\nPrintCancel\nPrintClose\nPrintOpen\nPrintScreen\n2.4.585.2 Syntax 2: For printing text in a print job\nDescription\n"}
{"page": 1211, "text": "Statements, Events, and Functions\nPage 1211\nSends one or more lines of text as part of a print job that you have opened with the PrintOpen\nfunction. You can specify tab settings before or after the text. The tab settings control the\ntext's horizontal position on the page.\nApplies to\nNot object-specific\nSyntax\nPrint ( printjobnumber, { tab1, } string {, tab2 } )\nTable 2.1083:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job.\ntab1 (optional)\nThe position, measured from the left edge of the print area in thousandths\nof a inch, to which the print cursor should move before string is printed.\nIf the print cursor is already at or beyond the position or if you omit tab1,\nPrint starts printing at the current position of the print cursor.\nstring\nThe string you want to print. If the string includes carriage return-newline\ncharacter pairs (~r~n), the string will print on multiple lines. However,\nthe initial tab position is ignored on subsequent lines.\ntab2\n(optional)\nThe new position, measured from the left edge of the print area in\nthousandths of a inch, of the print cursor after string printed. If the print\ncursor is already at or beyond the specified position, Print ignores tab2\nand the print cursor remains at the end of the text. If you omit tab2, Print\nmoves the print cursor to the beginning of a new line.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Print\nreturns null.\nUsage\nPowerBuilder manages print jobs by opening the job, sending data, and closing the job.\nWhen you use Syntax 2 or 3, you must call the PrintOpen function and the PrintClose or\nPrintCancel functions yourself to manage the process.\nPrint cursor\nIn a print job, PowerBuilder uses a print cursor to keep track of the print location. The print\ncursor stores the coordinates of the upper-left corner of the location at which print will being.\nPowerBuilder updates the print cursor after printing text with Print.\nLine spacing when printing text\nLine spacing in PowerBuilder is proportional to character height. The default line spacing\nis 1.2 times the character height. When Print starts a new line, it sets the x coordinate of the\ncursor to 0 and increases the y coordinate by the current line spacing. You can change the\nline spacing with the PrintSetSpacing function, which lets you specify a new factor to be\nmultiplied by the character height.\n"}
{"page": 1212, "text": "Statements, Events, and Functions\nPage 1212\nBecause Syntax 3 of Print increments the y coordinate each time it creates a new line,\nit also handles page breaks automatically. When the y coordinate exceeds the page size,\nPowerBuilder automatically creates a new page in the print job. You do not need to call the\nPrintPage function, as you would if you were using the printing functions that control the\ncursor position (for example, PrintText or PrintLine).\nPrint area and margins\nThe print area is the physical page size minus any margins in the printer itself.\nUsing fonts\nYou can use PrintDefineFont and PrintSetFont to specify the font used by the Print function\nwhen you are printing a string.\nFonts for multiple languages\nThe default font for print functions is the system font, but multiple languages cannot be\nprinted correctly using the system font. The Tahoma font typically produces good results.\nHowever, if the printer font is set to Tahoma and the Tahoma font is not installed on the\nprinter, PowerBuilder downloads the entire font set to the printer when it encounters a\nmultilanguage character. Use the PrintDefineFont and PrintSetFont functions to specify a\nfont that is available on users' printers and supports multiple languages.\nExamples\nThis example opens a print job, prints the string Appeon Corporation in the default font, and\nthen starts a new line:\nlong Job\n \n// Define a blank page and assign the job an ID\nJob = PrintOpen( )\n \n// Print the string and then start a new line\nPrint(Job, \"Appeon Corporation\")\n...\nPrintClose(Job)\nThis example opens a print job, prints the string Appeon Corporation in the default font, tabs\n5 inches from the left edge of the print area but does not start a new line:\nlong Job\n \n// Define a blank page and assign the job an ID\nJob = PrintOpen( )\n \n// Print the string but do not start a new line\nPrint(Job, \"Appeon Corporation\", 5000)\n...\nPrintClose(Job)\nThe first Print statement below tabs half an inch from the left edge of the print area, prints\nthe string Appeon Corporation, and then starts a new line. The second Print statement tabs\none inch from the left edge of the print area, prints the string Directors:, and then starts a new\nline:\nlong Job\n// Define a blank page and assign the job an ID\nJob = PrintOpen( )\n"}
{"page": 1213, "text": "Statements, Events, and Functions\nPage 1213\n// Print the string and start a new line\nPrint(Job, 500, \"Appeon Corporation\")\n// Tab 1 inch from the left edge and print\nPrint(Job, 1000, \"Directors:\")\n...\nPrintClose(Job)\nThe first Print statement below tabs half an inch from the left edge of the print area prints\nthe string Appeon Corporation, and then tabs 6 inches from the left edge of the print area but\ndoes not start a new line. The second Print statement prints the current date and then starts a\nnew line:\nlong Job\n// Define a blank page and assign the job an ID\nJob = PrintOpen( )\n// Print string and tab 6 inches from the left edge\nPrint(Job, 500, \"Appeon Corporation\", 6000)\n// Print the current date on the same line\nPrint(Job, String(Today()))\n...\nPrintClose(Job)\nIn a window that displays a database error message in a MultiLineEdit mle_message, the\nfollowing script for a Print button prints a title with the date and time and the message:\nlong li_prt\nli_prt = PrintOpen(\"Database Error\")\nPrint(li_prt, \"Database error - \" &\n   + String(Today(), \"mm/dd/yyyy\") &\n      + \" - \" &\n      + String(Now(), \"HH:MM:SS\"))\nPrint(li_prt, \" \")\nPrint(li_prt, mle_message.text)\nPrintClose(li_prt)\nSee also\nPrintCancel\nPrintClose\nPrintDataWindow\nPrintOpen\nPrintScreen\nPrintSetFont\nPrintSetSpacing\n2.4.585.3 Syntax 3: For RichTextEdit controls\nDescription\nPrints the contents of a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.Print ( copies, pagerange, collate, canceldialog )\n"}
{"page": 1214, "text": "Statements, Events, and Functions\nPage 1214\nTable 2.1084:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control whose contents you want to print.\ncopies\nAn integer specifying the number of copies you want to print.\npagerange\nA string describing the pages you want to print. To print all pages,\nspecify an empty string (\"\"). To specify a subset of pages, use dashes\nto specify a range and commas to separate ranges and individual page\nnumbers, for example, \"1-3\" or \"2,5,8-10\".\nWhen rtename shares data with a DataWindow, pagerange refers to\npages based on the total number of pages in the control, not within each\ninstance of the document.\ncollate\nA boolean value indicating whether you want the copies collated. Values\nare:\nTRUE -- Collate copies\nFALSE -- Do not collate copies\ncanceldialog\nA boolean value indicating whether you want to display a nonmodal\ndialog box that allows the user to cancel printing. Values are:\nTRUE -- Display the dialog box\nFALSE -- Do not display the dialog box\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nUsage\nWhen the RichTextEdit control shares data with a DataWindow, the total number of pages\ncontained in the control is the page count of the document multiplied by the row count of the\nDataWindow.\nYou can specify printed page numbers by including an input field in the header or footer of\nyour document.\nExamples\nThis statement prints one copy of pages 1 to 5 of the document in the RichTextEdit control\nrte_1. The output is not collated and a dialog box displays to allow the user to cancel the\nprinting:\nrte_1.Print(1, \"1-5\", FALSE, TRUE)\nSee also\nPreview\nPrintEx\n2.4.586 PrintAsPDF\nDescription\n"}
{"page": 1215, "text": "Statements, Events, and Functions\nPage 1215\nPrints the current web page as a PDF file.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.PrintAsPDF ( string PdfFile )\nTable 2.1085:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nPdfFile\nThe file path and file name of the PDF file to be saved.\nReturn value\nInteger.\n\u2022 1 -- Success.\n\u2022 -1 -- General error.\n\u2022 -2 -- Failed to get the browser instance.\n\u2022 -3 -- Invalid file path or file name.\n\u2022 -4 -- The folder where the PDF file will be saved does not exist.\nExamples\nThis example prints the current web page as printaspdf.pdf and saves it under the current\ndirectory:\nInteger li_rtn\nString ls_pdfpath\nLs_pdfpath = getcurrentdirectory() + \"\\printaspdf.pdf\"\nLi_rtn = wb_1.PrintAsPDF(ls_pdfpath)\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\nPauseDownload\n"}
{"page": 1216, "text": "Statements, Events, and Functions\nPage 1216\nRefresh\nRegisterEvent\nResumeDownload\nStopNavigation\nUnregisterEvent\nZoom\n2.4.587 PrintBitmap\nDescription\nWrites a bitmap at the specified location on the current page.\nSyntax\nPrintBitmap ( printjobnumber, bitmap, x, y, width, height )\nTable 2.1086:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job.\nbitmap\nA string whose value is the file name of the bitmap image.\nx\nAn integer whose value is the x coordinate (in thousandths of an inch) on\nthe page of the bitmap image.\ny\nAn integer whose value is the y coordinate (in thousandths of an inch) on\nthe page of the bitmap image.\nwidth\nThe integer width of the bitmap image in thousandths of an inch. If width\nis 0, PowerBuilder uses the original width of the image.\nheight\nThe integer height of the bitmap image in thousandths of an inch. If\nheight is 0, PowerBuilder uses the original height of the image.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintBitmap returns null.\nUsage\nPrintBitmap does not change the position of the print cursor, which remains where it was\nbefore the function was called. In general, print functions in which you specify coordinates\ndo not affect the print cursor (see the functions listed in See also).\nExamples\nThese statements define a new blank page and then print the bitmap in file d:\\PB\n\\BITMAP1.BMP in its original size at location 50,100:\nlong Job\n \n// Define a new blank page.\n"}
{"page": 1217, "text": "Statements, Events, and Functions\nPage 1217\nJob = PrintOpen( )\n \n// Print the bitmap in its original size.\nPrintBitmap(Job, \"d:\\PB\\BITMAP1.BMP\", 50,100, 0,0)\n// Send the page to the printer and close Job.\nPrintClose(Job)\nSee also\nPrintClose\nPrintLine\nPrintRect\nPrintRoundRect\nPrintOval\nPrintOpen\n2.4.588 PrintCancel\nDescription\nCancels printing and deletes the spool file, if any. Cancels printing of a print job that you\nopened with the PrintOpen function. The print job is identified by the number returned by\nPrintOpen.\nFor syntax for DataWindows and DataStores, see the PrintCancel method for DataWindows\nin Section 9.119, \u201cPrintCancel\u201d in DataWindow Reference.\nSyntax\nPrintCancel ( printjobnumber )\nTable 2.1087:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If printjobnumber is null,\nPrintCancel returns null.\nUsage\nPrintCancel cancels the specified print job by deleting the spool file, if any, and closing the\njob. Because PrintCancel closes the print job, do not call the PrintClose function after you\ncall PrintCancel.\nExamples\nIn this example, a script for a Print button opens a print job and then opens a window with\na cancel button. If the user clicks on the cancel button, its script sets a global variable that\nindicates that the user wants to cancel the job. After each printing command in the Print\nbutton's script, the code checks the global variable and cancels the job if its value is true.\n"}
{"page": 1218, "text": "Statements, Events, and Functions\nPage 1218\nThe definition of the global variable is:\nboolean gb_printcancel\nThe script for the Print button is:\nlong job, li\n \ngb_printcancel = FALSE\njob = PrintOpen(\"Test Page Breaks\")\nIF job < 1 THEN\n   MessageBox(\"Error\", \"Can't open a print job.\")\n   RETURN\nEND IF\n \nOpen(w_printcancel)\n \nPrintBitmap(Job, \"d:\\PB\\bitmap1.bmp\", 5, 10, 0, 0)\nIF gb_printcancel = TRUE THEN\n   PrintCancel(job)\n   RETURN\nEND IF\n \n... // Additional printing commands,\n... // including checking gb_printcancel\n \nPrintClose(job)\nClose(w_printcancel)\nThe script for the cancel button in the second window is:\ngb_printcancel = TRUE\nClose(w_printcancel)\nSee also\nPrint\nPrintClose\nPrintOpen\n2.4.589 PrintClose\nDescription\nSends the current page to the printer (or spooler) and closes the job. Call PrintClose as the\nlast command of a print job unless PrintCancel function has closed the job.\nSyntax\nPrintClose ( printjobnumber )\nTable 2.1088:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nReturn value\n"}
{"page": 1219, "text": "Statements, Events, and Functions\nPage 1219\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If printjobnumber is null,\nPrintClose returns null.\nUsage\nWhen you open a print job, you must close (or cancel) it. To avoid hung print jobs, process\nand close a print job in the same event in which you open it.\nExamples\nThis example opens a print job, which creates a blank page, prints a bitmap on the page, then\nsends the current page to the printer or spooler and closes the job:\nulong Job\n \n// Begin a new job and a new page.\nJob = PrintOpen( )\n \n// Print the bitmap in its original size.\nPrintBitmap(Job, d:\\PB\\BITMAP1, 5,10, 0,0)\n \n// Send the page to the printer and close Job.\nPrintClose(Job)\nSee also\nPrintCancel\nPrintOpen\n2.4.590 PrintDataWindow\nDescription\nPrints the contents of a DataWindow control or DataStore as a print job.\nSyntax\nPrintDataWindow ( printjobnumber, dwcontrol )\nTable 2.1089:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\ndwcontrol\nThe name of the DataWindow control, child DataWindow, or DataStore\ncontaining the DataWindow object you want to print\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintDataWindow returns null.\nUsage\nDo not use PrintDataWindow with any Print functions except PrintOpen and PrintClose.\nWhen you use PrintDataWindow with PrintOpen and PrintClose, you can print several\nDataWindows in one print job. The information in each DataWindow control starts printing\non a new page.\n"}
{"page": 1220, "text": "Statements, Events, and Functions\nPage 1220\nWhen you print a DataWindow using PrintDataWindow, PowerBuilder uses the fonts and\nlayout specified in the computer's printer setup, not the fonts and layout specified in the\nDataWindow. The PrintDefineFont and PrintSetFont methods also have no effect.\nWhen the DataWindow's presentation style is RichTextEdit, each row begins a new page in\nthe printed output.\nFor information on skipping individual pages with return codes in the PrintPage event, see\nthe Print function.\nExamples\nThese statements send the contents of three DataWindow controls to the current printer in a\nsingle print job:\nlong job\njob = PrintOpen( )\n// Each DataWindow starts printing on a new page.\nPrintDataWindow(job, dw_EmpHeader)\nPrintDataWindow(job, dw_EmpDetail)\nPrintDataWindow(job, dw_EmpDptSum)\nPrintClose(job)\nSee also\nPrint\nPrintClose\nPrintOpen\n2.4.591 PrintDefineFont\nDescription\nCreates a numbered font definition that consists of a font supported by your printer and a set\nof font properties. You can use the font number in the PrintSetFont or PrintText functions.\nYou can define up to eight fonts at a time.\nSyntax\nPrintDefineFont ( printjobnumber, fontnumber, facename, height, weight, fontpitch,\n fontfamily, italic, underline )\nTable 2.1090:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job.\nfontnumber\nThe number (1 to 8) you want to assign to the font.\nfacename\nA string whose value is the name of a typeface supported by your printer\n(for example, Courier 10Cpi).\nheight\nAn integer whose value is the height of the type in thousandths of an inch\n(for example, 250 for 18-point 10Cpi) or a negative number representing\nthe point size (for example, -18 for 18-point). Specifying the point size is\nmore exact; the height in thousandths of an inch only approximates the\npoint size.\n"}
{"page": 1221, "text": "Statements, Events, and Functions\nPage 1221\nArgument\nDescription\nweight\nThe stroke weight of the type. Normal weight is 400 and bold is 700.\nfontpitch\nA value of the FontPitch enumerated datatype indicating the pitch of the\nfont:\nDefault!\nFixed!\nVariable!\nfontfamily\nA value of the FontFamily enumerated datatype indicating the family of\nthe font:\nAnyFont!\nDecorative!\nModern!\nRoman!\nScript!\nSwiss!\nitalic\nA boolean value indicating whether the font is italic. The default is false\n(not italic).\nunderline\nA boolean value indicating whether the font is underlined. The default is\nfalse (not underlined).\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintDefineFont returns null.\nUsage\nYou can use as many as eight fonts in one print job. If you require more than eight fonts in\none job, you can call PrintDefineFont again to change the settings for a font number.\nUse PrintSetFont to make a font number the current font for the open print job.\nFonts in Microsoft Windows\nAlthough the fontfamily argument seems to duplicate information in the font name,\nWindows uses it along with the font name to identify the correct font or substitute a\nsimilar font if the named font is unavailable.\nFont names and sizes\nSome font names include a size, especially monospaced fonts which include\ncharacters per inch. This is the recommended size for the font and does not affect the\nprinted size, which you specify with the height argument.\nExamples\n"}
{"page": 1222, "text": "Statements, Events, and Functions\nPage 1222\nThese statements define a new blank page, and then define print font 1 for Job as Courier\n10Cpi, 18 point, normal weight, default pitch, Decorative font, with no italic or underline:\nlong Job\nJob = PrintOpen()\nPrintDefineFont(Job, 1, \"Courier 10Cpi\", &\n   -18, 400, Default!, Decorative!, FALSE, FALSE)\nSee also\nPrintClose\nPrintOpen\nPrintSetFont\n2.4.592 PrintEx\nDescription\nPrints the contents of a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.PrintEx ( canceldialog )\nTable 2.1091:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control whose contents you want to print.\ncanceldialog\nA boolean value indicating whether you want to display a nonmodal\nCancel dialog box that allows the user to cancel printing. The System\nPrint dialog box always displays. Values are:\nTRUE -- Display the dialog box\nFALSE -- Do not display the dialog box\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If the user presses Cancel in the\nPrint dialog box, PrintEx returns -1. If the user presses Cancel in the Cancel dialog box,\nPrintEx returns 1.\nUsage\nTo specify a range of pages and the number of copies to print and whether pages should be\ncollated, use the Print function.\nExamples\nThis statement prints the document in the RichTextEdit control rte_1. A Cancel dialog box\ndisplays to allow the user to cancel the printing:\nrte_1.PrintEx(TRUE)\n"}
{"page": 1223, "text": "Statements, Events, and Functions\nPage 1223\nSee also\nPreview\nPrint\n2.4.593 PrintGetPrinter\nDescription\nGets the current printer name.\nSyntax\nPrintGetPrinter ( )\nReturn value\nString. Returns current printer information in a tab-delimited format: printername ~t\ndrivername ~t port.\nUsage\nThe current printer is the default printer unless you change it with the PrintSetPrinter method.\nA PowerBuilder application calling the PrintGetPrinter method does not get an externally\nreset default after the application initializes.\nExamples\nThis example places the current printer name, driver, and port in separate SingleLineEdit\ntextboxes:\nString ls_fullstring\nls_fullstring=PrintGetPrinter()\nString ls_name, ls_driver, ls_port, ls_temp\nLong ll_place\nll_place=pos (ls_fullstring, \"~t\")\nls_name=left(ls_fullstring, ll_place -1)\nls_temp=mid(ls_fullstring, ll_place +1)\nll_place=pos (ls_temp, \"~t\")\nls_driver=left(ls_temp, ll_place -1)\nls_port=mid(ls_temp, ll_place +1)\nsle_1.text=ls_name\nsle_2.text=ls_driver\nsle_3.text=ls_port\nSee also\nPrintGetPrinters\nPrintSetPrinter\n2.4.594 PrintGetPrinters\nDescription\nGets the list of available printers.\nSyntax\nPrintGetPrinters ( )\n"}
{"page": 1224, "text": "Statements, Events, and Functions\nPage 1224\nReturn value\nString. Each printer is listed in the string in the format printername ~t drivername ~t port ~n.\nUsage\nThe return string can be loaded into a DataWindow using ImportString or separated using the\n~n as shown in the example.\nExamples\nThis example parses printer names from the return string on the PrintGetPrinters call, then\nplaces each printer name in an existing SingleLineEdit control. If you have more printers than\nSingleLineEdit boxes, the last SingleLineEdit contains a string for all the printers that are not\nlisted in the other SingleLineEdits:\nsinglelineedit sle\nlong ll_place, i, k \nstring ls_left, ls_prntrs\n \nls_prntrs  = PrintGetPrinters ( )\nk = upperbound(control)\nFOR i= k to 1  STEP -1  \n   IF parent.control[i].typeof()=singlelineedit! then\n      sle=parent.control[i]   \n      ll_place=pos (ls_prntrs, \"~n\" ) \n      ls_left = Left (ls_prntrs, ll_place - 1)\n      sle.text = ls_left\n      ls_prntrs = Mid (ls_prntrs, ll_place + 1)\n   END IF\nNEXT\nsle.text = ls_prntrs\nSee also\nImportString method for DataWindows in Section 9.100, \u201cImportString\u201d in DataWindow\nReference.\nPrintGetPrinter\nPrintSetPrinter\n2.4.595 PrintLine\nDescription\nDraws a line of a specified thickness between the specified endpoints on the current print\npage.\nSyntax\nPrintLine ( printjobnumber, x1, y1, x2, y2, thickness )\nTable 2.1092:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nx1\nAn integer specifying the x coordinate in thousandths of an inch of the\nstart of the line\n"}
{"page": 1225, "text": "Statements, Events, and Functions\nPage 1225\nArgument\nDescription\ny1\nAn integer specifying the y coordinate in thousandths of an inch of the\nstart of the line\nx2\nAn integer specifying the x coordinate in thousandths of an inch of the\nend of the line\ny2\nAn integer specifying the y coordinate in thousandths of an inch of the\nend of the line\nthickness\nAn integer specifying the thickness of the line in thousandths of an inch\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintLine returns null.\nUsage\nPrintLine does not change the position of the print cursor, which remains where it was before\nthe function was called.\nExamples\nThese statements start a new page in a print job and then print a line starting at 0,5 and ending\nat 7500,5 with a thickness of 10/1000 of an inch:\nlong Job\nJob = PrintOpen( )\n... // various print commands\n// Start a new page.\nPrintPage(Job)\n// Print a line at the top of the page\nPrintLine(Job,0,5,7500,5,10)\n... // Other printing\nPrintClose(Job)\nSee also\nPrintBitmap\nPrintClose\nPrintOpen\nPrintOval\nPrintRect\nPrintRoundRect\n2.4.596 PrintOpen\nDescription\nOpens a print job and assigns it a number, which you use in other printing statements.\nSyntax\nPrintOpen ( { jobname {, showprintdialog } } )\n"}
{"page": 1226, "text": "Statements, Events, and Functions\nPage 1226\nTable 2.1093:\nArgument\nDescription\njobname\n(optional)\nA string specifying a name for the print job. The name is displayed in the\nWindows Print Manager dialog box and in the Spooler dialog box.\nshowprintdialog\n(optional)\nA boolean value indicating whether you want to display the system Print\ndialog box that allows the user to select a printer or set print properties.\nValues are:\nTRUE -- Display the dialog box\nFALSE -- (default) Do not display the dialog box\nReturn value\nLong. Returns the job number if it succeeds and -1 if an error occurs. If the Print dialog box\ndisplays and the user presses Cancel, PrintOpen returns -1. If any argument's value is null,\nPrintOpen returns null.\nUsage\nA new print job begins on a new page and the font is set to the default font for the printer.\nThe print cursor is at the upper left corner of the print area.\nIf you specify true for the showprintdialog argument, the system Print dialog box displays\nallowing the user to cancel the print job. The option to specify a page range in the Print\ndialog box is disabled because PowerBuilder cannot determine the number of pages in the\nprint job in advance. If you specify this argument in a component that runs on a server, the\nargument is ignored.\nUse the job number that PrintOpen returns to identify this print job in all subsequent print\nfunctions.\nCalling MessageBox after PrintOpen can cause undesirable behavior that is confusing to a\nuser. Calling PrintOpen causes the currently active window in PowerBuilder to be disabled\nto allow Windows to handle printing. If you display a MessageBox after calling PrintOpen,\nWindows assigns the active window to be its parent, which is often another application,\ncausing that application to become active.\nBalancing PrintOpen and PrintClose\nWhen you open a print job, you must close (or cancel) it. To avoid hung print jobs,\nprocess and close a print job in the same event in which you open it.\nExamples\nThis example opens a job but does not give it a name:\nulong li_job\nli_job = PrintOpen()\nThis example opens a job, gives it a name, and displays the Print dialog box:\nulong li_job\nli_job = PrintOpen(\"Phone List\", true)\nSee also\n"}
{"page": 1227, "text": "Statements, Events, and Functions\nPage 1227\nPrint\nPrintBitmap\nPrintCancel\nPrintClose\nPrintDataWindow\nPrintDefineFont\nPrintLine\nPrintOval\nPrintPage\nPrintRect\nPrintRoundRect\nPrintSend (obsolete)\nPrintSetFont\nPrintSetup\nPrintText\nPrintWidth\nPrintX\nPrintY\n2.4.597 PrintOval\nDescription\nDraws a white oval outlined in a line of the specified thickness on the print page.\nSyntax\nPrintOval ( printjobnumber, x, y, width, height, thickness )\nTable 2.1094:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nx\nAn integer specifying the x coordinate in thousandths of an inch of the\nupper-left corner of the oval's bounding box\ny\nAn integer specifying the y coordinate in thousandths of an inch of the\nupper-left corner of the oval's bounding box\nwidth\nAn integer specifying the width in thousandths of an inch of the oval's\nbounding box\nheight\nAn integer specifying the height in thousandths of an inch of the oval's\nbounding box\n"}
{"page": 1228, "text": "Statements, Events, and Functions\nPage 1228\nArgument\nDescription\nthickness\nAn integer specifying the thickness of the line that outlines the oval in\nthousandths of an inch\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintOval returns null.\nUsage\nThe PrintOval, PrintRect, and PrintRoundRect functions draw filled shapes. To print other\nshapes or text inside the shapes, draw the filled shape first and then add text and other shapes\nor lines inside it. If you draw the filled shape after other printing functions, it will cover\nanything inside it. For example, to draw a border around text and lines, draw the oval or\nrectangular border first and then use PrintLine and PrintText to position the lines and text\ninside.\nPrintOval does not change the position of the print cursor, which remains where it was before\nthe function was called. In general, print functions in which you specify coordinates do not\naffect the print cursor.\nExamples\nThis example starts a print job with a new blank page, and then prints an oval that fits in a 1-\ninch square. The upper-left corner of the oval's bounding box is four inches from the top and\nthree inches from the left edge of the print area. Because its height and width are equal, the\noval is actually a circle:\nlong Job\n// Define a new blank page.\nJob = PrintOpen()\n// Print an oval.\nPrintOval(Job, 4000, 3000, 1000, 1000, 10)\n... // Other printing\nPrintClose(Job)\nSee also\nPrintBitmap\nPrintClose\nPrintLine\nPrintOpen\nPrintRect\nPrintRoundRect\n2.4.598 PrintPage\nDescription\nSends the current page to the printer or spooler and begins a new blank page in the current\nprint job.\n"}
{"page": 1229, "text": "Statements, Events, and Functions\nPage 1229\nSyntax\nPrintPage ( printjobnumber )\nTable 2.1095:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintPage returns null.\nExamples\nThis example opens a print job with a new blank page, prints a bitmap on the page, and then\nsends the page to the printer and sets up a new blank page. Finally, the last Print statement\nprints the company name on the new page:\nlong Job\n \n// Open a job with new blank page.\nJob = PrintOpen()\n \n// Print a bitmap on the page.\nPrintBitmap(Job, \"d:\\PB\\BITMAP1.BMP\", 100,250, 0,0)\n \n// Begin a new page.\nPrintPage(Job)\n \n// Print the company name on the new page.\nPrint(Job, \"Appeon Corporation\")\nSee also\nPrintClose\nPrintOpen\n2.4.599 PrintRect\nDescription\nDraws a white rectangle with a border of the specified thickness on the print page.\nSyntax\nPrintRect ( printjobnumber, x, y, width, height, thickness )\nTable 2.1096:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nx\nAn integer specifying the x coordinate in thousandths of an inch of the\nupper-left corner of the rectangle\n"}
{"page": 1230, "text": "Statements, Events, and Functions\nPage 1230\nArgument\nDescription\ny\nAn integer specifying the y coordinate in thousandths of an inch of the\nupper-left corner of the rectangle\nwidth\nAn integer specifying the rectangle's width in thousandths of an inch\nheight\nAn integer specifying the rectangle's height in thousandths of an inch\nthickness\nAn integer specifying the thickness of the rectangle's border line in\nthousandths of an inch\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintRect returns null.\nUsage\nThe PrintOval, PrintRect, and PrintRoundRect functions draw filled shapes. To print other\nshapes or text inside the shapes, draw the filled shape first and then add text and other shapes\nor lines inside it. If you draw the filled shape after other printing functions, it will cover\nanything inside it. For example, to draw a border around text and lines, draw the oval or\nrectangular border first and then use PrintLine and PrintText to position the lines and text\ninside.\nPrintRect does not change the position of the print cursor, which remains where it was before\nthe function was called. In general, print functions in which you specify coordinates do not\naffect the print cursor.\nExamples\nThese statements open a print job with a new page and draw a 1-inch square with a line\nthickness of 1/8 of an inch. The square's upper left corner is four inches from the left and\nthree inches from the top of the print area:\nlong Job\n// Define a new blank page.\nJob = PrintOpen()\n// Print the rectangle on the page.\nPrintRect(Job, 4000,3000, 1000,1000, 125)\n... // Other printing\nPrintClose(Job)\nSee also\nPrintBitmap\nPrintClose\nPrintLine\nPrintOpen\nPrintOval\nPrintRoundRect\n2.4.600 PrintRoundRect\nDescription\n"}
{"page": 1231, "text": "Statements, Events, and Functions\nPage 1231\nDraws a white rectangle with rounded corners and a border of the specified thickness on the\nprint page.\nSyntax\nPrintRoundRect ( printjobnumber, x, y, width, height, xradius, yradius, thickness )\nTable 2.1097:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nx\nAn integer specifying the x coordinate in thousandths of an inch of the\nupper-left corner of the rectangle\ny\nAn integer specifying the y coordinate in thousandths of an inch of the\nupper-left corner of the rectangle\nwidth\nAn integer specifying the rectangle's width in thousandths of an inch\nheight\nAn integer specifying the rectangle's height in thousandths of an inch\nxradius\nAn integer specifying the x radius of the corner rounding\nyradius\nAn integer specifying the y radius of the corner rounding\nthickness\nAn integer specifying the thickness of the rectangle's border line in\nthousandths of an inch\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintRoundRect returns null.\nUsage\nThe PrintOval, PrintRect, and PrintRoundRect functions draw filled shapes. To print other\nshapes or text inside the shapes, draw the filled shape first and then add text and other shapes\nor lines inside it. If you draw the filled shape after other printing functions, it will cover\nanything inside it. For example, to draw a border around text and lines, draw the oval or\nrectangular border first and then use PrintLine and PrintText to position the lines and text\ninside.\nPrintRoundRect does not change the position of the print cursor, which remains where it was\nbefore the function was called. In general, print functions in which you specify coordinates\ndo not affect the print cursor.\nExamples\nThis example starts a new print job, which begins a new page, and prints a rectangle with\nrounded corners as a page border. Then it closes the print job, which sends the page to the\nprinter.\nThe rectangle is 6 1/4 inches wide by 9 inches high and its upper corner is one inch from the\ntop and one inch from the left edge of the print area. The border has a line thickness of 1/8 of\nan inch and the corner radius is 300:\nlong Job\n"}
{"page": 1232, "text": "Statements, Events, and Functions\nPage 1232\n \n// Define a new blank page.\nJob = PrintOpen()\n \n// Print a RoundRectangle on the page.\nPrintRoundRect(Job, 1000,1000, 6250,9000, &\n   300,300, 125)\n \n// Send the page to the printer.\nPrintClose(Job)\nSee also\nPrintBitmap\nPrintClose\nPrintLine\nPrintOpen\nPrintOval\nPrintRect\n2.4.601 PrintScreen\nDescription\nPrints the screen image as part of a print job.\nSyntax\nPrintScreen ( printjobnumber, x, y {, width, height } )\nTable 2.1098:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigns to the print job.\nx\nAn integer whose value is the x coordinate on the page, in thousandths of\nan inch, of the upper-left corner of the screen image.\ny\nAn integer whose value is the y coordinate on the page, in thousandths of\nan inch, of the upper-left corner of the screen image.\nwidth (optional)\nThe integer width of the printed screen in thousandths of an inch. If you\nomit width, PowerBuilder prints the screen at its original width. If you\nspecify width, you must also specify height.\nheight (optional)\nThe integer height of the printed screen in thousandths of an inch. If you\nomit height, PowerBuilder prints the screen at its original height.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintScreen returns null.\nExamples\n"}
{"page": 1233, "text": "Statements, Events, and Functions\nPage 1233\nThis statement prints the current screen image in its original size at location 500, 1000:\nlong Job\nJob = PrintOpen()\nPrintScreen(Job, 500,1000)\nPrintClose(Job)\nSee also\nPrint\nPrintClose\nPrintOpen\n2.4.602 PrintSend (obsolete)\nDescription\nSends an arbitrary string of characters to the printer. PrintSend is usually used for sending\nescape sequences that change the printer's setup.\nObsolete function\nPrintSend is an obsolete function and is provided for backward compatibility only.\nThe ability to use this function is dependent upon the printer driver.\nSyntax\nPrintSend ( printjobnumber, string {, zerochar } )\nTable 2.1099:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job.\nstring\nA string you want to send to the printer. In the string, use ASCII values\nfor nonprinting characters.\nzerochar\n(optional)\nAn ASCII value (1 to 255) that you want to use to represent the number\nzero in string.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintSend returns null.\nUsage\nUse PrintSend to send escape sequences to specific printers (for example, to set condensed\nmode or to set margins). Escape sequences are printer specific.\nAs with any string, the number zero terminates the string argument. If the printer code you\nwant to send includes a zero, you can use another character for zero in string and specify\nthe character that represents zero in zerochar. The character you select should be a character\nyou do not usually use. When PowerBuilder sends the string to the printer it converts the\nsubstitute character to a zero.\n"}
{"page": 1234, "text": "Statements, Events, and Functions\nPage 1234\nA typical print job, in which you want to make printer-specific settings, might consist of the\nfollowing function calls:\n1. PrintOpen\n2. PrintSend, to change the printer orientation, select a tray, and so on\n3. PrintDefineFont and PrintSetFont to specify fonts for the job\n4. Print to output job text\n5. PrintClose\nExamples\nThis example opens a print job and sends an escape sequence to a printer in IBM Proprinter\nmode to change the margins. There is no need to designate a character to represent zero:\nlong Job\n \n// Open a print job.\nJob = PrintOpen()\n \n/* Send the escape sequence.\n1B is the escape character in hexadecimal.\nX indicates that you are changing the margins.\n030 sets the left margin to 30 character spaces.\n040 sets the right margin to 40 character spaces.\n*/\nPrintSend(Job,\" ~ h1BX ~ 030 ~ 040\")\n... // Print text or DataWindow\n \n// Send the job to the printer or spooler.\nPrintClose(Job)\nThis example opens a print job and sends an escape sequence to a printer in IBM Proprinter\nmode to change the margins. The decimal ASCII code 255 represents zero:\nlong Job\n \n// Open a print job.\nJob = PrintOpen()\n \n/* Send the escape sequence.\n1B is the escape character, in hexadecimal.\nX indicates that you are changing the margins.\n255 sets the left margin to 0.\n040 sets the right margin to 40 character spaces.\n*/\nPrintSend(Job, \"~h1BX~255~040\", 255)\nPrintDataWindow(Job, dw_1)\n \n// Send the job to the printer or spooler.\nPrintClose(Job)\nSee also\nPrintClose\nPrintOpen\n"}
{"page": 1235, "text": "Statements, Events, and Functions\nPage 1235\n2.4.603 PrintSetFont\nDescription\nDesignates a font to be used for text printed with the Print function. You specify the font by\nnumber. Use PrintDefineFont to associate a font number with the desired font, a size, and a\nset of properties.\nSyntax\nPrintSetFont ( printjobnumber, fontnumber )\nTable 2.1100:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nfontnumber\nThe number (1 to 8) of a font defined for the job in PrintDefineFont or 0\n(the default font for the printer)\nReturn value\nInteger. Returns the character height of the current font if it succeeds and -1 if an error\noccurs. If any argument's value is null, PrintSetFont returns null.\nExamples\nThis example starts a new print job and specifies that font number 2 is Courier, 18 point,\nbold, default pitch, in modern font, with no italic or underline. The PrintSetFont statement\nsets the current font to font 2. Then the Print statement prints the company name:\nlong Job\n \n// Start a new print job and a new page.\nJob = PrintOpen()\n \n// Define the font for Job.\nPrintDefineFont(Job, 2, \"Courier 10Cps\", &\n   250, 700, Default!, Modern!, FALSE, FALSE)\n \n// Set the font for Job.\nPrintSetFont(Job, 2)\n \n// Print the company name in the specified font.\nPrint(Job,\"Appeon Corporation\")\nSee also\nPrintDefineFont\nPrintOpen\n2.4.604 PrintSetPrinter\nDescription\nSets the printer to use for the next print function call. This function does not affect open jobs.\nSyntax\n"}
{"page": 1236, "text": "Statements, Events, and Functions\nPage 1236\nPrintSetPrinter ( printername )\nTable 2.1101:\nArgument\nDescription\nprintername\nString for the name of the printer you want to use\nReturn value\nInteger. Returns 1 if the function succeeds and -1 if an error occurs.\nUsage\nThe printername argument must use the same format as returned by the PrintGetPrinter\nfunction.\nExamples\nThis example sets the printer to the first printer in the list retrieved by the PrintGetPrinters\nfunction:\nlong ll_place\nstring ls_setprn\nstring ls_prntrs = PrintGetPrinters ( )\nll_place=pos (ls_prntrs, \"~n\") \nmle_1.text = PrintGetPrinters ( )\nls_setprn = Left (ls_prntrs, ll_place - 1)\nPrintSetPrinter (ls_setprn)\nSee also\nPrintGetPrinter\nPrintGetPrinters\n2.4.605 PrintSetSpacing\nDescription\nSets the factor that PowerBuilder uses to calculate line spacing.\nSyntax\nPrintSetSpacing ( printjobnumber, spacingfactor )\nTable 2.1102:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job.\nspacingfactor\nThe number by which you want to multiply the character height to\ndetermine the vertical line-to-line spacing. The default is 1.2.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintSetSpacing returns null.\n"}
{"page": 1237, "text": "Statements, Events, and Functions\nPage 1237\nUsage\nLine spacing in PowerBuilder is proportional to character height. The default line spacing\nis 1.2 times the character height. When Print starts a new line, it sets the x coordinate of the\ncursor to 0 and increases the y coordinate by the current line spacing. The PrintSetSpacing\nfunction lets you specify a new factor to be multiplied by the character height for an open\nprint job.\nExamples\nThese statements start a new print job and set the vertical spacing factor to 1.5 (one and a half\nspacing):\nlong Job\n \n// Define a new blank page.\nJob = PrintOpen()\n \n// Set the spacing factor.\nPrintSetSpacing(Job, 1.5)\nSee also\nPrintOpen\n2.4.606 PrintSetup\nDescription\nCalls the Printer Setup dialog box provided by the system printer driver and lets the user\nspecify settings for the printer.\nSyntax\nPrintSetup ( )\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs or if the application user clicks\nCancel in the Printer Setup dialog box.\nUsage\nThe user's settings have effect for the duration of the application only. After the application\nexits, printer settings revert to their previous values.\nExamples\nThese statements call the Printer Setup dialog box for the current system printer and then start\na new print job:\nlong Job\n \n// Call the printer setup program.\nPrintSetup()\n \n// Start a job and a new page.\nJob = PrintOpen()\nSee also\n"}
{"page": 1238, "text": "Statements, Events, and Functions\nPage 1238\nPrintOpen\n2.4.607 PrintSetupPrinter\nDescription\nDisplays the printer setup dialog box\nSyntax\nPrintSetupPrinter ( )\nReturn value\nInteger. Returns 1 if the function succeeds, 0 for cancel, -1 if an error occurs.\nUsage\nYou can display the printer setup dialog box for different printers by first calling the\nPrintSetPrinter function. You cannot change the printer by calling PrintSetupPrinter as you\ncan with the PrintSetup function.\nExamples\nThis example displays the printer setup dialog box for the last printer in the list retrieved by\nthe PrintGetPrinters function.\nlong ll_place\nstring ls_setptr\nstring ls_prntrs = PrintGetPrinters ( )\n \nll_place=lastpos (ls_prntrs, \"~n\") \nls_setptr = Mid (ls_prntrs, ll_place + 1)\nPrintSetPrinter (ls_setptr)\nPrintSetupPrinter ()\nSee also\nPrintGetPrinter\nPrintSetPrinter\nPrintSetup\n2.4.608 PrintText\nDescription\nPrints a single line of text starting at the specified coordinates.\nSyntax\nPrintText ( printjobnumber, string, x, y {, fontnumber } )\nTable 2.1103:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job.\nstring\nA string whose value is the text you want to print.\n"}
{"page": 1239, "text": "Statements, Events, and Functions\nPage 1239\nArgument\nDescription\nx\nAn integer specifying the x coordinate in thousandths of an inch of the\nbeginning of the text.\ny\nAn integer specifying the y coordinate in thousandths of an inch of the\nbeginning of the text.\nfontnumber\n(optional)\nThe number (1 to 8) of a font defined for the job by using the\nPrintDefineFont function or 0 (the default font for the printer). If you\nomit fontnumber, the text prints in the current font for the print job.\nReturn value\nInteger. Returns the x coordinate of the new cursor location (that is, the value of the\nparameter x plus the width of the text) if it succeeds. PrintText returns -1 if an error occurs. If\nany argument's value is null, PrintText returns null.\nUsage\nPrintText does change the position of the print cursor, unlike the other print functions\nfor which you specify coordinates. The print cursor moves to the end of the printed text.\nPrintText also returns the x coordinate of the print cursor. You can use the return value to\ndetermine where to begin printing additional text.\nPrintText does not change the print cursor's y coordinate, which is its vertical position on the\npage.\nExamples\nThese statements start a new print job and then print PowerBuilder in the current font 3.7\ninches from the left edge at the top of the page (location 3700,10):\nlong Job\n \n// Define a new blank page.\nJob = PrintOpen()\n \n// Print the text.\nPrintText(Job,\"PowerBuilder\", 3700, 10)\n... // Other printing\nPrintClose(Job)\nThe following statements define a new blank page and then print Confidential in bold (as\ndefined for font number 3), centered at the top of the page:\nlong Job\n \n// Start a new job and a new page.\nJob = PrintOpen()\n \n// Define the font.\nPrintDefineFont(Job, 3, &\n   \"Courier 10Cps\", 250,700, &\n      Default!, AnyFont!, FALSE, FALSE)\n \n// Print the text.\nPrintText(Job, \"Confidential\", 3700, 10, 3)\n... // Other printing\nPrintClose(Job)\n"}
{"page": 1240, "text": "Statements, Events, and Functions\nPage 1240\nThis example prints four lines of text in the middle of the page. The coordinates for PrintText\nestablish a new vertical position for the print cursor, which the subsequent Print functions\nuse and increment. The first Print function uses the x coordinate returned by PrintText to\ncontinue the first line. The rest of the Print functions print additional lines of text, after\ntabbing to the x coordinate used initially by PrintText. In this example, each Print function\nincrements the y coordinate so that the following Print function starts a new line:\nlong Job\n \n// Start a new job and a new page.\nJob = PrintOpen()\n \n// Print the text.\nx =  PrintText(Job,\"The material \", 2000, 4000)\nPrint(Job, x, \" in this report\")\nPrint(Job, 2000, \"is confidential and should not\")\nPrint(Job, 2000, \"be disclosed to anyone who\")\nPrint(Job, 2000, \"is not at this meeting.\")\n... // Other printing\nPrintClose(Job)\nSee also\nPrint\nPrintClose\nPrintOpen\n2.4.609 PrintWidth\nDescription\nDetermines the width of a string using the current font of the specified print job.\nSyntax\nPrintWidth ( printjobnumber, string )\nTable 2.1104:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nstring\nA string whose value is the text for which you want to determine the\nwidth\nReturn value\nInteger. Returns the width of string in thousandths of an inch using the current font of\nprintjobnumber if it succeeds and -1 if an error occurs. If any argument's value is null,\nPrintWidth returns null. If the returned width exceeds the maximum integer limit (+32767),\nPrintWidth returns -1.\nExamples\nThese statements define a new blank page and then set W to the length of the string\nPowerBuilder in the current font and then use the length to position the next text line:\n"}
{"page": 1241, "text": "Statements, Events, and Functions\nPage 1241\nlong Job\nint W\n \n// Start a new print job.\nJob = PrintOpen()\n \n// Determine the width of the text.\nW = PrintWidth(Job,\"PowerBuilder\")\n \n// Use the width to get the next print position.\nPrint(Job, W - 500, \"Features List\")\nSee also\nPrintClose\nPrintOpen\n2.4.610 PrintX\nDescription\nReports the x coordinate of the print cursor.\nSyntax\nPrintX ( printjobnumber )\nTable 2.1105:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nReturn value\nInteger. Returns the x coordinate of the print cursor if it succeeds and -1 if an error occurs. If\nany argument's value is null, PrintX returns null.\nExamples\nThese statements set LocX to the x coordinate of the cursor and print End of Report an inch\nbeyond that location:\ninteger LocX\nlong Job\nJob = PrintOpen()\n... //Print statements\nLocX = PrintX(Job)\nPrint(LocX+1000, \"End of Report\")\nSee also\nPrintY\n2.4.611 PrintY\nDescription\nReports the y coordinate of the print cursor.\n"}
{"page": 1242, "text": "Statements, Events, and Functions\nPage 1242\nSyntax\nPrintY ( printjobnumber )\nTable 2.1106:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned to the print job\nReturn value\nInteger. Returns the y coordinate of the cursor if it succeeds and -1 if an error occurs. If any\nargument's value is null, PrintY returns null.\nExamples\nThese statements print a bitmap one inch below the location of the print cursor:\ninteger LocX, LocY\nlong Job\nJob = PrintOpen()\n... //Print statements\nLocX = PrintX(Job)\nLocY = PrintY(Job) + 1000\nPrintBitmap(Job, \"CORP.BMP\", LocX, LocY, 1000,1000)\nSee also\nPrintX\n2.4.612 ProfileInt\nDescription\nObtains the integer value of a setting in the profile file for your application.\nSyntax\nProfileInt ( filename, section, key, default )\nTable 2.1107:\nArgument\nDescription\nfilename\nA string whose value is the name of the profile file. If you do not specify\na full path, ProfileInt uses the operating system's standard file search\norder to find the file.\nsection\nA string whose value is the name of a group of related values in the\nprofile file. In the file, section names are in square brackets. Do not\ninclude the brackets in section. Section is not case sensitive.\nkey\nA string specifying the setting name in section whose value you want.\nThe setting name is followed by an equal sign in the file. Do not include\nthe equal sign in key. Key is not case sensitive.\ndefault\nAn integer value that ProfileInt will return if filename is not found, if\nsection or key does not exist in filename, or if the value of key cannot be\nconverted to an integer.\n"}
{"page": 1243, "text": "Statements, Events, and Functions\nPage 1243\nReturn value\nInteger. Returns default if filename is not found, section is not found in filename, or key is\nnot found in section, or the value of key is not an integer. Returns -1 if an error occurs. If any\nargument's value is null, ProfileInt returns null.\nUsage\nUse ProfileInt or ProfileString to get configuration settings from a profile file that you have\ndesigned for your application.\nYou can use SetProfileString to change values in the profile file to customize your\napplication's configuration at runtime. Before you make changes, you can use ProfileInt and\nProfileString to obtain the original settings so you can restore them when the user exits the\napplication.\nProfileInt, ProfileString, and SetProfileString can read or write to files with ANSI or UTF16-\nLE encoding on Windows systems, and ANSI or UTF16-BE encoding on UNIX systems.\nWindows registry\nProfileInt can also be used to obtain configuration settings from the Windows system\nregistry. For information on how to use the system registry, see the discussion of\ninitialization files and the Windows registry in Section 8.4, \u201cManaging Initialization\nFiles and the Windows Registry\u201d in Application Techniques.\nExamples\nThese examples use a file called PROFILE.INI, which contains the following:\n[Pb]\nMaximized=1\n[security]\nClass=7\nThis statement returns the integer value for the keyword Maximized in section PB of file\nPROFILE.INI. If there were no PB section or no Maximized keyword in the PB section, it\nwould return 3:\nProfileInt(\"C:\\PROFILE.INI\", \"PB\", \"maximized\", 3)\nThe following statements display a MessageBox if the integer value for the Class setting in\nsection Security of file C:\\PROFILE.INI is less than 10. The default security setting is 6 if the\nprofile file is not found or does not contain a Class setting:\nIF ProfileInt(\"C:\\PROFILE.INI\", \"Security\", &\n   \"Class\", 6) < 10 THEN\n   // Class is < 10\n   MessageBox(\"Warning\", \"Access Denied\")\nELSE\n ... // Some processing\nEND IF\nSee also\nProfileString\nSetProfileString\n"}
{"page": 1244, "text": "Statements, Events, and Functions\nPage 1244\nProfileInt method for DataWindows in Section 2.4.95, \u201cProfileInt\u201d in DataWindow\nReference.\n2.4.613 ProfileString\nDescription\nObtains the string value of a setting in the profile file for your application.\nSyntax\nProfileString ( filename, section, key, default )\nTable 2.1108:\nArgument\nDescription\nfilename\nA string whose value is the name of the profile file. If you do not specify\na full path, ProfileString uses the operating system's standard file search\norder to find the file.\nsection\nA string whose value is the name of a group of related values in the\nprofile file. In the file, section names are in square brackets. Do not\ninclude the brackets in section. Section is not case sensitive.\nkey\nA string specifying the setting name in section whose value you want.\nThe setting name is followed by an equal sign in the file. Do not include\nthe equal sign in key. Key is not case sensitive.\ndefault\nA string value that ProfileString will return if filename is not found, if\nsection or key does not exist in filename, or if the value of key cannot be\nconverted to an integer.\nReturn value\nString, with a maximum length of 4096 characters. Returns the string from key within section\nwithin filename. If filename is not found, section is not found in filename, or key is not found\nin section, ProfileString returns default. If an error occurs, it returns the empty string (\"\"). If\nany argument's value is null, ProfileString returns null.\nUsage\nUse ProfileInt or ProfileString to get configuration settings from a profile file that you have\ndesigned for your application.\nYou can use SetProfileString to change values in the profile file to customize your\napplication's configuration at runtime. Before you make changes, you can use ProfileInt and\nProfileString to obtain the original settings so you can restore them when the user exits the\napplication.\nProfileInt, ProfileString, and SetProfileString can read or write to files with ANSI or UTF16-\nLE encoding on Windows systems, and ANSI or UTF16-BE encoding on UNIX systems.\nWindows registry\nProfileString can also be used to obtain configuration settings from the Windows\nsystem registry. For information on how to use the system registry, see the\n"}
{"page": 1245, "text": "Statements, Events, and Functions\nPage 1245\ndiscussion of initialization files and the Windows registry in Section 8.4, \u201cManaging\nInitialization Files and the Windows Registry\u201d in Application Techniques.\nExamples\nThese examples use a file called PROFILE.INI, which contains the following lines. Quotes\naround string values in the INI file are optional:\n[Employee]\nName=Smith\n[Dept]\nName=Marketing\nThis statement returns the string contained in keyword Name in section Employee in file C:\n\\PROFILE.INI and returns None if there is an error. In the example, the return value is Smith:\nProfileString(\"C:\\PROFILE.INI\", \"Employee\", &\n   \"Name\", \"None\")\nThe following statements open w_marketing if the string in the keyword Name in section\nDepartment of file C:\\PROFILE.INI is Marketing:\nIF ProfileString(\"C:\\PROFILE.INI\", \"Department\", &\n   \"Name\", \"None\") = \"Marketing\" THEN\n   Open(w_marketing)\nEND IF\nSee also\nProfileInt\nSetProfileString\nProfileString method for DataWindows in Section 2.4.96, \u201cProfileString\u201d in DataWindow\nReference.\n2.4.614 Rand\nDescription\nObtains a random whole number between 1 and a specified upper limit.\nSyntax\nRand ( n ) \nTable 2.1109:\nArgument\nDescription\nn\nThe upper limit of the range of random numbers you want returned. The\nlower limit is always 1. The upper limit is 32,767.\nReturn value\nA numeric datatype, the datatype of n. Returns a random whole number between 1 and n\ninclusive. If n is null, Rand returns null.\n"}
{"page": 1246, "text": "Statements, Events, and Functions\nPage 1246\nUsage\nThe sequence of numbers generated by repeated calls to the Rand function is a pseudorandom\nsequence. You can control whether the sequence is different each time your application runs\nby calling the Randomize function to initialize the random number generator.\nExamples\nThis statement returns a random whole number between 1 and 10:\nRand(10)\nSee also\nRandomize\n2.4.615 Randomize\nDescription\nInitializes the random number generator so that the Rand function begins a new series of\npseudorandom numbers.\nSyntax\nRandomize ( n )\nTable 2.1110:\nArgument\nDescription\nn\nThe starting value (seed) for the random number generator. When n\nis 0, PowerBuilder takes the seed from the system clock and begins a\nnonrepeatable sequence. A nonzero number generates a different but\nrepeatable sequence for each seed value. n cannot exceed 32,767.\nReturn value\nInteger. If n is null, Randomize returns null. The return value is never used.\nUsage\nThe sequence of numbers generated by repeated calls to the Rand function is a computer-\ngenerated pseudorandom sequence. You can use the Randomize function to initialize the\nrandom number generator with a value from the system clock, or some other changing value,\nso that the sequence is always different. For testing purposes, you can select a specific seed\nvalue, which you can reuse to make the pseudorandom sequence repeatable each time you\nrun the application.\nInclude Randomize in the script for the Open event in the application.\nExamples\nThis statement sets the seed for the random number generator to 0 so that calls to Rand\ngenerate a new sequence each time the script is run:\nRandomize(0)\n"}
{"page": 1247, "text": "Statements, Events, and Functions\nPage 1247\nThis statement sets the seed for the random number generator to 4 so that calls to Rand repeat\na specific sequence each time the random number generator is initialized:\nRandomize(4)\nSee also\nRand\n2.4.616 Read\nReads data from an opened OLE stream object.\nTable 2.1111:\nTo\nUse\nRead data into a string\nSyntax 1\nRead data into a character array or blob\nSyntax 2\n2.4.616.1 Syntax 1: For reading into a string\nDescription\nReads data from an OLE stream object into a string.\nApplies to\nOLEStream objects\nSyntax\nolestream.Read ( variable {, stopforline } )\nTable 2.1112:\nArgument\nDescription\nolestream\nThe name of an OLE stream variable that has been opened.\nvariable\nThe name of a string variable into which want to read data from\nolestream.\nstopforline\n(optional)\nA boolean value that specifies whether to read a line at a time. In other\nwords, Read will stop reading at the next carriage return/linefeed. Values\nare:\n\u2022 TRUE -- (Default) Stop at the end of a line and leave the read pointer\npositioned after the carriage return/linefeed so the next read will read\nthe next line\n\u2022 FALSE -- Read the whole stream or a maximum of 32,765 bytes\nReturn value\nInteger. Returns the number of characters or bytes read. If an end-of-file mark (EOF) is\nencountered before any characters are read, Read returns -100. Read returns one of the\nfollowing negative values if an error occurs:\n"}
{"page": 1248, "text": "Statements, Events, and Functions\nPage 1248\n-1 -- Stream is not open\n-2 -- Read error\n-9 -- Other error\nIf any argument's value is null, Read returns null.\nExamples\nThis example opens an OLE object in the file MYSTUFF.OLE and assigns it to the\nOLEStorage object stg_stuff. Then it opens the stream called info in stg_stuff and assigns\nit to the stream object olestr_info. Finally, it reads the contents of olestr_info into the string\nls_info.\nThe example does not check the functions' return values for success, but you should be sure\nto check the return values in your code:\nboolean lb_memexists\nOLEStorage stg_stuff\nOLEStream olestr_info\nblob ls_info\n \nstg_stuff = CREATE OLEStorage\nstg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\n \nolestr_info.Open(stg_stuff, \"info\", &\n    stgRead!, stgExclusive!)\nolestr_info.Read(ls_info)\nSee also\nOpen\nLength\nSeek\nWrite\n2.4.616.2 Syntax 2: For character arrays or blobs\nDescription\nReads data from an OLE stream object into a character array or blob.\nApplies to\nOLEStream objects\nSyntax\nolestream.Read ( variable {, maximumread } )\nTable 2.1113:\nArgument\nDescription\nolestream\nThe name of an OLE stream variable that has been opened.\nvariable\nThe name of a blob variable or character array into which want to read\ndata from olestream.\n"}
{"page": 1249, "text": "Statements, Events, and Functions\nPage 1249\nArgument\nDescription\nmaximumread\n(optional)\nA long value specifying the maximum number of bytes to be read. The\ndefault is 32,765 or the length of olestream.\nReturn value\nInteger. Returns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Stream is not open\n-2 -- Read error\n-9 -- Other error\nIf any argument's value is null, Read returns null.\nExamples\nThis example opens an OLE object in the file MYSTUFF.OLE and assigns it to the\nOLEStorage object stg_stuff. Then it opens the stream called info in stg_stuff and assigns\nit to the stream object olestr_info. Finally, it reads the contents of olestr_info into the blob\nlb_info.\nThe example does not check the functions' return values for success, but you should be sure\nto check the return values in your code:\nboolean lb_memexists\nOLEStorage stg_stuff\nOLEStream olestr_info\nblob lb_info\n \nstg_stuff = CREATE OLEStorage\nstg_stuff.Open(\"c:\\ole2\\mystuff.ole\")\n \nolestr_info.Open(stg_stuff, \"info\", &\n    stgRead!, stgExclusive!)\nolestr_info.Read(lb_info)\nSee also\nOpen\nLength\nSeek\nWrite\n2.4.617 ReadData\nDescription\nReads the response body.\nApplies to\nHTTPClient objects\nSyntax\nobjectname.ReadData ( data, bufferSize )\n"}
{"page": 1250, "text": "Statements, Events, and Functions\nPage 1250\nTable 2.1114:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient object for which you want to read the\nresponse body.\ndata\nA blob value into which the function returns data.\nbufferSize\nA long value specifying the buffer size.\nReturn value\nInteger.\nReturns values as follows. If any argument's value is null, the method returns null.\n1 -- Success\n0 -- Reading data is finished\n-1 -- General error\n-2 -- Timed out\nExample 1\nInteger li_rc\nBlob lblb_photo, lblb_NextData\nHttpClient lnv_HttpClient \nlnv_HttpClient = Create HttpClient\n// Not to read data automatically after sending request (default is true)\nlnv_HttpClient.AutoReadData = false\n// Send request using GET method\nli_rc = lnv_HttpClient.SendRequest(\"GET\", \"https://demo.appeon.com/PB/\nwebapi_client/employee/102/photo\")\n// Receive large data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n do while true\n  li_rc = lnv_HttpClient.ReadData(lblb_NextData, 1024*16)\n  if li_rc = 0 then exit // Finish receiving data\n  if li_rc = -1 then exit // Error occurred\n  lblb_photo += lblb_NextData\n loop\nend if\nExample 2\nThis example demonstrates how to get large data (over 20 MB):\nLong ll_FileNum, ll_rtn, ll_loop, ll_len\nDec{0} ldc_Count, ldc_Length\nBlob lb_temp\nString ls_url, ls_response, ls_Length\nHttpClient lhc_Client\nlhc_Client = Create HttpClient\nlhc_Client.ClearRequestHeaders()\n"}
{"page": 1251, "text": "Statements, Events, and Functions\nPage 1251\nls_url  = \"https://download.test.com/file001.zip\"\n// Use HEAD method to get the file size\nll_rtn = lhc_Client.sendrequest( \"HEAD\", ls_url )\nls_response = lhc_Client.GetResponseHeaders()\nls_Length = lhc_Client.GetResponseHeader( \"Content-Length\" )\nldc_Length = Dec ( ls_Length )\nIf ldc_Length <= 0 Then\n                MessageBox( \"Tips\", \"File length is zero.\" )\n                Return\nEnd If\nll_len = Long ( ldc_Length / 10000 )\nhpb_1.maxposition = 10000  // hpb_1 is a hprogressbar control\nhpb_1.position = 0\n// Not to read data automatically after sending request (default is true)\nlhc_Client.autoreaddata = false\nll_rtn = lhc_Client.sendrequest( \"GET\", ls_url )\n//Receive 16KB data every time\nll_loop = 1024 * 16\n//Write data to the file, because the blob variable is not suitable for large data\nll_FileNum = FileOpen(\"file001.zip\", StreamMode!, Write!, LockWrite!, Replace!)\nDo While ( ll_rtn = 1 )\n                lb_temp = Blob ( \"\" )\n                ll_rtn = lhc_Client.ReadData( lb_temp, ll_loop)\n                FileWrite(ll_FileNum, lb_temp)\n                ldc_Count  += Len ( lb_temp )\n                hpb_1.position = Long( ldc_Count/ll_len)\n                yield()\nLoop\nFileClose(ll_FileNum)\nIf IsValid ( lhc_Client ) Then Destroy ( lhc_Client )\n2.4.618 Real\nDescription\nConverts a string value to a real datatype or obtains a real value that is stored in a blob.\nSyntax\nReal ( stringorblob )\nTable 2.1115:\nArgument\nDescription\nstringorblob\nThe string whose value you want returned as a real value or a blob in\nwhich the first value is the real value. The rest of the contents of the blob\nis ignored. Stringorblob can also be an Any variable containing a string\nor blob.\nReturn value\nReal. Returns the value of stringorblob as a real. If stringorblob is not a valid PowerScript\nnumber or is an incompatible datatype, Real returns 0. If stringorblob is null, Real returns\nnull.\nExamples\n"}
{"page": 1252, "text": "Statements, Events, and Functions\nPage 1252\nThis statement returns 24 as a real:\nReal(\"24\")\nThis statement returns the contents of the SingleLineEdit sle_Temp as a real:\nReal(sle_Temp.Text)\nThe following example, although of no practical value, illustrates how to assign real values\nto a blob and how to use Real to extract those values. The two BlobEdit statements store\ntwo real values in the blob, one after the other. In the statements that use Real to extract the\nvalues, you have to know where the beginning of each real value is. Specifying the correct\nlength in BlobMid is not important because the Real function knows how many bytes to\nevaluate:\nblob{20} lb_blob\nreal r1, r2\ninteger len1, len2\n \nlen1 = BlobEdit(lb_blob, 1, 32750E0)\nlen2 = BlobEdit(lb_blob, len1, 43750E0)\n \n// Extract the real value at the beginning and\n// ignore the rest of the blob\nr1 = Real(lb_blob)\n// Extract the second real value stored in the blob\nr2 = Real(BlobMid(lb_blob, len1, len2 - len1))\nSee also\nDouble\nInteger\nLong\nReal method for DataWindows in Section 2.4.98, \u201cReal\u201d in DataWindow Reference.\n2.4.619 RecognizeText\nDescription\nSpecifies that text in an InkEdit control should be recognized.\nApplies to\nInkEdit controls\nSyntax\ninkeditname.RecognizeText ( )\nTable 2.1116:\nArgument\nDescription\ninkeditname\nThe name of the InkEdit control in which you want to recognize text.\nReturn value\n"}
{"page": 1253, "text": "Statements, Events, and Functions\nPage 1253\nInteger. Returns 1 if text is recognized and 0 otherwise.\nUsage\nBy default, ink is recognized automatically when the user pauses while entering ink and the\nnumber of milliseconds specified in the RecognitionTimer property elapses. To enable a user\nto pause without having text recognized, increase the RecognitionTimer interval and code the\nRecognizeText function in a button clicked event or another event.\nExamples\nThis code in the clicked event of a \"Done\" button causes the recognition engine to recognize\nthe strokes entered by the user as text:\nboolean lb_success\nlb_success = ie_1.RecognizeText()\n2.4.620 Refresh\nDescription\nRefreshes the current Web page.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.Refresh ( )\nTable 2.1117:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nExamples\nInteger li_rtn\nLi_rtn = wb_1.Refresh()\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\n"}
{"page": 1254, "text": "Statements, Events, and Functions\nPage 1254\nNavigate\nPrintAsPDF\nPauseDownload\nRegisterEvent\nResumeDownload\nStopNavigation\nUnregisterEvent\nZoom\n2.4.621 RegisterEvent\nDescription\nRegisters the PowerBuilder user defined event so they can be triggered in JavaScript.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.RegisterEvent (string eventname) \nTable 2.1118:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\neventname\nThe name of the user-defined event to be registered.\nReturn value\nInteger.\nReturns values as follows.\n1 -- the event is registered successfully.\n-1 -- the event is already registered.\n-2 -- failed to get the browser instance.\nUsage\nThe initialization of the WebBrowser control is run as a separate process from the\nPowerBuilder application. Therefore, if the WebBrowser control is being initialized while\nyou register the event in PowerBuilder, the registration will fail. To avoid such issue, it\nis recommended that you trigger the NavigateStart event first. If NavigateStart can be\ntriggered successfully, it indicates that WebBrowser is completely initialized. For example,\nyou can add the following code to the NavigateStart event:\nIF ib_RegisterEvent = FALSE THEN                               \n   Int li_rc \n   li_rc = wb_1.RegisterEvent ( \"ue_getstring\" ) \n"}
{"page": 1255, "text": "Statements, Events, and Functions\nPage 1255\n   IF li_rc =1 THEN\n      ib_RegisterEvent =TRUE\n   END IF\nEND IF\nExample 1\nThe following example defines a PowerBuilder user event which is then triggered in\nJavaScript in wb_1, and the result of the JavaScript which is returned in a JSON string is\nparsed by the JSONParser object.\nNote that this user event should not call any other WebBrowser function, otherwise the\napplication may get stuck.\n//define a user event: ue_getstring in wb_1\n//event type string ue_getstring(string as_arg);\nstring ls_String\nls_String = \"This is PB Event!\" + \"~r~nFrom JavaScript:\" + as_arg\nReturn ls_String\n//end event\nInteger li_Return\nString ls_JS, ls_Result, ls_Error\nJsonParser lnv_JsonParser\nLong ll_RootObject\nString ls_Type, ls_Value\nli_Return = wb_1.RegisterEvent(\"ue_getstring\")\nIf li_Return = 1 Then\n        ls_JS = \"function event1() { return\n window.webBrowser.ue_getstring('Hi,PB!');} event1();\"\n        li_Return = wb_1.EvaluateJavascriptSync(ls_JS, ls_Result, ls_Error)\n        If li_Return = 1 Then\n               lnv_JsonParser = Create JsonParser\n               lnv_JsonParser.LoadString(ls_Result)\n               ll_RootObject = lnv_JsonParser.GetRootItem()\n               ls_Value = lnv_JsonParser.GetItemString( ll_RootObject, \"value\" )\n        End If\nEnd If\n//{\"type\":\"string\",\"value\":\"This is PB Event!\\r\\nFrom JavaScript:Hi,PB!\"}\nMessageBox( \"Tips\", ls_Result )\n//This is PB Event!\n//From JavaScript:Hi,PB!\nMessageBox( \"Tips\", ls_Value )\nExample 2\nThe following example registers a PowerBuilder user event in the WebBrowser\nNavigationProgressIndex event, and then triggers the user event in JavaScript in an HTML\nfile.\nStep 1: Defines the user event: ue_getstring in the WebBrowser control.\n//event type string ue_getstring(string as_arg);\nstring ls_String\nls_String = \"This is PB Event!\" + \"~r~nFrom JavaScript:\" + as_arg\nsle_1.text = ls_String\nReturn ls_String\n//end event\nStep 2: Registers the user event: ue_getstring in the WebBrowser NavigationProgressIndex\nevent.\n"}
{"page": 1256, "text": "Statements, Events, and Functions\nPage 1256\nNote that the NavigationProgressIndex event will be triggered multiple times when the\nHTML page is being loaded.\n//Defines an instance variable ib_flag to determine whether the user event has been\n registered\nboolean ib_flag = true\n//event navigationprogressindex;\nInteger li_Return\nIf progressindex =100 Then \n If ib_flag Then \n  li_Return = wb_1.RegisterEvent(\"ue_getstring\")\n  If li_Return = 1 Then\n   ib_flag = False\n  End If\n End If\nEnd If\n//end event\nStep 3: Triggers the user event in JavaScript in the HTML page: page.html.\n<!DOCTYPE html>\n<html>\n<header>\n<meta charset=\"UTF-8\">\n</header>\n<body>\n<button type=\"button\" onclick=\"window.webBrowser.ue_getstring('Hi,PB!')\">\nCall PB event\n</button>\n<button type=\"button\" onclick=\"CallPBEvent()\">\nCall PB event with return\n</button>\n<script>\nfunction CallPBEvent(){\n                var ret = window.webBrowser.ue_getstring('Hi,PB!');\n                alert(ret);\n}\n</script>\n</body>\n</html>\nStep 4: Loads the HTML page in the WebBrowser control.\nwb_1.Navigate(\"file:///page.html\")\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\n"}
{"page": 1257, "text": "Statements, Events, and Functions\nPage 1257\nPrintAsPDF\nPauseDownload\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.622 RegistryDelete\nDescription\nDeletes a key or a value for a key in the Windows system registry.\nSyntax\nRegistryDelete ( key, valuename )\nTable 2.1119:\nArgument\nDescription\nkey\nA string whose value is the key in the system registry you want to delete\nor whose value you want to delete.\nTo uniquely identify a key, specify the list of parent keys above it in the\nhierarchy, starting with the root key. The keys in the list are separated by\nbackslashes.\nvaluename\nA string containing the name of a value in the registry. If the specified\nkey does not have a subkey, specifying an empty string deletes the key\nand its named values.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nUsage\nFor more information about entries in the system registry, see RegistrySet.\nExamples\nThis statement deletes the value name Title and its associated value from the registry. The\nkey is not deleted:\nRegistryDelete( &\n \"HKEY_LOCAL_MACHINE\\Software\\MyApp.Settings\\Fonts\", &\n \"Title\")\nSee also\nRegistryGet\n"}
{"page": 1258, "text": "Statements, Events, and Functions\nPage 1258\nRegistryKeys\nRegistrySet\nRegistryValues\n2.4.623 RegistryGet\nDescription\nGets a value from the Windows system registry.\nSyntax\nRegistryGet ( key, valuename {, valuetype }, valuevariable )\nTable 2.1120:\nArgument\nDescription\nkey\nA string whose value names the key in the system registry whose value\nyou want.\nTo uniquely identify a key, specify the list of parent keys above it in the\nhierarchy, starting with the root key. The keys in the list are separated by\nbackslashes.\nvaluename\nA string containing the name of a value in the registry. Each key can have\none unnamed value and several named values. For the unnamed value,\nspecify an empty string.\nvaluetype\nA value of the RegistryValueType enumerated datatype identifying the\ndatatype of a value in the registry. Values are:\n\u2022 RegString! -- A null-terminated string\n\u2022 RegExpandString! -- A null-terminated string that contains\nunexpanded references to environment variables\n\u2022 RegBinary! -- Binary data\n\u2022 ReguLong! -- A 32-bit number\n\u2022 ReguLongBigEndian! -- A 32-bit number\n\u2022 RegLongLong! -- A 64-bit number which is the longlong type ranging\nfrom 0 - 9,223,372,036,854,775,807, because the registry key value\ncannot accept a negative number.\n\u2022 RegLink! -- A Unicode symbolic link\n\u2022 RegMultiString! -- An unbounded array of strings\nvaluevariable\nA variable corresponding to the datatype of valuetype in which you want\nto store the value obtained from the system registry for the specified key\nand value name.\n"}
{"page": 1259, "text": "Statements, Events, and Functions\nPage 1259\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. An error is returned if the datatype\nof valuevariable does not correspond to the datatype specified in valuetype.\nUsage\nLong string values (more than 2048 bytes) should be stored as files and the file name stored\nin the registry. For more information about keys and value names in the system registry, see\nRegistrySet.\nExamples\nThis statement obtains the value for the name Title and stores it in the string ls_titlefont:\nstring ls_titlefont\nRegistryGet( &\n \"HKEY_LOCAL_MACHINE\\Software\\MyApp.Settings\\Fonts\", &\n   \"Title\", RegString!, ls_titlefont)\nThis statement obtains the value for the name NameOfEntryNum and stores it in the long\nul_num:\nulong ul_num\nRegistryGet(\"HKEY_USERS\\MyApp.Settings\\Fonts\", &\n    \"NameOfEntryNum\", RegULong!, ul_num)\nSee also\nRegistryDelete\nRegistryKeys\nRegistrySet\nRegistryValues\n2.4.624 RegistryKeys\nDescription\nObtains a list of the keys that are child items (subkeys) one level below a key in the Windows\nsystem registry.\nSyntax\nRegistryKeys ( key, subkeys )\nTable 2.1121:\nArgument\nDescription\nkey\nA string whose value names the key in the system registry whose subkeys\nyou want.\nTo uniquely identify a key, specify the list of parent keys above it in the\nhierarchy, starting with the root key. The keys in the list are separated by\nbackslashes.\nsubkeys\nAn array variable of strings in which you want to store the subkeys.\n"}
{"page": 1260, "text": "Statements, Events, and Functions\nPage 1260\nArgument\nDescription\nIf the array is variable size, its upper bound will reflect the number of\nsubkeys found.\nIf the array is fixed size, it must be large enough to hold all the subkeys.\nHowever, there will be no way to know how many subkeys were actually\nfound.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nUsage\nFor more information about entries in the system registry, see RegistrySet.\nExamples\nThis example obtains the subkeys associated with the key HKEY_CLASSES_ROOT\n\\MyApp. The subkeys are stored in the variable-size array ls_subkeylist:\nstring ls_subkeylist[]\ninteger li_rtn\nli_rtn = RegistryKeys(\"HKEY_CLASSES_ROOT\\MyApp\", &\n    ls_subkeylist)\nIF li_rtn = -1 THEN\n    ... // Error processing\nEND IF\nSee also\nRegistryDelete\nRegistryGet\nRegistrySet\nRegistryValues\n2.4.625 RegistrySet\nDescription\nSets the value for a key and value name in the system registry. If the key or value name does\nnot exist, RegistrySet creates a new key or name and sets its value.\nSyntax\nRegistrySet ( key, valuename, valuetype, value )\nTable 2.1122:\nArgument\nDescription\nkey\nA string whose value names the key in the system registry whose value\nyou want to set.\nTo uniquely identify a key, specify the list of parent keys above it in the\nhierarchy, starting with the root key. The keys in the list are separated by\nbackslashes.\n"}
{"page": 1261, "text": "Statements, Events, and Functions\nPage 1261\nArgument\nDescription\nIf key does not exist in the registry, RegistrySet creates a new key.\nTo create a key without a named value, specify an empty string for\nvaluename.\nvaluename\nA string containing the name of a value in the registry. Each key may\nhave several named values. To specify the unnamed value, specify an\nempty string.\nIf valuename does not exist in the registry, RegistrySet causes a new\nname to be created for key.\nvaluetype\nA value of the RegistryValueType enumerated datatype identifying the\ndatatype of a value in the registry. Values are:\n\u2022 RegString! -- A null-terminated string\n\u2022 RegExpandString! -- A null-terminated string that contains\nunexpanded references to environment variables\n\u2022 RegBinary! -- Binary data\n\u2022 ReguLong! -- A 32-bit number\n\u2022 ReguLongBigEndian! -- A 32-bit number\n\u2022 RegLongLong! -- A 64-bit number which is the longlong type ranging\nfrom 0 - 9,223,372,036,854,775,807, because the registry key value\ncannot accept a negative number.\n\u2022 RegLink! -- A Unicode symbolic link\n\u2022 RegMultiString! -- An unbounded array of strings\nvalue\nA variable corresponding to the datatype of valuetype containing a value\nto be set in the registry.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. An error is returned if the datatype\nof valuevariable does not correspond to the datatype specified in valuetype.\nUsage\nLong string values (more than 2048 bytes) should be stored as files and the file name stored\nin the registry.\nTable 2.1123:\nItem\nDescription\nKey\nAn element in the registry. A key is part of a tree of keys, descending\nfrom one of the predefined root keys. Each key is a subkey or child of the\nparent key above it in the hierarchy.\n"}
{"page": 1262, "text": "Statements, Events, and Functions\nPage 1262\nItem\nDescription\nThere are four root strings:\n\u2022 HKEY_CLASSES_ROOT\n\u2022 HKEY_LOCAL_MACHINE\n\u2022 HKEY_USERS\n\u2022 HKEY_CURRENT_USER\nA key is uniquely identified by the list of parent keys above it. The keys\nin the list are separated by slashes, as shown in these examples:\nHKEY_CLASSES_ROOT\\Appeon.Application\nHKEY_USERS\\MyApp\\Display\\Fonts\nValue name\nThe name of a value belonging to the key. A key can have one unnamed\nvalue and one or more named values.\nValue type\nA value identifying the datatype of a value in the registry.\nValue\nA value associated with a value name or an unnamed value. Several\nstring, numeric, and binary datatypes are supported by the registry.\nExamples\nThis example sets a value for the key Fonts and the value name Title:\nRegistrySet( &\n \"HKEY_LOCAL_MACHINE\\Software\\MyApp\\Fonts\", &\n \"Title\", RegString!, sle_font.Text)\nThis statement sets a value for the key Fonts and the value name NameOfEntryNum:\nulong ul_num\nRegistrySet( &\n \"HKEY_USERS\\MyApp.Settings\\Fonts\", &\n \"NameOfEntryNum\", RegULong!, ul_num)\nSee also\nRegistryDelete\nRegistryGet\nRegistryKeys\nRegistryValues\n2.4.626 RegistryValues\nDescription\nObtains the list of named values associated with a key.\nSyntax\nRegistryValues ( key, valuename )\n"}
{"page": 1263, "text": "Statements, Events, and Functions\nPage 1263\nTable 2.1124:\nArgument\nDescription\nkey\nA string whose value is the key in the system registry for which you want\nthe values of its subkeys.\nTo uniquely identify a key, specify the list of parent keys above it in the\nhierarchy, starting with the root key. The keys in the list are separated by\nbackslashes.\nvaluename\nAn array variable of strings in which you want to store the names.\nIf the array is variable size, its upper bound will reflect the number of\nnamed values found.\nIf the array is fixed size, it must be large enough to hold all the names.\nHowever, there will be no way to know how many names were actually\nfound.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nUsage\nFor more information about entries in the system registry, see RegistrySet.\nExamples\nThis example gets the value names associated with the key Fonts and stores them in the array\nls_valuearray:\nstring ls_valuearray[]\nRegistryValues( &\n \"HKEY_LOCAL_MACHINE\\Software\\MyApp.Settings\\Fonts\",&\n    ls_valuearray)\nSee also\nRegistryDelete\nRegistryGet\nRegistryKeys\nRegistrySet\n2.4.627 RelativeDate\nDescription\nObtains the date that occurs a specified number of days after or before another date.\nSyntax\nRelativeDate ( date, n )\nTable 2.1125:\nArgument\nDescription\ndate\nA value of type date\n"}
{"page": 1264, "text": "Statements, Events, and Functions\nPage 1264\nArgument\nDescription\nn\nAn integer indicating a number of days\nReturn value\nDate. Returns the date that occurs n days after date if n is greater than 0. Returns the date\nthat occurs n days before date if n is less than 0. If any argument's value is null, RelativeDate\nreturns null.\nExamples\nThis statement returns 2006-02-10:\nRelativeDate(2006-01-31, 10)\nThis statement returns 2006-01-21:\nRelativeDate(2006-01-31,  - 10)\nSee also\nDaysAfter\nRelativeDate method for DataWindows in Section 2.4.99, \u201cRelativeDate\u201d in DataWindow\nReference.\n2.4.628 RelativeTime\nDescription\nObtains a time that occurs a specified number of seconds after or before another time within a\n24-hour period.\nSyntax\nRelativeTime ( time, n )\nTable 2.1126:\nArgument\nDescription\ntime\nA value of type time\nn\nA long number of seconds\nReturn value\nTime. Returns the time that occurs n seconds after time if n is greater than 0. Returns the time\nthat occurs n seconds before time if n is less than 0. The maximum return value is 23:59:59.\nIf any argument's value is null, RelativeTime returns null.\nUsage\nAll PowerBuilder functions except RelativeTime use the Windows API to process dates and\ntimes, so in most instances processing of Daylight Savings Time (DST) is dependent on the\noperating system. However, the RelativeTime function is not DST-aware and therefore may\nreturn an incorrect time in a region that is using DST.\n"}
{"page": 1265, "text": "Statements, Events, and Functions\nPage 1265\nExamples\nThis statement returns 19:01:41:\nRelativeTime(19:01:31, 10)\nThis statement returns 19:01:21:\nRelativeTime(19:01:31,  - 10)\nSee also\nSecondsAfter\nRelativeTime method for DataWindows in Section 2.4.100, \u201cRelativeTime\u201d in DataWindow\nReference.\n2.4.629 ReleaseAutomationNativePointer\nDescription\nReleases the pointer to an OLE object that you got with GetAutomationNativePointer.\nApplies to\nOLEObject\nSyntax\noleobject.ReleaseAutomationNativePointer ( pointer )\nTable 2.1127:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable containing the object for which you\nwant to release the native pointer.\npointer\nA UnsignedLong variable that holds the pointer you want to release.\nReleaseAutomationNativePointer sets pointer to 0 so that it is clearly no\nlonger a valid pointer.\nReturn value\nInteger. Returns 0 if it succeeds and -1 if an error occurs.\nUsage\nPointer is a pointer to OLE's IUnknown interface. You can use IUnknown::QueryInterface to\nget other interface pointers.\nWhen you call GetAutomationNativePointer, PowerBuilder calls OLE's AddRef function,\nwhich locks the pointer. You can release the pointer in your DLL function or in a\nPowerBuilder script with the ReleaseAutomationNativePointer function.\nExamples\nSee GetAutomationNativePointer.\nSee also\n"}
{"page": 1266, "text": "Statements, Events, and Functions\nPage 1266\nGetAutomationNativePointer\nGetNativePointer\nReleaseNativePointer\n2.4.630 ReleaseNativePointer\nDescription\nReleases the pointer to an OLE object that you got with GetNativePointer.\nApplies to\nOLE controls and OLE custom controls\nSyntax\nolename.ReleaseNativePointer ( pointer )\nTable 2.1128:\nArgument\nDescription\nolename\nThe name of the OLE control containing the object for which you want\nthe native pointer.\npointer\nA UnsignedLong variable that holds the pointer you want to release.\nReleaseNativePointer sets pointer to 0 so that it is clearly no longer a\nvalid pointer.\nReturn value\nInteger. Returns 0 if it succeeds and -1 if an error occurs.\nUsage\nPointer is a pointer to OLE's IUnknown interface. You can use IUnknown::QueryInterface to\nget other interface pointers.\nWhen you call GetNativePointer, PowerBuilder calls OLE's AddRef function, which locks\nthe pointer. You can release the pointer in your DLL function or in a PowerBuilder script\nwith the ReleaseNativePointer function.\nExamples\nSee GetNativePointer.\nSee also\nGetAutomationNativePointer\nGetNativePointer\nReleaseAutomationNativePointer\n2.4.631 Remove\nDescription\n"}
{"page": 1267, "text": "Statements, Events, and Functions\nPage 1267\nRemoves a key. If more than one key with the same name exists, then remove the first key.\nNotice that the IgnoreCase property (true by default) determines whether the key name will\nbe matched in a case-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.remove ( Key )\nTable 2.1129:\nArgument\nDescription\nobjectname\nName of the JSONPackage object.\nKey\nA string specifying the key.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the\nmethod returns null.\nExamples\nThis example removes the \"d_employess\" key:\nboolean lb_exist\ndatastore lds_employee\ndatawindowchild ldwc_active\nJsonPackage lnv_package\nlnv_package = create JsonPackage\n...//Initialize data for lds_employee, ldwc_active\n// Package the data\nlnv_package.SetValue(\"d_department\", dw_department, false)\nlnv_package.SetValue(\"d_employee\", lds_employee) \nlnv_package.SetValue(\"dddw_active\", ldwc_active, false)\n\u2026\n lnv_package.Remove(\"d_employee\")\n // lb_exist will return false\n lb_exist = lnv_package.ContainsKey(\"d_employee\")\nSee also\nKeyCount\nGetKey\nContainsKey\n2.4.632 RemoveApplicationButton\nDescription\nRemoves the application button from the RibbonBar control.\nApplies to\n"}
{"page": 1268, "text": "Statements, Events, and Functions\nPage 1268\nRibbonBar control\nSyntax\ncontrolname.RemoveApplicationButton ( )\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nOnly one application button is allowed in a ribbon bar, therefore, you can directly get (set\nor remove) the application button without needing to insert the application button first or\nidentify the application button by its handle.\nExamples\nThis example sets the Text property of the application button to \"MyApp\", and then removes\nthe application button.\nInteger li_Return\nRibbonApplicationButtonItem lr_AppButton\nlr_AppButton.Text = \"MyApp\"\nli_Return = rbb_1.SetApplicationButton(lr_AppButton)\nli_Return = rbb_1.RemoveApplicationButton()\nSee also\nGetApplicationButton\nSetApplicationButton\n2.4.633 RemoveDirectory\nDescription\nRemoves a directory.\nSyntax\nRemoveDirectory ( directoryname )\nTable 2.1130:\nArgument\nDescription\ndirectoryname\nString for the name of the directory you want to remove. If you do not\nspecify an absolute path, this function deletes relative to the current\nworking directory.\nReturn value\nInteger. Returns 1 if the function succeeds and -1 if an error occurs.\nUsage\n"}
{"page": 1269, "text": "Statements, Events, and Functions\nPage 1269\nThe directory must be empty and must not be the current directory for this function to\nsucceed.\nExamples\nThis example removes a subdirectory from the current directory:\nstring  ls_path=\"my targets\"\ninteger li_filenum\n \nli_filenum = RemoveDirectory ( ls_path )\nIf li_filename <> 1 then\nMessageBox(\"Remove directory failed\", &\n   + \"Check that the directory exists, is empty, and \" &\n   + \"is not the current directory\")\nelse\nMessageBox(\"Success\", \"Directory \" + ls_path + &\n    \" deleted\")\nend if\nSee also\nDirectoryExists\nGetCurrentDirectory\n2.4.634 RequestResource\nDescription\nSends a request to get resource.\nApplies to\nOAuthClient object\nSyntax\nobjectname.RequestResource ( OAuthRequest oAuthRequest, ResourceResponse\n resourceResponse )\nTable 2.1131:\nArgument\nDescription\nobjectname\nA reference to the OAuthClient object.\noAuthRequest\nA reference to the OAuthRequest object specifying the request\ninformation.\nresourceResponse A reference to the ResourceResponse object into which the function\nreturns the object.\nReturn value\nInteger.\nReturns the value as follows. If any argument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n"}
{"page": 1270, "text": "Statements, Events, and Functions\nPage 1270\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\nExamples\nThe following example shows the use of the RequestResource function to get resource:\nint li_return\nOAuthClient lnv_OAuthClient\nOAuthRequest lnv_OAuthRequest\nResourceResponse lnv_ResourceResponse\nlnv_OAuthClient = create OAuthClient\nli_return = lnv_OAuthClient.requestresource(lnv_OAuthRequest, lnv_ResourceResponse)\nSee also\nAccessToken\n2.4.635 Repair\nDescription\nUpdates the target database with corrections that have been made in the pipeline user object's\nError DataWindow.\nApplies to\nPipeline objects\nSyntax\npipelineobject.Repair ( destinationtrans )\nTable 2.1132:\nArgument\nDescription\npipelineobject\nThe name of a pipeline user object that contains the pipeline object being\nexecuted\ndestinationtrans\nThe name of a transaction object with which to connect to the target\ndatabase\nReturn value\nInteger. Returns 1 if it succeeds and a negative number if an error occurs. Error values are:\n-5 -- Missing connection\n-9 -- Fatal SQL error in destination\n-10 -- Maximum number of errors exceeded\n-11 -- Invalid window handle\n-12 -- Bad table syntax\n"}
{"page": 1271, "text": "Statements, Events, and Functions\nPage 1271\n-15 -- Pipe already in progress\n-17 -- Error in destination database\n-18 -- Destination database is read-only\nIf any argument's value is null, Repair returns null.\nUsage\nWhen errors have occurred during a pipeline data transfer, Start populates its pipeline-error\nDataWindow control with the rows that caused the errors. The user or a script can then make\ncorrections to the data. The Repair function is usually associated with a CommandButton that\nthe user can click after correcting data in the pipeline-error DataWindow.\nIf errors occur again, the rows that are in error remain in the pipeline-error DataWindow. The\nuser can correct the data again and click the button that calls Repair.\nExamples\nThis statement connects to the destination database using the transaction instance variable\ni_dst. It then updates the database with the corrections made in the Error DataWindow for\npipeline i_pipe:\ni_pipe.Repair(i_dst)\nSee also\nCancel\nRepair\nStart\n2.4.636 Replace\nDescription\nReplaces a portion of one string with another.\nSyntax\nReplace ( string1, start, n, string2 )\nTable 2.1133:\nArgument\nDescription\nstring1\nThe string in which you want to replace characters with string2.\nstart\nA long whose value is the number of the first character you want\nreplaced. (The first character in the string is number 1.)\nn\nA long whose value is the number of characters you want to replace.\nstring2\nThe string that will replace characters in string1. The number of\ncharacters in string2 can be greater than, equal to, or less than the number\nof characters you are replacing.\nReturn value\n"}
{"page": 1272, "text": "Statements, Events, and Functions\nPage 1272\nString. Returns the string with the characters replaced if it succeeds and the empty string if it\nfails. If any argument's value is null, Replace returns null.\nUsage\nIf the start position is beyond the end of the string, Replace appends string2 to string1. If\nthere are fewer characters after the start position than specified in n, Replace replaces all the\ncharacters to the right of character start.\nIf n is zero, then, in effect, Replace inserts string2 into string1.\nExamples\nThese statements change the value of Name from Davis to Dave:\nstring Name\nName = \"Davis\"\nName = Replace(Name, 4, 2, \"e\")\nThis statement returns BABY RUTH:\nReplace(\"BABE RUTH\", 1, 4, \"BABY\")\nThis statement returns Closed for the Winter:\nReplace(\"Closed for Vacation\", 12, 8, \"the Winter\")\nThis statement returns ABZZZZEF:\nReplace(\"ABCDEF\", 3, 2, \"ZZZZ\")\nThis statement returns ABZZZZ:\nReplace(\"ABCDEF\", 3, 50, \"ZZZZ\")\nThis statement returns ABCDEFZZZZ:\nReplace(\"ABCDEF\", 50, 3, \"ZZZZ\")\nThese statements replace all occurrences of red within the string mystring with green. The\noriginal string is taken from the SingleLineEdit sle_1 and the result becomes the new text of\nsle_1:\nlong start_pos=1\nstring old_str, new_str, mystring\n \nmystring = sle_1.Text\nold_str = \"red\"\nnew_str = \"green\"\n \n// Find the first occurrence of old_str.\nstart_pos = Pos(mystring, old_str, start_pos)\n \n// Only enter the loop if you find old_str.\nDO WHILE start_pos > 0\n \n    // Replace old_str with new_str.\n    mystring = Replace(mystring, start_pos, &\n      Len(old_str), new_str)\n    // Find the next occurrence of old_str.\n    start_pos = Pos(mystring, old_str, &\n      start_pos+Len(new_str))\n"}
{"page": 1273, "text": "Statements, Events, and Functions\nPage 1273\nLOOP\nsle_1.Text = mystring\nSee also\nReplace method for DataWindows in Section 2.4.101, \u201cReplace\u201d in DataWindow Reference.\n2.4.637 ReplaceA\nDescription\nTemporarily converts a string to DBCS based on the current locale, then replaces a portion of\none string with another.\nSyntax\nReplaceA (string1, start, n, string2)\nTable 2.1134:\nArgument\nDescription\nstring1\nThe string containing characters you want to replace.\nstart\nA long whose value is the position in bytes of the first character you want\nto replace in string1.\nn\nA long whose value is the number of bytes you want to replace in string1.\nstring2\nThe string that will replace characters in string1. The number of\ncharacters in string2 can be greater than, equal to, or less than the number\nof characters you are replacing.\nReturn value\nString. Returns the string with the characters replaced if it succeeds and the empty string if it\nfails. If any argument's value is null, ReplaceA returns null.\nUsage\nReplaceA replaces the functionality that Replace had in DBCS environments in\nPowerBuilder 9. ReplaceA replaces a string by number of bytes, whereas Replace replaces\na string by number of characters in both SBCS and DBCS environments. ReplaceA also\nspecifies the starting position of the string to be replaced by number of bytes, whereas\nReplace specifies the starting position by number of characters.\nIn SBCS environments, Replace, ReplaceW, and ReplaceA return the same results.\n2.4.638 ReplaceText\nDescription\nReplaces selected text in an edit control with a specified string.\nApplies to\nDataWindow, EditMask, InkEdit, MultiLineEdit, SingleLineEdit, RichTextEdit,\nDropDownListBox, and DropDownPictureListBox controls\n"}
{"page": 1274, "text": "Statements, Events, and Functions\nPage 1274\nSyntax\neditname.ReplaceText (string )\nTable 2.1135:\nArgument\nDescription\neditname\nThe name of the DataWindow, EditMask, InkEdit, MultiLineEdit,\nSingleLineEdit, RichTextEdit, DropDownListBox, or\nDropDownPictureListBox control in which you want to replace the\nselected string.\nIn a DataWindow control, the text is replaced in the edit control over the\ncurrent row and column.\nstring\nThe string that replaces the selected text.\nReturn value\nInteger for DataWindow, InkEdit, and list boxes, Long for other controls.\nFor InkEdit, returns 1 for success and -1 if an error occurs. For other controls, returns the\nnumber of characters in string and -1 if an error occurs. If any argument's value is null,\nReplaceText returns null.\nUsage\nIf there is no selection, ReplaceText inserts the replacement text at the cursor position.\nIn a RichTextEdit control, the selection can include pictures.\nOther ways to replace text\nTo use the contents of the clipboard as the replacement text, call the Paste function,\ninstead of ReplaceText.\nTo replace text in a string, rather than a control, use the Replace function.\nExamples\nIf the MultiLineEdit mle_Comment contains Offer Good for 3 Months and the selected text is\n3 Months, this statement replaces 3 Months with 60 Days and returns 7. The resulting value\nof mle_Comment is Offer Good for 60 Days:\nmle_Comment.ReplaceText(\"60 Days\")\nIf there is no selected text, this statement inserts \"Draft\" at the cursor position in the\nSingleLineEdit sle_Comment3:\nsle_Comment3.ReplaceText(\"Draft\")\nSee also\nCopy\nCut\n"}
{"page": 1275, "text": "Statements, Events, and Functions\nPage 1275\nPaste\n2.4.639 ReplaceW (obsolete)\nDescription\nReplaces a portion of one string with another.\nThis function is obsolete. It has the same behavior as Replace in all environments.\nSyntax\nReplaceW ( string1, start, n, string2 )\n2.4.640 Reset\nClears data from a control or object. The syntax you choose depends on the target object.\nFor syntax for DataWindows and DataStores, see the Reset method for DataWindows in\nSection 9.122, \u201cReset\u201d in DataWindow Reference.\nTable 2.1136:\nTo\nUse\nDelete all items from a list\nSyntax 1\nDelete all the data (and optionally the series and categories) from a graph Syntax 2\nReturn to the beginning of a trace file\nSyntax 3\n2.4.640.1 Syntax 1: For list boxes\nDescription\nDeletes all the items from a list.\nApplies to\nListBox, DropDownListBox, PictureListBox, and DropDownPictureListBox controls\nSyntax\nlistboxname.Reset ( )\nTable 2.1137:\nArgument\nDescription\nlistboxname\nThe name of the ListBox control from which to delete all items\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If listboxname is null, Reset returns\nnull. The return value is usually not used.\nExamples\nThis statement deletes all items in the ListBox portion of ddlb_Actions:\n"}
{"page": 1276, "text": "Statements, Events, and Functions\nPage 1276\nddlb_Actions.Reset()\nSee also\nDeleteItem\n2.4.640.2 Syntax 2: For graphs\nDescription\nDeletes the data, the categories, or the series from a graph.\nApplies to\nGraph controls in windows and user objects and graphs within a DataWindow object with an\nexternal data source.\nDoes not apply to other graphs within DataWindow objects because their data comes directly\nfrom the DataWindow.\nSyntax\ncontrolname.Reset ( graphresettype )\nTable 2.1138:\nArgument\nDescription\ncontrolname\nThe name of the graph object in which you want to delete all the data\nvalues or all series and all data values\ngraphresettype\nA value of the grResetType enumerated datatype specifying whether you\nwant to delete only data values or all series and all data values:\n\u2022 All! -- Delete all series, categories, and data in controlname\n\u2022 Category! -- Delete categories and data in controlname\n\u2022 Data! -- Delete data in controlname\n\u2022 Series! -- Delete the series and data in controlname\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nReset returns null. The return value is usually not used.\nUsage\nUse Reset to clear the data in a graph before you add new data.\nExamples\nThis statement deletes the series and data, but leaves the categories, in the graph\ngr_product_data:\ngr_product_data.Reset(Series!)\nSee also\n"}
{"page": 1277, "text": "Statements, Events, and Functions\nPage 1277\nAddData\nAddSeries\n2.4.640.3 Syntax 3: For trace files\nDescription\nGoes back to the beginning of the trace file so you can begin rereading the file contents.\nApplies to\nTraceFile objects\nSyntax\ninstancename.Reset ( )\nTable 2.1139:\nArgument\nDescription\ninstancename\nInstance name of the TraceFile object\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileNotOpenError! -- The specified trace file has not been opened\nUsage\nUse this function to return to the start of the open trace file and begin rereading the contents\nof the file. To use the Reset function, you must have previously opened the trace file with\nthe Open function. You use the Reset and Open functions as well as the other properties and\nfunctions provided by the TraceFile object to access the contents of a trace file directly. You\nuse these functions if you want to perform your own analysis of the tracing data instead of\nusing the available modeling objects.\nExamples\nThis example returns execution to the start of the open trace file ltf_file so that the file's\ncontents can be reread:\nTraceFile ltf_file\nstring ls_filename\n \nltf_file = CREATE TraceFile\nltf_file.Open(ls_filename)\n...\nltf_file.Reset(ls_filename)\n...\nSee also\nOpen\n"}
{"page": 1278, "text": "Statements, Events, and Functions\nPage 1278\nNextActivity\nClose\n2.4.641 ResetArgElements\nDescription\nClears the argument list.\nApplies to\nWindow ActiveX controls\nSyntax\nactivexcontrol.ResetArgElements ( )\nTable 2.1140:\nArgument\nDescription\nactivexcontrol\nIdentifier for the instance of the PowerBuilder window ActiveX control.\nWhen used in HTML, this is the NAME attribute of the object element.\nWhen used in other environments, this references the control that\ncontains the PowerBuilder window ActiveX.\nReturn value\nInteger. Returns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function after calling InvokePBFunction or TriggerPBEvent to clear the argument\nlist.\nIf you populate the argument list with SetArgElement, you should call this function to\nclear the argument list after using InvokePBFunction or TriggerPBEvent to call an event or\nfunction with arguments.\nExamples\nThis JavaScript example calls the ResetArgElements function:\n...\n    retcd = PBRX1.TriggerPBEvent(theEvent, numargs);\n    rc = parseInt(PBRX1.GetLastReturn());\n    IF (rc != 1) {\n    alert(\"Error. Empty string.\");\n    }\n    PBRX1.ResetArgElements();\n...\nThis VBScript example calls the ResetArgElements function:\n...\n    retcd = PBRX1.TriggerPBEvent(theEvent, numargs)\n    rc = PBRX1.GetLastReturn()\n    IF rc <> 1 THEN\n    msgbox \"Error. Empty string.\"\n"}
{"page": 1279, "text": "Statements, Events, and Functions\nPage 1279\n    END IF \n  PBRX1.ResetArgElements()\n...\nSee also\nGetLastReturn\nInvokePBFunction\nSetArgElement\nTriggerPBEvent\n2.4.642 ResetDataColors\nDescription\nRestores the color of a data point to the default color for its series.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.ResetDataColors ( { graphcontrol, } seriesnumber, datapointnumber )\nTable 2.1141:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to reset the color of a data\npoint, or the name of the DataWindow containing the graph\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control in which you want to reset the color\nseriesnumber\nThe number of the series in which you want to reset the color of a data\npoint\ndatapointnumber The number of the data point for which you want to reset the color\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nResetDataColors returns null.\nDefault color for data points\nTo set the color for a series, use SetSeriesStyle. The color you set for the series is the\ndefault color for all data points in the series.\nExamples\nThese statements change the color of data point 10 in the series named Costs in the graph\ngr_product_data to the color for the series:\nSeriesNbr = gr_product_data.FinSeries(\"Costs\")\n"}
{"page": 1280, "text": "Statements, Events, and Functions\nPage 1280\ngr_product_data.ResetDataColors(SeriesNbr, 10)\nThese statements change the color of data point 10 in the series named Costs in the graph\ngr_comps in the DataWindow control dw_equip to the color for the series:\nSeriesNbr = dw_equipment.FindSeries(\"Costs\")\ndw_equip.ResetDataColors(\"gr_comps\", SeriesNbr, 10)\nSee also\nGetDataStyle\nSeriesName\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n2.4.643 ResetInk\nDescription\nClears ink from an InkPicture control.\nApplies to\nInkPicture controls\nSyntax\ninkpicname.ResetInk ( )\nTable 2.1142:\nArgument\nDescription\ninkpicname\nThe name of the InkPicture control from which you want to clear ink.\nReturn value\nInteger. Returns 1 for success and -1 for failure.\nUsage\nUse the ResetInk function to clear the ink from an InkPicture control.\nExamples\nThe following example clears the ink from an InkPicture control:\nip_1.ResetInk()\nSee also\nLoadInk\nLoadPicture\nResetPicture\n"}
{"page": 1281, "text": "Statements, Events, and Functions\nPage 1281\nSaveInk\nSave\n2.4.644 ResetPicture\nDescription\nClears a picture from an InkPicture control.\nApplies to\nInkPicture controls\nSyntax\ninkpicname.ResetPicture ( )\nTable 2.1143:\nArgument\nDescription\ninkpicname\nThe name of the InkPicture control from which you want to clear a\npicture.\nReturn value\nInteger. Returns 1 for success and -1 for failure.\nUsage\nUse the ResetInk function to clear the image from an InkPicture control.\nExamples\nThe following example clears the image from an InkPicture control:\nip_1.ResetPicture()\nSee also\nLoadInk\nLoadPicture\nResetInk\nSaveInk\nSave\n2.4.645 Resize\nDescription\nResizes an object or control by setting its Width and Height properties and then redraws the\nobject.\nApplies to\nAny object, except a child DataWindow\n"}
{"page": 1282, "text": "Statements, Events, and Functions\nPage 1282\nSyntax\nobjectname.Resize ( width, height )\nTable 2.1144:\nArgument\nDescription\nobjectname\nThe name of the object or control you want to resize\nwidth\nThe new width in PowerBuilder units\nheight\nThe new height in PowerBuilder units\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs or if objectname is a minimized or\nmaximized window. If any argument's value is null, Resize returns null.\nUsage\nYou cannot use Resize for a child DataWindow.\nResize does not resize a minimized or maximized sheet or window. If the window is\nminimized or maximized, Resize returns -1.\nEquivalent syntax\nYou can set object's Width and Height properties instead of calling the Resize function.\nHowever, the two statements cause PowerBuilder to redraw objectname twice; first with the\nnew width, and then with the new width and height.\nobjectname.Width = width\nobjectname.Height = height\nThe first two statements, although they redraw gb_box1 twice, achieve the same result as the\nthird statement:\ngb_box1.Width = 100 // These lines resize \ngb_box1.Height = 150 // gb_box1 to 100 x 150\ngb_box1.Resize(100, 150)// So does this line\nExamples\nThis statement changes the Width and Height properties of gb_box1 and redraws gb_box1\nwith the new properties:\ngb_box1.Resize(100, 150)\nThis statement doubles the width and height of the picture control p_1:\np_1.Resize(p_1.Width*2, p_1.Height*2)\n2.4.646 RespondRemote\nDescription\nSends a DDE message indicating whether the command or data received from a remote DDE\napplication was acceptable.\n"}
{"page": 1283, "text": "Statements, Events, and Functions\nPage 1283\nSyntax\nRespondRemote ( boolean )\nTable 2.1145:\nArgument\nDescription\nboolean\nA boolean expression. true indicates that the previously received\ncommand or data was acceptable. false indicates that it was not.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs (for example, the function was\ncalled in wrong context). If boolean is null, RespondRemote returns null.\nUsage\nYou can use RespondRemote when the PowerBuilder application is the DDE server or DDE\nclient application.\nYou usually call RespondRemote after these functions:\nGetCommandDDE\nGetCommandDDEOrigin\nGetDataDDE\nGetDataDDEOrigin\nFor more information about PowerBuilder as a client, see OpenChannel and ExecRemote.\nFor more information about PowerBuilder as a server, see StartServerDDE.\nExamples\nIn a script for the HotLinkAlarm event, these statements tell a remote application named\nGateway that its data was successfully received:\nString Applname, Topic, Item, Value\nGetDataDDEOrigin(Applname, Topic, Item)\nIF Applname = \"Gateway\" THEN\n    IF GetDataDDE(Value) = 1 THEN\n      RespondRemote(TRUE)\n    END IF\nEND IF\nSee also\nGetCommandDDE\nGetCommandDDEOrigin\nGetDataDDE\nGetDataDDEOrigin\n2.4.647 Restart\nDescription\n"}
{"page": 1284, "text": "Statements, Events, and Functions\nPage 1284\nStops the execution of all scripts, closes all windows (without executing the scripts for the\nClose events), commits and disconnects from the database, restarts the application, and\nexecutes the application-level script for the Open event.\nSyntax\nRestart ( )\nReturn value\nInteger. Returns 1 if it succeeds and -1 if it fails. The return value is usually not used.\nUsage\nYou can use Restart in the application-level script for the Idle event to restart the application\nafter a period of user inactivity, a typical behavior of kiosk applications.\nExamples\nIn the application-level script for the Idle event, this statement restarts the application:\nRestart()\nSee also\nHALT\n2.4.648 ResumeDownload\nDescription\nResumes the download progress of the file.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.ResumeDownload ( integer ItemId )\nTable 2.1146:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nItemId\nThe ID used to identify the file. The minimum value is 1.\nItemId should be the return value of DownloadingStart or\nDownloadingStateChanged event.\nReturn value\nInteger.\n\u2022 1 -- Success.\n\u2022 -2 -- Failed to get the browser instance.\n"}
{"page": 1285, "text": "Statements, Events, and Functions\nPage 1285\n\u2022 -6 -- The specified download task does not exist.\nExamples\nInteger li_rtn, li_itemid\nli_rtn = wb_1.resumedownload(li_itemid)\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\nPauseDownload\nPrintAsPDF\nRegisterEvent\nRefresh\nStopNavigation\nUnregisterEvent\nZoom\n2.4.649 ResumeTransaction (obsolete)\nDescription\nAssociates the EAServer transaction passed as an argument with the calling thread.\nObsolete function\nResumeTransaction is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.ResumeTransaction ( handletrans )\nTable 2.1147:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\n"}
{"page": 1286, "text": "Statements, Events, and Functions\nPage 1286\nArgument\nDescription\nhandletrans\nAn unsignedlong containing the handle of a suspended transaction\nReturn value\nInteger. Returns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Unknown failure\n-2 -- The transaction referred to by handletrans is no longer valid\nUsage\nThe ResumeTransaction function associates the transaction referred to by the\nhandletrans argument with the calling thread. The argument is obtained from a call to\nSuspendTransaction and may refer to a transaction that was previously associated with the\ncurrent thread or with a different thread in the same execution environment.\nCaution\nThe handletrans argument must be obtained from the SuspendTransaction function.\nUsing any other value as the argument to ResumeTransaction may have unpredictable\nresults.\nResumeTransaction can be called by a client or a component that is marked as OTS style.\nmust be using the two-phase commit transaction coordinator (OTS/XA).\nExamples\nThis example shows the use of the ResumeTransaction function to associate the\ncalling thread with the transaction referred to by the ll_handle argument returned by\nSuspendTransaction:\n// Instance variable:\n// CORBACurrent corbcurr\ninteger li_rc\nunsignedlong ll_handle\nli_rc = this.GetContextService(\"CORBACurrent\", &\n    corbcurr)\nli_rc = corbcurr.Init()\nli_rc = corbcurr.BeginTransaction()\n// do some transactional work\nll_handle = corbcurr.SuspendTransaction()\n//do some non-transactional work\nli_rc = corbcurr.ResumeTransaction(ll_handle)\n// do some more transactional work\nli_rc = corbcurr.CommitTransaction()\nSee also\nBeginTransaction (obsolete)\nCommitDocking\nGetContextService\nGetStatus (obsolete)\n"}
{"page": 1287, "text": "Statements, Events, and Functions\nPage 1287\nGetTransactionName (obsolete)\nInit (obsolete)\nRollbackOnly (obsolete)\nRollbackTransaction (obsolete)\nSetTimeout (obsolete)\nSuspendTransaction (obsolete)\n2.4.650 Retrieve\nDescription\nRetrieves data to the DataWindow, DataWindowChild, or DataStore from the RESTFul\nWeb service according to the key name of the JSON string. If the data received from\nthe RESTful web service is compressed as gzip, it will be automatically decompressed.\nOnly gzip compression format is supported at this moment. The developer can use the\nSetRequestHeader function to set the Accept-Encoding header to allow only the gzip\ncompression format.\nApplies to\nRestClient object\nSyntax\nobjectname.Retrieve ( dwControl, urlName {, data} {, tokenrequest} )\nTable 2.1148:\nArgument\nDescription\nobjectname\nA reference to the RestClient object.\ndwControl\nThe name of the DataWindow control, DataStore, or child DataWindow.\nurlName\nA string whose value is the URL.\ndata (optional)\nA string or blob data. If this argument is not specified, the retrieve\nfunction sends the request to the server with \"GET\" method, otherwise\nwith \"POST\".\ntokenrequest\n(optional)\nA reference to the TokenRequest object for supporting OAuth 2.0. If\nthis parameter is used, the token settings in the SetOAuthToken and\nSetJWTToken functions will be ignored.\nUsage\nThe Retrieve function retrieves data only when the JSON key name matches with the\nDataWindow column name; if none of the JSON key name matches with any of the\nDataWindow column name, then no data will be inserted into the DataWindow and the\nfunction returns error code -17.\nFor the Retrieve function, the JSON string returned from the RESTFul Web service APIs\nmust be an array in the two-level plain JSON format (see Plain JSON: two-level structure in\nApplication Techniques for details); for the RetrieveOne function, the JSON string returned\n"}
{"page": 1288, "text": "Statements, Events, and Functions\nPage 1288\nfrom the RESTFul Web service APIs can be an array in the two-level plain JSON format (see\nPlain JSON: two-level structure in Application Techniques for details) or a JSON object.\nThe Retrieve function is not supported in DataWindow/DataWindowChild/DataStore with\nthe following presentation styles: Composite, Crosstab, OLE 2.0, and RichText.\nAlthough the Retrieve function is not supported in the Composite DataWindow, you can call\nGetChild function to get the child DataWindow from the Composite DataWindow, and then\ncall the Retrieve function to retrieve the data into the child DataWindow.\nThe Retrieve function is not supported for Report controls, TableBlob controls, OLE\nDatabase Blob controls, and InkPicture controls in DataWindow objects.\nThe Retrieve function is not supported for dynamically created or modified DataWindows.\nAutoRetrieve for DropDownDataWindow is unsupported.\nThe Retrieve function will not pass the retrieval arguments used in computed fields and\nDataWindow expressions.\nThe Retrieve function will not trigger the DataWindow RetrieveRow event considering the\nperformance impact, although it will trigger the RetrieveStart and RetrieveEnd events.\nReturn value\nLong.\nReturns values as follows. If any argument's value is null, the method returns null.\n>=0 -- Returns the number of rows if it succeeds\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timed out\n-5 -- Get token error\n-7 -- Failed to automatically decompress the response body\n-10 -- The token is invalid or has expired\n-15 -- Unsupported character sets\n-16 -- The JSON is not a plain JSON with two-level structure\n-17 -- No data is inserted into the DataWindow because no key in the JSON matches any\ncolumn name in it\nExample 1\nThis example retrieves data to a DataWindow:\nlong ll_return\nRestClient lnv_RestClient\nlnv_RestClient = Create RestClient\n// Set DataObject\ndw_emp.DataObject = \"d_sq_gr_emp\"\n"}
{"page": 1289, "text": "Statements, Events, and Functions\nPage 1289\n// Send request using GET\nll_return = lnv_RestClient.Retrieve(dw_emp, \"https://demo.appeon.com/PB/\nwebapi_client/employee/102\")\n// Check the return value\nif ll_return >= 0 then\n MessageBox(\"Success\", \"Rows = \" + String(ll_return))\nelse\n MessageBox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 2\nThis example retrieves data to a DataStore:\nlong ll_return\nRestClient lnv_RestClient\ndatastore lds_datastore\nlnv_RestClient = Create RestClient\nlds_datastore = create datastore\n// Set DataObject\nlds_datastore.DataObject = \"d_sq_gr_emp\"\n// Send request using GET\nll_return = lnv_RestClient.Retrieve(lds_datastore, \"https://demo.appeon.com/PB/\nwebapi_client/employee/102\")\n// Check the return value\nif ll_return >= 0 then\n MessageBox(\"Success\", \"Rows = \" + String(ll_return))\nelse\n MessageBox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 3\nThis example retrieves data to a DataWindowChild:\nint li_return\nRestClient lnv_restClient\nDataWindowChild ldwc_dept\nlnv_restClient = create RestClient\n//get the DataWindowChild\ndw_emp.getchild(\"dept_id\", ldwc_dept)\n//Get data from web api using GET method\nli_return = lnv_restClient.retrieve(ldwc_dept, \"https://demo.appeon.com/pb/\nwebapi_client/department\")\nif li_return >= 0 then\n messagebox(\"Success\", \"Rows =  \" + string(li_return))\nelse\n messagebox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 4\nThis example passes the string data using POST method and retrieves data to a DataWindow.\nlong ll_return\nRestClient lnv_RestClient\n"}
{"page": 1290, "text": "Statements, Events, and Functions\nPage 1290\nlnv_RestClient = Create RestClient\nString ls_json = '{\"empId\":100, \"fname\":\" John\", \"lname\": \"Guevara\"}'\n// Construct a POST request (supports all headers)\nlnv_RestClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Send the POST request (add data to the body and automatically set Content-Length\n header)\nll_return = lnv_RestClient.Retrieve(dw_emp, \"https://demo.appeon.com/PB/\nwebapi_client/employee\", ls_Json)\n// Check the return value\nif ll_return >= 0 then\n MessageBox(\"Success\", \"Rows = \" + String(ll_return))\nelse\n MessageBox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 5\nThis example passes the blob data using POST method and retrieves data to a DataWindow.\nLong ll_rc\nBlob lblb_data\nRestClient lnv_RestClient \nlnv_RestClient = Create RestClient\n// Set DataObject\ndw_1.DataObject = \"d_employee\"\n// Construct a POST request (supports all headers)\nlnv_RestClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Content-Length is set by Retrieve automatically\n// ...\nlblb_data = blob('{\"empId\":100, \"fname\":\"John\", \"lname\":\"Guevara\"}', EncodingUTF8!)\n// Send the POST request (add data to the body and automatically set Content-Length\n header)\nll_rc = lnv_RestClient.Retrieve(dw_1, \"https://demo.appeon.com/PB/webapi_client/\nemployee/blob\", lblb_data)\n// Check the return value\nif ll_rc >= 0 then\n MessageBox(\"Success\", \"Rows = \" + String(ll_rc))\nelse\n MessageBox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 6\nThis example passes the string data using POST method and retrieves data to a DataStore.\nString ls_json\nLong ll_rc\nDatastore lds_1 \nRestClient lnv_RestClient \nlnv_RestClient = Create RestClient\nlds_1 = Create Datastore\nlds_1.DataObject = \"d_employee\"\nls_json = '{\"city\": \"Needham\", \"state\": \"MA\", zipCode\": \"02192\"}'\n// Construct a POST request (supports all headers)\n"}
{"page": 1291, "text": "Statements, Events, and Functions\nPage 1291\nlnv_RestClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Content-Length is set by Retrieve automatically\n// ...\n// Send the POST request (add data to the body and automatically set Content-Length\n header)\nll_rc = lnv_RestClient.Retrieve(lds_1, \"https://demo.appeon.com/PB/webapi_client/\nemployee\", ls_Json)\n// Check the return value\nif ll_rc >= 0 then\n MessageBox(\"Success\", \"Rows = \" + String(ll_rc))\nelse\n MessageBox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 7\nThis example passes the blob data using POST method and retrieves data to a DataStore.\nLong ll_rc\nRestClient lnv_RestClient \nlnv_RestClient = Create RestClient \nblob lblb_data\nDatastore lds_1\nlds_1 = Create Datastore\n// Set DataObject\nlds_1.DataObject = \"d_employee\"\n// Construct a POST request (supports all headers)\nlnv_RestClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Content-Length is set by Retrieve automatically\n// ...\nlblb_data = blob('{\"empId\":100, \"fname\":\"John\", \"lname\":\"Guevara\"}', EncodingUTF8!)\n// Send the POST request (add data to the body and automatically set Content-Length\n header)\nll_rc = lnv_RestClient.Retrieve(lds_1, \"https://demo.appeon.com/PB/webapi_client/\nemployee/blob\", lblb_data)\n// Check the return value\nif ll_rc >= 0 then\n MessageBox(\"Success\", \"Rows = \" + String(ll_rc))\nelse\n MessageBox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 8\nThis example passes the string data using POST method and retrieves data to a\nDataWindowChild.\nint li_return\nstring ls_data\nRestClient lnv_restClient\nDataWindowChild ldwc_dept\nlnv_restClient = create RestClient\n//Get DataWindowChild\ndw_emp.getchild(\"dept_id\", ldwc_dept)\nls_data  = \"{'id':100}\"\nlnv_restClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n//Get data from web api using POST method\n"}
{"page": 1292, "text": "Statements, Events, and Functions\nPage 1292\nli_return = lnv_restClient.retrieve(ldwc_dept, \"https://demo.appeon.com/pb/\nwebapi_client/department/RetrievePassJson\", ls_data)\nif li_return >= 0 then\n        messagebox(\"Success\", \"Rows =  \" + string(li_return))\nelse\n        messagebox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 9\nThis example passes the blob data using POST method and retrieves data to a\nDataWindowChild.\nint li_return\nblob lblb_data\nRestClient lnv_restClient\nDataWindowChild ldwc_dept\nlnv_restClient = create RestClient\nlnv_restClient.setrequestheader(\"Content-Type\", \"Application/json;charset=utf-8\")\n//Convert the string to a blob\nlblb_data = blob(\"{'id':100}\", encodingutf8!)\n//Get DataWindowChild\ndw_emp.getchild(\"dept_id\", ldwc_dept)\n//Pass data from web api using POST method\nli_return = lnv_restClient.retrieve(ldwc_dept, \"https://demo.appeon.com/pb/\nwebapi_client/department/RetrievePassJson\", lblb_data)\nif li_return >= 0 then\n        messagebox(\"Success\", \"Rows =  \" + string(li_return))\nelse\n        messagebox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 10\nThis example gets data from a website with token authentication and then retrieves data to a\nDataWindow.\ninteger li_return\nRestClient lnv_restClient\nTokenRequest lnv_tokenRequest\nlnv_restClient = create RestClient\nlnv_TokenRequest.tokenlocation = \"https://demo.appeon.com/pb/identityserver/\nconnect/token\" //Location of the token\nlnv_TokenRequest.method = \"post\" //Request method\nlnv_TokenRequest.granttype = \"client_credentials\" //Grant type\nlnv_TokenRequest.clientid = \"GRfjNAfCg2bI47l1sX5zdFiTEmdrkCKa20zm5YVS4iM=\" //client\n ID\nlnv_TokenRequest.clientsecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" //\nclient certificate\nli_return = lnv_restClient.retrieve(dw_dept, \"https://demo.appeon.com/pb/\nwebapi_client/identity/departments\", lnv_tokenRequest)\nif li_return >= 0 then\n        messagebox(\"Success\", \"Rows \" + string(li_return))\nelse\n        messagebox(\"Error\", \"Failed to retrieve data.\")\n"}
{"page": 1293, "text": "Statements, Events, and Functions\nPage 1293\nend if\nExample 11\nThis example passes the blob data using POST method and retrieves the data from the\nwebsite with token authentication to the DataWindow.\ninteger li_return\nblob lblb_data\nRestClient lnv_restClient\nTokenRequest lnv_tokenRequest\nlnv_restClient = create RestClient\nlnv_TokenRequest.tokenlocation = \"https://demo.appeon.com/pb/identityserver/\nconnect/token\" //Location of the token\nlnv_TokenRequest.method = \"post\" //Request method\nlnv_TokenRequest.granttype = \"client_credentials\" //Grant type\nlnv_TokenRequest.clientid = \"GRfjNAfCg2bI47l1sX5zdFiTEmdrkCKa20zm5YVS4iM=\" //client\n ID\nlnv_TokenRequest.clientsecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" //\nclient certificate\nlnv_restClient.setrequestheader(\"Content-Type\", \"Application/json;charset=utf-8\")\nlblb_data = blob(\"{'id':100}\", encodingutf8!)\nli_return = lnv_restClient.retrieve(dw_dept, \"https://demo.appeon.com/pb/\nwebapi_client/identity/department\", lblb_data, lnv_tokenRequest)\nif li_return >= 0 then\n messagebox(\"Success\", \"Rows \" + string(li_return))\nelse\n messagebox(\"Error\", \"Failed to retrieve data.\")\nend if\nExample 12\nThe client sends the server a request which includes the \"gzip\" compression method; then the\nserver compresses and returns the data as requested; and then the client automatically extracts\nthe data.\nInteger      li_Return\nRestClient   lrc_Dept\nlrc_Dept  =  Create RestClient\nlrc_Dept.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Sets the compression method in the request header\nlrc_Dept.SetRequestHeader(\"Accept-Encoding\",\"gzip\")\n// DataWindow column name and type must match with those returned from\n// URL: https://demo.appeon.com/PB/webapi_client/department\ndw_submit.DataObject = 'd_example_dept'\n// dw_submit datawindow will display the return data\nli_Return = lrc_Dept.Retrieve(dw_submit,\"https://demo.appeon.com/PB/webapi_client/\ndepartment\")\nIf li_Return < 0 Then\n   // Prints the error message\nEnd If\nSee also\n"}
{"page": 1294, "text": "Statements, Events, and Functions\nPage 1294\nRetrieveOne\n2.4.651 RetrieveOne\nDescription\nRetrieves one data row to the DataWindow, DataWindowChild, or DataStore from the\nRESTFul Web service.\nIf the data received from the RESTful web service is compressed as gzip, it will be\nautomatically decompressed. Only gzip compression format is supported at this moment. The\ndeveloper can use the SetRequestHeader function to set the Accept-Encoding header to allow\nonly the gzip compression format.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nRestClient object\nSyntax\nobjectname.RetrieveOne (DWControl dwObject, string urlName {,string data})\nTable 2.1149:\nArgument\nDescription\nobjectname\nA reference to the RestClient object.\ndwObject\nThe name of the DataWindow control, DataStore, or child DataWindow.\nurlName\nA string whose value is the URL.\ndata (optional)\nA string specifying the data to send to the server. If this argument is not\nspecified, the RetrieveOne function sends the request to the server with\n\"GET\" method, otherwise with \"POST\".\nUsage\nFor the RetrieveOne function, the JSON string returned from the RESTFul Web service APIs\ncan be an array in the two-level plain JSON format (see Plain JSON: two-level structure in\nApplication Techniques for details) or a JSON object; for the Retrieve function, the JSON\nstring returned from the RESTFul Web service APIs must be an array in the two-level plain\nJSON format (see Plain JSON: two-level structure in Application Techniques for details).\nIf the retrieved data is a JSON object that contains one single row, the JSON object will\nbe imported to DataWindow as one row; if the retrieved data is a JSON array that contains\nmultiple rows, only the first element of the JSON array will be imported to DataWindow.\nThe RetrieveOne function is not supported in DataWindow/DataWindowChild/DataStore\nwith the following presentation styles: Composite, Crosstab, OLE 2.0, and RichText.\nAlthough the RetrieveOne function is not supported in the Composite DataWindow, you can\ncall GetChild function to get the child DataWindow from the Composite DataWindow, and\nthen call the RetrieveOne function to retrieve the data into the child DataWindow.\nThe RetrieveOne function is not supported for Report controls, TableBlob controls, OLE\nDatabase Blob controls, and InkPicture controls in DataWindow objects.\n"}
{"page": 1295, "text": "Statements, Events, and Functions\nPage 1295\nThe RetrieveOne function is not supported for dynamically created or modified\nDataWindows.\nAutoRetrieve for DropDownDataWindow is unsupported.\nThe RetrieveOne function will not pass the retrieval arguments used in computed fields and\nDataWindow expressions.\nReturn value\nLong.\nReturns values as follows. If any argument's value is null, the method returns null.\n>=0 -- Returns the number of rows if it succeeds\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timed out\n-7 -- Failed to decompress data\n-10 -- The token is invalid or has expired\n-15 -- Unsupported character sets\nExample 1\nThe following code example shows the usage of RetrieveOne without the data argument.\nRestClient lrc_P024\nLong ll_P024_DepartmentID\nInteger li_p024_RetrieveOneReturn\nlrc_P024 = Create RestClient\nlrc_P024.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" )\nll_P024_DepartmentID = 100\nli_p024_RetrieveOneReturn=lrc_P024.RetrieveOne(dw_Data,\"https://demo.appeon.com/PB/\nwebapi_client/api/department/retrieveone/\"+String(ll_P024_DepartmentID))\nIf li_p024_RetrieveOneReturn <> 1 Then \n//Checks if any error information\nElse\n If lrc_P024.GetResponseStatusCode() <> 200 Then\n  //Processes according to the exception information\n End If\nEnd If\nExample 2\nThe following code example shows the usage of RetrieveOne with the data argument.\nRestClient lrc_P024\nInteger li_p024_RetrieveOneReturn\nlrc_P024 = Create RestClient\nlrc_P024.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" )\n \n"}
{"page": 1296, "text": "Statements, Events, and Functions\nPage 1296\nli_p024_RetrieveOneReturn=lrc_P024.RetrieveOne(dw_Data, \"https://demo.appeon.com/\nPB/webapi_client/department/retrievebyid\", \"500\")\nIf li_p024_RetrieveOneReturn <> 1 Then \n//Checks if any error information\nElse\n If lrc_P024.GetResponseStatusCode() <> 200 Then\n  //Processes according to the exception information\n End If\nEnd If\nSee also\nRetrieve\n2.4.652 Reverse\nDescription\nReverses the order or characters in a string.\nSyntax\nReverse ( string )\nTable 2.1150:\nArgument\nDescription\nstring\nA string whose characters you want to reorder so that the last character is\nfirst and the first character is last.\nReturn value\nString. Returns a string with the characters of string in reversed order. Returns the empty\nstring if it fails.\nUsage\nReverse is useful with the IsArabic and IsHebrew functions, which help you implement right-\nto-left character display when you are using a version of Windows that supports right-to-left\nlanguages.\nExamples\nUnder a version of Windows that supports right-to-left languages, this statement returns a\nstring with the characters in reverse order from the characters entered in sle_name:\nstring ls_name\nls_name = Reverse(sle_name.Text)\nSee also\nIsArabic\nIsHebrew\n2.4.653 RevertToSelf\nDescription\n"}
{"page": 1297, "text": "Statements, Events, and Functions\nPage 1297\nRestores the security attributes for a COM object that is running on COM+ and\nimpersonating the client.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.RevertToSelf (  )\nTable 2.1151:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nUsage\nCOM objects running on COM+ can use the ImpersonateClient function to run in the\nclient's security context so that the object has access to the same resources as the client. Use\nRevertToSelf to restore the object's security context.\nExamples\nThe following example creates an instance of the TransactionServer service and checks\nwhether the COM object is currently running in the client's security context. If it is, it reverts\nto the object's security context:\nTransactionServer txninfo_test\ninteger li_rc\n \nli_rc = GetContextService( \"TransactionServer\",  &\n     txninfo_test )\nIF  txninfo_test.IsImpersonating() THEN  &\n    txninfo_test.RevertToSelf()\nSee also\nImpersonateClient\nIsCallerInRole\nIsImpersonating\nIsSecurityEnabled\n2.4.654 RGB\nDescription\nCalculates the long value that represents the color specified by numeric values for the red,\ngreen, and blue components of the color.\nSyntax\n"}
{"page": 1298, "text": "Statements, Events, and Functions\nPage 1298\nRGB ( red, green, blue )\nTable 2.1152:\nArgument\nDescription\nred\nThe integer value of the red component of the desired color\ngreen\nThe integer value of the green component of the desired color\nblue\nThe integer value of the blue component of the desired color\nReturn value\nLong. Returns the long that represents the color created by combining the values specified in\nred, green, and blue. If an error occurs, RGB returns -1. If any argument's value is null, RGB\nreturns null.\nUsage\nThe formula for combining the colors is:\n65536 * Blue+ 256 * Green+ Red\nUse RGB to obtain the long value required to set the color for text and drawing objects. You\ncan also set an object's color to the long value that represents the color. The RGB function\nprovides an easy way to calculate that value.\nAbout color values\nThe value of a component of a color is an integer between 0 and 255 that represents\nthe amount of the color that is required to create the color you want. The lower the\nvalue, the darker the color; the higher the value, the lighter the color.\nTo determine the values for the components of a color (known as the RGB values),\nuse the Edit Color Entry window. To access the Edit Color Entry window, select\na color in the color bar at the bottom of the workspace and then double-click the\nselected color when it displays in the first box of the color bar.\nThe following table lists red, green, and blue values for the 16 standard colors.\nTable 2.1153: Red, green, and blue color values for use with RGB\nColor\nRed value\nGreen value\nBlue value\nBlack\n0\n0\n0\nWhite\n255\n255\n255\nLight Gray\n192\n192\n192\nDark Gray\n128\n128\n128\nRed\n255\n0\n0\nDark Red\n128\n0\n0\nGreen\n0\n255\n0\nDark Green\n0\n128\n0\n"}
{"page": 1299, "text": "Statements, Events, and Functions\nPage 1299\nColor\nRed value\nGreen value\nBlue value\nBlue\n0\n0\n255\nDark Blue\n0\n0\n128\nMagenta\n255\n0\n255\nDark Magenta\n128\n0\n128\nCyan\n0\n255\n255\nDark Cyan\n0\n128\n128\nYellow\n255\n255\n0\nBrown\n128\n128\n0\nExamples\nThis statement returns a long that represents black:\nRGB(0, 0, 0)\nThis statement returns a long that represents white:\nRGB(255, 255, 255)\nThese statements set the color properties of the StaticText st_title to be green letters on a dark\nmagenta background:\nst_title.TextColor = RGB(0, 255, 0)\nst_title.BackColor = RGB(128, 0, 128)\nSee also\nRGB method for DataWindows in Section 2.4.103, \u201cRGB\u201d in DataWindow Reference.\n2.4.655 Right\nDescription\nObtains a specified number of characters from the end of a string.\nSyntax\nRight ( string, n )\nTable 2.1154:\nArgument\nDescription\nstring\nThe string from which you want characters returned\nn\nA long whose value is the number of characters you want returned from\nthe right end of string\nReturn value\nString. Returns the rightmost n characters in string if it succeeds and the empty string (\"\") if\nan error occurs. If any argument's value is null, Right returns null. If n is greater than or equal\n"}
{"page": 1300, "text": "Statements, Events, and Functions\nPage 1300\nto the length of the string, Right returns the entire string. It does not add spaces to make the\nreturn value's length equal to n.\nExamples\nThis statement returns RUTH:\nRight(\"BABE RUTH\", 4)\nThis statement returns BABE RUTH:\nRight(\"BABE RUTH\", 75)\nSee also\nLeft\nMid\nPos\nRight method for DataWindows in Section 2.4.106, \u201cRight\u201d in DataWindow Reference.\n2.4.656 RightA\nDescription\nTemporarily converts a string from Unicode to DBCS based on the current locale, then\nreturns the specified number of bytes from the end of the string.\nSyntax\nRightA (string, n)\nTable 2.1155:\nArgument\nDescription\nstring\nThe string you want to search\nn\nA long whose value is the number of bytes you want returned from the\nright end of string\nReturn value\nString. Returns the rightmost n characters in string if it succeeds and the empty string (\"\")\nif an error occurs. If any argument's value is null, RightA returns null. If n is greater than or\nequal to the length of the string, RightA returns the entire string. It does not add spaces to\nmake the return value's length equal to n.\nUsage\nRightA replaces Right in DBCS environments in PowerBuilder 9. In SBCS environments,\nRight, RightW, and RightA return the same results.\n2.4.657 RightW (obsolete)\nDescription\nObtains a specified number of characters from the end of a string.\n"}
{"page": 1301, "text": "Statements, Events, and Functions\nPage 1301\nThis function is obsolete. It has the same behavior as Right in all environments.\nSyntax\nRightW ( string, n )\n2.4.658 RightTrim\nDescription\nRemoves spaces from the end of a string.\nSyntax\nRightTrim ( string {, removeallspaces } )\nTable 2.1156:\nArgument\nDescription\nstring\nThe string you want returned with trailing blanks deleted\nremoveallspaces\nA boolean indicating that all types of spaces should be deleted\nReturn value\nString. Returns a copy of string with trailing blanks deleted if it succeeds and the empty\nstring (\"\") if an error occurs. If any argument's value is null, RightTrim returns null.\nUsage\nIf you do not include the optional removeallspaces argument or its value is false, only the\nspace character (U+0020) is removed from the string.\nIf the removeallspaces argument is set to true, all types of space characters are removed. See\nLeftTrim for a list of space characters.\nExamples\nThis statement returns RUTH if all the trailing blanks are space characters:\nRightTrim(\"RUTH \")\nThis statement returns RUTH if the trailing blanks include other types of white space\ncharacters:\nRightTrim(\"RUTH \", true)\nSee also\nLeftTrim\nTrim\nRightTrim method for DataWindows in Section 2.4.108, \u201cRightTrim\u201d in DataWindow\nReference.\n2.4.659 RightTrimW (obsolete)\nDescription\n"}
{"page": 1302, "text": "Statements, Events, and Functions\nPage 1302\nRemoves spaces from the end of a string.\nThis function is obsolete. It has the same behavior as RightTrim in all environments.\nSyntax\nRightTrimW ( string )\n2.4.660 RollbackOnly (obsolete)\nDescription\nModifies an EAServer transaction associated with a calling thread so that the only possible\noutcome is to roll back the transaction.\nObsolete function\nRollbackOnly is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.RollbackOnly (  )\nTable 2.1157:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\nReturn value\nInteger. Returns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Failed for unknown reason\n-2 -- No transaction is associated with the calling thread\nUsage\nRollbackTransaction is typically called by the originator of the transaction. Another\nparticipant in a client- or OTS style transaction can call RollbackOnly to vote that the\ntransaction should be rolled back.\nRollbackOnly can be called by a client or a component that is marked as OTS style.\nEAServer must be using the two-phase commit transaction coordinator (OTS/XA).\nExamples\nIn this example, a participant in a transaction has determined that it should be rolled back. It\ncreates and initializes an instance of the CORBACurrent service object and votes to roll back\nthe transaction:\n// Instance variable:\n"}
{"page": 1303, "text": "Statements, Events, and Functions\nPage 1303\n// CORBACurrent corbcurr\nint li_rc\nli_rc = this.GetContextService(\"CORBACurrent\", &\n    corbcurr)\nIF li_rc <> 1 THEN\n// handle the error\nEND IF\nli_rc = corbcurr.Init()\nIF li_rc <> 0 THEN\n// handle the error\nELSE\n    corbcurr.RollbackOnly()\nEND IF\nSee also\nBeginTransaction (obsolete)\nCommitDocking\nGetContextService\nGetStatus (obsolete)\nGetTransactionName (obsolete)\nInit (obsolete)\nResumeTransaction (obsolete)\nRollbackTransaction (obsolete)\nSetTimeout (obsolete)\nSuspendTransaction (obsolete)\n2.4.661 RollbackTransaction (obsolete)\nDescription\nRolls back the EAServer transaction associated with the calling thread.\nObsolete function\nRollbackTransaction is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.RollbackTransaction (  )\nTable 2.1158:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\n"}
{"page": 1304, "text": "Statements, Events, and Functions\nPage 1304\nReturn value\nInteger. Returns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Failed for unknown reason\n-2 -- No transaction is associated with the calling thread\n-3 -- The calling thread does not have permission to commit the transaction\n-4 -- The HeuristicCommit exception was raised\nUsage\nThe RollbackTransaction function rolls back the transaction associated with the calling\nthread. The call fails if the HeuristicCommit exception is raised. Heuristic decisions are\nusually made when normal processing cannot continue, such as when a communications\nfailure occurs. The HeuristicCommit exception is raised when all relevant updates have been\ncommitted.\nRollbackTransaction can be called by a client or a component that is marked as OTS style.\nEAServer must be using the two-phase commit transaction coordinator (OTS/XA).\nExamples\nThis example shows the use of RollbackTransaction to roll back a transaction when an update\ndoes not succeed:\n// Instance variables:\n// CORBACurrent corbcurr\nint li_rc1, li_rc2\nlong ll_rc\nthis.GetContextService(\"CORBACurrent\", corbcurr)\nli_rc1 = corbcurr.Init()\nIF li_rc1 <> 1 THEN\n    // handle the error\nELSE\n    ll_rc = CreateInstance(mycomp)\n    // invoke methods on the instantiated component\n    // test return values and roll back \n    // if unsatisfactory\n    IF li_rc2 = 1 THEN\n      corbcurr.CommitTransaction()\n    ELSE\n      corbcurr.RollbackTransaction()\n    END IF\nEND IF\nSee also\nBeginTransaction (obsolete)\nCommitDocking\nGetContextService\nGetStatus (obsolete)\nGetTransactionName (obsolete)\nInit (obsolete)\nResumeTransaction (obsolete)\n"}
{"page": 1305, "text": "Statements, Events, and Functions\nPage 1305\nRollbackOnly (obsolete)\nSetTimeout (obsolete)\nSuspendTransaction (obsolete)\n2.4.662 Round\nDescription\nRounds a number to the specified number of decimal places.\nSyntax\nRound ( x, n )\nTable 2.1159:\nArgument\nDescription\nx\nThe number you want to round.\nn\nThe number of decimal places to which you want to round x. Valid\nvalues are 0 through 30.\nReturn value\nDecimal. Returns x rounded to the specified number of decimal places if it succeeds, and null\nif it fails or if any argument's value is null.\nExamples\nThis statement returns 9.62:\nRound(9.624, 2)\nThis statement returns 9.63:\nRound(9.625, 2)\nThis statement returns 9.600:\nRound(9.6, 3)\nThis statement returns -9.63:\nRound(-9.625, 2)\nThis statement returns null:\nRound(-9.625, -1)\nSee also\nCeiling\nInit (obsolete)\nTruncate\nRound method for DataWindows in Section 2.4.109, \u201cRound\u201d in DataWindow Reference.\n"}
{"page": 1306, "text": "Statements, Events, and Functions\nPage 1306\n2.4.663 RoutineList\nDescription\nProvides a list of the routines included in a performance analysis model.\nApplies to\nProfileClass and Profiling objects\nSyntax\ninstancename.RoutineList ( list )\nTable 2.1160:\nArgument\nDescription\ninstancename\nInstance name of the ProfileClass or Profiling object.\nlist\nAn unbounded array variable of datatype ProfileRoutine in which\nRoutineList stores a ProfileRoutine object for each routine that exists in\nthe model within a class. This argument is passed by reference.\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- No model exists\nUsage\nUse this function to extract a list of the routines included in the performance analysis model\nin a particular class. You must have previously created the performance analysis model from\na trace file using the BuildModel function. Each routine is defined as a ProfileRoutine object\nand provides the time spent in the routine, any called routines, the number of times each\nroutine was called, and the class to which the routine belongs. The routines are listed in no\nparticular order.\nObject creation and destruction for a class are each indicated by a routine in this list as well\nas by embedded SQL statements.\nExamples\nThis example lists the routines included in each class found in a performance analysis model:\nLong ll_cnt\nProfileCall lproc_call[]\n \nlpro_model.BuildModel()\nlpro_model.RoutineList(iprort_list)\n...\nSee also\nClassList\n"}
{"page": 1307, "text": "Statements, Events, and Functions\nPage 1307\n2.4.664 Run\nDescription\nRuns the specified application program.\nSyntax\nRun ( string {, windowstate } )\nTable 2.1161:\nArgument\nDescription\nstring\nA string whose value is the file name of the program you want to execute.\nOptionally, string can contain one or more parameters for the program.\nwindowstate\n(optional)\nA value of the WindowState enumerated datatype indicating the state in\nwhich you want to run the program:\n\u2022 Maximized! -- Maximized; enlarge the program window to its\nmaximum size when it starts\n\u2022 Minimized! -- Minimized; shrink the program window to an icon when\nit starts\n\u2022 Normal! -- (Default) Run the program window in its normal size\nReturn value\nInteger. Returns 1 if it is successful and -1 if an error occurs. If any argument's value is null,\nRun returns null.\nUsage\nYou can use Run for any program that you can run from the operating system. If you do not\nspecify parameters, Run opens the application and displays the first application window. If\nyou specify windowstate, the application window is displayed in the specified state.\nIf you specify parameters, the application determines the meaning of those parameters. A\ntypical use is to identify a data file to be opened when the program is executed. If you are\nrunning another PowerBuilder application, that application can call the CommandParm\nfunction to retrieve the parameters and process them as it sees fit.\nIf the file extension is omitted from the file name, PowerBuilder assumes the extension\nis .EXE. To run a program with another extension (for example, .BAT, .COM, or .PIF), you\nmust specify the extension.\nExamples\nThis statement runs the Microsoft Windows Clock accessory application in its normal size:\nRun(\"Clock\")\nThis statement runs the Microsoft Windows Clock accessory application minimized:\nRun(\"Clock\", Minimized!)\n"}
{"page": 1308, "text": "Statements, Events, and Functions\nPage 1308\nThis statement runs the program WINNER.COM on the C drive in a maximized state. The\nparameter passed to WINNER.COM opens the file EMPLOYEE.INF:\nRun(\"C:\\WINNER.COM EMPLOYEE.INF\", Maximized!)\nThis example runs the DOS batch file MYBATCH.BAT and passes the parameter TEST to\nthe batch file. In the batch file, you include percent substitution characters in the commands\nto indicate where the parameter is used:\nRun(\"MYBATCH.BAT TEST\")\nIn the batch file the following statement renames FILE1 to TEST:\nRENAME c:\\PB\\FILE1 %1\n2.4.665 Save\nSaves saves a picture and optionally overlay ink to a file or blob from an InkPicture control\nor saves an OLE object in an OLE control or an OLE storage object. The syntax you use\ndepends on the type of object you want to save.\nTable 2.1162:\nTo\nTo\nSave the contents of an InkPicture control\nSyntax 1\nSave an OLE object\nSyntax 2\n2.4.665.1 Syntax 1: For InkPicture controls\nDescription\nSaves a picture and optionally overlay ink to a file or blob from an InkPicture control.\nApplies to\nInkPicture controls\nSyntax\ninkpicname.Save( t | b , format { , WithInk } )\nTable 2.1163:\nArgument\nDescription\ninkpicname\nThe name of the InkPicture control from which you want to save a\npicture.\nt\nA string containing the name and location of the file into which the\npicture will be saved.\nb\nThe name of a blob passed by reference that will hold the picture in the\ncontrol.\nformat\nAn integer specifying the format in which the picture is to be saved.\nValues are:\n0 -- BMP (bitmap)\n"}
{"page": 1309, "text": "Statements, Events, and Functions\nPage 1309\nArgument\nDescription\n1 -- JPEG (Joint Photographic Experts Group)\n2 -- GIF (Graphics Interchange Format)\n3 -- TIFF (Tagged Image File Format)\n4 -- PNG (Portable Network Graphics)\nWithInk\n(optional)\nA boolean specifying whether overlay ink should be saved with the\npicture. Values are:\nTrue -- overlay ink is saved with the picture (default)\nFalse -- overlay ink is not saved with the picture\nReturn value\nInteger. Returns 1 for success and -1 for failure.\nUsage\nUse the Save function to save the image in an InkPicture control to a file or blob with or\nwithout any ink annotations that have been made to it. By default, the ink is saved with the\nimage.\nExamples\nThe following example saves the image in an InkPicture control and its ink annotations in\nbitmap format into a blob, and attempts to update the image in the database:\nint li_return\nblob lblb_ink\nli_return = ip_1.save(lblb_ink, 0, true)\nUPDATEBLOB employee SET backimage = :lbb_ink WHERE emp_id = :gi_id;\nIF sqlca.SQLNRows > 0 THEN\n   COMMIT;\nELSE\n   messagebox(\"Update failed\",sqlca.sqlerrtext)\nEND IF\nThe following example saves the image in an InkControl into a GIF file without any ink\nannotations:\nint li_return\nstring ls_pathname, ls_filename\nGetFileSaveName(\"Save As\", ls_pathname, ls_filename, \"GIF\")\nli_return = ip_1.save(ls_pathname, 2, false)\nSee also\nLoadInk\nLoadPicture\nResetInk\nResetPicture\nSaveInk\n"}
{"page": 1310, "text": "Statements, Events, and Functions\nPage 1310\n2.4.665.2 Syntax 2: For OLE objects\nDescription\nSaves an OLE object in an OLE control or an OLE storage object.\nSyntax\noleobject.Save ( )\nTable 2.1164:\nArgument\nDescription\noleobject\nThe name of an OLE control or an OLE storage variable\nReturn value\nInteger. Returns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Control is empty\n-9 -- Other error\nIf oleobject is null, Save returns null.\nUsage\nWhen you save an OLE object, PowerBuilder saves it according to the current connection\nbetween it and an open storage or file. You establish an initial connection when you call the\nOpen function. When you call SaveAs, the old connection is ended and a new connection is\nestablished with another storage or file.\nWhen you call Save for an OLE control, PowerBuilder saves the object in the OLE control to\nthe storage to which it is currently connected. The storage can be a storage object variable or\na OLE storage file.\nIf the data has never been saved in the server application, so that there is no file on disk, the\nSave function in PowerBuilder returns an error.\nWhen you call Save for a storage object variable, PowerBuilder saves the storage to the file,\nor substorage within the file, to which it is currently connected. You must have previously\nestablished a connection to an OLE storage file on disk, or a substorage within the file, either\nwith Open or SaveAs.\nWhen do you have to save twice?\nIf you create a storage object variable and then open that object in an OLE control,\nyou need to call Save twice to write changed OLE information to disk: once to save\nfrom the object in the control to the storage, and again to save the storage to its\nassociated file.\nExamples\nThis example saves the object in the control ole_1 back to the storage from which it was\nloaded, either a storage object variable or a file on disk:\ninteger result\n"}
{"page": 1311, "text": "Statements, Events, and Functions\nPage 1311\nresult = ole_1.Save()\nThis example saves a storage object to its file. Olestor_1 is an instance variable of type\nolestorage:\ninteger result\nresult = olestor_1.Save()\nIn a window's Open script, this code creates a storage variable ole_stor, which is declared as\nan instance variable, and associates it with a storage file that contains several Visio drawings.\nThe script then opens one of the drawings into the control ole_draw. After the user activates\nand edits the object, the script for a Save button saves the object to the storage and then to the\nstorage's file.\nThe script for the window's Open event includes:\nOLEStorage stg_stor\nstg_stor = CREATE OLEStorage\nstg_stor.Open(\"myvisio.ole\")\nole_draw.Open(ole_stor, \"visio_drawing1\")\nThe script for the Save button's Clicked event is:\ninteger result\nresult = ole_draw.Save()\nIF result = 0 THEN ole_stor.Save()\nSee also\nClose\nSaveAs\n2.4.666 SaveAs\nSaves the contents of a DataWindow, DataStore, graph, OLE control, or OLE storage in a\nfile. The syntax you use depends on the type of object you want to save.\nFor DataWindow and DataStore syntax, see the SaveAs method for DataWindows in\nSection 9.132, \u201cSaveAs\u201d in DataWindow Reference.\nTable 2.1165:\nTo\nTo\nSave the data in a graph\nSyntax 1\nSave the OLE object in an OLE control to a storage file\nSyntax 2\nSave the OLE object in an OLE control to a storage object in memory\nSyntax 3\nSave an OLE storage and any controls that have opened that storage in a\nfile\nSyntax 4\nSave an OLE storage object in another OLE storage object\nSyntax 5\n2.4.666.1 Syntax 1: For graph objects\nDescription\nSaves the data in a graph in the format you specify.\n"}
{"page": 1312, "text": "Statements, Events, and Functions\nPage 1312\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls and\nDataStores\nSyntax\ncontrolname.SaveAs ( { filename, } { graphcontrol, saveastype, colheading { ,\n encoding } } )\nTable 2.1166:\nArgument\nDescription\ncontrolname\nThe name of the graph control whose contents you want to save or the\nname of the DataWindow DataStore containing the graph.\nfilename\n(optional)\nA string whose value is the name of the file in which you want to save\nthe data in the graph. If you omit filename or specify an empty string (\"\"),\nPowerBuilder prompts the user for a file name.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nor DataStore whose contents you want to save.\nsaveastype\n(optional)\nA value of the SaveAsType enumerated datatype specifying the format in\nwhich to save the data represented in the graph. Values are:\n\u2022 Clipboard! -- Save an image of the graph to the clipboard\n\u2022 CSV! -- Comma-separated values\n\u2022 dBASE2! -- dBASE-II format\n\u2022 dBASE3! -- dBASE-III format\n\u2022 DIF! -- Data Interchange Format\n\u2022 EMF! -- Enhanced Metafile Format\n\u2022 Excel! -- Microsoft Excel format\n\u2022 Excel5! -- Microsoft Excel version 5 format\n\u2022 Excel8! -- Microsoft Excel version 8 and higher format\n\u2022 HTMLTable! -- HTML TABLE, TR, and TD elements\n\u2022 PDF! -- Adobe Portable Document Format\n\u2022 PSReport! -- Powersoft Report (PSR) format\n\u2022 SQLInsert! -- SQL syntax\n\u2022 SYLK! -- Microsoft Multiplan format\n"}
{"page": 1313, "text": "Statements, Events, and Functions\nPage 1313\nArgument\nDescription\n\u2022 Text! -- (Default) Tab-separated columns with a return at the end of\neach row\n\u2022 WKS! -- Lotus 1-2-3 format\n\u2022 WK1! -- Lotus 1-2-3 format\n\u2022 WMF! -- Windows Metafile Format\n\u2022 XLSB! -- Excel format for binary data\n\u2022 XLSX! -- Excel format for XML data\n\u2022 XML! -- Extensible Markup Language\n\u2022 XSLFO! -- Extensible Stylesheet Language Formatting Objects\nObsolete values\nThe following SaveAsType values are considered to be obsolete and will\nbe removed in a future release: Excel!, WK1!, WKS!, SYLK!, dBase2!,\nWMF!. Use Excel8!, XLSB!, or XLSX! for current versions of Microsoft\nExcel! and EMF! in place of WMF!.\ncolheading\n(optional)\nA boolean value indicating whether you want column headings with the\nsaved data. The default value is true. Colheading is ignored for dBASE\nfiles; column headings are always saved.\nencoding\n(optional)\nCharacter encoding of the file to which the data is saved. This parameter\napplies only to the following formats: TEXT, CSV, SQL, HTML, and\nDIF. If you do not specify an encoding parameter, the file is saved in\nANSI format. Values are:\n\u2022 EncodingANSI! (default)\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE!\n\u2022 EncodingUTF16BE!\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SaveAs\nreturns null.\nUsage\nYou must use zero or three arguments. If you do not specify any arguments for SaveAs,\nPowerBuilder displays the Save As dialog box, letting the user specify the format of the\nsaved data.\n"}
{"page": 1314, "text": "Statements, Events, and Functions\nPage 1314\nRegional settings\nIf you use date formats in your graph, you must verify that yyyy is the Short Date\nStyle for year in the Regional Settings of the user's Control Panel. Your program can\ncheck this with the RegistryGet function.\nIf the setting is not correct, you can ask the user to change it manually or to have the\napplication change it (by calling the RegistrySet function). The user may need to\nreboot after the setting is changed.\nExamples\nThis statement saves the contents of the graph gr_History. The file and format information\nare not specified, so PowerBuilder prompts for the file name and save the graph as tab-\ndelimited text:\ngr_History.SaveAs()\nThis statement saves the contents of gr_History to the file G:\\HR\\EMPLOYEE.HIS. The\nformat is CSV without column headings:\ngr_History.SaveAs(\"G:\\HR\\EMPLOYEE.HIS\" ,CSV!, FALSE)\nThis statement saves the contents of gr_computers in the DataWindow control dw_equipmt\nto the file G:\\INVENTORY\\SALES.XLS. The format is Excel with column headings:\ndw_equipmt.SaveAs(\"gr_computers\", &\n      \"G:\\INVENTORY\\SALES.XLS\", Excel!, TRUE)\nSee also\nPrint\n2.4.666.2 Syntax 2: For saving an OLE control to a file\nDescription\nSaves the object in an OLE control in a storage file.\nApplies to\nOLE controls\nSyntax\nolecontrol.SaveAs (OLEtargetfile )\nTable 2.1167:\nArgument\nDescription\nolecontrol\nThe name of the OLE control containing the object you want to save.\nOLEtargetfile\nA string specifying the name of an OLE storage file. The file can already\nexist. OLEtargetfile can include a path, as well as information about\nwhere to store the object in the file's internal structure.\nReturn value\n"}
{"page": 1315, "text": "Statements, Events, and Functions\nPage 1315\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The control is empty\n-2 -- The storage is not open\n-3 -- The storage name is invalid\n-9 -- Other error\nIf any argument's value is null, SaveAs returns null.\nUsage\nThe Open function establishes a connection between a storage file and a storage object, or a\nstorage file or object and an OLE control. The Save function uses this connection to save the\nOLE data.\nWhen you call SaveAs for an OLE control, it closes the current connection between the OLE\nobject and its storage, either file or storage object. It establishes a new connection with the\nnew storage, which will be the target of subsequent calls to the Save function.\nExamples\nThis example saves the object in the control ole_1:\ninteger result\nresult = ole_1.SaveAs(\"c:\\ole\\expense.ole\")\nSee also\nOpen\nSave\n2.4.666.3 Syntax 3: For saving an OLE control to an OLE storage\nDescription\nSaves the object in an OLE control to an OLE storage object in memory.\nApplies to\nOLE controls\nSyntax\nolecontrol.SaveAs ( targetstorage, substoragename )\nTable 2.1168:\nArgument\nDescription\nolecontrol\nThe name of the OLE control containing the object you want to save.\ntargetstorage\nThe name of an object variable of OLEStorage in which to store the\nobject in olecontrol.\nsubstoragename\nA string whose value is the name of a substorage within targetstorage. If\nsubstorage does not exist, SaveAs creates it.\n"}
{"page": 1316, "text": "Statements, Events, and Functions\nPage 1316\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The control is empty\n-2 -- The storage is not open\n-3 -- The storage name is invalid\n-9 -- Other error\nIf any argument's value is null, SaveAs returns null.\nUsage\nThe Open function establishes a connection between a storage file and a storage object, or a\nstorage file or object and an OLE control. The Save function uses this connection to save the\nOLE data.\nWhen you call SaveAs for an OLE control, it closes the current connection between the OLE\nobject and its storage, either file or storage object. It establishes a new connection with the\nnew storage, which will be the target of subsequent calls to the Save function.\nExamples\nThis example saves the object in the control ole_1 in the storage variable stg_stuff:\ninteger result\nresult = ole_1.SaveAs(stg_stuff)\nSee also\nOpen\nSave\n2.4.666.4 Syntax 4: For saving an OLE storage object to a file\nDescription\nSaves an OLE storage object to a file. If OLE controls have opened the OLE storage object,\nthis syntax of SaveAs puts them in a saved state too.\nApplies to\nOLE storage objects\nSyntax\nolestorage.SaveAs (OLEtargetfile )\nTable 2.1169:\nArgument\nDescription\nolestorage\nThe name of an object variable of type OLEStorage containing the OLE\nobject you want to save.\nOLEtargetfile\nA string specifying the name of a new OLE storage file. OLEtargetfile\ncan include a path.\n"}
{"page": 1317, "text": "Statements, Events, and Functions\nPage 1317\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The storage is not open\n-2 -- The storage name is invalid\n-3 -- The parent storage is not open\n-4 -- The file already exists\n-5 -- Insufficient memory\n-6 -- Too many files open\n-7 -- Access denied\n-9 -- Other error\nIf any argument's value is null, SaveAs returns null.\nUsage\nThe Open function establishes a connection between a storage file and a storage object, or a\nstorage file or object and an OLE control. The Save function uses this connection to save the\nOLE data.\nWhen you call SaveAs for a storage object, it closes the current connection between the\nstorage object and a file and creates a new file for the storage object's data.\nFor information about the structure of storage files, see the Open function.\nExamples\nThis example saves the storage object stg_stuff to the file MYSTUFF.OLE. Olest_stuff is an\ninstance variable:\ninteger result\nresult = stg_stuff.SaveAs(\"c:\\ole\\mystuff.ole\")\nThis example opens a substorage in one file and saves it in another file. An OLE storage\nfile called MYROOT.OLE contains several substorages; one is called sub1. To open sub1\nand save it in another file, the example defines two storage objects: stg1 and stg2. First\nMYROOT.OLE is opened into stg1. Next, sub1 is opened into stg2. Finally, stg2 is saved to\nthe new file MYSUB.OLE. Just as when you open a word processing document and save it\nto a new name, the open object in stg2 is no longer associated with MYROOT.OLE; it is now\nconnected to MYSUB.OLE:\nolestorage stg1, stg2\nstg1 = CREATE OLEStorage\nstg2 = CREATE OLEStorage\nstg1.Open(\"myroot.ole\")\nstg2.Open(\"sub1\", stg1)\n \nstg2.SaveAs(\"mysub.ole\")\nSee also\nClose\n"}
{"page": 1318, "text": "Statements, Events, and Functions\nPage 1318\nOpen\nSave\n2.4.666.5 Syntax 5: For saving an OLE storage object in another OLE storage\nDescription\nSaves an OLE storage object to another OLE storage object variable in memory.\nApplies to\nOLE storage objects\nSyntax\nolestorage.SaveAs ( substoragename, targetstorage )\nTable 2.1170:\nArgument\nDescription\nolestorage\nThe name of an object variable of type OLEStorage containing the OLE\nobject you want to save.\nsubstoragename\nA string whose value is the name of a substorage within targetstorage. If\nsubstorage does not exist, SaveAs creates it.\ntargetstorage\nThe name of an object variable of OLEStorage in which to store the\nobject in olestorage. Note the reversed order of the substoragename and\ntargetstorage arguments from Syntax 4.\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- The storage is not open\n-2 -- The storage name is invalid\n-3 -- The parent storage is not open\n-4 -- The file already exists\n-5 -- Insufficient memory\n-6 -- Too many files open\n-7 -- Access denied\n-9 -- Other error\nIf any argument's value is null, SaveAs returns null.\nUsage\nThe Open function establishes a connection between a storage file and a storage object, or a\nstorage file or object and an OLE control. The Save function uses this connection to save the\nOLE data.\n"}
{"page": 1319, "text": "Statements, Events, and Functions\nPage 1319\nWhen you call SaveAs for a storage object, it closes the current connection between the\nstorage object and a file and creates a new file for the storage object's data.\nFor information about the structure of storage files, see the Open function.\nExamples\nThis example saves the object in the OLEStorage variable stg_stuff in a second storage\nvariable stg_clone as the substorage copy1:\ninteger result\nresult = stg_stuff.SaveAs(\"copy1\", stg_clone)\nSee also\nClose\nOpen\nSave\n2.4.667 SaveDockingState\nDescription\nStores the MDI state in the registry.\nApplies to\nWindow objects\nSyntax\nSaveDockingState ( regkey )\nTable 2.1171:\nArgument\nDescription\nregkey\nThe regkey argument is the registry key. If no entry for the key exists in\nthe registry, one is created. Existing keys are overwritten.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null\nSaveDockingState returns null.\nUsage\nYou can set the application so that it saves the states of the open sheets. You should call this\nfunction when the application closes.\nExamples\nSave all sheets in register\ninteger li_rtn\nstring is_register = \"Appeon\\PowerBuilder\\Examples\\Docking\\\"\nli_rtn = this.SaveDockingState (is_register)\n"}
{"page": 1320, "text": "Statements, Events, and Functions\nPage 1320\n2.4.668 SaveDocument\nDescription\nSaves the contents of a RichTextEdit control in a file. You can specify either rich-text format\n(RTF) or text format for the file.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.SaveDocument ( filename {, filetype {, encoding }} )\nTable 2.1172:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control whose contents you want to save.\nfilename\nA string whose value is the name of the file to be saved. If the file already\nexists, the FileExists event is triggered.\nfiletype\n(optional)\nA value of the FileType enumerated datatype specifying the format of the\nsaved file. Values are:\n\u2022 FileTypeRichText! -- Save the file in rich text format\n\u2022 FileTypeText! -- Save the file as text\n\u2022 FileTypeDoc! -- Save the file in Microsoft Word format\n\u2022 FileTypeHTML! -- Save the file in HTML format\n\u2022 FileTypePDF! -- Save the file in PDF format\nencoding\n(optional)\nCharacter encoding of the file to which the data is saved. This parameter\napplies only to text files. If you do not specify an encoding parameter, the\nfile is saved in ANSI format.\nThe filetype argument must be set to FileTypeText! If the filetype\nargument is set to any other file type, this argument is ignored. Values\nare:\n\u2022 EncodingANSI! (default)\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE!\n\u2022 EncodingUTF16BE!\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\n"}
{"page": 1321, "text": "Statements, Events, and Functions\nPage 1321\nUsage\nSaveDocument triggers a FileExists event when the file you name already exists. If you do\nnot specify a filetype, SaveDocument saves the file as a text file if you specify a file name\nwith the extension .txt, as a Microsoft Word document if you specify a file name with the\nextension .doc, and as an RTF file if you specify a file name with the .rtf extension.\nThe format that you specify in the encoding argument is valid only if you specified\nFileTypeText! for the filetype argument. SaveDocument saves text in ANSI format only for\nall other file types.\nExamples\nThis code for a CommandButton saves the document in the RichTextEdit rte_1:\ninteger li_rtn\nli_rtn = rte_1.SaveDocument(\"c:\\test.rtf\", &\nFileTypeRichText!)\nIf the file TEST.RTF already exists, PowerBuilder triggers the FileExists event with the\nfollowing script. OpenWithParm displays a response window that asks the user if it is OK to\noverwrite the file. The return value from FileExists determines whether the file is saved:\nOpenWithParm( w_question, &\n      \"The specified file already exists. \" + &\n         \"Do you want to overwrite it?\" )\nIF Message.StringParm = \"Yes\" THEN\n      RETURN 0  // File is saved\nELSE\n      RETURN -1 // Saving is canceled\nEND IF\nThis code for a CommandButton saves the document in the RichTextEdit rte_1 in a text file\nwith UTF-16LE encoding:\ninteger li_rtn\nli_rtn = rte_1.SaveDocument(\"c:\\test.txt\", &\n   FileTypeText!, EncodingUTF16LE!)\nSee also\nInsertDocument\n2.4.669 SaveInk\nDescription\nSaves ink to a file or blob from an InkPicture control.\nApplies to\nInkPicture controls\nSyntax\ninkpicname.SaveInk ( t | b {, format {, mode } } )\nTable 2.1173:\nArgument\nDescription\ninkpicname\nThe name of the InkPicture control from which you want to save ink.\n"}
{"page": 1322, "text": "Statements, Events, and Functions\nPage 1322\nArgument\nDescription\nt\nA string containing the name and location of a file that will hold the ink\nyou want to save from the control.\nb\nThe name of a blob passed by reference that will hold the ink you want to\nsave from the control.\nformat (optional) A value of the InkPersistenceFormat enumerated variable that specifies\nthe format in which you want to save the ink. Values are:\n\u2022 Base64GIFFormat!\n\u2022 Base64InkSerializedFormat!\n\u2022 GIFFormat!\n\u2022 InkSerializedFormat! (default)\nmode (optional)\nA value of the InkCompressionMode enumerated variable that specifies\nthe compression mode in which you want to save the ink. Values are:\n\u2022 DefaultCompression! (default)\n\u2022 MaximumCompression!\n\u2022 NoCompression!\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\nUse the SaveInk function to save annotations made to an image in an InkPicture control to a\nseparate file or blob.\nInkSerializedFormat! (ISF) provides the most compact persistent ink representation.\nThis format can be embedded inside a binary document format or added to the clipboard.\nBase64InkSerializedFormat! encodes the ISF format as a base64 stream, which allows the ink\nto be encoded in an XML or HTML file.\nGIFFormat! saves the image in a Graphics Interchange Format (GIF) file in which ISF is\nembedded as metadata. This format can be viewed in applications that are not ink enabled.\nBase64GIFFormat! is persisted by using a base64 encoded fortified GIF. Use this format\nif the ink is to be encoded directly in an XML or XHTML file and will be converted to an\nimage at a later time. It supports XSLT transformations to HTML.\nExamples\nThe following example saves the ink in an InkPicture control into an ISF file with default\ncompression:\nint li_return\nstring ls_pathname, ls_filename\n"}
{"page": 1323, "text": "Statements, Events, and Functions\nPage 1323\nGetFileSaveName(\"Save As\", ls_pathname, ls_filename, \"ISF\")\nli_return = ip_1.SaveInk(ls_pathname)\nThe following example saves the ink in an InkPicture control into a GIF file with maximum\ncompression:\nint li_return\nstring ls_pathname, ls_filename\nGetFileSaveName(\"Save As\", ls_pathname, ls_filename, \"GIF\")\nli_return = ip_1.SaveInk(ls_pathname, GIFFormat!, MaximumCompression!)\nSee also\nLoadInk\nLoadPicture\nResetInk\nResetPicture\nSave\n2.4.670 SaveToFile\nDescription\nSaves the JSON data to the local file.\nApplies to\nJSONGenerator and JSONPackage\nSyntax\nobjectname.SaveToFile ( FileName {, Encoding e} )\nTable 2.1174:\nArgument\nDescription\nobjectname\nThe name of the JSONGenerator or JSONPackage object whose data you\nwant to save to the file.\nFileName\nA string whose value is the file full name.\ne (optional)\nCharacter encoding of the resulting blob.\nValues are: EncodingANSI!, EncodingUTF8!, EncodingUTF16LE!\n(default), and EncodingUTF16BE!.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\n"}
{"page": 1324, "text": "Statements, Events, and Functions\nPage 1324\nThis example generates the following JSON string and saves to d:\\test.json:\n{ \"string\": \"string\", \"long\": 100, \"boolean\": true, \"datetime\": \"2017-09-21 12:00:00\", \"blob\":\n\"dABoAGkAcwAgAGkAcwAgAGIAbABvAGIA\", \"remark\": null }\nLong ll_RootObject\nJsonGenerator lnv_JsonGenerator\nlnv_JsonGenerator = Create JsonGenerator\n// Create an object root item\nll_RootObject = lnv_JsonGenerator.CreateJsonObject()\n// Add a value child item\nlnv_JsonGenerator.AddItemString(ll_RootObject, \"string\", \"string\")\nlnv_JsonGenerator.AddItemNumber(ll_RootObject, \"long\", 100)\nlnv_JsonGenerator.AddItemBoolean(ll_RootObject, \"boolean\", true)\nlnv_JsonGenerator.AddItemDateTime(ll_RootObject, \"datetime\", datetime(\"2017-09-21\n 12:00:00\")) \nlnv_JsonGenerator.AddItemBlob(ll_RootObject, \"blob\", blob(\"this is blob\"))\nlnv_JsonGenerator.AddItemNull(ll_RootObject, \"remark\")\n// Get the JSON data\nlnv_JsonGenerator.SaveToFile(\"d:\\test.json\")\nThis example packages the data of the DataWindow, DataStore, and DataWindowChild\ncontrol and then saves the data to D:\\temp\\json.txt.\ndatastore lds_employee\ndatawindowchild ldwc_active\nJsonPackage lnv_package\nlnv_package = create JsonPackage\n...//Initialize data for lds_employee, ldwc_active\n// package the data\nlnv_package.SetValue(\"d_department\", dw_department, false)\nlnv_package.SetValue(\"d_employee\", lds_employee) \nlnv_package.SetValue(\"dddw_active\", ldwc_active, false)\nlnv_package.SaveToFile(\"D:\\temp\\json.txt\")\n2.4.671 Scroll\nDescription\nScrolls a multiline edit control or the edit control of a DataWindow a specified number of\nlines up or down.\nApplies to\nDataWindow, MultiLineEdit, and RichTextEdit controls\nSyntax\neditname.Scroll ( number )\nTable 2.1175:\nArgument\nDescription\neditname\nThe name of the DataWindow, RichTextEdit, or MultiLineEdit in which\nyou want to scroll up or down. If editname is a DataWindow, then Scroll\naffects its edit control.\n"}
{"page": 1325, "text": "Statements, Events, and Functions\nPage 1325\nArgument\nDescription\nnumber\nA long specifying the direction and number of lines you want to scroll.\nTo scroll down, use a positive long value. To scroll up, use a negative\nlong value.\nReturn value\nLong.\nFor RichTextEdit controls, Scroll returns 1 if it succeeds. For other controls, Scroll returns\nthe line number of the first visible line in editname if it succeeds. Scroll returns -1 if an error\noccurs. If any argument's value is null, Scroll returns null.\nUsage\nIf the number of lines left in the list is less than the number of lines that you want to scroll,\nthen Scroll scrolls to the beginning or end, depending on the direction specified.\nExamples\nThis statement scrolls mle_Employee down 4 lines:\nmle_Employee.Scroll(4)\nThis statement scrolls mle_Employee up 4 lines:\nmle_Employee.Scroll(-4)\nSee also\nThe following functions implement scrolling in a DataWindow or a RichTextEdit:\nScrollNextPage\nScrollNextRow\nScrollPriorPage\nScrollPriorRow\nScrollToRow\n2.4.672 ScrollNextPage\nDescription\nScrolls to the next page of the document in a RichTextEdit control or RichTextEdit\nDataWindow.\nFor DataWindow syntax, see the ScrollNextPage method for DataWindows in Section 9.141,\n\u201cScrollNextPage\u201d in DataWindow Reference.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.ScrollNextPage ( )\n"}
{"page": 1326, "text": "Statements, Events, and Functions\nPage 1326\nTable 2.1176:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you want\nto scroll to the next page.\nThe DataWindow object in the DataWindow control must be a\nRichTextEdit DataWindow.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nWhen the RichTextEdit control shares data with a DataWindow, the RichTextEdit contains\nmultiple instances of the document, one instance for each row.\nWhen the last page of the document for one row is visible, calling ScrollNextPage advances\nto the first page for the next row.\nScrollNextPage and ScrollPriorPage work in the RichTextEdit control edit mode only when\nthe HeaderFooter property of a rich text control is selected. They work in print preview mode\nregardless of the HeaderFooter property setting and they work for the RichText DataWindow\ncontrol in edit mode whether or not the DataWindow has header or footer bands.\nExamples\nThis statement scrolls to the next page of the document in the RichTextEdit control rte_1. If\nthere are multiple instances of the document, it can scroll to the next instance:\nrte_1.ScrollNextPage()\nSee also\nScroll\nScrollNextRow\nScrollPriorPage\nScrollPriorRow\n2.4.673 ScrollNextRow\nDescription\nScrolls to the next instance of the document in a RichTextEdit control or RichTextEdit\nDataWindow. A RichTextEdit control has multiple instances of its document when it shares\ndata with a DataWindow. The next instance of the document is associated with the next row\nin the DataWindow.\nFor syntax specific to DataWindow controls and child DataWindows, see the ScrollNextRow\nmethod for DataWindows in Section 9.142, \u201cScrollNextRow\u201d in DataWindow Reference.\nApplies to\n"}
{"page": 1327, "text": "Statements, Events, and Functions\nPage 1327\nDataWindow and RichTextEdit controls\nSyntax\nrtename.ScrollNextRow ( )\nTable 2.1177:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you want\nto scroll to the next document instance. Each instance is associated with a\nDataWindow row.\nThe DataWindow object in the DataWindow control must be a\nRichTextEdit DataWindow.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nWhen the RichTextEdit shares data with a DataWindow, the RichTextEdit contains multiple\ninstances of the document, one instance for each row.\nScrollNextRow advances to the next instance of the RichTextEdit document. In contrast,\nrepeated calls to ScrollNextPage advance through all the pages of the document instance and\nthen on to the pages for the next row.\nExamples\nThis statement scrolls to the next instance of the document in the RichTextEdit control rte_1.\nEach document instance is associated with a row of data.\nrte_1.ScrollNextRow()\nSee also\nScroll\nScrollNextPage\nScrollPriorPage\nScrollPriorRow\n2.4.674 ScrollPriorPage\nDescription\nScrolls to the prior page of the document in a RichTextEdit control or RichTextEdit\nDataWindow.\nFor syntax specific to DataWindow controls and child DataWindows, see the ScrollPriorPage\nmethod for DataWindows in Section 9.143, \u201cScrollPriorPage\u201d in DataWindow Reference.\nApplies to\n"}
{"page": 1328, "text": "Statements, Events, and Functions\nPage 1328\nDataWindow and RichTextEdit controls\nSyntax\nrtename.ScrollPriorPage ( )\nTable 2.1178:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you want\nto scroll to the prior page.\nThe DataWindow object in the DataWindow control must be a\nRichTextEdit DataWindow.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nWhen the RichTextEdit shares data with a DataWindow, the RichTextEdit contains multiple\ninstances of the document, one instance for each row.\nWhen the first page of the document for one row is visible, calling ScrollPriorPage goes to\nthe last page for the prior row.\nScrollNextPage and ScrollPriorPage work in the RichTextEdit control edit mode only when\nthe HeaderFooter property of a rich text control is selected. They work in print preview mode\nregardless of the HeaderFooter property setting and they work for the RichText DataWindow\ncontrol in edit mode whether or not the DataWindow has header or footer bands.\nExamples\nThis statement scrolls to the prior page of the document in the RichTextEdit control rte_1. If\nthere are multiple instances of the document, it can scroll to the prior instance:\nrte_1.ScrollPriorPage()\nSee also\nScroll\nScrollNextPage\nScrollNextRow\nScrollPriorRow\n2.4.675 ScrollPriorRow\nDescription\nScrolls to the prior instance of the document in a RichTextEdit control or RichTextEdit\nDataWindow. A RichTextEdit control has multiple instances of its document when it shares\ndata with a DataWindow. The next instance of the document is associated with the next row\nin the DataWindow.\n"}
{"page": 1329, "text": "Statements, Events, and Functions\nPage 1329\nFor syntax specific to DataWindow controls and child DataWindows, see the ScrollPriorRow\nmethod for DataWindows in Section 9.144, \u201cScrollPriorRow\u201d in DataWindow Reference.\nApplies to\nDataWindow and RichTextEdit controls\nSyntax\nrtename.ScrollPriorRow ( )\nTable 2.1179:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you want\nto scroll to the prior document instance. Each instance is associated with\na DataWindow row.\nThe DataWindow object in the DataWindow control must be a\nRichTextEdit DataWindow.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nWhen the RichTextEdit shares data with a DataWindow, the RichTextEdit contains multiple\ninstances of the document, one instance for each row.\nScrollPriorRow goes to the prior instance of the RichTextEdit document. In contrast, repeated\ncalls to ScrollPriorPage pages back through all the pages of the document instance and then\nback to the pages for the prior row.\nExamples\nThis statement scrolls to the prior instance of the document in the RichTextEdit control rte_1.\nEach document instance is associated with a row of data.\nrte_1.ScrollPriorRow()\nSee also\nScroll\nScrollNextPage\nScrollNextRow\nScrollPriorPage\n2.4.676 ScrollToRow\nDescription\nScrolls to the document instance associated with the specified row when the RichTextEdit\ncontrols shares data with a DataWindow.\n"}
{"page": 1330, "text": "Statements, Events, and Functions\nPage 1330\nFor syntax specific to DataWindow controls and child DataWindows, see the ScrollToRow\nmethod for DataWindows in Section 9.145, \u201cScrollToRow\u201d in DataWindow Reference.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.ScrollToRow ( row )\nTable 2.1180:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to scroll to a\ndocument instance associated with the specified row.\nrow\nA long identifying the row to which you want to scroll. If row, is 0,\nScrollToRow scrolls to the first row. If row is greater than the number of\nrows in the associated DataWindow, it scrolls to the last row.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nWhen the RichTextEdit shares data with a DataWindow, the RichTextEdit contains multiple\ninstances of the document, one instance for each row. ScrollToRow goes to the instance\nassociated with the specified row.\nExamples\nIn this example, dw_1 has retrieved at least 25 rows of data. After calling DataSource, the\nRichTextEdit control contains at least 25 instances of its document. ScrollToRow scrolls to\nthe 25th instance:\nrte_1.DataSource(dw_1)\nrte_1.ScrollToRow(25)\nSee also\nScroll\nScrollNextPage\nScrollNextRow\nScrollPriorPage\nScrollPriorRow\n2.4.677 Second\nDescription\nObtains the number of seconds in the seconds portion of a time value.\n"}
{"page": 1331, "text": "Statements, Events, and Functions\nPage 1331\nSyntax\nSecond ( time )\nTable 2.1181:\nArgument\nDescription\ntime\nThe time value from which you want the seconds\nReturn value\nInteger.\nReturns the seconds portion of time (00 to 59). If time is null, Second returns null.\nExamples\nThis statement returns 31:\nSecond(19:01:31)\nSee also\nHour\nMinute\nSecond method for DataWindows in Section 2.4.112, \u201cSecond\u201d in DataWindow Reference.\n2.4.678 SecondsAfter\nDescription\nDetermines the number of seconds one time occurs after another.\nSyntax\nSecondsAfter ( time1, time2 )\nTable 2.1182:\nArgument\nDescription\ntime1\nA time value that is the start time of the interval being measured\ntime2\nA time value that is the end time of the interval\nReturn value\nLong.\nReturns the number of seconds time2 occurs after time1. If time2 occurs before time1,\nSecondsAfter returns a negative number. If any argument's value is null, SecondsAfter\nreturns null.\nExamples\nThis statement returns 15:\n"}
{"page": 1332, "text": "Statements, Events, and Functions\nPage 1332\nSecondsAfter(21:15:30, 21:15:45)\nThis statement returns -15:\nSecondsAfter(21:15:45, 21:15:30)\nThis statement returns 0:\nSecondsAfter(21:15:45, 21:15:45)\nIf you declare start_time and end_time time variables and assign 19:02:16 to start_time and\n19:02:28 to end_time as shown below:\ntime start_time, end_time\nstart_time = 19:02:16\nend_time = 19:02:28\nthen each of these statements returns 12:\nSecondsAfter(start_time, end_time)\nSecondsAfter(19:02:16, end_time)\nSecondsAfter(start_time, 19:02:28)\nSecondsAfter(19:02:16, 19:02:28)\nSee also\nDaysAfter\nRelativeDate\nRelativeTime\nSecondsAfter method for DataWindows in Section 2.4.113, \u201cSecondsAfter\u201d in DataWindow\nReference.\n2.4.679 Seek\nMoves the file pointer in an OLE stream object or displays a specified frame in an AVI clip\nin an animation control.\nTable 2.1183:\nTo\nTo\nMove the read/write pointer in an OLE stream object.\nSyntax 1\nDisplays a specific frame in an AVI clip\nSyntax 2\n2.4.679.1 Syntax 1: For OLE stream objects\nDescription\nMoves the read/write pointer to the specified position in an OLE stream object. The pointer is\nthe position in the stream at which the next read or write begins.\nApplies to\nOLEStream objects\nSyntax\n"}
{"page": 1333, "text": "Statements, Events, and Functions\nPage 1333\nolestream.Seek ( position {, origin } )\nTable 2.1184:\nArgument\nDescription\nolestream\nThe name of an OLE stream variable that has been opened.\nposition\nA long whose value is the position relative to origin to which you want to\nmove the read/write pointer.\norigin (optional)\nThe value of the SeekType enumerated datatype specifying where you\nwant to start the seek. Values are:\n\u2022 FromBeginning! -- (Default) At the beginning of the file\n\u2022 FromCurrent! -- At the current position\n\u2022 FromEnd! -- At the end of the file\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Stream is not open\n-2 -- Seek error\n-9 -- Other error\nIf any argument's value is null, Seek returns null.\nExamples\nThis example writes additional data to an OLE stream. First, it opens an OLE object in the\nfile MYSTUFF.OLE and assigns it to the OLEStorage object stg_stuff. Then it opens the\nstream called info in stg_stuff and assigns it to the stream object olestr_info. Seek positions\nthe read/write pointer at the end of the stream so that the contents of the instance blob\nvariable lb_info is written at the end.\nThe example does not check the functions' return values for success, but you should be sure\nto check the return values in your code:\nboolean lb_memexists\nOLEStorage stg_stuff\nOLEStream olestr_info\n \nstg_stuff = CREATE OLEStorage\nstg_stuff.Open(\"c:\\ole\\mystuff.ole\")\nolestr_info.Open(stg_stuff, \"info\", &\n      stgReadWrite!, stgExclusive!)\nolestr_info.Seek(0, FromEnd!)\nolestr_info.Write(lb_info)\nSee also\nOpen\nLength\n"}
{"page": 1334, "text": "Statements, Events, and Functions\nPage 1334\nRead\nWrite\n2.4.679.2 Syntax 2: For animation controls\nDescription\nDisplays a specific frame in an AVI clip in an animation control.\nApplies to\nAnimation controls\nSyntax\nanimationname.Seek ( s )\nTable 2.1185:\nArgument\nDescription\nanimationname\nThe name of animation control displaying the AVI clip\ns\nA long value in the range 0 to 65,535 indicating the frame to display\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\nSeek displays the specified frame. If you specify a value that is greater than the number of\nframes in the clip, Seek displays the last frame in the clip and returns 1. If you specify a value\nthat is not in the specified range, Seek does nothing and returns -1. If the animation was\nplaying, Seek always triggers the Stop event.\nExamples\nThis code in a button's clicked event displays the frame specified by a number in a single line\nedit control, then increments the number by one. Each click of the button advances the clip by\none frame:\n// instance variable number\ninteger li_return\nnumber = long (sle_seek.text)\nli_return = am_1.Seek(number)\nnumber +=1\nsle_seek.text = string(number)\nSee also\nPlay\nStop\n2.4.680 SelectedColumn\nDescription\n"}
{"page": 1335, "text": "Statements, Events, and Functions\nPage 1335\nObtains the number of the character column just after the insertion point in a RichTextEdit\ncontrol.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.SelectedColumn ( )\nTable 2.1186:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit in which you want the number of the\ncharacter after the insertion point\nReturn value\nLong.\nReturns the number of the character just after the insertion point in rtename. If an error\noccurs, SelectedColumn returns -1.\nUsage\nThe insertion point can be at the beginning or end of the selection. Therefore,\nSelectedColumn can return the first character of the selection or the character just after the\nselection, depending on the position of the insertion point.\nExamples\nIf the insertion point is positioned before the fifth character on line 8 of the RichTextEdit\nrte_Contact, the following example sets ll_col to 5 and ll_line to 8:\nlong ll_col, ll_line\nll_col = rte_Contact.SelectedColumn()\nll_line = rte_Contact.SelectedLine()\nSee also\nLineLength\nPosition\nSelectedLine\nSelectedPage\nSelectedText\nTextLine\n2.4.681 SelectedIndex\nDescription\nObtains the number of the selected item in a ListBox, ListView, or RibbonComboBoxItem\ncontrol.\n"}
{"page": 1336, "text": "Statements, Events, and Functions\nPage 1336\nApplies to\nListBox, ListView, and RibbonComboBoxItem controls\nSyntax\nlistcontrolname.SelectedIndex ( )\nTable 2.1187:\nArgument\nDescription\nlistcontrolname\nThe name of the ListBox, ListView, or RibbonComboBoxItem control in\nwhich you want to locate the selected item\nReturn value\nInteger.\nReturns the index of the selected item in listcontrolname. If more than one item is selected,\nSelectedIndex returns the index of the first selected item. If there are no selected items or an\nerror occurs, SelectedIndex returns -1. If listcontrolname is null, SelectedIndex returns null.\nUsage\nSelectedIndex and SelectedItem are meant for lists that allow a single selection only (when\nthe MultiSelect property for the control is false).\nWhen the MultiSelect property is true, SelectedIndex gets the index of the first selected item\nonly. Use the State function, instead of SelectedIndex, to check each item in the list and find\nout if it is selected. Use the Text function to get the text of any item in the list.\nExamples\nIf item 5 in lb_actions is selected, then this example sets li_Index to 5:\ninteger li_Index\nli_Index = lb_actions.SelectedIndex()\nThese statements open the window w_emp if item 5 in lb_actions is selected:\ninteger li_X\nli_X = lb_actions.SelectedIndex()\nIf li_X = 5 then Open(w_emp)\nThese statements return the index of the selected item in the RibbonBar ComboBox:\nInteger li_Return\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.AddItem(\"Item1\")\nli_Return = lr_ComboBox.AddItem(\"Item2\")\nli_Return = lr_ComboBox.SelectedIndex()\nSee also\nSelectedItem\n2.4.682 SelectedItem\nDescription\n"}
{"page": 1337, "text": "Statements, Events, and Functions\nPage 1337\nObtains the text of the selected item in a ListBox control.\nApplies to\nListBox and PictureListBox controls\nSyntax\nlistboxname.SelectedItem ( )\nTable 2.1188:\nArgument\nDescription\nlistboxname\nThe name of the ListBox or PictureListBox in which you want the text of\nthe currently selected item\nReturn value\nString.\nReturns the text of the selected item in listboxname. Returns the empty string (\"\") if no items\nare selected. If listboxname is null, SelectedItem returns null.\nUsage\nSelectedIndex and SelectedItem are meant for lists that allow a single selection only (when\nthe MultiSelect property for the control is false).\nWhen the MultiSelect property is true, SelectedItem gets the text of the first selected item\nonly. Use the State function, instead of SelectedItem, to check each item in the list and find\nout if it is selected. Use the Text function to get the text of any item in the list.\nExamples\nIf the text of the selected item in the ListBox lb_shortcuts is F1, then this example sets\nls_item to F1:\nstring ls_Item\nls_Item = lb_Shortcuts.SelectedItem()\nSee also\nSelectedIndex\nState\n2.4.683 SelectedLength\nDescription\nDetermines the total number of characters in the selected text in an editable control, including\nspaces and line endings.\nApplies to\nDataWindow, EditMask, InkEdit, MultiLineEdit, SingleLineEdit, RichTextEdit,\nDropDownListBox, and DropDownPictureListBox controls\nSyntax\n"}
{"page": 1338, "text": "Statements, Events, and Functions\nPage 1338\neditname.SelectedLength ( )\nTable 2.1189:\nArgument\nDescription\neditname\nThe name of the DataWindow, EditMask, MultiLineEdit, SingleLineEdit,\nRichTextEdit, DropDownListBox, or DropDownPictureListBox control\nin which you want the length of the selected text.\nFor a DataWindow, it reports the length of the selected text in the edit\ncontrol over the current row and column.\nReturn value\nInteger for DataWindow, InkEdit, and list boxes, Long for other controls.\nReturns the length of the selected text in editname. If no text is selected, SelectedLength\nreturns 0. If an error occurs, it returns -1. If editname is null, SelectedLength returns null.\nUsage\nExcept for text in rich text controls, the characters that make up a line ending (produced\nby typing Ctrl+Enter or Enter) can be different on different platforms. On Windows, it is a\ncarriage return plus a line feed and equals two characters when calculating the length. On\nother platforms, a line ending is a single character. A line that has wrapped has no line-ending\ncharacter. For DropDownListBox and DropDownPictureListBox controls, SelectedLength\nreturns -1 if the control's AllowEdit property is set to false.\nRichTextEdit controls\nFor rich text controls, a carriage return plus a line feed always count as a single\ncharacter when calculating the text length.\nFocus and the selection in a drop-down list\nWhen a DropDownListBox or DropDownPictureListBox loses focus, the selected text\nis no longer selected.\nExamples\nIf the selected text in the MultiLineEdit mle_Contact is John Smith, then this example sets\nli_length to 10:\nlong ll_length\nll_length = mle_Contact.SelectedLength()\nSee also\nLineLength\nSelectedItem\nSelectedLine\nSelectedPage\nSelectedStart\n"}
{"page": 1339, "text": "Statements, Events, and Functions\nPage 1339\nTextLine\n2.4.684 SelectedLine\nDescription\nObtains the number of the line that contains the insertion point in an editable control. The\ninsertion point moves to the next line if the current line contains a carriage return.\nApplies to\nDataWindow, MultiLineEdit, and RichTextEdit controls\nSyntax\neditname.SelectedLine ( )\nTable 2.1190:\nArgument\nDescription\neditname\nThe name of the DataWindow, MultiLineEdit, or RichTextEdit in which\nyou want the number of the line containing the insertion point. For a\nDataWindow, it reports the line number in the edit control over the\ncurrent row and column.\nReturn value\nLong.\nReturns the number of the line containing the insertion point in editname. If an error occurs,\nSelectedLine returns -1. If editname is null, SelectedLine returns null.\nUsage\nFor EditMask controls, SelectedLine compiles but always returns 1.\nThe insertion point can be at the beginning or end of the selection. Therefore, SelectedLine\ncan return the first or last selected line, depending on the position of the insertion point.\nExamples\nIf the insertion point is positioned anywhere in line 5 of the MultiLineEdit mle_Contact, the\nfollowing example sets li_SL to 5:\ninteger li_SL\nli_SL = mle_Contact.SelectedLine()\nIn this example, the line the user selects in the MultiLineEdit mle_winselect determines\nwhich window to open:\ninteger li_SL\nli_SL = mle_winselect.SelectedLine()\nIF li_SL = 1 THEN\n      Open(w_emp_data)\nELSEIF li_SL = 2 THEN\n      Open(w_dept_data)\nEND IF\nSee also\n"}
{"page": 1340, "text": "Statements, Events, and Functions\nPage 1340\nLineLength\nPosition\nSelectedColumn\nSelectedPage\nSelectedText\nTextLine\n2.4.685 SelectedPage\nDescription\nObtains the number of the current page in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.SelectedPage ( )\nTable 2.1191:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want the number of\nthe current page\nReturn value\nInteger.\nReturns the number of the current page in rtename. If an error occurs, SelectedPage returns\n-1.\nUsage\nThe current page in a RichTextEdit control is the page that contains the insertion point in text\nentry mode or the page currently being displayed in preview mode.\nWhen the RichTextEdit shares data with a DataWindow, SelectedPage returns the page\nnumber within the document instance for the current row.\nFor more information about document instances, see DataSource.\nExamples\nThis example returns the page number of the current page:\ninteger li_pagect\nli_pagect = rte_1.SelectedPage()\nSee also\nDataSource\nPageCount\n"}
{"page": 1341, "text": "Statements, Events, and Functions\nPage 1341\nPreview\nSelectedLength\nSelectedLine\nSelectedStart\nSelectedText\n2.4.686 SelectedStart\nDescription\nReports the position of the first selected character in an editable control.\nApplies to\nDataWindow, EditMask, MultiLineEdit, SingleLineEdit, RichTextEdit, DropDownListBox,\nand DropDownPictureListBox controls\nSyntax\neditname.SelectedStart ( )\nTable 2.1192:\nArgument\nDescription\neditname\nThe name of the DataWindow, EditMask, MultiLineEdit, SingleLineEdit,\nRichTextEdit, DropDownListBox, or DropDownPictureListBox control\nin which you want to determine the starting position of selected text.\nFor a DataWindow, it reports the starting position in the edit control over\nthe current row and column.\nReturn value\nLong.\nReturns the starting position of the selected text in editname. If no text is selected,\nSelectedStart returns the position of the character immediately following the insertion point.\nIf an error occurs, SelectedStart returns -1. If editname is null, SelectedStart returns null.\nUsage\nFor all controls except RichTextEdit, SelectedStart counts from the start of the text and\nincludes spaces and line endings.\nFor RichTextEdit controls, SelectedStart counts from the start of the line on which the\nselection begins. The start is at the opposite end of the selection from the insertion point. For\nexample, if the user dragged back to make the selection, the start of the selection is at the end\nof the highlighted text and the insertion point is before the start. Use the Position function to\nget information about the start and end of the selection.\nFocus and the selection in a drop-down list\nWhen a DropDownListBox or DropDownPictureListBox loses focus, the selected text\nis no longer selected.\n"}
{"page": 1342, "text": "Statements, Events, and Functions\nPage 1342\nExamples\nIf the MultiLineEdit mle_Comment contains Closed for Vacation July 3 to July 10, and\nVacation is selected, then this example sets li_Start to 12 (the position of the first character in\nVacation):\ninteger li_Start\nli_Start = mle_Comment.SelectedStart()\nSee also\nPosition\nSelectedLine\nSelectedPage\n2.4.687 SelectedText\nDescription\nObtains the selected text in an editable control.\nApplies to\nDataWindow, EditMask, InkEdit, MultiLineEdit, SingleLineEdit, RichTextEdit,\nDropDownListBox, and DropDownPictureListBox controls\nSyntax\neditname.SelectedText ( )\nTable 2.1193:\nArgument\nDescription\neditname\nThe name of the DataWindow, EditMask, MultiLineEdit, SingleLineEdit,\nRichTextEdit, DropDownListBox, or DropDownPictureListBox control\nfrom which you want the selected text.\nFor a DropDownListBox or DropDownPictureListBox, the AllowEdit\nproperty must be true.\nFor a DataWindow, it reports the selected text in the edit control over the\ncurrent row and column.\nReturn value\nString.\nReturns the selected text in editname. If there is no selected text or if an error occurs,\nSelectedText returns the empty string (\"\"). If editname is null, SelectedText returns null.\nUsage\nIn a RichTextEdit control, any pictures in the selection are ignored. If the selection contains\ninput fields, the names of the input fields, enclosed in brackets, become part of the string\nSelectedText returns. The contents of the input fields are not returned.\nFor example, when the salutation of a letter is selected, SelectedText might return:\n"}
{"page": 1343, "text": "Statements, Events, and Functions\nPage 1343\nDear {title} {lastname}:\nFocus and the selection in a drop-down list\nWhen a DropDownListBox or DropDownPictureListBox loses focus, the selected text\nis no longer selected.\nExamples\nIf the text in the MultiLineEdit mle_Contact is James B. Smith and James B. is selected,\nthese statements set the value of emp_fname to James B:\nstring ls_emp_fname\nls_emp_fname = mle_Contact.SelectedText()\nIf the selected text in the edit portion of the DropDownListBox ddlb_Location is Maine,\nthese statements display the ListBox lb_LBMaine:\nstring ls_Loc\nls_Loc = ddlb_Location.SelectedText()\nIF ls_Loc = \"Maine\" THEN\n      lb_LBMaine.Show()\nELSE\n      ...\nEND IF\nSee also\nSelectText\n2.4.688 SelectionRange\nDescription\nHighlights a range of contiguous values in a trackbar control. The range you select is\nhighlighted in the trackbar channel, with an arrow at each end of the range.\nApplies to\nTrackbar controls\nSyntax\ncontrol.SelectionRange ( startpos, endpos )\nTable 2.1194:\nArgument\nDescription\ncontrol\nThe name of the trackbar control\nstartpos\nAn integer that specifies the starting position of the range\nendpos\nAn integer that specifies the ending position of the range\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\n"}
{"page": 1344, "text": "Statements, Events, and Functions\nPage 1344\nUsage\nUse this function to indicate a range of preferred values.\nIn a scheduling application, the selection range could indicate a block of time that is\nunavailable. Setting a selection range does not prevent the user from selecting a value either\ninside or outside the range.\nExamples\nThis statement highlights the trackbar values between 30 and 70:\nHTrackBar.SelectionRange( 30, 70 )\nSee also\nHTrackBar method for DataWindows in Section 2.40, \u201cHTrackBar control\u201d in Objects and\nControls\nVTrackBar method for DataWindows in Section 2.149, \u201cVTrackBar control\u201d in Objects and\nControls\n2.4.689 SelectItem\nFinds and highlights an item in a ListBox, DropDownListBox, RibbonComboBoxItem, or\nTreeView control.\nTable 2.1195:\nTo select an item\nUse\nIn a ListBox control when you know the text of the item, but not its\nposition\nSyntax 1\nIn a ListBox or RibbonComboBoxItem control when you know the\nposition of the item in the control's list, or to clear the current selection\nSyntax 2\nIn a TreeView control\nSyntax 3\n2.4.689.1 Syntax 1: When you know the text of an item\nDescription\nFinds and highlights an item in a ListBox when you can specify some or all of the text of the\nitem.\nApplies to\nListBox, DropDownListBox, PictureListBox, and DropDownPictureListBox controls\nSyntax\nlistboxname.SelectItem ( item, index )\nTable 2.1196:\nArgument\nDescription\nlistboxname\nThe name of the ListBox control in which you want to select a line\n"}
{"page": 1345, "text": "Statements, Events, and Functions\nPage 1345\nArgument\nDescription\nitem\nA string whose value is the starting text of the item you want to select\nindex\nThe number of the item after which you want to begin the search\nReturn value\nInteger.\nReturns the index number of the selected item. If no match is found, SelectItem returns 0; it\nreturns -1 if an error occurs. If any argument's value is null, SelectItem returns null.\nUsage\nSelectItem begins searching for the desired item after the item identified by index. To match,\nthe item must start with the specified text; however, the text in the item can be longer than the\nspecified text.\nTo find an item but not select it, use the FindItem function.\nMultiSelect ListBoxes\nSelectItem has no effect on a ListBox or PictureListBox whose MultiSelect property\nis true. Instead, use SetState to select items without affecting the selected state of\nother items in the list.\nClearing the edit box of a drop-down list\nTo clear the edit box of a DropDownListBox or DropDownPictureListBox that the\nuser cannot edit, use Syntax 2 of SelectItem.\nExamples\nIf item 5 in lb_Actions is Delete Files, this example starts searching after item 2, finds and\nhighlights Delete Files, and sets li_Index to 5:\ninteger li_Index\nli_Index = lb_Actions.SelectItem(\"Delete Files\", 2)\nIf item 4 in lb_Actions is Select Objects, this example starts searching after item 2, finds and\nhighlights Select Objects, and sets li_Index to 4:\ninteger li_Index\nli_Index = lb_Actions.SelectItem(\"Sel\", 2)\nSee also\nAddItem\nDeleteItem\nFindItem\nInsertItem\nSetState\n"}
{"page": 1346, "text": "Statements, Events, and Functions\nPage 1346\n2.4.689.2 Syntax 2: When you know the item number\nDescription\nFinds and highlights an item in a ListBox or RibbonComboBoxItem when you can specify\nthe index number of the item. You can also clear the selection by specifying zero as the index\nnumber.\nApplies to\nListBox, DropDownListBox, PictureListBox, DropDownPictureListBox, and\nRibbonComboBoxItem controls\nSyntax\nlistboxname.SelectItem ( itemnumber )\nTable 2.1197:\nArgument\nDescription\nlistboxname\nThe name of the ListBox or RibbonComboBoxItem control in which you\nwant to select an item\nitemnumber\nAn integer whose value is the location (index) of the item in the ListBox\nor the ListBox portion of the drop-down list.\nSpecify 0 for itemnumber to clear the selected item. For a ListBox\nor PictureListBox, 0 removes highlighting from the selected\nitem. For a DropDownListBox, DropDownPictureListBox or\nRibbonComboBoxItem, 0 clears the text box.\nReturn value\nInteger.\nReturns the index number of the selected item. SelectItem returns 0 if itemnumber is not\nvalid or if you specified 0 in order to clear the selected item. It returns -1 if an error occurs. If\nany argument's value is null, SelectItem returns null.\nUsage\nTo find an item but not select it, use the FindItem function.\nMultiSelect ListBoxes\nSelectItem has no effect on a ListBox or PictureListBox whose MultiSelect property\nis true. Instead, use SetState to select items without affecting the selected state of\nother items in the list.\nClearing the text box of a drop-down list\nTo clear the text box of a DropDownListBox, DropDownPictureListBox, or\nRibbonComboBoxItem that the user cannot edit, set itemnumber to 0. Setting the\ncontrol's text to the empty string does not work if the control's AllowEdit property is\nfalse.\n"}
{"page": 1347, "text": "Statements, Events, and Functions\nPage 1347\nExamples\nThis example highlights item number 5:\ninteger li_Index\nli_Index = lb_Actions.SelectItem(5)\nThis example clears the selection from the text box of the DropDownListBox ddlb_choices\nand sets li_Index to 0:\ninteger li_Index\nli_Index = ddlb_choices.SelectItem(0)\nThis example highlights item 2 in the ribbon combo box:\nInteger li_Return\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.AddItem(\"Item1\")\nli_Return = lr_ComboBox.AddItem(\"Item2\")\nli_Return = lr_ComboBox.SelectedIndex()\nli_Return = lr_ComboBox.SelectItem(2)\nli_Return = lr_ComboBox.SelectedIndex()\nSee also\nAddItem\nDeleteItem\nFindItem\nInsertItem\nSetState\n2.4.689.3 Syntax 3: For TreeView controls\nDescription\nSelects a specified item.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.SelectItem ( itemhandle )\nTable 2.1198:\nArgument\nDescription\ntreeviewname\nThe name of the TreeView control in which you want to select an item\nitemhandle\nThe handle of the specified item\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\n"}
{"page": 1348, "text": "Statements, Events, and Functions\nPage 1348\nUsage\nUse the FindItem function to get handles for items at specific positions in the TreeView\ncontrol.\nExamples\nThis example selects the parent of the current TreeView item:\nlong ll_tvi, ll_tvparent\nint li_tvret\nll_tvi = tv_list.FindItem(CurrentTreeItem! , 0)\nll_tvparent = tv_list.FindItem(ParentTreeItem! , &\n      ll_tvi)\nli_tvret = tv_list.SelectItem(ll_tvparent)\nSee also\nFindItem\n2.4.690 SelectObject\nDescription\nSelects or clears the object in an OLE control but does not activate the server application. The\nserver's menus are added to the PowerBuilder application's menus.\nApplies to\nOLE controls\nSyntax\nolecontrol.SelectObject ( selectstate )\nTable 2.1199:\nArgument\nDescription\nolecontrol\nThe name of the OLE control containing the object you want to select\nselectstate\nA boolean value indicating whether you want to select or deselect the\nobject\nReturn value\nInteger.\nReturns 0 if it succeeds and one of the following negative values if an error occurs:\n-1 -- Control is empty\n-9 -- Other error\nIf any argument's value is null, SelectObject returns null.\nExamples\nThis example selects the object in the OLE control ole_1:\ninteger result\n"}
{"page": 1349, "text": "Statements, Events, and Functions\nPage 1349\nresult = ole_1.SelectObject(TRUE)\n2.4.691 SelectTab\nDescription\nSelects the specified tab, displaying its tab page in the Tab control.\nApplies to\nTab controls\nSyntax\ntabcontrolname.SelectTab ( tabidentifier )\nTable 2.1200:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control in which you want to select a tab\ntabidentifier\nThe tab you want to select. You can specify:\n\u2022 The tab page index (an integer)\n\u2022 The name of the user object (datatype DragObject or UserObject)\n\u2022 A string holding the name of the user object\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nEquivalent syntax\nYou can select a tab by setting the SelectedTab property to the tab's index number:\ntab_1.SelectedTab = 3\nExamples\nThese three examples select the third tab in tab_1. They could be in the script for a\nCommandButton on the window containing the Tab control tab_1:\ntab_1.SelectTab(3)\ntab_1.SelectTab(tab_1.uo_3)\nstring ls_tabpage\nls_tabpage = \"uo_3\"\ntab_1.SelectTab(ls_tabpage)\nThis example opens an instance of the user object uo_fontsettings as a tab page and selects it:\nuserobject uo_tabpage\nstring ls_tabpage\nls_tabpage = \"uo_fontsettings\"\ntab_1.OpenTab(uo_tabpage, ls_tabpage, 0)\n"}
{"page": 1350, "text": "Statements, Events, and Functions\nPage 1350\ntab_1.SelectTab(uo_tabpage)\nSee also\nOpenTab\n2.4.692 SelectText\nSelects text in an editable control.\nTable 2.1201:\nTo select text in\nUse\nAny editable control, other than a RichTextEdit\nSyntax 1\nA RichTextEdit control or a DataWindow whose object has the\nRichTextEdit presentation style\nSyntax 2\n2.4.692.1 Syntax 1: For editable controls (except RichTextEdit)\nDescription\nSelects text in an editable control. You specify where the selection begins and how many\ncharacters to select.\nApplies to\nDataWindow, EditMask, InkEdit, MultiLineEdit, SingleLineEdit, DropDownListBox, and\nDropDownPictureListBox controls\nSyntax\neditname.SelectText ( start, length )\nTable 2.1202:\nArgument\nDescription\neditname\nThe name of the DataWindow, EditMask, InkEdit, MultiLineEdit,\nSingleLineEdit, DropDownListBox, or DropDownPictureListBox control\nin which you want to select text.\nstart\nA long specifying the position at which you want to start the selection.\nlength\nA long specifying the number of characters you want to select. If length\nis 0, no text is selected but PowerBuilder moves the insertion point to the\nlocation specified in start.\nReturn value\nInteger for DataWindow and list boxes, Long for other controls.\nReturns the number of characters selected. If an error occurs, SelectText returns -1.\nUsage\nIf the control does not have the focus when you call SelectText, then the text is not\nhighlighted until the control has focus. To set focus on the control so that the selected text is\nhighlighted, call the SetFocus function.\n"}
{"page": 1351, "text": "Statements, Events, and Functions\nPage 1351\nHow much to select\nWhen you want to select all the text of a line edit or select the contents from a\nspecified position to the end of the edit, use the Len function to obtain the length of\nthe control's text.\nTo select text in a DataWindow with the RichTextEdit presentation style, use Syntax 2.\nExamples\nThis statement sets the insertion point at the end of the text in the SingleLineEdit sle_name:\nsle_name.SelectText(Len(sle_name.Text), 0)\nThis statement selects the entire contents of the SingleLineEdit sle_name:\nsle_name.SelectText(1, Len(sle_name.Text))\nThe rest of these examples assume the MultiLineEdit mle_EmpAddress contains Boston\nStreet.\nThe following statement selects the string ost and returns 3:\nmle_EmpAddress.SelectText(2, 3)\nThe next statement selects the string oston Street and returns 12:\nmle_EmpAddress.SelectText(2, &\n      Len(mle_EmpAddress.Text))\nThese statements select the string Bos, returns 3, and sets the focus to mle_EmpAddress so\nthat Bos is highlighted:\nmle_EmpAddress.SelectText(1, 3)\nmle_EmpAddress.SetFocus()\nSee also\nLen\nPosition\nSelectedItem\nSelectedText\nSetFocus\nTextLine\n2.4.692.2 Syntax 2: For RichTextEdit controls and presentation styles\nDescription\nSelects text beginning and ending at a line and character position in a RichTextEdit control.\nApplies to\nRichTextEdit and DataWindow controls\nSyntax\n"}
{"page": 1352, "text": "Statements, Events, and Functions\nPage 1352\nrtename.SelectText ( fromline, fromchar, toline, tochar { band } )\nTable 2.1203:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you want\nto select text. The DataWindow object in the DataWindow control must\nbe a RichTextEdit DataWindow.\nfromline\nA long specifying the line number where the selection starts.\nfromchar\nA long specifying the number in the line of the first character in the\nselection.\ntoline\nA long specifying the line number where the selection ends. To specify\nan insertion point, set toline and tochar to 0.\ntochar\nA long specifying the number in the line of the character before which\nthe selection ends.\nband (optional)\nA value of the Band enumerated datatype specifying the band in which to\nmake the selection. Values are:\n\u2022 Detail!\n\u2022 Header!\n\u2022 Footer!\nThe default is the band that contains the insertion point.\nReturn value\nLong.\nReturns the number of characters selected. A carriage return with a line feed counts as a\nsingle character. If an error occurs SelectText returns -1. If any argument's value is null, it\nreturns null.\nUsage\nThe insertion point is at the \"to\" end of the selection, that is, the position specified by toline\nand tochar. If toline and tochar are before fromline and fromchar, then the insertion point is at\nthe beginning of the selection.\nYou cannot specify 0 for a character position when making a selection.\nYou cannot always use the values returned by Position to make a selection. Position can\nreturn a character position of 0 when the insertion point is at the beginning of a line.\nTo select an entire line, set the insertion point and call SelectTextLine. To select the rest of a\nline, set the insertion point and call SelectText with a character position greater than the line\nlength.\nExamples\nThis statement selects text from the first character in the RichTextEdit control to the fourth\ncharacter on the third line:\n"}
{"page": 1353, "text": "Statements, Events, and Functions\nPage 1353\nrte_1.SelectText(1,1, 3,4)\nThis statement sets the insertion point at the beginning of line 2:\nrte_1.SelectText(2,1, 0,0)\nThis example sets the insertion point at the end of line 2 by specifying a large number of\ncharacters. The selection highlight extends past the end of the line:\nrte_1.SelectText(2,999, 0,0)\nThis example sets the insertion point at the end of line 2 by finding out how long the line\nreally is. The code moves the insertion point to the beginning of the line, gets the length, and\nthen sets the insertion point at the end:\nlong ll_length\n//Make line 2 the current line\nrte_1.SelectText(2,1, 0,0)\n// Specify a position after the last character\nll_length = rte_1.LineLength() + 1\n// Set the insertion point at the end\nrte_1.SelectText(2,ll_length, 0,0)\nrte_1.SetFocus()\nThis example selects the text from the insertion point to the end of the current line. If the\ncurrent line is the last line, the reported line length is 1 greater than the number of character\nyou can select, so the code adjusts for it:\nlong ll_insertline, ll_insertchar\nlong ll_line, ll_count\n// Get the insertion point\nrte_1.Position(ll_insertline, ll_insertchar)\n// Get the line number and line length\nll_line = rte_1.SelectedLine()\nll_count = rte_1.LineLength()\n// Line length includes the eof file character,\n// which can't be selected\nIF ll_line = rte_1.LineCount() THEN ll_count -= 1\n// Select from the insertion point to the end of\n// line\nrte_1.SelectText(ll_insertline, ll_insertchar, &\nll_line, ll_count)\nSee also\nSelectedText\nSelectTextAll\nSelectTextLine\nSelectTextWord\n2.4.693 SelectTextAll\nDescription\nSelects all the contents of a RichTextEdit control including any special characters such as\ncarriage return and end-of-file (EOF) markers.\nApplies to\n"}
{"page": 1354, "text": "Statements, Events, and Functions\nPage 1354\nRichTextEdit and DataWindow controls\nSyntax\nrtename.SelectTextAll ( { band } )\nTable 2.1204:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you want\nto select all the contents. The DataWindow object in the DataWindow\ncontrol must be a RichTextEdit DataWindow.\nband\n(optional)\nA value of the Band enumerated datatype specifying the band in which\nyou want to select all the text. Values are:\n\u2022 Detail!\n\u2022 Header!\n\u2022 Footer!\nThe default is the band that contains the insertion point.\nReturn value\nInteger.\nReturns the number of characters selected. A carriage return with a line feed counts as a\nsingle character. If an error occurs, SelectTextAll returns -1.\nExamples\nThis statement selects all the text in the detail band:\nrte_1.SelectTextAll()\nThis statement selects all the text in the header band:\nrte_1.SelectTextAll(Header!)\nSee also\nSelectedText\nSelectText\nSelectTextLine\nSelectTextWord\n2.4.694 SelectTextLine\nDescription\nSelects the line containing the insertion point in a RichTextEdit control.\nApplies to\n"}
{"page": 1355, "text": "Statements, Events, and Functions\nPage 1355\nRichTextEdit and DataWindow controls\nSyntax\nrtename.SelectTextLine ( )\nTable 2.1205:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you want\nselect a line. The DataWindow object in the DataWindow control must be\na RichTextEdit DataWindow.\nReturn value\nInteger.\nReturns the number of characters selected if it succeeds and -1 if an error occurs.\nUsage\nIf the RichTextEdit control contains a selection, the insertion point is either at the beginning\nor end of the selection. The way the text was selected determines which. If the user made\nthe selection by dragging toward the end, then calling SelectTextLine selects the line at the\nend of the selection. If the user dragged back, then SelectTextLine selects the line at the\nbeginning of the selection.\nSelectTextLine does not select the line-ending characters (carriage return and linefeed in\nWindows).\nExamples\nThis statement selects the current line:\nrte_1.SelectTextLine()\nSee also\nSelectedText\nSelectText\nSelectTextAll\nSelectTextWord\n2.4.695 SelectTextWord\nDescription\nSelects the word containing the insertion point in a RichTextEdit control.\nApplies to\nRichTextEdit and DataWindow controls\nSyntax\nrtename.SelectTextWord ( )\n"}
{"page": 1356, "text": "Statements, Events, and Functions\nPage 1356\nTable 2.1206:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control in which you want\nto select a word. The DataWindow object in the DataWindow control\nmust be a RichTextEdit DataWindow.\nReturn value\nInteger.\nReturns the number of characters selected if it succeeds and -1 if a word cannot be selected or\nan error occurs.\nUsage\nA word is any group of alphanumeric characters. A word can include underscores and single\nquotes but does not include punctuation and special characters such as $ or #. If punctuation\nor special characters follow the selected word, they are not selected.\nIf the character after the insertion point is a space, punctuation, special character, or end-of-\nline mark, SelectTextWord does not select anything and returns -1.\nExamples\nThe following statement selects the word containing the insertion point:\nrte_1.SelectTextWord()\nThis example selects the word at the insertion point. If there is no word, it increments the\nposition until it finds a word. It checks when it reaches the end of a line and wraps to the next\nline as it looks for a word. If this script is assigned to a command button and the button is\nclicked repeatedly, you step through the text word by word:\ninteger li_rtn\nlong llstart, lcstart, ll_lines, ll_chars\n \nll_lines = rte_1.LineCount()\nll_chars = rte_1.LineLength()\n \nli_rtn = rte_1.SelectTextWord()\n \n// -1 if a word is not found at the insertion point\n   DO WHILE li_rtn = -1\n \n      // Get the position of the cursor\n      rte_1.Position(llstart, lcstart)\n \n      // Increment by 1 to look for next word\n      lcstart += 1\n      // If at end of line move to next line\n      IF lcstart >= ll_chars THEN\n         lcstart = 1  // First character\n         llstart += 1 // next line\n \n         // If beyond last line, return\n         IF llstart > ll_lines THEN\n            RETURN 0\n         END IF\n      END IF\n \n"}
{"page": 1357, "text": "Statements, Events, and Functions\nPage 1357\n      // Set insertion point\n      rte_1.SelectText(llstart, lcstart, 0, 0)\n      // In case it's a new line, get new line length\n      // Can't do this until the ins pt is in the line\n      ll_chars = rte_1.LineLength( )\n \n      // Select word, if any\n      li_rtn = rte_1.SelectTextWord()\nLOOP\n \n// Add code here to process the word (for example,\n// passing the word to a spelling checker)\nSee also\nSelectedText\nSelectText\nSelectTextAll\nSelectTextLine\n2.4.696 Send\nDescription\nSends a message to a window so that it is executed immediately.\nSyntax\nSend ( handle, message#, lowword, long )\nTable 2.1207:\nArgument\nDescription\nhandle\nA long whose value is the system handle of a window (that you have\ncreated in PowerBuilder or another application) to which you want to\nsend a message.\nmessage#\nAn UnsignedInteger whose value is the system message number of the\nmessage you want to send.\nlowword\nA long whose value is the integer value of the message. If this argument\nis not used by the message, enter 0.\nlong\nThe long value of the message or a string.\nReturn value\nLong.\nReturns the value returned by SendMessage in Windows if it succeeds and -1 if an error\noccurs. If any argument's value is null, Send returns null.\nUsage\nPowerBuilder's Send function sends the message identified by message# and optionally,\nlowword and long, to the window identified by handle to the Windows function\nSendMessage. The message is sent directly to the object, bypassing the object's message\nqueue. Send waits until the message is processed and obtains the value returned by\nSendMessage.\n"}
{"page": 1358, "text": "Statements, Events, and Functions\nPage 1358\nMessages in Windows\nUse the Handle function to get the Windows handle of a PowerBuilder object.\nYou specify Windows messages by number. They are documented in the file\nWINDOWS.H that is part of the Microsoft Windows Software Development Kit\n(SDK) and other Windows development tools.\nPosting a message\nMessages sent with Send are executed immediately. To post a message to the end of\nan object's message queue, use the Post function.\nExamples\nThis statement scrolls the window w_emp up one page:\nSend(Handle(w_emp), 277, 2, 0)\nBoth of the following statements click the CommandButton cb_OK:\nSend(Handle(Parent), 273, 0, Handle(cb_OK))\n \ncb_OK.TriggerEvent(Clicked!)\nYou can send messages to maximize or minimize a DataWindow, and return it to normal.\nTo use these messages, enable the TitleBar, Minimize, and Maximize properties of your\nDataWindow control. Also, you should give your DataWindow control an icon for its\nminimized state.\nThis statement minimizes the DataWindow:\nSend(Handle(dw_whatever), 274, 61472, 0)\nThis statement maximizes the DataWindow:\nSend(Handle(dw_whatever), 274, 61488, 0)\nThis statement returns the DataWindow to its normal, defined size:\nSend(Handle(dw_whatever), 274, 61728, 0)\nYou can send a Windows message to determine the last item clicked in a multiselect ListBox.\nThe following script for the SelectionChanged event of a ListBox control gets the return\nvalue of the LB_GETCURSEL message which is the item number in the list (where the first\nitem is 0, not 1).\nTo get PowerBuilder's index for the list item, the example adds 1 to the return value from\nSend. In this example, idx is an integer instance variable for the window:\n// Send the Windows message for LB_GETCURSEL\n// to the list box\nidx = Send(Handle(This), 1033, 0, 0)\nidx = idx + 1\nSee also\nHandle\nPost\n"}
{"page": 1359, "text": "Statements, Events, and Functions\nPage 1359\n2.4.697 SendDeleteRequest\nDescription\nSends the HTTP DELETE request to the server and then gets the content of the server\nresponse. It does not parse the HTTP response code and content of the server response.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nRESTClient object\nSyntax\nobjectname.SendDeleteRequest(string urlName{, string data }, ref string response)\nTable 2.1208:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object from which you want to send the\nrequest.\nurlName\nA string value specifying the URL.\ndata (optional)\nA string value specifying the data to send.\nIf the user sets the encoding charset in the Content-Type request header,\nthis function will encode the data with the specified charset; if charset is\nnot specified, this function will encode the data in UTF-8 by default.\nresponse\nThe content of the server response.\nIf RESTClient failed to send request or server provides no response, the\nresponse value is an empty string. If the response value is compressed\nas gzip, it will be automatically decompressed. Only gzip compression\nformat is supported at this moment. If the server specified the Content-\nType response header, and in which the encoding charset is specified, this\nfunction will encode the data with the specified charset; if charset is not\nspecified, this function will encode the data in UTF-8 by default.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\n-7 -- Failed to decompress data\n-10 -- The token is invalid or has expired\n"}
{"page": 1360, "text": "Statements, Events, and Functions\nPage 1360\n-14 -- Code conversion failed\n-15 -- Unsupported character set\nExample\nThe following example deletes the current row in DataWindow via SendDeleteRequest.\nRestClient lrc_P022\nString ls_P022_Response\nInteger li_P022_SendReturn,li_P022_GetTokenReturn\nString ls_P022_Token\nlrc_P022 = Create RestClient\n//Sets the token parameters\nTokenRequest ltreq_P022_Appeon\nltreq_P022_Appeon.tokenlocation = \"https://demo.appeon.com/pb/identityserver/\nconnect/token\"\nltreq_P022_Appeon.method = \"post\"\nltreq_P022_Appeon.GrantType = \"password\"\nltreq_P022_Appeon.ClientId = \"P0VRQ-ddHn/WWd6lcCNJbaO9ny-JCNHirDJkHNgZ0-M=\"\nltreq_P022_Appeon.ClientSecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" \nltreq_P022_Appeon.UserName = \"TestUser\"\nltreq_P022_Appeon.PassWord = \"TestPassword\"\n//Gets token via RESTClient\nli_P022_GetTokenReturn = lrc_P022.GetOauthtoken( ltreq_P022_Appeon, ls_P022_Token)\nIf li_P022_GetTokenReturn = 1 Then\n lrc_P022.SetRequestHeaders( \"Content-Type:application/\njson;charset=UTF-8~r~nAccept-Encoding:gzip\" )\n lrc_P022.SetOauthToken( ls_P022_Token ) //Sets the authentication\n //Gets data\n lrc_P022.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\n If dw_Data.GetRow() > 0 Then\n  li_P022_SendReturn = lrc_P022.SendDeleteRequest(\"https://\ndemo.appeon.com/PB/webapi_client/api/department/\nDeleteByID/\"+String(dw_Data.GetItemNumber(dw_Data.GetRow(),1)), ls_P022_Response)\n   If li_P022_SendReturn <> 1 Or lrc_P022.GetResponseStatusCode() <> 200 Then\n   //Checks if any error information\n   End If\n //Finds out if data is deleted via https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\n lrc_P022.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\n End If\nElse\n//Gets the token failure error\nEnd If\nSee also\nSendGetRequest\nSendPostRequest\nSendPutRequest\nSendPatchRequest\n2.4.698 SendGetRequest\nDescription\n"}
{"page": 1361, "text": "Statements, Events, and Functions\nPage 1361\nSends the HTTP GET request to the server and then gets the content of the server response. It\ndoes not parse the HTTP response code and content of the server response.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nRESTClient object\nSyntax\nobjectname.SendGetRequest(string urlName, ref string response)\nTable 2.1209:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object from which you want to send the\nrequest.\nurlName\nA string value specifying the URL.\nresponse\nThe content of the server response.\nIf RESTClient failed to send request or server provides no response, the\nresponse value is an empty string. If the response value is compressed\nas gzip, it will be automatically decompressed. Only gzip compression\nformat is supported at this moment. If the server specified the Content-\nType response header, and in which the encoding charset is specified, this\nfunction will encode the data with the specified charset, if charset is not\nspecified, this function will encode the data in UTF-8 by default.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\n-7 -- Failed to decompress data\n-10 -- The token is invalid or has expired\n-14 -- Code conversion failed\n-15 -- Unsupported character set\nExample\nThe following example shows the usage of SendGetRequest.\nRestClient lrc_P019\n"}
{"page": 1362, "text": "Statements, Events, and Functions\nPage 1362\nString ls_P019_ResPonse\nlrc_P019 = Create RestClient\n//Sets the request header to return a gzip package\nlrc_P019.SetRequestHeaders(\"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\")\nlrc_P019.SendGetRequest('https://demo.appeon.com/PB/webapi_client/api/department/\nretrieve', ls_P019_ResPonse)\nIf lrc_P019.GetResponseStatusCode() = 200 Then\n //Column name and type between dw_Data the returned JSON string ls_P019_ResPonse\n must match.\n dw_Data.ImportJson( ls_P019_ResPonse)\nElse\n //Checks if any error according to the value of ResponseStatuscode and ls_Response\nEnd If\nSee also\nSendPostRequest\nSendPutRequest\nSendDeleteRequest\nSendPatchRequest\n2.4.699 SendPatchRequest\nDescription\nSends the HTTP PATCH request to the server and then gets the content of the server\nresponse. It does not parse the HTTP response code and content of the server response.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nRESTClient object\nSyntax\nobjectname.SendPatchRequest(string urlName, string data, ref string response)\nTable 2.1210:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object from which you want to send the\nrequest.\nurlName\nA string value specifying the URL.\ndata\nA string value specifying the data to send.\nIf the user sets the encoding charset in the Content-Type request header,\nthis function will encode the data with the specified charset; if charset is\nnot specified, this function will encode the data in UTF-8 by default.\nresponse\nThe content of the server response.\nIf RESTClient failed to send request or server provides no response, the\nresponse value is an empty string. If the response value is compressed\n"}
{"page": 1363, "text": "Statements, Events, and Functions\nPage 1363\nArgument\nDescription\nas gzip, it will be automatically decompressed. Only gzip compression\nformat is supported at this moment. If the server specified the Content-\nType response header, and in which the encoding charset is specified, this\nfunction will encode the data with the specified charset; if charset is not\nspecified, this function will encode the data in UTF-8 by default.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\n-7 -- Failed to decompress data\n-10 -- The token is invalid or has expired\n-14 -- Code conversion failed\n-15 -- Unsupported character set\nExample\nThe following example submits the new value of the current row in DataWindow to server\nand then returns the updated value.\nRestClient lrc_P023\nString ls_P023_Response\nInteger li_P023_SendReturn,li_P023_GetTokenReturn\nString ls_P023_Token,ls_P023_SendData\nlrc_P023 = Create RestClient\n//Sets the token parameters\nTokenRequest ltreq_P023_Appeon\nltreq_P023_Appeon.tokenlocation = \"https://demo.appeon.com/pb/identityserver/\nconnect/token\"\nltreq_P023_Appeon.method = \"post\"\nltreq_P023_Appeon.GrantType = \"password\"\nltreq_P023_Appeon.ClientId = \"P0VRQ-ddHn/WWd6lcCNJbaO9ny-JCNHirDJkHNgZ0-M=\"\nltreq_P023_Appeon.ClientSecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" \nltreq_P023_Appeon.UserName = \"TestUser\"\nltreq_P023_Appeon.PassWord = \"TestPassword\"\n//Gets token via RESTClient\nli_P023_GetTokenReturn = lrc_P023.GetOauthtoken( ltreq_P023_Appeon, ls_P023_Token)\nIf li_P023_GetTokenReturn = 1 Then\n lrc_P023.SetRequestHeaders( \"Content-Type:application/\njson;charset=UTF-8~r~nAccept-Encoding:gzip\" )\n lrc_P023.SetOauthToken( ls_P023_Token ) //Sets authentication\n lrc_P023.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\n"}
{"page": 1364, "text": "Statements, Events, and Functions\nPage 1364\n //Modifies the column data in DataWindow\n If dw_Data.GetRow() > 0 Then\n  dw_Data.SetItem(dw_Data.GetRow(), 2, \"Test send patch request\"+String(rand(100)))\n  //.....\n  //Exports the modified row to DataWindow JSON string  \n  ls_P023_SendData = dw_Data.Exportjson( Primary!,\n dw_Data.GetRow(),dw_Data.GetRow(), True)\n  //Updates data via the following URL and returns the updated data row\n  li_P023_SendReturn=lrc_P023.SendPatchRequest(\"https://demo.appeon.com/\nPB/webapi_client/api/department/update/modelentry\", ls_P023_SendData,\n ls_P023_Response)\n   If li_P023_SendReturn <> 1 Or lrc_P023.GetResponseStatusCode() <> 200 Then\n    //Checks if any error information and checks the responsebody: ls_P023_Response\n   End If\n  //Imports the returned data row to DataWindow\n  dw_Data.ImportRowFromJson(ls_P023_Response,0) \n End If\nElse\n//Checks if any failure message\nEnd If\nSee also\nSendGetRequest\nSendPostRequest\nSendPutRequest\nSendDeleteRequest\n2.4.700 SendPostRequest\nDescription\nSends the HTTP POST request to the server and then gets the content of the server response.\nIt does not parse the HTTP response code and content of the server response.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nRESTClient object\nSyntax\nobjectname.SendPostRequest(string urlName, string data, ref string response)\nTable 2.1211:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object from which you want to send the\nrequest.\nurlName\nA string value specifying the URL.\ndata\nA string value specifying the data to send.\nIf the user sets the encoding charset in the Content-Type request header,\nthis function will encode the data with the specified charset, if charset is\nnot specified, this function will encode the data in UTF-8 by default.\n"}
{"page": 1365, "text": "Statements, Events, and Functions\nPage 1365\nArgument\nDescription\nresponse\nThe content of the server response.\nIf RESTClient failed to send request or server provides no response, the\nresponse value is an empty string. If the response value is compressed\nas gzip, it will be automatically decompressed. Only gzip compression\nformat is supported at this moment. If the server specified the Content-\nType response header, and in which the encoding charset is specified, this\nfunction will encode the data with the specified charset, if charset is not\nspecified, this function will encode the data in UTF-8 by default.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\n-7 -- Failed to decompress data\n-10 -- The token is invalid or has expired\n-14 -- Code conversion failed\n-15 -- Unsupported character set\nExample\nThe following example adds a data record and then submits it to server via SendPostRequest.\nString ls_P020_Responsebody,ls_Token,ls_PostData\nLong ll_InsertRow\nInteger li__P020_SendReturn\nInteger li_P020_GetTokenReturn\nRestClient lrc_P020\nlrc_P020 = Create RestClient \n//Sets the token parameters\nTokenRequest ltreq_Appeon\nltreq_Appeon.tokenlocation = \"https://demo.appeon.com/pb/identityserver/connect/\ntoken\"\nltreq_Appeon.method = \"post\"\nltreq_Appeon.GrantType = \"password\"\nltreq_Appeon.ClientId = \"P0VRQ-ddHn/WWd6lcCNJbaO9ny-JCNHirDJkHNgZ0-M=\"\nltreq_Appeon.ClientSecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" \nltreq_Appeon.UserName = \"TestUser\"\nltreq_Appeon.PassWord = \"TestPassword\"\n//Gets token via RESTClient\nli_P020_GetTokenReturn = lrc_P020.GetOauthtoken( ltreq_Appeon, ls_Token)\nIf li_P020_GetTokenReturn = 1 Then\n lrc_P020.SetRequestHeaders( \"Content-Type:application/\njson;charset=UTF-8~r~nAccept-Encoding:gzip\" )\n"}
{"page": 1366, "text": "Statements, Events, and Functions\nPage 1366\n lrc_P020.SetOauthToken( ls_Token ) //Sets the token authentication\n //Adds a new data row\n ll_InsertRow = dw_Data.InsertRow( 0 )\n //Sets the data value\n dw_Data.SetItem(ll_InsertRow,1,0)\n dw_Data.SetItem(ll_InsertRow,2,\"TestCreate\"+String(rand(50)))\n //Once https://demo.appeon.com/PB/webapi_client/api/department/create Web service\n detects that \n //the passed-in department id is smaller than 1, it will automatically finds the\n largest ID \n //value and assigns value to it\n ls_PostData=dw_Data.Exportrowasjson( ll_InsertRow)//Exports the newly added data\n row from dw_Data to JSON string\n li__P020_SendReturn = lrc_P020.SendPostRequest(\"https://demo.appeon.com/PB/\nwebapi_client/api/department/create\", ls_PostData, ls_P020_Responsebody)\n  If li__P020_SendReturn <> 1 Or lrc_P020.GetResponseStatusCode() <> 201 Then\n   //Checks if any error information  \n  End If\n //Finds out if the newly added data exists via https://demo.appeon.com/PB/\nwebapi_client/api/department/retrieve\n lrc_P020.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nElse\n //Gets the token failure error\nEnd If\nIf IsValid(lrc_P020) Then Destroy lrc_P020\nSee also\nSendGetRequest\nSendPutRequest\nSendDeleteRequest\nSendPatchRequest\n2.4.701 SendPutRequest\nDescription\nSends the HTTP PUT request to the server and then gets the content of the server response. It\ndoes not parse the HTTP response code and content of the server response.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nRESTClient object\nSyntax\nobjectname.SendPutRequest(string urlName, string data, ref string response)\nTable 2.1212:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object from which you want to send the\nrequest.\nurlName\nA string value specifying the URL.\n"}
{"page": 1367, "text": "Statements, Events, and Functions\nPage 1367\nArgument\nDescription\ndata\nA string value specifying the data to send.\nIf the user sets the encoding charset in the Content-Type request header,\nthis function will encode the data with the specified charset; if charset is\nnot specified, this function will encode the data in UTF-8 by default.\nresponse\nThe content of the server response.\nIf RESTClient failed to send request or server provides no response, the\nresponse value is an empty string. If the response value is compressed\nas gzip, it will be automatically decompressed. Only gzip compression\nformat is supported at this moment. If the server specified the Content-\nType response header, and in which the encoding charset is specified, this\nfunction will encode the data with the specified charset; if charset is not\nspecified, this function will encode the data in UTF-8 by default.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\n-7 -- Failed to decompress data\n-10 -- The token is invalid or has expired\n-14 -- Code conversion failed\n-15 -- Unsupported character set\nExample\nThe following example updates the value of Department Name for the current row via\nSendPutRequest.\nRestClient lrc_P021\nString  ls_P021_Response\nString ls_P021_PostData\nString ls_P021_Token\nInteger li_P021_SendReturn\nInteger li_P021_GetTokenReturn\nlrc_P021 = Create RestClient\n//Sets the token parameters\nTokenRequest ltreq_P021_Appeon\nltreq_P021_Appeon.tokenlocation = \"https://demo.appeon.com/pb/identityserver/\nconnect/token\"\nltreq_P021_Appeon.method = \"post\"\nltreq_P021_Appeon.GrantType = \"password\"\nltreq_P021_Appeon.ClientId = \"P0VRQ-ddHn/WWd6lcCNJbaO9ny-JCNHirDJkHNgZ0-M=\"\n"}
{"page": 1368, "text": "Statements, Events, and Functions\nPage 1368\nltreq_P021_Appeon.ClientSecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" \nltreq_P021_Appeon.UserName = \"TestUser\"\nltreq_P021_Appeon.PassWord = \"TestPassword\"\n//Gets token via RESTClient\nli_P021_GetTokenReturn = lrc_P021.GetOauthtoken( ltreq_P021_Appeon, ls_P021_Token)\nIf li_P021_GetTokenReturn = 1 Then\nlrc_P021.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" )\nlrc_P021.SetOauthToken( ls_P021_Token ) //Sets the authentication\nlrc_P021.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nIf dw_Data.GetRow() > 0 Then\n //Modifies the data in DataWindow\n dw_Data.SetItem(dw_Data.GetRow(),2,\"Update\"+String(rand(50)))\n //Exports a DataWindow row to JSON string\n ls_P021_PostData=dw_Data.Exportrowasjson( dw_Data.GetRow())\n li_P021_SendReturn = lrc_P021.SendPutRequest(\"https://demo.appeon.com/PB/\nwebapi_client/api/department/update\",ls_P021_PostData, ls_P021_Response)\n  If li_P021_SendReturn <> 1 Or lrc_P021.GetResponseStatusCode() <> 200 Then\n   //Checks the error information\n  End If\n //Finds out if data is modified via https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\n lrc_P021.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nEnd If\nElse\n//Gets the token failure error\nEnd If\nSee also\nSendGetRequest\nSendPostRequest\nSendDeleteRequest\nSendPatchRequest\n2.4.702 SendRequest\nDescription\nSends the request from the HTTPClient object to the server.\nIf IgnoreServerCertificate or CheckForServerCertRevocation is set to verify the server\ncertificate, and if the verification fails, an error code will be returned.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nHTTPClient objects\nSyntax\nobjectname.SendRequest ( methodName, urlName )\nobjectname.SendRequest ( methodName, urlName, string data )\n"}
{"page": 1369, "text": "Statements, Events, and Functions\nPage 1369\nobjectname.SendRequest ( methodName, urlName, blob data )\nobjectname.SendRequest ( methodName, urlName, string data, encodingType )\nTable 2.1213:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient object from which you want to send the\nrequest.\nmethodName\nA string value specifying the request method name, including GET,\nPOST, PUT, DELETE, OPTIONS, TRACE, HEAD, and CONNECT.\nurlName\nA string value specifying the URL.\ndata\nA blob or string value specifying the data.\nencodingType\n(optional)\nA value specifying the encoding charset of the string data to be\nsent: EncodingANSI!, EncodingUTF8!, EncodingUTF16LE!, or\nEncodingUTF16BE!.\nFor the string data, it will be encoded in the charset specified by the\nencodingType argument; if the encodingType argument is not specified,\nthe data will be encoded in the charset specified in the Content-Type\nrequest header; if no charset is specified in the Content-Type request\nheader, the data will be encoded in UTF-8 by default.\nReturn value\nInteger.\nReturns values as follows. If any argument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timed out\n-5 -- Code conversion failed\n-6 -- Unsupported character sets\n-7 -- Certification revocation checking has been enabled, but the revocation check failed to\nverify whether a certificate has been revoked. The server used to check for revocation might\nbe unreachable.\n-8 -- SSL certificate is invalid.\n-9 -- SSL certificate was revoked.\n-10 -- The function is unfamiliar with the Certificate Authority that generated the server\ncertificate.\n-11 -- SSL certificate common name (host name field) is incorrect, for example, you entered\nwww.appeon.com and the common name on the certificate says www.demo.appeon.com.\n"}
{"page": 1370, "text": "Statements, Events, and Functions\nPage 1370\n-12 -- SSL certificate date that was received from the server is invalid. The certificate has\nexpired.\n-13 -- The certificate was not issued for the server authentication purpose.\n-14 -- The application experienced an internal error when loading the SSL libraries.\n-15 -- More than one type of errors when validating the server certificate.\nExample 1\nThis example requests information from a URL using the GET method:\nInteger li_rc\nString ls_string\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\n// Sends request using GET method\nli_rc = lnv_HttpClient.SendRequest(\"GET\", \"https://demo.appeon.com/PB/\nwebapi_client/employee/102\")\n// Obtains the response data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n lnv_HttpClient.GetResponseBody(ls_string)\nend if\nExample 2\nThis example sends a string query when requesting information from a URL using the POST\nmethod:\nInteger li_rc\nString ls_ReturnJson\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nString ls_json = '{\"empId\":100, \"fname\":\" John\", \"lname\": \"Guevara\"}'\n// Constructs a POST request (supports all headers)\nlnv_HttpClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Content-Length header set by SendRequest\n// Sends request using POST method (to add the string data to the body and set to\n the Content-Length header)\nli_rc = lnv_HttpClient.SendRequest(\"POST\", \"https://demo.appeon.com/PB/\nwebapi_client/employee\", ls_json)\n// Obtains the response data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n lnv_HttpClient.GetResponseBody(ls_ReturnJson)\nend if\nExample 3\nThis example sends a string query in EncodingUTF8 when requesting information from a\nURL using the POST method:\nInteger li_rc\nString ls_ReturnJson\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nString ls_json = '{\"empId\":101, \"fname\":\" John\", \"lname\": \"Guevara\"}'\n"}
{"page": 1371, "text": "Statements, Events, and Functions\nPage 1371\n// Constructs a POST request (supports all headers)\nlnv_HttpClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Content-Length header set by SendRequest\n// Sends request using POST method (to add the string data to the body and set to\n the Content-Length header)\nli_rc = lnv_HttpClient.SendRequest(\"POST\", \" https://demo.appeon.com/PB/\nwebapi_client/employee\", ls_json, EncodingUTF8!)\n// Obtains the response data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n lnv_HttpClient.GetResponseBody(ls_ReturnJson)\nend if\nExample 4\nThis example sends a blob query when requesting information from a URL using the POST\nmethod:\nInteger  li_rc\nString ls_ReturnJson\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nBlob lblb_data\nlblb_data = Blob('{\"empId\":101, \"fname\":\" John\", \"lname\": \"Guevara\"}',\n EncodingUTF8!)\n// Sends request using POST method (to add the string data to the body and set to\n the Content-Length header)\nli_rc = lnv_HttpClient.SendRequest(\"POST\", \"https://demo.appeon.com/PB/\nwebapi_client/employee/blob\", lblb_data)\n// Obtains the response data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n lnv_HttpClient.GetResponseBody(ls_ReturnJson)\nend if\n2.4.703 SeriesCount\nDescription\nCounts the number of series in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SeriesCount ( { graphcontrol } )\nTable 2.1214:\nArgument\nDescription\ncontrolname\nThe name of the graph for which you want the number of series, or the\nname of the DataWindow control containing the graph\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nfor which you want the number of series\nReturn value\n"}
{"page": 1372, "text": "Statements, Events, and Functions\nPage 1372\nInteger.\nReturns the number of series in the graph if it succeeds and -1 if an error occurs. If any\nargument's value is null, SeriesCount returns null.\nExamples\nThese statements store in the variable li_series_count the number of series in the graph\ngr_product_data:\ninteger li_series_count\nli_series_count = gr_product_data.SeriesCount()\nThese statements store in the variable li_series_count the number of series in the graph\ngr_computers in the DataWindow control dw_equipment:\ninteger li_series_count\nli_series_count = &\n      dw_equipment.SeriesCount(\"gr_computers\")\nSee also\nCategoryCount\nDataCount\n2.4.704 SeriesName\nDescription\nObtains the series name associated with the specified series number.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SeriesName ( { graphcontrol, } seriesnumber )\nTable 2.1215:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want the name of a series, or the\nname of the DataWindow containing the graph\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nfor which you want the name of a series\nseriesnumber\nThe number of the series for which you want to obtain the name\nReturn value\nString.\nReturns the name assigned to the series. If an error occurs, it returns the empty string (\"\"). If\nany argument's value is null, SeriesName returns null.\n"}
{"page": 1373, "text": "Statements, Events, and Functions\nPage 1373\nUsage\nSeries are numbered consecutively, from 1 to the value returned by SeriesCount. When you\ndelete a series, the series are renumbered to keep the numbering consecutive. You can use\nSeriesName to find out the name of the series associated with a series number.\nExamples\nThese statements store in the variable ls_SeriesName the name of series 5 in the graph\ngr_product_data:\nstring ls_SeriesName\nls_SeriesName = gr_product_data.SeriesName(5)\nThese statements store in the variable ls_SeriesName the name of series 5 in the graph\ngr_computers in the DataWindow control dw_equipment:\nstring ls_SeriesName\nls_SeriesName = &\n      dw_equipment.SeriesName(\"gr_computers\", 5)\nSee also\nCategoryName\nDeleteSeries\nFindSeries\n2.4.705 SetAbort\nDeclares that a transaction on a transaction server should be rolled back.\nTable 2.1216:\nTo roll back a transaction\nUse\nFor OLETxnObject objects\nSyntax 1\nFor TransactionServer objects\nSyntax 2\n2.4.705.1 Syntax 1: For OLETxnObject objects\nDescription\nDeclares that the current transaction should be rolled back.\nApplies to\nOLETxnObject objects\nSyntax\noletxnobject.SetAbort (  )\nTable 2.1217:\nArgument\nDescription\noletxnobject\nThe name of the OLETxnObject variable that is connected to the COM\nobject\n"}
{"page": 1374, "text": "Statements, Events, and Functions\nPage 1374\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nCall the SetAbort function from the client to force a COM+ transaction to be rolled back. The\ndefault is to complete the transaction if all participants in the transaction on the COM+ server\nhave called SetComplete or EnableCommit.\nExamples\nThe following example shows the use of SetAbort in a component method that performs\ndatabase updates:\ninteger li_rc\nOleTxnObject lotxn_obj\nlotxn_obj = CREATE OleTxnObject\nli_rc = lotxn_obj.ConnectToNewObject(\"pbcom.n_test\")\nIF li_rc <> 0 THEN\n   Messagebox( \"Connect Error\", string(li_rc) )\n   // handle error\nEND IF\nlotxn_obj.f_dowork()\nlotxn_obj.f_domorework() \nIF /* test for client satisfaction */ THEN\n      lotxn_obj.SetComplete()\nELSE\n      lotxn_obj.SetAbort()\nEND IF\nlotxn_obj.DisconnectObject()\nSee also\nSetComplete\n2.4.705.2 Syntax 2: For TransactionServer objects\nDescription\nDeclares that a component cannot complete its work for the current transaction and that the\ntransaction should be rolled back. The component instance are deactivated when the method\nreturns.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.SetAbort (  )\nTable 2.1218:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\n"}
{"page": 1375, "text": "Statements, Events, and Functions\nPage 1375\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nThe SetAbort function corresponds to the rollbackWork transaction primitive in EAServer.\nAny component that participates in a transaction can roll back the transaction by calling the\nrollbackWork primitive. Only the action of the root component (the component instance that\nbegan the transaction) determines when EAServer commits the transaction.\nExamples\nThe following example shows the use of SetAbort in a component method that performs\ndatabase updates:\n// Instance variables:\n// DataStore ids_datastore\n// TransactionServer ts\n \nInteger li_rc\nlong ll_rv\n \nli_rc = this.GetContextService(\"TransactionServer\", ts)\nIF li_rc <> 1 THEN\n      // handle the error\nEND IF\n...\n...\nll_rv = ids_datastore.Update()\nIF ll_rv = 1 THEN\n      ts.SetComplete()\nELSE\n      ts.SetAbort()\nEND IF\nSee also\nDisableCommit\nEnableCommit\nIsInTransaction (obsolete)\nIsTransactionAborted (obsolete)\nLookup (obsolete)\nSetComplete\nWhich\n2.4.706 SetAccessToken\nDescription\nSets the access token.\nApplies to\nOAuthRequest object\nSyntax\n"}
{"page": 1376, "text": "Statements, Events, and Functions\nPage 1376\nobjectname.SetAccessToken ( string accessToken )\nTable 2.1219:\nArgument\nDescription\nobjectname\nA reference to the OAuthRequest object in which you want to set the\naccess token.\naccessToken\nA string specifying the access token.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the SetAccessToken function to set the access token:\nint li_return\nstring ls_accesstoken\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.setaccesstoken(ls_accesstoken)\nSee also\nClearHeaders\nGetBody\nGetHeader\nGetHeaders\nSetBody\nSetHeader\nSetHeaders\n2.4.707 SetActiveCategory\nDescription\nSets the active category in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetActiveCategory ( Long ItemHandle )\nTable 2.1220:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 1377, "text": "Statements, Events, and Functions\nPage 1377\nArgument\nDescription\nItemHandle\nThe handle of the category that you will set to active.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThis example inserts two categories \"MyCategory1\" and \"MyCategory2\" and sets\n\"MyCategory2\" as the active category.\nInteger li_Return\nLong ll_Handle, ll_Handle2\nll_Handle = rbb_1.InsertCategoryFirst(\"MyCategory1\")\nll_Handle2 = rbb_1.InsertCategoryLast(\"MyCategory2\")\nli_Return = rbb_1.SetActiveCategory(ll_Handle2)\nSee also\nInsertCategory\nInsertCategoryFirst\nInsertCategoryLast\nDeleteCategory\nSetCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nGetActiveCategory\nSetActiveCategoryByIndex\n2.4.708 SetActiveCategoryByIndex\nDescription\nSets the active category according to its index in the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetActiveCategoryByIndex ( Long Index )\nTable 2.1221:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 1378, "text": "Statements, Events, and Functions\nPage 1378\nArgument\nDescription\nIndex\nThe index number of the category that you want to set as active.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThis example inserts two categories \"MyCategory1\" and \"MyCategory2\" and sets\n\"MyCategory2\" (whose index number is 2) as the active category.\nInteger li_Return\nLong ll_Handle, ll_Handle2\nll_Handle = rbb_1.InsertCategoryFirst(\"MyCategory1\")\nll_Handle2 = rbb_1.InsertCategoryLast(\"MyCategory2\")\nli_Return = rbb_1.SetActiveCategoryByIndex(2)\nSee also\nInsertCategory\nInsertCategoryFirst\nInsertCategoryLast\nDeleteCategory\nSetCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nGetActiveCategory\nSetActiveCategory\n2.4.709 SetAlignment\nDescription\nSets the alignment of the selected paragraphs in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.SetAlignment ( align )\nTable 2.1222:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to set the\nalignment of selected paragraphs.\n"}
{"page": 1379, "text": "Statements, Events, and Functions\nPage 1379\nArgument\nDescription\nalign\nA value of the Alignment enumerated datatype specifying how to align\nthe paragraphs. Values are:\n\u2022 Left! -- Align each line at the left margin\n\u2022 Right! -- Align each line at the right margin\n\u2022 Center! -- Center the text between the left and right margins\n\u2022 Justify! -- Justify the paragraphs\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example sets the alignment of the selected paragraphs in the RichTextEdit control rte_1:\ninteger li_success\nli_success = rte_1.SetAlignment(Right!)\nSee also\nGetAlignment\nGetSpacing\nGetTextStyle\nSetSpacing\nSetTextStyle\n2.4.710 SetApplicationButton\nDescription\nSets the application button for the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetApplicationButton ( RibbonApplicationButtonItem Item )\nTable 2.1223:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItem\nThe application button item you want to set.\nReturn value\n"}
{"page": 1380, "text": "Statements, Events, and Functions\nPage 1380\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nOnly one application button is allowed in a ribbon bar, therefore, you can directly get (set\nor remove) the application button without needing to insert the application button first or\nidentify the application button by its handle.\nYou can also use the SetItem function to set the application button. Refer to SetItem for the\ndifference between SetItem and SetApplicationButton.\nExamples\nThis example sets the value of the Text property of the application button to \"MyApp\".\nInteger li_Return\nRibbonApplicationButtonItem lr_AppButton\nlr_AppButton.Text = \"MyApp\"\nli_Return = rbb_1.SetApplicationButton(lr_AppButton)\nSee also\nGetApplicationButton\nRemoveApplicationButton\n2.4.711 SetArgElement\nDescription\nSets the value in the specified argument element.\nApplies to\nWindow ActiveX controls\nSyntax\nactivexcontrol.SetArgElement ( index, argument )\nTable 2.1224:\nArgument\nDescription\nactivexcontrol\nIdentifier for the instance of the PowerBuilder window ActiveX control.\nWhen used in HTML, this is the NAME attribute of the object element.\nWhen used in other environments, this references the control that\ncontains the PowerBuilder window ActiveX.\nindex\nInteger specifying argument placement.\nargument\nAny specifying the argument value.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\n"}
{"page": 1381, "text": "Statements, Events, and Functions\nPage 1381\nUsage\nCall this function before calling InvokePBFunction or TriggerPBEvent to specify an\nargument for the passed function.\nJavaScript scripts must use this function to specify function and event arguments. VBScript\nscripts can either use this function or specify the arguments array directly.\nExamples\nThis JavaScript example calls the SetArgElement function:\nfunction triggerEvent(f) {\n      var retcd;\n      var rc;\n      var numargs;\n      var theEvent;\n      var theArg;\n      retcd = 0;\n      numargs = 1;\n      theArg = f.textToPB.value;\n      PBRX1.SetArgElement(1, theArg);\n      theEvent = \"ue_args\";\n      retcd = PBRX1.TriggerPBEvent(theEvent, numargs);\n...\nSee also\nGetArgElement\nGetLastReturn\nInvokePBFunction\nTriggerPBEvent\n2.4.712 SetAutomationLocale\nDescription\nSets the language to be used in automation programming for an OLE object. Call\nSetAutomationLocale if you have programmed automation commands in a language other\nthan the user's locale.\nApplies to\nOLE objects\nSyntax\nolename.SetAutomationLocale ( language, sortorder )\nTable 2.1225:\nArgument\nDescription\nolename\nThe name of the object for which you want to set the automation locale.\nlanguage\nA value of the LanguageID enumerated datatype specifying the language\nyou have used for automation commands. The OLE server must have\nfunction and property names defined in the language you specify.\n"}
{"page": 1382, "text": "Statements, Events, and Functions\nPage 1382\nArgument\nDescription\nSome values of LanguageID are:\n\u2022 LanguageNeutral! -- No language is assumed. Automation commands\nmatch the server's default command set.\n\u2022 LanguageUserDefault! -- The language locale is taken from the user's\nsettings in the International control panel.\n\u2022 LanguageSystemDefault! -- The language locale is taken from the\nversion of Windows that is installed on the user's machine.\nYou can also specify a language or dialect, such as LanguagePolish! or\nLanguagePortuguese_Brazilian!\nFor the list of language-specific values for LanguageID, use the\nPowerBuilder Browser.\nsortorder\nA value of the LanguageSortID enumerated datatype specifying the sort\norder for the language. Values are:\n\u2022 LanguageSortNative! -- Use the traditional sort order of the selected\nlanguage.\n\u2022 LanguageSortUnicode! -- Use the sort order defined for Unicode\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if an error occurs.\nUsage\nFor most situations, you do not need to call SetAutomationLocale. If an automation\ncommand fails, PowerBuilder makes additional attempts to execute it in other languages\nbefore it triggers the Error event. It attempts to execute the command using these languages:\n1. The command as is (the command is in a language the server understands)\n2. The current locale (if it is different from the user's default locale)\n3. The user's default locale (LanguageUserDefault!)\n4. The system's default locale (LanguageSystemDefault!)\n5. English (LanguageEnglish!)\nIf PowerBuilder is successful in validating the name in any of the languages above, it resets\nthe locale to the value that succeeded. While this may result in the wrong locale in ambiguous\ncases, it will probably simplify access to standard Microsoft Office products that ship with\nboth localized and English function and property names.\n"}
{"page": 1383, "text": "Statements, Events, and Functions\nPage 1383\nIf you specify a language with SetAutomationLocale, but the OLE server does not\nhave function and property names in that language, your OLE automation commands\nwill fail unless the above procedure finds a language that works. If you have called\nSetAutomationLocale, PowerBuilder's procedure for finding the correct language can reset it,\nas described in the previous paragraph.\nExamples\nThis example sets the language to German for an OLEObject called oleobj_report:\noleobj_report.SetAutomationLocale(LanguageGerman!)\nThis example sets the language to German for an OLE control ole_1:\nole_1.Object.SetAutomationLocale(LanguageGerman!)\n2.4.713 SetAutomationPointer\nDescription\nSets the automation pointer of an OLEObject object to the value of the automation pointer of\nanother object.\nApplies to\nOLEObject\nSyntax\noleobject.SetAutomationPointer ( object )\nTable 2.1226:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable whose automation pointer you want\nto set. You cannot specify an OLEObject that is the Object property of an\nOLE control.\nobject\nThe name of an OLEObject variable that contains the automation pointer\nyou want to use to set the pointer value in oleobject.\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if the object does not contain a valid OLE automation pointer.\nUsage\nSetAutomationPointer assigns the underlying automation pointer used by OLE into a\ndescendant of OLEObject.\nExamples\nThis example creates an OLEObject variable and calls ConnectToNewObject to create a\nnew Excel object and connect to it. It also creates an object of type oleobjectchild (which\nis a descendant of OLEObject) and sets the automation pointer of the descendant object\n"}
{"page": 1384, "text": "Statements, Events, and Functions\nPage 1384\nto the value of the automation pointer in the OLEObject object. Then it sets a value in the\nworksheet using the descendant object, saves it to a different file, and destroys both objects:\nOLEObject ole1\noleobjectchild oleChild\ninteger rs\n \nole1= CREATE OLEObject\nrs = ole1.ConnectToNewObject(\"Excel.Application\")\noleChild = CREATE oleobjectchild\nrs = oleChild.SetAutomationPointer(ole1 )\nIF ( rs = 0 ) THEN\n      oleChild.workbooks.open(\"d:\\temp\\expenses.xls\")\n      oleChild.cells(1,1).value = 11111\n      oleChild.activeworkbook.saveas( &\n         \"d:\\temp\\newexp.xls\")\n      oleChild.activeworkbook.close()\n      oleChild.quit()\nEND IF\nole1.disconnectobject()\nDESTROY oleChild\nDESTROY ole1\n2.4.714 SetAutomationTimeout\nDescription\nSets the number of milliseconds that a PowerBuilder client waits before canceling an OLE\nprocedure call to the server.\nApplies to\nOLEObject objects\nSyntax\noleobject.SetAutomationTimeout ( interval )\nTable 2.1227:\nArgument\nDescription\noleobject\nThe name of an OLEObject variable containing the object for which you\nwant to set the timeout period.\ninterval\nA 32-bit signed long integer value (in milliseconds) specifying how\nlong a PowerBuilder client waits before canceling a procedure call. The\ndefault value is 300,000 milliseconds (5 minutes). Specifying 0 or a\nnegative value resets interval to the default value.\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if it fails.\nUsage\nThis function passes the value of interval to PowerBuilder's implementation of the\nIMessageFilter interface and determines how long PowerBuilder tries to complete an OLE\n"}
{"page": 1385, "text": "Statements, Events, and Functions\nPage 1385\nprocedure call. The value applies only when PowerBuilder is the OLE client, not when\nPowerBuilder is the OLE server.\nDefault timeout period\nFor most situations, you do not need to call SetAutomationTimeout. The default\ntimeout period of five minutes is usually appropriate. Use SetAutomationTimeout to\nchange the default timeout period if you expect a specific OLE request to take longer\nthan five minutes.\nIf the timeout period is too short, you may get a PowerBuilder application execution error,\nR0035. In this case, use SetAutomationTimeout to lengthen the timeout period.\nIf the timeout period expires, runtime error 1037 occurs. You may want to add code to\nhandle this error, which is often the only indication of a hung server. Note that canceling a\ntransaction often causes memory leaks on both the server and the operating system.\nThe value that you specify with SetAutomationTimeout applies to all OLE transactions in the\ncurrent session, including calls that relate to other objects.\nExamples\nThis example calls the ConnectToObject function to connect to an Excel worksheet and sets a\ntimeout period of 900,000 milliseconds (15 minutes):\nOLEObject ole1\ninteger rs\nlong interval\ninterval = 900000\nole1 = create OLEObject\nrs = ole1.ConnectToObject(\"Excel.Application\")\nrs = ole1.SetAutomationTimeOut(interval)\n2.4.715 SetBody\nDescription\nSets the request body.\nApplies to\nOAuthRequest object\nSyntax\nobjectname.SetBody ( string data )\nobjectname.SetBody ( blob data )\nobjectname.SetBody ( string data, encoding encodingType )\nTable 2.1228:\nArgument\nDescription\nobjectname\nA reference to the OAuthRequest object in which you want to set the\nrequest body.\ndata\nA string or blob specifying the data. The data will be converted to\nEncodingUTF8!.\n"}
{"page": 1386, "text": "Statements, Events, and Functions\nPage 1386\nArgument\nDescription\nencodingType\nAn encoding value specifying the string data.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the SetBody function to set the request body of\nstring data type:\nint li_return\nstring ls_data\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.setbody(ls_data)\nThe following example shows the use of the SetBody function to set the request body of\nstring data type in encodingUTF8!:\nint li_return\nstring ls_data\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.setbody(ls_data, encodingUTF8!)\nThe following example shows the use of the SetBody function to set the request body of blob\ndata type:\nint li_return\nblob lblb_data\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.setbody(lblb_data)\nSee also\nClearHeaders\nGetBody\nGetHeader\nGetHeaders\nSetAccessToken\nSetHeader\nSetHeaders\n2.4.716 SetBoldDate\nDescription\nDisplays the specified date in bold.\n"}
{"page": 1387, "text": "Statements, Events, and Functions\nPage 1387\nApplies to\nMonthCalendar control\nSyntax\ncontrolname.SetBoldDate ( d, onoff {, rt } )\nTable 2.1229:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control in which you want to clear the\nbold dates\nd\nThe date to be set in bold\nonoff\nA boolean specifying whether the date is to be set to bold. Values are:\ntrue -- Set the date to bold\nfalse -- Clear the date's bold setting\nrt (optional)\nA value of the MonthCalRepeatType enumerated variable. Values are:\nOnce! -- Set or clear the bold setting for the specified date (default)\nMonthly! -- Using the day portion of the specified date, set or clear the\nbold setting for this day in all months\nYearly! -- Using the day and month portion of the specified date, set or\nclear the bold setting for this date in all years\nReturn value\nInteger.\nReturns 0 for success and one of the following negative values for failure:\n-1 -- Invalid arguments\n-2 -- Unknown failure\nUsage\nYou can use the SetBoldDate function to specify that a selected date, such as an anniversary\ndate, displays in bold. If a specific date has been set to bold, you can clear the bold setting by\npassing false as the second parameter. ClearBoldDates clears all such settings.\nExamples\nThis example sets the date January 5, 2005 to bold in the control mcVacation:\ninteger li_return\nDate d\nd = date(\"January 5, 2005\")\nli_return = mcVacation.SetBoldDate( d, true)\nThis example sets the fifth day of every month to bold in the control mcVacation:\ninteger li_return\nDate d\n"}
{"page": 1388, "text": "Statements, Events, and Functions\nPage 1388\nd = date(\"January 5, 2005\")\nli_return = mcVacation.SetBoldDate( d, true, Monthly!)\nThis example sets the date January 5 to bold for all years in the control mcVacation:\ninteger li_return\nDate d\nd = date(\"January 5, 2005\")\nli_return = mcVacation.SetBoldDate( d, true, Yearly!)\nThis example clears the bold setting for the fifth day of every month in the control\nmcVacation:\ninteger li_return\nDate d\nd = date(\"January 5, 2005\")\nli_return = mcVacation.SetBoldDate( d, false, Monthly!)\nSee also\nClearBoldDates\n2.4.717 SetBoxPictureList \nDescription\nSets the picture files for the items in the ribbon combo box.\nApplies to\nRibbonComboBoxItem control\nSyntax\ncontrolname.SetBoxPictureList (String PictureList)\nTable 2.1230:\nArgument\nDescription\ncontrolname\nThe name of the RibbonComboBoxItem control.\nPictureList\nA comma-separated list of picture files, in full path with file extension.\nThe picture is displayed in 16*16 or 32*32 pixels. If the image is 16*16\npixels, it will be displayed as 16*16; if the image is bigger than 16*16\npixels, it will be displayed as 32*32.\nReturn value\nInteger.\nReturns 1 if it succeeds; and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThis example sets two built-in picture files for the items in the ribbon combo box.\nInteger li_Return\n"}
{"page": 1389, "text": "Statements, Events, and Functions\nPage 1389\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.SetBoxPictureList (\"PaperSizeA0Small!, PaperSizeA1Small!\")\nSee also\nGetBoxPictureList\n2.4.718 SetByte\nDescription\nSets data of type Byte for a blob variable.\nSyntax\nSetByte ( blobvariable, n, b)\nTable 2.1231:\nArgument\nDescription\nblobvariable\nA variable of the Blob datatype in which you want to insert a value of the\nByte datatype\nn\nThe number of the position in blobvariable at which you want to insert a\nvalue of the Byte datatype\nb\nData of the Byte datatype that you want to set into blobvariable at\nposition n.\nReturn value\nInteger.\nReturns 1 if it succeeds or -1 if n exceeds the scope of blobvariable; it returns null if the value\nof any of its arguments is null.\nExamples\nThis example adds the byte equivalent of 37 at the initial position of the emp_photo blob. If\nno byte is assigned to the second position, the blob displays as the ASCII equivalent of 37\n(the percent character, %) in the second message box:\nblob  {100} emp_photo\nbyte b1 = byte (37)\nint li_rtn\nli_rtn = SetByte(emp_photo, 1, b1)\nmessagebox(\"setbyte\", string(b1))\nmessagebox(\"setbyte\", string(emp_photo))\nSee also\nByte\nGetByte\n2.4.719 SetCategory\nDescription\n"}
{"page": 1390, "text": "Statements, Events, and Functions\nPage 1390\nSets the category for the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetCategory ( Long ItemHandle, RibbonCategoryItem Item )\nTable 2.1232:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the category you want to set.\nItem\nA category item that will be set.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also use the SetItem function to set the category. Refer to SetItem for the difference\nbetween SetItem and SetCategory.\nExamples\nThis example changes the value of the Text property of the category from \"MyCategory\" to\n\"MyCategory1\".\nInteger li_Return\nLong ll_Handle\nRibbonCategoryItem lr_Category\nll_Handle = rbb_1.InsertCategoryLast (\"MyCategory\")\nlr_Category.Text = \"MyCategory1\"\nli_Return = rbb_1.SetCategory (ll_Handle, lr_Category)\nSee also\nInsertCategory\nInsertCategoryFirst\nInsertCategoryLast\nDeleteCategory\nGetCategory\nGetCategoryByIndex\nGetCategoryCount\nSetActiveCategory\nGetActiveCategory\n"}
{"page": 1391, "text": "Statements, Events, and Functions\nPage 1391\n2.4.720 SetCheckBox\nDescription\nSets the check box for the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetCheckBox ( Long ItemHandle, RibbonCheckBoxItem Item )\nTable 2.1233:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the item (check box, combo box, large button, small\nbutton, group) on the same level that you will set the item.\nItem\nA check box item you are setting.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also use the SetItem function to set the check box. Refer to SetItem for the\ndifference between SetItem and SetCheckBox.\nThe user events to be bound with the check box must be defined correctly according to the\nrequirements of RibbonCheckBoxItem. For details, see Clicked and Selected.\nExamples\nThis example inserts the \"MyCheckBox1\" check box and binds it with the\n\"Ue_CheckBoxClicked\" user event, and then changes the check box text from\n\"MyCheckBox1\" to \"MyCheckBox2\", and changes the bound user events from\n\"Ue_CheckBoxClicked\" to \"Ue_CheckBoxClicked2\" and \"Ue_CheckBoxSelected2\".\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_CheckBox\nRibbonCheckBoxItem lr_CheckBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_CheckBox = rbb_1.InsertCheckBoxFirst (ll_Handle_Panel, \"MyCheckBox1\",\n \"Ue_CheckBoxClicked\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_CheckBox)\nIf li_Return = 1 Then\n lr_CheckBox.Text = \"MyCheckBox2\"\n lr_CheckBox.Clicked = \"Ue_CheckBoxClicked2\"\n lr_CheckBox.Selected = \"Ue_CheckBoxSelected2\"\n li_Return = rbb_1.SetCheckBox (lr_CheckBox.ItemHandle, lr_CheckBox)\n"}
{"page": 1392, "text": "Statements, Events, and Functions\nPage 1392\nEnd If\nSee also\nInsertCheckBox\nInsertCheckBoxFirst\nInsertCheckBoxLast\nDeleteCheckBox\nGetCheckBox\nGetChildItemByIndex\n2.4.721 SetColumn\nDescription\nSets column information for a DataWindow, child DataWindow, or ListView control.\nFor syntax for a DataWindow or child DataWindow, see the SetColumn method for\nDataWindows in Section 9.161, \u201cSetColumn\u201d in DataWindow Reference.\nApplies to\nListView controls\nSyntax\nlistviewname.SetColumn ( index, label, alignment, width )\nTable 2.1234:\nArgument\nDescription\nlistviewname\nThe name of the ListView control for which you want to set column\nproperties.\nindex\nThe number of the column for which you want to set column properties.\nlabel\nThe label of the column for which you want to set column properties.\nalignment\nA value of the Alignment enumerated datatype specifying how to align\nthe column. Values are:\n\u2022 Left! -- Align the column at the left margin\n\u2022 Right! -- Align the column at the right margin\n\u2022 Center! -- Center the column between the left and right margins\n\u2022 Justify! -- Not valid for the SetColumn function\nwidth\nThe width of the column for which you want to set column properties.\nReturn value\nInteger.\n"}
{"page": 1393, "text": "Statements, Events, and Functions\nPage 1393\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nSetColumn\nis used only in report views.\nExamples\nThis example sets the second column of a ListView:\nlv_list.SetColumn(2 , \"Order\" , Center! , 800)\nSee also\nAddColumn\nAddItem\nSetItem\n2.4.722 SetComboBox\nDescription\nSets the combo box for the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetComboBox ( Long ItemHandle, RibbonComboBoxItem Item )\nTable 2.1235:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the item (check box, combo box, large button, small\nbutton, group) on the same level that you will set the item.\nItem\nA combo box item you are setting.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also use the SetItem function to set the combo box. Refer to SetItem for the\ndifference between SetItem and SetComboBox.\nThe user events to be bound with the combo box must be defined correctly according\nto the requirements of RibbonComboBoxItem. For details, see Modified, Selected, and\nSelectionChanged.\n"}
{"page": 1394, "text": "Statements, Events, and Functions\nPage 1394\nExamples\nThis example inserts a combo box and binds it with the \"Ue_ComboBoxClicked\" user event,\nand then sets values for various properties (including Label, PictureName, SelectionChanged,\nSelected, Modified etc.) of the combo box.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_ComboBox\nRibbonComboBoxItem lr_ComboBox\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_ComboBox = rbb_1.InsertComboBoxFirst (ll_Handle_Panel,\n \"Ue_ComboBoxClicked\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_ComboBox)\nIf li_Return = 1 Then\n lr_ComboBox.Label = \"MyComboBox2\"\n lr_ComboBox.PictureName = \"HelpSmall!\"\n lr_ComboBox.SelectionChanged = \"Ue_ComboBoxSelectionChanged\"\n lr_ComboBox.Selected = \"Ue_ComboBoxSelected\"\n lr_ComboBox.Modified = \"Ue_ComboBoxModified\"\n li_Return = rbb_1.SetComboBox (lr_ComboBox.ItemHandle, lr_ComboBox)\nEnd If\nSee also\nInsertComboBox\nInsertComboBoxFirst\nInsertComboBoxLast\nDeleteComboBox\nGetComboBox\nGetChildItemByIndex\n2.4.723 SetComplete\nDeclares that a transaction on a transaction server should be committed.\nTable 2.1236:\nTo commit a transaction\nUse\nFor OLETxnObject objects\nSyntax 1\nFor TransactionServer objects\nSyntax 2\n2.4.723.1 Syntax 1: For OLETxnObject objects\nDescription\nDeclares that the current transaction should be committed.\nApplies to\nOLETxnObject objects\nSyntax\n"}
{"page": 1395, "text": "Statements, Events, and Functions\nPage 1395\noletxnobject.SetComplete (  )\nTable 2.1237:\nArgument\nDescription\noletxnobject\nThe name of the OLETxnObject variable that is connected to the COM\nobject\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nCall the SetComplete function from a client to allow a COM+ transaction to be completed\nif all participants in the transaction on the COM+ server have called SetComplete or\nEnableCommit. If any participant in the transaction has called DisableCommit or SetAbort,\nthe transaction is not completed.\nExamples\nThe following example shows the use of SetComplete in a component method that performs\ndatabase updates:\ninteger li_rc\nOleTxnObject lotxn_obj\n \nlotxn_obj = CREATE OleTxnObject\nli_rc = lotxn_obj.ConnectToNewObject(\"pbcom.n_test\")\nIF li_rc <> 0 THEN\n      Messagebox( \"Connect Error\", string(li_rc) )\n   // handle error\nEND IF\n \nlotxn_obj.f_dowork()\nlotxn_obj.f_domorework() \nlotxn_obj.SetComplete()\nlotxn_obj.DisconnectObject()\nSee also\nSetAbort\n2.4.723.2 Syntax 2: For TransactionServer objects\nDescription\nDeclares that the transaction in which a component is participating should be committed and\nthe component instance should be deactivated.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.SetComplete (  )\n"}
{"page": 1396, "text": "Statements, Events, and Functions\nPage 1396\nTable 2.1238:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nThe SetComplete function corresponds to the completeWork transaction primitive in\nEAServer.\nAny component that participates in a transaction can roll back the transaction by calling the\nrollbackWork primitive. Only the action of the root component (the component instance that\nbegan the transaction) determines when EAServer commits the transaction.\nThe transaction is committed if either of the following occurs:\n\u2022 The root component returns with a state of completeWork and no participating component\nhas set a state of disallowCommit.\n\u2022 The root component is deactivated due to an explicit destroy from the client and no\nparticipating component has set a state of disallowCommit. (A client disconnect that is not\npreceded by an explicit destroy request always causes a rollback.)\nYou can use the transaction state primitives in any component; the component does not have\nto be declared transactional. Calling completeWork or rollbackWork from methods causes\nearly deactivation.\nExamples\nThe following example shows the use of SetComplete in a component method that performs\ndatabase updates:\n// Instance variables:\n// DataStore ids_datastore\n// TransactionServer ts\nInteger li_rc\nlong ll_rv\nli_rc = this.GetContextService(\"TransactionServer\", ts)\nIF li_rc <> 1 THEN\n      // handle the error\nEND IF\n...\nll_rv = ids_datastore.Update()\nIF ll_rv = 1 THEN\n      ts.SetComplete()\nELSE\n      ts.SetAbort()\nEND IF\nSee also\nDisableCommit\n"}
{"page": 1397, "text": "Statements, Events, and Functions\nPage 1397\nEnableCommit\nIsInTransaction (obsolete)\nIsTransactionAborted (obsolete)\nLookup (obsolete)\nSetAbort\nWhich\n2.4.724 SetData\nDescription\nSets data in the OLE server associated with an OLE control using Uniform Data Transfer.\nApplies to\nOLE controls and OLE custom controls\nSyntax\nolename.SetData ( clipboardformat, data )\nTable 2.1239:\nArgument\nDescription\nolename\nThe name of the OLE or custom control associated with the OLE server\nto which you want to transfer data.\nclipboardformat\nThe format of the data. You can specify a standard format with a\nvalue of the ClipboardFormat enumerated datatype. You can specify a\nnonstandard format as a string.Values for ClipboardFormat are:\nClipFormatBitmap!\nClipFormatDIB!\nClipFormatDIF!\nClipFormatEnhMetafile!\nClipFormatHdrop!\nClipFormatLocale!\nClipFormatMetafilePict!\nClipFormatOEMText!\nClipFormatPalette!\nClipFormatPenData!\nClipFormatRIFF!\nClipFormatSYLK!\nClipFormatText!\nClipFormatTIFF!\n"}
{"page": 1398, "text": "Statements, Events, and Functions\nPage 1398\nArgument\nDescription\nClipFormatUnicodeText!\nClipFormatWave!\nIf clipboardformat is an empty string or a null value, SetData transfers the\ndata with the format ClipFormatText!.\ndata\nA string or blob whose value is the data you want to transfer.\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if an error occurs.\nUsage\nSetData returns an error if you specify a clipboard format that the OLE server does not\nsupport. See the documentation for the OLE server to find out what formats it supports.\nSetData operates via Uniform Data Transfer, a mechanism defined by Microsoft for\nexchanging data with container applications. PowerBuilder enables data transfer via a global\nhandle. The OLE server must also support data transfer via a global handle. If it does not, you\ncannot transfer data to or from that server.\nExamples\nFor an example of moving data between two OLE controls (a Microsoft Word table and a\nMicrosoft Graph), see GetData.\nSee also\nGetData\n2.4.725 SetDataDDE\nDescription\nSends data to a DDE client application when PowerBuilder is acting as a DDE server. You\nwould usually call SetDataDDE in the script for the RemoteRequest event, which is triggered\nby a DDE request for data from the client application.\nSyntax\nSetDataDDE ( string {, applname, topic, item } )\nTable 2.1240:\nArgument\nDescription\nstring\nThe data you want to send to a DDE client application\napplname\n(optional)\nThe DDE name for the client application\ntopic (optional)\nA string whose value is the basic data grouping the DDE client\napplication referenced\nitem (optional)\nA string (data within topic)\n"}
{"page": 1399, "text": "Statements, Events, and Functions\nPage 1399\nReturn value\nInteger.\nReturns 1 if it succeeds. If an error occurs, SetDataDDE returns a negative integer. Values\nare:\n-1 -- Function called in the wrong context\n-2 -- Data not accepted\nIf any argument's value is null, SetDataDDE returns null.\nUsage\nTo enable DDE server mode in your PowerBuilder application, call the StartServerDDE\nfunction. Then DDE messages from a DDE client trigger events in the PowerBuilder\nwindow. It is up to you to decide how your application responds by writing code for those\nevents. When an application requests data of the DDE server, it triggers a RemoteRequest\nevent. You typically call SetDataDDE in the script for a window's RemoteRequest event.\nIf a client application has established a hot link with a location in your PowerBuilder\napplication, you can call SetDataDDE in an event for the object associated with the location.\nAs a server application, you decide how location names map to the controls in your\napplication. For example, your application can decide that the DDE name loc1 refers to the\nSingleLineEdit sle_name and a client application can establish a hot link with \"loc1.\" Then\nin the Modified event for sle_name, you can call SetDataDDE so that the client application\nreceives changes each time sle_name is changed. Likewise, if loc1 referred to a DataWindow,\nyou can call SetDataDDE in the ItemChanged event for the DataWindow.\nThe applname argument refers to the client application that has established a channel or a hot\nlink with your application. Topic and item refer to a topic and location recognized by your\nserver application. You only need to specify these arguments to make it clear to the client\napplication who should receive the message and what is being sent.\nExamples\nThis statement illustrates how SetDataDDE is used in a script for a RemoteRequest event\nwhen another DDE application requests data. The data sent is the text of the SingleLineEdit\nsle_Address:\nSetDataDDE(sle_Address.Text)\nThis statement illustrates how the optional arguments are specified:\nSetDataDDE(sle_Address.Text, \"MYDB\", &\n      \"Employee\", \"Address\")\nSee also\nGetDataDDE\nStartServerDDE\n2.4.726 SetDataLabelling\nDescription\nSet the data label for a DirectX 3D graph.\n"}
{"page": 1400, "text": "Statements, Events, and Functions\nPage 1400\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SetDataLabelling ({graphcontrol}, series, datapoint, value)\nTable 2.1241:\nArgument\nDescription\ncontrolname\nThe name of the graph from which you want data, or the name of the\nDataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control.\nseriesnumber\nThe number that identifies the series in which you want to label a data\npoint.\ndatapoint\nThe data point that you want to label.\nvalue\nIndicates whether to label the data with its value.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetDataLabelling returns null.\nUsage\nSetDataLabelling is used to indicate whether or not to label the data with the numbers for\nDirectX 3D Area, Bar, Col, or Line graphs. You cannot use this method with DirectX 3D Pie\ngraphs.\nExamples\nThese statements set the series and datapoint for the graph gr_1 in the DataWindow control\ndw_employee.\ninteger SeriesNbr, ItemNbr\ngrObjectType clickedtype\n \n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", & \n      SeriesNbr, ItemNbr)\n \n// Set data label\ndw_employee.SetDataLabelling(\"gr_1\", & \n      SeriesNbr, ItemNbr, true)\nThese statements set the series and datapoint for the graph gr_1.\ninteger SeriesNbr, ItemNbr\ngrObjectType clickedtype\n \nclickedtype = gr_1.ObjectAtPointer(SeriesNbr, &\n      ItemNbr)\n \n"}
{"page": 1401, "text": "Statements, Events, and Functions\nPage 1401\ngr_1.SetDataLabeling(SeriesNbr, ItemNbr, true)\nSee also\nGetDataLabelling\nGetSeriesLabelling\nSetSeriesLabelling\n2.4.727 SetDataPieExplode\nDescription\nExplodes a pie slice in a pie graph. The exploded slice is moved away from the center of the\npie, which draws attention to the data. You can explode any number of slices of the pie.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SetDataPieExplode ( { graphcontrol, } seriesnumber, datapoint,\n percentage )\nTable 2.1242:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to explode a pie slice, or the\nname of the DataWindow containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nin which you want to explode a pie slice.\nseriesnumber\nThe number that identifies the series.\ndatapoint\nThe number of the data point (that is, the pie slice) to be exploded.\npercentage\nA number between 0 and 100 which is the percentage of the radius that\nthe pie slice is moved away from the center. When percentage is 100, the\ntip of the slice is even with the circumference of the pie's circle.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetDataPieExplode returns null.\nUsage\nIf the graph is not a pie graph, the function has no effect.\nExamples\nThis example explodes the pie slice under the pointer to 50% when the user double-clicks\nwithin the graph. The code checks the property GraphType to make sure the graph is a pie\n"}
{"page": 1402, "text": "Statements, Events, and Functions\nPage 1402\ngraph. It then finds out whether the user clicked on a pie slice by checking the series and data\npoint values set by ObjectAtPointer. The script is for the DoubleClicked event of a graph\nobject:\ninteger series, datapoint\ngrObjectType clickedtype\ninteger percentage\n \npercentage = 50\nIF (This.GraphType <> PieGraph! AND &\n      This.GraphType <> Pie3D!) THEN RETURN\nclickedtype = This.ObjectAtPointer( &\n      series, datapoint)\nIF (series > 0 and datapoint > 0) THEN\n      This.SetDataPieExplode(series, datapoint, &\n         percentage)\nEND IF\nSee also\nGetDataPieExplode\n2.4.728 SetDataStyle\nSpecifies the appearance of a data point in a graph. The data point's series has appearance\nsettings that you can override with SetDataStyle.\nTable 2.1243:\nTo\nUse\nSet the data point's colors\nSyntax 1\nSet the line style and width for the data point\nSyntax 2\nSet the fill pattern or symbol for the data point\nSyntax 3\n2.4.728.1 Syntax 1: For setting a data point's colors\nDescription\nSpecifies the colors of a data point in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SetDataStyle ( { graphcontrol, } seriesnumber, datapointnumber,\n colortype, color )\nTable 2.1244:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set the color of a data point,\nor the DataWindow containing the graph.\ngraphcontrol\n(DataWindow\nA string whose value is the name of the graph in the DataWindow control\nin which you want to set the color of a data point.\n"}
{"page": 1403, "text": "Statements, Events, and Functions\nPage 1403\nArgument\nDescription\ncontrol only)\n(optional)\nseriesnumber\nThe number of the series in which you want to set the color of a data\npoint.\ndatapointnumber The number of the data point for which you want to set the color.\ncolortype\nA value of the grColorType enumerated datatype specifying the aspect of\nthe data point for which you want to set the color. Values are:\n\u2022 Foreground! -- Text color\n\u2022 Background! -- Background color\n\u2022 LineColor! -- Line color\n\u2022 Shade! -- Shade (for graphics that are three-dimensional or have solid\nobjects)\ncolor\nA long whose value is the new color for colortype.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetDataStyle\nreturns null.\nUsage\nTo change the appearance of a series, use SetSeriesStyle. The settings you make for the series\nare the defaults for all data points in the series.\nTo reset the color of individual points back to the series color, call ResetDataColors.\nFor a graph in a DataWindow, you can specify the appearance of a data point in the graph\nbefore PowerBuilder draws the graph. To do so, define a user event for pbm_dwngraphcreate\nand call SetDataStyle in the script for that event. The event pbm_dwngraphcreate is triggered\njust before a graph is created in a DataWindow object.\nUsing SetDataStyle with DirectX 3D Graphs\nYou can only set the color for the foreground. Background, line color, and shade are\nnot supported.\nExamples\nThis example checks the background color for data point 6 in the series named Salary in the\ngraph gr_emp_data. If it is red, SetDataStyle sets it to black:\nlong color_nbr\ninteger SeriesNbr\n// Get the number of the series\nSeriesNbr = gr_emp_data.FindSeries(\"Salary\")\n// Get the background color\n"}
{"page": 1404, "text": "Statements, Events, and Functions\nPage 1404\ngr_emp_data.GetDataStyle(SeriesNbr, 6, &\n      Background!, color_nbr)\n// If color is red, change it to black\nIF color_nbr = 255 THEN &\n      gr_emp_data.SetDataStyle(SeriesNbr, 6, &\n         Background!, 0)\nThese statements set the text (foreground) color to black for data point 6 in the series named\nSalary in the graph gr_depts in the DataWindow control dw_employees:\ninteger SeriesNbr\n// Get the number of the series\nSeriesNbr = &\n      dw_employees.FindSeries(\"gr_depts\" , \"Salary\")\n// Set the background color\ndw_employees.SetDataStyle(\"gr_depts\" , SeriesNbr, &\n      6, Background!, 0)\nSee also\nGetDataStyle\nGetSeriesStyle\nResetDataColors\nSeriesName\nSetSeriesStyle\n2.4.728.2 Syntax 2: For the line associated with a data point\nDescription\nSpecifies the style and width of a data point's line in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SetDataStyle ( { graphcontrol, } seriesnumber, datapointnumber,\n linestyle, linewidth )\nTable 2.1245:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set the line style and width\nof a data point, or the name of the DataWindow containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nin which you want to set the line style and width.\nseriesnumber\nThe number of the series in which you want to set the line style and width\nof a data point.\ndatapointnumber The number of the data point for which you want to set the line style and\nwidth.\n"}
{"page": 1405, "text": "Statements, Events, and Functions\nPage 1405\nArgument\nDescription\nlinestyle\nA value of the LineStyle enumerated datatype. Values are:\nContinuous!\nDash!\nDashDot!\nDashDotDot!\nDot!\nTransparent!\nlinewidth\nAn integer whose value is the width of the line in pixels.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetDataStyle\nreturns null.\nUsage\nTo change the appearance of a series, use SetSeriesStyle. The settings you make for the series\nare the defaults for all data points in the series.\nFor a graph in a DataWindow, you can specify the appearance of a data point in the graph\nbefore PowerBuilder draws the graph. To do so, define a user event for pbm_dwngraphcreate\nand call SetDataStyle in the script for that event. The event pbm_dwngraphcreate is triggered\njust before a graph is created in a DataWindow object.\nExamples\nThis example checks the line style used for data point 10 in the series named Costs in\nthe graph gr_computers in the DataWindow control dw_equipment. If it is dash-dot, the\nSetDataStyle sets it to continuous. The line width stays the same:\ninteger SeriesNbr, line_width\nLineStyle line_style\n \n// Get the number of the series\nSeriesNbr = dw_equipment.FindSeries( &\n      \"gr_computers\", \"Costs\")\n \n// Get the current line style\ndw_equipment.GetDataStyle(\"gr_computers\", &\n      SeriesNbr, 10, line_style, line_width)\n \n// If the pattern is dash-dot, change to continuous\nIF line_style = DashDot! THEN &\n      dw_equipment.SetDataStyle(\"gr_computers\", &\n         SeriesNbr, 10, Continuous!, line_width)\nSee also\nGetDataStyle\nGetSeriesStyle\n"}
{"page": 1406, "text": "Statements, Events, and Functions\nPage 1406\nSeriesName\nSetSeriesStyle\n2.4.728.3 Syntax 3: For the fill pattern and symbol of a data point\nDescription\nSpecifies the fill pattern and symbol for a data point in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SetDataStyle ( { graphcontrol, } seriesnumber, datapointnumber,\n enumvalue )\nTable 2.1246:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set the appearance of a data\npoint, or the name of the DataWindow containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nin which you want to set the appearance.\nseriesnumber\nThe number of the series in which you want to set the appearance of a\ndata point.\ndatapointnumber The number of the data point for which you want to set the appearance.\nenumvalue\nAn enumerated datatype specifying the appearance setting for the data\npoint. You can specify a FillPattern or grSymbolType value.\nTo change the fill pattern, use a FillPattern value:\nBdiagonal! -- Lines from lower left to upper right\nDiamond!\nFdiagonal! -- Lines from upper left to lower right\nHorizontal!\nSolid!\nSquare!\nVertical!\nTo change the symbol type, use a grSymbolType value:\nNoSymbol!\nSymbolHollowBox!\nSymbolX!\nSymbolStar!\n"}
{"page": 1407, "text": "Statements, Events, and Functions\nPage 1407\nArgument\nDescription\nSymbolHollowUpArrow!\nSymbolHollowCircle!\nSymbolHollowDiamond!\nSymbolSolidDownArrow!\nSymbolSolidUpArrow!\nSymbolSolidCircle!\nSymbolSolidDiamond!\nSymbolPlus!\nSymbolHollowDownArrow!\nSymbolSolidBox!\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetDataStyle\nreturns null.\nUsage\nTo change the appearance of a series, use SetSeriesStyle. The settings you make for the series\nare the defaults for all data points in the series.\nFor a graph in a DataWindow, you can specify the appearance of a data point in the graph\nbefore PowerBuilder draws the graph. To do so, define a user event for pbm_dwngraphcreate\nand call SetDataStyle in the script for that event. The event pbm_dwngraphcreate is triggered\njust before a graph is created in a DataWindow object.\nUsing SetDataStyle with DirectX 3D Graphs\nYou cannot use a fill pattern or specify specific symbols for the data point.\nExamples\nThis example checks the fill pattern used for data point 10 in the series named Costs in the\ngraph gr_product_data. If it is diamond, then SetDataStyle changes it to solid:\ninteger SeriesNbr\nFillPattern data_pattern\n \n// Get the number of the series\nSeriesNbr = gr_product_data.FindSeries(\"Costs\")\n \n// Get the current fill pattern\ngr_product_data.GetDataStyle(SeriesNbr, 10, &\n      data_pattern)\n \n// If the pattern is diamond, change it to solid\nIF data_pattern = Diamond! THEN &\n      gr_product_data.SetDataStyle(SeriesNbr, &\n"}
{"page": 1408, "text": "Statements, Events, and Functions\nPage 1408\n         10, Solid!)\nSee also\nGetDataStyle\nGetSeriesStyle\nSeriesName\nSetSeriesStyle\n2.4.729 SetDataTransparency\nDescription\nSets the transparency percentage of a data point in a series in a DirectX 3D graph (those with\n3D rendering).\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SetDataTransparency ( { graphcontrol, } seriesnumber, datapoint,\n transparency )\nTable 2.1247:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set data, or the name of the\nDataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control in which you want to set the transparency value of a\ndata point.\nseriesnumber\nThe number that identifies the series in which you want to set data.\ndatapoint\nThe number of the data point for which you want to set a transparency\nvalue.\ntransparency\nInteger value for percent transparency. A value of 0 means that the\ndata point is opaque and a value of 100 means that it is completely\ntransparent.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetDataTransparency returns null.\nUsage\nSetDataTransparency sets the transparency value for a data point in any DirectX 3D graph\n(those with 3D rendering).\nExamples\n"}
{"page": 1409, "text": "Statements, Events, and Functions\nPage 1409\nThese statements set the transparency percentage to 50% for the clicked data in the graph\ngr_1 in the DataWindow control dw_employee:\ninteger SeriesNbr, ItemNbr, TransNbr\ngrObjectType clickedtype\n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", &\n      SeriesNbr, ItemNbr)\n//The following statement sets Transparency to 50%\nTransNbr = 50\n      \ndw_employee.SetDataTransparency(\"gr_1\", &\n      SeriesNbr , ItemNbr, TransNbr)\nThese statements set the transparency percentage to 50% for the clicked data point in the\ngraph gr_employee.\ninteger SeriesNbr, ItemNbr, TransNbr\ngrObjectType clickedtype\n \nclickedtype = gr_employee.ObjectAtPointer( &\n      SeriesNbr, ItemNbr)\n \nTransNbr = 50\n \ngr_employee.SetDataTransparency(SeriesNbr, &\n      ItemNbr, TransNbr)\nSee also\nFindSeries\nGetDataTransparency\nGetSeriesTransparency\nSetSeriesTransparency\n2.4.730 SetDateLimits\nDescription\nSets the maximum and minimum date limits for the calendar.\nApplies to\nMonthCalendar control\nSyntax\ncontrolname.SetDateLimits  ( min, max )\nTable 2.1248:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control for which you want to set the\ndate limits\nmin\nA date value to be set as the minimum date that can be referenced or\ndisplayed in the calendar\n"}
{"page": 1410, "text": "Statements, Events, and Functions\nPage 1410\nArgument\nDescription\nmax\nA date value to be set as the maximum date that can be referenced or\ndisplayed in the calendar\nReturn value\nInteger.\nReturns 0 when both limits are set successfully and one of the following negative values\notherwise:\n-1 -- Invalid arguments\n-2 -- Unknown failure\nUsage\nUse the SetDateLimits function to set minimum and maximum dates. SetDateLimits uses the\nmaximum date as the minimum date and vice versa if you set a maximum date that is earlier\nthan the minimum date.\nExamples\nThis example sets the minimum and maximum dates for a control using today's date as the\nminimum date and a date specified in an EditMask control as the maximum date:\ninteger li_return\nDate mindate, maxdate\nmindate = Today()\nmaxdate = Date(em_1.Text)\nli_return = mc_1.SetDateLimits(mindate, maxdate)\nSee also\nGetDateLimits\n2.4.731 SetDropHighlight\nDescription\nHighlights the specified item as the drop target.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.SetDropHighlight ( itemhandle )\nTable 2.1249:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to highlight an item as the\ntarget of a drag-and-drop operation\n"}
{"page": 1411, "text": "Statements, Events, and Functions\nPage 1411\nArgument\nDescription\nitemhandle\nThe handle of the item you want to highlight as the target in a drag-and-\ndrop operation\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nUse in a drag operation to specify a drop target.\nExamples\nThis example uses the TreeView Clicked event to set the current TreeView item as the drop\ntarget:\nhandle = tv_list.FindItem(CurrentTreeItem!,0)\ntv_list.SetDropHighlight(handle)\nSee also\nFindItem\nSetItem\n2.4.732 SetDynamicParm\nDescription\nSpecifies a value for an input parameter in the DynamicDescriptionArea that is used in an\nSQL OPEN or EXECUTE statement.\nOnly for Format 4 dynamic SQL\nUse this function only in conjunction with Format 4 dynamic SQL statements.\nSyntax\nDynamicDescriptionArea.SetDynamicParm ( index, value )\nTable 2.1250:\nArgument\nDescription\nDynamicDescriptionArea\nThe name of the DynamicDescriptionArea, usually SQLDA.\nindex\nAn integer identifying the input parameter descriptor in which you want\nto set the data. Index must be less than or equal to the value in NumInputs\nin DynamicDescriptionArea.\nvalue\nThe value you want to use to fill the input parameter descriptor identified\nby index.\nReturn value\n"}
{"page": 1412, "text": "Statements, Events, and Functions\nPage 1412\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetDynamicParm returns null.\nUsage\nSetDynamicParm specifies a value for the parameter identified by index in the array of input\nparameter descriptors in DynamicDescriptionArea.\nUse SetDynamicParm to fill the parameters in the input parameter descriptor array in the\nDynamicDescriptionArea before executing an OPEN or EXECUTE statement.\nExamples\nThis statement fills the first input parameter descriptor in SQLDA with the string MA:\nSQLDA.SetDynamicParm(1, \"MA\")\nThis statement fills the fourth input parameter descriptor in SQLDA with the number 01742:\nSQLDA.SetDynamicParm(4, \"01742\")\nThis statement fills the third input parameter descriptor in SQLDA with the date 12-31-2002:\nSQLDA.SetDynamicParm(3, \"12-31-2002\")\nSee also\nGetDynamicDate\nGetDynamicDateTime\nGetDynamicNumber\nGetDynamicString\nGetDynamicTime\nUsing dynamic SQL\nOPEN Cursor\n2.4.733 SetFirstVisible\nDescription\nSets the specified item as the first visible item in a TreeView control.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.SetFirstVisible ( itemhandle )\nTable 2.1251:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to identify an item as the first\nvisible item\n"}
{"page": 1413, "text": "Statements, Events, and Functions\nPage 1413\nArgument\nDescription\nitemhandle\nThe handle of the item you are identifying as the first visible item in the\nTreeView control\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nUse to give focus to the TreeView item specified by the itemhandle and scroll it to the top of\nthe TreeView control (or as close to the top as the item list allows; if the item is the last item\nin a TreeView control, for example, it cannot scroll to the top of the control).\nExamples\nThis example sets the current TreeView item as the first item visible in a TreeView control:\nlong ll_tvi\nint li_tvret\n \nll_tvi = tv_list.FindItem(CurrentTreeItem! , 0)\n \nli_tvret = tv_list.SetFirstVisible(ll_tvi)\nIF li_tvret = -1 THEN\n      MessageBox(\"Warning!\" , \"Didn't Work\")\nEND IF\nSee also\nFindItem\nSetItem\n2.4.734 SetFocus\nDescription\nSets the focus on the specified object or control.\nApplies to\nAny object\nSyntax\nobjectname.SetFocus ( )\nTable 2.1252:\nArgument\nDescription\nobjectname\nThe name of the object or control in which you want to set the focus\nReturn value\nInteger.\n"}
{"page": 1414, "text": "Statements, Events, and Functions\nPage 1414\nReturns 1 if it succeeds and -1 if an error occurs. If objectname is null, SetFocus returns null.\nUsage\nIf objectname is a ListBox, SetFocus displays the focus rectangle around the first item. If\nobjectname is a DropDownListBox, SetFocus highlights the edit box. To select an item in a\nListBox or DropDownListBox, use SelectItem.\nDrawing objects cannot have focus. Therefore, you cannot use SetFocus to set focus to in a\nLine, Oval, Rectangle, or RoundRectangle.\nExamples\nThis statement in the script for the Open event in a window moves the focus to the first item\nin lb_Actions:\nlb_Actions.SetFocus()\nSee also\nSetItem\nSetState\nSetTop\n2.4.735 SetGroup\nDescription\nSets the group for the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetGroup ( Long ItemHandle, RibbonGroupItem Item )\nTable 2.1253:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the group on the same level that you will set.\nItem\nA group item you are setting.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also use the SetItem function to set the group. Refer to SetItem for the difference\nbetween SetItem and SetGroup.\nExamples\n"}
{"page": 1415, "text": "Statements, Events, and Functions\nPage 1415\nThis example inserts a group and then sets the value of the NewLine property of the group.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_Group\nRibbonGroupItem lr_Group\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_Group = rbb_1.InsertGroupFirst (ll_Handle_Panel)\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_Group)\nIf li_Return = 1 Then\n lr_Group.NewLine = true\n li_Return = rbb_1.SetGroup (lr_Group.ItemHandle, lr_Group)\nEnd If\nSee also\nInsertGroup\nInsertGroupFirst\nInsertGroupLast\nDeleteGroup\nSetGroup\nGetGroup\nGetChildItemByIndex\n2.4.736 SetGlobalProperty (obsolete)\nDescription\nSets the value of an SSL global property.\nObsolete function\nSetGlobalProperty is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nSSLServiceProvider object\nSyntax\nsslserviceprovider.SetGlobalProperty ( property, value )\nTable 2.1254:\nArgument\nDescription\nsslserviceprovider Reference to the SSLServiceProvider service instance.\nproperty\nThe name of the SSL property you want to set.\nFor a complete list of supported SSL properties, see your EAServer\ndocumentation for the Connection object.\n"}
{"page": 1416, "text": "Statements, Events, and Functions\nPage 1416\nArgument\nDescription\nvalue\nString value of the SSL property.\nReturn value\nLong.\nReturns one of the following values:\n0 -- Success\n-1 -- Unknown property\n-2 -- Property is read only\n-3 -- Invalid value for property\n-10 -- An EAServer or SSL failure has occurred\n-11 -- Bad argument list\nUsage\nThe SetGlobalProperty function allows PowerBuilder clients that connect to EAServer\nthrough SSL to set global SSL properties.\nAny properties set using the SSLServiceProvider interface are global to all connections\nmade by the client to all EAServer servers. You can override any of the global settings at the\nconnection level by specifying them as options to the Connection object.\nOnly clients can get and set SSL properties. Server components do not have permission to\nuse the SSLServiceProvider service.\nExamples\nThe following example shows the use of the SetGlobalProperty function to set the value of\nthe cacheSize property to 300:\nSSLServiceProvider ssl\nlong rc\n...\nthis.GetContextService(\"SSLServiceProvider\", ssl)\nrc = ssl.SetGlobalProperty(\"cacheSize\", \"300\")\n...\nSee also\nGetGlobalProperty (obsolete)\n2.4.737 SetHeader\n2.4.737.1 Syntax 1: for TokenRequest objects\nDescription\nSets the request header. If SetHeader or SetHeaders is not used to set the header for\nAuthorization, the program will automatically set the header for Authorization and Content-\ntype.\n"}
{"page": 1417, "text": "Statements, Events, and Functions\nPage 1417\nApplies to\nTokenRequest object\nSyntax\nobjectname.SetHeader ( string headerName, string headerValue )\nTable 2.1255:\nArgument\nDescription\nobjectname\nA reference to the TokenRequest object in which you want to set the\nrequest header.\nheaderName\nA string specifying the header name.\nheaderValue\nA string specifying the header value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the SetHeader function to set the value of the\ncontent-type header to \"application/x-www-form-urlencoded\":\nint li_return\nTokenRequest lnv_TokenRequest\nli_return = lnv_TokenRequest.setheader(\"content-type\", \"application/x-www-form-\nurlencoded\")\nSee also\nAppendParam\nClearHeaders\nGetHeader\nGetHeaders\nSetHeaders\n2.4.737.2 Syntax 2: for OAuthRequest objects\nDescription\nSets the request header.\nApplies to\nOAuthRequest object\nSyntax\nobjectname.SetHeader ( string headerName, string headerValue )\n"}
{"page": 1418, "text": "Statements, Events, and Functions\nPage 1418\nTable 2.1256:\nArgument\nDescription\nobjectname\nA reference to the OAuthRequest object in which you want to set the\nrequest header.\nheaderName\nA string specifying the header name.\nheaderValue\nA string specifying the header value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the SetHeader function to set the value of the\ncontent-type header:\nint li_return\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.setheader(\"content-type\", \"application/x-www-form-\nurlencoded\")\nSee also\nClearHeaders\nGetBody\nGetHeader\nGetHeaders\nSetAccessToken\nSetBody\nSetHeaders\n2.4.738 SetHeaders\n2.4.738.1 Syntax 1: for TokenRequest objects\nDescription\nSets the header information of all requests. If SetHeader or SetHeaders is not used to set the\nheader for Authorization, the program will automatically set the header for Authorization and\nContent-type.\nApplies to\nTokenRequest object\nSyntax\nobjectname.SetHeaders ( string headers )\n"}
{"page": 1419, "text": "Statements, Events, and Functions\nPage 1419\nTable 2.1257:\nArgument\nDescription\nobjectname\nA reference to the TokenRequest object in which you want to set the\nrequest header.\nheaders\nA string specifying all of the header names.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the SetHeaders function to set the value of the\ncontent-type header and the charset header:\nint li_return\nTokenRequest lnv_TokenRequest\nli_return = lnv_TokenRequest.setheaders(\"content-type:application/x-www-form-\nurlencoded; charset=UTF-8~r~nCache-Control:no-cache\")\nSee also\nAppendParam\nClearHeaders\nGetHeader\nGetHeaders\nSetHeader\n2.4.738.2 Syntax 2: for OAuthRequest objects\nDescription\nSets the header information of all requests.\nApplies to\nOAuthRequest object\nSyntax\nobjectname.SetHeaders ( string headers )\nTable 2.1258:\nArgument\nDescription\nobjectname\nA reference to the OAuthRequest object in which you want to set the\nrequest header.\nheaders\nA string specifying all of the header names.\nReturn value\n"}
{"page": 1420, "text": "Statements, Events, and Functions\nPage 1420\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThe following example shows the use of the SetHeaders function to set the value of the\ncontent-type header and the charset header:\nint li_return\nOAuthRequest lnv_OAuthRequest\nli_return = lnv_OAuthRequest.setheaders(\"content-type:application/x-www-form-\nurlencoded; charset=UTF-8~r~nCache-Control:no-cache\")\nSee also\nClearHeaders\nGetBody\nGetHeader\nGetHeaders\nSetAccessToken\nSetBody\nSetHeader\n2.4.739 SetHttpRequestHeader\nDescription\nSets the HTTP request header.\nApplies to\nApplication object\nSyntax\napplicationname.SetHttpRequestHeader ( string headerName, string headerValue{,\n Boolean replace } )\nTable 2.1259:\nArgument\nDescription\napplicationname\nThe name of the application object in which you want to set the request\nheader.\nheaderName\nA string whose value is the header name.\nheaderValue\nA string whose value is the header value.\nreplace\n(optional)\nA boolean determines whether to replace the current existing request\nvalue if the same header name already exists.\n\u2022 TRUE -- to replace the value in the current existing request header if\nthe same header name already exists.\n"}
{"page": 1421, "text": "Statements, Events, and Functions\nPage 1421\nArgument\nDescription\n\u2022 FALSE -- to add the value (with a \u201c,\u201d) to the current existing request\nheader if the same header name already exists. The default value is\nFALSE.\nNote: use this argument cautiously 1) TRUE is recommended when you\nspecify the charset in the \"Content-Type\" header, because no more than\none charset is allowed; 2) FALSE is recommended when cookie is used.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs or if the current application is not an\ninstallable cloud app deployed with PowerServer. If any argument's value is null, the method\nreturns null.\nExamples\nThe following code example sets the access token in the HTTP request header:\nLong ll_Return\nString ls_TokenType, ls_AccessToken, ls_Json\nJsonParser ljson_Parser\nljson_Parser = Create JsonParser\nls_Json = '{' +&\n'    \"access_token\":\n \"eyJhbGciOiJSUzI1NiIsImtpZCI6IjM4OEQ0NEIxRDdBNkVFOUQxNTU0MDAzQUMzM0QzQzkzIiwidHlwIjoiYXQrand0In0\n__5sBelZD0vr6nmWh8Uy-zoJenzsrnVEv8VHVNi2enuKH6SBe-Q59bn5A-\nGbg6viNjv0S5HIaKuWeawExBH6uEAu28RlSlfG2bwWuCsyhYWOPIhNhYcZTbVD8ks0SFodGeGS-\nZqNOVrOTKb9oqnhvYxnuNofJpjToZ8ZZdKyWiyJUhItpTQTyI3MsCHoVU4X101YTPrVMF_-\nOuPSwXm6QMl3QtI_6Hy_PeYHL-xz2-q3tog\",' +&\n'    \"expires_in\": 3600,' +&\n'    \"token_type\": \"Bearer\",' +&\n'    \"scope\": \"scope.readaccess\"' +&\n'}'\nljson_Parser.LoadString( ls_Json )\nls_TokenType = ljson_Parser.GetItemString( \"/token_type\" )\nls_AccessToken = ljson_Parser.GetItemString( \"/access_token\" )\nll_Return = Getapplication().SetHttpRequestHeader( \"Authorization\", ls_TokenType +\n \" \" + ls_AccessToken, True )\nIf IsValid ( ljson_Parser ) Then Destroy ( ljson_Parser )\nThe following code example sets the cookie in the HTTP request header:\nNotice that you can only set the cookie name and cookie value in the key-value pairs (for\nexample, \"key1=value1; key2=value2\"), and cannot set the other properties such as Domain,\nExpires etc.\nGetApplication().SetHttpRequestHeader (\"cookie\",\n \"appcookie=test_cookie;PSTM=1634527936;\")\nSee also\nBeginSession\n"}
{"page": 1422, "text": "Statements, Events, and Functions\nPage 1422\nGetHttpResponseHeaders\nGetHttpResponseStatusCode\nGetHttpResponseStatusText\n2.4.740 SetItem\nSets the value of an item in a list.\nFor use with DataWindows and DataStores, see the SetItem method for DataWindows in\nSection 9.171, \u201cSetItem\u201d in DataWindow Reference.\nTable 2.1260:\nTo set the values of\nUse\nA ListView control item\nSyntax 1\nA ListView control item and column\nSyntax 2\nA TreeView control item\nSyntax 3\nRibbonMenu controls\nSyntax 4\nRibbonBar controls\nSyntax 5\n2.4.740.1 Syntax 1: For ListView controls\nDescription\nSets data associated with a ListView item to the property values you specify in a\nListViewItem variable.\nApplies to\nListView controls\nSyntax\nlistviewname.SetItem ( index {, column }, item )\nTable 2.1261:\nArgument\nDescription\nlistviewname\nThe ListView for which you are setting item properties\nindex\nThe index number of the item for which you are setting properties\ncolumn\nThe index number of the column of the item for which you want to set\nproperties\nitem\nThe ListViewItem variable containing property values you want to assign\nto a ListView item\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\n"}
{"page": 1423, "text": "Statements, Events, and Functions\nPage 1423\nUsage\nYou can set properties for any ListView item with this syntax. If you do not specify a\ncolumn, SetItem sets properties for the first column of an item. Only report views display\nmultiple columns.\nTo add items to a ListView control, use the AddItem function. To add columns to a ListView\ncontrol, use AddColumn. To set display values for the columns of a ListView item, use\nSyntax 2.\nIf you want to set column properties, such as alignment or width, use SetColumn. These\ncolumn properties are independent of the ListViewItem objects.\nTo change pictures and other property values associated with a ListView item, use GetItem,\nchange the property values, and use SetItem to apply the changes back to the ListView.\nExamples\nThis example uses SetItem to change the state picture index for the selected lv_list ListView\nitem:\nlistviewitem lvi_1\n \nlv_list.GetItem(lv_list.SelectedIndex( ), lvi_1)\nlvi_1.StatePictureIndex = 2\nlv_list.SetItem(lv_list.SelectedIndex () , lvi_1)\nSee also\nAddColumn\nAddItem\nGetItem\nSetItem\n2.4.740.2 Syntax 2: For ListView controls\nDescription\nSets the value displayed for a particular column of a ListView item.\nApplies to\nListView control\nSyntax\nlistviewname.SetItem ( index, column, label )\nTable 2.1262:\nArgument\nDescription\nlistviewname\nThe ListView control for which you are setting a display value\nindex\nThe index number of the item for which you are setting a display value\ncolumn\nThe index number of the column for which you want to set a display\nvalue\n"}
{"page": 1424, "text": "Statements, Events, and Functions\nPage 1424\nArgument\nDescription\nlabel\nThe string value or variable which you are assigning to the specified\ncolumn of the specified ListView item\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nYou must include the column number as an argument, even if you are only assigning values\nto a single-column ListView control. To specify the properties for a ListView item, use\nSyntax 1.\nExamples\nThis example assigns display values to three columns in a report view for three lv_list\nListView items:\nlistviewitem l_lvi\ninteger li_count, li_index\n \nFOR li_index = 1 to 3\n      li_count=li_count+1\n      lv_1ist.AddItem(\"Category \" + String(li_index), 1)\nNEXT\n \nlv_list.AddColumn(\"Composition\", Left! , 860)\nlv_list.AddColumn(\" Album\", Left! , 610)\nlv_list.AddColumn(\" Artist\", Left! , 710)\n \nlv_list.SetItem(1 , 1 , \"St. Thomas\")\nlv_list.SetItem(1 , 2 , \"The Bridge\")\nlv_list.SetItem(1 , 3 , \"Sonny Rollins\")\n \nlv_list.SetItem(2 , 1 , \"So What\")\nlv_list.SetItem(2 , 2 , \"Kind of Blue\")\nlv_list.SetItem(2 , 3 , \"Miles Davis\")\n \nlv_list.SetItem(3 , 1 , \"Goodbye, Porkpie Hat\")\nlv_list.SetItem(3 , 2 , \"Mingus-Ah-Um\")\nlv_list.SetItem(3 , 3 , \"Charles Mingus\")\nSee also\nGetItem\n2.4.740.3 Syntax 3: For TreeView controls\nDescription\nSets the data associated with a specified item.\nApplies to\nTreeView controls\nSyntax\n"}
{"page": 1425, "text": "Statements, Events, and Functions\nPage 1425\ntreeviewname.SetItem ( itemhandle, item )\nTable 2.1263:\nArgument\nDescription\ntreeviewname\nThe name of the TreeView control in which you want to set the data for a\nspecific item\nitemhandle\nThe handle associated with the item you want to change\nitem\nThe TreeView item you want to change\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nTypically, you would call GetItem first, edit the data, and then call SetItem to reflect your\nchanges in the TreeView control.\nExamples\nThis example uses the ItemExpanding event to change the picture index and selected picture\nindex of the current TreeView item:\ntreeviewitem l_tvi\nlong ll_tvi\n \nll_tvi = tv_list.FindItem(CurrentTreeItem! , 0)\ntv_list.GetItem(ll_tvi , l_tvi)\nl_tvi.PictureIndex = 5\nl_tvi.SelectedPictureIndex = 5\n \ntv_list.SetItem( ll_tvi, l_tvi )\nSee also\nGetItem\n2.4.740.4 Syntax 4: For RibbonMenu controls\nDescription\nSets a menu item for a ribbon menu.\nApplies to\nRibbonMenu control\nSyntax\ncontrolname.SetItem ( { Long ParentIndex, } Long Index, RibbonMenuItem Item )\nTable 2.1264:\nArgument\nDescription\ncontrolname\nThe name of the RibbonMenu control in which you want to set the menu\nitem.\n"}
{"page": 1426, "text": "Statements, Events, and Functions\nPage 1426\nArgument\nDescription\nParentIndex\nThe index of the menu item (RibbonMenuItem) whose submenu item you\nwant to set.\nIf not specified, the menu item will be set; if specified to a valid value,\nthe submenu item of the menu item (whose index is ParentIndex) will\nbe set; if specified to an invalid value, an error would occur and this\noperation would return -1.\nIndex\nThe index of the menu item or submenu item for which you want to set.\nIf index is invalid, an error would occur and this operation would return\n-1.\nItem\nA RibbonMenuItem item you want to set. Only RibbonMenuItem\nwith \"Normal(0)\" or \"Separator(1)\" ItemType is supported. If\nRibbonMenuItem is with other ItemType such as \"Recent(2)\", an error\nwould occur and this operation would return -1.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nOnly menu items with the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with\nItemType 0 or 1) can be added to the RibbonMenu control.\nA RibbonMenu control can contain menu items in no more than two levels.\nThe user events to be bound with the menu item must be defined correctly according to the\nrequirements of RibbonMenuItem. For details, see Clicked and Selected.\nExamples\nThis example inserts the \"MenuItem\" menu and the \"SubMenuItem\" submenu and then sets\nvalues for their properties (including Text, PictureName, and Clicked etc.).\nInteger li_Return\nLong ll_Index, ll_Index2\nRibbonMenu lr_Menu\nRibbonMenuItem lr_MenuItem1, lr_MenuItem2\nll_Index = lr_Menu.InsertItemLast (\"MenuItem\", \"AddSmall!\", \"Ue_MenuItem1Clicked\")\nll_Index2 = lr_Menu.InsertItemLast (ll_Index, \"SubMenuItem\", \"AddSmall!\",\n \"Ue_MenuItem11Clicked\")\nlr_MenuItem1.Text = \"MenuItem1\"\nlr_MenuItem1.PictureName = \"DeleteSmall!\"\nlr_MenuItem1.Clicked = \"Ue_MenuItem2Clicked\"\nlr_MenuItem2.Text = \"SubMenuItem1\"\nlr_MenuItem2.PictureName = \"DeleteSmall!\"\nlr_MenuItem2.Clicked = \"Ue_MenuItem21Clicked\"\nli_Return = lr_Menu.SetItem (ll_Index, lr_MenuItem1)\nli_Return = lr_Menu.SetItem (ll_Index, ll_Index2, lr_MenuItem2)\nSee also\n"}
{"page": 1427, "text": "Statements, Events, and Functions\nPage 1427\nAddSeparatorItem\nDeleteItem\nGetItem\nGetItemCount\nInsertItem\nInsertItemFirst\nInsertItemLast\n2.4.740.5 Syntax 5: For RibbonBar controls\nDescription\nSets the item control in the RibbonBar.\nApplies to\nRibbonBar control\nSyntax 1\ncontrolname.SetItem ( Long ItemHandle, PowerObject Item )\nSyntax 2\ncontrolname.SetItem ( PowerObject Item )\nTable 2.1265:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control in which you want to set the item.\nItemHandle\nThe handle of the item which you want to set.\nItem\nThe object of type PowerObject containing information about the class\ndefinition of the item.\nUsage\nThis function can be used to set items including ApplicationButton, TabButton, Category,\nPanel, Group, CheckBox, ComboBox, LargeButton, and SmallButton; but cannot set\nRibbonMenuItem, RibbonApplicationMenu, and RibbonMenu. To set RibbonMenuItem,\nyou can use the SetItem Syntax 4, SetMasterItem, and SetRecentItem functions. To set\nRibbonApplicationMenu and RibbonMenu, you can use the SetMenu function.\nYou can also use the following functions to set the individual control: SetApplicationButton,\nSetCategory, SetCheckBox, SetComboBox, SetGroup, SetLargeButton, SetPanel,\nSetSmallButton, and SetTabButton. For example, the following three statements have the\nsame effect:\nThis statement is the simplest, and does not require the item handle; but it needs to convert\nthe object type from PowerObject to RibbonCheckBoxItem:\n"}
{"page": 1428, "text": "Statements, Events, and Functions\nPage 1428\nrbb_1.SetItem (lr_CheckBox)\nThis statement requires the item handle and it needs to convert the object type from\nPowerObject to RibbonCheckBoxItem:\nrbb_1.SetItem (lr_CheckBox.itemhandle, lr_CheckBox)\nThis statement requires the item handle but it does not need to convert the object type:\nrbb_1.SetCheckBox (lr_CheckBox.itemhandle, lr_CheckBox)\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExample 1\nThis example inserts two tab buttons and then sets the value of the Enabled property of the\nfirst tab button.\nLong ll_TabCount, ll_i\nInteger li_return\nRibbonTabButtonItem lr_Tab\nrbb_1.InsertTabButtonFirst(\"TabButton1\", \"ArrowUpSmall!\", \"ue_TabButtonClicked\")\nrbb_1.InsertTabButtonLast(\"TabButton2\", \"HelpSmall!\", \"ue_TabButtonClicked\")\nll_TabCount = Rbb_1.GetTabbuttoncount( )\nFor ll_I = 1 To ll_TabCount\n If rbb_1.Gettabbuttonbyindex(ll_I, lr_Tab) = 1 Then\n  If lr_Tab.Enabled Then\n   lr_Tab.Enabled = False\n  Else\n   lr_Tab.Enabled = True\n  End If\n  li_return = rbb_1.SetItem(lr_Tab.itemhandle, lr_Tab)\n End If\nNext\nExample 2\nThis example sets the value of the Tag property of the button (a small button or a large\nbutton) being clicked.\n//Event ue_buttonclicked (long itemhandle)\nPowerObject lpo_Object\nRibbonSmallButtonItem lr_SmallButton\nRibbonLargeButtonItem lr_LargeButton\nInteger li_Return, li_Return2\nli_Return = rbb_1.GetItem(Itemhandle, lpo_Object)\nIf li_Return = 1 Then\n Choose Case lpo_Object.ClassName()\n  Case \"ribbonsmallbuttonitem\"\n   lr_SmallButton = lpo_Object\n   lr_SmallButton.Tag = \"SmallButton Clicked\"\n   li_Return2 = rbb_1.SetItem(lr_SmallButton)\n  Case \"ribbonlargebuttonitem\"\n   lr_LargeButton = lpo_Object\n   lr_LargeButton.Tag = \"LargeButton Clicked\"\n   li_Return2 = rbb_1.SetItem(lr_LargeButton)\n End Choose\n"}
{"page": 1429, "text": "Statements, Events, and Functions\nPage 1429\nEnd If\n2.4.741 SetJWTToken\nDescription\nSets the JWT token string to the HTTP request header which will be sent to the server in\nthe following interface: Submit, SendGetRequest, SendPostRequest, SendDeleteRequest,\nSendPatchRequest, SendPutRequest, Retrieve, and RetrieveOne. If a token has been set in the\nHTTP request header, it will replace the original token.\nApplies to\nRESTClient object\nSyntax\nobjectname.SetJWTToken(string jwtToken)\nTable 2.1266:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object in which you want to set the JWT\ntoken.\njwtToken\nA string value specifying the JWT token.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\nExample 1\nThe following code example sets the JWT token authentication.\nString ls_P028_JWTToken\nInteger li_P028_GetJWTTokenReturn\nRestClient lrc_P028\nlrc_P028 = Create RestClient\nlrc_P028.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" ) //Sets the request header\n//Gets the JWT token. The second parameter provides the value according to the\n token server request.\nli_P028_GetJWTTokenReturn=lrc_P028.GetJWTToken(\"https://demo.appeon.com/pb/jwt/\nHSExample/api/values/GetToken\", '{\"Username\":\"user1\",\"Password\":\"password1\"}',\n ls_P028_JWTToken)\nIf li_P028_GetJWTTokenReturn = 1 Then\n //Sets the JWT token\n lrc_P028.SetJwtToken( ls_P028_JWTToken)\n //Retrieves data for dw_Data\n lrc_P028.retrieve( dw_Data, \"https://demo.appeon.com/pb/jwt/HSExample/api/\ndepartment/retrieve\")\nElse\n"}
{"page": 1430, "text": "Statements, Events, and Functions\nPage 1430\n //Prints the GetJWTToken error message if any\nEnd If\nExample 2\nThe following code example sets the JWT token authentication.\nString ls_P028_JWTToken\nInteger li_P028_GetJWTTokenReturn\nJsonPackage ljpk_JWTINF\nljpk_JWTINF =Create JsonPackage\nRestClient lrc_P028\nlrc_P028 = Create RestClient\n \nlrc_P028.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" ) //Sets the request header\n//Gets the JWT token. The second parameter provides the value according to the\n token server request.\nli_P028_GetJWTTokenReturn=lrc_P028.GetJWTToken(\"https://demo.appeon.com/pb/jwt/\nHSExample/api/values/Authenticate\", '{\"Username\":\"user1\",\"Password\":\"password1\"}',\n ls_P028_JWTToken)\nIf li_P028_GetJWTTokenReturn = 1 Then\n //If the token server returns the token as well as other information, gets the\n token first and then provides it to RestClient\n //in this example, the token server returns a JSON string which contains token,\n therefore, gets the token via the following scripts\n ljpk_JWTINF.Loadstring( ls_P028_JWTToken)\n If ljpk_JWTINF.ContainsKey( \"token\" ) Then\n  ls_P028_JWTToken = ljpk_JWTINF.GetValueString( \"token\" )\n End If\n //Sets the JWT token\n lrc_P028.SetJwtToken( ls_P028_JWTToken)\n //Retrieves data for dw_Data\n lrc_P028.retrieve( dw_Data, \"https://demo.appeon.com/pb/jwt/HSExample/api/\ndepartment/retrieve\")\nElse\n //Prints the GetJWTToken error message if any\nEnd If\nSee also\nGetJWTToken\n2.4.742 SetLargeButton\nDescription\nSets the large button for the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetLargeButton ( Long ItemHandle, RibbonLargeButtonItem Item )\nTable 2.1267:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the large button on the same level that you will set.\n"}
{"page": 1431, "text": "Statements, Events, and Functions\nPage 1431\nArgument\nDescription\nItem\nA large button item you are setting.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also use the SetItem function to set the large button. Refer to SetItem for the\ndifference between SetItem and SetLargeButton.\nThe user events to be bound with the large button must be defined correctly according to the\nrequirements of RibbonLargeButtonItem. For details, see Clicked and Selected.\nExamples\nThis example inserts the \"Add\" large button and binds it with the \"Ue_LargeButtonClicked\"\nuser event, and then sets values for various properties (including Text, PictureName, Clicked,\nSelected etc.) of this large button.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_LargeButton\nRibbonLargeButtonItem lr_LargeButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_LargeButton = rbb_1.InsertLargeButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddBig!\", \"Ue_LargeButtonClicked\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_LargeButton)\nIf li_Return = 1 Then\n lr_LargeButton.Text = \"Delete\"\n lr_LargeButton.PictureName = \"DeleteBig!\"\n lr_LargeButton.Clicked = \"Ue_LargeButtonClicked2\"\n lr_LargeButton.Selected = \"Ue_LargeButtonSelected2\"\n li_Return = rbb_1.SetLargeButton (lr_LargeButton.ItemHandle, lr_LargeButton)\nEnd If\nSee also\nInsertLargeButton\nInsertLargeButtonFirst\nInsertLargeButtonLast\nDeleteLargeButton\nGetLargeButton\nGetChildItemByIndex\n2.4.743 SetLevelPictures\nDescription\nSets the picture indexes for all items at a particular level.\n"}
{"page": 1432, "text": "Statements, Events, and Functions\nPage 1432\nApplies to\nTreeView controls\nSyntax\ntreeviewname.SetLevelPictures ( level, pictureindex, selectedpictureindex,\n statepictureindex, overlaypictureindex)\nTable 2.1268:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to set the pictures for a given\nTreeView level\nlevel\nThe TreeView level for which you are setting the picture indexes\npictureindex\nAn index from the regular picture list specifying the picture to be\ndisplayed when the item is not selected\nselectedpictureindexAn index from the regular picture list specifying the picture to be\ndisplayed when the item is selected\nstatepictureindex An index from the state picture list specifying the picture to be displayed\nto the left of the regular picture\noverlaypictureindexAn index from the overlay picture list specifying the picture to be\ndisplayed on top of the regular picture\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nTo set pictures for individual items, call GetItem, set the picture properties, and call SetItem\nto copy the changes to the TreeView. You must specify a value for all four indexes. To\ndisplay nothing, specify 0.\nExamples\nThis example sets the pictures for TreeView level 3, then inserts two new TreeView items:\nlong ll_tvi, ll_child, ll_child2\nint li_pict, li_level\ntreeviewitem l_tvi\n \nli_level = 6\ntv_list.SetLevelPictures( 3, li_level, li_level, &\n      li_level, li_level)\n \nll_tvi = tv_list.FindItem(RootTreeItem! , 0)\nll_child = tv_list.InsertItemLast(ll_tvi, \"Walton\",2)\nll_child2 = tv_list.InsertItemLast(ll_child, &\n      \"Spitfire Suite\", li_level)\ntv_list.ExpandItem(ll_child)\ntv_list.SetFirstVisible(ll_child)\nSee also\n"}
{"page": 1433, "text": "Statements, Events, and Functions\nPage 1433\nAddPicture\n2.4.744 SetLibraryList\nDescription\nChanges the files in the library search path of the application at runtime.\nObsolete syntax\nYou can still use the old syntax with the name of the application object before the\nfunction call: applicationname.SetLibraryList ( filelist).\nSyntax\nSetLibraryList ( filelist )\nTable 2.1269:\nArgument\nDescription\nfilelist\nA comma-separated list of file names. Specify the full file name with its\nextension. If you do not specify a path, PowerBuilder uses the system's\nsearch path to find the file.\nReturn value\nInteger.\nReturns 1 if it succeeds. If an error occurs, it returns:\n-1 -- The application is being run from PowerBuilder, rather than from a standalone\nexecutable.\n-2 -- A currently instantiated object is in a library that is not on the new list. If any argument's\nvalue is null, SetLibraryList returns null.\nUsage\nWhen your application needs to load an object, PowerBuilder searches for the object\nfirst in the executable file and then in the dynamic libraries specified for the application.\nYou can specify a different list of library files from those specified in the executable with\nSetLibraryList.\nCalling SetLibraryList replaces the list of library files specified in the executable with a new\nlist of files. For example, you might use SetLibraryList to configure the library list for an\napplication containing many subsystems. You should always use GetLibraryList to return\nthe current library search path and then append any files you want to add to this list. You can\nthen pass the complete list in the filelist argument.\nPowerBuilder cannot check whether the libraries you specify are appropriate for the\napplication. It is up to you to make sure the libraries contain the objects that the application\nneeds.\nThe executable file is always first in the library search path. If you include it in filelist, it is\nignored.\n"}
{"page": 1434, "text": "Statements, Events, and Functions\nPage 1434\nIf you are running your application in the PowerBuilder development environment, this\nfunction has no effect.\nExamples\nThis example specifies different files in the library search path based on the selected\napplication subsystem:\nstring ls_list\nls_list = getlibrarylist ()\nCHOOSE CASE configuration\n   CASE \"Config1\"\n      SetLibraryList(ls_list + \",lib1.pbd, lib2.pbd, &\n         lib5.pbd\")\n   CASE \"Config2\"\n      SetLibraryList(ls_list + \",lib1.pbd, lib3.pbd, &\n         lib4.pbd\")\nEND CHOOSE \nSee also\nAddToLibraryList\nGetLibraryList\n2.4.745 SetMask\nDescription\nSets the edit mask and edit mask datatype for an EditMask control.\nApplies to\nEditMask controls\nSyntax\neditmaskname.SetMask ( maskdatatype, mask )\nTable 2.1270:\nArgument\nDescription\neditmaskname\nThe name of the EditMask for which you want to specify the edit mask.\nmaskdatatype\nA MaskDataType enumerated datatype indicating the datatype of the\nmask. Values are:\n\u2022 DateMask!\n\u2022 DateTimeMask!\n\u2022 DecimalMask!\n\u2022 NumericMask!\n\u2022 StringMask!\n\u2022 TimeMask!\n"}
{"page": 1435, "text": "Statements, Events, and Functions\nPage 1435\nArgument\nDescription\nmask\nA string whose value is the edit mask.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetMask\nreturns null.\nUsage\nIn an edit mask, a fixed set of characters represent a type of character that the user can enter.\nIn addition, punctuation controls the format of the entered value. Each mask datatype has its\nown set of valid characters.\nFor example, the following is a mask of type string for a telephone number. The EditMask\ncontrol displays the punctuation (the parentheses and dash). The pound signs represent the\ndigits that the user enters. The user cannot enter any characters other than digits.\n(###) ###-####\nFor help in specifying a valid mask, see the Edit Mask Style dialog box for an EditMask\ncontrol in the Window painter. A ListBox in the dialog box shows the meaning of the special\nmask characters for each datatype, as well as masks that have already been defined.\nIf you are specifying the mask for a number, the format must use U.S. notation. That is,\ncomma represents the thousands delimiter and a period represents the decimal place. At\nruntime, the locally correct symbols are displayed.\nYou cannot use SetMask to change the maskdatatype if the DropDownCalendar, Spin, or\nUseCodeTable properties of the EditMask control are set to true. If any of these properties is\nset to true, set the property value to false before calling SetMask, then reset the value to true.\nYou cannot use color for edit masks as you can for display formats.\nExamples\nThese statements set the mask for the EditMask password_mask to the mask in pword_code.\nThe mask requires the user to enter a digit followed by four characters of any type:\nstring pword_code\npword_code = \"#xxxx\"\npassword_mask.SetMask(StringMask!, pword_code)\nThis statement sets the mask for the EditMask password_mask to a 5-digit numeric mask:\npassword_mask.SetMask(NumericMask!, \"#####\")\n2.4.746 SetMasterItem\nDescription\nSets a master menu item for the application menu in the RibbonBar control.\nApplies to\nRibbonApplicationMenu control\n"}
{"page": 1436, "text": "Statements, Events, and Functions\nPage 1436\nSyntax\ncontrolname.SetMasterItem ( { Long ParentIndex, } Long Index, RibbonMenuItem Item )\nTable 2.1271:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control in which you want to\nset the master menu item.\nParentIndex\n(optional)\nThe index of the master menu item (RibbonMenuItem) whose submenu\nitem you want to set.\nIf not specified, the master menu item will be set; if specified to a valid\nvalue, the submenu item of the master menu item (whose index is\nParentIndex) will be set; if specified to an invalid value, an error would\noccur and this operation would return -1.\nIndex\nThe index for the master menu item or submenu item for which you want\nto set. If index is invalid, an error would occur and this operation would\nreturn -1.\nItem\nA RibbonMenuItem item you want to set. Only RibbonMenuItem\nwith \"Normal(0)\" or \"Separator(1)\" ItemType is supported. If\nRibbonMenuItem is with other ItemType such as \"Recent(2)\", an error\nwould occur and this operation would return -1.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nOnly the menu item with the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with\nItemType 0 or 1) can be added as a master menu item.\nThe master menu can have no more than two levels.\nThe user events to be bound with the master menu item must be defined correctly according\nto the requirements of RibbonMenuItem. For details, see Clicked and Selected.\nExamples\nThis example inserts the \"MenuItem\" master menu item and the \"SubMenuItem\" submenu\nitem and then sets values for their properties (including Text, PictureName, Clicked etc.).\nInteger li_Return\nLong ll_Index,ll_Index2\nRibbonApplicationMenu lr_AppMenu\nRibbonMenuItem lr_MenuItem1,lr_MenuItem2\nll_Index = \n lr_AppMenu.InsertMasterItemLast(\"MenuItem\",\"AddSmall!\",\"Ue_MenuItem1Clicked\")\nll_Index2 = \n lr_AppMenu.InsertMasterItemLast(ll_Index,\"SubMenuItem\",\"AddSmall!\",\"Ue_MenuItem11Clicked\")\nlr_MenuItem1.Text = \"Account\"\n"}
{"page": 1437, "text": "Statements, Events, and Functions\nPage 1437\nlr_MenuItem1.PictureName = \"AccountBig!\"\nlr_MenuItem1.Clicked = \"Ue_AccountMenuItemClicked\"\nlr_MenuItem2.Text = \"Account Settings\"\nlr_MenuItem2.PictureName = \"AccountSettingsBig!\"\nlr_MenuItem2.Clicked = \"Ue_AccountSettingsClicked\"\nli_Return = lr_AppMenu.SetMasterItem(ll_Index,lr_MenuItem1)\nli_Return = lr_AppMenu.SetMasterItem(ll_Index,ll_Index2,lr_MenuItem2)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetRecentItem\nSetRecentTitle\n2.4.747 SetMenu\nDescription\nSets a menu to the button in the RibbonBar control.\nApplies to\nRibbonApplicationButtonItem, RibbonTabButtonItem, RibbonLargeButtonItem,\nRibbonSmallButtonItem controls\nSyntax\nFor RibbonApplicationButtonItem:\ncontrolname.SetMenu ( RibbonApplicationMenu ApplicationMenu )\nFor RibbonTabButtonItem, RibbonLargeButtonItem, and RibbonSmallButtonItem:\ncontrolname.SetMenu ( RibbonMenu Menu )\n"}
{"page": 1438, "text": "Statements, Events, and Functions\nPage 1438\nTable 2.1272:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationButtonItem, RibbonTabButtonItem,\nRibbonLargeButtonItem, or RibbonSmallButtonItem control.\nApplicationMenu The RibbonApplicationMenu item you want to set.\nMenu\nThe RibbonMenu item you want to set.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nA RibbonApplicationMenu control can contain a master menu and a recent menu. The master\nmenu can have no more than two levels. The recent menu can have only one level; and can\ncontain no more than 9 items. Only the menu item with the \"Normal\" or \"Separator\" type\n(that is RibbonMenuItem with ItemType 0 or 1) can be added as a master menu item. Only\nthe menu item with the \"Recent\" type (that is RibbonMenuItem with ItemType 2) can be\nadded as a recent menu item. See InsertMasterItem and InsertRecentItem for more.\nA RibbonMenu control can contain menu items in no more than two levels. Only menu items\nwith the \"Normal\" or \"Separator\" type (that is RibbonMenuItem with ItemType 0 or 1) can be\nadded to the RibbonMenu control. See InsertItem for more.\nExample 1\nThis example sets a menu to the \"MyApp\" application button. The menu includes an\n\"Account\" master menu item and a \"RecentItem1\" recent menu item.\nInteger li_Return\nRibbonApplicationButtonItem lr_AppButton\nRibbonApplicationMenu lr_AppMenu\nlr_AppMenu.InsertMasterItemFirst (\"Account\", \"AccountBig!\",\n \"ue_AccountMenuClicked\")\nlr_AppMenu.InsertRecentItemFirst (\"RecentItem1\", \"ue_RecentMenuClicked\")\nlr_AppButton.Text = \"MyApp\"\nli_Return = lr_AppButton.SetMenu (lr_AppMenu)\nIf li_Return = 1 Then\n li_Return = rbb_1.SetApplicationButton (lr_AppButton)\nEnd If\nExample 2\nThis example sets a menu to a tab button. The menu includes an \"Add\" menu item.\nInteger li_Return\nRibbonTabButtonItem lr_TabButton\nRibbonMenu lr_Menu\nlr_Menu.InsertItemFirst (\"Add\", \"AddSmall!\", \"Ue_AddMenuClicked\")\nli_Return = lr_TabButton.SetMenu (lr_Menu)\nSee also\nGetMenu\n"}
{"page": 1439, "text": "Statements, Events, and Functions\nPage 1439\nGetMenuByButtonHandle\n2.4.748 SetMessage\nDescription\nSets an error message for an object of type Throwable.\nSyntax\nthrowableobject.SetMessage (newMessage )\nTable 2.1273:\nArgument\nDescription\nthrowableobject\nObject of type Throwable for which you want to set an error message.\nnewMessage\nString containing the message you want to set. Must be surrounded by\nquotation marks.\nReturn value\nNone\nUsage\nUse to set a customized message on a user-defined exception object. Although it is possible\nto use SetMessage to modify the preset error messages for RuntimeError objects, this is not\nrecommended.\nExamples\nThis statement is an example of a message set on a user object of type Throwable:\nMyException.SetMessage (\"MyException thrown\")\nThis example uses SetMessage in the try-catch block for a user-defined function that takes an\ninput value from one text box and outputs the arccosine for that value into another text box:\nuo_exception lu_error\nDouble ld_num\nld_num = Double (sle_1.text)\n \nTRY\nsle_2.text = string (acos (ld_num))\nCATCH (runtimeerror er)\n   lu_error = Create uo_exception\n   lu_error.SetMessage(\"Value must be between -1\" +&\n      \"and 1\")\n   Throw lu_error\nEND TRY\nSee also\nGetMessage\n2.4.749 SetMicroHelp\nDescription\n"}
{"page": 1440, "text": "Statements, Events, and Functions\nPage 1440\nSpecifies the text to be displayed in the MicroHelp box in an MDI frame window.\nApplies to\nMDI frame windows\nSyntax\nwindowname.SetMicroHelp ( string )\nTable 2.1274:\nArgument\nDescription\nwindowname\nThe name of the MDI frame window with MicroHelp for which you want\nto set the MicroHelp text\nstring\nA string whose value is the new MicroHelp text\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetMicroHelp returns null.\nUsage\nThe Tag property of a control is a useful place to store MicroHelp text. When the control\ngets the focus, you can use SetMicroHelp in the GetFocus event script to display the Tag\nproperty's text in the MicroHelp box on the window frame.\nFor menus, PowerBuilder automatically displays the MicroHelp text you have specified in\nthe Menu painter when the user selects the menu item. You can use SetMicroHelp in the\nscript for a menu item's Selected event to override the predefined MicroHelp and display\nsome other text in the MicroHelp box. SetMicroHelp does not change the predefined\nMicroHelp text.\nExamples\nThis statement changes the MicroHelp displayed in the frame of W_New to Delete selected\ntext:\nW_New.SetMicroHelp(\"Delete selected text\")\nIn this example, the string Close the Window is a tag value associated with the\nCommandButton cb_done in W_New. In the script for the GetFocus event in cb_done, this\nstatement displays Close the Window as MicroHelp in W_New when cb_done gets focus:\nW_New.SetMicroHelp(This.Tag)\n2.4.750 SetMinimized\nDescription\nSets the RibbonBar control to be minimized.\nApplies to\n"}
{"page": 1441, "text": "Statements, Events, and Functions\nPage 1441\nRibbonBar control\nSyntax\ncontrolname.SetMinimized ( Boolean Minimized )\nTable 2.1275:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nMinimized\nA boolean indicating whether to set the RibbonBar control to be\nminimized.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nWhen the RibbonBar control is minimized, only the application button title, the category title,\nand the tab header will be displayed.\nIf the HideTabHeader property is set to TRUE (which means the application button title,\ncategory title, and the tab header are invisible), the SetMinimized function will not take\neffect.\nExamples\nThis example sets the ribbon bar to be minimized.\nInteger li_Return\nli_Return = rbb_1.SetMinimized (True)\nSee also\nIsMinimized\n2.4.751 SetNewMobiLinkPassword\nDescription\nSets a new password for the current MobiLink user.\nApplies to\nMLSynchronization, MLSync controls\nSyntax\nsyncObject.SetNewMobiLinkPassword (newPW)\nTable 2.1276:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object that starts a connection to the\nsynchronization server.\n"}
{"page": 1442, "text": "Statements, Events, and Functions\nPage 1442\nArgument\nDescription\nnewPW\nA string consisting of the new password that you want to set for\nMobiLink.\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\nSetNewMobiLinkPassword uses the properties in the synchronization object to generate a\ntypical dbmlsync command line. The command line includes the -pi (ping) option as well as\nthe -mn option to set the new MobiLink password (newPW). The new password will not be\nset if any of the required properties (Datasource, Publication, MLServerVersion, or MLUser)\nare missing from the synchronization object.\nSee also\nGetCommandString\nSetParm\nSetSyncRegistryProperties\nSynchronize\n2.4.752 SetNull\nDescription\nSets a variable to null. The variable can be any datatype except for a structure or\nautoinstantiated object.\nSyntax\nSetNull ( anyvariable )\nTable 2.1277:\nArgument\nDescription\nanyvariable\nThe variable you want to set to null\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetNull\nreturns null.\nUsage\nUse SetNull to set a variable to null before writing it to the database. Note that PowerBuilder\ndoes not initialize variables to null; it initializes variables to the default initial value for the\ndatatype unless you specify a value when you declare the variable.\n"}
{"page": 1443, "text": "Statements, Events, and Functions\nPage 1443\nIf you assign a value to a variable whose datatype is Any and then set the variable to null, the\ndatatype of the null value is still the datatype of the assigned value. You cannot untype an\nAny variable with the SetNull function.\nExamples\nThis statement sets the variable Salary to null:\nSetNull(Salary)\nSee also\nIsNull\n2.4.753 SetOAuthToken\nDescription\nSets the OAuth 2.0 token string to the HTTP request header which will be sent to the server\nin the following interface: Submit, SendGetRequest, SendPostRequest, SendDeleteRequest,\nSendPatchRequest, SendPutRequest, Retrieve, and RetrieveOne. If a token has been set in the\nHTTP request header, it will replace the original token.\nApplies to\nRESTClient object\nSyntax\nobjectname.SetOAuthToken(string token)\nTable 2.1278:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object in which you want to set the OAuth\n2.0 access token.\ntoken\nA string value specifying the OAuth 2.0 access token.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\nExample\nThe following code example adds a new data record and submits it to the server.\nString ls_P020_Responsebody,ls_Token,ls_PostData\nLong ll_InsertRow\nInteger li__P020_SendReturn\nInteger li_P020_GetTokenReturn\nRestClient lrc_P020\nlrc_P020 = Create RestClient \n//Sets the token parameters\nTokenRequest ltreq_Appeon\nltreq_Appeon.tokenlocation = \"https://demo.appeon.com/pb/identityserver/connect/\ntoken\"\n"}
{"page": 1444, "text": "Statements, Events, and Functions\nPage 1444\nltreq_Appeon.method = \"post\"\nltreq_Appeon.GrantType = \"password\"\nltreq_Appeon.ClientId = \"P0VRQ-ddHn/WWd6lcCNJbaO9ny-JCNHirDJkHNgZ0-M=\"\nltreq_Appeon.ClientSecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" \nltreq_Appeon.UserName = \"TestUser\"\nltreq_Appeon.PassWord = \"TestPassword\"\n//Gets token via RESTClient\nli_P020_GetTokenReturn = lrc_P020.GetOauthtoken( ltreq_Appeon, ls_Token)\nIf li_P020_GetTokenReturn = 1 Then\n lrc_P020.SetRequestHeaders( \"Content-Type:application/\njson;charset=UTF-8~r~nAccept-Encoding:gzip\" )\n lrc_P020.SetOauthToken( ls_Token ) //Sets authentication\n //Adds a new data row\n ll_InsertRow = dw_Data.InsertRow( 0 )\n //Sets the data value\n dw_Data.SetItem(ll_InsertRow,1,0)\n dw_Data.SetItem(ll_InsertRow,2,\"TestCreate\"+String(rand(50)))\n //Once https://demo.appeon.com/PB/webapi_client/api/department/create Web service\n detects that \n //the passed-in department id is smaller than 1, it will automatically finds the\n largest ID \n //value and assigns value to it\n ls_PostData=dw_Data.Exportrowasjson( ll_InsertRow)//Exports the new data row from\n dw_Data to JSON string\n li__P020_SendReturn = lrc_P020.SendPostRequest(\"https://demo.appeon.com/PB/\nwebapi_client/api/department/create\", ls_PostData, ls_P020_Responsebody)\n  If li__P020_SendReturn <> 1 Or lrc_P020.GetResponseStatusCode() <> 201 Then\n   //Checks if any error information  \n  End If\n //Finds out if the new data record exists via https://demo.appeon.com/PB/\nwebapi_client/api/department/retrieve\n lrc_P020.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nElse\n//Gets the token failure error\nEnd If\nIf IsValid(lrc_P020) Then Destroy lrc_P020\nSee also\nGetOAuthToken\n2.4.754 SetOverlayPicture\nDescription\nPuts an image in the control's image list into an overlay image list.\nApplies to\nListView and TreeView controls\nSyntax\ncontrolname.SetOverlayPicture ( overlayindex, imageindex )\nTable 2.1279:\nArgument\nDescription\ncontrolname\nThe name of the ListView or TreeView control to which you want to add\nan overlay image.\n"}
{"page": 1445, "text": "Statements, Events, and Functions\nPage 1445\nArgument\nDescription\noverlayindex\nThe index number of the overlay picture in the overlay image list. The\noverlay image list is a 1-based array. Overlayindex must be 1 (for the first\nimage), a previously designated index (replacing an image), or 1 greater\nthan the current largest index (adding another image). SetOverlayPicture\nfails if you specify an index that creates gaps in the array.\nimageindex\nThe index number of an image in the control's main image list. For\nListViews, both the large and small pictures at that index become overlay\nimages. The image is still available for use as an item's main image.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nAn overlay picture must have the same height and width as the picture it is used to overlay.\nThe color specified in the SetPictureMask property when the picture is inserted becomes\ntransparent when the picture is used as an overlay, allowing part of the original image to be\nvisible beneath the overlay.\nThe overlay list acts as a pointer back to the source image in the regular picture lists. If you\ndelete an image that is also used in the overlay list, the displayed overlay pictures are affected\ntoo.\nExamples\nThis example designates overlay images in a ListView control. The same picture is used for\nlarge and small images:\n// Set up the overlay images\ninteger index\nindex = lv_1.AddLargePicture(\"shortcut.ico\")\nindex = lv_1.AddSmallPicture(\"shortcut.ico\")\nlv_1.SetOverlayPicture(1, index)\nindex = lv_1.AddLargePicture(\"not.ico\")\nindex = lv_1.AddSmallPicture(\"not.ico\")\nlv_1.SetOverlayPicture(2, index)\n// Assign the second overlay image to the first item\nlistviewitem lvi\ninteger i\ni = lv_1.GetItem(1, lvi)\nlvi.OverlayPictureIndex = 2\ni = lv_1.SetItem(1, lvi)\nThis example designates the first picture in the TreeView's main image list as the first overlay\npicture. The picture was added to the main image list on the TreeView's property sheet:\ntv_list.SetOverlayPicture(1, 1)\nThis code in the TreeView's Clicked event assigns the overlay image to the clicked item:\ntreeviewitem tvi\ntv_list.GetItem(handle, tvi)\ntvi.OverlayPictureIndex = 1\n"}
{"page": 1446, "text": "Statements, Events, and Functions\nPage 1446\ntv_list.SetItem(handle, tvi)\n2.4.755 SetPanel\nDescription\nSets the panel for the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetPanel (Long ItemHandle, RibbonPanelItem Item )\nTable 2.1280:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the panel on the same level that you will set the panel.\nItem\nA panel item you are setting.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also use the SetItem function to set the panel. Refer to SetItem for the difference\nbetween SetItem and SetPanel.\nExamples\nThis example inserts a panel and then sets new values for its Text and PictureName\nproperties.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel\nRibbonPanelItem lr_Panel\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel1\",\n \"AddSmall!\")\nlr_Panel.Text = \"MyPanel2\"\nlr_Panel.PictureName = \"BOMSmall!\"\nli_Return = rbb_1.SetPanel (ll_Handle_Panel, lr_Panel)\nSee also\nInsertPanel\nInsertPanelFirst\nInsertPanelLast\nDeletePanel\n"}
{"page": 1447, "text": "Statements, Events, and Functions\nPage 1447\nGetPanel\nGetChildItemByIndex\n2.4.756 SetParagraphSetting\nDescription\nSets the size of the indentation, left margin, or right margin of the paragraph containing the\ninsertion point in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtecontrol.SetParagraphSetting ( whichsetting, value )\nTable 2.1281:\nArgument\nDescription\nrtecontrol\nThe name of the control for which you want paragraph information.\nwhichsetting\nA value of the ParagraphSetting enumerated datatype specifying the\nsetting you want to change. Values are:\n\u2022 Indent! -- Returns the indentation of the paragraph\n\u2022 LeftMargin! -- Returns the left margin of the paragraph\n\u2022 RightMargin! -- Returns the right margin of the paragraph\nvalue\nA long whose value is the width of the margin or indent in units of\n1000ths of an inch. For example, a value of 500 specifies a width of half\nan inch.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument is null, it returns null.\nUsage\nEach paragraph has indentation, left margin, and right margin settings. To set all three for the\ncurrent paragraph, call SetParagraphSetting three times.\nExamples\nThis example sets the indentation setting for the current paragraph to a quarter inch:\nll_indent = rte_1.SetParagraphSetting(Indent!, 250)\nThis example sets the left margin for the current paragraph to an inch:\nrte_1.SetParagraphSetting(LeftMargin!, 1000)\nSee also\n"}
{"page": 1448, "text": "Statements, Events, and Functions\nPage 1448\nGetParagraphSetting\nSetAlignment\nSetSpacing\nSetTextColor\nSetTextStyle\n2.4.757 SetParm\nDescription\nSets the parameters to send to the MobiLink synchronization server.\nApplies to\nMLSynchronization, MLSync controls\nSyntax\nSyncObject.SetParm (syncparm )\nTable 2.1282:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object.\nsyncparm\nA structure of type SyncParm containing property values that can be set\nas synchronization parameters.\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nExamples\nThe code fragment below creates an instance of an MLSync object and programmatically\npopulates all of the necessary properties -- as well as some optional properties -- using an\ninstance of the system SyncParm structure. Then it calls the Synchronize function to start the\ndatabase synchronization.\nSyncParm         Parms\nMLSync         mySync\nLong         rc\n \nmySync = CREATE MLSync\nmySync.MLServerVersion = 9      // required property\nmySync.Publication = 'salesapi   '// required property\nmySync.UseLogFile = TRUE      // optional\nmySync.LogFileName = \"C:\\temp\\sync.log   \"// optional\nmySync.Datasource = 'salesdb_remote   '// required\nParms.MLUser = '50         '// required\nParms.MLPass = 'xyz123         '// required\n//The following values are required if they are not \n//set by the DSN\nParms.DBUser = 'dba      '\nParms.DBPass = 'sql      '\n"}
{"page": 1449, "text": "Statements, Events, and Functions\nPage 1449\n \n//  Apply the property values to the sync object\nmySync.SetParm(Parms)   \n//  Launch the synchronization process\nrc = mySync.Synchronize()   \ndestroy mySync\nMaintaining property settings in the MLSync object\nNormally when you call SetParm(SyncParm) from an MLSync object, you\nautomatically override any authentication values (AuthenticateParms, Datasource,\nDBUser, DBPass, EncryptionKey, MLUser, and MLPass) that you set for properties\nof the MLSync object -- even when the value of a particular SyncParm property\nis an empty string. However, if you call SetNull to set a particular property of\nthe SyncParm object to NULL before you call SetParm, the property value in the\nMLSync object will be used instead.\nSee also\nGetCommandString\nSetNewMobiLinkPassword\nSetSyncRegistryProperties\n2.4.758 SetPicture\nDescription\nAssigns an image stored in a blob to be the image in a Picture control.\nApplies to\nPicture controls\nSyntax\npicturecontrol.SetPicture ( bimage )\nTable 2.1283:\nArgument\nDescription\npicturecontrol\nThe name of a Picture control in which you want to set the bitmap.\nbimage\nA blob containing the new bitmap. bimage must be a valid picture in\nbitmap (BMP), Compuserve Graphics Interchange Format (GIF), Joint\nPhotographic Experts Group (JPEG), run-length encoded (RLE), or\nWindows Metafile (WMF).\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetPicture\nreturns null.\nUsage\n"}
{"page": 1450, "text": "Statements, Events, and Functions\nPage 1450\nIf you use FileRead to get the bitmap image from a file, remember that the FileRead function\ncan read a maximum of 32,765 bytes at a time. To check the length of a file, call FileLength.\nIf the file is over 32,765 bytes, you can call FileRead more than once and concatenate the\nreturn values, or you can call FileReadEx.\nFor Unicode files and files that you convert to Unicode, you must make sure that the file\nlength value is an even number. Otherwise FileRead or FileReadEx cannot parse the entire\nfile.\nExamples\nThese statements allow the user to select a file and then open the file and set the Picture\ncontrol p_1 to the bitmap in the selected file:\ninteger fh, ret\nblob Emp_pic\nstring txtname, named\nstring defext = \"BMP\"\nstring Filter = \"bitmap Files (*.bmp), *.bmp\"\nret = GetFileOpenName(\"Open Bitmap\", txtname, &\n      named, defext, filter)\nIF ret = 1 THEN\n      fh = FileOpen(txtname, StreamMode!)\n      IF fh <> -1 THEN\n         FileRead(fh, Emp_pic)\n         FileClose(fh)\n         p_1.SetPicture(Emp_pic)\n      END IF\nEND IF\n2.4.759 SetPointer\nSets the mouse pointer to a specified shape.\nTable 2.1284:\nTo\nUse\nSpecifies a system-defined designated shape\nSyntax 1\nSpecifies a file-defined designated shape\nSyntax 2\n2.4.759.1 Syntax 1: System-defined shape\nDescription\nSets the mouse pointer to a specified system-defined shape.\nSyntax\nSetPointer ( type )\nTable 2.1285:\nArgument\nDescription\ntype\nA value of the Pointer enumerated datatype indicating the type of pointer\nyou want. Values are:\nAppStarting!\n"}
{"page": 1451, "text": "Statements, Events, and Functions\nPage 1451\nArgument\nDescription\nArrow!\nCross!\nBeam!\nHelp!\nHourGlass!\nHyperlink!\nIcon!\nNone!\nSize!\nSizeNS!\nSizeNESW!\nSizeWE!\nSizeNWSE!\nUpArrow!\nReturn value\nPointer. Returns the enumerated type of the pointer it replaced so the script can restore it, if\nnecessary. If type is null, SetPointer returns null.\nUsage\nUse SetPointer to display an hourglass at the beginning of a script when the script will take\na long time to execute. The pointer remains set until you change it again in the script or the\nscript terminates.\nRestoring the arrow pointer\nThe pointer automatically changes back to an arrow when the script finishes\nexecuting. You do not have to change it back to an arrow.\nIn PowerBuilder's painters, you can specify the pointer shape that PowerBuilder displays\nwhen the user moves the pointer over a window, a control, or specific parts of a DataWindow\nobject. The available shapes include the stock pointers listed above, as well as any custom\ncursor files you have.\nExamples\nThis statement sets the pointer to the hourglass shape:\nSetPointer(HourGlass!)\nThis example saves the old pointer and restores it when a long activity is completed:\npointer oldpointer // Declares a pointer variable\noldpointer = SetPointer(HourGlass!)\n... // Performs some long activity\n"}
{"page": 1452, "text": "Statements, Events, and Functions\nPage 1452\nSetPointer(oldpointer)\n2.4.759.2 Syntax 2: File-defined shape\nDescription\nSets the mouse pointer to a specified system-defined shape.\nSyntax\nSetPointer ( shape  )\nTable 2.1286:\nArgument\nDescription\nshape\nA string reference to a CUR file specifying the pointer type that you want\nto use.\nReturn value\nPointer. Returns an enumerated type for the pointer. However, this value should be ignored\nwhen you set the pointer with a shape from a CUR file. If shape is null, SetPointer returns\nnull.\n2.4.760 SetPosition\nSpecifies the front-to-back position of a control in a window, a window, or an object within a\nDataWindow.\nTable 2.1287:\nTo\nUse\nSpecify the front-to-back position of a control in a window, or specify\nthat a window should always display on top of other windows\nSyntax 1\nMove an object in a DataWindow to another band or to specify its front-\nto-back position within a band\nSyntax 2\n2.4.760.1 Syntax 1: For positioning windows and controls in windows\nDescription\nFor controls in a window, specifies the position of a control in the front-to-back order within\na window. For a window, specifies whether it always displays on top of other open windows.\nApplies to\nA control within a window or a window\nSyntax\nobjectname.SetPosition ( position {, precedingobject } )\nTable 2.1288:\nArgument\nDescription\nobjectname\nThe name of a control for which you want to specify a location in the\nfront-to-back order within the window, or the name of a window for\n"}
{"page": 1453, "text": "Statements, Events, and Functions\nPage 1453\nArgument\nDescription\nwhich you want to specify whether it always displays on top. Objectname\ncannot be a child window or a sheet.\nposition\nA SetPosType enumerated datatype. The values you can specify depend\non whether objectname is a control or a window.\nFor controls, values are:\n\u2022 Behind! -- Position objectname behind precedingobject in the order\n\u2022 ToTop! -- Position objectname on top of all other controls\n\u2022 ToBottom! -- Position objectname behind all other controls\nFor windows, values are:\n\u2022 TopMost! -- Always display objectname on top of all other open\nwindows\n\u2022 NoTopMost! -- Do not always display objectname on top of all other\nopen windows\nprecedingobject\n(optional)\nThe name of the object you want to position objectname behind.\nPrecedingobject is required if position is Behind!.\nReturn value\nInteger.\nReturns 1 when it succeeds and -1 if an error occurs. If any argument's value is null,\nSetPosition returns null.\nUsage\nThe front-to-back order for controls determines which control covers another when they\noverlap. If a control completely covers another control, the control that is in back becomes\ninaccessible to the user.\nWhen you specify TopMost! for more than one window, the most recently executed\nSetPosition function controls which window displays on top.\nExamples\nThis statement positions cb_two on top:\ncb_two.SetPosition(ToTop!)\nThis statement positions cb_two behind cb_three:\ncb_two.SetPosition(Behind!, cb_three)\nThis statement makes the window w_signon the topmost window:\nw_signon.SetPosition(TopMost!)\nThis statement makes the window w_signon no longer necessarily the topmost window:\n"}
{"page": 1454, "text": "Statements, Events, and Functions\nPage 1454\nw_signon.SetPosition(NoTopMost!)\n2.4.760.2 Syntax 2: For positioning objects within a DataWindow\nDescription\nMoves an object within the DataWindow to another band or changes the front-to-back order\nof objects within a band.\nApplies to\nDataWindow controls and DataStores\nSyntax\ndwcontrol.SetPosition ( objectname, band, bringtofront )\nTable 2.1289:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control or DataStore containing the object.\nobjectname\nThe name of the object within the DataWindow that you want to move.\nYou assign names to the DataWindow objects in the DataWindow\npainter.\nband\nThe name of the band or layer in which you want to position objectname.\nLayer names are background and foreground.\nBand names are detail, header, footer, summary, header.#, and trailer.#.\n# is the group level number. Enter the empty string (\"\") if you do not\nwant to change the band\nbringtofront\nA boolean indicating whether you want to bring objectname to the front\nwithin the band:\n\u2022 TRUE -- Bring it to the front\n\u2022 FALSE -- Do not bring it to the front\nReturn value\nInteger.\nReturns 1 when it succeeds and -1 if an error occurs. If any argument's value is null,\nSetPosition returns null.\nExamples\nThis statement moves oval_red in dw_rpt to the header and brings it to the front:\ndw_rpt.SetPosition(\"oval_red\", \"header\", TRUE)\nThis statement does not change the position of oval_red , but does bring it to the front:\ndw_rpt.SetPosition(\"oval_red\", \"\", TRUE)\nThis statement moves oval_red to the footer but does not bring it to the front:\n"}
{"page": 1455, "text": "Statements, Events, and Functions\nPage 1455\ndw_rpt.SetPosition(\"oval_red\", \"footer\", FALSE)\n2.4.761 SetProfileString\nDescription\nWrites a value in a profile file for a PowerBuilder application.\nSyntax\nSetProfileString ( filename, section, key, value )\nTable 2.1290:\nArgument\nDescription\nfilename\nA string whose value is the name of the profile file. If you do not include\nthe full path in filename, PowerBuilder searches the DOS path for\nfilename.\nsection\nA string whose value is the name of a group of related values in the\nprofile file. If section does not exist in the file, PowerBuilder adds it.\nkey\nA string whose value is the key in section for which you want to specify a\nvalue. If key does not exist in section, PowerBuilder adds it.\nvalue\nA string whose value is the value you want to specify for key.\nReturn value\nInteger.\nReturns 1 when it succeeds and -1 if it fails because filename is not found or cannot be\naccessed. If any argument's value is null, SetProfileString returns null.\nUsage\nA profile file consists of section labels, which are enclosed in square brackets, and keys,\nwhich are followed by an equal sign and a value. By changing the values assigned to the\nkeys, you can specify custom settings for each installation of your application. When you are\nplanning your own profile file, you select the section and key names and determine how the\nvalues are used.\nFor example, a profile file might contain information about the user. In the sample below,\nUser Info is the section name and the other values are the keys. There is no space before and\nafter the equal sign used in the keys or in the section label (if you use a section name such as\nSection=1):\n[User Info]\nName=\"James Smith\"\nJobTitle=\"Window Washer\"\nSecurityClearance=9\nPassword=\nCall SetProfileString to store configuration information, supplied by you or the user, in a\nprofile file. You can call the functions ProfileInt and ProfileString to use that information to\ncustomize your PowerBuilder application at runtime.\n"}
{"page": 1456, "text": "Statements, Events, and Functions\nPage 1456\nProfileInt, ProfileString, and SetProfileString can read or write to files with ANSI or UTF16-\nLE encoding on Windows systems, and ANSI or UTF16-BE encoding on UNIX systems.\nAccessing the profile file\nSetProfileString uses profile calls to write data to the profile file. Consequently it does not\ncontrol when the profile file is written and closed. If you try to read data from the profile file\nimmediately after calling SetProfileString, the file may still be open and you will receive\nincomplete or incorrect data.\nTo avoid this problem, you can use the PowerScript FileOpen, FileWrite, and FileClose\nfunctions to write data to the profile file instead of using SetProfileString. Or you can add\nsome additional processing after the SetProfileString call so that the profile calls have time to\ncomplete before you try to read from the profile file.\nWindows registry\nSetProfileString can also be used to obtain configuration settings from the Windows\nsystem registry. For information on how to use the system registry, see the\ndiscussion of initialization files and the Windows registry in Section 8.4, \u201cManaging\nInitialization Files and the Windows Registry\u201d in Application Techniques.\nExamples\nThis statement sets the keyword Title in section Position of file C:\\PROFILE.INI to the string\nMGR:\nSetProfileString(\"C:\\PROFILE.INI\", &\n      \"Position\", \"Title\", \"MGR\")\nSee also\nProfileInt\nProfileString\n2.4.762 SetRange\nDescription\nSets a duration for a progress bar control or sets the start and end position for a trackbar\ncontrol.\nApplies to\nProgress bar controls\nSyntax\ncontrolname.SetRange ( startpos, endpos )\nTable 2.1291:\nArgument\nDescription\ncontrolname\nThe name of the progress bar or trackbar\nstartpos\nInteger indicating the initial position of the range\n"}
{"page": 1457, "text": "Statements, Events, and Functions\nPage 1457\nArgument\nDescription\nendpos\nInteger indicating the terminal position of the range\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if there is an error.\nUsage\nThe default range for the progress bar controls is 0 to 100.\nExamples\nThis statement sets a range of 1 to 10 for a progress bar control:\nHProgressBar.SetRange ( 1, 10 )\nSee also\nOffsetPos\nSelectionRange\nStepIt\n2.4.763 SetRecentItem\nDescription\nSets a recent menu item for the application menu in the RibbonBar control.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.SetRecentItem ( Long Index, RibbonMenuItem Item )\nTable 2.1292:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control in which you want to\nset the recent menu item.\nIndex\nThe index of the recent menu item for which you want to set. If index is\ninvalid, an error would occur and this operation would return -1.\nItem\nA RibbonMenuItem item you want to set. Only RibbonMenuItem with\n\"Recent(2)\" ItemType is supported. If RibbonMenuItem is with other\nItemType such as \"Normal(0)\" or \"Separator(1)\", an error would occur\nand this operation would return -1.\nReturn value\nInteger.\n"}
{"page": 1458, "text": "Statements, Events, and Functions\nPage 1458\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nOnly the menu item with the \"Recent\" type (that is RibbonMenuItem with ItemType 2) can\nbe added as a recent menu item.\nThe recent menu can have only one level; and can contain no more than 9 items.\nThe user events to be bound with the recent menu item must be defined correctly according to\nthe requirements of RibbonMenuItem. For details, see Clicked and Selected.\nExamples\nThis example inserts the \"RecentItem1\" recent menu item and binds it with the\n\"Ue_RecentItem1Clicked\" user event, and then changes the text of this item to\n\"RecentItem2\" and the bound user event to \"Ue_RecentItem2Clicked\".\nInteger li_Return\nLong ll_Index\nRibbonApplicationMenu lr_AppMenu\nRibbonMenuItem lr_MenuItem\nll_Index = lr_AppMenu.InsertRecentItemFirst(\"RecentItem1\", \"Ue_RecentItem1Clicked\")\nlr_MenuItem.ItemType = 2\nlr_MenuItem.Text = \"RecentItem2\"\nlr_MenuItem.Clicked = \"Ue_RecentItem2Clicked\"\nli_Return = lr_AppMenu.SetRecentItem(ll_Index, lr_MenuItem)\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentTitle\n"}
{"page": 1459, "text": "Statements, Events, and Functions\nPage 1459\n2.4.764 SetRecentTitle\nDescription\nSets the title for the recent menu list in the application menu. The title will be displayed on\ntop of the recent menu list.\nApplies to\nRibbonApplicationMenu control\nSyntax\ncontrolname.SetRecentTitle ( String Title )\nTable 2.1293:\nArgument\nDescription\ncontrolname\nThe name of the RibbonApplicationMenu control in which you want to\nset the title of the recent menu list.\nTitle\nTitle of the recent menu list. It will be displayed on top of the recent\nmenu list.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nExamples\nThis example sets the title of the recent menu list to \"Recently Opened Windows\".\nLong li_Return\nRibbonApplicationMenu lr_AppMenu\nli_Return = lr_AppMenu.SetRecentTitle (\"Recently Opened Windows\")\nSee also\nAddMasterSeparatorItem\nClearRecentItems\nDeleteMasterItem\nDeleteRecentItem\nGetMasterItem\nGetMasterItemCount\nGetRecentItem\nGetRecentItemCount\nGetRecentTitle\nInsertMasterItem\nInsertMasterItemFirst\n"}
{"page": 1460, "text": "Statements, Events, and Functions\nPage 1460\nInsertMasterItemLast\nInsertRecentItem\nInsertRecentItemFirst\nInsertRecentItemLast\nSetMasterItem\nSetRecentItem\n2.4.765 SetRecordSet\nDescription\nSets an ADOResultSet object to obtain its data and metadata from a passed ADO Recordset.\nApplies to\nADOResultSet objects\nSyntax\nadoresultset.SetRecordSet ( adorecordsetobject )\nTable 2.1294:\nArgument\nDescription\nadoresultset\nAn ADOResultSet object into which the function places the passed ADO\nRecordset.\nadorecordsetobjectAn OLEObject object that contains an ADO Recordset. Passing an\nOLEObject that does not contain an ADO Recordset generates an error.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nUse the SetRecordSet function to populate an ADOResultSet object with data passed in\nan OLEObject that contains an ADO Recordset. Record sets are returned from COM+\ncomponents as ADO Recordsets.\nExamples\nThe following example connects to a COM+ component and calls a method on the\ncomponent that returns an ADO Recordset to an OLEObject object. Then it creates an\nADOResultSet object and populates it with data from the OLEObject using SetRecordSet:\nOLEObject loo_mycomponent\nOLEObject loo_ADOrecordset\nADOresultset lrs_ADOresultset\ninteger li_rc\n \nloo_mycomponent = CREATE OLEObject\nli_rc = loo_mycomponent.ConnectToNewObject(\"PB.Test\")\n"}
{"page": 1461, "text": "Statements, Events, and Functions\nPage 1461\nIF li_rc <> 0 THEN\n      MessageBox(\"Connect Failed\", string(li_rc) )\n      RETURN\nEND IF\n \n// Use an OLEObject to hold ADO Recordset\n// returned from method on COM+ component\nloo_ADOrecordset = loo_mycomponent.GetTestResult()\n \n// Create an ADOResultSet and get its data\n// from OLEObject holding passed ADO Recordset\nlrs_ADOresultset = CREATE ADOResultSet\nlrs_ADOresultset.SetRecordSet(loo_ADOrecordset)\n \nSee also\nCreateFrom method for DataWindows in Section 9.15, \u201cCreateFrom\u201d in DataWindow\nReference.\nGenerateResultSet method for DataWindows in Section 9.42, \u201cGenerateResultSet\u201d in\nDataWindow Reference.\nGetRecordSet\nSetResultSet\n2.4.766 SetRedraw\nDescription\nControls the automatic redrawing of an object or control after each change to its properties.\nApplies to\nAny object except a Menu\nSyntax\nobjectname.SetRedraw ( boolean )\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If boolean is null, SetRedraw returns null.\nUsage\nBy default, PowerBuilder redraws a control after each change to properties that affect\nappearance. Use SetRedraw to turn off redrawing temporarily in order to avoid flicker and\nreduce redrawing time when you are making several changes to the properties of an object or\ncontrol. If the window is not visible, SetRedraw fails.\nCaution\nIf you turn redraw off, you must turn it on again. Otherwise, problems may result. In\naddition, if redraw is off and you change the Visible or Enabled property of an object\nin the window, the tabbing order may be affected.\nExamples\n"}
{"page": 1462, "text": "Statements, Events, and Functions\nPage 1462\nThis statement turns off redraw for lb_Location:\nlb_Location.SetRedraw(FALSE)\nIf lb_Location is sorted (lb_Location.Sorted = TRUE), these statements use SetRedraw to\navoid sorting and redrawing the list of lb_Location until all the new items have been added:\nlb_Location.SetRedraw(FALSE)\nlb_Location.AddItem(\"Atlanta\")\nlb_Location.AddItem(\"Boston\")\nlb_Location.AddItem(\"Washington\")\nlb_Location.SetRedraw(TRUE)\n2.4.767 SetRemote\nAsks a DDE server application to accept data and store it in the specified location. There\nare two ways of calling SetRemote, depending on the type of DDE connection you have\nestablished.\nTable 2.1295:\nTo\nUse\nMake a single DDE request of a server application (a cold link)\nSyntax 1\nMake a DDE request of a server application when you have established a\nwarm link by opening a channel\nSyntax 2\n2.4.767.1 Syntax 1: For single DDE requests\nDescription\nAsks a DDE server application to accept data to be stored in the specified location without\nrequiring an open channel. This syntax is appropriate when you will make only one or two\nrequests of the server.\nSyntax\nSetRemote ( location, value, applname, topicname {, bAnsi} )\nTable 2.1296:\nArgument\nDescription\nlocation\nA string whose value is the location of the data in the server application\nthat will accept the data. The format of location depends on the\napplication that will receive the request.\nvalue\nA string whose value you want to send to the remote application.\napplname\nA string whose value is the DDE name of the server application.\ntopicname\nA string identifying the data or the instance of the application that will\naccept the data (for example, in Microsoft Excel, the topic name could be\nthe name of an open spreadsheet).\nbAnsi\n(optional)\nA boolean identifying whether the string to send to the DDE server is\nin ANSI format. If bAnsi is NULL, false, or empty, PowerBuilder will\n"}
{"page": 1463, "text": "Statements, Events, and Functions\nPage 1463\nArgument\nDescription\nfirst try to send the data in a UNICODE formatted string. If bAnsi is true,\nPowerBuilder will try to send the data in an ANSI formatted string.\nReturn value\nInteger.\nReturns 1 if it succeeds and a negative integer if an error occurs. Values are:\n-1 -- Link was not started\n-2 -- Request denied\nIf any argument's value is null, SetRemote returns null.\nUsage\nWhen using DDE, your PowerBuilder application must have an open window, which will be\nthe client window. For this syntax, the active window is the DDE client window.\nFor more information about DDE channels and warm and cold links, see the ExecRemote\nfunction.\nExamples\nThis statement asks Microsoft Excel to set the value of the data in row 5, column 7 of a\nworksheet called SALES.XLS to 4500:\nSetRemote(\"R5C7\", \"4500\", \"Excel\", \"SALES.XLS\")\nSee also\nExecRemote\nGetRemote\nOpenChannel\n2.4.767.2 Syntax 2: For DDE requests via an open channel\nDescription\nAsks a DDE server application to accept data to be stored in the specified location when you\nhave already established a warm link by opening a channel to the server. A warm link, with\nan open channel, is more efficient when you intend to make several DDE requests.\nSyntax\nSetRemote ( location, value, handle {, windowhandle } {, bAnsi})\nTable 2.1297:\nArgument\nDescription\nlocation\nA string whose value is the location of the data in the server application\nthat will accept the data. The format of location depends on the\napplication that will receive the request.\n"}
{"page": 1464, "text": "Statements, Events, and Functions\nPage 1464\nArgument\nDescription\nvalue\nA string whose value you want to send to the remote application.\nhandle\nA long that identifies the channel to the DDE server application. Handle\nis the value returned by OpenChannel, which you call to open a DDE\nchannel.\nwindowhandle\n(optional)\nThe handle to the window that is acting as the DDE client.\nbAnsi\n(optional)\nA boolean identifying whether the string to send to the DDE server is\nin ANSI format. If bAnsi is NULL, false, or empty, PowerBuilder will\nfirst try to send the data in a UNICODE formatted string. If bAnsi is true,\nPowerBuilder will try to send the data in an ANSI formatted string.\nReturn value\nInteger.\nReturns 1 if it succeeds and a negative integer if an error occurs. Values are:\n-1 -- Link was not started\n-2 -- Request denied\n-9 -- Handle is null\nUsage\nWhen using DDE, your PowerBuilder application must have an open window, which will\nbe the client window. For this syntax, you can specify a client window other than the active\nwindow with the windowhandle argument.\nBefore using this syntax of SetRemote, call OpenChannel to establish a DDE channel.\nFor more information about DDE channels and warm and cold links, see the ExecRemote\nfunction.\nExamples\nThis example opens a channel to a Microsoft Excel worksheet and asks it to set the value of\nthe data in row 5 column 7 to 4500:\nlong handle\nhandle = OpenChannel(\"Excel\", \"REGION.XLS\")\nSetRemote(\"R5C7\", \"4500\", handle)\nSee also\nExecRemote\nGetRemote\nOpenChannel\n2.4.768 SetRequestHeader\nDescription\n"}
{"page": 1465, "text": "Statements, Events, and Functions\nPage 1465\nSets the request header.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.SetRequestHeader ( string headerName, string headerValue{, Boolean\n replace } )\nTable 2.1298:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object in which you want to\nset the request header.\nheaderName\nA string whose value is the header name.\nheaderValue\nA string whose value is the header value.\nreplace\n(optional)\nA boolean determines whether to replace the current existing request\nvalue if the same header name already exists.\n\u2022 TRUE -- to replace the value in the current existing request header if\nthe same header name already exists.\n\u2022 FALSE -- to add the value (with a \u201c,\u201d) to the current existing request\nheader if the same header name already exists. The default value is\nFALSE.\nNote: use this argument cautiously (TRUE is recommended) when you\nspecify the charset in the \"Content-Type\" header, because no more than\none charset is allowed.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThis example constructs a GET request which supports all header settings:\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nlnv_HttpClient.SetRequestHeader(\"Accept\", \"*/*\")\nlnv_HttpClient.SetRequestHeader(\"Accept-Encoding\", \"gzip\")\nlnv_HttpClient.SetRequestHeader(\"Accept-Language\", \"en\")\nlnv_HttpClient.SetRequestHeader(\"Connection\", \"keep-alive\")\nlnv_HttpClient.SetRequestHeader(\"User-Agent\", \"Chrome/60.0.3112.113\")\nlnv_HttpClient.SetRequestHeader(\"Cache-Control\", \"no-cache\")\nSee also\nClearRequestHeaders\n"}
{"page": 1466, "text": "Statements, Events, and Functions\nPage 1466\nGetRequestHeader\nGetRequestHeaders\nSetRequestHeaders\n2.4.769 SetRequestHeaders\nDescription\nSets all of the request headers.\nApplies to\nHTTPClient and RestClient objects\nSyntax\nobjectname.SetRequestHeaders ( headers )\nTable 2.1299:\nArgument\nDescription\nobjectname\nThe name of the HTTPClient or RestClient object in which you want to\nset the request header\nheaders\nA string whose value is the information of all of the headers\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nInteger li_rc\nHttpClient lnv_HttpClient\nlnv_HttpClient = Create HttpClient\nli_rc = lnv_HttpClient.SetRequestHeaders(\"content-type:application/json;\n charset=UTF-8~r~nCache-Control:no-cache\")\nSee also\nClearRequestHeaders\nGetRequestHeader\nGetRequestHeaders\nSetRequestHeader\n2.4.770 SetResultSet\nDescription\nPopulates a new ADOResultSet object with data passed in a ResultSet object.\n"}
{"page": 1467, "text": "Statements, Events, and Functions\nPage 1467\nApplies to\nADOResultSet objects\nSyntax\nadoresultset.SetResultSet ( resultsetobject )\nTable 2.1300:\nArgument\nDescription\nadoresultset\nAn ADOResultSet object into which the function places the passed result\nset as an ADO Recordset\nresultsetobject\nA ResultSet object that contains result set data\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nUse SetResultSet when you want to create an ADOResultSet object and populate it with data\nfrom a ResultSet object. The ResultSet object can be generated from a DataStore object using\nthe GenerateResultSet function.\nAfter you create the ADOResultSet object using SetResultSet, you can use the GetRecordSet\nfunction to return the ADO result set in an ADO Recordset object of type OLEObject that\nyou can use as a native ADO Recordset object in PowerScript.\nExamples\nSee GetRecordSet.\nSee also\nGenerateResultSet method for DataWindows in Section 9.42, \u201cGenerateResultSet\u201d in\nDataWindow Reference.\nGetRecordSet\nSetRecordSet\n2.4.771 SetSelectedDate\nDescription\nSelects a specified date.\nApplies to\nMonthCalendar control\nSyntax\ncontrolname.SetSelectedDate ( d )\n"}
{"page": 1468, "text": "Statements, Events, and Functions\nPage 1468\nTable 2.1301:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control for which you want to set the\nselected date\nd\nA date value to be set as the date selected\nReturn value\nInteger.\nReturns 0 for success and one of the following negative values otherwise:\n-1 -- Invalid arguments\n-2 -- Unknown failure\nUsage\nUse the SetSelectedDate function to select a single date. SetSelectedDate returns -1 if you\ntry to specify a date that is outside the range of minimum and maximum dates specified with\nSetDateLimits.\nSetSelectedDate and SetSelectedRange trigger a DateChanged event. You should not call\neither method in a DateChanged event, particularly using the Post method.\nExamples\nThis example sets the selected date to a date passed into a function:\n// function argument seldate\ninteger li_return\nli_return = mc_1.SetSelectedDate(seldate)\nSee also\nGetSelectedDate\nSetDateLimits\n2.4.772 SetSelectedRange\nDescription\nSets the range of selected dates.\nApplies to\nMonthCalendar control\nSyntax\ncontrolname.SetSelectedRange ( start, end )\nTable 2.1302:\nArgument\nDescription\ncontrolname\nThe name of the MonthCalendar control for which you want to set the\nselected range\n"}
{"page": 1469, "text": "Statements, Events, and Functions\nPage 1469\nArgument\nDescription\nstart\nA date value to be set as the earliest date selected\nend\nA date value to be set as the latest date selected\nReturn value\nInteger.\nReturns 0 for success and one of the following negative values otherwise:\n-1 -- Invalid arguments\n-2 -- Unknown failure\nUsage\nUse the SetSelectedRange function to select a range of consecutive dates.\nSetSelectedRange uses the start date as the end date and vice versa if you specify an end date\nthat is earlier than the start date. You must set the MaxSelectedCount property to a value\nlarge enough to support the range before calling SetSelectedRange. SetSelectedRange returns\n-1 if the dates you specify are outside the range of minimum and maximum dates specified\nwith SetDateLimits, or if the range exceeds MaxSelectedCount. If the start and end dates are\nthe same, a single date is selected.\nIf the user scrolls the calendar with the navigation buttons when a date range is selected, the\ndate range changes as the calendar scrolls.\nSetSelectedDate and SetSelectedRange trigger a DateChanged event. You should not call\neither method in a DateChanged event, particularly using the Post method.\nExamples\nThis example sets the start date of the selected range to startdate and the end date to enddate:\ninteger li_return\nDate startdate, enddate\nstartdate = Today()\nenddate = Date(\"12-31-2007\")\nli_return = mc_1.SetSelectedRange(startdate, enddate)\nSee also\nGetSelectedRange\nSetDateLimits\n2.4.773 SetSeriesLabelling\nDescription\nSet the series label for a DirectX 3D graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\n"}
{"page": 1470, "text": "Statements, Events, and Functions\nPage 1470\ncontrolname.SetSeriesLabelling ({graphcontrol, } series, value )\nTable 2.1303:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set data, or the name of the\nDataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control.\nseries\nThe string that names the series in which you want to change the series\nlabel setting.\nvalue\nIndicates whether to label the series with its values.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesLabelling returns null.\nUsage\nSetSeriesLabelling is used to indicate whether or not to label the series with the data numbers\nfor DirectX 3D Area, Bar, Col, or Line graphs. You cannot use this method with DirectX 3D\nPie graphs.\nExamples\nThese statements obtain the series and data point of graph gr_1 in the DataWindow control\ndw_employee.\ninteger SeriesNbr, ItemNbr\nstring ls_SeriesName\ngrObjectType clickedtype\n \n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", & \n      SeriesNbr, ItemNbr)\n \n//Get the name of series\nls_SeriesName = dw_employee.SeriesName(\"gr_1\", & \n      SeriesNbr)\n \n// Set Series label\ndw_employee.SetSeriesLabelling(\"gr_1\", & \n      ls_SeriesName, true)\nThese statements obtain the series and data point of graph gr_1.\ninteger SeriesNbr, ItemNbr\nstring ls_SeriesName\ngrObjectType clickedtype\n \nclickedtype = gr_1.ObjectAtPointer(SeriesNbr, &\n      ItemNbr)\n \nls_SeriesName = gr_1.SeriesName(SeriesNbr)\n \n"}
{"page": 1471, "text": "Statements, Events, and Functions\nPage 1471\ngr_1.SetSeriesLabelling(ls_SeriesName, true)\nSee also\nGetDataLabelling\nGetSeriesLabelling\nSetDataLabelling\n2.4.774 SetSeriesStyle\nSpecifies the appearance of a series in a graph. There are several syntaxes, depending on\nwhat settings you want to change.\nTable 2.1304:\nTo\nUse\nSet the series' colors\nSyntax 1\nSet the line style and width\nSyntax 2\nSet the fill pattern or symbol for the series\nSyntax 3\nSpecify that the series is an overlay\nSyntax 4\n2.4.774.1 Syntax 1: For setting a series' colors\nDescription\nSpecifies the colors of a series in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SetSeriesStyle ( { graphcontrol, } seriesname, colortype, color )\nTable 2.1305:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set the color of a series, or\nthe name of the DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nfor which you want to set the color of a series.\nseriesname\nA string whose value is the name of the series for which you want to set\nthe color.\ncolortype\nA value of the grColorType enumerated datatype specifying the item for\nwhich you want to set the color. Values are:\n\u2022 Foreground! -- Text color\n"}
{"page": 1472, "text": "Statements, Events, and Functions\nPage 1472\nArgument\nDescription\n\u2022 Background! -- Background color\n\u2022 LineColor! -- Line color\n\u2022 Shade! -- Shade (for graphics that are three-dimensional or have solid\nobjects)\ncolor\nA long specifying the new color for colortype.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\nData points in a series can have their own style settings. Settings made with SetDataStyle set\nthe style of individual data points and override series settings.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can set the fill pattern in a two-dimensional line graph or the line style in a\nbar graph, but that fill pattern or line style will not be visible.\nFor a graph in a DataWindow, you can specify the appearance of a series in the graph before\nPowerBuilder draws the graph. To do so, define a user event for pbm_dwngraphcreate and\ncall SetSeriesStyle in the script for that event. The event pbm_dwngraphcreate is triggered\njust before a graph is created in a DataWindow object.\nUsing SetSeriesStyle with DirectX 3D Graphs\nYou can only set the color for the foreground. Background, line color, and shade are\nnot supported.\nExamples\nThis statement sets the text (foreground) color of the series named Salary in the graph\ngr_emp_data to black:\ngr_emp_data.SetSeriesStyle(\"Salary\", &\n      Foreground!, 0)\nThis statement sets the background color of the series named Salary in the graph gr_depts in\nthe DataWindow control dw_employees to black:\ndw_employees.SetSeriesStyle(\"gr_depts\", &\n      \"Salary\", Background!, 0)\nThese statements in the Clicked event of the graph control gr_product_data coordinate line\ncolor between it and the graph gr_sales_data. The script stores the line color for the series\nunder the mouse pointer in the graph gr_product_data in the variable line_color. Then it sets\nthe line color for the series northeast in the graph gr_sales_data to that color:\nstring SeriesName\n"}
{"page": 1473, "text": "Statements, Events, and Functions\nPage 1473\ninteger SeriesNbr, Series_Point\nlong line_color\ngrObjectType MouseHit\n \nMouseHit = ObjectAtPointer(SeriesNbr,Series_Point)\n \nIF MouseHit = TypeSeries! THEN\n      SeriesName = &\n         gr_product_data.SeriesName(SeriesNbr)\n \n      gr_product_data.GetSeriesStyle(SeriesName, &\n         LineColor!, line_color)\n \n      gr_sales_data.SetSeriesStyle(\"Northeast\", &\n         LineColor!, line_color)\nEND IF\nSee also\nGetDataStyle\nGetSeriesStyle\nSeriesName\nSetDataStyle\n2.4.774.2 Syntax 2: For lines in a graph\nDescription\nSpecifies the style and width of a series' lines in a graph.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls objects\nSyntax\ncontrolname.SetSeriesStyle ( { graphcontrol, } seriesname, linestyle, linewidth )\nTable 2.1306:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set the line style and width\nof a series, or the name of the DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nin which you want to set the line style and width.\nseriesname\nA string whose value is the name of the series for which you want to set\nthe line style and width.\nlinestyle\nA value of the LineStyle enumerated datatype. Values are:\nContinuous!\nDash!\nDashDot!\n"}
{"page": 1474, "text": "Statements, Events, and Functions\nPage 1474\nArgument\nDescription\nDashDotDot!\nDot!\nTransparent!\nlinewidth\nAn integer specifying the width of the line in pixels.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\nData points in a series can have their own style settings. Settings made with SetDataStyle set\nthe style of individual data points and override series settings.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can set the fill pattern in a two-dimensional line graph or the line style in a\nbar graph, but that fill pattern or line style will not be visible.\nFor a graph in a DataWindow, you can specify the appearance of a series in the graph before\nPowerBuilder draws the graph. To do so, define a user event for pbm_dwngraphcreate and\ncall SetSeriesStyle in the script for that event. The event pbm_dwngraphcreate is triggered\njust before a graph is created in a DataWindow object.\nExamples\nThis statement sets the line style and width for the series named Costs in the graph\ngr_product_data:\ngr_product_data.SetSeriesStyle(\"Costs\", &\n      Dot!, 5)\nSee also\nGetDataStyle\nGetSeriesStyle\nSeriesName\nSetDataStyle\n2.4.774.3 Syntax 3: For the fill pattern and symbols in a graph\nDescription\nSpecifies the fill pattern and symbol for data markers in a series.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\n"}
{"page": 1475, "text": "Statements, Events, and Functions\nPage 1475\ncontrolname.SetSeriesStyle ( { graphcontrol, } seriesname, enumvalue )\nTable 2.1307:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set the appearance of a\nseries, or the name of the DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nin which you want to set the appearance.\nseriesname\nA string whose value is the name of the series in which you want to set\nthe appearance.\nenumvalue\nA value of an enumerated datatype specifying an appearance setting\nfor the series. Values for the FillPattern or grSymbolType enumerated\ndatatypes follow.\n \nTo change the fill pattern, use a FillPattern value:\nBdiagonal! (Lines from lower left to upper right)\nDiamond!\nFdiagonal! (Lines from upper left to lower right)\nHorizontal!\nSolid!\nSquare!\nVertical!\nTo change the symbol type, use a grSymbolType value:\nNoSymbol!\nSymbolHollowBox!\nSymbolX!\nSymbolStar!\nSymbolHollowUpArrow!\nSymbolHollowCircle!\nSymbolHollowDiamond!\nSymbolSolidDownArrow!\nSymbolSolidUpArrow!\nSymbolSolidCircle!\nSymbolSolidDiamond!\nSymbolPlus!\nSymbolHollowDownArrow!\nSymbolSolidBox!\n"}
{"page": 1476, "text": "Statements, Events, and Functions\nPage 1476\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\nData points in a series can have their own style settings. Settings made with SetDataStyle set\nthe style of individual data points and override series settings.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can set the fill pattern in a two-dimensional line graph or the line style in a\nbar graph, but that fill pattern or line style will not be visible.\nFor a graph in a DataWindow, you can specify the appearance of a series in the graph before\nPowerBuilder draws the graph. To do so, define a user event for pbm_dwngraphcreate and\ncall SetSeriesStyle in the script for that event. The event pbm_dwngraphcreate is triggered\njust before a graph is created in a DataWindow object.\nUsing SetSeriesStyle with DirectX 3D Graphs\nYou cannot use a fill pattern or specify specific symbols for a series.\nExamples\nThis statement sets the symbol used for the series named Costs in the graph gr_product_data\nto a plus sign:\ngr_product_data.SetSeriesStyle(\"Costs\", &\n      SymbolPlus!)\nThis statement sets the symbol used for the series named Costs in the graph gr_computers in\nthe DataWindow control dw_equipment to X:\ndw_equipment.SetSeriesStyle(\"gr_computers\", &\n      \"Costs\", SymbolX!)\nSee also\nGetDataStyle\nGetSeriesStyle\nSeriesName\nSetDataStyle\n2.4.774.4 Syntax 4: For creating an overlay in a graph\nDescription\nSpecifies whether a series is an overlay, meaning that the series is represented by a line on\ntop of another graph type.\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\n"}
{"page": 1477, "text": "Statements, Events, and Functions\nPage 1477\nSyntax\ncontrolname.SetSeriesStyle ( { graphcontrol, } seriesname, overlaystyle )\nTable 2.1308:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set the overlay status of a\nseries, or the name of the DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(optional)\nA string whose value is the name of the graph in the DataWindow control\nin which you want to set the overlay status.\nseriesname\nA string whose value is the name of the series whose overlay status you\nwant to change.\noverlaystyle\nA boolean value indicating whether you want the series to be an overlay,\nmeaning that the series is shown in front as a line. Set overlaystyle to\ntrue to make the specified series an overlay. Set it to false to remove the\noverlay setting.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\nFor a graph in a DataWindow, you can specify the appearance of a series in the graph before\nPowerBuilder draws the graph. To do so, define a user event for pbm_dwngraphcreate and\ncall SetSeriesStyle in the script for that event. The event pbm_dwngraphcreate is triggered\njust before a graph is created in a DataWindow object.\nUsing SetSeriesStyle with DirectX 3D Graphs\nYou cannot use the overlay style for a series.\nExamples\nThis statement sets the style of the series named Costs in the graph gr_product_data to\noverlay:\ngr_product_data.SetSeriesStyle(\"Costs\", TRUE)\nThese statements in the Clicked event of the DataWindow control dw_employees store the\nstyle of the series under the pointer in the graph gr_depts in the variable style_type. If the\nstyle of the series is overlay (true), the script changes the style to normal (false):\nstring SeriesName\ninteger SeriesNbr, Data_Point\nboolean overlay_style\n"}
{"page": 1478, "text": "Statements, Events, and Functions\nPage 1478\ngrObjectType MouseHit\n \nMouseHit = dw_employees.ObjectAtPointer( &\n      \"gr_depts\", SeriesNbr, Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n      SeriesName = &\n         dw_employees.SeriesName(\"gr_depts\",SeriesNbr)\n \n      dw_employees.GetSeriesStyle(\"gr_depts\", &\n         SeriesName, overlay_style)\n \n      IF overlay_style THEN &\n         dw_employees.SetSeriesStyle(\"gr_depts\", &\n            SeriesName, FALSE)\nEND IF\nSee also\nGetDataStyle\nGetSeriesStyle\nSeriesName\nSetDataStyle\n2.4.775 SetSeriesTransparency\nDescription\nSets the tranparency percentage of a series in a DirectX 3D graph (those with 3D rendering).\nApplies to\nGraph controls in windows and user objects, and graphs in DataWindow controls\nSyntax\ncontrolname.SetSeriesTransparency ( { graphcontrol, } series, transparency )\nTable 2.1309:\nArgument\nDescription\ncontrolname\nThe name of the graph in which you want to set a series transparency\nvalue, or the name of the DataWindow control containing the graph.\ngraphcontrol\n(DataWindow\ncontrol only)\n(Optional) A string whose value is the name of the graph in the\nDataWindow control in which you want to set a series transparency\nvalue.\nseries\nThe string that identifies the series for which you want to set the\ntransparency value.\ntransparency\nInteger value for percent transparency. A value of 0 means that the series\nis opaque and a value of 100 means that it is completely transparent.\nReturn value\nInteger.\n"}
{"page": 1479, "text": "Statements, Events, and Functions\nPage 1479\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesTransparency returns null.\nUsage\nSetSeriesTransparency sets the transparency value for a series in any DirectX 3D graph\n(those with 3D rendering).\nExamples\nThese statements set the transparency percentage to 50% for the clicked series in the graph\ngr_1 in the DataWindow control dw_employee:\ninteger SeriesNbr, ItemNbr, TransNbr\nstring ls_SeriesName\ngrObjectType clickedtype\n \n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", &\n      SeriesNbr, ItemNbr)\n \n//Get the name of series      \nls_SeriesName = dw_employee.SeriesName(\"gr_1\", &\n      SeriesNbr)\n \n//The following statement sets Transparency to 50%\nTransNbr = 50   \n \ndw_employee.SetSeriesTransparency(\"gr_1\", &\n      ls_SeriesName, TransNbr)\nThese statements set the transparency to 50% for the clicked series in the graph gr_employee.\ninteger SeriesNbr, ItemNbr, TransNbr\nstring ls_SeriesName\ngrObjectType clickedtype\n \nclickedtype = gr_employee.ObjectAtPointer( &\n      SeriesNbr, ItemNbr)\n \nls_SeriesName = gr_employee.SeriesName(SeriesNbr)\n \nTransNbr = 50\n \ngr_employee.SetSeriesTransparency( & \n      ls_SeriesName, TransNbr)\nSee also\nFindSeries\nGetSeriesTransparency\nGetDataTransparency\nSetDataTransparency\n2.4.776 SetSheetID\nDescription\nSets the unique identifier for an open sheet.\n"}
{"page": 1480, "text": "Statements, Events, and Functions\nPage 1480\nApplies to\nWindow objects\nSyntax\ncontrolname.SetSheetID ( sheetname )\nTable 2.1310:\nArgument\nDescription\ncontrolname\nThe open sheet to be identified.\nsheetname\nA unique string identifier for the sheet, which is used when layout is\npersisted.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetSheetID\nreturns null.\nUsage\nIf no sheet identifier was set when it was opened by one of the OpenSheet functions, you can\nset an ID using the SetSheetID function. You can also change a sheet's ID.\nExamples\nwindow win[]\nOpenSheetDocked(win[1], this, WindowDockLeft!, \"\")\nwin[1].SetSheetID(\"sheet1\")\nSee also\nSetTextColor\nSetTextStyle\n2.4.777 SetSmallButton\nDescription\nSets the small button for the RibbonBar control.\nApplies to\nRibbonBar control\nSyntax\ncontrolname.SetSmallButton ( Long ItemHandle, RibbonSmallButtonItem Item )\nTable 2.1311:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\n"}
{"page": 1481, "text": "Statements, Events, and Functions\nPage 1481\nArgument\nDescription\nItemHandle\nThe handle of the small button on the same level that you will set the\nitem.\nItem\nA small button item you are setting.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also use the SetItem function to set the small button. Refer to SetItem for the\ndifference between SetItem and SetSmallButton.\nThe user events to be bound with the small button must be defined correctly according to the\nrequirements of RibbonSmallButtonItem. For details, see Clicked and Selected.\nExamples\nThis example inserts the \"Add\" small button and binds it with the \"Ue_SmallButtonClicked\"\nuser event, and then sets new values for various properties (including Text, PictureName,\nClicked, Selected etc.) of this small button.\nInteger li_Return\nLong ll_Handle_Category, ll_Handle_Panel, ll_Handle_SmallButton\nRibbonSmallButtonItem lr_SmallButton\nll_Handle_Category = rbb_1.InsertCategoryFirst (\"MyCategory\")\nll_Handle_Panel = rbb_1.InsertPanelFirst (ll_Handle_Category, \"MyPanel\",\n \"AddSmall!\")\nll_Handle_SmallButton = rbb_1.InsertSmallButtonFirst (ll_Handle_Panel, \"Add\",\n \"AddSmall!\", \"Ue_SmallButtonClicked\")\nli_Return = rbb_1.GetChildItemByIndex (ll_Handle_Panel, 1, lr_SmallButton)\nIf li_Return = 1 Then\n lr_SmallButton.Text = \"Delete\"\n lr_SmallButton.PictureName = \"DeleteSmall!\"\n lr_SmallButton.Clicked = \"Ue_SmallButtonClicked2\"\n lr_SmallButton.Selected = \"Ue_SmallButtonSelected2\"\n li_Return = rbb_1.SetSmallButton (lr_SmallButton.ItemHandle, lr_SmallButton)\nEnd If\nSee also\nInsertSmallButton\nInsertSmallButtonFirst\nInsertSmallButtonLast\nDeleteSmallButton\nGetSmallButton\nGetChildItemByIndex\n2.4.778 SetSpacing\nDescription\n"}
{"page": 1482, "text": "Statements, Events, and Functions\nPage 1482\nSets the line spacing for the selected paragraphs or the paragraph containing the insertion\npoint in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.SetSpacing ( spacing )\nTable 2.1312:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to set the line\nspacing.\nspacing\nA value of the Spacing enumerated datatype specifying the line spacing\nfor the text. Values are:\nSpacing1! -- Single spacing\nSpacing15! -- One and a half line spacing\nSpacing2! -- Double spacing\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nBecause spacing is a setting for paragraphs, not individual lines, then if lines have wrapped,\nspacing will change for all the lines in all the paragraphs that are selected.\nWhen you expand the line spacing, the extra space is added before the affected lines.\nExamples\nThis example specifies double spacing for the selected paragraphs in the RichTextEdit rte_1:\nrte_1.SetSpacing(Spacing2!)\nThis example specifies one and a half line spacing:\nrte_1.SetSpacing(Spacing15!)\n2.4.779 SetState\nDescription\nSets the highlighted state of an item in a list box. SetState is only applicable to a list box\ncontrol whose MultiSelect property is set to true.\nApplies to\nListBox and PictureListBox controls\nSyntax\n"}
{"page": 1483, "text": "Statements, Events, and Functions\nPage 1483\nlistboxname.SetState ( index, state )\nTable 2.1313:\nArgument\nDescription\nlistboxname\nThe name of the ListBox or PictureListBox in which you want to set\nthe state (highlighted or not highlighted) for an item. The MultiSelect\nproperty for the control must be set to true.\nindex\nThe number of the item for which you want to set the state. Specify 0 to\nset the state of all the items in the ListBox.\nstate\nA boolean value that determines the state of the item:\n\u2022 TRUE -- Selected\n\u2022 FALSE -- Not selected\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetState\nreturns null.\nUsage\nWhen the MultiSelect property for the control is false, use SelectItem, instead of SetState, to\nselect one item at a time.\nExamples\nThis statement turns on the highlight for item 6 in lb_Actions:\nlb_Actions.SetState(6, TRUE)\nThis statement deselects all items in lb_Actions:\nlb_Actions.SetState(0, FALSE)\nThis statement turns off the highlight for item 6 in lb_Actions if it is selected and turns it on\nagain if it is not selected:\nIF lb_Actions.State(6) = 1 THEN\n      lb_Actions.SetState(6, FALSE)\nELSE\n      lb_Actions.SetState(6, TRUE)\nEND IF\nSee also\nSelectItem\nSetTop\nState\n2.4.780 SetSyncRegistryProperties\nDescription\n"}
{"page": 1484, "text": "Statements, Events, and Functions\nPage 1484\nSets synchronization properties in the local machine registry.\nApplies to\nMLSynchronization, MLSync controls\nSyntax\nSyncObject.SetSyncRegistryProperties ( )\nTable 2.1314:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object.\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\nIf necessary, the SetSyncRegistryProperties function can create a key in the Windows\nregistry from the value of the SyncRegistryKey property of the synchronization object.\nFailure occurs if the SyncRegistryKey property is not set in the synchronization object.\nExamples\nThe MLSync object generated by the MobiLink wizard for SQL Anywhere uses the\nfollowing code in its Constructor event:\nIF d_Registry_Build < d_this_object_build THEN      \n// First time deployment of new revision - set \n//\"ObjectRevision\" to this revision of the wizard       \n// objects and override all registry values   \n   rc = this.SetSyncRegistryProperties()\nELSE\n   rc = this.GetSyncRegistryProperties()\nEND IF      \nThis code sets the values of authentication properties in the Windows registry when the build\nnumber of the running application is higher than the build number in the registry (or when the\nbuild number in the registry cannot be found).\nSee also\nGetCommandString\nGetSyncRegistryProperties\nSetParm\n2.4.781 SetTabButton\nDescription\nSets the tab button for the RibbonBar control.\nApplies to\n"}
{"page": 1485, "text": "Statements, Events, and Functions\nPage 1485\nRibbonBar control\nSyntax\ncontrolname.SetTabButton ( Long ItemHandle, RibbonTabButtonItem Item )\nTable 2.1315:\nArgument\nDescription\ncontrolname\nThe name of the RibbonBar control.\nItemHandle\nThe handle of the tab button on the same level that you will set the tab\nbutton.\nItem\nA tab button item you are setting.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, returns null.\nUsage\nYou can also use the SetItem function to set the tab button. Refer to SetItem for the\ndifference between SetItem and SetTabButton.\nThe user events to be bound with the tab button must be defined correctly according to the\nrequirements of RibbonTabButtonItem. For details, see Clicked and Selected.\nExamples\nThis example inserts the \"TabButton1\" tab button and binds it with the\n\"Ue_TabButtonClicked\" user event, and then sets new values for various properties\n(including Text, PictureName, Clicked, Selected etc.) of this tab button.\nInteger li_Return\nLong ll_Handle\nRibbonTabButtonItem lr_TabButton\nll_Handle = rbb_1.InsertTabButtonFirst (\"TabButton1\", \"ArrowUpSmall!\",\n \"Ue_TabButtonClicked\")\nlr_TabButton.Text = \"TabButton2\"\nlr_TabButton.PictureName = \"HelpSmall!\"\nlr_TabButton.Clicked = \"Ue_TabButtonClicked2\"\nlr_TabButton.Selected = \"Ue_TabButtonSelected\"\nli_Return = rbb_1.SetTabButton (ll_Handle, lr_TabButton)\nSee also\nInsertTabButton\nInsertTabButtonFirst\nInsertTabButtonLast\nDeleteTabButton\nGetTabButton\nGetTabButtonByIndex\n"}
{"page": 1486, "text": "Statements, Events, and Functions\nPage 1486\nGetTabButtonCount\n2.4.782 SetTextColor\nDescription\nSets the color of selected text in a RichTextEdit control.\nApplies to\nRichTextEdit controls\nSyntax\nrtename.SetTextColor ( colornumber )\nTable 2.1316:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to set the color\nof selected text\ncolornumber\nA long specifying the color of the selected text\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nFor more information about calculating color values, see RGB.\nExamples\nThis example sets the selected text in RichTextEdit rte_1 to dark red:\nrte_1.SetTextColor(RGB(100, 0, 0))\nSee also\nGetTextColor\nRGB\nSetTextStyle\n2.4.783 SetTextStyle\nDescription\nSpecifies the text formatting for selected text in a RichTextEdit control. You can make\nthe text bold, underlined, italic, and struck out. You can also make it either a subscript or\nsuperscript.\nApplies to\nRichTextEdit controls\n"}
{"page": 1487, "text": "Statements, Events, and Functions\nPage 1487\nSyntax\nrtename.SetTextStyle ( bold, underline {, subscript} {, superscript}, italic,\n strikeout )\nTable 2.1317:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit control in which you want to specify\nformatting for selected text.\nbold\nA boolean value specifying whether the selected text is bold.\nunderline\nA boolean value specifying whether the selected text is underlined.\nsubscript\n(obsolete)\nMaintained for backward compatibility only. A boolean value specifying\nwhether the selected text is a subscript. This value is currently ignored.\nsuperscript\n(obsolete)\nA boolean value specifying whether the selected text is a superscript.\nMaintained for backward compatibility only. If both subscript\nand superscript are true, subscript takes precedence and the text is\nsubscripted. This value is currently ignored.\nitalic\nA boolean value specifying whether the selected text is italic.\nstrikeout\nA boolean value specifying whether the selected text is has a line drawn\nthrough it.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example makes selected text in the RichTextEdit rte_1 bold and italic:\nrte_1.SetTextStyle(TRUE, FALSE, &\n      TRUE, FALSE)\nThis example makes the selected text italic but keeps other text formatting as it was:\nrte_1.SetTextStyle(rte_1.GetTextStyle(Bold!), &\n      rte_1.GetTextStyle(Underlined!), &\n            TRUE,\n    rte_1.GetTextStyle(Strikeout!))\nSee also\nGetTextStyle\nSetSpacing\nSetTextColor\n2.4.784 SetTimeout (obsolete)\nDescription\n"}
{"page": 1488, "text": "Statements, Events, and Functions\nPage 1488\nSets the timeout value for subsequent EAServer transactions. The transaction is rolled back if\nit does not complete before the timeout expires.\nObsolete function\nSetTimeout is obsolete, because EAServer is no longer supported since PowerBuilder\n2017.\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.SetTimeout ( seconds )\nTable 2.1318:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\nseconds\nAn unsignedlong that specifies the number of seconds that elapse before\na transaction is rolled back\nReturn value\nBoolean.\nReturns true if it succeeds and false if an error occurs.\nUsage\nThe SetTimeout function specifies the number of seconds that can elapse before a transaction\nis rolled back. The timeout period applies to transactions created by subsequent invocations\nof BeginTransaction. If seconds is 0, no timeout period is in effect.\nSetTimeout can be called by a client or a component that is marked as OTS style. EAServer\nmust be using the two-phase commit transaction coordinator (OTS/XA).\nExamples\nThis example shows how to set the timeout period to five minutes:\n// Instance variables:\n// CORBACurrent corbcurr\nboolean lb_timeout\ninteger li_rc\nli_rc = this.GetContextService(\"CORBACurrent\", &\n      corbcurr)\nIF li_rc <> 1 THEN\n      // handle the error\nEND IF\nli_rc = corbcurr.Init( \"iiop://server1:9003\")\nIF li_rc <> 1 THEN\n      // handle the error\nELSE      \n      lb_timeout = corbcurr.SetTimeout(300)\n"}
{"page": 1489, "text": "Statements, Events, and Functions\nPage 1489\n      li_rc = corbcurr.BeginTransaction()\nEND IF\nSee also\nBeginTransaction (obsolete)\nCommitDocking\nGetContextService\nGetStatus (obsolete)\nGetTransactionName (obsolete)\nInit (obsolete)\nResumeTransaction (obsolete)\nRollbackOnly (obsolete)\nRollbackTransaction (obsolete)\nSuspendTransaction (obsolete)\n2.4.785 SetToday\nDescription\nSets the value that is used by the calendar as today's date.\nApplies to\nDatePicker, MonthCalendar controls\nSyntax\ncontrolname.SetToday ( d )\nTable 2.1319:\nArgument\nDescription\ncontrolname\nThe name of the control for which you want to set the Today date\nd\nThe date you want to specify as the Today date\nReturn value\nInteger.\nReturns 0 for success and -1 for failure.\nUsage\nBy default, the current system date is set as the Today date. You can use the SetToday\nfunction to specify a different date. If the date is set to any date other than the current system\ndate, the following restrictions apply:\n\u2022 The control does not automatically update the Today selection when the time passes\nmidnight for the current day.\n"}
{"page": 1490, "text": "Statements, Events, and Functions\nPage 1490\n\u2022 The control does not automatically update its display based on locale changes.\nExamples\nThis example gets a date from an EditMask control and sets it as the Today date in a\nMonthCalendar control:\nDate currentdate\ninteger li_return\ncurrentdate = Date(em_1.Text)\nli_return = mc_1.SetToday(currentdate)\nSee also\nGetToday\n2.4.786 SetToolbar\nDescription\nSpecifies the alignment, visibility, and title for the specified toolbar.\nApplies to\nMDI frame and sheet windows\nSyntax\nwindow.SetToolbar ( toolbarindex, visible {, alignment {, floatingtitle } } )\nTable 2.1320:\nArgument\nDescription\nwindow\nThe MDI frame or sheet to which the toolbar belongs.\ntoolbarindex\nAn integer whose value is the index of the toolbar whose settings you\nwant to change.\nvisible\nA boolean value specifying whether to make the toolbar visible. Values\nare:\n\u2022 TRUE -- Make the toolbar visible\n\u2022 FALSE -- Hide the toolbar\nalignment\n(optional)\nA value of the ToolbarAlignment enumerated datatype specifying the\nalignment for the toolbar. Values are:\n\u2022 AlignAtTop! -- Dock the toolbar at the top of the frame.\n\u2022 AlignAtLeft! -- Dock the toolbar on the left side of the frame.\n\u2022 AlignAtRight! -- Dock the toolbar on the right side of the frame.\n\u2022 AlignAtBottom! -- Dock the toolbar at the bottom of the frame.\n\u2022 Floating! -- Float the toolbar. The floating toolbar has its own frame\nand miniature title bar\n"}
{"page": 1491, "text": "Statements, Events, and Functions\nPage 1491\nArgument\nDescription\nfloatingtitle\n(optional)\nA string whose value is the title for the toolbar when its alignment is\nFloating!.\nReturn value\nInteger.\nReturns 1 if it succeeds. SetToolbar returns -1 if there is no toolbar for the index you specify\nor if an error occurs. If any argument's value is null, returns null.\nUsage\nWhen you use SetToolbar to change the toolbar alignment from a docked position to\nFloating!, PowerBuilder uses the last known position information unless you also call\nSetToolbarPos to adjust the position.\nThe toolbars are not redrawn until the script ends, so setting the alignment with SetToolbar\nand the position with SetToolbarPos looks like a single change to the user.\nExamples\nThis example allows the user to choose an alignment in a ListBox lb_position. The selected\nstring is converted to a ToolbarAlignment enumerated value, which is used to change the\nalignment of toolbar index 1:\ntoolbaralignment tba_align\n \nCHOOSE CASE lb_position.SelectedItem()\n \nCASE \"Top\"\n      tba_align = AlignAtTop!\nCASE \"Left\"\n      tba_align = AlignAtLeft!\nCASE \"Right\"\n      tba_align = AlignAtRight!\nCASE \"Bottom\"\n      tba_align = AlignAtBottom!\nCASE \"Floating\"\n      tba_align = Floating!\nEND CHOOSE\n \nw_frame.SetToolbar(1, TRUE, tba_align)\nIn this example, the user clicks a radio button to choose an alignment. The radio button's\nClicked event sets an instance variable of type ToolbarAlignment. Here the radio buttons are\npackaged as a custom visual user object. I_toolbaralign is an instance variable of the user\nobject. This is the script for the Top radio button:\nParent.i_toolbaralign = AlignAtTop!\nThis script changes the toolbar alignment:\nw_frame.SetToolbar(1, TRUE, &\n      uo_toolbarpos.i_toolbaralign )\nSee also\nGetToolbar\n"}
{"page": 1492, "text": "Statements, Events, and Functions\nPage 1492\nGetToolbarPos\nSetToolbarPos\n2.4.787 SetToolbarPos\nSets the position of the specified toolbar.\nTable 2.1321:\nTo set\nUse\nDocking position of a docked toolbar\nSyntax 1\nCoordinates and size of a floating toolbar\nSyntax 2\n2.4.787.1 Syntax 1: For docked toolbars\nDescription\nSets the position of a docked toolbar.\nApplies to\nMDI frame and sheet windows\nSyntax\nwindow.SetToolbarPos ( toolbarindex, dockrow, offset, insert )\nTable 2.1322:\nArgument\nDescription\nwindow\nThe MDI frame or sheet to which the toolbar belongs.\ntoolbarindex\nAn integer whose value is the index of the toolbar whose settings you\nwant to change.\ndockrow\nAn integer whose value is the number of the docking row for the toolbar.\nDocking rows are numbered from left to right or top to bottom.\noffset\nAn integer whose value specifies the distance of the toolbar from the\nbeginning of the docking row. For toolbars at the top or bottom, offset\nis measured from the left edge. For toolbars on the left or right, offset is\nmeasured from the top.\nIf insert is true, the offset you specify is adjusted so that the toolbar does\nnot overlap others in the row.\nSpecify an offset of 0 to position the toolbar ahead of other toolbars in\ndockrow.\ninsert\nA boolean value specifying whether you want to insert the specified\ntoolbar before the toolbars in dockrow causing them to move over or\ndown a row, or you want to add toolbarindex to dockrow. Values are:\n\u2022 TRUE -- Move any toolbars already in dockrow or higher rows over\nor down a row so that the toolbar you are moving is the only toolbar in\nthe row.\n"}
{"page": 1493, "text": "Statements, Events, and Functions\nPage 1493\nArgument\nDescription\n\u2022 FALSE -- Add the toolbar you are moving to dockrow. Its position in\nrelation to other toolbars in the row is determined by offset.\nReturn value\nInteger.\nReturns 1 if it succeeds. SetToolbarPos returns -1 if there is no toolbar for the index you\nspecify or if an error occurs. If any argument's value is null, returns null.\nUsage\nTo find out whether the docked toolbar is at the top, bottom, left, or right edge of the\nwindow, call GetToolbar.\nIf the toolbar's alignment is floating, instead of docked, then values you specify with Syntax\n1 of SetToolbarPos take effect when you change the alignment to a docked position with\nSetToolbar.\nWhen insert is false, to move the toolbar before other toolbars in dockrow, specify a value\nthat is less than the offset for the existing toolbars. If there is already a toolbar at offset 1,\nthen you can move the toolbar to the beginning of the row by setting offset to 0. If offset\nis equal to or greater than the offset of existing toolbars, but less than their end, the newly\npositioned toolbar will begin just after the existing one. Otherwise, the toolbar will be\npositioned at offset.\nIf the user drags the toolbar to a docked position, the new row and offset replace values set\nwith SetToolbarPos.\nExamples\nThis example docks toolbar 1 at the left, adding it to docking row 1:\nw_frame.SetToolbar(1, TRUE, AlignAtLeft!)\nw_frame.SetToolbarPos(1, 1, 1, FALSE)\nThis example docks toolbar 2 at the left, adding it to docking row 1. If the toolbars already\nin the dock extend past offset 250, then the offset of toolbar 2 is increased to accommodate\nthem. Otherwise, it is positioned at offset 250:\nw_frame.SetToolbar(2, TRUE, AlignAtLeft!)\nw_frame.SetToolbarPos(2, 1, 250, FALSE)\nThis example docks toolbar 2 at the left in docking row 2. Any toolbar docked on the left in\nrow 2 or higher is moved over a row:\nw_frame.SetToolbar(1, TRUE, AlignAtLeft!)\nw_frame.SetToolbarPos(1, 2, 1, TRUE)\nSee also\nGetToolbar\nGetToolbarPos\nSetToolbar\n"}
{"page": 1494, "text": "Statements, Events, and Functions\nPage 1494\n2.4.787.2 Syntax 2: For floating toolbars\nDescription\nSets the position and size of a floating toolbar.\nApplies to\nMDI frame and sheet windows\nSyntax\nwindow.SetToolbarPos ( toolbarindex, x, y, width, height )\nTable 2.1323:\nArgument\nDescription\nwindow\nThe MDI frame or sheet to which the toolbar belongs\ntoolbarindex\nAn integer whose value is the index of the toolbar whose settings you\nwant to change\nx\nAn integer whose value is the x coordinate of the floating toolbar\ny\nAn integer whose value is the y coordinate of the floating toolbar\nwidth\nAn integer whose value is the width of the floating toolbar\nheight\nAn integer whose value is the height of the floating toolbar\nReturn value\nInteger.\nReturns 1 if it succeeds. SetToolbarPos returns -1 if there is no toolbar for the index you\nspecify or if an error occurs. If any argument's value is null, SetToolbarPos returns null.\nUsage\nIf the toolbar's alignment is a docked position, instead of floating, then values you specify\nwith Syntax 2 of SetToolbarPos take effect when you change the alignment to floating in a\nscript with SetToolbar.\nIf the user drags the toolbar to a floating position, the new position values replace values set\nwith SetToolbarPos.\nThe floating toolbar is never too large or too small for the buttons. If you specify width\nand height values that are too small to accommodate the buttons, the width and height are\nadjusted to make room for the buttons. If both width and height are larger than needed, the\nheight is reduced.\nIf you specify x and y coordinates that are outside the frame, the toolbar becomes\ninaccessible to the user.\nExamples\nThis example displays toolbar 1 near the upper-left corner of the frame. An arbitrary width\nand height lets PowerBuilder size the toolbar as needed:\nw_frame.SetToolbarPos(1, 10, 10, 400, 1)\n"}
{"page": 1495, "text": "Statements, Events, and Functions\nPage 1495\nw_frame.SetToolbar(1, TRUE, Floating!)\nThis example displays toolbar 2 close to the lower-right corner of the frame. GetToolbarPos\ngets the current width and height of the toolbar so that the toolbar stays the same size:\ninteger ix, iy, iw, ih\n \nw_frame.GetToolbarPos(2, ix, iy, iw, ih)\n \nw_frame.SetToolbarPos(2, &\n      w_frame.WorkspaceWidth()-400, &\n         w_frame.WorkspaceHeight()-400, &\n            iw, ih)\nw_frame.SetToolbar(2, TRUE, Floating!)\nThis example positions floating toolbar 2 just inside the lower-right corner of the MDI frame.\nGetToolbarPos gets the current width and height of the toolbar. These values and the height\nof the MicroHelp are used to calculate the x and y coordinates for the floating toolbar:\ninteger ix, iy, iw, ih\n \n// Find out toolbar size\nw_frame.GetToolbarPos(2, ix, iy, iw, ih)\n \n// Set the position, taking the size into account\nw_frame.SetToolbarPos(2, &\n      w_frame.WorkspaceWidth( ) - iw, &\n         w_frame.WorkspaceHeight( ) &\n            - ih - w_frame.MDI_1.MicroHelpHeight, &\n               iw, ih)\n \n// Set the alignment to floating\nw_frame.SetToolbar(2, TRUE, Floating!)\nSee also\nGetToolbar\nSetToolbar\nSetToolbarPos\n2.4.788 SetTop\nDescription\nScrolls a list box control so that the specified item is the first visible item.\nApplies to\nListBox and PictureListBox controls\nSyntax\nlistboxname.SetTop ( index )\nTable 2.1324:\nArgument\nDescription\nlistboxname\nThe name of the ListBox or PictureListBox that you want to scroll\n"}
{"page": 1496, "text": "Statements, Events, and Functions\nPage 1496\nArgument\nDescription\nindex\nThe number of the item you want to become the first visible item\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetTop\nreturns null.\nExamples\nThis statement scrolls item 6 in lb_Actions to the top of the ListBox so that it is the first\nvisible item:\nlb_Actions.SetTop(6)\nThe following statement scrolls the currently selected item in lb_Actions to the top of the list\nof items:\nlb_Actions.SetTop(lb_Actions.SelectedIndex())\nSee also\nSetFocus\nSetState\n2.4.789 SetTraceFileName\nDescription\nSpecifies the name of the trace file PowerBuilder will analyze when the BuildModel function\nis called.\nApplies to\nProfiling and TraceTree objects\nSyntax\ninstancename.SetTraceFileName ( tracefilename )\nTable 2.1325:\nArgument\nDescription\ninstancename\nInstance name of the Profiling or TraceTree object\ntracefilename\nA string that identifies the name of the trace file PowerBuilder will\nanalyze\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n"}
{"page": 1497, "text": "Statements, Events, and Functions\nPage 1497\n\u2022 FileOpenError! -- The file could not be opened\n\u2022 FileInvalidFormatError! -- The trace file is not in the correct format\n\u2022 ModelExistsError! -- A model has already been built\nIf an error occurs, the name is not set.\nUsage\nUse this function to specify the trace file PowerBuilder should analyze with the BuildModel\nfunction. You call the SetTraceFileName function before calling the BuildModel function.\nExamples\nThis example provides the name of the trace file for which a performance analysis model is to\nbe built:\nProfiling lpro_model\nString ls_line\n \nlpro_model = CREATE Profiling\n \nlpro_model.SetTraceFileName (filename)\nls_line = \"CollectionTime = \" + & \n      String(lpro_model.CollectionTime ) + \"~r~n\" & \n         + \"Num Activities = \" & \n         + String(lpro_model.NumberOfActivities) + \"~r~n\"\n \nlpro_model.BuildModel()\n...\nSee also\nBuildModel\n2.4.790 SetTransPool\nDescription\nSets up a pool of database transactions for a distributed application. SetTransPool was used\nwith a feature that has been removed from PowerBuilder and is an obsolete function.\nApplies to\nApplication object\nSyntax\napplicationname.SetTransPool ( minimum, maximum, timeout )\nTable 2.1326:\nArgument\nDescription\napplicationname\nThe name of the application object for which you want to establish a\ntransaction pool\nminimum\nThe minimum number of transactions to be kept open in the pool\n"}
{"page": 1498, "text": "Statements, Events, and Functions\nPage 1498\nArgument\nDescription\nmaximum\nThe maximum number of transactions that can be open in the pool\ntimeout\nThe number of seconds to allow a request to wait for a connection in the\ntransaction pool\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\n2.4.791 SetValue\nSets the value for a control.\nTable 2.1327:\nTo obtain\nUse\nThe date and time in the Value property of the DatePicker control.\nSyntax 1\nThe value of the key of the JSONPackage object\nSyntax 2\n2.4.791.1 Syntax 1: for DatePicker control\nDescription\nSets the date and time in the Value property of the control.\nApplies to\nDatePicker control\nSyntax\ncontrolname.SetValue ( d, t )\ncontrolname.SetValue ( dt )\nTable 2.1328:\nArgument\nDescription\ncontrolname\nThe name of the control for which you want to set the date and time\nd\nThe date value to be set in the Value property\nt\nThe time value to be set in the Value property\ndt\nThe DateTime value to be set in the Value property\nReturn value\nInteger.\nReturns 1 for success and one of the following negative values for failure:\n-1 -- The value cannot be set\n"}
{"page": 1499, "text": "Statements, Events, and Functions\nPage 1499\n-2 -- Other error\nUsage\nThe SetValue function can set the Value property using separate date and time variables or a\nsingle DateTime variable.\nExamples\nThis example sets the Value property of a DatePicker control using separate date and time\nvalues:\ndate d\ntime t\nd=date(\"2007/12/27\")\nt=time(\"12:00:00\")\ndp_1.SetValue(d, t)\nThis example sets the Value property using a DateTime value:\ndate d\ntime t\ndatetime dt\ndt = DateTime(d, t)\ndp_1.SetValue(dt)\nSee also\nGetText\nGetValue\n2.4.791.2 Syntax 2: for JSONPackage object\nDescription\nSets the value for a key. If the key does not exist, then create the key and set its value. If the\nkey already exists, then overwrite the value of this key. If more than one key with the same\nname already exists, then overwrite the value of the first key. Notice that the IgnoreCase\nproperty (true by default) determines whether the key name will be matched in a case-\nsensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.SetValue ( Key, Value {, Flag} )\nobjectname.SetValue ( Key, DWControl {, ChangedOnly} )\nTable 2.1329:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nKey\nA string specifying the key.\nValue\nA string specifying the value.\n"}
{"page": 1500, "text": "Statements, Events, and Functions\nPage 1500\nArgument\nDescription\nFlag (optional)\nA boolean specifying the flag: true indicates the value is in JSON format,\nfalse indicates the value is a string. The default value is true.\nDWControl\nThe name of the DataWindow, DataStore or DataWindowChild control.\nChangedOnly\n(optional)\nA boolean specifying the changing flag: true indicates including changed\ndata only (in DataWindow JSON format) for all DataWindow buffers,\nfalse indicates including data (in plain JSON format) of primary buffer.\nThe default value is true.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThis example packages the JSON data and a string and then sends the package to the server:\nint li_rc\nstring ls_json, ls_EmployeeJson, ls_ReturnJson\nHttpClient lnv_HttpClient\nJsonPackage lnv_package\nlnv_HttpClient = create HttpClient\nlnv_package = create JsonPackage\nls_EmployeeJson = dw_employee.ExportJson(false)\n// Package the data\nlnv_package.SetValue(\"d_employee \", ls_EmployeeJson)\nlnv_package.SetValue(\"MyString\", \"Test String\", false)\nls_json = lnv_package.GetJsonString()\n// Construct a POST request \nlnv_HttpClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Send the package to the server\nli_rc = lnv_HttpClient.SendRequest(\"POST\", \"https://demo.appeon.com/PB/\nwebapi_client/postJsonpackage/employee\", ls_json)\n// Get the data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n  lnv_HttpClient.GetResponseBody(ls_ReturnJson, EncodingUTF8!)\nelse\n  MessageBox(\"Error\", \"Failed to call service.\")\nend if\nThis example packages the data of the DataWindow, DataStore and DataWindowChild\ncontrols and then sends the package to the server:\nint li_rc\nstring ls_json, ls_ReturnJson\ndatastore lds_employee\ndatawindowchild ldwc_active\nHttpClient lnv_HttpClient\nJsonPackage lnv_package\nlnv_HttpClient = create HttpClient\n"}
{"page": 1501, "text": "Statements, Events, and Functions\nPage 1501\nlnv_package = create JsonPackage\n...//Initialize data for lds_employee, ldwc_active\n// Package the data\nlnv_package.SetValue(\"d_department\", dw_department, false)\nlnv_package.SetValue(\"d_employee\", lds_employee)  //includes the changed data\nlnv_package.SetValue(\"dddw_active\", ldwc_active, false)\nls_json = lnv_package.GetJsonString()\n// Construct a POST request \nlnv_HttpClient.SetRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\")\n// Send the package to the server\nli_rc = lnv_HttpClient.SendRequest(\"POST\", \"https://demo.appeon.com/PB/\nwebapi_client/postJsonpackage/employee\", ls_json)\n// Get the data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n  lnv_HttpClient.GetResponseBody(ls_ReturnJson, EncodingUTF8!)\nelse\n  MessageBox(\"Error\", \"Failed to call service.\")\nend if\nSee also\nGetValue\n2.4.792 SetValueBlob\nDescription\nSets the blob value for a key. If the key does not exist, then create the key and set its value.\nIf the key already exists, then overwrite the value of this key. If more than one key with\nthe same name already exists, then overwrite the value of the first key. Notice that the\nIgnoreCase property (true by default) determines whether the key name will be matched in a\ncase-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.SetValueBlob ( Key, Value )\nTable 2.1330:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nKey\nA string specifying the key name.\nValue\nA blob specifying the key value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\n"}
{"page": 1502, "text": "Statements, Events, and Functions\nPage 1502\nExamples\nThis example sets the value of the picturepath key to A:\\Document4D\\PowerBuilder Picture\n\\images\\startup.BMP\n// Integer SetValueBlob (string Key, blob Value)\nString    ls_PicturePath\nJsonPackage    ljpk_User\nljpk_User = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_User.loadstring( '{\"id\":100,\"name\":\"Henry.Ken\",\"birthday\":\"1998-01-01\",\"picturepath\":\"QTpcV2\n+54mHXGF1dG9ydW4uQk1Q\" }')\n// Sets the key value and uses the UTF8 encoding.\nljpk_User.SetValueBlob( \"picturepath\", Blob(\"A:\\Document4D\\PowerBuilder Picture\n\\images\\startup.BMP\",EncodingUTF8!))\n// Gets the key value: A:\\Document4D\\PowerBuilder Picture\\images\\startup.BMP\nls_PicturePath = String(ljpk_User.GetValueBlob(\"picturepath\"),EncodingUTF8!)\nSee also\nGetValueBlob\nSetValueBoolean\nSetValueByDataWindow\nSetValueDate\nSetValueDateTime\nSetValueNumber\nSetValueString\nSetValueTime\n2.4.793 SetValueBoolean\nDescription\nSets the boolean value for a key. If the key does not exist, then create the key and set its\nvalue. If the key already exists, then overwrite the value of this key. If more than one key\nwith the same name already exists, then overwrite the value of the first key. Notice that the\nIgnoreCase property (true by default) determines whether the key name will be matched in a\ncase-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.SetValueBoolean ( Key, Value )\nTable 2.1331:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nKey\nA string specifying the key name.\n"}
{"page": 1503, "text": "Statements, Events, and Functions\nPage 1503\nArgument\nDescription\nValue\nA boolean specifying the key value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThis example modifies the value of the Status key in the JSON string, from TRUE to FALSE.\n// Integer SetValueBoolean ( string Key, boolean Value )\nBoolean    lbl_Status\nInteger    li_Return\nJsonPackage    ljpk_Dept\nljpk_Dept = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_Dept.loadstring( '{\"dept_id\":100,\"dept_name\":\"R & D8\",\"Status\":true}')\n// Sets the boolean value of the Status key\nli_Return = ljpk_Dept.SetValueBoolean(\"Status\", FALSE)\nIf li_Return <> 1 Then  // If SetValueBoolean failed\n  // Prints the error message\nElse\n lbl_Status = ljpk_Dept.GetValueBoolean(\"Status\")\n If lbl_Status <> FALSE Then  // If the value obtained is different from the value\n set\n     // Prints the error message\n End If\nEnd If\nSee also\nGetValueBoolean\nSetValueBlob\nSetValueByDataWindow\nSetValueDate\nSetValueDateTime\nSetValueNumber\nSetValueString\nSetValueTime\n2.4.794 SetValueByDataWindow\nDescription\nSets the value of the key using the data from a DataWindow control, DataStore object, or\nDataWindowChild object.\nApplies to\n"}
{"page": 1504, "text": "Statements, Events, and Functions\nPage 1504\nJSONPackage\nSyntax\nobjectname.SetValueByDataWindow ( string Key, dwcontrol DWControl {, boolean\n format } )\nobjectname.SetValueByDataWindow ( string Key, dwcontrol DWControl {, DWBuffer\n dwbuffer }, boolean changedonly, boolean format )\nobjectname.SetValueByDataWindow ( string Key, dwcontrol DWControl, boolean\n primarydata, boolean filterdata, boolean deletedata, boolean dwcdata {, boolean\n format } )\nobjectname.SetValueByDataWindow ( string Key, dwcontrol DWControl, DWBuffer\n dwbuffer {, long startrow {, long endrow {, long startcolumn {, long\n endcolumn } } } } {, boolean format } )\nTable 2.1332:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object\nKey\nA string specifying the key name.\ndwcontrol\nA reference to a DataWindow control, DataStore, or DataWindowChild.\ndwbuffer\nA value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to get the data. For a list of\nvalid values, see Section 6.9, \u201cDWBuffer\u201d in DataWindow Reference.\nIf not specified, all of the DataWindow buffers will be obtained,\nhowever, the data for DataWindowChild will not be obtained (even if\nchangedonly is false).\nchangedonly\nA boolean specifying the changing flag.\n\u2022 True -- to get the changed rows only (and all rows of the Delete\nbuffer).\n\u2022 False -- to get all rows. The default is false.\nprimarydata\nA boolean specifying whether to get the data from the primary buffer.\n\u2022 True -- to get\n\u2022 False -- not to get\nfilterdata\nA boolean specifying whether to get the data from the filter buffer.\n\u2022 True -- to get\n\u2022 False -- not to get\ndeletedata\nA boolean specifying whether to get the data from the delete buffer.\n\u2022 True -- to get\n\u2022 False -- not to get\ndwcdata\nA boolean specifying whether to get the DataWindowChild data.\n"}
{"page": 1505, "text": "Statements, Events, and Functions\nPage 1505\nArgument\nDescription\n\u2022 True -- to get. If it is to get the DataWindowChild data, data from all\nbuffers will be set to a plain JSON, regardless of the value of the other\narguments.\n\u2022 False -- not to get\nstartrow\n(optional)\nThe number of the first detail row in the buffer that you want to get. The\ndefault is 1. If it is 0 or negative, 1 is used.\nendrow\n(optional)\nThe number of the last detail row in the buffer that you want to get. The\ndefault is the rest of the rows. If it is 0 or negative, it indicates the rest of\nrows.\nstartcolumn\n(optional)\nThe number of the first column in the buffer that you want to get. The\ndefault is 1. If it is 0 or negative, 1 is used.\nendcolumn\n(optional)\nThe number of the last column in the buffer that you want to get. The\ndefault is the rest of the columns. If it is 0 or negative, it indicates the rest\nof columns.\nformat\nA boolean specifying the JSON format.\n\u2022 True indicates the DataWindow JSON.\n\u2022 False (default) indicates the plain JSON.\nSee Section 4.7.1, \u201cSupported JSON formats\u201d in Application Techniques\nfor details about the JSON format.\nReturn value\nLong. Returns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the\nmethod returns null.\nExample 1\nThis example exports data from the DataWindow to the JSONPackage object.\n// Integer SetValueByDataWindow (string Key, dwcontrol DWControl {, boolean\n format})\nString     ls_Dept_id_100\nRestclient    lrc_Dept\nJsonPackage    ljpk_Dept\nljpk_Dept = Create JsonPackage\nlrc_Dept = Create RestClient\n// The DataWindow column name and type must match with that of the JSON string\n returned from https://demo.appeon.com/PB/webapi_client/department\ndw_Dept.DataObject = \"d_example_dept\" \nlrc_Dept.Retrieve( dw_Dept, \"https://demo.appeon.com/PB/webapi_client/\ndepartment\" ) // Gets data via RestClient\ndw_Dept.SetFilter( \"dept_id = 100\" )  // Filters the data that will be exported to\n the JSON string\ndw_Dept.Filter()\n// Exports the data from DataWindow to JSONPackage as a plain JSON string\nljpk_Dept.SetValueByDataWindow(\"dept_id_100\", dw_Dept, False)\n"}
{"page": 1506, "text": "Statements, Events, and Functions\nPage 1506\nls_Dept_id_100 = ljpk_Dept.GetJsonString() // Exports the data from JSONPackage at\n the string format\n// Prints ls_Dept_id_100 = {\"dept_id_100\":[{\"dept_id\":100, \"dept_name\":\"R & D8\",\n \"dept_head_id\":105}]}\nExample 2\nThis example exports the modified data from the DataWindow to the JSONPackage object.\n// Integer SetValueByDataWindow (string Key, dwcontrol DWControl {, DWBuffer\n dwbuffer}, boolean changedonly, boolean format)\nString     ls_Dept_ModifyRow\nRestclient    lrc_Dept\nJsonPackage    ljpk_Dept\nljpk_Dept = Create JsonPackage\nlrc_Dept = Create RestClient\n// The DataWindow column name and type must match with that of the JSON string\n returned from https://demo.appeon.com/PB/webapi_client/department\ndw_Dept.DataObject = \"d_example_dept\" \nlrc_Dept.Retrieve( dw_Dept, \"https://demo.appeon.com/PB/webapi_client/\ndepartment\" ) // Gets data via RestClient\n// Modifies the DataWindow data\nIf dw_Dept.RowCount() > 0 Then\n dw_Dept.SetItem(1, 2, \"TestJsonPackage\") \nEnd If\n// Exports the modified data from DataWindow to JSONPackage as a plain JSON string\nljpk_Dept.SetValueByDataWindow(\"Dept_ModifyRow\", dw_Dept, Primary!, TRUE, FALSE)\nls_Dept_ModifyRow = ljpk_Dept.GetJsonString() // Exports the data from JSONPackage\n at the string format\n// Prints ls_Dept_ModifyRow = {\"Dept_ModifyRow\":[{\"dept_id\":100,\n \"dept_name\":\"TestJsonPackage\", \"dept_head_id\":105}]}\nExample 3\nThis example exports the data from the specified DataWindow row and column to the\nJSONPackage object.\n// Integer SetValueByDataWindow (string Key, dwcontrol DWControl, DWBuffer dwbuffer\n {, long startrow {, long endrow {, long startcolumn {, long endcolumn } } } } {,\n boolean format })\nString     ls_Dept_Row_Column\nInteger    li_Return\nRestclient    lrc_Dept\nJsonPackage    ljpk_Dept\nljpk_Dept = Create JsonPackage\nlrc_Dept = Create RestClient\n// The DataWindow column name and type must match with that of the JSON string\n returned from https://demo.appeon.com/PB/webapi_client/department\ndw_Dept.DataObject = \"d_example_dept\" \nlrc_Dept.Retrieve( dw_Dept, \"https://demo.appeon.com/PB/webapi_client/\ndepartment\" ) // Gets data via RestClient\n// Exports data in rows 1 through 3 and in column 2\nli_Return = ljpk_Dept.SetValueByDataWindow (\"Dept_Name\", dw_Dept, Primary!, 1, 3,\n 2, 2, FALSE)\nIf li_Return <> 1 Then\n// Prints the error message if SetValueByDataWindow failed\nEnd If\nls_Dept_Row_Column = ljpk_Dept.GetJsonString() // Exports the data as a string\n"}
{"page": 1507, "text": "Statements, Events, and Functions\nPage 1507\n// Prints ls_Dept_Row_Column={\"Dept_Name\":[{\"dept_name\":\"R & D8\"},\n {\"dept_name\":\"Sales\"}, {\"dept_name\":\"Finance\"}]}\nSee also\nGetValueToDataWindow\nSetValueBlob\nSetValueBoolean\nSetValueDate\nSetValueDateTime\nSetValueNumber\nSetValueString\nSetValueTime\n2.4.795 SetValueDate\nDescription\nSets the date value for a key. If the key does not exist, then create the key and set its value.\nIf the key already exists, then overwrite the value of this key. If more than one key with\nthe same name already exists, then overwrite the value of the first key. Notice that the\nIgnoreCase property (true by default) determines whether the key name will be matched in a\ncase-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.SetValueDate ( Key, Value )\nTable 2.1333:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nKey\nA string specifying the key name.\nValue\nA date specifying the key value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThis example modifies the value of the birthday key in the JSON string, from 1998-12-01 to\n2001-01-01.\n// Integer SetValueDate ( string Key, date Value )\n"}
{"page": 1508, "text": "Statements, Events, and Functions\nPage 1508\nDate    ld_Birthday\nInteger    li_Return\nJsonPackage    ljpk_User\nljpk_User = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_User.loadstring( '{\"id\":100, \"name\":\"Henry.Ken\", \"birthday\":\"1998-12-01\",\n \"CreateDate\":1543900359 }')\nli_Return = ljpk_User.SetValueDate(\"birthday\", 2001-01-01)\nIf li_Return = 1 Then\n // Gets the value of the birthday key: ld_Birthday = 2001-01-01\n ld_Birthday = ljpk_User.GetValueDate(\"birthday\")\nElse \n  // Prints the error message if SetValueDate failed\nEnd If\nSee also\nGetValueDate\nSetValueBlob\nSetValueBoolean\nSetValueByDataWindow\nSetValueDateTime\nSetValueNumber\nSetValueString\nSetValueTime\n2.4.796 SetValueDateTime\nDescription\nSets the datetime value for a key. If the key does not exist, then create the key and set its\nvalue. If the key already exists, then overwrite the value of this key. If more than one key\nwith the same name already exists, then overwrite the value of the first key. Notice that the\nIgnoreCase property (true by default) determines whether the key name will be matched in a\ncase-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.SetValueDateTime ( Key, Value )\nobjectname.SetValueDateTime ( Key, Value, Flag )\nTable 2.1334:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nKey\nA string specifying the key name.\nValue\nA datetime specifying the key value.\n"}
{"page": 1509, "text": "Statements, Events, and Functions\nPage 1509\nArgument\nDescription\nFlag\nA boolean whose value is the type of the child item.\nTrue -- JsonNumberItem type. A JsonNumberItem type value is a UTC\ntimestamp converted from the local time using the local timezone.\nFalse -- JsonStringItem type. A JsonStringItem type value is a string\nconverted from the local time directly (no timezone conversion).\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThis example sets the value of the birthday key and the createdate key in the JSON string.\n// Integer SetValueDateTime (string Key, datetime Value)\nDateTime    ldt_CreateDate,ldt_Birthday\nJsonPackage    ljpk_User\nljpk_User = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljpk_User.loadstring( '{\"id\":100,\"name\":\"Henry.Ken\",\"birthday\":\"1998-12-01\n 08:02:30\",\"CreateDate\":1543900359 }')\nljpk_User.SetValueDateTime(\"birthday\", DateTime(Today(), Now()))\n// This will change the ItemType of the CreateDate key to JsonStringItem!\nljpk_User.SetValueDateTime(\"CreateDate\", DateTime(Today(), Now()))\n// GetValueDateTime can also get a long value or a string value.\n// It is recommended to check if it is a datetime value, otherwise exception may be\n thrown.\nldt_CreateDate = ljpk_User.GetValueDateTime(\"CreateDate\")\nldt_Birthday = ljpk_User.GetValueDateTime(\"birthday\")\nSee also\nGetValueDateTime\nSetValueBlob\nSetValueBoolean\nSetValueByDataWindow\nSetValueDate\nSetValueNumber\nSetValueString\nSetValueTime\n2.4.797 SetValueNumber\nDescription\nSets the number value for a key. If the key does not exist, then create the key and set its\nvalue. If the key already exists, then overwrite the value of this key. If more than one key\n"}
{"page": 1510, "text": "Statements, Events, and Functions\nPage 1510\nwith the same name already exists, then overwrite the value of the first key. Notice that the\nIgnoreCase property (true by default) determines whether the key name will be matched in a\ncase-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.SetValueNumber ( Key, Value )\nTable 2.1335:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nKey\nA string specifying the key name.\nValue\nA double specifying the key value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThis example modifies the value of the dept_id key in the JSON string, from 100 to 999.99.\n// Integer SetValueNumber ( string Key, double Value )\nDouble    ldb_DeptID\nJsonPackage    ljp_Dept\nljp_Dept = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljp_Dept.loadstring ( '{\"dept_id\":100, \"dept_name\":\"R & D8\", \"dept_head_id\":105}')\nljp_Dept.SetValueNumber(\"dept_id\", 999.99)  // Sets the value of dept_id to 999.99\nldb_DeptID = ljp_Dept.GetValueNumber(\"dept_id\")  // Checks if the value is 999.99\nIf ldb_DeptID <> 999.99 Then\n  // Prints the error message if SetValueNumber failed \nEnd If\nSee also\nGetValueNumber\nSetValueBlob\nSetValueBoolean\nSetValueByDataWindow\nSetValueDate\nSetValueDateTime\nSetValueString\n"}
{"page": 1511, "text": "Statements, Events, and Functions\nPage 1511\nSetValueTime\n2.4.798 SetValueString\nDescription\nSets the string value for a key. If the key does not exist, then create the key and set its value.\nIf the key already exists, then overwrite the value of this key. If more than one key with\nthe same name already exists, then overwrite the value of the first key. Notice that the\nIgnoreCase property (true by default) determines whether the key name will be matched in a\ncase-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.SetValueString ( Key, Value )\nTable 2.1336:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nKey\nA string specifying the key name.\nValue\nA string specifying the key value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThis example modifies the value of the dept_name key in the JSON string, from \"R & D8\" to\n\"D & R\".\n// Integer SetValueString ( string Key, string Value )\nString    ls_DeptName\nInteger    li_Return\nJsonPackage    ljp_Dept\nljp_Dept = Create JsonPackage\n// Loads the JSON string to the JSONPackage object\nljp_Dept.loadstring( '{\"dept_id\":100, \"dept_name\":\"R & D8\", \"dept_head_id\":105}')\nli_Return = ljp_Dept.SetValueString( \"dept_name\", \"D & R\" ) // Sets the value for\n dept_name \nIf li_Return = 1 Then\n ls_DeptName = ljp_Dept.GetValueString( \"dept_name\" ) // Gets the value of\n dept_name\nElse\n // Prints the error message\nEnd If\nSee also\n"}
{"page": 1512, "text": "Statements, Events, and Functions\nPage 1512\nGetValueString\nSetValueBlob\nSetValueBoolean\nSetValueByDataWindow\nSetValueDate\nSetValueDateTime\nSetValueNumber\nSetValueTime\n2.4.799 SetValueTime\nDescription\nSets the time value for a key. If the key does not exist, then create the key and set its value.\nIf the key already exists, then overwrite the value of this key. If more than one key with\nthe same name already exists, then overwrite the value of the first key. Notice that the\nIgnoreCase property (true by default) determines whether the key name will be matched in a\ncase-sensitive manner.\nApplies to\nJSONPackage\nSyntax\nobjectname.SetValueTime ( Key, Value )\nTable 2.1337:\nArgument\nDescription\nobjectname\nThe name of the JSONPackage object.\nKey\nA string specifying the key name.\nValue\nA time specifying the key value.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nExamples\nThis example modifies the value of the endtime key in the JSON string, from 21:02:30 to\n23:59:59.\n// Integer SetValueTime ( string Key, time Value )\nTime    lt_EndTime\nInteger li_Return\nJsonPackage    ljpk_User\nljpk_User = Create JsonPackage\n"}
{"page": 1513, "text": "Statements, Events, and Functions\nPage 1513\n// Loads the JSON string to the JSONPackage object\nljpk_User.loadstring ( '{\"id\":100, \"name\":\"Henry.Ken\", \"starttime\":\"08:02:30\",\n \"endtime\":\"21:02:30\" }') \nli_Return = ljpk_User.SetValueTime (\"endtime\", 23:59:59.325)\nIf li_Return = 1 Then\n lt_EndTime = ljpk_User.GetValueTime (\"endtime\") // Gets the value of endtime:\n lt_EndTime=23:59:59\nElse\n  // Prints the error message\nEnd If\nSee also\nGetValueTime\nSetValueBlob\nSetValueBoolean\nSetValueByDataWindow\nSetValueDate\nSetValueDateTime\nSetValueNumber\nSetValueString\n2.4.800 SHA\nDescription\nCalculates the SHA value of a blob.\nApplies to\nCrypterObject objects\nSyntax\ncrypter.SHA ( algorithm, variable)\nTable 2.1338:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object\nalgorithm\nA value of the SHAAlgorithm enumerated type that specifies the type of\nSHA algorithm.\nValues are:\n\u2022 SHA1! \u2013 SHA1\n\u2022 SHA224! \u2013 SHA224\n\u2022 SHA256! \u2013 SHA256\n\u2022 SHA384! \u2013 SHA384\n"}
{"page": 1514, "text": "Statements, Events, and Functions\nPage 1514\nArgument\nDescription\n\u2022 SHA512! \u2013 SHA512\n\u2022 SHA3_224! \u2013 SHA3-224\n\u2022 SHA3_256! \u2013 SHA3-256\n\u2022 SHA3_384! \u2013 SHA3-384\n\u2022 SHA3_512! \u2013 SHA3-512\nvariable\nA blob whose value is the data you want to process with SHA.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nReturn value\nBlob. Returns the result of the SHA if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThis statement encrypts the data using SHA1.\nBlob lblb_data\nBlob lblb_sha1\nString ls_data\nlblb_data = Blob(\"Test SHA1\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n// Encrypt with SHA\nlblb_sha1= lnv_CrypterObject.SHA(SHA1!, lblb_data)\nCoderobject lnv_code\nLnv_code = create coderobject\n//Encode the SHA blob data to be hex data and output as a string\nLs_data = lnv_code.hexencode(lblb_sha1)\nSee also\nSymmetricEncrypt\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricSign\nAsymmetricVerifySign\nAsymmetricGenerateKey\n"}
{"page": 1515, "text": "Statements, Events, and Functions\nPage 1515\nMD5\nHMAC\n2.4.801 SharedObjectDirectory\nDescription\nRetrieves the list of objects that have been registered for sharing.\nSyntax\nSharedObjectDirectory ( instancenames {, classnames } )\nTable 2.1339:\nArgument\nDescription\ninstancenames\nAn unbounded array of type string in which you want to store the names\nof objects that have been registered for sharing\nclassnames\n(optional)\nAn unbounded array of type string in which you want to store the class\nnames of objects registered for sharing\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FeatureNotSupportedError! -- This function is not supported on this platform\nUsage\nUse this function to obtain a list of objects that have been registered for sharing.\nExamples\nIn this example, the application retrieves the list of shared objects and their class names:\nerrorreturn status\nstring InstanceNames[]\nstring ClassNames[]\n \nstatus = SharedObjectDirectory(InstanceNames, &\n   ClassNames)\nSee also\nSharedObjectGet\nSharedObjectRegister\n2.4.802 SharedObjectGet \nDescription\nGets a reference to a shared object instance.\n"}
{"page": 1516, "text": "Statements, Events, and Functions\nPage 1516\nSyntax\nSharedObjectGet ( instancename , objectinstance )\nTable 2.1340:\nArgument\nDescription\ninstancename\nThe name of a shared object instance to which you want to obtain\nreferences. The name you specify must match the name given to the\nobject instance when it was first registered with the SharedObjectRegister\nfunction.\nobjectinstance\nAn object variable of type PowerObject in which you want to store an\ninstance of a shared object.\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 SharedObjectCreateInstanceError! -- The local reference to the shared object could not be\ncreated\n\u2022 SharedObjectNotExistsError! -- The instance name has not been registered\nUsage\nSharedObjectGet retrieves a reference to an object that was created with\nSharedObjectRegister.\nYou can use a shared object on a PowerBuilder client to simulate an asynchronous call to\nthe server. The main thread on the client makes an asynchronous call to a function on the\nshared object, passing it a callback object that is notified when processing has finished on the\nserver. The method on the shared object makes a synchronous call to the server component\nmethod that performs processing. Since the shared object is running in a separate thread on\nthe client, the main thread on the client can proceed with other work while the process runs\non the server.\nExamples\nThis example shows how you might use a shared object to make an asynchronous request\nagainst a server component method and return data back to a client application window.\nThe client has a Retrieve button on a window, a SetDW function, a shared object, and a\ncallback handler. The component deployed to the server retrieves employee information from\na database.\nThe Retrieve button on the window creates a shared object that communicates with the server\nas well as an instance of a callback handler:\n// instance variables\n// uo_sharedobject iuo_sharedobject\n// uo_callback iuo_callback\nlong ll_rv\n"}
{"page": 1517, "text": "Statements, Events, and Functions\nPage 1517\nSharedObjectRegister(\"uo_sharedobject\",\"myshare\")\nSharedObjectGet(\"myshare\",iuo_sharedobject)\niuo_callback = CREATE uo_callback\n// Pass a reference to the window to\n// the callback object\niuo_callback.passobject (parent)\niuo_sharedobject.post retrievedata(iuo_callback)\nThe SetDW function applies the contents of the DataWindow blob returned from the server\ncomponent to a DataWindow control in the window:\nlong ll_rv\nll_rv = dw_employee.SetFullState(ablb_data)\nif ll_rv = -1 then\n   MessageBox(\"Error\", \"SetFullState call failed!\")\nend if\nreturn ll_rv\nThe Constructor event of the shared object uses a custom Connection object called\nn_jagclnt_connect to connect to the server. Then it creates an instance of the server\ncomponent:\n// Instance variables\n// uo_employee iuo_employee\n// n_jagclnt_connect myconnect\nConstructor event\nlong ll_rc\nmyconnect = create n_jagclnt_connect\nll_rc = myconnect.ConnectToServer()\nll_rv = myconnect.CreateInstance(iuo_employee, &\n   \"uo_employee\")\nRetrieveData\nThe shared object has a single function called that makes a synchronous call to the\nRetrieveData function on the server component.\nWhen the function completes processing, it calls the Notify function asynchronously on the\ncallback object, posting it to the DataWindow blob returned from the server component:\nblob lblb_data\nlong ll_rv\nll_rv = iuo_employee.retrievedata(lblb_data)\nauo_callback.post notify(lblb_data)\nreturn ll_rv\nWhen the server component has finished processing, the shared object notifies a user object\ncalled uo_callback, which in turns notifies the w_employee window. The uo_callback object\nhas two functions, Notify and PassObject.The Notify function calls a function called SetDW\non the w_employee window, passing it the DataWindow blob returned from the server\ncomponent:\nlong ll_rv\nll_rv = iw_employee.setdw(ablb_data)\nif ll_rv = -1 then\n   MessageBox(\"Error\", \"SetDW call failed!\")\nend if\n"}
{"page": 1518, "text": "Statements, Events, and Functions\nPage 1518\nreturn ll_rv\nThe callback handler's PassObject function caches a reference to the w_employee window in\nthe iw_employee instance variable. The function takes the argument aw_employee, which is\nof type w_employee, and returns a long value:\niw_employee = aw_employee\nreturn 1\nThe server component is a PowerBuilder user object called uo_employee. The uo_employee\nobject has a function called RetrieveData that uses a DataStore to retrieve employee rows\nfrom the database:\n// instance variables\n// protected TransactionServer txnsrv\n// protected DataStore ids_datastore\nlong ll_rv\nll_rv = ids_datastore.Retrieve()\nll_rv = ids_datastore.GetFullState(ablb_data)\ntxnsrv.SetComplete()\nreturn ll_rv\nSee also\nSharedObjectRegister\nSharedObjectUnregister\nGetFullState and SetFullState method for DataWindows in Section 9.58, \u201cGetFullState\u201d in\nDataWindow Reference and Section 9.168, \u201cSetFullState\u201d in DataWindow Reference.\n2.4.803 SharedObjectRegister\nDescription\nRegisters a user object so that it can be shared.\nSyntax\nSharedObjectRegister ( classname , instancename )\nTable 2.1341:\nArgument\nDescription\nclassname\nThe name of the user object that you want to share\ninstancename\nA string whose value is the name you want to assign to the shared object\ninstance\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 SharedObjectExistsError! -- The instance name has already been used\n\u2022 SharedObjectCreateInstanceError! -- The object could not be created\n"}
{"page": 1519, "text": "Statements, Events, and Functions\nPage 1519\n\u2022 SharedObjectCreatePBSessionError! -- The shared object session could not be created\nUsage\nWhen you call the SharedObjectRegister function, PowerBuilder opens a separate runtime\nsession for the shared object and creates the shared object. The name you specify for the\nobject instance provides a way for you to access the object instance with the SharedObjectGet\nfunction.\nExamples\nIn this example, the user object uo_customers is registered so that it can be shared. The name\nassigned to the shared object instance is share1. After registering the object, the application\nuses the SharedObjectGet function to store an instance of the object in an object variable:\nSharedObjectRegister(\"uo_customers\", \"share1\")\nSharedObjectGet(\"share1\",shared_object)\nSee also\nSharedObjectGet\nSharedObjectUnregister\n2.4.804 SharedObjectUnregister\nDescription\nUnregisters a user object that was previously registered.\nSyntax\nSharedObjectUnregister ( instancename )\nTable 2.1342:\nArgument\nDescription\ninstancename\nThe name assigned to the shared object instance when it was first\nregistered\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 SharedObjectNotExistsError! -- The instance name has not been registered\nUsage\nThis function marks a shared object for destruction. But the object is not actually destroyed\nuntil there are no more references to the object.\nExamples\nIn this example the application unregisters the object instance called share1:\nSharedObjectUnregister(\"share1\")\n"}
{"page": 1520, "text": "Statements, Events, and Functions\nPage 1520\nSee also\nSharedObjectRegister\n2.4.805 Show\nDescription\nMakes an object or control visible, if it is hidden. If the object is already visible, Show brings\nit to the top.\nApplies to\nAny object\nSyntax\nobjectname.Show ( )\nTable 2.1343:\nArgument\nDescription\nobjectname\nThe name of the object or control you want to make visible (show)\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If objectname is null, Show returns null.\nUsage\nIf the specified object is a window that is not open, an execution error occurs.\nYou cannot use Show to show a drop-down or cascading menu, or any menu that has an MDI\nframe window as its parent window.\nEquivalent syntax\nYou can set the object's Visible property instead of calling Show:\nobjectname.Visible = true\nThis statement:\nm_status.m_options.Visible = TRUE\nis equivalent to:\nm_status.m_options.Show()\nExamples\nThis statement makes visible the menu selection called m_options on the menu m_status:\nm_status.m_options.Show()\nThis statement makes the child window w_child visible:\nw_child.Show()\n"}
{"page": 1521, "text": "Statements, Events, and Functions\nPage 1521\nSee also\nHide\n2.4.806 ShowHeadFoot\nDescription\nDisplays the panels for editing the header and footer in a RichTextEdit control or hides the\npanels and returns to editing the main text.\nApplies to\nRichTextEdit controls and DataWindow controls with the RichTextEdit style\nSyntax\nrtename.ShowHeadFoot ( editheadfoot {, headerfooter})\nTable 2.1344:\nArgument\nDescription\nrtename\nThe name of the RichTextEdit or DataWindow control for which you\nwant to edit header and footer information.\neditheadfoot\nA boolean value specifying the editing panel to display. Values are:\n\u2022 TRUE -- Display the header and footer editing panels\n\u2022 FALSE -- Display the detail editing panel for the document body\nheaderfooter\n(optional)\nA boolean value specifying whether the insertion point (caret) for editing\nthe header/footer panel is in the header or the footer section. Values are:\n\u2022 True -- Caret is in the header section.\n\u2022 False -- Caret is in the footer section.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nShowHeadFoot takes effect when the control is in preview mode or when it is in edit mode\nfor the main text. If the control is in preview mode, calling ShowHeadFoot returns to edit\nmode.\nThe headerfooter argument is ignored if the editheadfoot argument is false. The headerfooter\nargument defaults to \"true\" if a value is not provided. The header and footer can include input\nfields for page numbers and dates.\nFor a DataWindow control, ShowHeadFoot has no effect if the DataWindow object does not\nhave the RichTextEdit presentation style.\nExamples\n"}
{"page": 1522, "text": "Statements, Events, and Functions\nPage 1522\nThis example displays the header and footer editing panels, allowing the user to specify the\ncontents of the footer:\nrte_1.ShowHeadFoot(TRUE, FALSE)\nThe following script inserts the current page number in the footer, then returns the focus to\nthe body of the document in the rich text control:\nrte_1.ShowHeadFoot(true,false)\nrte_1.SetAlignment ( Center! )\nrte_1.InputFieldInsert(\"PAGENO\")\nrte_1.ShowHeadFoot(false,false)\nSee also\nPreview\n2.4.807 ShowHelp\nDescription\nProvides access to a Microsoft Windows-based Help system or to compiled HTML Help\nfiles that you have created for your PowerBuilder application. When you call ShowHelp,\nPowerBuilder starts the Help executable and displays the Help file you specify.\nSyntax\nShowHelp ( helpfile, helpcommand {, typeid } )\nTable 2.1345:\nArgument\nDescription\nhelpfile\nA string whose value is the name of the compiled HLP file or the CHM\n(HTML Help) file.\nhelpcommand\nA value of the HelpCommand enumerated type. Values are:\n\u2022 Finder! -- Displays the Help file in its most recently used state (the\nHelp Topics dialog box in WinHelp or the Navigator pane in the\nHTML Help viewer open to the last-used tab or the default tab for the\nHelp file).\n\u2022 Index! -- Displays the top-level contents topic in the Help file.\n\u2022 Keyword! -- Goes to the topic identified by the keyword in typeid.\n\u2022 Topic! -- Displays the topic identified by the number in typeid.\ntypeid\n(optional)\nA number identifying the topic if helpcommand is Topic! or a string\nwhose value is a keyword of a help topic if helpcommand is Keyword!.\nDo not specify typeid when helpcommand is Finder! or Index!.\nReturn value\nInteger.\n"}
{"page": 1523, "text": "Statements, Events, and Functions\nPage 1523\nReturns 1 if it succeeds and -1 if an error occurs. ShowHelp returns -1 if you specify typeid\nwhen helpcommand is Finder! or Index!. If any argument's value is null, ShowHelp returns\nnull.\nUsage\nTo provide context-sensitive Help, use ShowHelp in appropriate scripts throughout your\napplication with specific topic IDs or keywords.\nIf you specify Keyword! for helpcommand and the string in typeid is not unique, the Help\nSearch window displays.\nFor information on how to create online Help files for your PowerBuilder application, see\nSection 3.7, \u201cProviding Online Help for an Application\u201d in Application Techniques.\nExamples\nThis statement displays the Help index in the INQ.HLP file:\nShowHelp(\"C:\\PB\\INQ.HLP\", Index!)\nThis statement displays Help topic 143 in the file EMP.HLP file:\nShowHelp(\"EMP.HLP\", Topic!, 143)\nThis statement displays the Help topic associated with the keyword Part# in the file\nEMP.HLP:\nShowHelp(\"EMP.HLP\", Keyword!, \"Part#\")\nThis statement displays the Help search window. The word in the box above the keyword list\nis the first keyword that begins with M:\nShowHelp(\"EMP.HLP\", Keyword!, \"M\")\nSee also\nHelp\nShowPopupHelp\n2.4.808 ShowPopupHelp\nDescription\nDisplays pop-up help for the specified control.\nApplies to\nAny control\nSyntax\nShowPopupHelp ( helpfile, control, contextid )\nTable 2.1346:\nArgument\nDescription\nhelpfile\nString for the Help file name to be used\ncontrol\nDragobject for which the pop-up help is displayed\n"}
{"page": 1524, "text": "Statements, Events, and Functions\nPage 1524\nArgument\nDescription\ncontextid\nLong for the context ID number\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nA typical location for the ShowPopupHelp call is in the Help event of a response window\nwith the Context Help property enabled. Events relating to movement of the cursor over a\ncontrol or to the dragging of a control or object are also logical places for a ShowPopupHelp\ncall.\nYou must type a correct context ID number for the contextid argument or you get a message\nthat a Help topic does not exist for the item calling the ShowPopupHelp function.\nExamples\nThis example calls a help file in a subdirectory of the current directory:\nShowPopupHelp ( \"Help/my_app.hlp\", this, 510)\nSee also\nHelp\nShowHelp\n2.4.809 Sign\nDescription\nReports whether a number is negative, zero, or positive.\nSyntax\nSign ( n )\nTable 2.1347:\nArgument\nDescription\nn\nThe number for which you want to find out the sign\nReturn value\nInteger.\nReturns a number (-1, 0, or 1) indicating the sign of n. If n is null, Sign returns null.\nExamples\nThis statement returns 1 (the number is positive):\nSign(5)\nThis statement returns 0 (zero has no sign):\n"}
{"page": 1525, "text": "Statements, Events, and Functions\nPage 1525\nSign(0)\nThis statement returns -1 (the number is negative):\nSign(-5)\nSee also\nSign method for DataWindows in Section 2.4.114, \u201cSign\u201d in DataWindow Reference.\n2.4.810 SignalError\nDescription\nCauses a SystemError event at the application level.\nSyntax\nSignalError ( { number } {, text } )\nTable 2.1348:\nArgument\nDescription\nnumber\n(optional)\nThe integer (stored in the number property of the Error object) to be used\nin the message object\ntext (optional)\nThe string (stored in the text property of the Error object) to be used in\nthe message object\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. The return value is usually not used.\nUsage\nDuring development you can use SignalError to test error-processing scripts.You can call\nPopulateError to populate the Error object and call SignalError without arguments. You can\nexamine how the SystemError event script handles the forced error. If you pass the optional\nnumber and text arguments to SignalError, it populates all the fields in the Error object and\nthen triggers a SystemError event.\nIn an application, SignalError can also be useful. For example, if a user error is so severe that\nyou do not want the application to continue, you can set values in the Error object, including\nyour own error number, and call SignalError. You need to include code in the SystemError\nevent script to recognize and handle the error you have created.If there is no script for the\nSystemError event, the SignalError function does nothing.\nFor the runtime error numbers assigned to the Number property of the Error object when an\napplication error occurs, see Section 7.1.3.2, \u201cHandling errors at runtime\u201d in Users Guide.\nExamples\nThese statements set values in the Error object and then trigger a SystemError event so the\nerror processing for these values can be tested:\nint error_number\nstring error_text\nError.Number = 1010\n"}
{"page": 1526, "text": "Statements, Events, and Functions\nPage 1526\nError.Text = \"Salary must be a positive number.\"\nError.Windowmenu = \"w_emp\"\n \nerror_number = Error.Number\nerror_text = Error.Text\n \nSignalError(error_number, error_text)\nSee also\nPopulateError\n2.4.811 Sin\nDescription\nCalculates the sine of an angle.\nSyntax\nSin ( n )\nTable 2.1349:\nArgument\nDescription\nn\nThe angle (in radians) for which you want the sine\nReturn value\nDouble.\nReturns the sine of n. If n is null, Sin returns null.\nExamples\nThis statement returns .8414709848078965:\nSin(1)\nThis statement returns 0:\nSin(0)\nThis statement returns 0:\nSin(Pi(1))\nSee also\nASin\nATan\nPi\nTan\nSin method for DataWindows in Section 2.4.115, \u201cSin\u201d in DataWindow Reference.\n2.4.812 Sleep\nDescription\n"}
{"page": 1527, "text": "Statements, Events, and Functions\nPage 1527\nCauses the application to pause for a specified time.\nSyntax\nSleep ( seconds )\nTable 2.1350:\nArgument\nDescription\nseconds\nLong for the number of seconds you want the application to pause\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nExamples\nThis example pauses the application for 5 seconds:\nSleep ( 5 )\n2.4.813 Sort\nSorts rows in a DataWindow control, DataStore, or child DataWindow, or items in a\nTreeView or ListView control.\nFor syntax for DataWindows and DataStores, see the Sort method for DataWindows in\nSection 9.206, \u201cSort\u201d in DataWindow Reference.\nTable 2.1351:\nTo sort\nUse\nItems in a TreeView\nSyntax 1\nItems in a ListView\nSyntax 2\n2.4.813.1 Syntax 1: For TreeView controls\nDescription\nSorts the children of an item in a TreeView control.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.Sort ( itemhandle , sorttype )\nTable 2.1352:\nArgument\nDescription\ntreeviewname\nThe name of the TreeView control in which you want to sort items.\n"}
{"page": 1528, "text": "Statements, Events, and Functions\nPage 1528\nArgument\nDescription\nitemhandle\nThe item for which you want to sort its children.\nsorttype\nThe sort method you want to use. Valid values are:\nAscending!\nDescending!\nUserDefinedSort!\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if it fails.\nUsage\nThe Sort function only sorts the immediate level beneath the specified item. If you want to\nsort multiple levels, use SortAll. If you specify UserDefinedSort! as your sorttype, define\nyour sort criteria in the Sort event of the TreeView control. To sort level 1 of a TreeView, set\nitemhandle to 0.\nExamples\nThis example sorts the children of the current TreeView item:\nlong ll_tvi\nll_tvi = tv_foo.FindItem(CurrentTreeItem! , 0)\ntv_foo.SetRedraw(false)\ntv_foo.Sort(ll_tvi , Ascending!)\ntv_foo.SetRedraw(true)\nSee also\nSortAll\n2.4.813.2 Syntax 2: For ListView controls\nDescription\nSorts items in ListView controls.\nApplies to\nListView controls\nSyntax\nlistviewname.Sort ( sorttype {, column } )\nTable 2.1353:\nArgument\nDescription\nlistviewname\nThe ListView in which you want to sort items.\nsorttype\nThe method you want to use when you sort the ListView items. Values\nare:\nAscending!\n"}
{"page": 1529, "text": "Statements, Events, and Functions\nPage 1529\nArgument\nDescription\nDescending!\nUnsorted!\nUserDefinedSort!\ncolumn\n(optional)\nThe number of the column by which you wish to sort the ListView items.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if it fails.\nUsage\nThe default sort is alphanumeric.\nIf you do not specify a column to sort, the first column is sorted.\nExamples\nThis example sorts the items in column three of a ListView:\nlv_list.SetRedraw(false)\nlv_list.Sort(Ascending! , 3)\nlv_list.SetRedraw(true)\nSee also\nSortAll\n2.4.814 SortAll\nDescription\nSorts all the levels below an item in the TreeView item hierarchy.\nApplies to\nTreeView controls\nSyntax\ntreeviewname.SortAll ( itemhandle, sorttype )\nTable 2.1354:\nArgument\nDescription\ntreeviewname\nThe TreeView control in which you want to sort the subsequent levels in\nan item's hierarchy.\nitemhandle\nThe item for which you want to sort all the levels below it.\nsorttype\nThe sort method you want to use. Values are:\nAscending!\nDescending!\n"}
{"page": 1530, "text": "Statements, Events, and Functions\nPage 1530\nArgument\nDescription\nUnsorted!\nUserDefinedSort!\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nIf you specify UserDefinedSort! as your sorttype, define your sort criteria in the Sort event of\nthe TreeView control.\nThe SortAll function cannot sort level 1 of a TreeView. However, level 1 is sorted\nautomatically when the TreeView's SortType property calls for sorting.\nExamples\nThis example sorts the subsequent levels recursively under the current TreeView item:\nlong ll_tvi\n \n//Find the current treeitem\nll_tvi = tv_list.FindItem(CurrentTreeItem! , 0)\n \n//Sort all children\ntv_list.SortAll(ll_tvi , Ascending!)\nThis example recursively sorts the entire TreeView control:\nlong ll_tvi\n \n//Find the root treeitem\nll_tvi = tv_list.FindItem(RootTreeItem! , 0)\n \n//Sort all children\ntv_list.SortAll(ll_tvi , Ascending!)\nSee also\nSort\n2.4.815 Space\nDescription\nBuilds a string of the specified length whose value consists of spaces.\nSyntax\nSpace ( n )\nTable 2.1355:\nArgument\nDescription\nn\nA long whose value is the length of the string to be filled with spaces.\nThe maximum value is 2,147,483,647.\n"}
{"page": 1531, "text": "Statements, Events, and Functions\nPage 1531\nReturn value\nString.\nReturns a string filled with n spaces if it succeeds and the empty string (\"\") if an error occurs.\nIf n is null, Space returns null.\nExamples\nThis statement puts a string whose value is four spaces in Name:\nstring Name\nName = Space(4)\nThis statement assigns 40 spaces to the string Name:\nstring Name\nName = Space(40)\nSee also\nFill\nSpace method for DataWindows in Section 2.4.117, \u201cSpace\u201d in DataWindow Reference.\n2.4.816 Sqrt\nDescription\nCalculates the square root of a number.\nSyntax\nSqrt ( n )\nTable 2.1356:\nArgument\nDescription\nn\nThe number for which you want the square root\nReturn value\nDouble.\nReturns the square root of n. If n is null, Sqrt returns null.\nUsage\nSqrt\n(n) is the same as n^.5. Taking the square root of a negative number causes an execution\nerror.\nExamples\nThis statement returns 1.414213562373095:\nSqrt(2)\nThis statement results in an error at execution time:\n"}
{"page": 1532, "text": "Statements, Events, and Functions\nPage 1532\nSqrt(-2)\nSee also\nSqrt method for DataWindows in Section 2.4.118, \u201cSqrt\u201d in DataWindow Reference.\n2.4.817 Start\nStart has two basic syntaxes.\nTable 2.1357:\nTo\nUse\nExecute a pipeline object\nSyntax 1\nActivate a timing object\nSyntax 2\n2.4.817.1 Syntax 1: For executing pipeline objects\nDescription\nExecutes a pipeline object, which transfers data from the source to the destination as\nspecified by the SQL query in the pipeline object. This pipeline object is a property of a user\nobject inherited from the pipeline system object.\nApplies to\nPipeline objects\nSyntax\npipelineobject.Start ( sourcetrans, destinationtrans, errorobject {, arg1,\n arg2,..., argn } )\nTable 2.1358:\nArgument\nDescription\npipelineobject\nThe name of a pipeline user object that contains the pipeline object to be\nexecuted\nsourcetrans\nThe name of a transaction object with which to connect to the source\ndatabase\ndestinationtrans\nThe name of a transaction object with which to connect to the target\ndatabase\nerrorobject\nThe name of a DataWindow control or Data Store in which to store the\npipeline error DataWindow\nargn (optional)\nOne or more retrieval arguments as specified for the pipeline object in the\nData Pipeline painter\nReturn value\nInteger.\nReturns 1 if it succeeds and a negative number if an error occurs. Error values are:\n"}
{"page": 1533, "text": "Statements, Events, and Functions\nPage 1533\n-1 -- Pipe open failed\n-2 -- Too many columns\n-3 -- Table already exists\n-4 -- Table does not exist\n-5 -- Missing connection\n-6 -- Wrong arguments\n-7 -- Column mismatch\n-8 -- Fatal SQL error in source\n-9 -- Fatal SQL error in destination\n-10 -- Maximum number of errors exceeded\n-12 -- Bad table syntax\n-13 -- Key required but not supplied\n-15 -- Pipe already in progress\n-16 -- Error in source database\n-17 -- Error in destination database\n-18 -- Destination database is read-only\nIf any argument's value is null, Start returns null.\nUsage\nA pipeline transfer involves several PowerBuilder objects. You need:\n\u2022 A pipeline object, which you define in the Data Pipeline painter. It contains the SQL\nstatements that specify what data is transferred and how that data is mapped from the\ntables in the source database to those in the target database.\n\u2022 A user object inherited from the pipeline system object. It inherits properties that let you\ncheck the progress of the pipeline transfer. In the painter, you define instance variables and\nwrite scripts for pipeline events.\n\u2022 A window that contains a DataWindow control or a Data Store for the pipeline-error\nDataWindow. Do not put a DataWindow object in the DataWindow control. The control\ndisplays PowerBuilder's pipeline-error DataWindow object if errors occur when the\npipeline executes.\nThe window can also include buttons, menus, or some other means to execute the pipeline,\nrepair errors, and cancel the execution. The scripts for these actions use the functions Start,\nRepair, and Cancel.\nBefore the application executes the pipeline, it needs to connect to the source and destination\ndatabases, create an instance of the user object, and assign the pipeline object to the user\nobject's DataObject property. Then it can call Start to execute the pipeline. This code may be\nin one or several scripts.\n"}
{"page": 1534, "text": "Statements, Events, and Functions\nPage 1534\nWhen you execute the pipeline, the piped data is committed according to the settings you\nmake in the Data Pipeline painter. You can specify that:\n\u2022 The data is committed when the pipeline finishes. If the maximum error limit is exceeded,\nall data is rolled back.\n\u2022 Data is committed at regular intervals, after a specified number of rows have been\ntransferred. When the maximum error limit is exceeded, all rows already transferred are\ncommitted.\nFor information about specifying the pipeline object in the Data Pipeline painter and how the\nsettings affect committing, see Section 5.2, \u201cWorking with Data Pipelines\u201d in Users Guide.\nFor more information on using a pipeline in an application, see Section 4.6, \u201cPiping Data\nBetween Data Sources\u201d in Application Techniques.\nWhen you dynamically assign the pipeline object to the user object's DataObject property,\nyou must remember to include the pipeline object in a dynamic library when you build your\napplication's executable.\nExamples\nThe following script creates an instance of the pipeline user object, assigns a pipeline object\nto the pipeline user object's DataObject property, and executes the pipeline. I_src and i_dst\nare transaction objects that have been previously declared and created. Another script has\nestablished the database connections.\nU_pipe is the user object inherited from the pipeline system object. I_upipe is an instance\nvariable of type u_pipe. P_pipe is a pipeline object created in the Data Pipeline painter:\ni_upipe = CREATE u_pipe\ni_upipe.DataObject = \"p_pipe\"\ni_upipe.Start(i_src, i_dst, dw_1)\nSee also\nCancel\nRepair\n2.4.817.2 Syntax 2: For activating timing objects\nDescription\nActivates a timing object causing a Timer event to occur repeatedly at the specified interval.\nApplies to\nTiming objects\nSyntax\ntimingobject.Start ( interval  )\nTable 2.1359:\nArgument\nDescription\ntimingobject\nThe name of the timing object you want to activate.\n"}
{"page": 1535, "text": "Statements, Events, and Functions\nPage 1535\nArgument\nDescription\ninterval\nAn expression of type double specifying the number of seconds that\nyou want between timer events. The interval can be a whole number or\nfraction greater than 0 and less than or equal to 4,294,967 seconds. An\ninterval of 0 is invalid.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if the timer is already running, the interval specified is invalid,\nor there are no system timers available.\nUsage\nThis syntax of the Start function is used to activate a nonvisual timing object. Timing objects\ncan be used to trigger a Timer event that is not associated with a PowerBuilder window, and\nthey are therefore useful for distributed PowerBuilder servers or shared objects that do not\nhave a window for each client connection.\nA timing object is a standard class user object inherited from the Timing system object.\nOnce you have created a timing object and coded its timer event, you can create any number\nof instances of the object within the constraints of your operating system. An operating\nsystem supports a fixed number of timers. Some of those timers will already be in use by\nPowerBuilder and other applications and by the operating system itself.\nTo activate an instance of the timing object, call the Start function, specifying the interval\nthat you want between Timer events. The Timer event of that instance is triggered as soon as\npossible after the specified interval, and will continue to be triggered until you call the Stop\nfunction on that instance of the timing object or the object is destroyed.\nWhen the Timer event occurs\nThe interval specified for the Start function is the minimum interval between Timer\nevents. All other posted events occur before the Timer event.\nThe resolution of the interval depends on your operating system.\nYou can determine what the timing interval is and whether a timer is running by accessing\nthe timing object's Interval and Running properties. These properties are read-only. You must\nstop and restart a timer in order to change the value of the timing interval.\nGarbage collection\nIf a timing object is running, it is not subject to garbage collection. Garbage collection\ncan occur only if the timing object is not running and there are no references to it.\nExamples\nExample 1\nSuppose you have a distributed application in which the local client performs some\nprocessing, such as calculating the value of a stock portfolio, based on values in a database.\n"}
{"page": 1536, "text": "Statements, Events, and Functions\nPage 1536\nThe client requests a user object on a remote server to retrieve the data values from the\ndatabase.\nCreate a standard class user object on the server called uo_timer, inherited from the Timing\nsystem object, and code its Timer event to refresh the data. Then the following code creates\nan instance, MyTimer, of the timing object uo_timer. The Start function activates the\ntimer with an interval of 60 seconds so that the request to the server is issued at 60-second\nintervals:\nuo_timer MyTimer\n \nMyTimer = CREATE uo_timer\nMyTimer.Start(60)\nExample 2\nThe following example uses a timing object as a shared object in a window that has buttons\nfor starting a timer, getting a hit count, stopping the timer, and closing the window. Status is\nshown in a single line edit called sle_state. The timing object, uo_timing, is a standard class\nuser object inherited from the Timing system object. It has one instance variable that holds\nthe number of times a connection is made:\nlong il_hits\nThe timing object uo_timing has three functions:\n\u2022 of_connect increments il_hits and returns an integer (this example omits the connection\ncode for simplicity):\nil_hits++\n// connection code omitted\nRETURN 1 \n\u2022 of_hitcount returns the value of il_hits:\nRETURN il_hits\n\u2022 of_resetcounter resets the value of the counter to 0:\nil_hits = 0\nThe timer event in uo_timing calls the of_connect function:\ninteger li_err\n \nli_err = This.of_connect()\nIF li_err <> 1 THEN\n   MessageBox(\"Timer Error\", \"Connection failed \")\nEND IF\nWhen the main window (w_timer) opens, its Open event script registers the uo_timing user\nobject as a shared object:\nErrorReturn result\nstring ls_result\n \nSharedObjectRegister(\"uo_timing\",\"Timing\")\nresult = SharedObjectGet(\"Timing\", iuo_timing)\n// convert enumerated type to string\n"}
{"page": 1537, "text": "Statements, Events, and Functions\nPage 1537\nls_result = of_converterror(result)\n \nIF result = Success! THEN\n   sle_stat.text = \"Object Registered\"\nELSE\n   MessageBox(\"Failed\", \"SharedObjectGet failed, \" &\n   + \"Status code: \"+ls_result)\nEND IF\nThe Start Timer button starts the timer with an interval of five seconds:\ndouble ld_interval\ninteger li_err\n \nIF (isvalid(iuo_timing)) THEN\n   li_err = iuo_timing.Start(5)\n   ld_interval = iuo_timing.interval\n   sle_2.text = \"Timer started. Interval is \" & \n   + string(ld_interval) + \" seconds\"\n   // disable Start Timer button\n   THIS.enabled = FALSE\nELSE\n   sle_2.text = \"No timing object\"\nEND IF\nThe Get Hits button calls the of_hitcount function and writes the result in a single line edit:\nlong ll_hits\n \nIF (isvalid(iuo_timing)) THEN\n   ll_hits = iuo_timing.of_hitcount()\n   sle_hits.text = string(ll_hits)\nELSE\n   sle_hits.text = \"\"\n   sle_stat.text = \"Invalid timing object...\"\nEND IF\nThe Stop Timer button stops the timer, re-enables the Start Timer button, and resets the hit\ncounter:\ninteger li_err\n \nIF (isvalid(iuo_timing)) THEN\n   li_err = iuo_timing.Stop()\n \n   IF li_err = 1 THEN\n   sle_stat.text = \"Timer stopped\"\n   cb_start.enabled = TRUE\n   iuo_timing.of_resetcounter()\n ELSE\n   sle_stat.text = \"Error - timer could \" & \n      not be stopped\"\n   END IF\n \nELSE\n   sle_stat.text = \"Error - no timing object\"\nEND IF\nThe Close button checks that the timer has been stopped and closes the window if it has:\nIF iuo_timing.running = TRUE THEN\n   MessageBox(\"Error\",\"Click the Stop Timer \" & \n   + \"button to clean up before closing\")\nELSE\n"}
{"page": 1538, "text": "Statements, Events, and Functions\nPage 1538\n   close(parent)\nEND IF\nThe Close event for the window unregisters the shared timing object:\nSharedObjectUnregister(\"Timing\")\nThe of_converterror window function converts the ErrorReturn enumerated type to a string. It\ntakes an argument of type ErrorReturn:\nstring ls_result\n \nCHOOSE CASE a_error\nCASE Success!\n   ls_result = \"The function succeeded\"\nCASE FeatureNotSupportedError!\n   ls_result = \"Not supported on this platform\"\nCASE SharedObjectExistsError!\n   ls_result = \"Instance name already used\"\nCASE MutexCreateError!\n   ls_result = \"Locking mechanism unobtainable\"\nCASE SharedObjectCreateInstanceError!\n   ls_result = \"Object could not be created\"\nCASE SharedObjectCreatePBSessionError!\n   ls_result = \"Could not create context session\"\nCASE SharedObjectNotExistsError!\n   ls_result = \"Instance name not registered\"\nCASE ELSE\n   ls_result = \"Unknown Error Code\"\nEND CHOOSE\n \nRETURN ls_result\nSee also\nStop\n2.4.818 StartHotLink\nDescription\nEstablishes a hot link with a DDE server application so that PowerBuilder is notified\nimmediately of any changes in the specified data. When the data changes in the server\napplication, it triggers a HotLinkAlarm event in the current application.\nSyntax\nStartHotLink ( location, applname, topic {, bAnsi} )\nTable 2.1360:\nArgument\nDescription\nlocation\nA string whose value is the location of the data in which a change of\nvalue triggers a HotLinkAlarm event. The format of the location depends\non the application that contains the data.\napplname\nA string whose value is the DDE name of the server application.\ntopic\nA string identifying the data or the instance of the application in which a\nchange triggers a HotLinkAlarm event (for example, in Microsoft Excel,\nthe topic name could be the name of an open spreadsheet).\n"}
{"page": 1539, "text": "Statements, Events, and Functions\nPage 1539\nArgument\nDescription\nbAnsi\n(optional)\nA boolean identifying whether the string to get from the DDE server is\nin ANSI format. If bAnsi is NULL, false, or empty, PowerBuilder will\nfirst try to get the data in a UNICODE formatted string. If bAnsi is true,\nPowerBuilder will try to get the data in an ANSI formatted string.\nReturn value\nInteger.\nReturns 1 if it succeeds. If an error occurs, StartHotLink returns a negative integer. Values\nare:\n-1 -- No server\n-2 -- Request denied\nIf any argument's value is null, StartHotLink returns null.\nUsage\nAfter establishing a hot link, you can include the following functions in the HotLinkAlarm\nevent:\n\u2022 GetDataDDEOrigin -- To determine what application sent the notification of changed data\n\u2022 GetDataDDE -- To obtain the new data\n\u2022 RespondRemote -- To acknowledge receipt of the data\nExamples\nIn this example, another PowerBuilder application has called the StartServerDDE function\nand identified itself as MyPBApp. This statement in your application establishes a hot link\nto data in MyPBApp. The values you specify for location and topic depend on conventions\nestablished by MyPBApp:\nStartHotLink(\"Any\", \"MyPBApp\", \"Any\")\nThis statement establishes a hot link with Microsoft Excel, which notifies the PowerBuilder\nwindow when the data at row 1 column 2 of REGION.XLS changes:\nStartHotLink(\"R1C2\", \"Excel\", \"Region.XLS\")\nSee also\nStopHotLink\n2.4.819 StartServerDDE\nDescription\nEstablishes your application as a DDE server. You specify the DDE name, topic, and items\nthat you support.\nSyntax\n"}
{"page": 1540, "text": "Statements, Events, and Functions\nPage 1540\nStartServerDDE ( { windowname, } applname, topic {, item } )\nTable 2.1361:\nArgument\nDescription\nwindowname\n(optional)\nThe name of the server window. The default is the current window.\napplname\nThe DDE name for your application.\ntopic\nA string whose value is the basic data grouping the DDE client\napplication references.\nitem (optional)\nA comma-separated list of one or more strings (data within topic)\nthat specify what your DDE server application supports (for example,\n\"Table1\",\"Table2\").\nReturn value\nInteger. Returns 1 if it succeeds. If an error occurs, StartServerDDE returns -1, meaning\nthe your application is already started as a server. If any argument's value is null,\nStartServerDDE returns null.\nUsage\nWhen a DDE client application sends a DDE request, the request includes one of the items\nyou have declared that you support. You determine how your application responds to each of\nthose items.\nA window must be open to provide a handle for the DDE conversation. You cannot call\nStartServerDDE and other DDE functions in an application object's events.\nWhen your application has established itself as a DDE server, other applications can send\nDDE requests that trigger these events in your application.\nTable 2.1362: Events triggered by DDE requests and DDE functions available to each event\nClient action\nEvent triggered\nFunctions available\nPurpose of function\nSends a request\nfor a hot link\nRemoteHotLinkStart\n \n \nSends a\ncommand to\nyour application\nRemoteExec\nGetCommandDDE\nGetCommandDDEOrigin\nObtain the command\nFind out what client\napplication sent the\ncommand\nSends data\nRemoteSend\nGetDataDDE\nGetDataDDEOrigin\nObtain the data\nFind out what client\napplication sent the data\nRequests data\nfrom your server\napplication\nRemoteRequest\nSetDataDDE\nRespondRemote\nSend the requested data\nAcknowledge the\nrequest\n"}
{"page": 1541, "text": "Statements, Events, and Functions\nPage 1541\nClient action\nEvent triggered\nFunctions available\nPurpose of function\nWants to\nterminate the hot\nlink\nRemoteHotLinkStop\n \n \nExamples\nThis statement causes your PowerBuilder application to begin acting as a server. It is known\nto other DDE applications as MyPBApp; its topic is System, and it supports items called\nTable1 and Table2:\nStartServerDDE(w_emp, \"MyPBApp\",\"System\", &\n   \"Table1\", \"Table2\")\nSee also\nStopServerDDE\n2.4.820 State\nDescription\nDetermines whether an item in a ListBox control is highlighted.\nApplies to\nListBox and PictureListBox controls\nSyntax\nlistboxname.State ( index )\nTable 2.1363:\nArgument\nDescription\nlistboxname\nThe name of the ListBox or PictureListBox in which you want to obtain\nthe state (highlighted or not highlighted) of the item identified by index\nindex\nThe number of the item for which you want to obtain the state\nReturn value\nInteger.\nReturns 1 if the item in listboxname identified by index is highlighted and 0 if it is not. If the\nindex does not point to a valid item number, State returns -1. If any argument's value is null,\nState returns null.\nUsage\nThe State and SetState functions are meant for a ListBox that allows multiple selections\n(its MultiSelect property is true). To find all of a list's selected items, loop through the list,\nchecking the state of each item.\nThe SelectedItem and SelectItem functions are meant for single-selection ListBox controls.\nSelectedItem reports the selection directly with no need for looping. In a multiple-selection\nListBox control, SelectedItem reports the first selected item only.\n"}
{"page": 1542, "text": "Statements, Events, and Functions\nPage 1542\nWhen you know the index of an item, you can use the Text function to get the item's text.\nExamples\nIf item 3 in lb_Contact is selected (highlighted), then this example sets li_Item to 1:\ninteger li_Item\nli_Item = lb_Contact.State(3)\nThe following statements obtain the text of all the selected items in a ListBox that allows the\nuser to select more than one item. The MessageBox function displays each item as it is found.\nYou could include other processing that created an array or list of the selected values:\ninteger li_ItemTotal, li_ItemCount\n \n// Get the number of items in the ListBox.\nli_ItemTotal = lb_contact.TotalItems( )\n \n// Loop through all the items.\nFOR li_ItemCount = 1 to li_ItemTotal\n   // Is the item selected? If so, display the text\n   IF lb_Contact.State(li_ItemCount) = 1 THEN &\n   MessageBox(\"Selected Item\", &\n   lb_Contact.text(li_ItemCount))\nNEXT\nThis statement executes some statements if item 3 in the ListBox lb_Contact is highlighted:\nIF lb_Contact.State(3) = 1 THEN ...\nSee also\nSelectedItem\nSetState\n2.4.821 StepIt\nDescription\nIncrements the current position in a progress bar control by the value specified in the SetStep\nproperty of the control.\nApplies to\nProgress bar controls\nSyntax\ncontrol.StepIt ( )\nTable 2.1364:\nArgument\nDescription\ncontrol\nThe name of the progress bar\nReturn value\nInteger.\n"}
{"page": 1543, "text": "Statements, Events, and Functions\nPage 1543\nReturns 1 if it succeeds and -1 if there is an error.\nUsage\nStepIt causes the position in a progress bar to wrap if the value of the SetStep takes the\ncurrent position out of range. For example, if the SetStep value is 40, the current position\n80, and the range is set from 0 to 100, the position on the redrawn progress bar after you call\nStepIt is 20.\nThe SetStep property can have a negative value. The default value for SetStep is 10.\nExamples\nThis statement adds the SetStep increment to a progress bar control:\nHProgressBar.StepIt ( )\nSee also\nSetRange\n2.4.822 Stop\nStop has two syntaxes.\nTable 2.1365:\nTo\nUse\nDeactivate a timing object\nSyntax 1\nStop playing an animation\nSyntax 2\n2.4.822.1 Syntax 1: For deactivating timing objects\nDescription\nDeactivates a timing object.\nApplies to\nTiming objects\nSyntax\ntimingobject.Stop ( )\nTable 2.1366:\nArgument\nDescription\ntimingobject\nThe name of the timing object you want to deactivate\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if the timer is not running or could not be stopped.\n"}
{"page": 1544, "text": "Statements, Events, and Functions\nPage 1544\nUsage\nUse this function to deactivate a timing object. A stopped timer can be reactivated with the\nStart function.\nExamples\nThis statement stops the timing object instance MyTimer:\nMyTimer.Stop()\nSee also\nStart\n2.4.822.2 Syntax 2: For stopping an animation from playing\nDescription\nStops an animation (an AVI clip) from playing.\nApplies to\nAnimation controls\nSyntax\nanimationname.Stop ( )\nTable 2.1367:\nArgument\nDescription\nanimationname\nThe name of the animation control displaying the AVI clip\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if the animation is not running or could not be stopped.\nUsage\nUse this function to stop an animation that is playing. A stopped animation can be restarted\nwith the Play function.\nExamples\nThis statement stops the AVI clip that is playing in the animation control MyAnimation:\nMyAnimation.Stop()\nSee also\nPlay\n2.4.823 StopHotLink\nDescription\nTerminates a hot link with a DDE server application.\n"}
{"page": 1545, "text": "Statements, Events, and Functions\nPage 1545\nCaution\nAll arguments must match the arguments in an earlier StartHotLink call.\nSyntax\nStopHotLink ( location, applname, topic )\nTable 2.1368:\nArgument\nDescription\nlocation\nA string whose value is the location at which you want to end the hot\nlink, as specified in the StartHotLink function that established the link\napplname\nA string whose value is the DDE name of the server application, as\nspecified in the StartHotLink function\ntopic\nA string identifying the data or the instance of the application in which\nthe hot link is stopped, as specified in the StartHotLink function\nReturn value\nInteger.\nReturns 1 if it succeeds. If an error occurs, StopHotLink returns a negative integer. Values\nare:\n-1 -- Link was not started\n-2 -- Request denied\n-3 -- Could not terminate server\nIf any argument's value is null, StopHotLink returns null.\nExamples\nIf another PowerBuilder application called StartServerDDE to establish itself as a\nserver using the name MyPBApp, then your application can act as a DDE client and call\nStartHotLink to establish a hot link with MyPBApp. The following statement ends that hot\nlink. The values you specify for location and topic depend on conventions established by\nMyPBApp:\nStopHotLink(\"Any\", \"MyPBApp\", \"Any\")\nThis statement stops the hot link with Microsoft Excel for row 1 column 2 in the spreadsheet\nREGION.XLS:\nStopHotLink(\"R1C2\", \"Excel\", \"Region.XLS\")\nSee also\nStartHotLink\n2.4.824 StopNavigation\nDescription\n"}
{"page": 1546, "text": "Statements, Events, and Functions\nPage 1546\nStops navigating the page.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.StopNavigation ( )\nTable 2.1369:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if an error occurs.\nExamples\nInteger li_rtn\nli_rtn = wb_1.StopNavigation()\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\nPrintAsPDF\nPauseDownload\nRegisterEvent\nResumeDownload\nRefresh\nUnregisterEvent\nZoom\n2.4.825 StopServerDDE\nDescription\nCauses your application to stop acting as a DDE server application. Any subsequent requests\nfrom a DDE client application fail.\nSyntax\n"}
{"page": 1547, "text": "Statements, Events, and Functions\nPage 1547\nStopServerDDE ( { windowname, } applname, topic )\nTable 2.1370:\nArgument\nDescription\nwindowname\n(optional)\nThe name of the server window. The default is the current window. If\nyou have more than one server window, windowname is required.\napplname\nThe DDE name for your PowerBuilder application.\ntopic\nA string whose value is the topic you declared when you called\nStartServerDDE.\nReturn value\nInteger.\nReturns 1 if it succeeds. If an error occurs, StopServerDDE returns -1, meaning the DDE\nserver was not started. If any argument's value is null, StopServerDDE returns null.\nCaution\nThe arguments applname and topic must match the arguments in a prior\nStartServerDDE call.\nExamples\nThis statement causes the PowerBuilder application MyPBApp to stop acting as a server:\nStopServerDDE(w_emp, \"MyPBApp\", \"System\")\nSee also\nStartServerDDE\n2.4.826 String\nString has two syntaxes.\nTable 2.1371:\nTo\nUse\nFormat data as a string according to a specified display format mask\nSyntax 1\nConvert a blob to a string\nSyntax 2\n2.4.826.1 Syntax 1: For formatting data\nDescription\nFormats data, such as time or date values, according to a format mask. You can convert and\nformat date, DateTime, numeric, and time data. You can also apply a display format to a\nstring.\nSyntax\nString ( data {, format } )\n"}
{"page": 1548, "text": "Statements, Events, and Functions\nPage 1548\nTable 2.1372:\nArgument\nDescription\ndata\nThe data you want returned as a string with the specified formatting. Data\ncan have a date, DateTime, numeric, time, or string datatype. Data can\nalso be an Any variable containing one of these datatypes.\nformat (optional) A string whose value is the display masks you want to use to format\nthe data. The masks consists of formatting information specific to the\ndatatype of data. If data is type string, format is required.\nThe format can consist of more than one mask, depending on the datatype\nof data. Each mask is separated by a semicolon. (For details on each\ndatatype, see Usage).\nReturn value\nString.\nReturns data in the specified format if it succeeds and the empty string (\"\") if the datatype of\ndata does not match the type of display mask specified, format is not a valid mask, or data is\nan incompatible datatype.\nUsage\nFor date, DateTime, numeric, and time data, PowerBuilder uses the system's default format\nfor the returned string if you do not specify a format. For numeric data, the default format is\nthe [General] format.\nFor string data, a display format mask is required. (Otherwise, the function would have\nnothing to do.)\nThe format can consist of one or more masks:\n\u2022 Formats for date, DateTime, string, and time data can include one or two masks. The first\nmask is the format for the data; the second mask is the format for a null value.\n\u2022 Formats for numeric data can have up to four masks. A format with a single mask handles\nboth positive and negative data. If there are additional masks, the first mask is for positive\nvalues, and the additional masks are for negative, zero, and null values.\nTo display additional characters as part of the mask for a decimal value, you must precede\neach character with a backslash. For example, to display a decimal number with two digits of\nprecision preceded by four asterisks, you must type a backslash before each asterisk:\ndec{2} amount\nstring = ls_result\namount = 123456.32\nls_result = string(amount,\"\\*\\*\\*\\*0.00\")\nThe resulting string is ****123456.32.\nFor more information on specifying display formats, see Section 6.5.4, \u201cDefining display\nformats\u201d in Users Guide. Note that, although a format can include color specifications,\nthe colors are ignored when you use String in PowerScript. Colors appear only for display\nformats specified in the DataWindow painter.\n"}
{"page": 1549, "text": "Statements, Events, and Functions\nPage 1549\nIf the display format does not match the datatype, PowerBuilder tries to apply the mask,\nwhich can produce unpredictable results.\nTimes and dates from a DataWindow control\nWhen you call GetItemTime or GetItemString as an argument for the String function\nand do not specify a display format, the value is formatted as a DateTime value. This\nstatement returns a string like \"2/26/03 00:00:00\":\nString(dw_1.GetItemTime(1, \"start_date\"))\nInternational deployment\nWhen you use String to format a date and the month is displayed as text (for example, the\ndisplay format includes \"mmm\"), the month is in the language of the runtime DLLs available\nwhen the application is run. If you have installed localized runtime files in the development\nenvironment or on a user's machine, then on that machine, the month in the resulting string is\nin the language of the localized files.\nFor information about the localized runtime files, which are available in French, German,\nItalian, Spanish, Dutch, Danish, Norwegian, and Swedish, see Section 8.1, \u201cInternationalizing\nan Application\u201d in Application Techniques.\nHandling ANSI data\nSince this function does not have an encoding argument to allow you to specify the encoding\nof the data, the string returned can contain garbage characters if the data has ANSI encoding.\nYou can handle this by converting the ANSI string returned from the String function to a\nUnicode blob, and then converting the ANSI string in the blob to a Unicode string, using the\nencoding parameters provided in the Blob and String conversion functions:\nls_temp = String(long, \"address\" )\nlb_blob = blob(ls_temp) //EncodingUTF16LE! is default\nls_result = string(lb_blob, EncodingANSI!)\nMessage object\nYou can also use String to extract a string from the Message object after calling TriggerEvent\nor PostEvent. For more information, see the TriggerEvent or PostEvent functions.\nExamples\nThis statement applies a display format to a date value and returns Jan 31, 2002:\nString(2002-01-31, \"mmm dd, yyyy\")\nThis example applies a format to the value in order_date and sets date1 to 6-11-02:\nDate order_date = 2002-06-11\nstring date1\ndate1 = String(order_date,\"m-d-yy\")\nThis example includes a format for a null date value so that when order_date is null, date1 is\nset to none:\nDate order_date = 2002-06-11\nstring date1\nSetNull(order_date)\ndate1 = String(order_date, \"m-d-yy;'none'\")\n"}
{"page": 1550, "text": "Statements, Events, and Functions\nPage 1550\nThis statement applies a format to a DateTime value and returns Jan 31, 2001 6 hrs and 8\nmin:\nString(DateTime(2001-01-31, 06:08:00), &\n   'mmm dd, yyyy h \"hrs and\" m \"min\"')\nThis example builds a DateTime value from the system date and time using the Today and\nNow functions. The String function applies formatting and sets the text of sle_date to that\nvalue, for example, 6-11-02 8:06 pm:\nDateTime sys_datetime\nstring datetime1\nsys_datetime = DateTime(Today(), Now())\nsle_date.text = String(sys_datetime, &\n   \"m-d-yy h:mm am/pm;'none'\")\nThis statement applies a format to a numeric value and returns $5.00:\nString(5,\"$#,##0.00\")\nThese statements set string1 to 0123:\ninteger nbr = 123\nstring string1\nstring1 = String(nbr,\"0000;(000);****;empty\")\nThese statements set string1 to (123):\ninteger nbr = -123\nstring string1\nstring1 = String(nbr,\"000;(000);****;empty\")\nThese statements set string1 to ****:\ninteger nbr = 0\nstring string1\nstring1 = String(nbr,\"0000;(000);****;empty\")\nThese statements set string1 to \"empty\":\ninteger nbr\nstring string1\nSetNull(nbr)\nstring1 = String(nbr,\"0000;(000);****;empty\")\nThis statement formats string data and returns A-B-C. The display format assigns a character\nin the source string to each @ and inserts other characters in the format at the appropriate\npositions:\nString(\"ABC\", \"@-@-@\")\nThis statement returns A*B:\nString(\"ABC\", \"@*@\")\nThis statement returns ABC:\nString(\"ABC\", \"@@@\")\nThis statement returns a space:\nString(\"ABC\", \" \")\nThis statement applies a display format to time data and returns 6 hrs and 8 min:\n"}
{"page": 1551, "text": "Statements, Events, and Functions\nPage 1551\nString(06:08:02,'h \"hrs and\" m \"min\"')\nThis statement returns 08:06:04 pm:\nString(20:06:04,\"hh:mm:ss am/pm\")\nThis statement returns 8:06:04 am:\nString(08:06:04,\"h:mm:ss am/pm\")\nSee also\nString method for DataWindows in Section 2.4.121, \u201cString\u201d in DataWindow Reference.\n2.4.826.2 Syntax 2: For blobs\nDescription\nConverts data in a blob to a string value. If the blob's value is not text data, String attempts to\ninterpret the data as characters.\nSyntax\nString ( blob {,encoding} )\nTable 2.1373:\nArgument\nDescription\nblob\nThe blob whose value you want returned as a string. Blob can also be an\nAny variable containing a blob.\nencoding\nCharacter encoding of the blob you want converted. Values are:\n\u2022 EncodingANSI!\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE! (default)\n\u2022 EncodingUTF16BE!\nReturn value\nString.\nReturns the value of blob as a string if it succeeds and the empty string (\"\") if it fails. It the\nblob does not contain string data, String interprets the data as characters, if possible, and\nreturns a string. If blob is null, String returns null.\nUsage\nIf the encoding argument is not provided, String converts a Unicode blob to a Unicode string.\nYou must provide the encoding argument if the blob has a different encoding.\nIf the blob has a byte-order mark (BOM), String filters it out automatically. For example,\nsuppose the blob's hexadecimal display is: FF FE 54 00 68 00 69 00 73 00. The BOM is FF\nFE, which indicates that the blob has UTF-16LE encoding, and is filtered out. The string\nreturned is \"This\".\nYou can also use String to extract a string from the Message object after calling TriggerEvent\nor PostEvent. For more information, see the TriggerEvent or PostEvent functions.\n"}
{"page": 1552, "text": "Statements, Events, and Functions\nPage 1552\nExamples\nThis example converts the blob instance variable ib_sblob, which contains string data in\nANSI format, to a string and stores the result in sstr:\nstring sstr\nsstr = String(ib_sblob, EncodingANSI!)\nThis example stores today's date and test status information in the blob bb. Pos1 and pos2\nstore the beginning and end of the status text in the blob. Finally, BlobMid extracts a \"sub-\nblob\" that String converts to a string. Sle_status displays the returned status text:\nblob{100} bb\nlong pos1, pos2\nstring test_status\ndate test_date\n \ntest_date = Today()\nIF DayName(test_date) = \"Wednesday\" THEN &\n   test_status = \"Coolant Test\"\nIF DayName(test_date) = \"Thursday\" THEN &\n   test_status = \"Emissions Test\"\n \n// Store data in the blob\npos1 = BlobEdit( bb, 1, test_date)\npos2 = BlobEdit( bb, pos1, test_status )\n \n... // Some processing\n \n// Extract the status stored in bb and display it\nsle_status.text = String( &\n   BlobMid(bb, pos1, pos2 - pos1))\nSee also\nBlob\nString method for DataWindows in Section 2.4.121, \u201cString\u201d in DataWindow Reference.\n2.4.827 Submit\nDescription\nSends the data to the server via the HTTP POST method and then gets the response body\nfrom the server.\nIt is not recommended to use this method to process large data (20 MB or 100,000 data rows\ncan be considered as large data based on our tests).\nApplies to\nRestClient object\nSyntax\nobjectname.Submit(string urlName, ref string response, DWControl dwObject{, boolean\n format})\nobjectname.Submit(string urlName, ref string response, DWControl dwObject\n {,DWBuffer dwbuffer}, boolean changedonly, boolean format)\nobjectname.Submit(string urlName, ref string response, DWControl dwObject, boolean\n primarydata, boolean filterdata, boolean deletedata, boolean dwcdata {, boolean\n format})\n"}
{"page": 1553, "text": "Statements, Events, and Functions\nPage 1553\nobjectname.Submit(string urlName, ref string response, DWControl dwObject, DWBuffer\n dwbuffer{,long startrow{, long endrow{, long startcol{, long endcol}}}} {, boolean\n format}) \nobjectname.Submit(string urlName, ref string response, ref JsonPackage package)\nTable 2.1374:\nArgument\nDescription\nobjectname\nThe name of the RESTClient object.\nurlName\nThe URL indicating where the data will be submitted.\nresponse\nThe content of the server response.\nIf RESTClient failed to send request or server provides no response, the\nresponse value is an empty string. If the response value is compressed\nas gzip, it will be automatically decompressed. Only gzip compression\nformat is supported at this moment. If the server specified the Content-\nType response header, and in which the encoding charset is specified, this\nfunction will encode the data with the specified charset, if charset is not\nspecified, this function will encode the data in UTF-8 by default.\ndwObject\nThe DataWindow control, DataStore, or DataWindowChild object whose\ndata will be submitted.\nprimarydata\nA boolean indicating whether to export and submit the data from the\nprimary buffer.\n\u2022 True -- to export.\n\u2022 False -- not to export.\nfilterdata\nA boolean indicating whether to export and submit the data from the filter\nbuffer.\n\u2022 True -- to export.\n\u2022 False -- not to export.\ndeletedata\nA boolean indicating whether to export and submit the data from the\ndelete buffer.\n\u2022 True -- to export.\n\u2022 False -- not to export.\ndwcdata\nA boolean specifying whether to export the DataWindowChild data.\n\u2022 True -- to export. If it is to export the DataWindowChild data, data\nfrom all buffers will be exported to a plain JSON, regardless of the\nvalue of the other arguments.\n\u2022 False -- not to export.\ndwbuffer\nA value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to export the data. For a list of\nvalid values, see Section 6.9, \u201cDWBuffer\u201d in DataWindow Reference.\n"}
{"page": 1554, "text": "Statements, Events, and Functions\nPage 1554\nArgument\nDescription\nIf not specified, all of the DataWindow buffers will be exported,\nhowever, the data for DataWindowChild will not be exported (even if\nchangedonly is false).\nstartrow\n(optional)\nA long value specifying the start row in the dwbuffer DataWindow\nbuffer. The default is 1. If it is 0 or negative, 1 is used.\nendrow\n(optional)\nA long value specifying the end row in the dwbuffer DataWindow buffer.\nThe default is the rest of the rows. If it is 0 or negative, it indicates the\nrest of rows.\nstartcol\n(optional)\nA long value specifying the start column in the dwbuffer DataWindow\nbuffer. The default is 1. If it is 0 or negative, 1 is used.\nendcol (optional) A long value specifying the end column in the dwbuffer DataWindow\nbuffer. The default is the rest of the columns. If it is 0 or negative, it\nindicates the rest of columns.\nchangedonly\nA boolean specifying the changing flag.\n\u2022 True -- to export the changed rows only (and all rows of the Delete\nbuffer).\n\u2022 False -- to export all rows. The default is false.\nformat (optional) A boolean specifying the JSON format.\n\u2022 True indicates the DataWindow JSON. For syntax 1, 3, 4, the default is\ntrue.\n\u2022 False indicates the plain JSON. For syntax 2, the default is false.\nSee Section 4.7.1, \u201cSupported JSON formats\u201d in Application Techniques\nfor details about the JSON format.\npackage\nA reference to JsonPackage object whose data will be submitted.\nReturn value\nInteger. Returns 1 if the function succeeds and a negative value if an error occurs. If any\nargument's value is null, the method returns null.\n1 -- Success\n-1 -- General error\n-2 -- Invalid URL\n-3 -- Cannot connect to the Internet\n-4 -- Timeout\n-6 -- Failed to export JSON\n-7 -- Failed to decompress data\n-10 -- The token is invalid or has expired\n-14 -- Code conversion failed\n"}
{"page": 1555, "text": "Statements, Events, and Functions\nPage 1555\n-15 -- Unsupported character set\nUsage\nSyntax 1 submits the data of the DataWindow primary buffer only. If you want to submit the\ndata of the other DataWindow buffers, use Syntax 2 or 3.\nExamples\nThe following example demonstrates the usage of syntax 1: Submit(string urlName, ref string\nresponse, DWControl dwObject{, boolean format}).\nString ls_P025_ResponseBody\nInteger li_P025_SendReturn\nRestClient lrc_P025\nlrc_P025 = Create RestClient\nlrc_P025.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" )\nlrc_P025.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\n//Modifies the data in dw_Data\nIf dw_Data.GetRow() > 0 Then \n dw_Data.SetItem(dw_Data.GetRow(), 2, \"Test submit\")\n //.... \nEnd If\n//Uses the DataWindow JSON\n//Server determines whether to update according to the data state\n//DataWindow column name and type must match with that of server\nli_P025_SendReturn = lrc_P025.submit (\"https://demo.appeon.com/PB/webapi_client/\ndepartment/updateByJson\",ls_P025_Responsebody, dw_Data,True)\nIf li_P025_SendReturn <> 1 Or lrc_P025.GetResponseStatusCode() <> 200 Then\n //Checks if any error information \nEnd If\n//Finds out if data is updated via https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\nlrc_P025.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nThe following example submits the data of the DataWindow primary buffer using syntax 2:\nSubmit(string urlName, ref string response, DWControl dwObject {,DWBuffer dwbuffer},\nboolean changedonly, boolean format).\nString ls_P025_ResponseBody\nInteger li_P025_SendReturn\nRestClient lrc_P025\nlrc_P025 = Create RestClient\nlrc_P025.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" )\nlrc_P025.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\n//Modifies the data in dw_Data\nIf dw_Data.GetRow() > 0 Then \n dw_Data.SetItem(dw_Data.GetRow(), 2, \"Test submit primary\")\n //.... \nEnd If\n//Uses the DataWindow JSON\n//Server determines whether to update according to the data state\n//DataWindow column name and type must match with that of server\nli_P025_SendReturn = lrc_P025.Submit(\"https://demo.appeon.com/PB/webapi_client/\ndepartment/updateByJson\",ls_P025_Responsebody, dw_Data,Primary!, True, True)\n"}
{"page": 1556, "text": "Statements, Events, and Functions\nPage 1556\nIf li_P025_SendReturn <> 1 Or lrc_P025.GetResponseStatusCode() <> 200 Then\n //Checks if any error information\nEnd If\n//Finds out if data is updated via https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\nlrc_P025.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nThe following example submits the data of the DataWindow delete buffer using syntax 3:\nSubmit(string urlName, ref string response, DWControl dwObject, boolean primarydata,\nboolean filterdata, boolean deletedata, boolean dwcdata {, boolean format}).\nString ls_P025_ResponseBody\nInteger li_P025_SendReturn\nRestClient lrc_P025\nlrc_P025 = Create RestClient\nlrc_P025.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" )\nlrc_P025.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\n//Modifies the data in dw_Data\nIf dw_Data.RowCount() > 0 Then \n dw_Data.DeleteRow( dw_Data.RowCount())\n //.... \nEnd If\n//Uses the DataWindow JSON\n//Server determines whether to update according to the data state\n//DataWindow column name and type must match with that of server\nli_P025_SendReturn = lrc_P025.Submit(\"https://demo.appeon.com/PB/webapi_client/\ndepartment/updateByJson\", ls_P025_Responsebody, dw_Data, False, False, True, False,\n True)\nIf li_P025_SendReturn <> 1 Or lrc_P025.GetResponseStatusCode() <> 200 Then\n //Checks if any error information\nEnd If\n//Finds out if data is deleted via https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\nlrc_P025.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nThe following example submits the data of the specified row and column using syntax\n4: Submit(string urlName, ref string response, DWControl dwObject, DWBuffer\ndwbuffer{,long startrow{, long endrow{, long startcol{, long endcol}}}} {, boolean\nformat}).\nString ls_P025_ResponseBody\nInteger li_P025_SendReturn\nRestClient lrc_P025\nlrc_P025 = Create RestClient\nlrc_P025.SetRequestHeaders( \"Content-Type:application/json;charset=UTF-8~r~nAccept-\nEncoding:gzip\" )\n//Retrieves data for dw_Data\nlrc_P025.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\n//Modifies the data in dw_Data\nIf dw_Data.GetRow() > 0 Then \n dw_Data.SetItem( dw_Data.GetRow(), 2,\"Submit row col\"+String(rand(100)))\n dw_Data.SetItem( dw_Data.GetRow(), 3,rand(1000))\n //.... \nEnd If\n"}
{"page": 1557, "text": "Statements, Events, and Functions\nPage 1557\n//Uses the DataWindow JSON\n//Server determines whether to update according to the data state\n//DataWindow column name and type must match with that of server\nli_P025_SendReturn = lrc_P025.Submit(\"https://demo.appeon.com/PB/webapi_client/\ndepartment/updateByJson\", ls_P025_Responsebody, dw_Data, Primary!,1, 2, 1, 2)\nIf li_P025_SendReturn <> 1 Or lrc_P025.GetResponseStatusCode() <> 200 Then\n //checke the failed information \nEnd If\n//Finds out if data of column 2 is updated via https://demo.appeon.com/PB/\nwebapi_client/api/department/retrieve\nlrc_P025.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nThe following example submits data via JSONPackage object and token authentication using\nsyntax 5: Submit(string urlName, ref string response, ref JsonPackage package).\nJsonPackage ljpk_submit\nRestClient lrc_JPK_Submit\nString ls_P017_Token\nString ls_Submit_Responsebody\nInteger li_JsonpackageSetValueReturn\nInteger li_P017_GetTokenReturn\nInteger li_SubmitReturn\nljpk_submit = Create JsonPackage\nlrc_JPK_Submit = Create RestClient\n//Sets the token parameters\nTokenRequest ltreq_P017_Appeon\nltreq_P017_Appeon.tokenlocation = \"https://demo.appeon.com/pb/identityserver/\nconnect/token\"\nltreq_P017_Appeon.method = \"post\"\nltreq_P017_Appeon.GrantType = \"password\"\nltreq_P017_Appeon.ClientId = \"P0VRQ-ddHn/WWd6lcCNJbaO9ny-JCNHirDJkHNgZ0-M=\"\nltreq_P017_Appeon.ClientSecret = \"K7gNU3sdo-OL0wNhqoVWhr3g6s1xYv72ol/pe/Unols=\" \nltreq_P017_Appeon.UserName = \"TestUser\"\nltreq_P017_Appeon.PassWord = \"TestPassword\"\n//Gets token via RESTClient\nli_P017_GetTokenReturn = lrc_JPK_Submit.GetOauthtoken( ltreq_P017_Appeon,\n ls_P017_Token)\nIf li_P017_GetTokenReturn = 1 Then\n lrc_JPK_Submit.SetRequestHeaders( \"Content-Type:application/\njson;charset=UTF-8~r~nAccept-Encoding:gzip\" )\n lrc_JPK_Submit.SetOauthToken( ls_P017_Token ) //Sets the authentication \n lrc_JPK_Submit.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\n  //Modifies data\n  If dw_Data.GetRow() >0 Then\n   dw_Data.SetItem(dw_Data.GetRow(),2,\"Test submit from\n jsonpackage\"+String(rand(100)))\n   //...\n  End If\n //Value of JSONPackage comes from dw_Data\n li_JsonpackageSetValueReturn = ljpk_submit.setvalue( \"AppeonJsonPackageKey\",\n dw_Data, True) \n  \n //Submits the DataWindow data to server\n //Requires token authentication\n //DataWindow column name and type must match with that of server\n li_SubmitReturn = lrc_JPK_Submit.Submit( \"https://demo.appeon.com/PB/\nwebapi_client/identity/department/UpdateByJsonPackage\",ls_Submit_Responsebody,\n ljpk_submit)\n"}
{"page": 1558, "text": "Statements, Events, and Functions\nPage 1558\n  If li_SubmitReturn <> 1 Or lrc_JPK_Submit.GetResponseStatusCode() <> 200 Then\n   //Checks if any error information and checks the submit parameter:\n ls_Submit_Responsebody \n  End If\n \n //Finds out if data is updated via https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\n lrc_JPK_Submit.Retrieve( dw_Data, \"https://demo.appeon.com/PB/webapi_client/api/\ndepartment/retrieve\")\nEnd If\n2.4.828 SuspendTransaction (obsolete)\nDescription\nSuspends the EAServer transaction associated with the calling thread.\nObsolete function\nSuspendTransaction is obsolete, because EAServer is no longer supported since\nPowerBuilder 2017.\nApplies to\nCORBACurrent objects\nSyntax\nCORBACurrent.SuspendTransaction (  )\nTable 2.1375:\nArgument\nDescription\nCORBACurrent\nReference to the CORBACurrent service instance\nReturn value\nUnsigned long.\nReturns a handle that refers to the transaction associated with the thread or 0 if an error\noccurs.\nUsage\nThe SuspendTransaction function returns a handle referring to the transaction associated\nwith the calling thread. This handle can be passed to the ResumeTransaction function on the\nsame or a different thread. When SuspendTransaction is called, the current thread is no longer\nassociated with a transaction.\nSuspendTransaction can be called by a client or a component that is marked as OTS style. It\nmust be using the two-phase commit transaction coordinator (OTS/XA).\nExamples\nThis example shows the use of the SuspendTransaction function to disassociate the calling\nthread from the current transaction:\n// Instance variable:\n// CORBACurrent corbcurr\ninteger li_rc\nunsignedlong ll_handle\n// Get and initialize an instance of CORBACurrent\n"}
{"page": 1559, "text": "Statements, Events, and Functions\nPage 1559\n...\nli_rc = corbcurr.BeginTransaction()\n// do some transactional work\nll_handle = corbcurr.SuspendTransaction()\n// do some nontransactional work\nli_rc = corbcurr.ResumeTransaction(ll_handle)\n// do some more transactional work\nli_rc = corbcurr.CommitTransaction()\nSee also\nBeginTransaction (obsolete)\nCommitDocking\nGetTransactionName (obsolete)\nResumeTransaction (obsolete)\nRollbackTransaction (obsolete)\nSetTimeout (obsolete)\n2.4.829 SymmetricDecrypt\nDescription\nDecrypts a blob value using symmetric algorithm.\nApplies to\nCrypterObject objects\nSyntax\ncrypter.SymmetricDecrypt ( algorithm, variable, key{, operationmode{, iv{,\n padding}}})\nTable 2.1376:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object.\nalgorithm\nA value of the SymmetricAlgorithm enumerated type that specifies the\ntype of symmetric algorithm.\nValues are:\n\u2022 AES! \u2013 The Advanced Encryption Standard\n\u2022 DES! \u2013 The Data Encryption Standard\n\u2022 TDES! \u2013 The Triple-DES\n\u2022 DESX! \u2013 The DES-XEX3\n\u2022 Blowfish! \u2013 The Blowfish\nvariable\nA blob whose value is the data you want to decrypt with symmetric\nalgorithm.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n"}
{"page": 1560, "text": "Statements, Events, and Functions\nPage 1560\nArgument\nDescription\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nkey\nA blob specifying the secret key.\nThe length of the secret key can be 128 bits, 192 bits, 256 bits with AES.\nThe length of the secret key must be 64 bits with DES.\nThe length of the secret key can be 128 bits, 192 bits with TDES.\nThe length of the secret key must be 192 bits with DESX.\nThe length of the secret key can be 32 bits~448 bits with Blowfish.\noperationmode\n(optional)\nA value of the OperationMode enumerated type that specifies the mode\nof operation.\nValues are:\n\u2022 OperationModeECB! \u2013 (Default) The Electronic Codebook (ECB)\nmode\n\u2022 OperationModeCBC! \u2013 The Cipher Block Chaining (CBC) mode\n\u2022 OperationModeCFB! \u2013 The Cipher Feedback (CFB) mode\n\u2022 OperationModeOFB! \u2013 The Output Feedback (OFB) mode\n\u2022 OperationModeCTR! \u2013 The Counter (CTR) mode\niv (optional)\nA blob specifying the initialization vector. Zeros filled by default. In the\nAES algorithm, the effective length of the iv is 16 bytes and the others\nare 8 bytes. If the length is not enough, it will be automatically filled with\nzeros. In the ECB operation mode, the iv will be ignored.\npadding\n(optional)\nA value of the PaddingScheme enumerated type that specifies the\npadding schemes used for block cipher.\nValues are:\n\u2022 NoPadding! \u2013 No padding added to a block\n\u2022 ZerosPadding! \u2013 0's padding added to a block\n\u2022 PKCSPadding! \u2013 PKCS #5 padding added to a block\n\u2022 OneAndZerosPadding! \u2013 1 and 0's padding added to a block\n\u2022 DefaultPadding! \u2013 (Default) Default padding scheme. DefaultPadding!\nmeans PKCSPadding! for ECB or CBC mode. Otherwise, NoPadding!\nfor modes like CFB, OFB, and CTR.\n"}
{"page": 1561, "text": "Statements, Events, and Functions\nPage 1561\nArgument\nDescription\nZerosPadding!, PKCSPadding!, and OneAndZerosPadding! can be used\nwith ECB and CBC operation mode. NoPadding! can be used with CFB,\nOFB and CTR operation mode.\nReturn value\nBlob.\nReturns the result of the decrypt if it succeeds. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nThe following statements encrypt the data using AES and then decrypt the data using AES.\nBlob lblb_data\nBlob lblb_key\nBlob lblb_iv\nBlob lblb_encrypt\nBlob lblb_decrypt\nlblb_data = Blob(\"Test AES\", EncodingANSI!)\nlblb_key = Blob(\"Test Key12345678\", EncodingANSI!)\nlblb_iv = Blob(\"Test IV 12345678\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\n// Encrypt data using AES\nlblb_encrypt = lnv_CrypterObject.SymmetricEncrypt(AES!, lblb_data, lblb_key, &\n OperationModeCBC!, lblb_iv, PKCSPadding!)\n// Decrypt data using AES\nlblb_decrypt = lnv_CrypterObject.SymmetricDecrypt(AES!, lblb_encrypt, lblb_key, &\n OperationModeCBC!, lblb_iv, PKCSPadding!)\nmessagebox(\"SymmetricDecrypt\", string(lblb_decrypt, EncodingANSI!))\nSee also\nSymmetricEncrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricSign\nAsymmetricVerifySign\nAsymmetricGenerateKey\nMD5\nSHA\nHMAC\n2.4.830 SymmetricEncrypt\nDescription\n"}
{"page": 1562, "text": "Statements, Events, and Functions\nPage 1562\nEncrypts a blob value using symmetric algorithm.\nApplies to\nCrypterObject objects\nSyntax\ncrypter.SymmetricEncrypt ( algorithm, variable, key{, operationmode{, iv{,\n padding}}})\nTable 2.1377:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object.\nalgorithm\nA value of the SymmetricAlgorithm enumerated type that specifies the\ntype of symmetric algorithm.\nValues are:\n\u2022 AES! \u2013 The Advanced Encryption Standard\n\u2022 DES! \u2013 The Data Encryption Standard\n\u2022 TDES! \u2013 The Triple-DES\n\u2022 DESX! \u2013 The DES-XEX3\n\u2022 Blowfish! \u2013 The Blowfish\nvariable\nA blob whose value is the data you want to encrypt with symmetric\nalgorithm.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nkey\nA blob specifying the secret key.\nThe length of the secret key can be 128 bits, 192 bits, 256 bits with AES.\nThe length of the secret key must be 64 bits with DES.\nThe length of the secret key can be 128 bits, 192 bits with TDES.\nThe length of the secret key must be 192 bits with DESX.\nThe length of the secret key can be 32 bits~448 bits with Blowfish.\noperationmode\n(optional)\nA value of the OperationMode enumerated type that specifies the mode\nof operation.\nValues are:\n\u2022 OperationModeECB! \u2013 (Default) The Electronic Codebook (ECB)\nmode\n\u2022 OperationModeCBC! \u2013 The Cipher Block Chaining (CBC) mode\n"}
{"page": 1563, "text": "Statements, Events, and Functions\nPage 1563\nArgument\nDescription\n\u2022 OperationModeCFB! \u2013 The Cipher Feedback (CFB) mode\n\u2022 OperationModeOFB! \u2013 The Output Feedback (OFB) mode\n\u2022 OperationModeCTR! \u2013 The Counter (CTR) mode\niv (optional)\nA blob specifying the initialization vector. Zeros filled by default. In the\nAES algorithm, the effective length of the iv is 16 bytes and the others\nare 8 bytes. If the length is not enough, it will be automatically filled with\nzeros. In the ECB operation mode, the iv will be ignored.\npadding\n(optional)\nA value of the PaddingScheme enumerated type that specifies the\npadding schemes used for block cipher.\nValues are:\n\u2022 NoPadding! \u2013 No padding added to a block\n\u2022 ZerosPadding! \u2013 0's padding added to a block\n\u2022 PKCSPadding! \u2013 PKCS #5 padding added to a block\n\u2022 OneAndZerosPadding! \u2013 1 and 0's padding added to a block\n\u2022 DefaultPadding! \u2013 (Default) Default padding scheme. DefaultPadding!\nmeans PKCSPadding! for ECB or CBC mode. Otherwise, NoPadding!\nfor modes like CFB, OFB, and CTR.\nZerosPadding!, PKCSPadding!, and OneAndZerosPadding! can be used\nwith ECB and CBC operation mode. NoPadding! can be used with CFB,\nOFB and CTR operation mode.\nReturn value\nBlob.\nReturns the encryption result (length: 24) if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThe following statements encrypt the data using AES and return the encrypted data.\nBlob lblb_data\nBlob lblb_key\nBlob lblb_iv\nBlob lblb_encrypt\nlblb_data = Blob(\"Test AES\", EncodingANSI!)\nlblb_key = Blob(\"Test Key12345678\", EncodingANSI!)\nlblb_iv = Blob(\"Test IV 12345678\", EncodingANSI!)\nCrypterObject lnv_CrypterObject\nlnv_CrypterObject = Create CrypterObject\nlblb_encrypt = lnv_CrypterObject.SymmetricEncrypt(AES!, lblb_data, lblb_key, &\n"}
{"page": 1564, "text": "Statements, Events, and Functions\nPage 1564\n OperationModeCBC!, lblb_iv, PKCSPadding!)\nSee also\nSymmetricDecrypt\nSymmetricGenerateKey\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricSign\nAsymmetricVerifySign\nAsymmetricGenerateKey\nMD5\nSHA\nHMAC\n2.4.831 SymmetricGenerateKey\nDescription\nGenerates a secret key for asymmetric algorithm.\nApplies to\nCrypterObject objects\nSyntax\ncrypter.SymmetricGenerateKey ( SymmetricAlgorithm algorithm, Integer len, ref Blob\n key )\nTable 2.1378:\nArgument\nDescription\ncrypter\nThe name of the CrypterObject object.\nalgorithm\nA value of the SymmetricAlgorithm enumerated type that specifies the\ntype of symmetric algorithm.\nValues are:\n\u2022 AES! \u2013 The Advanced Encryption Standard\n\u2022 DES! \u2013 The Data Encryption Standard\n\u2022 TDES! \u2013 The Triple-DES\n\u2022 DESX! \u2013 The DES-XEX3\n\u2022 Blowfish! \u2013 The Blowfish\nlen\nAn integer value specifying the key length.\nValues are:\n"}
{"page": 1565, "text": "Statements, Events, and Functions\nPage 1565\nArgument\nDescription\n\u2022 The value can be 16, 24, or 32 with AES\n\u2022 The value must be 8 with DES\n\u2022 The value can be 16 or 24 with TDES\n\u2022 The value must be 24 with DESX\n\u2022 The value can range from 4 to 56 with Blowfish\nkey\nA blob specifying the secret key.\nThe length of the secret key can be 128 bits, 192 bits, 256 bits with AES.\nThe length of the secret key must be 64 bits with DES.\nThe length of the secret key can be 128 bits, 192 bits with TDES.\nThe length of the secret key must be 192 bits with DESX.\nThe length of the secret key can range from 32 bits to 448 bits with\nBlowfish.\nReturn value\nInteger. Returns 1 if it succeeds and -1 if it failed. If any argument's value is null, the method\nreturns null. If an error occurs, throw the exception.\nExamples\nCoderObject lco_Code\nCrypterObject lco_Crypt\nBlob lbb_Key, lb_Return, lb_Decrypt, lb_Data\nInteger li_Return\nString ls_Return\nlco_Code = Create CoderObject\nlco_Crypt = Create CrypterObject\nli_Return = lco_Crypt.SymmetricGenerateKey(AES!,16,lbb_Key)\nIf li_Return = 1 Then\n lb_Data = Blob(\"Appeon\", EncodingUTF8!)\n lb_Return = lco_Crypt.SymmetricEncrypt( AES!, lb_Data, lbb_Key)\n lb_Decrypt = lco_Crypt.SymmetricDecrypt( AES!, lb_Return, lbb_Key)\n ls_Return = String(lb_Decrypt, EncodingUTF8!)\nEnd If\nDesTroy ( lco_Crypt )\nDesTroy ( lco_Code )\nSee also\nSymmetricDecrypt\nSymmetricEncrypt\nAsymmetricEncrypt\nAsymmetricDecrypt\nAsymmetricSign\n"}
{"page": 1566, "text": "Statements, Events, and Functions\nPage 1566\nAsymmetricVerifySign\nAsymmetricGenerateKey\nMD5\nSHA\nHMAC\n2.4.832 Synchronize\nStarts synchronization between a remote and consolidated database. The syntax you\nuse depends on whether you include command line parameters with the dbmlsync\nsynchronization call.\nTable 2.1379:\nTo start synchronization\nUse\nWithout including command line parameters\nSyntax 1\nWith command line parameters that you include in the synchronization\ncall\nSyntax 2\n2.4.832.1 Syntax 1: For synchronization without parameters\nDescription\nStarts synchronization between a remote and consolidated database.\nApplies to\nMLSynchronization, MLSync controls\nSyntax\nSyncObject.Synchronize ( )\nTable 2.1380:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object.\nReturn value\nInteger.\nReturns 1 for success and -1 for failure. Any other return value is an error code from\ndbmlsync.\nExamples\nIf all the properties of a synchronization object are initialized, including userids and\npasswords, it is ready for immediate use. To launch a synchronization requires very little\ncoding, as in the following example for an MLsync object named \"nvo_my_mlsync\":\nnvu_my_mlsync       mySync\nLong      rc\nmySync = CREATE nvo_my_mlsync\nmySync.Synchronize()\ndestroy mySync\n"}
{"page": 1567, "text": "Statements, Events, and Functions\nPage 1567\nYou would typically add the above code to the Clicked event for a menu item or a command\nbutton on an application window.\n2.4.832.2 Syntax 2: For synchronization with parameters\nDescription\nStarts dbmlsync synchronization with command line parameters that are passed from the\nvalues of a syncparm structure.\nApplies to\nMLSync controls\nSyntax\nSyncObject.Synchronize (cmdstring )\nTable 2.1381:\nArgument\nDescription\nsyncObject\nThe name of the synchronization object.\ncmdstring\nA read-only string containing command line arguments for a\nsynchronization call.\nReturn value\nInteger.\nReturns 1 for success and any other value for failure.\nUsage\nThe following is an example of a command string for a Synchronize call:\nC:\\Program Files\\SAP\\SQL Anywhere 11\\Bin32\\  dbmlsync.exe \n-c \"DSN=salesdb_remote;UID=dba;PWD=sql\"  -n salesapi \n-u 50 -mp \"pw10\" -wc salesapi_50_sync \n-o \"C:\\temp\\dbmlsync.log\" -v+ -q -k\nIf the path to the dbmlsync executable (C:\\Program Files\\SAP\\SQL Anywhere\n11\\Bin32\\dbmlsync.exe in the above example) is not part of the command string, the\napplication searches the Windows registry to find it.\nExamples\nFor MLSync objects, you can allow a user to edit the command line arguments for a\nsynchronization call as follows:\nlong    rc\nstring    cmd\ncmd = myMLSync.GetCommandString()\n//   Edit cmd however you wish\n...\nrc = myMLSync.Synchronize(cmd)\nSee also\nCancelSync\nGetCommandString\nSetParm\n"}
{"page": 1568, "text": "Statements, Events, and Functions\nPage 1568\n2.4.833 SyntaxFromSQL\nDescription\nGenerates DataWindow source code based on a SQL SELECT statement.\nApplies to\nTransaction objects\nSyntax\ntransaction.SyntaxFromSQL ( sqlselect, presentation, err )\nTable 2.1382:\nArgument\nDescription\ntransaction\nThe name of a connected transaction object.\nsqlselect\nA string whose value is a valid SQL SELECT statement.\npresentation\nA string whose value is the default presentation style you want for the\nDataWindow. The simple format is:\nStyle(Type=presentationstyle)\nValues for presentationstyle correspond to selected styles in the New\nDataWindow dialog box in the DataWindow painter. Keywords are:\n(Default) Tabular\nGrid\nForm (for freeform)\nGraph\nGroup\nLabel\nThe Usage section lists the keywords you can use in presentation.\nerr\nA string variable to which PowerBuilder will assign any error messages\nthat occur.\nReturn value\nString.\nReturns the empty string (\"\") if an error occurs. If SyntaxFromSQL fails, err may contain\nerror messages if warnings or soft errors occur (for example, a syntax error). If any\nargument's value is null, SyntaxFromSQL returns null.\nUsage\nTo create a DataWindow object, you can pass the source code returned by SyntaxFromSQL\ndirectly to the Create function.\nTable owner in the SQL statement\nIf the value of the LogID property of the Transaction object is not the owner of the table\nbeing accessed in the SQL statement for the SyntaxFromSQL function, then the table name in\nthe SQL SELECT statement must be qualified with the owner name.\n"}
{"page": 1569, "text": "Statements, Events, and Functions\nPage 1569\nNote for Adaptive Server Enterprise\nIf your DBMS is Adaptive Server Enterprise and you call SyntaxFromSQL,\nPowerBuilder must determine whether the tables are updatable through a\nunique index. This is only possible if you set AutoCommit to true before calling\nSyntaxFromSQL, as shown here:\nsqlca.autocommit=TRUE\nls_dws=sqlca.syntaxfromsql (sqlstmt, presentation, err)\nsqlca.autocommit=FALSE\nThe presentation string can also specify object keywords followed by properties and values to\ncustomize the DataWindow. You can specify the style of a column, the entire DataWindow,\nareas of the DataWindow, and text in the DataWindow. The object keywords are:\nColumn\nDataWindow\nGroup\nStyle\nText\nTitle\nA full presentation string has the format:\n\"Style ( Type=value property=value ... )\n   DataWindow ( property=value ... )\n   Column ( property=value ... )\n   Group (colnum1 colnum2 ... property ... ) //Effective only when Type=Group\n   Text (property=value ... )\n   Title ( 'titlestring' )\"\nThe checklists in Chapter 3, DataWindow Object Properties in DataWindow Reference\nidentify the properties that you can use for each object keyword.\nIf a database column has extended attributes with font information, then font information you\nspecify in the SyntaxFromSQL presentation string is ignored.\nExamples\nThe following statements display the DataWindow source for a tabular DataWindow object\ngenerated by the SyntaxFromSQL function in a MultiLineEdit.\nIf errors occur, PowerBuilder fills the string ERRORS with any error messages that are\ngenerated:\nstring ERRORS, sql_syntax\n \nsql_syntax = \"SELECT emp_data.emp_id,\" &\n   + \"emp_data.emp_name FROM emp_data \" &\n   + \"WHERE emp_data.emp_salary >45000\"\n \nmle_sql.text = &\n   SQLCA.SyntaxFromSQL(sql_syntax, \"\", ERRORS)\nThe following statements create a grid DataWindow dw_1 from the DataWindow source\ngenerated in the SyntaxFromSQL function. If errors occur, the string ERRORS contains any\n"}
{"page": 1570, "text": "Statements, Events, and Functions\nPage 1570\nerror messages that are generated, which are displayed to the user in a message box. Note\nthat you need to call SetTransObject with SQLCA as its argument before you can call the\nRetrieve function:\nstring ERRORS, sql_syntax\nstring presentation_str, dwsyntax_str\n \nsql_syntax = \"SELECT emp_data.emp_id,\"&\n   + \"emp_data.emp_name FROM emp_data \"&\n   + \"WHERE emp_data.emp_salary > 45000\"\n \npresentation_str = \"style(type=grid)\"\n \ndwsyntax_str = SQLCA.SyntaxFromSQL(sql_syntax, &\n   presentation_str, ERRORS)\n \nIF Len(ERRORS) > 0 THEN\n   MessageBox(\"Caution\", &\n   \"SyntaxFromSQL caused these errors: \" + ERRORS)\n   RETURN\nEND IF\n \ndw_1.Create( dwsyntax_str, ERRORS)\n \nIF Len(ERRORS) > 0 THEN\n   MessageBox(\"Caution\", &\n      \"Create cause these errors: \" + ERRORS)\n   RETURN\nEND IF\nSee also\nCreate method for DataWindows in Section 9.13, \u201cCreate\u201d in DataWindow Reference.\nInformation on Chapter 3, DataWindow Object Properties in DataWindow Reference\n2.4.834 SystemRoutine\nDescription\nProvides the routine node representing the system root in a performance analysis model.\nApplies to\nProfiling object\nSyntax\ninstancename.SystemRoutine ( theroutine )\nTable 2.1383:\nArgument\nDescription\ninstancename\nInstance name of the Profiling object.\ntheroutine\nA value of type ProfileRoutine containing the routine node representing\nthe system root. This argument is passed by reference.\nReturn value\nErrorReturn. Returns one of the following values:\n"}
{"page": 1571, "text": "Statements, Events, and Functions\nPage 1571\n\u2022 Success! -- The function succeeded\n\u2022 ModelNotExistsError! -- The function failed because no model exists\nUsage\nUse this function to extract the routine node representing the system root in a performance\nanalysis model. You must have previously created the performance analysis model from a\ntrace file using the BuildModel function. The routine node is defined as a ProfileRoutine\nobject and provides the time spent in the routine, any called routines, the number of times\neach routine was called, and the class to which the routine belongs.\nExamples\nThis example provides the routine that represents the system root in a performance analysis\nmodel:\nProfiling lpro_model\nProfileRoutine lprort_routine\n \nlpro_model.BuildModel()\nlpro_model.SystemRoutine(lprort_routine)\n...\nSee also\nBuildModel\n2.4.835 TabPostEvent\nDescription\nPosts the specified event for each tab page in a Tab control, adding them to the end of the\nevent queues for the tab page user objects.\nApplies to\nTab controls\nSyntax\ntabcontrolname.TabPostEvent ( event {, word, long } )\nTable 2.1384:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control for which you want to post events for its tab\npage user objects.\nevent\nA value of the TrigEvent enumerated datatype that identifies\na PowerBuilder event (for example, Clicked!, Modified!, or\nDoubleClicked!) or a string whose value is the name of an event. The\nevent must be a valid event for a tab page user object in tabcontrolname\nand a script must exist for the event in tabcontrolname.\nword (optional)\nA long value to be stored in the WordParm property of the system's\nMessage object. If you want to specify a value for long, but not word,\nenter 0. (For cross-platform compatibility, WordParm and LongParm are\nboth longs).\n"}
{"page": 1572, "text": "Statements, Events, and Functions\nPage 1572\nArgument\nDescription\nlong\n(optional)\nA long value or a string that you want to store in the LongParm property\nof the system's Message object. When you specify a string, a pointer to\nthe string is stored in the LongParm property, which you can access with\nthe String function (see Usage for PostEvent).\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs, if the event is not a valid event for the tab\npage user object, or if a script does not exist for the event.\nExamples\nSuppose tab_address contains several tab pages inherited from uo_list and uo_list has a user\nevent called ue_display. This statement posts the event ue_display for each the tab pages in\ntab_address:\ntab_address.TabPostEvent(\"ue_display\")\nSee also\nTabTriggerEvent\n2.4.836 TabTriggerEvent\nDescription\nTriggers the specified event for each tab page in a Tab control, which executes the scripts\nimmediately in the index order of the tab pages.\nApplies to\nTab controls\nSyntax\ntabcontrolname.TabTriggerEvent ( event {, word, long } )\nTable 2.1385:\nArgument\nDescription\ntabcontrolname\nThe name of the Tab control for which you want to trigger events for its\ntab page user objects.\nevent\nA value of the TrigEvent enumerated datatype that identifies\na PowerBuilder event (for example, Clicked!, Modified!, or\nDoubleClicked!) or a string whose value is the name of an event. The\nevent must be a valid event for a tab page user object in tabcontrolname\nand a script must exist for the event in tabcontrolname.\nword (optional)\nA long value to be stored in the WordParm property of the system's\nMessage object. If you want to specify a value for long, but not word,\nenter 0. (For cross-platform compatibility, WordParm and LongParm are\nboth longs).\n"}
{"page": 1573, "text": "Statements, Events, and Functions\nPage 1573\nArgument\nDescription\nlong (optional)\nA long value or a string that you want to store in the LongParm property\nof the system's Message object. When you specify a string, a pointer to\nthe string is stored in the LongParm property, which you can access with\nthe String function (see Usage for TriggerEvent).\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs, if the event is not a valid event for the tab\npage user object, or if a script does not exist for the event.\nExamples\nSuppose tab_address contains several tab pages inherited from uo_list and uo_list has a user\nevent called ue_display. This statement executes immediately the script for ue_display for\neach the tab pages in tab_address:\ntab_address.TabTriggerEvent(\"ue_display\")\nSee also\nTabPostEvent\n2.4.837 Tan\nDescription\nCalculates the tangent of an angle.\nSyntax\nTan ( n )\nTable 2.1386:\nArgument\nDescription\nn\nThe angle (in radians) for which you want the tangent\nReturn value\nDouble.\nReturns the tangent of n. An execution error occurs if n is not valid. If n is null, Tan returns\nnull.\nExamples\nBoth these statements return 0:\nTan(0)\nTan(Pi(1))\nThis statement returns 1.55741:\nTan(1)\nSee also\n"}
{"page": 1574, "text": "Statements, Events, and Functions\nPage 1574\nATan\nCos\nPi\nSin\nTan method for DataWindows in Section 2.4.124, \u201cTan\u201d in DataWindow Reference.\n2.4.838 Text\n2.4.838.1 Syntax for ListBox, DropDownListBox, PictureListBox, and DropDownPictureListBox\ncontrols\nDescription\nObtains the text of an item in a ListBox control.\nApplies to\nListBox, DropDownListBox, PictureListBox, and DropDownPictureListBox controls\nSyntax\nlistboxname.Text ( index )\nTable 2.1387:\nArgument\nDescription\nlistboxname\nThe name of the ListBox control in which you want the text of an item\nindex\nThe number of the item for which you want the text\nReturn value\nString.\nReturns the text of the item in listboxname identified by index. If the index does not point to\na valid item number, Text returns the empty string (\"\"). If any argument's value is null, Text\nreturns null.\nExamples\nAssume the ListBox lb_Cities contains:\nAtlanta\nBoston\nChicago\nThen these statements store the text of item 3, which is Chicago, in current_city:\nstring current_city\ncurrent_city = lb_Cities.Text(3)\nSee also\nFindItem\nSelectedItem\nSelectedText\n"}
{"page": 1575, "text": "Statements, Events, and Functions\nPage 1575\n2.4.838.2 Syntax for RibbonComboBoxItem controls\nDescription\nObtains the text of an item from a ribbon combo box.\nApplies to\nRibbonComboBoxItem control\nSyntax\ncontrolname.Text (Integer Index)\nTable 2.1388:\nArgument\nDescription\ncontrolname\nThe name of the RibbonComboBoxItem control for which you want to\nget the text\nIndex\nThe index of the item for which you want the text\nReturn value\nString.\nReturns the text of the item in the box portion of the combo box. If any argument's value is\nnull, returns null.\nExamples\nThis example gets the text of the item whose index number is 2. It returns \"Item2\".\nInteger li_Return\nString ls_Text\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.AddItem(\"Item1\")\nli_Return = lr_ComboBox.AddItem(\"Item2\")\nls_Text = lr_ComboBox.Text(2)\n2.4.839 TextLine\nDescription\nObtains the text of the line that contains the insertion point. TextLine works for controls that\ncan contain multiple lines.\nApplies to\nDataWindow, EditMask, MultiLineEdit, and RichTextEdit controls\nSyntax\neditname.TextLine ( )\nTable 2.1389:\nArgument\nDescription\neditname\nThe name of the DataWindow control, EditMask, MultiLineEdit, or\nRichTextEdit control in which you want the text on the line that contains\nthe insertion point\n"}
{"page": 1576, "text": "Statements, Events, and Functions\nPage 1576\nReturn value\nString.\nReturns the text on the line with the insertion point in editname. If an error occurs, TextLine\nreturns the empty string (\"\"). If editname is null, TextLine returns null.\nUsage\nIf editname is a DataWindow control, then TextLine reports information about the edit\ncontrol over the current row and column.\nExamples\nIn the MultiLineEdit mle_state, if the insertion point is on line 4 and its text is North\nCarolina, then this example sets linetext to North Carolina:\nstring linetext\nlinetext = mle_state.TextLine()\nIf the insertion point is on a line whose text is Y in the MultiLineEdit mle_contact, then some\nprocessing takes place:\nIF mle_contact.TextLine() = \"Y\" THEN ...\nSee also\nSelectedItem\nSelectTextLine\n2.4.840 Time\nConverts DateTime, string, or numeric data to data of type time. It also extracts a time value\nfrom a blob. You can use one of three syntaxes, depending on the datatype of the source data.\nTable 2.1390:\nTo\nUse\nExtract the time from DateTime data, or to extract a time stored in a blob\nSyntax 1\nConvert a string to a time\nSyntax 2\nCombine numbers for hours, minutes, and seconds into a time value\nSyntax 3\n2.4.840.1 Syntax 1: For DateTime and blob values\nDescription\nExtracts a time value from a DateTime value or a blob.\nSyntax\nTime ( datetime )\nTable 2.1391:\nArgument\nDescription\ndatetime\nA DateTime value or a blob in which the first value is a time or\nDateTime value. The rest of the contents of the blob is ignored. Datetime\ncan also be an Any variable containing a DateTime or blob.\n"}
{"page": 1577, "text": "Statements, Events, and Functions\nPage 1577\nReturn value\nTime.\nReturns the time in datetime as a time. If datetime does not contain a valid time or is an\nincompatible datatype, Time returns 00:00:00.000000. If datetime is null, Time returns null.\nExamples\nAfter StartDateTime has been retrieved from the database, this example sets StartTime equal\nto the time in StartDateTime:\nDateTime StartDateTime\ntime StartTime\n... \nStartTime = Time(StartDateTime)\nSuppose that the value of a blob variable ib_blob contains a DateTime value beginning at\nbyte 32. The following statement extracts the time from the value:\ntime lt_time\nlt_time = Time(BlobMid(ib_blob, 32))\nSee also\nTime method for DataWindows in Section 2.4.125, \u201cTime\u201d in DataWindow Reference.\n2.4.840.2 Syntax 2: For strings\nDescription\nConverts a string containing a valid time into a time value.\nSyntax\nTime ( string )\nTable 2.1392:\nArgument\nDescription\nstring\nA string whose value is a valid time (such as 8am or 10:25) that you want\nreturned as a time. Only the hour is required; you do not have to include\nthe minutes, seconds, or microseconds of the time or am or pm.\nThe default value is 00 for minutes and seconds and 000000 for\nmicroseconds. PowerBuilder determines whether the time is am or pm\nbased on a 24-hour clock.\nString can also be an Any variable containing a string or blob.\nReturn value\nTime.\nReturns the time in string as a time. If string does not contain a valid time or is an\nincompatible datatype, Time returns 00:00:00.000000. If string is null, Time returns null.\nUsage\nValid times can include any combination of hours (00 to 23), minutes (00 to 59), seconds (00\nto 59), and microseconds (0 to 999999).\n"}
{"page": 1578, "text": "Statements, Events, and Functions\nPage 1578\nExamples\nThese statements set What_Time to null:\nTime What_Time\nstring null_string\n \nSetNull(null_string)\nWhat_Time = Time(null_string)\nThis statement returns a time value for 45 seconds before midnight (23:59:15), which is\nspecified as a string:\nTime(\"23:59:15\")\nThis statement converts the text in the SingleLineEdit sle_Time_Received to a time value:\nTime(sle_Time_Received.Text)\nSee also\nTime method for DataWindows in Section 2.4.125, \u201cTime\u201d in DataWindow Reference.\n2.4.840.3 Syntax 3: For integers\nDescription\nCombines integers representing hours, minutes, seconds, and microseconds into a time value.\nSyntax\nTime ( hour, minute, second {, microsecond } )\nTable 2.1393:\nArgument\nDescription\nhour\nThe integer for the hour (00 to 23) of the time\nminute\nThe integer for the minutes (00 to 59) of the time\nsecond\nThe integer for the seconds (0 to 59) of the time\nmicrosecond\n(optional)\nThe integer for the microseconds (0 to 32767) of the time (note that the\nrange of values supported for this argument is less than the total range of\nvalues possible for a microsecond)\nReturn value\nTime.\nReturns the time as a time datatype and 00:00:00 if the value in any argument is not valid\n(out of the specified range of values). If any argument is null, Time returns null.\nExamples\nThese statements set What_Time to a time value with microseconds, and display the resulting\ntime as a string in st_1. The default display format does not include microseconds, so the\nString function specifies a display format with microseconds. Leading zeros are appended to\nthe string value for microseconds:\nTime What_Time\nWhat_Time = Time(10, 15, 45, 234)\n"}
{"page": 1579, "text": "Statements, Events, and Functions\nPage 1579\nst_1.Text = String(What_Time, \"hh:mm:ss.ffffff\")\nThe time in the string variable is set to 10:15:45.000234.\nThese statements set What_Time to 10:15:45:\nTime What_Time\nWhat_Time = Time(10, 15, 45)\nSee also\nTime method for DataWindows in Section 2.4.125, \u201cTime\u201d in DataWindow Reference.\n2.4.841 Timer\nDescription\nCauses a Timer event in a window to occur repeatedly at the specified interval. When you\ncall Timer, it starts a timer. When the interval is over, PowerBuilder triggers the Timer event\nand resets the timer.\nSyntax\nTimer ( interval {, windowname } )\nTable 2.1394:\nArgument\nDescription\ninterval\nThe number of seconds that you want between Timer events. interval can\nbe a whole number or fraction greater than 0 and less than or equal to\n4,294,967 seconds. If interval is 0, Timer turns off the timer so that it no\nlonger triggers Timer events.\nwindowname\n(optional)\nThe window in which you want the timer event to be triggered. The\nwindow must be an open window. If you do not specify a window, the\nTimer event occurs in the current window.\nReturn value\nInteger.\nReturns 1 if succeeds and -1 if an error occurs. If any argument's value is null, Timer returns\nnull.\nUsage\nDo not call the Timer function in the Timer event. The timer gets reset automatically and\nthe Timer event re-triggers at the interval that has already been established. Call the Timer\nfunction in another event's script when you want to stop the timer or change the interval.\nExamples\nThis statement triggers a Timer event every two seconds in the active window:\nTimer(2)\nThis statement stops the triggering of the Timer event in the active window:\nTimer(0)\nThese statements trigger a Timer event every half second in the window w_Train:\n"}
{"page": 1580, "text": "Statements, Events, and Functions\nPage 1580\nOpen(w_Train)\nTimer(0.5, w_Train)\nThis example causes the current time to be displayed in a StaticText control in a window.\nCalling Timer in the window's Open event script starts the timer. The script for the Timer\nevent refreshes the displayed time.\nIn the window's Open event script, the following code displays the time initially and starts the\ntimer:\nst_time.Text = String(Now(), \"hh:mm\")\nTimer(60)\nIn the window's Timer event, which is triggered every minute, this code displays the current\ntime in the StaticText st_time:\nst_time.Text = String(Now(), \"hh:mm\")\nSee also\nIdle\n2.4.842 ToAnsi\nDescription\nConverts a character string to an ANSI blob.\nSyntax\nToAnsi ( string )\nTable 2.1395:\nArgument\nDescription\nstring\nA character string you want to convert to an ANSI blob\nReturn value\nBlob.\nReturns an ANSI blob if it succeeds and an empty blob if it fails.\nUsage\nThe ToAnsi function converts a Unicode character string to an ANSI blob. ToAnsi has\nthe same result as Blob(string, EncodingANSI!) and will be obsolete in a future version of\nPowerBuilder.\nUnicode file format\nUnicode files sometimes have two extra bytes at the start of the file to indicate that\nthey are Unicode files. If you are opening a Unicode file in stream mode, skip the first\ntwo bytes if they are present.\nSee also\nBlob\nFromAnsi\n"}
{"page": 1581, "text": "Statements, Events, and Functions\nPage 1581\nFromUnicode\nToUnicode\n2.4.843 Today\nDescription\nObtains the system date and, in some cases, the system time.\nSyntax\nToday ( )\nReturn value\nDate.\nReturns the current system date.\nUsage\nAlthough the datatype of the Today function is date, it can also return the current time. This\noccurs when Today is used as an argument for another function and that argument allows\ndifferent datatypes.\nFor example, if you call Today as an argument to the String function, String returns both\nthe date and time when you use a date-plus-time display format. A second example: if you\ncall Today as an argument for the SetItem function and the datatype of the target column is\nDateTime, both the date and time are assigned to the DataWindow.\nExamples\nThis statement returns the current system date:\nToday()\nThis statement executes some statements when the current system date is before April 15,\n2003:\nIF Today() < 2003-04-15 THEN ...\nThis statement displays the current date in the StaticText st_date in the corner of a window:\nst_date.Text = String(Today(), \"m/d/yy\")\nThis statement displays the current date and time in the StaticText st_date:\nst_date.Text = String(Today(), \"m/d/yy hh:mm\")\nSee also\nNow\nToday method for DataWindows in Section 2.4.126, \u201cToday\u201d in DataWindow Reference.\n2.4.844 Top\nDescription\nObtains the index number of the first visible item in a ListBox control. Top lets you to find\nout how the user has scrolled the list.\n"}
{"page": 1582, "text": "Statements, Events, and Functions\nPage 1582\nApplies to\nListBox and PictureListBox controls\nSyntax\nlistboxname.Top ( )\nTable 2.1396:\nArgument\nDescription\nlistboxname\nThe name of the ListBox or PictureListBox in which you want the index\nof the first visible item in the list\nReturn value\nInteger.\nReturns the index of the first visible item in listboxname. Top returns -1 if an error occurs. If\nlistboxname is null, Top returns null.\nUsage\nThe index of a list item is its position in the full list of items, regardless of how many are\ncurrently visible in the control.\nExamples\nIf item 15 has been scrolled to the top of the list in lb_Contacts, then this example sets Num\nto 15:\ninteger Num\nNum = lb_Contacts.Top()\nIf the user has not scrolled the list in lb_Contacts, then Num is set to 1:\ninteger Num\nNum = lb_Contacts.Top()\nIf the item at the top of the list in lb_Contacts is not the currently selected item, the following\nstatements scroll the currently selected item to the top:\ninteger Num\nNum = lb_Contacts.SelectedIndex()\nIF lb_Contacts.Top() <> Num THEN &\n      lb_contacts.SetTop(Num)\nSee also\nSelectedIndex\nSetTop\n2.4.845 TotalColumns\nDescription\nFinds the number of columns in a ListView control.\nApplies to\nListView controls\n"}
{"page": 1583, "text": "Statements, Events, and Functions\nPage 1583\nSyntax\nlistviewname.TotalColumns ( )\nTable 2.1397:\nArgument\nDescription\nlistviewname\nThe name of the ListView control for which you want to find the number\nof columns\nReturn value\nInteger.\nReturns the number of columns if it succeeds and -1 if an error occurs.\nUsage\nUse when the ListView control is set to report view.\nExamples\nThis example displays the number of columns in a ListView report view in a SingleLineEdit:\nint li_cols\nli_cols = lv_list.TotalColumns()\nsle_info.text = \"Total columns = \" + string(li_cols)\nSee also\nTotalItems\nTotalSelected\n2.4.846 TotalItems\nDescription\nDetermines the total number of items in a ListBox or RibbonComboBoxItem control.\nApplies to\nListBox, DropDownListBox, PictureListBox, DropDownPictureListBox, ListView, and\nRibbonComboBoxItem controls\nSyntax\nlistcontrolname.TotalItems ( )\nTable 2.1398:\nArgument\nDescription\nlistcontrolname\nThe name of the ListBox, DropDownListBox, PictureListBox,\nDropDownPictureListBox, ListView, or RibbonComboBoxItem in which\nyou want the total number of items\nReturn value\nInteger.\n"}
{"page": 1584, "text": "Statements, Events, and Functions\nPage 1584\nReturns the total number of items in listcontrolname. If listcontrolname contains no items,\nTotalItems returns 0. If an error occurs, it returns -1. If listcontrolname is null, TotalItems\nreturns null.\nExamples\nIf lb_Actions contains a total of five items, this example sets Total to 5:\ninteger Total\nTotal = lbx_Actions.TotalItems()\nThis FOR loop is executed for each item in lb_Actions:\ninteger Total, n\nTotal = lb_Actions.TotalItems()\nFOR n = 1 to Total\n... // Some processing\nNEXT\nThis example gets the total item of the RibbonBar ComboBox:\nInteger li_Return\nRibbonComboBoxItem lr_ComboBox\nli_Return = lr_ComboBox.AddItem(\"Item1\")\nli_Return = lr_ComboBox.AddItem(\"Item2\")\nli_Return = lr_ComboBox.TotalItems()\nSee also\nTotalSelected\n2.4.847 TotalSelected\nDescription\nDetermines the number of items in a ListBox control that are selected.\nApplies to\nListBox, PictureListBox, and ListView controls\nSyntax\nlistcontrolname.TotalSelected ( )\nTable 2.1399:\nArgument\nDescription\nlistcontrolname\nThe name of the ListBox, PictureListBox, or ListView in which you want\nthe number of items that are selected\nReturn value\nInteger.\nReturns the number of items in listcontrolname that are selected. If no items in\nlistcontrolname are selected, TotalSelected returns 0. If an error occurs, it returns -1. If\nlistcontrolname is null, TotalSelected returns null.\nUsage\n"}
{"page": 1585, "text": "Statements, Events, and Functions\nPage 1585\nTotalSelected works only if the MultiSelect property of listcontrolname is TRUE.\nExamples\nIf three items are selected in lb_Actions, this example sets SelectedTotal to 3:\ninteger SelectedTotal\nSelectedTotal = lb_Actions.TotalSelected()\nThese statements in the SelectionChanged event of lb_Actions display a MessageBox if the\nuser tries to select more than three items:\nIF lb_Actions.TotalSelected() > 3 THEN\n      MessageBox(\"Warning\", &\n         \"You can only select 3 items!\")\nELSE\n... // Some processing\nEND IF\nSee also\nTotalItems\n2.4.848 ToUnicode\nDescription\nConverts a character string to a Unicode blob.\nSyntax\nToUnicode ( string )\nTable 2.1400:\nArgument\nDescription\nstring\nA character string you want to convert to a Unicode blob\nReturn value\nBlob.\nReturns a Unicode blob if it succeeds and an empty blob if it fails.\nUsage\nThe ToUnicode function converts an ANSI character string to a Unicode blob. ToUnicode\nhas the same result as Blob(string) and will be obsolete in a future version of PowerBuilder.\nUnicode file format\nUnicode files sometimes have two extra bytes at the start of the file to indicate that\nthey are Unicode files.\nSee also\nFromAnsi\nFromUnicode\nToAnsi\n"}
{"page": 1586, "text": "Statements, Events, and Functions\nPage 1586\n2.4.849 TraceBegin\nDescription\nInserts an activity type value in the trace file indicating that logging has begun and then starts\nlogging all the enabled application trace activities. Before calling TraceBegin, you must have\nopened the trace file using the TraceOpen function.\nSyntax\nTraceBegin ( identifier )\nTable 2.1401:\nArgument\nDescription\nidentifier\nA read-only string, logged to the trace file, used to identify a tracing\nblock. If identifier is null, an empty string is placed in the trace file.\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileNotOpenError! -- TraceOpen has not been called yet\n\u2022 TraceStartedError! -- TraceBegin has already been called\nUsage\nThe TraceBegin call inserts an activity type value of ActBegin! in the trace file to indicate\nthat logging has begun and then begins logging all the application activities you have selected\nfor tracing.\nTraceBegin can only be called following a TraceOpen call. And all activities to be logged\nmust be enabled using the TraceEnableActivity function before calling TraceBegin.\nIf you want to generate a trace file for an entire application run, you typically include the\nTraceBegin function in your application's open script. If you want to generate a trace file for\nonly a portion of the application run, you typically include the TraceBegin function in the\nscript that initiates the functionality on which you're trying to collect data.\nYou can use the identifier argument to identify the tracing blocks within a trace file. A\ntracing block represents the data logged between calls to TraceBegin and TraceEnd. There\nmay be multiple tracing blocks within a single trace file if you are tracing more than one\nportion of the application run.\nExamples\nThis example opens a trace file with the name you entered in a single line edit box and a\ntimer kind selected from a drop-down list. It then begins logging the enabled activities for the\nfirst block of code to be traced:\nTimerKind ltk_kind\n \nCHOOSE CASE ddlb_timestamp.text\nCASE \"None\"\n      ltk_kind = TimerNone!\n"}
{"page": 1587, "text": "Statements, Events, and Functions\nPage 1587\nCASE \"Clock\"\n      ltk_kind = Clock!\nCASE \"Process\"\n      ltk_kind = Process!\nCASE \"Thread\"\n      ltk_kind = Thread!\nEND CHOOSE\n \nTraceOpen(sle_filename.text,ltk_kind)\nTraceEnableActivity(ActESQL!)\nTraceEnableActivity(ActGarbageCollect!)\nTraceEnableActivity(ActObjectCreate!)\nTraceEnableActivity(ActObjectDestroy!)\n \nTraceBegin(\"Trace_block_1\")\nSee also\nTraceOpen\nTraceEnableActivity\nTraceEnd\n2.4.850 TraceClose\nDescription\nCloses the trace file.\nSyntax\nTraceClose ( )\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileNotOpenError! -- TraceOpen has not been called yet\n\u2022 FileCloseError! -- The log file is full\nUsage\nTraceClose closes the trace file. If you have not already called TraceEnd, TraceClose will call\nthat function before proceeding with its processing.\nYou typically include the TraceClose function in your application's Close script.\nExamples\nThis example stops logging of application trace activities and then closes the open trace file:\nTraceEnd()\nTraceClose()\nSee also\nTraceBegin\nTraceEnd\n"}
{"page": 1588, "text": "Statements, Events, and Functions\nPage 1588\nTraceOpen\n2.4.851 TraceDisableActivity\nDescription\nDisables logging of the specified trace activity.\nSyntax\nTraceDisableActivity ( activity )\nTable 2.1402:\nArgument\nDescription\nactivity\nA value of the enumerated datatype TraceActivity that identifies the\nactivity for which logging should be disabled. Values are:\n\u2022 ActError! -- Occurrences of system errors and warnings\n\u2022 ActESQL! -- Embedded SQL statement entry and exit\n\u2022 ActGarbageCollect! -- Start and finish of garbage collection\n\u2022 ActLine! -- Routine line hits\n\u2022 ActObjectCreate! -- Object creation entry and exit\n\u2022 ActObjectDestroy! -- Object destruction entry and exit\n\u2022 ActProfile! -- Abbreviation for the ActRoutine!, ActESQL!,\nActObjectCreate!, ActObjectDestroy!, and ActGarbageCollect! values\n\u2022 ActRoutine! -- Routine entry and exit (if this value is disabled,\nActLine! is automatically disabled)\n\u2022 ActTrace! -- Abbreviation for all activities except ActLine!\n\u2022 ActUser! -- Occurrences of an activity you selected\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileNotOpenError! -- TraceOpen has not been called yet\n\u2022 TraceStartedError! -- You have called TraceDisableActivity after TraceBegin and before\nTraceEnd\nUsage\nUse this function to disable the logging of the specified trace activities. You typically use\nthis function if you are tracing only portions of an application run (and thus you are calling\n"}
{"page": 1589, "text": "Statements, Events, and Functions\nPage 1589\nTraceBegin multiple times) and you want to log different activities during each portion of the\napplication.\nUnless specifically disabled with TraceDisableActivity, activities that were previously\nenabled with a call to the TraceEnableActivity function remain enabled throughout the entire\napplication run.\nYou must always call the TraceEnd function before calling TraceDisableActivity.\nExamples\nThis example logs the enabled activities for the first block of code to be traced. Then it stops\nlogging and disables two activity types for a second trace block. When logging is resumed for\nanother portion of the application run, the activities that are not specifically disabled remain\nenabled until TraceClose is called:\nTraceEnableActivity(ActESQL!)\nTraceEnableActivity(ActGarbageCollect)\nTraceEnableActivity(ActObjectCreate!)\nTraceEnableActivity(ActObjectDestroy!)\n \nTraceBegin(\"Trace_block_1\")\n \nTraceEnd()\n \nTraceDisableActivity(ActESQL!)\nTraceDisableActivity(ActGarbageCollect!)\n \nTraceBegin(\"Trace_block_2\")\nSee also\nTraceEnd\nTraceEnableActivity\n2.4.852 TraceEnableActivity\nDescription\nEnables logging of the specified trace activity.\nSyntax\nTraceEnableActivity ( activity )\nTable 2.1403:\nArgument\nDescription\nactivity\nA value of the enumerated datatype TraceActivity that identifies the\nactivity to be logged. Values are:\n\u2022 ActError! -- Occurrences of system errors and warnings\n\u2022 ActESQL! -- Embedded SQL statement entry and exit\n\u2022 ActGarbageCollect! -- Start and finish of garbage collection\n\u2022 ActLine! -- Routine line hits (if this value is enabled, ActRoutine! is\nautomatically enabled)\n"}
{"page": 1590, "text": "Statements, Events, and Functions\nPage 1590\nArgument\nDescription\n\u2022 ActObjectCreate! -- Object creation entry and exit\n\u2022 ActObjectDestroy! -- Object destruction entry and exit\n\u2022 ActProfile! -- Abbreviation for the ActRoutine!, ActESQL!,\nActObjectCreate!, ActObjectDestroy, and ActGarbageCollect! values\n\u2022 ActRoutine! -- Routine entry and exit\n\u2022 ActTrace! -- Abbreviation for all activities except ActLine!\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileNotOpenError! -- TraceOpen has not been called yet\n\u2022 TraceStartedError! -- You have called TraceEnableActivity after TraceBegin and before\nTraceEnd\nUsage\nCall the TraceEnableActivity function following the TraceOpen function.\nTraceEnableActivity allows you to specify the types of activities you want logged in the trace\nfile. The default activity type logged is a user-defined activity type identified by the value\nActUser!. This activity is enabled by the TraceOpen call. You must call TraceEnableActivity\nto specify the activities to be logged before you call TraceBegin.\nEach call to TraceOpen resets the activity types to be logged to the default (that is, only\nActUser! activities are logged).\nSince the ActError! and ActUser! values require the passing of strings to the trace file, you\nmust call the TraceError and TraceUser functions to log this information.\nUnless specifically disabled with a call to the TraceDisableActivity function, activities that\nare enabled with TraceEnableActivity remain enabled throughout the entire application run.\nExamples\nThis example opens a trace file with the name you entered in a single line edit box and a\ntimer kind selected from a drop-down list. Then it begins logging the enabled activities for\nthe first block of code to be traced:\nTimerKind  ltk_kind\n \nCHOOSE CASE ddlb_timestamp.text\nCASE \"None\"\n      ltk_kind = TimerNone!\nCASE \"Clock\"\n      ltk_kind = Clock!\nCASE \"Process\"\n      ltk_kind = Process!\nCASE \"Thread\"\n"}
{"page": 1591, "text": "Statements, Events, and Functions\nPage 1591\n      ltk_kind = Thread!\nEND CHOOSE\n \nTraceOpen(sle_filename.text,ltk_kind)\n \nTraceEnableActivity(ActRoutine!)\nTraceEnableActivity(ActESQL!)\nTraceEnableActivity(ActGarbageCollect!)\nTraceEnableActivity(ActError!)\nTraceEnableActivity(ActCreateObject!)\nTraceEnableActivity(ActDestroyObject!)\n \nTraceBegin(\"Trace_block_1\")\nSee also\nTraceOpen\nTraceBegin\nTraceDisableActivity\n2.4.853 TraceEnd\nDescription\nInserts an activity type value in the trace file indicating that logging has ended and then stops\nlogging application trace activities.\nSyntax\nTraceEnd ( )\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileNotOpenError! -- TraceOpen has not been called yet\n\u2022 TraceNotStartedError! -- TraceBegin has not been called yet\nUsage\nThe TraceEnd call inserts an activity type value of ActBegin! in the trace file to indicate\nthat logging has ended and then stops logging all application activities that you selected for\ntracing.\nIf you have not already called TraceEnd when you call TraceClose, TraceClose calls\nTraceEnd before proceeding.\nIf you want to generate a trace file for an entire application run, you would typically include\nthe TraceEnd function in your application's Close script. If you want to generate a trace file\nfor only a portion of the application run, you typically include the TraceEnd function in the\nscript that terminates the functionality on which you're trying to collect data.\nExamples\nThis example stops logging of application trace activities and then closes the open trace file:\n"}
{"page": 1592, "text": "Statements, Events, and Functions\nPage 1592\nTraceEnd()\nTraceClose()\nSee also\nTraceOpen\nTraceBegin\nTraceClose\nTraceDisableActivity\n2.4.854 TraceError\nDescription\nLogs your own error message and its severity level to the trace file if tracing of this activity\ntype has been enabled.\nSyntax\nTraceError ( severity, message )\nTable 2.1404:\nArgument\nDescription\nseverity\nA long whose value is a number you want to indicate the severity of the\nerror\nmessage\nA string whose value is the error message you want to add to the trace\nfile\nReturn value\nErrorReturn. This function always returns Success!.\nIf severity or message is null, TraceError returns null and no entry is made in the trace file.\nUsage\nTraceError logs an activity type value of ActError! to the trace file if you enabled the tracing\nof this type with the TraceEnableActivity function and then called the TraceBegin function.\nYou use the TraceError function to record your own error message. It works just like the\nTraceUser function except that you use it to identify more severe problems. The severity and\nmessage values are passed without modification to the trace file.\nExamples\nThis example logs an error message to the trace file when a database retrieval fails:\ndw_1.SetTransObject(SQLCA)\n \nTraceUser(100, \"Starting database retrieval\")\nIF dw_1.Retrieve() = -1 THEN\n      TraceError(999, \"Retrieve for dw_1 failed\")\nELSE\n      TraceUser(200, \"Database retrieval complete\")\nEND IF\nSee also\n"}
{"page": 1593, "text": "Statements, Events, and Functions\nPage 1593\nTraceEnableActivity\nTraceUser\n2.4.855 TraceOpen\nDescription\nOpens a trace file with the specified name and enables logging of application trace activities.\nSyntax\nTraceOpen ( filename, timer )\nTable 2.1405:\nArgument\nDescription\nfilename\nA read-only string used to identify the trace file\ntimer\nA value of the enumerated datatype TimerKind that identifies the timer.\nValues are:\n\u2022 Clock! -- Use the clock timer\n\u2022 Process! -- Use the process timer\n\u2022 Thread! -- Use the thread timer\n\u2022 TimerNone! -- Do not log timer values\nReturn value\nErrorReturn. Returns one of the following values:\n\u2022 Success! -- The function succeeded\n\u2022 FileAlreadyOpenError! -- TraceOpen has been called again without an intervening\nTraceClose\n\u2022 FileOpenError! -- The file could not be opened for writing\n\u2022 EnterpriseOnlyFeature! -- (Obsolete) This function is only supported in the Enterprise\nedition of PowerBuilder 12.6 and earlier versions.\nIf filename is null, TraceOpen returns null.\nUsage\nTraceOpen opens the specified trace file and enables logging of application trace activities.\nWhen it opens the trace file, TraceOpen logs the current application and library list to the\ntrace file. It also enables logging of the default activity type, a user-defined activity type\nidentified by the value ActUser!.\nAfter calling TraceOpen, you can select any additional activities to be logged in the\ntrace file using the TraceEnableActivity function. Once you have called TraceOpen and\nTraceEnableActivity, you must then call TraceBegin for logging to begin.\n"}
{"page": 1594, "text": "Statements, Events, and Functions\nPage 1594\nTo stop logging of application trace activity, you must call the TraceEnd function followed\nby TraceClose to close the trace file. Each call to TraceOpen resets the logging of activity\ntypes to the default ActUser!\nYou typically include the TraceOpen function in your application's Open script.\nCaution\nIf the trace file runs out of disk space, no error is generated, but logging is stopped,\nand the trace file cannot be used for analysis.\nBy default, the time at which each activity begins and ends is recorded using the clock timer,\nwhich measures an absolute time with reference to an external activity, such as the machine's\nstartup time. The clock timer measures time in microseconds. Depending on the speed of\nyour machine's central processing unit, the clock timer can offer a resolution of less than one\nmicrosecond. A timer's resolution is the smallest unit of time the timer can measure.\nYou can also use process or thread timers, which measure time in microseconds with\nreference to when the process or thread being executed started. Use the thread timer\nfor distributed applications. Both process and thread timers give you a more accurate\nmeasurement of how long the process or thread is taking to execute, but both have a lower\nresolution than the clock timer.\nIf your analysis does not require timing information, you can omit timing information from\nthe trace file.\nCollection time\nThe timestamps in the trace file exclude the time taken to collect the trace data.\nExamples\nThis example opens a trace file with the name you entered in a single line edit box and a\ntimer kind selected from a drop-down list. Then it begins logging the enabled activities for\nthe first block of code to be traced:\nTimerKind   ltk_kind\n \nCHOOSE CASE ddlb_timestamp.text\nCASE \"None\"\n      ltk_kind = TimerNone!\nCASE \"Clock\"\n      ltk_kind = Clock!\nCASE \"Process\"\n      ltk_kind = Process!\nCASE \"Thread\"\n      ltk_kind = Thread!\nEND CHOOSE\n \nTraceOpen(sle_filename.text,ltk_kind)\nSee also\nTraceBegin\nTraceClose\nTraceEnableActivity\nTraceEnd\n"}
{"page": 1595, "text": "Statements, Events, and Functions\nPage 1595\n2.4.856 TraceUser\nDescription\nLogs the activity type value you specify to the trace file.\nSyntax\nTraceUser (info, message )\nTable 2.1406:\nArgument\nDescription\ninfo\nA long whose value is a reference number you want to associate with the\nlogged activity\nmessage\nA string whose value is the activity type value you want to add to the\ntrace file\nReturn value\nErrorReturn. This function always returns Success!.\nIf info or message is null, TraceUser returns null and no entry is made in the log file.\nUsage\nTraceUser logs an activity type value of ActUser! to the trace file. This is the default activity\ntype and is enabled when the TraceOpen function is called. You use the TraceUser function\nto record your own message identifying a specific occurrence during an application run. For\nexample, you may want to log the occurrences of a specific return value or the beginning and\nend of a body of code. TraceUser works just like the TraceError function except that you use\nTraceError to identify more severe problems. The info and message values are passed without\nmodification to the trace file.\nExamples\nThis example logs user messages to the trace file identifying when a database retrieval is\nstarted and when it is completed:\ndw_1.SetTransObject(SQLCA)\n \nTraceUser(100, \"Starting database retrieval\")\nIF dw_1.Retrieve() = -1 THEN\n      TraceError(999, \"Retrieve for dw_1 failed\")\nELSE\n      TraceUser(200, \"Database retrieval complete\")\nEND IF\nSee also\nTraceEnableActivity\nTraceError\n2.4.857 TriggerEvent\nDescription\nTriggers an event associated with the specified object, which executes the script for that event\nimmediately.\n"}
{"page": 1596, "text": "Statements, Events, and Functions\nPage 1596\nApplies to\nAny object\nSyntax\nobjectname.TriggerEvent ( event {, word, long } )\nTable 2.1407:\nArgument\nDescription\nobjectname\nThe name of any PowerBuilder object or control that has events\nassociated with it.\nevent\nA value of the TrigEvent enumerated datatype that identifies\na PowerBuilder event (for example, Clicked!, Modified!, or\nDoubleClicked!) or a string whose value is the name of an event. The\nevent must be a valid event for objectname and a script must exist for the\nevent in objectname.\nword (optional)\nA long value to be stored in the WordParm property of the system's\nMessage object. If you want to specify a value for long, but not word,\nenter 0. (For cross-platform compatibility, WordParm and LongParm are\nboth longs.)\nlong\n(optional)\nA long value or a string that you want to store in the LongParm property\nof the system's Message object. When you specify a string, a pointer to\nthe string is stored in the LongParm property, which you can access with\nthe String function (see Usage).\nReturn value\nInteger.\nReturns 1 if it is successful and the event script runs and -1 if the event is not a valid event for\nobjectname, or no script exists for the event in objectname. If any argument's value is null,\nTriggerEvent returns null.\nUsage\nIf you specify the name of an event instead of a value of the TrigEvent enumerated datatype,\nenclose the name in double quotation marks.\nCheck return code\nIt is a good idea to check the return code to determine whether TriggerEvent\nsucceeded and, based on the result, perform the appropriate processing.\nYou can pass information to the event script with the word and long arguments. The\ninformation is stored in the Message object. In your script, you can reference the WordParm\nand LongParm fields of the Message object to access the information.\nIf you have specified a string for long, you can access it in the triggered event by using the\nString function with the keyword \"address\" as the format parameter. Your event script might\nbegin as follows:\nstring PassedString\n"}
{"page": 1597, "text": "Statements, Events, and Functions\nPage 1597\nPassedString = String(Message.LongParm, \"address\")\nCaution\nDo not use this syntax unless you are certain the long argument contains a valid string\nvalue.\nFor more information about events and when to use PostEvent and TriggerEvent, see\nPostEvent.\nTo trigger system events that are not PowerBuilder-defined events, use Post or Send, instead\nof PostEvent and TriggerEvent. Although Send can send messages that trigger PowerBuilder\nevents, as shown below, you have to know the codes for a particular message. It is easier to\nuse the PowerBuilder functions that trigger the desired events.\nEquivalent syntax\nBoth of the following statements click the CheckBox cb_OK. The following call to the Send\nfunction:\nSend(Handle(Parent), 273, 0, Long(Handle(cb_OK), 0))\nis equivalent to:\ncb_OK.TriggerEvent(Clicked!)\nExamples\nThis statement executes the script for the Clicked event in the CommandButton cb_OK\nimmediately:\ncb_OK.TriggerEvent(Clicked!)\nThis statement executes the script for the user-defined event cb_exit_request in the parent\nwindow:\nParent.TriggerEvent(\"cb_exit_request\")\nThis statement executes the script for the Clicked event in the menu selection m_File on the\nmenu m_Appl:\nm_Appl.m_File.TriggerEvent(Clicked!)\nSee also\nPost\nPostEvent\nSend\n2.4.858 TriggerPBEvent\nDescription\nTriggers the specified user event in the child window contained in a PowerBuilder window\nActiveX control.\nApplies to\nWindow ActiveX controls\n"}
{"page": 1598, "text": "Statements, Events, and Functions\nPage 1598\nSyntax\nactivexcontrol.TriggerPBEvent ( name {, numarguments {, arguments } } )\nTable 2.1408:\nArgument\nDescription\nactivexcontrol\nIdentifier for the instance of the PowerBuilder window ActiveX control.\nWhen used in HTML, this is the NAME attribute of the object element.\nWhen used in other environments, this references the control that\ncontains the PowerBuilder window ActiveX.\nname\nString specifying the name of the user event. This argument is passed by\nreference.\nnumarguments\n(optional)\nInteger specifying the number of elements in the arguments array. The\ndefault is zero.\narguments\n(optional)\nVariant array containing event arguments. In PowerBuilder, Variant maps\nto the Any datatype. This argument is passed by reference.\nIf you specify this argument, you must also specify numarguments. If\nyou do not specify this argument and the function contains arguments,\npopulate the argument list by calling the SetArgElement function once\nfor each argument.\nJavaScript cannot use this argument.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nUsage\nCall this function to trigger a user event in the child window contained in a PowerBuilder\nwindow ActiveX control.\nTo check the PowerBuilder function's return value, call the GetLastReturn function.\nJavaScript cannot use the arguments argument.\nExamples\nThis JavaScript example calls the TriggerPBEvent function:\nfunction triggerEvent(f) {\n      var retcd;\n      var rc;\n      var numargs;\n      var theEvent;\n      var theArg;\n      retcd = 0;\n      numargs = 1;\n      theArg = f.textToPB.value;\n      PBRX1.SetArgElement(1, theArg);\n      theEvent = \"ue_args\";\n      retcd = PBRX1.TriggerPBEvent(theEvent, numargs);\n      rc = parseInt(PBRX1.GetLastReturn());\n      if (rc != 1) {\n      alert(\"Error. Empty string.\");\n"}
{"page": 1599, "text": "Statements, Events, and Functions\nPage 1599\n      }\n      PBRX1.ResetArgElements();\n}\nThis VBScript example calls the TriggerPBEvent function:\nSub TrigEvent_OnClick()\n      Dim retcd\n      Dim myForm\n      Dim args(1)\n      Dim rc\n      Dim numargs\n      Dim theEvent\n      retcd = 0\n      numargs = 1\n      rc = 0\n      theEvent = \"ue_args\"\n      Set myForm = Document.buttonForm\n      args(0) = buttonForm.textToPB.value\n      retcd = PBRX1.TriggerPBEvent(theEvent, & \n      numargs, args)\n      rc = PBRX1.GetLastReturn()\n      if rc <> 1 then\n      msgbox \"Error. Empty string.\"\n      end if\nend sub\nSee also\nGetLastReturn\nSetArgElement\nInvokePBFunction\n2.4.859 Trim\nDescription\nRemoves leading and trailing spaces from a string.\nSyntax\nTrim ( string {, removeallspaces } )\nTable 2.1409:\nArgument\nDescription\nstring\nThe string you want returned with leading and trailing spaces deleted\nremoveallspaces\nA boolean indicating that all types of spaces should be deleted\nReturn value\nString.\nReturns a copy of string with all leading and trailing spaces deleted if it succeeds and the\nempty string (\"\") if an error occurs. If string is null, Trim returns null.\nUsage\nTrim is useful for removing spaces that a user may have typed before or after newly entered\ndata.\n"}
{"page": 1600, "text": "Statements, Events, and Functions\nPage 1600\nIf you do not include the optional removeallspaces argument or its value is false, only the\nspace character (U+0020) is removed from the string.\nIf the removeallspaces argument is set to true, all types of space characters are removed. See\nLeftTrim for a list of space characters.\nExamples\nThis statement returns BABE RUTH if all the leading and trailing spaces are space\ncharacters:\nTrim(\" BABE RUTH \")\nThis statement returns BABE RUTH if the leading and trailing spaces include other types of\nwhite space characters:\nTrim(\" BABE RUTH \", true )\nThis example removes the leading and trailing spaces from the user-entered value in the\nSingleLineEdit sle_emp_fname and saves the value in emp_fname:\nstring emp_fname\nemp_fname = Trim(sle_emp_fname.Text)\nSee also\nLeftTrim\nRightTrim\nTrim method for DataWindows in Section 2.4.127, \u201cTrim\u201d in DataWindow Reference.\n2.4.860 TrimW (obsolete)\nDescription\nRemoves leading and trailing spaces from a string.\nThis function is obsolete. It has the same behavior as Trim in all environments.\nSyntax\nTrimW ( string )\n2.4.861 Truncate\nDescription\nTruncates a number to the specified number of decimal places.\nSyntax\nTruncate ( x, n )\nTable 2.1410:\nArgument\nDescription\nx\nThe number you want to truncate.\nn\nThe number of decimal places to which you want to truncate x. Valid\nvalues are 0 through 28.\n"}
{"page": 1601, "text": "Statements, Events, and Functions\nPage 1601\nReturn value\nDecimal.\nReturns the result of the truncation if it succeeds and null if it fails or if any argument is null.\nUsing Truncate on a computed field\nA real number loaded into a floating point register (used for calculation) is\nrepresented as precisely as the binary storage will permit. For example, the real\nnumber displayed as 2.07 is actually stored as 2.06999999999999999999999997.\nTruncating such a number may not give the expected result. To avoid this problem,\nyou can change the initial real datatype to long, integer, or decimal, or you can append\na constant in the truncate argument: Truncate (x + 0.0000001, n )\nExamples\nThis statement returns 9.2:\nTruncate(9.22, 1)\nThis statement returns 9.2:\nTruncate(9.28, 1)\nThis statement returns 9:\nTruncate(9.9, 0)\nThis statement returns -9.2:\nTruncate(-9.29, 1)\nSee also\nCeiling\nInit (obsolete)\nRound\nTruncate method for DataWindows in Section 2.4.128, \u201cTruncate\u201d in DataWindow\nReference.\n2.4.862 TrustVerify (obsolete)\nDescription\nCalled by EAServer when an SSL certificate chain needs to be approved for use by a client.\nThis function is used by PowerBuilder clients connecting to EAServer.\nObsolete function\nTrustVerify is obsolete, because EAServer is no longer supported since PowerBuilder\n2017.\nApplies to\nSSLCallBack objects\n"}
{"page": 1602, "text": "Statements, Events, and Functions\nPage 1602\nSyntax\nsslcallback.TrustVerify ( thesessioninfo, reason )\nTable 2.1411:\nArgument\nDescription\nsslcallback\nAn instance of a customized SSLCallBack object\nthesessioninfo\nA CORBAObject that contains information about the SSL session\nreason\nA long value indicating the reason for the call back. Values are:\n\u2022 1 REASON_CHAIN_INCOMPLETE\n\u2022 2 REASON_UNKNOWN_CA\n\u2022 3 REASON_CHAIN_EXPIRED\n\u2022 4 REASON_TRUSTDBPINNOTSET\n\u2022 5 REASON_TRUSTDBLOGINFAILED\nReturn value\nLong.\nReturns one of the following values:\n1 -- TRUST_ONCE (accept the current connection)\n2 -- TRUST_FAIL (reject the current connection)\n3 -- TRUST_ALWAYS (accept and mark as trusted in the database)\n4 -- TRUST_NEVER (reject and mark as untrusted in the database)\n5 -- TRUST_SESSION (accept now and throughout the current session)\n6 -- TRUST_FAIL_SESSION (reject throughout the current session)\nUsage\nA PowerBuilder application does not usually call the TrustVerify function directly.\nTrustVerify is called by EAServer when the internal SSL trust verification check fails to\nverify the server's certificate chain or when the PIN to log in to the Sybase PKCS11 token\nwas not supplied or incorrect. TrustVerify can be invoked when you are using any SSL\nprotocol, because server authentication is a required step in the SSL handshake process.\nTo override the behavior of any of the functions of the SSLCallBack object, create a standard\nclass user object that descends from SSLCallBack and customize this object as necessary.\nTo let EAServer know which object to use when a callback is required, specify the name of\nthe object in the callbackImpl SSL property. You can set this property value by calling the\nSetGlobalProperty function.\nIf you do not provide an implementation of TrustVerify, EAServer receives the\nCORBA::NO_IMPLEMENT exception and the connection is rejected.\nTo obtain a useful return value, provide the user with information about the reason for failure\nand ask the user to determine whether the server certificate chain can be trusted so that the\n"}
{"page": 1603, "text": "Statements, Events, and Functions\nPage 1603\nsession can continue. If the user specifies TRUST_FAIL or TRUST_ONCE, the function\nmay be called again during the current session.\nYou can enable the user to cancel the attempt to connect by throwing an exception in this\ncallback function. You need to catch the exception by wrapping the ConnectToServer\nfunction in a try-catch block.\nExamples\nThis example checks whether the failure was called by a bad or missing PIN and returns\nTRUST_FAIL to call GetPin if it was. If not, it displays the reason why the server failed\nto verify the certificate chain and prompts the user to choose whether to continue with the\nsession:\nlong       rc\nstring    stmp, stmp2\nw_response w_ssl_response\nstring ls_rc\nsslSessionInfo    mySessionInfo\nrc = thesessioninfo._narrow(mySessionInfo, &\n   \"thesessioninfo\")\nis_tokenName = mySessionInfo.getProperty( \"tokenName\" )\nCHOOSE CASE reason\nCASE 4   MessageBox(\"The SSL session requires a PIN\", &\n      \"Please enter the PIN for access to the \" + &\n      is_tokenName + \" certificate database.\")\n   return 2\nCASE 5   MessageBox(\"The PIN you entered is incorrect\", &\n   \"Please reenter the PIN for access to the \" + &\n      is_tokenName + \" certificate database.\")\n   return 2\nCASE 1\n      MessageBox(\"Certificate verification failed\",  &\n      \"Server's certificate chain is incomplete.ORB \" &\n      + \"~nis unable to complete the chain using the \" &\n      + \"CA certificates in the \" &\n      + \"~nSybase PKCS11 Token.\")\nCASE 2\n      MessageBox(\"Certificate verification failed\",  &\n      \"Server's certificate chain expired. One or \" &\n      + \" more of the certificates in the \" &\n      + \"chain is no longer valid.\")      \nCASE 3\n      MessageBox(\"Certificate verification failed\",  &\n      \"Server's certificate chain contains an \" &\n      + \"unknown root certification authority. \"  &\n      + \"This CA is not found in the trust data in \" &\n      + \"the Sybase PKCS11 Token.\")\nEND CHOOSE\nsTmp  = \"~nVersion: \"\nstmp += mySessionInfo.getProperty( \"Version\" )\nsTmp  = \"~nHost: \"\nstmp += mySessionInfo.getProperty( \"host\" )\nstmp += \"~nport: \"\nstmp += mySessionInfo.getProperty( \"port\" )\nstmp += \"~nciphersuite: \"\n"}
{"page": 1604, "text": "Statements, Events, and Functions\nPage 1604\nstmp += mySessionInfo.getProperty( \"ciphersuite\" )\nstmp += \"~nCertificateLabel: \"\nstmp += mySessionInfo.getProperty( \"certificateLabel\" )\nstmp += \"~nUserData: \"\nstmp += mySessionInfo.getProperty( \"UserData\" )\nstmp += \"~ntokenName: \"\nstmp += mySessionInfo.getProperty( \"tokenName\" )\nstmp += \"~npkcs11Module: \"\nstmp += mySessionInfo.getProperty( \"pkcs11Module\" )\nstmp += \"~nPlease enter your choice: \"\nstmp += \"~n 1: Accept this connection\"\nstmp += \"~n 2: Reject this connection\"\nstmp += \"~n 3: Accept this connection and mark CA as\n   trusted\"\nstmp += \"~n 4: Reject this connection and mark CA as\n   untrusted\"\nstmp += \"~n 5: Accept this CA throughout this session\"\nstmp += \"~n 6: Reject this CA throughout this session\"\n// Display information in a response window and return\n// response with CloseWithReturn\nopenwithparm(w_response, stmp)\nls_rc = Message.StringParm\nreturn long(ls_rc)\nSee also\nConnectToServer (obsolete)\nGetCertificateLabel (obsolete)\nGetCredentialAttribute (obsolete)\nGetPin (obsolete)\n2.4.863 TypeOf\nDescription\nDetermines the type of an object or control, reported as a value of the Object enumerated\ndatatype.\nApplies to\nAny object\nSyntax\nobjectname.TypeOf ( )\nTable 2.1412:\nArgument\nDescription\nobjectname\nThe name of the object or control for which you want the type\nReturn value\nObject enumerated datatype. Returns the type of objectname. If objectname is null, TypeOf\nreturns null.\nUsage\nUse TypeOf to determine the type of a selected or dragged control.\n"}
{"page": 1605, "text": "Statements, Events, and Functions\nPage 1605\nExamples\nIf dw_Customer is a DataWindow control, this statement returns DataWindow!:\ndw_Customer.Typeof()\nThis example looks at the first five controls in the w_dept window's Control array property.\nThe loop executes some statements for each control that is a CheckBox:\ninteger n\nFOR n = 1 to 5\n      IF w_dept.Control[n].TypeOf() = CheckBox! THEN\n      ... // Some processing\n      END IF\nNEXT\nThis loop stores in the winobject array the type of each object in the window's Control array\nproperty:\nobject winobjecttype[]\nlong ll_count\nFOR ll_count = 1 to UpperBound(Control[])\n      winobjecttype[ll_count] = &\n         TypeOf(Control[ll_count])\nNEXT\nIf you do not know the type of a control passed via PowerObjectParm in the Message\nobject, the following example assigns the passed object to a graphic object variable, the\nancestor of all the control types, and assigns the type to a variable of type object, which is\nthe enumerated datatype that TypeOf returns. The CHOOSE CASE statement can include\nprocessing for each control type that you want to handle. This code would be in the Open\nevent for a window that was opened with OpenWithParm:\ngraphicobject stp_obj\nobject type_obj\n \nstp_obj = Message.PowerObjectParm\ntype_obj = stp_obj.TypeOf()\n \nCHOOSE CASE type_obj\nCASE DataWindow!\n      MessageBox(\"The object\",\" Is a datawindow\")\n \nCASE SingleLineEdit!\n      MessageBox(\"The object\",\" Is a sle\")\n \n... // Cases for additional object types\nCASE ELSE\n      MessageBox(\"The object\",\" Is irrelevant!\")\nEND CHOOSE\nSee also\nClassName\n2.4.864 Uncheck\nDescription\nRemoves the check mark, if any, next to an item a drop-down or cascading menu and sets the\nitem's Checked property to false.\n"}
{"page": 1606, "text": "Statements, Events, and Functions\nPage 1606\nApplies to\nMenu objects\nSyntax\nmenuname.Uncheck ( )\nTable 2.1413:\nArgument\nDescription\nmenuname\nThe fully qualified name of the menu selection from which you want\nto remove the checkmark, if any. The menu must be on a drop-down or\ncascading menu, not an item on a menu bar.\nReturn value\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs. If menuname is null, Uncheck returns null.\nUsage\nA checkmark next to a menu item indicates that the menu option is currently on and that\nthe user can turn the option on and off by choosing it. For example, in the Window painter's\nDesign menu, a checkmark is displayed next to Grid when the grid is on.\nYou can use Check in an item's Clicked script to mark a menu item when the user turns the\noption on and Uncheck to remove the check when the user turns the option off.\nEquivalent syntax\nYou can set the object's Checked property instead of calling Uncheck:\nmenuname.Checked = false\nThis statement:\nm_appl.m_view.m_grid.Checked = FALSE\nis equivalent to:\nm_appl.m_view.m_grid.Uncheck()\nExamples\nThis statement removes the checkmark next to the m_grid menu selection in the drop-down\nmenu m_view on the menu bar m_appl:\nm_appl.m_view.m_grid.Uncheck()\nThis example checks whether the m_grid menu selection in the drop-down menu m_view\nof the menu bar m_appl is currently checked. If so, the script unchecks the item. If it is not\nchecked, the script checks the item:\nIF m_appl.m_view.m_grid.Checked = TRUE THEN\n      m_appl.m_view.m_grid.Uncheck()\nELSE\n      m_appl.m_view.m_grid.Check()\nEND IF\n"}
{"page": 1607, "text": "Statements, Events, and Functions\nPage 1607\nSee also\nCheck\n2.4.865 Undo\nDescription\nCancels the last edit in an edit control, restoring the text to the content before the last change.\nApplies to\nDataWindow, MultiLineEdit, RichTextEdit, and SingleLineEdit controls\nSyntax\neditname.Undo ( )\nTable 2.1414:\nArgument\nDescription\neditname\nThe name of the DataWindow control, MultiLineEdit, RichTextEdit, or\nSingleLineEdit in which you want to cancel (reverse) the last edit. For\na DataWindow control, reverses the last edit in the edit control over the\ncurrent row and column.\nReturn value\nInteger.\nReturns 1 when it succeeds and -1 if an error occurs. If editname is null, Undo returns null.\nUsage\nTo determine whether the last action can be canceled, call the CanUndo function.\nExamples\nThis statement reverses the last edit in MultiLineEdit mle_Contact:\nmle_Contact.Undo()\nThe following statement checks to see if the last edit in the MultiLineEdit mle_Contact can\nbe reversed, and if so reverse it:\nIF mle_Contact.CanUndo() THEN mle_Contact.Undo()\nSee also\nCanUndo\n2.4.866 UnitsToPixels\nDescription\nConverts PowerBuilder units to pixels and reports the measurement. Because pixels are not\nusually square, you also specify whether to convert in the horizontal or vertical direction.\nSyntax\nUnitsToPixels ( units, type )\n"}
{"page": 1608, "text": "Statements, Events, and Functions\nPage 1608\nTable 2.1415:\nArgument\nDescription\nunits\nAn integer or long whose value is the number of PowerBuilder units you\nwant to convert to pixels\ntype\nA value of the ConvertType enumerated datatype indicating how to\nconvert the value:\n\u2022 XUnitsToPixels! -- Convert the units in the horizontal direction\n\u2022 YUnitsToPixels! -- Convert the units in the vertical direction\nReturn value\nInteger or long.\nReturns the converted value if it succeeds and -1 if an error occurs. If any argument's value is\nnull, UnitsToPixels returns null.\nIf the value of the first argument is an integer type, then the return value is an integer type; if\nthe value of the first argument is a long type, then the return value is a long type; if the value\nof the first argument is a numeric value, then the return value is a long type by default.\nExamples\nThese statements convert 350 vertical PowerBuilder units to vertical pixels and set value\nequal to the converted value:\nlong Value\nValue = UnitsToPixels(350, YUnitsToPixels!)\nSee also\nPixelsToUnits\n2.4.867 UnregisterEvent\nDescription\nUnregisters the user defined event that is registered using the RegisterEvent function.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.UnregisterEvent (string eventname) \nTable 2.1416:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\neventname\nThe name of the user-defined event to be unregistered.\nReturn value\n"}
{"page": 1609, "text": "Statements, Events, and Functions\nPage 1609\nInteger.\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThe following example triggers an unregistered event in JavaScript and returns an error:\nInteger li_Return\nString ls_JS, ls_Result, ls_Error\nli_Return = wb_1.UnregisterEvent(\"ue_getstring\")\nIf li_Return = 1 Then\n ls_JS = \"function event1() { return window.webBrowser.ue_getstring('Hi,PB!');}\n event1();\"\n wb_1.EvaluateJavascriptSync(ls_JS, ls_Result, ls_Error)\n If Len(ls_Error) > 0 Then\n  MessageBox( \"Error\", ls_Error )\n End If\nEnd If\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\nPrintAsPDF\nPauseDownload\nRegisterEvent\nResumeDownload\nRefresh\nStopNavigation\nZoom\n2.4.868 UpdateLinksDialog\nDescription\nAttempts to find a file linked to an OLE container. If the linked file is not found, a dialog box\ntells the user and lets them bring up a second dialog box for find the file or changing the link.\nApplies to\nOLE controls and OLE DWObjects (objects within a DataWindow object that is within a\nDataWindow control)\nSyntax\nobjectref.UpdateLinksDialog ( )\n"}
{"page": 1610, "text": "Statements, Events, and Functions\nPage 1610\nTable 2.1417:\nArgument\nDescription\nobjectref\nThe name of the OLE control or the fully qualified name of a OLE\nDWObject within a DataWindow control that contains the object for\nwhich you want to establish a link.\nThe fully qualified name for a DWObject has this syntax:\ndwcontrol.Object.dwobjectname\nReturn value\nInteger.\nReturns 0 if it succeeds and -1 if an error occurs.\nUsage\nIf a container's LinkUpdateOptions property is set for automatic update, PowerBuilder tries\nto update the link when the OLE container is created and the object is loaded (for example,\nwhen the window is opened). If the linked file is not found, a message informs the user and\nhe or she can choose to edit the link (for example, break the link or browse for the correct\nfile).\nUpdateLinksDialog and LinkTo are useful when a linked file has been moved and the\ncontainer's LinkUpdateOptions property is set for manual update.\nUpdateLinksDialog\nCalling this function triggers the same process that occurs for automatic update.\nPowerBuilder tries to find the file and if it fails it gives the user the opportunity to edit the\nlink.\nLinkTo\nIf you want to establish a link without involving the user, call the LinkTo function. Its\narguments specify the file and item you want to link. If you want to display your own dialog\nfor selecting the linked file, you can take the information the user specifies and call the\nLinkTo function.\nIf the OLE container holds an embedded object, calling UpdateLinksDialog has no effect. It\nreturns zero because no link is broken.\nFor more information about updating links, see Section 5.3.3.2, \u201cLinking versus embedding\u201d\nin Application Techniques.\nExamples\nThis example looks for the linked file for an OLE control ole_report. If the file is missing, it\nprompts the user to display the Links dialog and edit the link:\nole_report.UpdateLinksDialog()\nThis example looks for the linked file for an OLE DWObject ole_word in the DataWindow\ncontrol dw_customer_data. If the file is missing, the user can choose to edit the link using the\nLinks dialog:\ndw_customer_data.Object.ole_word.UpdateLinksDialog()\n"}
{"page": 1611, "text": "Statements, Events, and Functions\nPage 1611\nSee also\nInsertObject\nLinkTo\n2.4.869 Upper\nDescription\nConverts all the characters in a string to uppercase.\nSyntax\nUpper ( string )\nTable 2.1418:\nArgument\nDescription\nstring\nThe string you want to convert to uppercase letters\nReturn value\nString.\nReturns string with lowercase letters changed to uppercase if it succeeds and the empty string\n(\"\") if an error occurs. If string is null, Upper returns null.\nExamples\nThis statement returns BABE RUTH:\nUpper(\"Babe Ruth\")\nSee also\nLower\nUpper method for DataWindows in Section 2.4.129, \u201cUpper\u201d in DataWindow Reference.\n2.4.870 UpperBound\nDescription\nObtains the upper bound of a dimension of an array.\nSyntax\nUpperBound ( array {, n } )\nTable 2.1419:\nArgument\nDescription\narray\nThe name of the array for which you want the upper bound of a\ndimension\nn (optional)\nThe number of the dimension for which you want the upper bound. The\ndefault is 1\nReturn value\n"}
{"page": 1612, "text": "Statements, Events, and Functions\nPage 1612\nLong.\nReturns the upper bound of dimension n of array. If n is greater than the number of\ndimensions of the array, UpperBound returns -1. If any argument's value is null, UpperBound\nreturns null.\nUsage\nFor variable-size arrays, memory is allocated for the array when you assign values to it.\nUpperBound returns the largest value that has been defined for the array in the current script.\nBefore you assign values, the lower bound is 1 and the upper bound is 0. For fixed arrays,\nwhose size is specified when it is declared, UpperBound always returns the declared size.\nExamples\nThe following statements illustrate the values UpperBound reports for fixed-size arrays and\nfor variable-size arrays before and after memory has been allocated:\ninteger a[5]\nUpperBound(a)            // Returns 5\nUpperBound(a,1)      // Returns 5\nUpperBound(a,2)      // Returns -1; no 2nd dimension\n \ninteger b[10,20]\nUpperBound(b,1)      // Returns 10\nUpperBound(b,2)      // Returns 20\n \ninteger c[ ]\nUpperBound(c)       // Returns 0; no memory allocated\nc[50] = 900\nUpperBound(c)       // Returns 50\nc[60] = 800\nUpperBound(c)       // Returns 60\nc[60] = 800\nc[50] = 700\nUpperBound(c)       // Returns 60\n \ninteger d[10 to 50]\nUpperBound(d)       // Returns 50\nThis example determines the position of a menu bar item called File, and if the item has a\ncascading menu with an item called Update, disables the Update item. The code could be a\nscript for a control in a window.\nThe code includes a rather complicated construct: Parent.Menuid.Item. Its components are:\n\u2022 Parent -- The parent window of the control that is running the script.\n\u2022 Menuid -- A property of a window whose value identifies the menu associated with the\nwindow.\n\u2022 Item -- A property of a menu that is an array of items in that menu. If Item is itself a drop-\ndown or cascading menu, it has its own item array, which can be a fourth qualifier.\nThe script is:\nlong i, k, tot1, tot2\n \n// Determine how many menu bar items there are.\ntot1 = UpperBound(Parent.Menuid.Item)\n"}
{"page": 1613, "text": "Statements, Events, and Functions\nPage 1613\n \nFOR i = 1 to tot1\n      // Find the position of the File item.\n      IF Parent.Menuid.Item[i].text = \"File\" THEN\n         MessageBox(\"Position\", &\n            \"File is in Position \"+ string(i))\n         tot2 = UpperBound(Parent.Menuid.Item[i].Item)\n \n         FOR k = 1 to tot2\n            // Find the Update item under File.\n            IF Parent.Menuid.Item[i].Item[k].Text = &\n               \"Update\" THEN\n               // Disable the Update menu option.\n               Parent.Menuid.Item[i].Item[k].Disable()\n               EXIT\n            END IF\n         NEXT\n         EXIT\n      END IF\nNEXT\nSee also\nLowerBound\n2.4.871 UrlDecode\nDescription\nDecodes a string value using URL decoder.\nApplies to\nCoderObject object\nSyntax\ncoder.UrlDecode ( variable )\nTable 2.1420:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA string whose value is the data you want to decode with URL decoder.\nReturn value\nBlob. Returns the result of the decoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement decodes the data that is encoded using URL.\nBlob lblb_data\nString ls_UrlStr\nCoderObject lnv_CoderObject\nlnv_CoderObject = Create CoderObject\n//ls_UrlStr = lnv_CoderObject.UrlEncode(Blob(\"https://www.appeon.com\",\n EncodingANSI!))\n"}
{"page": 1614, "text": "Statements, Events, and Functions\nPage 1614\nls_UrlStr = \"https%3A%2F%2Fwww.appeon.com\"\nlblb_data = lnv_CoderObject.UrlDecode(ls_UrlStr)\nmessagebox(\"UrlDecode\", string(lblb_data, EncodingANSI!))\nSee also\nHexDecode\nHexEncode\nBase32Decode\nBase32Encode\nBase64Decode\nBase64Encode\nBase64UrlDecode\nBase64UrlEncode\nUrlEncode\n2.4.872 UrlEncode\nDescription\nEncodes a blob value using URL encoder.\nApplies to\nCoderObject object\nSyntax\ncoder.UrlEncode ( variable )\nTable 2.1421:\nArgument\nDescription\ncoder\nThe name of the CoderObject object.\nvariable\nA blob whose value is the data you want to encode with URL encoder.\nWhen using the system blob function to convert a string to a blob, it is\nrecommended to specify its encoding argument to be EncodingANSI!\n(for English characters only) or EncodingUTF8!, otherwise, the default\nEncodingUTF16LE! will be used.\nReturn value\nString. Returns the result of the encoding if it succeeds. If any argument's value is null, the\nmethod returns null. If an error occurs, throw the exception.\nExamples\nThis statement encodes the data using URL and returns the encoded data.\nBlob lblb_data\nString ls_UrlStr\n"}
{"page": 1615, "text": "Statements, Events, and Functions\nPage 1615\nlblb_data = Blob(\"https://www.appeon.com\", EncodingANSI!)\nCoderObject lnv_CoderObject\nlnv_CoderObject = Create CoderObject\nls_UrlStr = lnv_CoderObject.UrlEncode(lblb_data)\nSee also\nHexDecode\nHexEncode\nBase32Decode\nBase32Encode\nBase64Decode\nBase64Encode\nBase64UrlDecode\nBase64UrlEncode\nUrlDecode\n2.4.873 WebBrowserGet\nDescription\nGets the settings of the WebBrowser control.\nSyntax\nWebBrowserGet (string n, ref string v)\nTable 2.1422:\nArgument\nDescription\nn\nThe name of the setting. See WebBrowserSet for the list of available\nsettings.\nv\nThe value of the setting that is obtained.\nReturn value\nInteger.\nReturns the following error code:\n\u2022 1 -- Success\n\u2022 -8 -- The setting name does not exist.\nExamples\nThe following example gets the values that are set for the proxy for the WebBrowser control:\nWebBrowserGet (\"ProxyAddress\", strValue)\nWebBrowserGet (\"ProxyPort\", strValue)\n"}
{"page": 1616, "text": "Statements, Events, and Functions\nPage 1616\nWebBrowserGet (\"ProxyUser\", strValue)\nWebBrowserGet (\"ProxyPassword\", strValue)\nSee also\nWebBrowserSet\n2.4.874 WebBrowserSet\nDescription\nConfigures the settings for the WebBrowser control.\nSyntax\nWebBrowserSet (string n, string v)\nTable 2.1423:\nArgument\nDescription\nn\nThe name of the setting. The setting can be:\n\u2022 CachePath -- The folder that stores the web page cache, cookies etc.\nYou can specify a directory or use the default directory which uses the\nsystem environment %HOMEPATH% and %TEMP%, for example, C:\n\\Users\\appeon\\AppData\\Local\\Temp\\pbcefcache.\nCachePath must be set before the WebBrowser control is initialized. It\nmust be an absolute path, and cannot be a relative path.\n\u2022 UserDataPath -- The folder that stores the user data dictionary. You\ncan specify a directory or use the default directory which uses the\nsystem environment %HOMEPATH% and %TEMP%, for example, C:\n\\Users\\appeon\\AppData\\Local\\pbcef\\User Data\\Dictionaries.\nUserDataPath must be set before the WebBrowser control is initialized.\nIt must be an absolute path, and cannot be a relative path.\n\u2022 DownloadPath -- The folder that stores the downloaded files etc. You\ncan specify a directory or use the default directory which uses the\nsystem environment %HOMEPATH% and %TEMP%, for example, C:\n\\Users\\appeon\\AppData\\Local\\Temp\\pbcefdownload.\nDownloadPath must be set before the WebBrowser control starts\ndownloading files. It must be an absolute path, and cannot be a relative\npath.\n\u2022 UserAgent -- The User-Agent request header that contains a\ncharacteristic string that allows the network protocol peers to identify\nthe application type, operating system, software vendor or software\nversion of the requesting software user agent.\nUserAgent must be set before the WebBrowser control is initialized.\n\u2022 ProxyAuto -- Whether to use auto proxy detection. The value could be\n1 or 0 (the default). Auto proxy detection is used if it is set to 1.\n"}
{"page": 1617, "text": "Statements, Events, and Functions\nPage 1617\nArgument\nDescription\n\u2022 ProxyPacUrl -- The URL address of the PAC file. It is unsupported to\nload the PAC file on the local directory via file:/// (you will have to put\nthe file on the server and load it via http or https).\n\u2022 ProxyAddress -- The address of the proxy server.\n\u2022 ProxyPort -- The port of the proxy server. The default value is -1.\n\u2022 ProxyUser -- The user name that will be authenticated by the proxy\nserver.\n\u2022 ProxyPassword -- The password that will be authenticated by the proxy\nserver.\nWebBrowser supports auto proxy detection, PAC (proxy auto\nconfiguration) file setting, and manual proxy settings. The priority\norder of the settings is: auto proxy detection > PAC file setting >\nmanual proxy settings. By default the IE proxy is used.\nIf the proxy setting is set before the WebBrowser control is initialized,\nit will be effective to all Web pages loaded; if it is set before the\nNavigate operation, then it will be effective to only the Web page\nbeing navigated.\n\u2022 allow-file-access-from-files -- Whether to allow access to the local\nfiles (XML etc.). The value is \"true\" or \"false\" (the default).\n\u2022 enable-media-stream -- Whether to allow access to the microphone or\ncamera. The value is \"true\" or \"false\" (the default).\nv\nThe value of the setting to be set.\nReturn value\nInteger.\nReturns the following error code:\n\u2022 1 -- Success\n\u2022 -7 -- CEF has been initialized, and the current item can only be set before CEF\ninitialization.\n\u2022 -8 -- The setting name does not exist.\n\u2022 -9 -- The path is invalid or does not exist.\nExamples\nThe following example configures the proxy settings for the WebBrowser control in the\napplication Open event.\nOpen(string commandline)\n"}
{"page": 1618, "text": "Statements, Events, and Functions\nPage 1618\n{\n    WebBrowserSet (\"ProxyAddress\", \"192.168.5.16\")\n    WebBrowserSet (\"ProxyPort\", \"8080\")\n    WebBrowserSet (\"ProxyUser\", \"Admin\")\n    WebBrowserSet (\"ProxyPassword\", \"123Test\")\n}\nSee also\nWebBrowserGet\n2.4.875 Which\nDescription\nAllows a component to find out whether it is running on a transaction server.\nApplies to\nTransactionServer objects\nSyntax\ntransactionserver.Which (  )\nTable 2.1424:\nArgument\nDescription\ntransactionserver Reference to the TransactionServer service instance\nReturn value\nInteger.\nReturns 0 if the object is not running on a transaction server, 1 if it is running on EAServer\n(obsolete), or 2 if it is running on COM+.\nUsage\nThe Which function allows a custom class user object to perform different processing\ndepending on its runtime context.\nExamples\nThe code in the following example checks to see whether the runtime context is a transaction\nserver. If it is, it uses transaction semantics that are appropriate for a transaction server;\notherwise, it uses COMMIT and ROLLBACK to communicate directly with the database:\n// Instance variables:\n// DataStore ids_datastore\n// TransactionServer ts\n \nInteger li_rc\nlong ll_rv\n \nli_rc = this.GetContextService(\"TransactionServer\", &\n      ts)\nIF li_rc <> 1 THEN\n      // handle the error\nEND IF\n...\n...\n"}
{"page": 1619, "text": "Statements, Events, and Functions\nPage 1619\nll_rv = ids_datastore.Update()\n \nIF ts.Which() > 0 THEN\n      IF ll_rv = 1 THEN\n         ts.EnableCommit()\n      ELSE\n         ts.DisableCommit()\n      END IF\nELSE\n      IF ll_rv = 1 THEN\n         COMMIT USING SQLCA;\n      ELSE\n         ROLLBACK USING SQLCA;\n      END IF\nEND IF\nSee also\nEnableCommit\nIsInTransaction (obsolete)\nIsTransactionAborted (obsolete)\nLookup (obsolete)\nSetAbort\nSetComplete\n2.4.876 WordCap\nDescription\nCapitalizes the first letter of each word in a passed script. It sets the remaining letters in each\nword to lowercase.\nApplies to\nAll text objects\nSyntax\nWordCap ( text )\nTable 2.1425:\nArgument\nDescription\ntext\nString to be modified\nReturn value\nString.\nIf it succeeds, returns the text passed in the function argument with the first letter of each\nword in uppercase and the remaining letters in lowercase. Returns null if an error occurs.\nExamples\nThis example takes user-entered text from a SingleLineEdit control, capitalizing the first\nletter in each word and setting the other letters to lowercase, before passing it in a string\nvariable:\n"}
{"page": 1620, "text": "Statements, Events, and Functions\nPage 1620\nstring ls_fullname\nls_fullname = WordCap (sle_1.text)\nThe text joe MaCdonald would be rendered as Joe Macdonald by the WordCap function.\n2.4.877 WorkSpaceHeight\nDescription\nObtains the height of the workspace within the boundaries of the specified window.\nApplies to\nWindow objects\nSyntax\nwindowname.WorkSpaceHeight ( )\nTable 2.1426:\nArgument\nDescription\nwindowname\nThe name of the window for which you want the height of the workspace\narea\nReturn value\nInteger.\nReturns the height of the workspace area in PowerBuilder units in windowname. If an error\noccurs, WorkSpaceHeight returns -1. If windowname is null, WorkSpaceHeight returns null.\nUsage\nThe workspace height does not include the thickness of the frame, the title bar, menu bar,\nhorizontal scroll bar, or any toolbars at the top or bottom. The workspace height includes the\nMicroHelp status bar.\nThe workspace width does not include the thickness of the frame, the vertical scroll bar, or\nany toolbars on the left or right.\nExamples\nThis example returns the height of the workspace area in the w_employee window:\nInteger Height\nHeight = W_employee.WorkSpaceHeight()\nThis example resizes the client area of a custom MDI frame window (that is, a frame window\nin which you have placed controls). P_logo is the control that has been placed on the window.\nThe code belongs in the script for the frame's Resize event:\ninteger lw, lh\n// Get the current workspace measurements\nlw = This.WorkSpaceWidth()\nlh = This.WorkSpaceHeight()\n \n// Subtract the logo, MicroHelp from the height\nlh = lh - (p_logo.Y + p_logo.Height)\nlh = lh - MDI_1.MicroHelpHeight\n \n"}
{"page": 1621, "text": "Statements, Events, and Functions\nPage 1621\n// Add the distance between the top of the frame\n// (just below the menu bar or toolbar, if any)\n// and top of the workspace.\nlh = lh + This.WorkspaceY( )\n \n// Move the client area below the picture control\nMDI_1.Move(This.WorkspaceX( ), &\n      p_logo.Y + p_logo.Height)\n \n// Resize the client area using the calculated dims\nmdi_1.Resize(lw, lh)\nSee also\nWorkSpaceWidth\nWorkSpaceX\nWorkSpaceY\nPointerX\nPointerY\n2.4.878 WorkSpaceWidth\nDescription\nObtains the width of the workspace within the boundaries of the specified window.\nApplies to\nWindow objects\nSyntax\nwindowname.WorkSpaceWidth ( )\nTable 2.1427:\nArgument\nDescription\nwindowname\nThe name of the window for which you want the width of the workspace\narea\nReturn value\nInteger.\nReturns the width of the workspace area (in PowerBuilder units) in windowname. If an error\noccurs, WorkSpaceWidth returns -1. If windowname is null, WorkSpaceWidth returns null.\nUsage\nThe workspace height does not include the thickness of the frame, the title bar, menu bar,\nhorizontal scroll bar, or any toolbars at the top or bottom. The workspace height includes the\nMicroHelp status bar.\nThe workspace width does not include the thickness of the frame, the vertical scroll bar, or\nany toolbars on the left or right.\nExamples\nThis example returns the width of the workspace area in the w_employee window:\n"}
{"page": 1622, "text": "Statements, Events, and Functions\nPage 1622\ninteger Width\nWidth = w_employee.WorkSpaceWidth()\nSee also\nPointerX\nPointerY\nWorkSpaceHeight\nWorkSpaceX\nWorkSpaceY\n2.4.879 WorkSpaceX\nDescription\nObtains the distance between the left edge of a window's workspace and the left edge of the\nscreen.\nFor custom MDI frames, WorkSpaceX obtains the distance between the left edge of the\nframe window and the left side of the workspace area.\nApplies to\nWindow objects\nSyntax\nwindowname.WorkSpaceX ( )\nTable 2.1428:\nArgument\nDescription\nwindowname\nThe name of the window for which you want the distance between the\nleft edge of the workspace area and the left edge of the screen\nReturn value\nInteger.\nReturns the distance that the left edge of the workspace area of windowname is from the\nleft edge of the screen (in PowerBuilder units). WorkSpaceX returns -1 if an error occurs. If\nwindowname is null, WorkSpaceX returns null.\nUsage\nThe workspace area is the area between the sides of the window (not including the thickness\nof the frame or the vertical scroll bar, if any) and the top and bottom of the window (not\nincluding the thickness of the frame or the title bar, menu bar, or horizontal scroll bar, if any).\nExamples\nThis example returns the distance from the left edge of the screen to the left edge of the\nworkspace area in the w_employee window:\ninteger workx\nworkx = w_employee.WorkSpaceX()\nSee also\n"}
{"page": 1623, "text": "Statements, Events, and Functions\nPage 1623\nPointerX\nPointerY\nWorkSpaceHeight\nWorkSpaceWidth\nWorkSpaceY\n2.4.880 WorkSpaceY\nDescription\nObtains the distance between the top of a window's workspace and the top of the screen.\nFor custom MDI frames, WorkSpaceY obtains the distance from the top of the frame window\nand the top of the workspace area. The top of the frame window is the lower edge of the\nmenu bar or toolbar, if any.\nApplies to\nWindow objects\nSyntax\nwindowname.WorkSpaceY ( )\nTable 2.1429:\nArgument\nDescription\nwindowname\nThe name of the window for which you want the distance between the\ntop of the workspace area and the top of the screen\nReturn value\nInteger.\nReturns the distance that the top of the workspace area of windowname is from the top of the\nscreen (in PowerBuilder units). If an error occurs, WorkSpaceY returns -1. If windowname is\nnull, WorkSpaceY returns null.\nUsage\nThe workspace area is the area between the sides of the window (not including the thickness\nof the frame or the vertical scroll bar, if any) and the top and bottom of the window (not\nincluding the thickness of the frame or the title bar, menu bar, or horizontal scroll bar, if any).\nExamples\nThis example returns the distance from the top of the screen to the top of the workspace area\nin the w_employee window:\ninteger worky\nworky = w_employee.WorkSpaceY()\nSee also\nPointerX\nPointerY\n"}
{"page": 1624, "text": "Statements, Events, and Functions\nPage 1624\nWorkSpaceHeight\nWorkSpaceWidth\nWorkSpaceX\n2.4.881 Write\nDescription\nWrites data to an opened OLE stream object.\nApplies to\nOLEStream objects\nSyntax\nolestream.Write ( dataforstream )\nTable 2.1430:\nArgument\nDescription\nolestream\nThe name of an OLE stream variable that has been opened\ndataforstream\nA string, blob, or character array whose value you want to write to\nolestream\nReturn value\nLong.\nReturns the number of characters or bytes written if it succeeds and one of the following\nnegative values if an error occurs:\n-1 -- Stream is not open\n-2 -- Read error\n-9 -- Other error\nIf any argument's value is null, Write returns null.\nExamples\nThis example opens an OLE object in the file MYSTUFF.OLE and assigns it to the\nOLEStorage object olest_stuff. Then it opens the stream called info in olest_stuff and assigns\nit to the stream object olestr_info. It writes the contents of the blob variable lb_info to the\nstream olestr_info. Finally, it saves the storage olest_stuff:\nboolean lb_memexists\nOLEStorage olest_stuff\nOLEStream olestr_info\ninteger li_result\nlong ll_result\n \nolest_stuff = CREATE OLEStorage\nli_result = olest_stuff.Open(\"c:\\ole2\\mystuff.ole\")\nIF li_result <> 0 THEN RETURN\n \nli_result = olestr_info.Open(olest_stuff, \"info\", &\n      stgReadWrite!, stgExclusive!)\n"}
{"page": 1625, "text": "Statements, Events, and Functions\nPage 1625\nIF li_result <> 0 THEN RETURN\nll_result = olestr_info.Write(lb_info)\nIF ll_result = 0 THEN olest_stuff.Save()\nSee also\nLength\nOpen\nRead\nSeek\n2.4.882 XMLParseFile\nDescription\nParses an XML file and determines whether the file is well formed or complies with a\nspecified grammar.\nSyntax\nXMLParseFile ( xmlfilename {, validationscheme }{, parsingerrors } {,\n namespaceprocessing {, schemaprocessing {, schemafullchecking }}})\nTable 2.1431:\nArgument\nDescription\nxmlstring\nA string whose value is the name of the XML file to be parsed.\nvalidationscheme\n(optional)\nA value of the ValSchemeType enumerated datatype specifying the\nvalidation method used by the SAX parser. Values are:\n\u2022 ValNever! -- Do not report validation errors.\n\u2022 ValAlways! -- Always report validation errors.\n\u2022 ValAuto! -- (default) Report validation errors only if a grammar is\nspecified.\nparsingerrors\n(optional)\nA string buffer to which error messages can be saved. If not specified or\nset to null, errors display in a message box.\nnamespaceprocessing\n(optional)\nA boolean specifying whether name space rules are enforced. When set\nto true, the parser enforces the constraints and rules defined by the W3C\nrecommendation on namespaces in XML.\nIf validationscheme is set to ValAlways! or ValAuto!, the document must\ncontain a grammar that supports the use of namespaces.\nThe default is false.\nschemaprocessing\n(optional)\nA boolean specifying whether schema support is enabled. When set to\nfalse, the parser does not process any schema found.\nIf schemaprocessing is true, namespaceprocessing must also be set to\ntrue.\nThe default is false.\n"}
{"page": 1626, "text": "Statements, Events, and Functions\nPage 1626\nArgument\nDescription\nschemafullchecking\n(optional)\nA boolean specifying whether schema constraints are checked. When set\nto true, the schema grammar is checked for errors.\nSetting schemafullchecking to true has no effect unless schemaprocessing\nis also set to true.\nThe default is false.\nReturn value\nLong.\nReturns 0 for success and one of the following negative values if an error occurs:\n-1 -- Parsing error\n-2 -- Argument error\nUsage\nUse XMLParseFile to validate an XML file against a DTD or XML schema before\nproceeding with additional processing.\nIf no DTD or schema is included or referenced in the file, XMLParseFile checks whether the\ndocument contains well-formed XML. If the XML document fails validation or is not well-\nformed, XMLParseFile returns -1.\nBecause XSD You can also check the well-formedness of an XSD file because they are\nin XML format. The validation scheme must be ValAuto!, which is the default validation\nscheme.\nTo suppress the display of message boxes if errors occur, specify a string value for the\nparsingerrors argument.\nThe files pbxercesNN.dll and xerces-c_XX.dll, where NN represents the PowerBuilder\nversion and XX represents the Xerces version, must be deployed with the other PowerBuilder\nruntime files in the search path of any application or component that uses this function.\nExamples\nThese statements parse an XML document. If a DTD is included or referenced, the document\nis validated. Otherwise the parser checks for well-formedness. If the document passes\nvalidation, it is imported into a DataWindow control:\nlong ll_ret\nll_ret = XMLParseFile(\"c:\\temp\\mydoc.xml\")\nif ll_ret = 0 then dw_1.ImportFile(\"c:\\temp\\mydoc.xml\")\nThese statements parse an XML document and save any errors in the string variable ls_err. If\nerrors occur, no message boxes display. If a DTD is included or referenced, the document is\nvalidated. Otherwise the parser checks for well-formedness:\nlong ll_ret\nstring ls_err\nll_ret = XMLParseFile(\"c:\\temp\\mydoc.xml\", ls_err)\nThese statements parse an XML document. If an XMLSchema is included or referenced, the\ndocument is validated, otherwise the parser checks for well-formedness:\n"}
{"page": 1627, "text": "Statements, Events, and Functions\nPage 1627\nlong ll_ret\nll_ret = XMLParseFile(\"c:\\temp\\mydoc.xml\", TRUE, TRUE)\nThese statements parse an XML document, validate against a given XML schema, and save\nany errors that occur in a string variable. If errors occur, no message boxes display. If no\nschema is included or referenced in the file, XMLParseFile returns -1:\nlong ll_ret\nstring ls_err\nll_ret = XMLParseFile(\"c:\\temp\\mydoc.xml\", ValAlways!, ls_err, TRUE, TRUE)\nThese statements parse an XML document, validate against a given XML schema, and parse\nthe schema itself for additional errors. If no schema is included or referenced in the file,\nXMLParseFile returns -1:\nlong ll_ret\nstring ls_err\nll_ret = XMLParseFile(\"c:\\temp\\mydoc.xml\", ValAlways!, ls_err, TRUE, TRUE, TRUE)\nThese statements parse an XML document, validate against a given DTD, and save any\nerrors that occur in a string variable. If errors occur, no message boxes display. If no DTD is\nincluded or referenced in the file, XMLParseFile returns -1:\nlong ll_ret\nstring ls_err\nll_ret = XMLParseFile(\"c:\\temp\\mydoc.xml\", ValAlways!, ls_err)\nThese statements parse an XSD file and test it for well-formedness. You must use ValAuto!\nwhen you parse an XSD file because there is no external schema associated with it. However,\nyou do not need to specify the option when you call the function because it is the default\nvalidation method:\nlong ll_ret\nll_ret = XMLParseFile (\"c:\\mydoc.xsd\")\nSee also\nImportFile\nXMLParseString\nImportFile method for DataWindows in Section 9.96, \u201cImportFile\u201d in DataWindow\nReference.\n2.4.883 XMLParseString\nDescription\nParses an XML string and determines whether the string is well formed or complies with a\nspecified grammar.\nSyntax\nXMLParseString ( xmlstring {, validationscheme }{, parsingerrors } {,\n namespaceprocessing {, schemaprocessing {, schemafullchecking }}})\nTable 2.1432:\nArgument\nDescription\nxmlstring\nA string that holds the XML document to be parsed.\n"}
{"page": 1628, "text": "Statements, Events, and Functions\nPage 1628\nArgument\nDescription\nvalidationscheme\n(optional)\nA value of the ValSchemeType enumerated datatype specifying the\nvalidation method used by the SAX parser. Values are:\n\u2022 ValNever! -- Do not report validation errors.\n\u2022 ValAlways! -- Always report validation errors. Use ValAlways! only\nwhen you know there is a DTD or schema against which the file can be\nvalidated.\n\u2022 ValAuto! -- (default) Report validation errors only if a grammar is\nspecified.\nparsingerrors\n(optional)\nA string buffer to which error messages can be saved. If not specified or\nset to null, errors are shown to the user in a dialog box.\nnamespaceprocessing\n(optional)\nA boolean specifying whether name space rules are enforced. When set\nto true, the parser enforces the constraints and rules defined by the W3C\nrecommendation on namespaces in XML.\nIf validationscheme is set to ValAlways! or ValAuto!, the document must\ncontain a grammar that supports the use of namespaces.\nThe default is false.\nschemaprocessing\n(optional)\nA boolean specifying whether schema support is enabled. When set to\nfalse, the parser does not process any schema found.\nIf schemaprocessing is true, namespaceprocessing must also be set to\ntrue.\nThe default is false.\nschemafullchecking\n(optional)\nA boolean specifying whether schema constraints are checked. When set\nto true, the schema grammar is checked for errors.\nSetting schemafullchecking to true has no effect unless schemaprocessing\nis also set to true.\nThe default is false.\nReturn value\nLong.\nReturns 0 for success and one of the following negative values if an error occurs:\n-1 -- Parsing error\n-2 -- Argument error\nUsage\nUse XMLParseString to validate an XML string against a DTD or XML schema before\nproceeding with additional processing.\nIf no DTD or schema is included or referenced in the string, XMLParseString checks whether\nthe string contains well-formed XML. If the XML string fails validation or is not well-\nformed, XMLParseString returns -1.\n"}
{"page": 1629, "text": "Statements, Events, and Functions\nPage 1629\nXSD (schema) files are in XML format and you can check them for well-formedness.\nThe validation scheme must be ValAuto!, which is the default validation scheme, because\nValAlways! requires that there be a schema or DTD against which to validate the file.\nFor example, given the following schema file, the parser fails because there is no external\nXSD file that defines xs:schema, xs:element, and xs:complextype. The schema is defined by\nthe namespace http://www.w3.org/2001/XMLSchema.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n  <xs:schema xmlns:xs=\n                 \"http://www.w3.org/2001/XMLSchema\">\n     <xs:element name=\"test3\">\n       <xs:complexType>\n          <xs:sequence>\n             <xs:element ref=\"test3_row\" maxOccurs=\n                           \"unbounded\" minOccurs=\"0\"/>\n          </xs:sequence>\n       </xs:complexType>\n     </xs:element>\n  </xs:schema>\nUsing ValAlways! also fails for an XML file if there is no schema defined or the reference\ndoes not point to a valid schema. If you use ValAuto!, validation is performed only if\nthe schema or DTD file is present in the desired location. If it is not present, only well-\nformedness is checked.\nTo suppress the display of message boxes if errors occur, specify a string value for the\nparsingerrors argument.\nThe files pbxercesNN.dll and xerces-c_XX.dll, where NN represents the PowerBuilder\nversion and XX represents the Xerces version, must be deployed with the other PowerBuilder\nruntime files in the search path of any application or component that uses this function.\nExamples\nThese statements parse an XML string. If a DTD is included or referenced, the string is\nvalidated. Otherwise the parser checks for well-formedness:\n// string argument as_xmlstring passed in\nlong ll_ret\nll_ret = XMLParseString(as_xmlstring)\nThese statements parse an XML string, validate against a given XML schema, and save any\nerrors that occur in a string variable. If errors occur, no message boxes display. If no schema\nis included or referenced in the string, XMLParseString returns -1:\nlong ll_ret\nstring ls_xmlstr, ls_err\nll_ret = XMLParseString(ls_xmlstr, ValAlways!, ls_err, TRUE, TRUE)\nThese statements parse an XML string, validate against a given DTD, and save any errors\nthat occur in a string variable. If errors occur, no message boxes display. If no DTD\nis included or referenced in the string, XMLParseString returns -1. If the string passes\nvalidation, it is imported into a DataWindow control:\nlong ll_ret\nstring ls_xmlstr, ls_err\n"}
{"page": 1630, "text": "Statements, Events, and Functions\nPage 1630\nll_ret = XMLParseString(ls_xmlstr, ValAlways!, ls_err)\nif ll_ret = 1 then dw_1.ImportString(ls_xmlstr)\nSee also\nImportString\nXMLParseFile\nImportString method for DataWindows in Section 9.100, \u201cImportString\u201d in DataWindow\nReference.\n2.4.884 Year\nDescription\nDetermines the year of a date value.\nSyntax\nYear ( date )\nTable 2.1433:\nArgument\nDescription\ndate\nThe date from which you want the year\nReturn value\nInteger.\nReturns an integer whose value is a 4-digit year adapted from the year portion of date if it\nsucceeds and 1900 if an error occurs. If date is null, Year returns null.\nWhen you convert a string that has a two-digit year to a date, then PowerBuilder chooses the\ncentury, as follows. If the year is between 00 to 49, PowerBuilder assumes 20 as the first two\ndigits; if it is between 50 and 99, PowerBuilder assumes 19.\nUsage\nPowerBuilder handles years from 1000 to 3000 inclusive.\nIf your data includes date before 1950, such as birth dates, always specify a 4-digit year so\nthat Year and other PowerBuilder functions, such as Sort, interpret the date as intended.\nWindows settings\nTo make sure you get correct return values for the year, you must verify that yyyy\nis the Short Date Style for year in the Regional Settings of the user's Control Panel.\nYour program can check this with the RegistryGet function.\nIf the setting is not correct, you can ask the user to change it manually or have the\napplication change it (by calling the RegistrySet function). The user may need to\nreboot after the setting is changed.\nExamples\nThis statement returns 2005:\nYear(2005-01-31)\n"}
{"page": 1631, "text": "Statements, Events, and Functions\nPage 1631\nSee also\nDay\nMonth\nYear method for DataWindows in Section 2.4.133, \u201cYear\u201d in DataWindow Reference.\n2.4.885 Yield\nDescription\nYields control to other graphic objects, including objects that are not PowerBuilder objects.\nYield checks the message queue and if there are messages in the queue, it pulls them from the\nqueue.\nSyntax\nYield ( )\nReturn value\nBoolean.\nReturns true if it pulls messages from the message queue and false if there are no messages.\nUsage\nInclude Yield within a loop so that other processes can happen. For example, use Yield to\nallow end users to interrupt a loop. By yielding control, you allow the user time to click on a\ncancel button in another window. Then code in the loop can check whether a global variable's\nstatus has changed. You can also use Yield in a loop in which you are waiting for something\nto finish so that other processing can take place, in either your or some other application.\nUsing other applications while retrieving data\nAlthough the user cannot do other activities in a PowerBuilder application while\nretrieving data, you can allow them to use other applications on their system. Put\nYield in the RetrieveRow event so that other applications can run during the retrieval.\nOf course, Yield will make your PowerBuilder application run slower because\nprocessing time will be shared with other applications.\nExamples\nIn this example, some code is processing a long task. A second window includes a button\nthat the user can click to interrupt the loop by setting a shared boolean variable sb_interrupt.\nWhen the user clicks the button, its Clicked script sets sb_interrupt, shown here:\nsb_interrupt = TRUE\nThe script that is doing the processing checks the shared variable sb_interrupt and interrupts\nthe processing if it is true. The Yield function allows a break in the processing so the user has\nthe opportunity to click the button:\ninteger n\n// sb_interrupt is a shared variable.\nsb_interrupt = FALSE\n \nFOR n = 1 to 3000\n"}
{"page": 1632, "text": "Statements, Events, and Functions\nPage 1632\n      Yield()\n      IF sb_interrupt THEN // var set in other script\n         MessageBox(\"Debug\",\"Interrupted!\")\n         sb_interrupt = FALSE\n         EXIT\n      ELSE\n      ... // Some processing\n      END IF\nNEXT\nIn this example, this script doing some processing runs in one window while users interact\nwith controls in a second window. Without Yield, users could click in the second window,\nbut they would not see focus change or their actions processed until the loop completed:\ninteger n\n \nFOR n = 1 to 3000\n      Yield()\n      ... // Some processing\nNEXT\nIn this example, a script wants to open a DDE channel with Lotus Notes, whose executable\nname is stored in the variable mailprogram. If the program is not running, the script starts it\nand loops, waiting until the program's startup is finished and it can establish a DDE channel.\nThe loop includes Yield, so that the computer can spend time actually starting the other\nprogram:\ntime starttime\nlong hndl\n \nSetPointer(HourGlass!)\n//Try to establish a handle; SendMail is the topic.\nhndl = OpenChannel(\"Notes\",\"SendMail\")\n \n//If the program is not running, start it\nIF hndl < 1 then\n      Run(mailprogram, Minimized!)\n      starttime = Now()\n \n      // Wait up to 2 minutes for Notes to load\n      // and the user to log on.\n      DO\n         //Yield control occasionally.\n         Yield()\n         //Is Notes active yet?\n         hndl = OpenChannel(\"Notes\",\"SendMail\")\n         // If Notes is active.\n         IF hndl > 0 THEN EXIT\n      LOOP Until SecondsAfter(StartTime,Now()) > 120\n \n      // If 2 minutes pass without opening a channel\n      IF hndl < 1 THEN\n         MessageBox(\"Error\", &\n            \"Can't start Notes.\", StopSign!)\n         SetPointer(Arrow!)\n         RETURN\n      END IF\nEND IF\n2.4.886 Zoom\nDescription\n"}
{"page": 1633, "text": "Statements, Events, and Functions\nPage 1633\nScales the current view with the specified zoom ratio.\nApplies to\nWebBrowser control\nSyntax\ncontrolname.Zoom ( integer zoomlevel )\nTable 2.1434:\nArgument\nDescription\ncontrolname\nThe name of the WebBrowser control.\nzoomlevel\nThe ratio to zoom the web page. The default zoom ratio is 0. The range of\nvalues (in percentage) is 0~500, and 1~99 for reduction.\nReturn value\nInteger.\nReturns 1 if the function succeeds and -1 if an error occurs.\nExamples\nThis example zooms out the screen to 80%:\nInteger li_rtn, li_zoom\nLi_zoom = 80\nLi_rtn = wb_1.zoom(li_zoom)\nSee also\nCancelDownload\nEvaluateJavascriptAsync\nEvaluateJavascriptSync\nGetSource\nGoBack\nGoForward\nNavigate\nPrintAsPDF\nPauseDownload\nRegisterEvent\nResumeDownload\nRefresh\nStopNavigation\nUnregisterEvent\n"}
{"page": 1634, "text": "Index\nPage 1634\nIndex\nSymbols\n_Is_A (PowerScript function), 1009\nA\nAbs (PowerScript function), 355\nAccessToken (PowerScript function), 357\nACos (PowerScript function), 356\nActivate (PowerScript event), 178\nActivate (PowerScript function), 358\nAddCategory (PowerScript function), 359\nAddColumn (PowerScript function), 360\nAddData (PowerScript function), 361\nAddItem (PowerScript function), 364\nAddItemArray (PowerScript function), 369\nAddItemBlob (PowerScript function), 371\nAddItemBoolean (PowerScript function),\n373\nAddItemDate (PowerScript function), 375\nAddItemDateTime (PowerScript function),\n376\nAddItemNull (PowerScript function), 380\nAddItemNumber (PowerScript function), 382\nAddItemObject (PowerScript function), 385\nAddItemString (PowerScript function), 387\nAddItemTime (PowerScript function), 389\nAddLargePicture (PowerScript function),\n391\nAddMasterSeparatorItem (PowerScript\nfunction), 392\nAddPicture (PowerScript function), 393\nAddressChange (PowerScript event), 179\nAddSeparatorItem (PowerScript function),\n394\nAddSeries (PowerScript function), 395\nAddSmallPicture (PowerScript function),\n397\nAddStatePicture (PowerScript function), 398\nAddToLibraryList (PowerScript function),\n399\nAny datatype, 53\nAppendParam (PowerScript function), 400\nApplyTheme (PowerScript function), 401\nArabic functions\nIsAllArabic, 1011\nIsAnyArabic, 1012\nIsArabic, 1014\nIsArabicAndNumbers, 1015\narithmetic operator\nin PowerBuilder, 85\nArrange (PowerScript function), 403\nArrangeSheets (PowerScript function), 403\narray\ndeclare, 68\narray elements\nvalues, 71\nAsc (PowerScript function), 405\nAscA (PowerScript function), 405\nASCII characters, 36\nASin (PowerScript function), 407\nassignment\nfor autoinstantiated user object, 100\nfor object, 100\nfor structure, 99\nAssignment (PowerScript statement), 124\nassignment and data type, 91\nAsymmetricDecrypt (PowerScript function),\n408\nAsymmetricEncrypt (PowerScript function),\n409\nAsymmetricGenerateKey (PowerScript\nfunction), 411\nAsymmetricSign (PowerScript function), 412\nAsymmetricVerifySign (PowerScript\nfunction), 413\nATan (PowerScript function), 415\nautoinstantiated user object\nassignment, 100\nB\nBase32Decode (PowerScript function), 416\nBase32Encode (PowerScript function), 417\nBase64Decode (PowerScript function), 418\nBase64Encode (PowerScript function), 419\nBase64UrlDecode (PowerScript function),\n420\nBase64UrlEncode (PowerScript function),\n421\nBeep (PowerScript function), 422\nBeginDownload (PowerScript event), 179\nBeginDrag (PowerScript event), 180\nBeginLabelEdit (PowerScript event), 183\nBeginLogScan (PowerScript event), 185\nBeginRightDrag (PowerScript event), 186\nBeginSession (PowerScript function), 423\n"}
{"page": 1635, "text": "Index\nPage 1635\nBeginSync (PowerScript event), 188\nBeginTransaction (PowerScript function),\n424\nBeginUpload (PowerScript event), 189\nBlob (PowerScript function), 426\nBlobEdit (PowerScript function), 428\nBlobMid (PowerScript function), 429\nblobs\nassigning to a picture control, 1449\nconverting to byte arrays, 635\nconverting to bytes, 433, 634\nconverting to string, 426\nselecting from database, 159\nupdating, 161\nwriting to stream, 1624\nBuildModel (PowerScript function), 430\nByte (PowerScript function), 433\nC\nCALL (PowerScript statement), 126\ncall function and event\nin an object's ancestor, 120\nCancel (PowerScript function), 434\nCancelDownload (PowerScript function),\n435\nCancelSync (PowerScript function), 436\nCanUndo (PowerScript function), 437\ncascaded calls and return values, 117\nCategoryCollapsed (PowerScript event), 190\nCategoryCount (PowerScript function), 438\nCategoryExpanded (PowerScript event), 190\nCategoryName (PowerScript function), 438\nCategorySelectionChanged (PowerScript\nevent), 191\nCategorySelectionChanging (PowerScript\nevent), 192\nCeiling (PowerScript function), 439\nCertificateError (PowerScript event), 193\nChangeDirectory (PowerScript function),\n440\nChangeMenu (PowerScript function), 441\nChar (PowerScript function), 442\nCharA (PowerScript function), 442\nCheck (PowerScript function), 443\nCHOOSE CASE (PowerScript statement),\n127\nChooseColor (PowerScript function), 444\nClassList (PowerScript function), 445\nClassName (PowerScript function), 446\nClear (PowerScript function), 448\nClearAll (PowerScript function), 452\nClearBoldDates (PowerScript function), 452\nClearHeaders (PowerScript function), 453\nClearParams (PowerScript function), 455\nClearRecentItems (PowerScript function),\n456\nClearRequestHeaders (PowerScript\nfunction), 457\nClicked (PowerScript event), 194\nClipboard (PowerScript function), 458\nClose (PowerScript event), 204\nClose (PowerScript function), 460\nCLOSE Cursor (SQL statement), 147\nCLOSE Procedure (SQL statement), 148\nCloseChannel (PowerScript function), 464\nCloseQuery (PowerScript event), 206\nCloseTab (PowerScript function), 465\nCloseUp (PowerScript event), 207\nCloseUserObject (PowerScript function), 466\nCloseWithReturn (PowerScript function),\n467\nCollapseItem (PowerScript function), 470\nColumnClick (PowerScript event), 208\nCommandParm (PowerScript function), 471\ncomments, 33\nCOMMIT (SQL statement), 148\nCommitDocking (PowerScript function), 472\nCommitTransaction (PowerScript function),\n473\nCompress (PowerScript function), 474\nconcatenation operator\nin PowerBuilder, 88\nconditional compilation, 46\nCONNECT (SQL statement), 149\nConnectMobiLink (PowerScript event), 209\nConnectToNewObject (PowerScript\nfunction), 477\nConnectToNewRemoteObject (PowerScript\nfunction), 479\nConnectToObject (PowerScript function),\n480\nConnectToRemoteObject (PowerScript\nfunction), 483\nConnectToServer (PowerScript function),\n485\nconstant\n"}
{"page": 1636, "text": "Index\nPage 1636\ndeclare, 67\nConstructor (PowerScript event), 210\nContainsKey (PowerScript function), 487\nContainsPath (PowerScript function), 490\nCONTINUE (PowerScript statement), 128\nCopy (PowerScript function), 491\nCopyRTF (PowerScript function), 493\nCos (PowerScript function), 494\nCpu (PowerScript function), 495\nCREATE (PowerScript statement), 129\nCreateDirectory (PowerScript function), 495\nCreateInstance (PowerScript function), 496\nCreateJsonArray (PowerScript function), 500\nCreateJsonObject (PowerScript function),\n500\nCreatePage (PowerScript function), 501\nCut (PowerScript function), 502\nD\ndata type\nAny, 53\nenumerated, 56\nfor external function arguments, 80\nnumeric datatypes in PowerBuilder, 90\nof PowerBuilder expressions, 90\npromotion, 90, 112\nstandard, 48\nstring and char datatypes in PowerBuilder,\n92\nsystem object, 55\ndata type and assignment, 91\nDataChange (PowerScript event), 211\nDataCount (PowerScript function), 503\nDataSource (PowerScript function), 504\nDate (PowerScript function), 506\nDateChanged (PowerScript event), 212\nDateSelected (PowerScript event), 212\nDateTime (PowerScript function), 509\nDay (PowerScript function), 512\nDayName (PowerScript function), 513\nDayNumber (PowerScript function), 514\nDaysAfter (PowerScript function), 515\nDBError (PowerScript event), 213\nDBHandle (PowerScript function), 516\nDBMS stored procedure\ndeclare as remote procedure calls, 83\nDBNotification (PowerScript event), 215\nDeactivate (PowerScript event), 217\nDebugBreak (PowerScript function), 517\nDec (PowerScript function), 517\ndeclare\nconstants, 67\nDBMS stored procedures, 83\nexternal functions, 76\nvariables, 56\ndeclare arrays, 68\nDECLARE Cursor (SQL statement), 150\nDECLARE Procedure (SQL statement), 151\nDELETE (SQL statement), 152\nDELETE Where Current of Cursor (SQL\nstatement), 153\nDeleteAllItems (PowerScript event), 218\nDeleteCategory (PowerScript function), 518\nDeleteCheckBox (PowerScript function), 520\nDeleteColumn (PowerScript function), 521\nDeleteColumns (PowerScript function), 522\nDeleteComboBox (PowerScript function),\n522\nDeleteData (PowerScript function), 523\nDeleteGroup (PowerScript function), 524\nDeleteItem (PowerScript event), 218\nDeleteItem (PowerScript function), 525\nDeleteItems (PowerScript function), 531\nDeleteLargeButton (PowerScript function),\n531\nDeleteLargePicture (PowerScript function),\n532\nDeleteLargePictures (PowerScript function),\n533\nDeleteMasterItem (PowerScript function),\n534\nDeletePanel (PowerScript function), 535\nDeletePicture (PowerScript function), 536\nDeletePictures (PowerScript function), 537\nDeleteRecentItem (PowerScript function),\n538\nDeleteSeries (PowerScript function), 539\nDeleteSmallButton (PowerScript function),\n540\nDeleteSmallPicture (PowerScript function),\n541\nDeleteSmallPictures (PowerScript function),\n541\nDeleteStatePicture (PowerScript function),\n542\n"}
{"page": 1637, "text": "Index\nPage 1637\nDeleteStatePictures (PowerScript function),\n543\nDeleteTabButton (PowerScript function),\n543\nDESTROY (PowerScript statement), 132\nDestroyModel (PowerScript function), 544\nDestructor (PowerScript event), 220\nDirectoryExists (PowerScript function), 545\nDirList (PowerScript function), 546\nDirSelect (PowerScript function), 548\nDisable (PowerScript function), 549\nDisableCommit (PowerScript function), 550\nDISCONNECT (SQL statement), 154\nDisconnectMobiLink (PowerScript event),\n221\nDisconnectObject (PowerScript function),\n551\nDisconnectServer (PowerScript function),\n552\nDisplayMessage (PowerScript event), 221\nDO...LOOP (PowerScript statement), 133\nDouble (PowerScript function), 553\nDoubleClicked (PowerScript event), 222\nDoVerb (PowerScript function), 554\nDownloadingStart (PowerScript event), 226\nDownloadingStateChanged (PowerScript\nevent), 227\nDrag (PowerScript function), 555\nDragDrop (PowerScript event), 228\nDragEnter (PowerScript event), 233\nDragLeave (PowerScript event), 234\nDragWithin (PowerScript event), 235\nDraw (PowerScript function), 557\nDropDown (PowerScript event), 239\ndynamic calls, 107\nDynamic SQL Format 1, 166\nDynamic SQL Format 2, 167\nDynamic SQL Format 3, 168\nDynamic SQL Format 4, 170\nE\nEditLabel (PowerScript function), 559\nembedded SQL\nuse in scripts, 144\nEnable (PowerScript function), 560\nEnableCommit (PowerScript function), 561\nEndDownload (PowerScript event), 239\nEndLabelEdit (PowerScript event), 240\nEndLogScan (PowerScript event), 242\nEndSync (PowerScript event), 243\nEndUpload (PowerScript event), 243\nEntryList (PowerScript function), 562\nenumerated datatypes, 56\nError (PowerScript event), 244\nErrorMessage (PowerScript event), 249\nEvaluateJavascriptAsync (PowerScript\nfunction), 564\nEvaluateJavascriptFinished (PowerScript\nevent), 250\nEvaluateJavascriptSync (PowerScript\nfunction), 565\nevent\nextend and override, 113\nfind, 105\nreturn value, 116\nevents\nabout, 175\nExecRemote (PowerScript function), 567\nEXECUTE (SQL statement), 154\nEXIT (PowerScript statement), 135\nExp (PowerScript function), 570\nExpandAll (PowerScript function), 570\nExpandItem (PowerScript function), 571\nExportJSON (PowerScript function), 572\nExportToJSONFile (PowerScript function),\n574\nExportToXMLFile (PowerScript function),\n575\nExportXML (PowerScript function), 573\nextend function and event, 112\nexternal function\ncall, 82\ndeclare, 76\ndefine source, 82\nexternal function argument\ndata type, 80\nExternalException (PowerScript event), 251\nExtract (PowerScript function), 576\nF\nFact (PowerScript function), 579\nFETCH (SQL statement), 155\nfile functions\nFileClose, 579\nFileCopy, 580\nFileDelete, 581\n"}
{"page": 1638, "text": "Index\nPage 1638\nFileEncoding, 582\nFileExists, 583\nFileLength, 584\nFileLength64, 585\nFileMove, 586\nFileOpen, 587\nFileRead, 591\nFileReadEx, 592\nFileSeek, 594\nFileSeek64, 596\nFileWrite, 597\nFileWriteEx, 599\nGetFileOpenName, 694\nGetFileSaveName, 698\nGetFilesCount, 700\nGetFilesList, 701\nFileClose (PowerScript function), 579\nFileCopy (PowerScript function), 580\nFileDelete (PowerScript function), 581\nFileEncoding (PowerScript function), 582\nFileExists (PowerScript event), 253\nFileExists (PowerScript function), 583\nFileLength (PowerScript function), 584\nFileLength64 (PowerScript function), 585\nFileMessage (PowerScript event), 254\nFileMove (PowerScript function), 586\nFileOpen (PowerScript function), 587\nFileRead (PowerScript function), 591\nFileReadEx (PowerScript function), 592\nfiles\nimporting data from, 899\nlinking, 1055\nsecurity and sharing violation, 585\nFileSeek (PowerScript function), 594\nFileSeek64 (PowerScript function), 596\nFileWrite (PowerScript function), 597\nFileWriteEx (PowerScript function), 599\nFill (PowerScript function), 600\nFillA (PowerScript function), 601\nFillW (PowerScript function), 602\nfind\nevent, 105\nfunction, 104\nFind (PowerScript function), 602\nFindCategory (PowerScript function), 604\nFindClassDefinition (PowerScript function),\n605\nFindFunctionDefinition (PowerScript\nfunction), 606\nFindItem (PowerScript function), 607\nFindMatchingFunction (PowerScript\nfunction), 613\nFindNext (PowerScript function), 615\nFindSeries (PowerScript function), 616\nFindTypeDefinition (PowerScript function),\n617\nFOR...NEXT (PowerScript statement), 135\nFromAnsi (PowerScript function), 619\nFromUnicode (PowerScript function), 619\nfunction\nfind, 104\noverload and override, 112\nreturn value, 116\nfunction and event\ncall in an object's ancestor, 120\nfind and execute, 104\noverload; override; and extend, 112\npass arguments to, 114\npass arrays, 115\npass objects, 114\npass structures, 115\nsyntax for calling, 117\ntrigger versus post, 105\nG\nGarbageCollect (PowerScript function), 620\nGarbageCollectGetTimeLimit (PowerScript\nfunction), 621\nGarbageCollectSetTimeLimit (PowerScript\nfunction), 621\nGesture (PowerScript event), 255\nGetAccessToken (PowerScript function), 622\nGetActiveCategory (PowerScript function),\n623\nGetActiveSheet (PowerScript function), 624\nGetAlignment (PowerScript function), 625\nGetApplication (PowerScript function), 626\nGetApplicationButton (PowerScript\nfunction), 626\nGetArgElement (PowerScript function), 627\nGetAutomationNativePointer (PowerScript\nfunction), 628\nGetBestHeight (PowerScript function), 629\nGetBody (PowerScript function), 630\n"}
{"page": 1639, "text": "Index\nPage 1639\nGetBoxPictureList (PowerScript function),\n633\nGetByte (PowerScript function), 634\nGetByteArray (PowerScript function), 635\nGetCategory (PowerScript function), 636\nGetCategoryByIndex (PowerScript function),\n637\nGetCategoryCount (PowerScript function),\n638\nGetCategoryIndex (PowerScript function),\n639\nGetCheckBox (PowerScript function), 642\nGetChildCount (PowerScript function), 643\nGetChildItem (PowerScript function), 645\nGetChildItemByIndex (PowerScript\nfunction), 647\nGetChildItemCount (PowerScript function),\n648\nGetChildKey (PowerScript function), 649\nGetChildrenList (PowerScript function), 650\nGetColumn (PowerScript function), 652\nGetComboBox (PowerScript function), 653\nGetCommandDDE (PowerScript function),\n654\nGetCommandDDEOrigin (PowerScript\nfunction), 655\nGetCommandString (PowerScript function),\n656\nGetCompanyName (PowerScript function),\n657\nGetContextKeywords (PowerScript\nfunction), 658\nGetContextService (PowerScript function),\n659\nGetCurrentDirectory (PowerScript function),\n663\nGetData (PowerScript function), 663\nGetDataDDE (PowerScript function), 668\nGetDataDDEOrigin (PowerScript function),\n669\nGetDataLabelling (PowerScript function),\n670\nGetDataPieExplode (PowerScript function),\n671\nGetDataStyle (PowerScript function), 672\nGetDataTransparency (PowerScript\nfunction), 677\nGetDataValue (PowerScript function), 679\nGetDateLimits (PowerScript function), 680\nGetDbmlsyncPath (PowerScript function),\n682\nGetDisplayRange (PowerScript function),\n682\nGetDotNetCoreVersion (PowerScript\nfunction), 684\nGetDynamicDate (PowerScript function),\n685\nGetDynamicDateTime (PowerScript\nfunction), 687\nGetDynamicDecimal (PowerScript function),\n688\nGetDynamicNumber (PowerScript function),\n689\nGetDynamicString (PowerScript function),\n690\nGetDynamicTime (PowerScript function),\n691\nGetEnvironment (PowerScript function), 692\nGetExpiresIn (PowerScript function), 693\nGetFileOpenName (PowerScript function),\n694\nGetFileSaveName (PowerScript function),\n698\nGetFilesCount (PowerScript function), 700\nGetFilesList (PowerScript function), 701\nGetFirstSheet (PowerScript function), 702\nGetFixesVersion (PowerScript function), 703\nGetFocus (PowerScript event), 257\nGetFocus (PowerScript function), 704\nGetFolder (PowerScript function), 705\nGetGlobalProperty (PowerScript function),\n707\nGetGroup (PowerScript function), 706\nGetHeader (PowerScript function), 709\nGetHeaders (PowerScript function), 712\nGetHostObject (PowerScript function), 716\nGetHttpResponseHeaders (PowerScript\nfunction), 717\nGetHttpResponseStatusCode (PowerScript\nfunction), 717\nGetHttpResponseStatusText (PowerScript\nfunction), 718\nGetInstalledRuntimes (PowerScript\nfunction), 719\nGetItem (PowerScript function), 719\nGetItemArray (PowerScript function), 725\n"}
{"page": 1640, "text": "Index\nPage 1640\nGetItemArrayJSONString (PowerScript\nfunction), 729\nGetItemAtPointer (PowerScript function),\n733\nGetItemBlob (PowerScript function), 734\nGetItemBoolean (PowerScript function), 738\nGetItemByPath (PowerScript function), 743\nGetItemByTag (PowerScript function), 742\nGetItemCount (PowerScript function), 745\nGetItemDate (PowerScript function), 747\nGetItemDateTime (PowerScript function),\n751\nGetItemNumber (PowerScript function), 755\nGetItemObject (PowerScript function), 759\nGetItemObjectJSONString (PowerScript\nfunction), 762\nGetItemParent (PowerScript function), 766\nGetItemString (PowerScript function), 767\nGetItemTime (PowerScript function), 771\nGetItemType (PowerScript function), 775\nGetJsonBlob (PowerScript function), 780\nGetJsonString (PowerScript function), 781\nGetJWTToken (PowerScript function), 783\nGetKey (PowerScript function), 785\nGetLargeButton (PowerScript function), 786\nGetLastReturn (PowerScript function), 787\nGetLibraryList (PowerScript function), 788\nGetMajorVersion (PowerScript function),\n788\nGetMasterItem (PowerScript function), 790\nGetMasterItemCount (PowerScript function),\n791\nGetMenu (PowerScript function), 793\nGetMenuByButtonHandle (PowerScript\nfunction), 794\nGetMessage (PowerScript function), 795\nGetMinorVersion (PowerScript function),\n796\nGetName (PowerScript function), 797\nGetNativePointer (PowerScript function),\n798\nGetNextSheet (PowerScript function), 800\nGetNumberType (PowerScript function), 801\nGetOAuthToken (PowerScript function), 804\nGetObjectRevisionFromRegistry\n(PowerScript function), 806\nGetOrigin (PowerScript function), 807\nGetPanel (PowerScript function), 808\nGetParagraphSetting (PowerScript function),\n809\nGetParent (PowerScript function), 810\nGetPathByItem (PowerScript function), 811\nGetRecentItem (PowerScript function), 814\nGetRecentItemCount (PowerScript function),\n815\nGetRecentTitle (PowerScript function), 816\nGetRecordSet (PowerScript function), 818\nGetRefreshToken (PowerScript function),\n819\nGetRemote (PowerScript function), 820\nGetRequestHeader (PowerScript function),\n823\nGetRequestHeaders (PowerScript function),\n824\nGetResponseBody (PowerScript function),\n825\nGetResponseHeader (PowerScript function),\n826\nGetResponseHeaders (PowerScript function),\n827\nGetResponseStatusCode (PowerScript\nfunction), 828\nGetResponseStatusText (PowerScript\nfunction), 829\nGetRootItem (PowerScript function), 830\nGetSelectedDate (PowerScript function), 831\nGetSelectedRange (PowerScript function),\n832\nGetSeriesLabelling (PowerScript function),\n833\nGetSeriesStyle (PowerScript function), 834\nGetSeriesTransparency (PowerScript\nfunction), 840\nGetSessionID (PowerScript function), 841\nGetShortName (PowerScript function), 842\nGetSmallButton (PowerScript function), 843\nGetSource (PowerScript function), 844\nGetSpacing (PowerScript function), 845\nGetStatusCode (PowerScript function), 846\nGetStatusText (PowerScript function), 848\nGetSyncRegistryProperties (PowerScript\nfunction), 851\nGetTabButton (PowerScript function), 852\nGetTabButtonByIndex (PowerScript\nfunction), 853\n"}
{"page": 1641, "text": "Index\nPage 1641\nGetTabButtonCount (PowerScript function),\n855\nGetText (PowerScript function), 855\nGetTextColor (PowerScript function), 856\nGetTextStyle (PowerScript function), 857\nGetTheme (PowerScript function), 858\nGetToday (PowerScript function), 859\nGetTokenError (PowerScript function), 859\nGetTokenType (PowerScript function), 861\nGetToolbar (PowerScript function), 861\nGetToolbarPos (PowerScript function), 863\nGetTransactionName (PowerScript function),\n866\nGetURL (PowerScript function), 867\nGetValue (PowerScript function), 868\nGetValueBlob (PowerScript function), 871\nGetValueBoolean (PowerScript function),\n872\nGetValueDate (PowerScript function), 873\nGetValueDateTime (PowerScript function),\n874\nGetValueNumber (PowerScript function),\n875\nGetValueString (PowerScript function), 876\nGetValueTime (PowerScript function), 878\nGetValueToDataWindow (PowerScript\nfunction), 879\nGetVersionName (PowerScript function),\n883\nGoBack (PowerScript function), 884\nGoForward (PowerScript function), 885\nGOTO (PowerScript statement), 137\nH\nHALT (PowerScript statement), 138\nHandle (PowerScript function), 886\nHelp (PowerScript event), 259\nHexDecode (PowerScript function), 888\nHexEncode (PowerScript function), 889\nHide (PowerScript event), 260\nHide (PowerScript function), 890\nHMAC (PowerScript function), 891\nHotLinkAlarm (PowerScript event), 260\nHour (PowerScript function), 892\nHyperLinkToURL (PowerScript function),\n893\nI\nidentifier names, 34\nIdle (PowerScript event), 261\nIdle (PowerScript function), 894\nIF...THEN (PowerScript statement), 139\nImpersonateClient (PowerScript function),\n895\nImportClipboard (PowerScript function), 897\nImportFile (PowerScript function), 899\nImportFromJSONFile (PowerScript\nfunction), 911\nImportFromXMLFile (PowerScript\nfunction), 912\nImportJSON (PowerScript function), 909\nImportString (PowerScript function), 905\nImportXML (PowerScript function), 910\nIncomingCallList (PowerScript function),\n913\nInit (PowerScript function), 915\nInputFieldChangeData (PowerScript\nfunction), 917\nInputFieldCurrentName (PowerScript\nfunction), 918\nInputFieldDeleteCurrent (PowerScript\nfunction), 919\nInputFieldGetData (PowerScript function),\n920\nInputFieldInsert (PowerScript function), 921\nInputFieldLocate (PowerScript function),\n922\nInputFieldSelected (PowerScript event), 261\nINSERT (SQL statement), 156\nInsertCategory (PowerScript function), 923\nInsertCategoryFirst (PowerScript function),\n926\nInsertCategoryLast (PowerScript function),\n927\nInsertCheckBox (PowerScript function), 929\nInsertCheckBoxFirst (PowerScript function),\n931\nInsertCheckBoxLast (PowerScript function),\n932\nInsertClass (PowerScript function), 934\nInsertColumn (PowerScript function), 934\nInsertComboBox (PowerScript function),\n935\nInsertComboBoxFirst (PowerScript\nfunction), 938\nInsertComboBoxLast (PowerScript\nfunction), 939\n"}
{"page": 1642, "text": "Index\nPage 1642\nInsertData (PowerScript function), 941\nInsertDocument (PowerScript function), 943\nInsertFile (PowerScript function), 945\nInsertGroup (PowerScript function), 946\nInsertGroupFirst (PowerScript function), 947\nInsertGroupLast (PowerScript function), 948\nInsertItem (PowerScript event), 262\nInsertItem (PowerScript function), 949\nInsertItemFirst (PowerScript function), 958\nInsertItemLast (PowerScript function), 962\nInsertItemSort (PowerScript function), 966\nInsertLargeButton (PowerScript function),\n969\nInsertLargeButtonFirst (PowerScript\nfunction), 971\nInsertLargeButtonLast (PowerScript\nfunction), 972\nInsertMasterItem (PowerScript function),\n974\nInsertMasterItemFirst (PowerScript\nfunction), 976\nInsertMasterItemLast (PowerScript function),\n978\nInsertObject (PowerScript function), 981\nInsertPanel (PowerScript function), 981\nInsertPanelFirst (PowerScript function), 983\nInsertPanelLast (PowerScript function), 984\nInsertPicture (PowerScript function), 985\nInsertRecentItem (PowerScript function),\n987\nInsertRecentItemFirst (PowerScript\nfunction), 988\nInsertRecentItemLast (PowerScript function),\n990\nInsertSeries (PowerScript function), 991\nInsertSmallButton (PowerScript function),\n992\nInsertSmallButtonFirst (PowerScript\nfunction), 995\nInsertSmallButtonLast (PowerScript\nfunction), 996\nInsertTabButton (PowerScript function), 998\nInsertTabButtonFirst (PowerScript function),\n1000\nInsertTabButtonLast (PowerScript function),\n1001\nInt (PowerScript function), 1003\nInteger (PowerScript function), 1003\nInternetData (PowerScript function), 1005\nIntHigh (PowerScript function), 1006\nIntLow (PowerScript function), 1006\nInvokePBFunction (PowerScript function),\n1007\nIsAlive (PowerScript function), 1010\nIsAllArabic (PowerScript function), 1011\nIsAllHebrew (PowerScript function), 1012\nIsAnyArabic (PowerScript function), 1012\nIsAnyHebrew (PowerScript function), 1013\nIsArabic (PowerScript function), 1014\nIsArabicAndNumbers (PowerScript\nfunction), 1015\nIsCallerInRole (PowerScript function), 1015\nIsDate (PowerScript function), 1017\nIsHebrew (PowerScript function), 1018\nIsHebrewAndNumbers (PowerScript\nfunction), 1019\nIsImpersonating (PowerScript function),\n1020\nIsInTransaction (PowerScript function), 1021\nIsMinimized (PowerScript function), 1022\nIsNull (PowerScript function), 1022\nIsNumber (PowerScript function), 1024\nIsPBApp (PowerScript function), 1025\nIsPowerClientApp (PowerScript function),\n1025\nIsPowerServerApp (PowerScript function),\n1026\nIsPreview (PowerScript function), 1026\nIsSecurityEnabled (PowerScript function),\n1027\nIsTime (PowerScript function), 1028\nIsValid (PowerScript function), 1030\nItemActivate (PowerScript event), 263\nItemChanged (PowerScript event), 264\nItemChanging (PowerScript event), 265\nItemCollapsed (PowerScript event), 266\nItemCollapsing (PowerScript event), 267\nItemExpanded (PowerScript event), 268\nItemExpanding (PowerScript event), 269\nItemPopulate (PowerScript event), 270\nItemUnselected (PowerScript event), 271\nK\nKey (PowerScript event), 271\nKeyCount (PowerScript function), 1031\nKeyDown (PowerScript function), 1032\n"}
{"page": 1643, "text": "Index\nPage 1643\nL\nlabels, 35\nLastPos (PowerScript function), 1035\nLeft (PowerScript function), 1037\nLeftA (PowerScript function), 1037\nLeftTrim (PowerScript function), 1038\nLeftTrimW (PowerScript function), 1040\nLeftW (PowerScript function), 1038\nLen (PowerScript function), 1040\nLenA (PowerScript function), 1041\nLength (PowerScript function), 1042\nLenW (PowerScript function), 1042\nLibraryCreate (PowerScript function), 1043\nLibraryDelete (PowerScript function), 1044\nLibraryDirectory (PowerScript function),\n1045\nLibraryDirectoryEx (PowerScript function),\n1047\nLibraryExport (PowerScript function), 1049\nLibraryImport (PowerScript function), 1050\nLineCount (PowerScript function), 1051\nLineDown (PowerScript event), 273\nLineLeft (PowerScript event), 274\nLineLength (PowerScript function), 1052\nLineList (PowerScript function), 1053\nLineRight (PowerScript event), 275\nLineUp (PowerScript event), 276\nLinkTo (PowerScript function), 1055\nLoadDockingState (PowerScript function),\n1056\nLoadFile (PowerScript function), 1056\nLoadInk (PowerScript function), 1060\nLoadPicture (PowerScript function), 1061\nLoadString (PowerScript function), 1058\nLoadWithDotNetCore (PowerScript\nfunction), 1062\nLoadWithDotNetFramework (PowerScript\nfunction), 1063\nLog (PowerScript function), 1066\nLogTen (PowerScript function), 1068\nLong (PowerScript function), 1069\nLongLong (PowerScript function), 1070\nLoseFocus (PowerScript event), 277\nLower (PowerScript function), 1077\nLowerBound (PowerScript function), 1077\nM\nmailAddress (PowerScript function), 1078\nmailDeleteMessage (PowerScript function),\n1080\nmailGetMessages (PowerScript function),\n1081\nmailHandle (PowerScript function), 1082\nmailLogoff (PowerScript function), 1083\nmailLogon (PowerScript function), 1084\nmailReadMessage (PowerScript function),\n1086\nmailRecipientDetails (PowerScript function),\n1088\nmailResolveRecipient (PowerScript\nfunction), 1089\nmailSaveMessage (PowerScript function),\n1091\nmailSend (PowerScript function), 1093\nMatch (PowerScript function), 1094\nMatchW (PowerScript function), 1097\nMax (PowerScript function), 1098\nMD5 (PowerScript function), 1098\nMemberDelete (PowerScript function), 1100\nMemberExists (PowerScript function), 1101\nMemberRename (PowerScript function),\n1102\nMessageBox (PowerScript function), 1103\nMid (PowerScript function), 1105\nMidA (PowerScript function), 1107\nMidW (PowerScript function), 1108\nMin (PowerScript function), 1108\nMinute (PowerScript function), 1109\nMod (PowerScript function), 1109\nModified (PowerScript event), 279\nModifyData (PowerScript function), 1110\nMonth (PowerScript function), 1112\nMouseDown (PowerScript event), 281\nMouseMove (PowerScript event), 283\nMouseUp (PowerScript event), 287\nMove (PowerScript function), 1113\nMoved (PowerScript event), 289\nMoveTab (PowerScript function), 1114\nN\nNavigate (PowerScript function), 1116\nNavigationError (PowerScript event), 290\nNavigationProgressIndex (PowerScript\nevent), 291\nNavigationStart (PowerScript event), 292\n"}
{"page": 1644, "text": "Index\nPage 1644\nNavigationStateChanged (PowerScript\nevent), 293\nNextActivity (PowerScript function), 1117\nNotify (PowerScript event), 294\nNow (PowerScript function), 1119\nNULL values, 37\nnumeric data type\nin PowerBuilder, 90\nO\nobject\nabout, 94\nassignment, 100\nObjectAtPointer (PowerScript function),\n1119\nobjects, 93\nOffsetPos (PowerScript function), 1122\nOpen (PowerScript event), 295\nOpen (PowerScript function), 1122\nOPEN Cursor (SQL statement), 157\nOpenChannel (PowerScript function), 1137\nOpenSheet (PowerScript function), 1138\nOpenSheetAsDocument (PowerScript\nfunction), 1141\nOpenSheetDocked (PowerScript function),\n1141\nOpenSheetFromDockingState (PowerScript\nfunction), 1142\nOpenSheetInTabGroup (PowerScript\nfunction), 1143\nOpenSheetWithParm (PowerScript function),\n1144\nOpenSheetWithParmAsDocument\n(PowerScript function), 1147\nOpenSheetWithParmDocked (PowerScript\nfunction), 1148\nOpenSheetWithParmFromDockingState\n(PowerScript function), 1150\nOpenSheetWithParmInTabGroup\n(PowerScript function), 1151\nOpenTab (PowerScript function), 1153\nOpenTabWithParm (PowerScript function),\n1156\nOpenUserObject (PowerScript function),\n1160\nOpenUserObjectWithParm (PowerScript\nfunction), 1164\nOpenWithParm (PowerScript function), 1168\noperator\narithmetic operator in PowerBuilder, 85\nconcatenation operator in PowerBuilder,\n88\nin PowerBuilder, 85\nrelational operator in PowerBuilder, 87\noperator precedence\nin PowerBuilder expressions, 89\nOther (PowerScript event), 298\nOutgoingCallList (PowerScript function),\n1172\noverload function and event, 112\noverride function and event, 112\nP\nPageCount (PowerScript function), 1174\nPageCreated (PowerScript function), 1175\nPageDown (PowerScript event), 298\nPageLeft (PowerScript event), 300\nPageRight (PowerScript event), 301\nPageUp (PowerScript event), 302\nparent pronoun, 40\nParentWindow (PowerScript function), 1175\npass arguments to function and event, 114\npass arrays\nto function and event, 115\npass objects\nto function and event, 114\npass structures\nto function and event, 115\nPaste (PowerScript function), 1176\nPasteLink (PowerScript function), 1178\nPasteRTF (PowerScript function), 1179\nPasteSpecial (PowerScript function), 1180\nPauseDownload (PowerScript function),\n1181\nPBAddCookie (PowerScript function), 1182\nPBGetCookies (PowerScript function), 1183\nPBGetMenuString (PowerScript function),\n1184\nPdfPrintFinished (PowerScript event), 307\nPi (PowerScript function), 1185\nPictureSelected (PowerScript event), 303\nPipeEnd (PowerScript event), 303\nPipeMeter (PowerScript event), 304\nPipeStart (PowerScript event), 305\nPixelsToUnits (PowerScript function), 1186\nPlay (PowerScript function), 1186\n"}
{"page": 1645, "text": "Index\nPage 1645\nPointerX (PowerScript function), 1187\nPointerY (PowerScript function), 1188\nPopMenu (PowerScript function), 1189\nPopulateError (PowerScript function), 1190\nPos (PowerScript function), 1191\nPosA (PowerScript function), 1193\nPosition (PowerScript function), 1194\nPost (PowerScript function), 1198\npost function and event, 105\nPostData (PowerScript function), 1199\nPostDataEnd (PowerScript function), 1200\nPostDataStart (PowerScript function), 1201\nPostEvent (PowerScript function), 1203\nPostURL (PowerScript function), 1206\nPosW (PowerScript function), 1194\nPowerBuilder expression\ndata type, 90\nPreview (PowerScript function), 1208\nPrint (PowerScript function), 1209\nPrintAsPDF (PowerScript function), 1214\nPrintBitmap (PowerScript function), 1216\nPrintCancel (PowerScript function), 1217\nPrintClose (PowerScript function), 1218\nPrintDataWindow (PowerScript function),\n1219\nPrintDefineFont (PowerScript function),\n1220\nPrintEx (PowerScript function), 1222\nPrintFooter (PowerScript event), 306\nPrintGetPrinter (PowerScript function), 1223\nPrintGetPrinters (PowerScript function),\n1223\nPrintHeader (PowerScript event), 306\nPrintLine (PowerScript function), 1224\nPrintOpen (PowerScript function), 1225\nPrintOval (PowerScript function), 1227\nPrintPage (PowerScript function), 1228\nPrintRect (PowerScript function), 1229\nPrintRoundRect (PowerScript function),\n1230\nPrintScreen (PowerScript function), 1232\nPrintSetFont (PowerScript function), 1235\nPrintSetPrinter (PowerScript function), 1235\nPrintSetSpacing (PowerScript function),\n1236\nPrintSetup (PowerScript function), 1237\nPrintSetupPrinter (PowerScript function),\n1238\nPrintText (PowerScript function), 1238\nPrintWidth (PowerScript function), 1240\nPrintX (PowerScript function), 1241\nPrintY (PowerScript function), 1241\nProfileInt (PowerScript function), 1242\nProfileString (PowerScript function), 1244\nProgressIndex (PowerScript event), 308\npronouns\nparent pronouns, 40\nsuper pronouns, 43\nthis pronouns, 42\nPropertyChanged (PowerScript event), 309\nPropertyRequestEdit (PowerScript event),\n310\nR\nRand (PowerScript function), 1245\nRandomize (PowerScript function), 1246\nRButtonDown (PowerScript event), 311\nRButtonUp (PowerScript event), 313\nRead (PowerScript function), 1247\nReadData (PowerScript function), 1249\nReal (PowerScript function), 1251\nRecognitionResult (PowerScript event), 314\nRecognizeText (PowerScript function), 1252\nRefresh (PowerScript function), 1253\nRegisterEvent (PowerScript function), 1254\nRegistryDelete (PowerScript function), 1257\nRegistryGet (PowerScript function), 1258\nRegistryKeys (PowerScript function), 1259\nRegistrySet (PowerScript function), 1260\nRegistryValues (PowerScript function), 1262\nrelational operator\nin PowerBuilder, 87\nRelativeDate (PowerScript function), 1263\nRelativeTime (PowerScript function), 1264\nReleaseAutomationNativePointer\n(PowerScript function), 1265\nReleaseNativePointer (PowerScript\nfunction), 1266\nRemoteExec (PowerScript event), 314\nRemoteHotLinkStart (PowerScript event),\n315\nRemoteHotLinkStop (PowerScript event),\n316\nRemoteRequest (PowerScript event), 316\nRemoteSend (PowerScript event), 317\nRemove (PowerScript function), 1266\n"}
{"page": 1646, "text": "Index\nPage 1646\nRemoveApplicationButton (PowerScript\nfunction), 1267\nRemoveDirectory (PowerScript function),\n1268\nRename (PowerScript event), 317\nRepair (PowerScript function), 1270\nReplace (PowerScript function), 1271\nReplaceA (PowerScript function), 1273\nReplaceText (PowerScript function), 1273\nReplaceW (PowerScript function), 1275\nRequestResource (PowerScript function),\n1269\nreserved words, 39\nReset (PowerScript function), 1275\nResetArgElements (PowerScript function),\n1278\nResetDataColors (PowerScript function),\n1279\nResetInk (PowerScript function), 1280\nResetPicture (PowerScript function), 1281\nResize (PowerScript event), 318\nResize (PowerScript function), 1281\nResourceRedirect (PowerScript event), 319\nRespondRemote (PowerScript function),\n1282\nRestart (PowerScript function), 1283\nResumeDownload (PowerScript function),\n1284\nResumeTransaction (PowerScript function),\n1285\nRetrieve (PowerScript function), 1287\nRetrieveOne (PowerScript function), 1294\nRETURN (PowerScript statement), 141\nreturn value\ncascaded calls and return value, 117\nevent, 116\nfunction, 116\nReverse (PowerScript function), 1296\nRevertToSelf (PowerScript function), 1296\nRGB (PowerScript function), 1297\nRight (PowerScript function), 1299\nRightA (PowerScript function), 1300\nRightClicked (PowerScript event), 320\nRightDoubleClicked (PowerScript event),\n322\nRightTrim (PowerScript function), 1301\nRightTrimW (PowerScript function), 1301\nRightW (PowerScript function), 1300\nROLLBACK (SQL statement), 157\nRound (PowerScript function), 1305\nRoutineList (PowerScript function), 1306\nRun (PowerScript function), 1307\nS\nSave (PowerScript event), 324\nSave (PowerScript function), 1308\nSaveAs (PowerScript function), 1311\nSaveDockingState (PowerScript function),\n1319\nSaveDocument (PowerScript function), 1320\nSaveInk (PowerScript function), 1321\nSaveObject (PowerScript event), 325\nSaveToFile (PowerScript function), 1323\nScroll (PowerScript function), 1324\nScrollNextPage (PowerScript function), 1325\nScrollNextRow (PowerScript function), 1326\nScrollPriorPage (PowerScript function), 1327\nScrollPriorRow (PowerScript function), 1328\nScrollToRow (PowerScript function), 1329\nSecond (PowerScript function), 1330\nSecondsAfter (PowerScript function), 1331\nSeek (PowerScript function), 1332\nSELECT (SQL statement), 158\nSELECTBLOB (SQL statement), 159\nSelected (PowerScript event), 326\nSelectedColumn (PowerScript function),\n1334\nSelectedIndex (PowerScript function), 1335\nSelectedItem (PowerScript function), 1336\nSelectedLength (PowerScript function), 1337\nSelectedLine (PowerScript function), 1339\nSelectedPage (PowerScript function), 1340\nSelectedStart (PowerScript function), 1341\nSelectedText (PowerScript function), 1342\nSelectionChanged (PowerScript event), 330\nSelectionChanging (PowerScript event), 334\nSelectionRange (PowerScript function), 1343\nSelectItem (PowerScript function), 1344\nSelectObject (PowerScript function), 1348\nSelectTab (PowerScript function), 1349\nSelectText (PowerScript function), 1350\nSelectTextAll (PowerScript function), 1353\nSelectTextLine (PowerScript function), 1354\nSelectTextWord (PowerScript function),\n1355\nSend (PowerScript function), 1357\n"}
{"page": 1647, "text": "Index\nPage 1647\nSendDeleteRequest (PowerScript function),\n1359\nSendGetRequest (PowerScript function),\n1360\nSendPatchRequest (PowerScript function),\n1362\nSendPostRequest (PowerScript function),\n1364\nSendPutRequest (PowerScript function),\n1366\nSendRequest (PowerScript function), 1368\nSeriesCount (PowerScript function), 1371\nSeriesName (PowerScript function), 1372\nSetAbort (PowerScript function), 1373\nSetAccessToken (PowerScript function),\n1375\nSetActiveCategory (PowerScript function),\n1376\nSetActiveCategoryByIndex (PowerScript\nfunction), 1377\nSetAlignment (PowerScript function), 1378\nSetApplicationButton (PowerScript\nfunction), 1379\nSetArgElement (PowerScript function), 1380\nSetAutomationLocale (PowerScript\nfunction), 1381\nSetAutomationPointer (PowerScript\nfunction), 1383\nSetAutomationTimeout (PowerScript\nfunction), 1384\nSetBody (PowerScript function), 1385\nSetBoldDate (PowerScript function), 1386\nSetBoxPictureList (PowerScript function),\n1388\nSetByte (PowerScript function), 1389\nSetCategory (PowerScript function), 1389\nSetCheckBox (PowerScript function), 1391\nSetColumn (PowerScript function), 1392\nSetComboBox (PowerScript function), 1393\nSetComplete (PowerScript function), 1394\nSetData (PowerScript function), 1397\nSetDataDDE (PowerScript function), 1398\nSetDataLabelling (PowerScript function),\n1399\nSetDataPieExplode (PowerScript function),\n1401\nSetDataStyle (PowerScript function), 1402\nSetDataTransparency (PowerScript function),\n1408\nSetDateLimits (PowerScript function), 1409\nSetDropHighlight (PowerScript function),\n1410\nSetDynamicParm (PowerScript function),\n1411\nSetFirstVisible (PowerScript function), 1412\nSetFocus (PowerScript function), 1413\nSetGlobalProperty (PowerScript function),\n1415\nSetGroup (PowerScript function), 1414\nSetHeader (PowerScript function), 1416\nSetHeaders (PowerScript function), 1418\nSetHttpRequestHeader (PowerScript\nfunction), 1420\nSetItem (PowerScript function), 1422\nSetJWTToken (PowerScript function), 1429\nSetLargeButton (PowerScript function), 1430\nSetLevelPictures (PowerScript function),\n1431\nSetLibraryList (PowerScript function), 1433\nSetMask (PowerScript function), 1434\nSetMasterItem (PowerScript function), 1435\nSetMenu (PowerScript function), 1437\nSetMessage (PowerScript function), 1439\nSetMicroHelp (PowerScript function), 1439\nSetMinimized (PowerScript function), 1440\nSetNewMobiLinkPassword (PowerScript\nfunction), 1441\nSetNull (PowerScript function), 1442\nSetOAuthToken (PowerScript function),\n1443\nSetOverlayPicture (PowerScript function),\n1444\nSetPanel (PowerScript function), 1446\nSetParagraphSetting (PowerScript function),\n1447\nSetParm (PowerScript function), 1448\nSetPicture (PowerScript function), 1449\nSetPointer (PowerScript function), 1450\nSetPosition (PowerScript function), 1452\nSetProfileString (PowerScript function),\n1455\nSetRange (PowerScript function), 1456\nSetRecentItem (PowerScript function), 1457\nSetRecentTitle (PowerScript function), 1459\nSetRecordSet (PowerScript function), 1460\n"}
{"page": 1648, "text": "Index\nPage 1648\nSetRedraw (PowerScript function), 1461\nSetRemote (PowerScript function), 1462\nSetRequestHeader (PowerScript function),\n1464\nSetRequestHeaders (PowerScript function),\n1466\nSetResultSet (PowerScript function), 1466\nSetSelectedDate (PowerScript function),\n1467\nSetSelectedRange (PowerScript function),\n1468\nSetSeriesLabelling (PowerScript function),\n1469\nSetSeriesStyle (PowerScript function), 1471\nSetSeriesTransparency (PowerScript\nfunction), 1478\nSetSheetID (PowerScript function), 1479\nSetSmallButton (PowerScript function), 1480\nSetSpacing (PowerScript function), 1481\nSetState (PowerScript function), 1482\nSetSyncRegistryProperties (PowerScript\nfunction), 1483\nSetTabButton (PowerScript function), 1484\nSetTextColor (PowerScript function), 1486\nSetTextStyle (PowerScript function), 1486\nSetToday (PowerScript function), 1489\nSetToolbar (PowerScript function), 1490\nSetToolbarPos (PowerScript function), 1492\nSetTop (PowerScript function), 1495\nSetTraceFileName (PowerScript function),\n1496\nSetTransPool (PowerScript function), 1497\nSetValue (PowerScript function), 1498\nSetValueBlob (PowerScript function), 1501\nSetValueBoolean (PowerScript function),\n1502\nSetValueByDataWindow (PowerScript\nfunction), 1503\nSetValueDate (PowerScript function), 1507\nSetValueDateTime (PowerScript function),\n1508\nSetValueNumber (PowerScript function),\n1509\nSetValueString (PowerScript function), 1511\nSetValueTime (PowerScript function), 1512\nSHA (PowerScript function), 1513\nSharedObjectDirectory (PowerScript\nfunction), 1515\nSharedObjectGet (PowerScript function),\n1515\nSharedObjectRegister (PowerScript\nfunction), 1518\nSharedObjectUnregister (PowerScript\nfunction), 1519\nShow (PowerScript event), 336\nShow (PowerScript function), 1520\nShowHeadFoot (PowerScript function), 1521\nShowHelp (PowerScript function), 1522\nShowPopupHelp (PowerScript function),\n1523\nSign (PowerScript function), 1524\nSignalError (PowerScript function), 1525\nSin (PowerScript function), 1526\nSleep (PowerScript function), 1526\nSort (PowerScript event), 338\nSort (PowerScript function), 1527\nSortAll (PowerScript function), 1529\nSpace (PowerScript function), 1530\nspecial ASCII characters, 36\nSQL\nuse in scripts, 144\nSQLPreview (PowerScript event), 340\nSqrt (PowerScript function), 1531\nstandard datatypes, 48\nStart (PowerScript event), 342\nStart (PowerScript function), 1532\nStartHotLink (PowerScript function), 1538\nStartServerDDE (PowerScript function),\n1539\nState (PowerScript function), 1541\nstatement continuation, 43\nstatement separation, 45\nstatic calls, 107\nStepIt (PowerScript function), 1542\nStop (PowerScript event), 343\nStop (PowerScript function), 1543\nStopHotLink (PowerScript function), 1544\nStopNavigation (PowerScript function), 1545\nStopServerDDE (PowerScript function),\n1546\nString (PowerScript function), 1547\nstring and char data type\nin PowerBuilder, 92\nStroke (PowerScript event), 343\nstructure\nabout, 93\n"}
{"page": 1649, "text": "Index\nPage 1649\nassignment, 99\nstructures, 93\nSubmit (PowerScript function), 1552\nsuper pronoun, 43\nSuspendTransaction (PowerScript function),\n1558\nSymmetricDecrypt (PowerScript function),\n1559\nSymmetricEncrypt (PowerScript function),\n1561\nSymmetricGenerateKey (PowerScript\nfunction), 1564\nSynchronize (PowerScript function), 1566\nSyncPreview (PowerScript event), 344\nsyntax for calling PowerBuilder function and\nevent, 117\nSyntaxFromSQL (PowerScript function),\n1568\nsystem object datatypes, 55\nSystemError (PowerScript event), 345\nSystemKey (PowerScript event), 346\nSystemRoutine (PowerScript function), 1570\nT\nTabPostEvent (PowerScript function), 1571\nTabTriggerEvent (PowerScript function),\n1572\nTan (PowerScript function), 1573\nText (PowerScript function), 1574\nTextLine (PowerScript function), 1575\nThis pronoun, 42\nTHROW (PowerScript statement), 141\nTHROWS (PowerScript statement), 142\nTime (PowerScript function), 1576\nTimer (PowerScript event), 347\nTimer (PowerScript function), 1579\nTitleTextChanged (PowerScript event), 348\nToAnsi (PowerScript function), 1580\nToday (PowerScript function), 1581\nToolbarMoved (PowerScript event), 349\nTop (PowerScript function), 1581\nTotalColumns (PowerScript function), 1582\nTotalItems (PowerScript function), 1583\nTotalSelected (PowerScript function), 1584\nToUnicode (PowerScript function), 1585\nTraceBegin (PowerScript function), 1586\nTraceClose (PowerScript function), 1587\nTraceDisableActivity (PowerScript function),\n1588\nTraceEnableActivity (PowerScript function),\n1589\nTraceEnd (PowerScript function), 1591\nTraceError (PowerScript function), 1592\nTraceOpen (PowerScript function), 1593\nTraceUser (PowerScript function), 1595\ntrigger function and event, 105\nTriggerEvent (PowerScript function), 1595\nTriggerPBEvent (PowerScript function),\n1597\nTrim (PowerScript function), 1599\nTrimW (PowerScript function), 1600\nTruncate (PowerScript function), 1600\nTRY...CATCH...FINALLY...END TRY\nPowerScript statement, 143\nTypeOf (PowerScript function), 1604\nU\nUncheck (PowerScript function), 1605\nUndo (PowerScript function), 1607\nUnitsToPixels (PowerScript function), 1607\nUnregisterEvent (PowerScript function),\n1608\nUPDATE (SQL statement), 160\nUPDATE Where Current of Cursor (SQL\nstatement), 162\nUPDATEBLOB (SQL statement), 161\nUpdateLinksDialog (PowerScript function),\n1609\nUploadAck (PowerScript event), 350\nUpper (PowerScript function), 1611\nUpperBound (PowerScript function), 1611\nUrlDecode (PowerScript function), 1613\nUrlEncode (PowerScript function), 1614\nUserString (PowerScript event), 351\nV\nValueChanged (PowerScript event), 352\nvariable\ndeclaration syntax, 60\ndeclare, 56\nvariable-size arrays\nsize, 72\nViewChange (PowerScript event), 353\nW\nWaitForUploadAck (PowerScript event), 353\n"}
{"page": 1650, "text": "Index\nPage 1650\nWarningMessage (PowerScript event), 354\nWebBrowserGet (PowerScript function),\n1615\nWebBrowserSet (PowerScript function),\n1616\nWhich (PowerScript function), 1618\nwhite space, 45\nWordCap (PowerScript function), 1619\nWorkSpaceHeight (PowerScript function),\n1620\nWorkSpaceWidth (PowerScript function),\n1621\nWorkSpaceX (PowerScript function), 1622\nWorkSpaceY (PowerScript function), 1623\nWrite (PowerScript function), 1624\nX\nXMLParseFile (PowerScript function), 1625\nXMLParseString (PowerScript function),\n1627\nY\nYear (PowerScript function), 1630\nYield (PowerScript function), 1631\nZ\nZoom (PowerScript function), 1632\n"}
