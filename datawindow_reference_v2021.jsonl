{"page": 1, "text": "DataWindow Reference\nAppeon PowerBuilder\u00ae 2021\n"}
{"page": 2, "text": "Contents\n1 DataWindow Operators and Expressions ............................................................ 21\n1.1 Where you use DataWindow expressions ................................................. 21\n1.2 Operators used in DataWindow expressions ............................................. 23\n1.2.1 Arithmetic operators in DataWindow expressions ...........................  23\n1.2.2 Relational operators in DataWindow expressions ...........................  24\n1.2.2.1 Comparing strings in DataWindow expressions ....................  26\n1.2.3 Logical operators in DataWindow expressions ................................ 27\n1.2.4 Concatenation operator in DataWindow expressions ...................... 28\n1.3 Operator precedence in DataWindow expressions .................................... 29\n1.4 Evaluating DataWindow expressions in scripts .........................................  29\n1.5 Evaluating DataWindow expressions in the Describe function ..................  30\n1.6 Evaluating conditional DataWindow expressions with current data ...........  30\n2 DataWindow Expression Functions .....................................................................  32\n2.1 Using DataWindow expression functions ..................................................  32\n2.2 Decimal support in DataWindow expressions ...........................................  33\n2.3 Four examples ...........................................................................................  34\n2.3.1 Example 1: counting null values in a column ..................................  34\n2.3.2 Example 2: counting active and terminated employees ................... 36\n2.3.3 Example 3: creating a row indicator ................................................ 39\n2.3.4 Example 4: displaying all data when a column allows nulls ............. 41\n2.4 Alphabetical list of DataWindow expression functions ............................... 42\n2.4.1 Abs ................................................................................................... 43\n2.4.2 ACos ................................................................................................  43\n2.4.3 Asc ................................................................................................... 44\n2.4.4 AscA ................................................................................................. 45\n2.4.5 ASin .................................................................................................  45\n2.4.6 ATan ................................................................................................  46\n2.4.7 Avg ................................................................................................... 47\n2.4.8 Bitmap .............................................................................................. 49\n2.4.9 Case ................................................................................................. 50\n2.4.10 Ceiling ............................................................................................ 51\n2.4.11 Char ...............................................................................................  52\n2.4.12 CharA ............................................................................................. 53\n2.4.13 Cos ................................................................................................. 53\n2.4.14 Count .............................................................................................  54\n2.4.15 CrosstabAvg ..................................................................................  56\n2.4.16 CrosstabAvgDec ............................................................................  60\n2.4.17 CrosstabCount ...............................................................................  60\n2.4.18 CrosstabMax .................................................................................. 62\n2.4.19 CrosstabMaxDec ...........................................................................  64\n2.4.20 CrosstabMin ................................................................................... 64\n2.4.21 CrosstabMinDec ............................................................................  66\n2.4.22 CrosstabSum .................................................................................  67\n2.4.23 CrosstabSumDec ........................................................................... 69\n2.4.24 CumulativePercent ......................................................................... 69\n2.4.25 CumulativeSum .............................................................................. 71\n"}
{"page": 3, "text": "2.4.26 CurrentRow .................................................................................... 73\n2.4.27 Date ...............................................................................................  74\n2.4.28 DateTime .......................................................................................  75\n2.4.29 Day ................................................................................................. 76\n2.4.30 DayName ....................................................................................... 76\n2.4.31 DayNumber .................................................................................... 77\n2.4.32 DaysAfter .......................................................................................  78\n2.4.33 Dec ................................................................................................. 79\n2.4.34 Describe ......................................................................................... 80\n2.4.35 Exp ................................................................................................. 81\n2.4.36 Fact ................................................................................................ 81\n2.4.37 Fill ..................................................................................................  82\n2.4.38 FillA ................................................................................................ 83\n2.4.39 First ................................................................................................ 83\n2.4.40 FontHeight .....................................................................................  85\n2.4.41 GetPaintDC .................................................................................... 85\n2.4.42 GetPaintRectHeight .......................................................................  86\n2.4.43 GetPaintRectWidth ........................................................................  87\n2.4.44 GetPaintRectX ...............................................................................  87\n2.4.45 GetPaintRectY ...............................................................................  87\n2.4.46 GetRow .......................................................................................... 88\n2.4.47 GetText ..........................................................................................  89\n2.4.48 Hour ...............................................................................................  89\n2.4.49 If ..................................................................................................... 90\n2.4.50 Int ................................................................................................... 91\n2.4.51 Integer ............................................................................................ 91\n2.4.52 IsDate ............................................................................................. 92\n2.4.53 IsExpanded .................................................................................... 93\n2.4.54 IsNull .............................................................................................. 93\n2.4.55 IsNumber .......................................................................................  94\n2.4.56 IsRowModified ...............................................................................  95\n2.4.57 IsRowNew ...................................................................................... 96\n2.4.58 IsSelected ......................................................................................  96\n2.4.59 IsTime ............................................................................................  97\n2.4.60 Large .............................................................................................. 97\n2.4.61 Last ................................................................................................  99\n2.4.62 LastPos ........................................................................................ 101\n2.4.63 Left ............................................................................................... 102\n2.4.64 LeftA ............................................................................................. 103\n2.4.65 LeftTrim ........................................................................................ 103\n2.4.66 Len ............................................................................................... 104\n2.4.67 LenA ............................................................................................. 105\n2.4.68 Log ............................................................................................... 105\n2.4.69 LogTen ......................................................................................... 106\n2.4.70 Long ............................................................................................. 107\n2.4.71 LookUpDisplay ............................................................................. 107\n2.4.72 Lower ...........................................................................................  108\n2.4.73 Match ...........................................................................................  108\n"}
{"page": 4, "text": "2.4.74 Max ..............................................................................................  111\n2.4.75 Median .........................................................................................  113\n2.4.76 Mid ...............................................................................................  115\n2.4.77 MidA ............................................................................................. 116\n2.4.78 Min ...............................................................................................  117\n2.4.79 Minute ..........................................................................................  118\n2.4.80 Mod .............................................................................................. 119\n2.4.81 Mode ............................................................................................ 120\n2.4.82 Month ........................................................................................... 122\n2.4.83 Now .............................................................................................. 122\n2.4.84 Number ........................................................................................  123\n2.4.85 Page ............................................................................................. 124\n2.4.86 PageAbs ......................................................................................  125\n2.4.87 PageAcross .................................................................................. 125\n2.4.88 PageCount ................................................................................... 126\n2.4.89 PageCountAcross ........................................................................  127\n2.4.90 Paint ............................................................................................. 127\n2.4.91 Percent ......................................................................................... 128\n2.4.92 Pi .................................................................................................. 130\n2.4.93 Pos ............................................................................................... 131\n2.4.94 PosA ............................................................................................  132\n2.4.95 ProfileInt ....................................................................................... 133\n2.4.96 ProfileString .................................................................................  134\n2.4.97 Rand ............................................................................................  136\n2.4.98 Real .............................................................................................. 136\n2.4.99 RelativeDate ................................................................................  137\n2.4.100 RelativeTime ..............................................................................  137\n2.4.101 Replace ...................................................................................... 138\n2.4.102 ReplaceA ...................................................................................  139\n2.4.103 RGB ...........................................................................................  140\n2.4.104 RichText ..................................................................................... 141\n2.4.105 RichTextFile ...............................................................................  142\n2.4.106 Right ........................................................................................... 142\n2.4.107 RightA ........................................................................................  143\n2.4.108 RightTrim ...................................................................................  143\n2.4.109 Round ........................................................................................  144\n2.4.110 RowCount ..................................................................................  145\n2.4.111 RowHeight .................................................................................  145\n2.4.112 Second ....................................................................................... 146\n2.4.113 SecondsAfter .............................................................................  147\n2.4.114 Sign ............................................................................................ 147\n2.4.115 Sin .............................................................................................. 148\n2.4.116 Small .......................................................................................... 149\n2.4.117 Space ......................................................................................... 151\n2.4.118 Sqrt ............................................................................................  151\n2.4.119 StDev .........................................................................................  152\n2.4.120 StDevP ....................................................................................... 154\n2.4.121 String .......................................................................................... 156\n"}
{"page": 5, "text": "2.4.122 StripRTF ..................................................................................... 158\n2.4.123 Sum ............................................................................................ 158\n2.4.124 Tan ............................................................................................. 160\n2.4.125 Time ........................................................................................... 161\n2.4.126 Today ......................................................................................... 162\n2.4.127 Trim ............................................................................................ 162\n2.4.128 Truncate ..................................................................................... 163\n2.4.129 Upper .........................................................................................  164\n2.4.130 Var .............................................................................................  164\n2.4.131 VarP ........................................................................................... 167\n2.4.132 WordCap .................................................................................... 169\n2.4.133 Year ...........................................................................................  169\n3 DataWindow Object Properties .......................................................................... 171\n3.1 Overview of DataWindow object properties ............................................. 171\n3.2 Controls in a DataWindow and their properties ....................................... 172\n3.2.1 Properties for the DataWindow object ........................................... 172\n3.2.2 Properties for Button controls in DataWindow objects ................... 179\n3.2.3 Properties for Column controls in DataWindow objects ................. 180\n3.2.4 Properties for Computed Field controls in DataWindow objects ....  182\n3.2.5 Properties for Graph controls in DataWindow objects ...................  184\n3.2.6 Properties for GroupBox controls in DataWindow objects .............  186\n3.2.7 Properties for the Group keyword .................................................  187\n3.2.8 Properties for InkPicture controls in DataWindow objects .............  187\n3.2.9 Properties for Line controls in DataWindow objects ......................  188\n3.2.10 Properties for OLE Object controls in DataWindow objects ......... 189\n3.2.11 Properties for Oval, Rectangle, and RoundRectangle controls in\nDataWindow objects ...............................................................................  190\n3.2.11.1 Additional properties for RoundRectangle controls in\nDataWindow objects ........................................................................  191\n3.2.12 Properties for Picture controls in DataWindow objects ................ 191\n3.2.13 Properties for Report controls in DataWindow objects ................  192\n3.2.14 Properties for the Style keyword .................................................  193\n3.2.15 Properties for TableBlob controls in DataWindow objects ...........  193\n3.2.16 Properties for Text controls in DataWindow objects ....................  194\n3.2.17 Title keyword ................................................................................ 196\n3.3 Alphabetical list of DataWindow object properties ................................... 196\n3.3.1 Accelerator ..................................................................................... 196\n3.3.2 AccessibleDescription .................................................................... 197\n3.3.3 AccessibleName ............................................................................  198\n3.3.4 AccessibleRole ..............................................................................  198\n3.3.5 Action ............................................................................................. 199\n3.3.6 Activation .......................................................................................  202\n3.3.7 Alignment ....................................................................................... 203\n3.3.8 Arguments ...................................................................................... 204\n3.3.9 Attributes ........................................................................................ 204\n3.3.10 Axis ..............................................................................................  205\n3.3.11 Axis.property ................................................................................  206\n3.3.12 BackColor ....................................................................................  211\n"}
{"page": 6, "text": "3.3.13 Background.property .................................................................... 211\n3.3.14 BackImage ................................................................................... 214\n3.3.15 Band ............................................................................................. 215\n3.3.16 Bandname.property .....................................................................  216\n3.3.17 Bandname.Text ............................................................................ 220\n3.3.18 Bands ........................................................................................... 221\n3.3.19 BinaryIndex .................................................................................. 221\n3.3.20 BitmapName ................................................................................  222\n3.3.21 Border ..........................................................................................  222\n3.3.22 Brush.property .............................................................................  224\n3.3.23 Brushmode ................................................................................... 225\n3.3.24 Category ......................................................................................  227\n3.3.25 CheckBox.property ......................................................................  227\n3.3.26 ClientName ..................................................................................  229\n3.3.27 Color ............................................................................................  229\n3.3.28 ColType ........................................................................................ 231\n3.3.29 Column.Count ..............................................................................  232\n3.3.30 ContentsAllowed ..........................................................................  233\n3.3.31 Criteria .........................................................................................  233\n3.3.32 Criteria.property ...........................................................................  234\n3.3.33 Crosstab.property ........................................................................  236\n3.3.34 CSSGen.property (obsolete) ........................................................ 237\n3.3.35 Data .............................................................................................  239\n3.3.36 Data.HTML (obsolete) .................................................................  239\n3.3.37 Data.HTMLTable (obsolete) ......................................................... 240\n3.3.38 Data.XHTML (obsolete) ...............................................................  242\n3.3.39 Data.XML ..................................................................................... 243\n3.3.40 Data.XMLDTD .............................................................................. 244\n3.3.41 Data.XMLSchema ........................................................................ 244\n3.3.42 Data.XMLWeb (obsolete) ............................................................  245\n3.3.43 Data.XSLFO ................................................................................. 246\n3.3.44 DataObject ................................................................................... 246\n3.3.45 dbAlias .........................................................................................  247\n3.3.46 dbName .......................................................................................  248\n3.3.47 dddw.property ..............................................................................  249\n3.3.48 ddlb.property ................................................................................  253\n3.3.49 DefaultPicture ..............................................................................  256\n3.3.50 Depth ...........................................................................................  257\n3.3.51 Detail_Bottom_Margin .................................................................. 258\n3.3.52 Detail_Top_Margin ....................................................................... 258\n3.3.53 Detail.property .............................................................................. 258\n3.3.54 DispAttr.fontproperty ....................................................................  258\n3.3.55 DisplayType .................................................................................  262\n3.3.56 Edit.property ................................................................................. 263\n3.3.57 EditMask.property ........................................................................  267\n3.3.58 Elevation ......................................................................................  270\n3.3.59 EllipseHeight ................................................................................  271\n3.3.60 EllipseWidth .................................................................................  272\n"}
{"page": 7, "text": "3.3.61 Enabled ........................................................................................ 273\n3.3.62 Export.PDF.Distill.CustomPostScript ...........................................  273\n3.3.63 Export.PDF.Method .....................................................................  275\n3.3.64 Export.PDF.NativePDF.Author ..................................................... 277\n3.3.65 Export.PDF.NativePDF.CustomOrientation .................................  278\n3.3.66 Export.PDF.NativePDF.CustomSize ............................................ 279\n3.3.67 Export.PDF.NativePDF.ImageFormat .......................................... 280\n3.3.68 Export.PDF.NativePDF.Keywords ...............................................  282\n3.3.69 Export.PDF.NativePDF.MasterPassword ....................................  283\n3.3.70 Export.PDF.NativePDF.PDFStandard .........................................  284\n3.3.71 Export.PDF.NativePDF.Restrictions ............................................  286\n3.3.72 Export.PDF.NativePDF.Subject ...................................................  288\n3.3.73 Export.PDF.NativePDF.UserPassword ........................................ 289\n3.3.74 Export.PDF.NativePDF.UsePrintSpec .........................................  291\n3.3.75 Export.PDF.XSLFOP.Print ........................................................... 292\n3.3.76 Export.XHTML.TemplateCount .................................................... 293\n3.3.77 Export.XHTML.Template[ ].Name ................................................ 294\n3.3.78 Export.XHTML.UseTemplate .......................................................  295\n3.3.79 Export.XML.HeadGroups ............................................................. 296\n3.3.80 Export.XML.IncludeWhitespace ................................................... 296\n3.3.81 Export.XML.MetaDataType .......................................................... 297\n3.3.82 Export.XML.SaveMetaData .......................................................... 299\n3.3.83 Export.XML.TemplateCount ......................................................... 300\n3.3.84 Export.XML.Template[ ].Name ..................................................... 301\n3.3.85 Export.XML.UseTemplate ............................................................ 301\n3.3.86 Expression ...................................................................................  302\n3.3.87 Filename ......................................................................................  303\n3.3.88 FirstRowOnPage .......................................................................... 304\n3.3.89 FocusRectangle ...........................................................................  304\n3.3.90 Font.Bias ...................................................................................... 305\n3.3.91 Font.property ................................................................................ 306\n3.3.92 Footer.property ............................................................................  308\n3.3.93 Format .......................................................................................... 309\n3.3.94 Gradient.property .........................................................................  309\n3.3.95 GraphType ................................................................................... 312\n3.3.96 Grid.ColumnMove ........................................................................  313\n3.3.97 Grid.Lines ..................................................................................... 313\n3.3.98 GroupBy ....................................................................................... 314\n3.3.99 Header_Bottom_Margin ............................................................... 315\n3.3.100 Header_Top_Margin ..................................................................  315\n3.3.101 Header.property .........................................................................  316\n3.3.102 Header.#.property ......................................................................  316\n3.3.103 Height ......................................................................................... 316\n3.3.104 Height.AutoSize .........................................................................  317\n3.3.105 Height.HasMinHeight .................................................................  318\n3.3.106 Help.property .............................................................................  319\n3.3.107 HideGrayLine .............................................................................  321\n3.3.108 HideSnaked ...............................................................................  321\n"}
{"page": 8, "text": "3.3.109 Horizontal_Spread .....................................................................  322\n3.3.110 HorizontalScrollMaximum ..........................................................  323\n3.3.111 HorizontalScrollMaximum2 ........................................................  323\n3.3.112 HorizontalScrollPosition .............................................................  324\n3.3.113 HorizontalScrollPosition2 ...........................................................  324\n3.3.114 HorizontalScrollSplit ................................................................... 325\n3.3.115 HTextAlign .................................................................................  325\n3.3.116 HTML.property (obsolete) .......................................................... 326\n3.3.117 HTMLDW (obsolete) .................................................................. 328\n3.3.118 HTMLGen.property (obsolete) ...................................................  330\n3.3.119 HTMLTable.property (obsolete) ................................................. 337\n3.3.120 ID ...............................................................................................  339\n3.3.121 Identity .......................................................................................  339\n3.3.122 Import.XML.Trace ......................................................................  340\n3.3.123 Import.XML.TraceFile ................................................................. 341\n3.3.124 Import.XML.UseTemplate ..........................................................  342\n3.3.125 Initial ........................................................................................... 343\n3.3.126 Ink.property ................................................................................  343\n3.3.127 InkEdit.property .......................................................................... 345\n3.3.128 InkPic.property ...........................................................................  349\n3.3.129 Invert .......................................................................................... 351\n3.3.130 JSGen.property (obsolete) ......................................................... 352\n3.3.131 Key ............................................................................................. 353\n3.3.132 KeyClause .................................................................................. 354\n3.3.133 Label.property ............................................................................  355\n3.3.134 LabelDispAttr.fontproperty .........................................................  357\n3.3.135 LastRowOnPage ........................................................................ 357\n3.3.136 Left_Margin ................................................................................  357\n3.3.137 Legend ....................................................................................... 358\n3.3.138 Legend.DispAttr.fontproperty .....................................................  359\n3.3.139 Level ..........................................................................................  359\n3.3.140 LineRemove ............................................................................... 359\n3.3.141 LinkUpdateOptions ....................................................................  360\n3.3.142 Message.Title ............................................................................. 361\n3.3.143 Moveable ...................................................................................  361\n3.3.144 Multiline ...................................................................................... 362\n3.3.145 Name .........................................................................................  363\n3.3.146 Nest_Arguments ........................................................................  364\n3.3.147 Nested ........................................................................................ 364\n3.3.148 NewPage (Group keywords) ...................................................... 365\n3.3.149 NewPage (Report controls) .......................................................  365\n3.3.150 NoUserPrompt ...........................................................................  366\n3.3.151 Objects ....................................................................................... 367\n3.3.152 OLE.Client.property .................................................................... 367\n3.3.153 OLEClass ................................................................................... 368\n3.3.154 OriginalSize ................................................................................ 369\n3.3.155 OverlapPercent ..........................................................................  370\n3.3.156 Pen.property ..............................................................................  371\n"}
{"page": 9, "text": "3.3.157 Perspective ................................................................................  372\n3.3.158 Picture.property .......................................................................... 373\n3.3.159 Pie.DispAttr.fontproperty ............................................................ 375\n3.3.160 PlotNullData ...............................................................................  376\n3.3.161 Pointer ........................................................................................ 376\n3.3.162 Print.Preview.property ................................................................ 377\n3.3.163 Print.property .............................................................................  379\n3.3.164 Printer ........................................................................................  387\n3.3.165 Processing .................................................................................  387\n3.3.166 Protect ........................................................................................ 388\n3.3.167 QueryClear ................................................................................. 389\n3.3.168 QueryMode ................................................................................  390\n3.3.169 QuerySort ................................................................................... 391\n3.3.170 RadioButtons.property ...............................................................  392\n3.3.171 Range ........................................................................................  393\n3.3.172 ReadOnly ................................................................................... 394\n3.3.173 Render3D ................................................................................... 395\n3.3.174 ReplaceTabWithSpace ..............................................................  396\n3.3.175 Report ........................................................................................  396\n3.3.176 ResetPageCount ........................................................................ 397\n3.3.177 Resizeable .................................................................................  397\n3.3.178 Retrieve ...................................................................................... 398\n3.3.179 Retrieve.AsNeeded .................................................................... 398\n3.3.180 RichEdit.property .......................................................................  399\n3.3.181 RichText.property ....................................................................... 401\n3.3.182 RightToLeft ................................................................................  405\n3.3.183 Rotation ...................................................................................... 406\n3.3.184 Row.Resize ................................................................................ 406\n3.3.185 Rows_Per_Detail .......................................................................  407\n3.3.186 Selected ..................................................................................... 408\n3.3.187 Selected.Data ............................................................................  409\n3.3.188 Selected.Mouse .........................................................................  409\n3.3.189 Series ......................................................................................... 410\n3.3.190 ShadeColor ................................................................................  410\n3.3.191 ShowBackColorOnXP ................................................................ 411\n3.3.192 ShowBackground ....................................................................... 412\n3.3.193 ShowDefinition ...........................................................................  412\n3.3.194 SizeToDisplay ............................................................................  413\n3.3.195 SlideLeft ..................................................................................... 414\n3.3.196 SlideUp ......................................................................................  415\n3.3.197 Sort ............................................................................................  416\n3.3.198 Spacing ...................................................................................... 416\n3.3.199 Sparse ........................................................................................ 417\n3.3.200 Storage ......................................................................................  418\n3.3.201 StoragePageSize .......................................................................  418\n3.3.202 Summary.property ...................................................................... 419\n3.3.203 SuppressEventProcessing ......................................................... 419\n3.3.204 Syntax ........................................................................................ 420\n"}
{"page": 10, "text": "3.3.205 Syntax.Data ...............................................................................  420\n3.3.206 Syntax.Modified .........................................................................  421\n3.3.207 Table (for Create) ......................................................................  421\n3.3.208 Table (for InkPicture and TableBlobs) ....................................... 422\n3.3.209 Table.property ............................................................................ 423\n3.3.210 Table.sqlaction.property ............................................................. 426\n3.3.211 TabSequence ............................................................................. 429\n3.3.212 Tag ............................................................................................. 430\n3.3.213 Target ......................................................................................... 430\n3.3.214 Template .................................................................................... 431\n3.3.215 Text ............................................................................................ 432\n3.3.216 Timer_Interval ............................................................................  432\n3.3.217 Title ............................................................................................  433\n3.3.218 Title.DispAttr.fontproperty ..........................................................  434\n3.3.219 Tooltip.property ..........................................................................  434\n3.3.220 Trail_Footer ................................................................................ 436\n3.3.221 Trailer.#.property ........................................................................ 437\n3.3.222 Transparency (columns and controls) .......................................  437\n3.3.223 Transparency (picture controls in DataWindows) ......................  438\n3.3.224 Transparency (DataWindow objects) ......................................... 438\n3.3.225 Tree.property .............................................................................  439\n3.3.226 Tree.Leaf.TreeNodeIconName ..................................................  442\n3.3.227 Tree.Level.#.property ................................................................. 443\n3.3.228 Type ........................................................................................... 444\n3.3.229 Units ........................................................................................... 445\n3.3.230 Update .......................................................................................  446\n3.3.231 Validation ...................................................................................  446\n3.3.232 ValidationMsg ............................................................................  447\n3.3.233 Values (for columns) .................................................................. 448\n3.3.234 Values (for graphs) .................................................................... 449\n3.3.235 Vertical_Size ..............................................................................  449\n3.3.236 Vertical_Spread .........................................................................  449\n3.3.237 VerticalScrollMaximum ............................................................... 450\n3.3.238 VerticalScrollPosition .................................................................  450\n3.3.239 Visible ........................................................................................  451\n3.3.240 VTextAlign .................................................................................. 452\n3.3.241 Width .......................................................................................... 453\n3.3.242 Width.Autosize ...........................................................................  453\n3.3.243 Width.Autosize ...........................................................................  454\n3.3.244 X ................................................................................................. 455\n3.3.245 X1, X2 ........................................................................................ 456\n3.3.246 XHTMLGen.Browser (obsolete) ................................................. 456\n3.3.247 XMLGen.property (obsolete) ...................................................... 458\n3.3.248 XSLTGen.property (obsolete) .................................................... 459\n3.3.249 Y ................................................................................................. 460\n3.3.250 Y1, Y2 ........................................................................................ 461\n3.3.251 Zoom .......................................................................................... 462\n4 Accessing Data in Code ....................................................................................  463\n"}
{"page": 11, "text": "4.1 Accessing data and properties in DataWindow programming\nenvironments .................................................................................................. 463\n4.2 Techniques for accessing data ................................................................ 463\n4.2.1 About DataWindow data expressions ............................................ 465\n4.2.1.1 When a DataWindow data expression is evaluated ............. 466\n4.2.1.2 Getting and storing the data from a DataWindow data\nexpression ........................................................................................ 467\n4.2.1.3 Setting DataWindow data with a DataWindow data\nexpression ........................................................................................ 469\n4.3 Syntaxes for DataWindow data expressions ...........................................  471\n4.3.1 Syntax for one or all data items in a named column .....................  471\n4.3.2 Syntax for selected data in a named column ................................  473\n4.3.3 Syntax for a range of data in a named column .............................  475\n4.3.4 Syntax for a single data item in a DataWindow ............................. 476\n4.3.5 Syntax for data in a block of rows and columns ............................ 477\n4.3.6 Syntax for data in a single row or all rows ....................................  479\n4.3.7 Syntax for all data from selected rows ..........................................  480\n5 Accessing DataWindow Object Properties in Code ........................................... 482\n5.1 About properties of the DataWindow object and its controls ...................  482\n5.1.1 What you can do with DataWindow object properties ...................  482\n5.1.2 Specifying property values in the DataWindow painter .................. 484\n5.1.3 Accessing DataWindow object property values in code ................  484\n5.1.4 Using DataWindow expressions as property values ...................... 485\n5.1.4.1 More examples in the DataWindow painter and in code ...... 486\n5.1.5 Nested strings and special characters for DataWindow object\nproperties ................................................................................................  488\n5.1.5.1 Nested strings and special characters for DataWindow\nobject properties ..............................................................................  488\n5.1.5.2 Nested strings and special characters in JavaScript for\nDataWindow object properties ......................................................... 489\n5.2 PowerBuilder: Modify and Describe methods for properties .................... 490\n5.2.1 Advantage and drawbacks of Modify and Describe methods in\nPowerBuilder ........................................................................................... 490\n5.2.2 Handling errors from Modify and Describe methods in\nPowerBuilder ........................................................................................... 492\n5.3 PowerBuilder: DataWindow property expressions ................................... 492\n5.3.1 Basic structure of DataWindows and property expressions in\nPowerBuilder ........................................................................................... 493\n5.3.2 Datatypes of DataWindow property expressions in\nPowerBuilder ........................................................................................... 493\n5.3.3 Using the DWObject variable in PowerBuilder ..............................  494\n5.3.3.1 DWObject variables in PowerBuilder ................................... 495\n5.3.3.2 DWObject arguments for DataWindow events in\nPowerBuilder .................................................................................... 495\n5.3.4 When a DataWindow property expression is evaluated in\nPowerBuilder ........................................................................................... 497\n5.3.5 Handling errors from DataWindow property expressions in\nPowerBuilder ........................................................................................... 497\n"}
{"page": 12, "text": "5.3.6 PowerBuilder syntax for DataWindow property expressions .........  499\n5.3.6.1 Basic syntax for DataWindow property expressions in\nPowerBuilder .................................................................................... 499\n5.3.6.2 Syntax for nested objects in DataWindow property\nexpressions in PowerBuilder ...........................................................  502\n5.4 JavaScript: Modify and Describe methods for properties ........................  505\n5.4.1 Advantage and drawbacks of the Modify and Describe methods\nin JavaScript ...........................................................................................  505\n5.4.2 Handling errors for Modify and Describe methods in JavaScript ...  506\n6 DataWindow Constants ...................................................................................... 508\n6.1 About DataWindow constants .................................................................. 508\n6.2 Alphabetical list of DataWindow constants .............................................. 508\n6.3 AccessibleRole ......................................................................................... 509\n6.4 Alignment .................................................................................................  511\n6.5 Band ......................................................................................................... 512\n6.6 Border ......................................................................................................  512\n6.7 BorderStyle ..............................................................................................  513\n6.8 CharSet .................................................................................................... 513\n6.9 DWBuffer .................................................................................................. 514\n6.10 DWConflictResolution ............................................................................  514\n6.11 DWItemStatus ........................................................................................ 515\n6.12 FillPattern ............................................................................................... 515\n6.13 grColorType ...........................................................................................  516\n6.14 grDataType ............................................................................................  516\n6.15 grObjectType .......................................................................................... 517\n6.16 grSymbolType ........................................................................................ 518\n6.17 LineStyle ................................................................................................  518\n6.18 MetaDataType ........................................................................................ 519\n6.19 RichTextToolbarActivation .....................................................................  519\n6.20 RowFocusInd .........................................................................................  520\n6.21 SaveAsType ........................................................................................... 520\n6.22 SQLPreviewFunction .............................................................................  522\n6.23 SaveMetaData .......................................................................................  522\n6.24 SQLPreviewType ...................................................................................  522\n6.25 WebPagingMethod ................................................................................. 523\n7 Properties of the DataWindow Control and DataStore ......................................  524\n7.1 Properties for PowerBuilder DataWindow ...............................................  524\n7.1.1 Properties for DataStore objects ...................................................  524\n7.1.2 Properties for DataWindow controls .............................................. 524\n8 DataWindow Events ........................................................................................... 528\n8.1 About return values for DataWindow events ...........................................  528\n8.2 Categories of DataWindow events ..........................................................  528\n8.3 DataWindow event cross-reference ......................................................... 530\n8.4 Alphabetical list of DataWindow events ................................................... 530\n8.5 BackTabOut .............................................................................................  530\n8.6 ButtonClicked ........................................................................................... 531\n8.7 ButtonClicking ..........................................................................................  532\n8.8 Clicked .....................................................................................................  533\n"}
{"page": 13, "text": "8.9 Collapsed .................................................................................................  535\n8.10 Collapsing ..............................................................................................  536\n8.11 Constructor ............................................................................................. 536\n8.12 DBError ..................................................................................................  537\n8.13 Destructor ............................................................................................... 539\n8.14 DoubleClicked ........................................................................................ 539\n8.15 DragDrop ................................................................................................ 541\n8.16 DragEnter ............................................................................................... 542\n8.17 DragLeave .............................................................................................. 542\n8.18 DragWithin .............................................................................................  543\n8.19 DropDown ..............................................................................................  544\n8.20 EditChanged ..........................................................................................  544\n8.21 Error .......................................................................................................  545\n8.22 Expanded ............................................................................................... 547\n8.23 Expanding ..............................................................................................  548\n8.24 GetFocus ................................................................................................ 549\n8.25 GraphCreate ..........................................................................................  549\n8.26 HTMLContextApplied .............................................................................  550\n8.27 ItemChanged .......................................................................................... 551\n8.28 ItemError ................................................................................................  552\n8.29 ItemFocusChanged ................................................................................ 554\n8.30 KeyDown ................................................................................................ 555\n8.31 LoseFocus .............................................................................................. 555\n8.32 MessageText .......................................................................................... 556\n8.33 MouseMove ............................................................................................ 557\n8.34 MouseUp ................................................................................................ 558\n8.35 OnSubmit ...............................................................................................  559\n8.36 Printend .................................................................................................. 559\n8.37 PrintMarginChange ................................................................................  560\n8.38 PrintPage ...............................................................................................  560\n8.39 PrintStart ................................................................................................  562\n8.40 ProcessEnter .......................................................................................... 562\n8.41 RButtonDown ......................................................................................... 562\n8.42 Resize ....................................................................................................  563\n8.43 RetrieveEnd ...........................................................................................  564\n8.44 RetrieveRow ........................................................................................... 565\n8.45 RetrieveStart ..........................................................................................  566\n8.46 RichTextCurrentStyleChanged ............................................................... 567\n8.47 RichTextLoseFocus ...............................................................................  567\n8.48 RichTextLimitError .................................................................................  567\n8.49 RowFocusChanged ................................................................................ 568\n8.50 RowFocusChanging ............................................................................... 569\n8.51 ScrollHorizontal ......................................................................................  571\n8.52 ScrollVertical ..........................................................................................  571\n8.53 SQLPreview ...........................................................................................  572\n8.54 TabDownOut .......................................................................................... 574\n8.55 TabOut ...................................................................................................  574\n8.56 TabUpOut ............................................................................................... 575\n"}
{"page": 14, "text": "8.57 TreeNodeSelected .................................................................................  575\n8.58 TreeNodeSelecting ................................................................................  576\n8.59 UpdateEnd .............................................................................................  576\n8.60 UpdateStart ............................................................................................ 577\n8.61 WSError (Obsolete) ...............................................................................  577\n9 Methods for the DataWindow Control ................................................................ 579\n9.1 AboutBox (obsolete) ................................................................................  579\n9.2 AcceptText ...............................................................................................  579\n9.3 CanUndo .................................................................................................. 582\n9.4 ClassName ............................................................................................... 583\n9.5 Clear ......................................................................................................... 583\n9.6 ClearValues .............................................................................................. 584\n9.7 Collapse ...................................................................................................  585\n9.8 CollapseAll ...............................................................................................  586\n9.9 CollapseAllChildren .................................................................................. 587\n9.10 CollapseLevel ......................................................................................... 588\n9.11 Copy ....................................................................................................... 590\n9.12 CopyRTF ................................................................................................ 591\n9.13 Create ....................................................................................................  593\n9.14 CreateError (obsolete) ...........................................................................  595\n9.15 CreateFrom ............................................................................................ 596\n9.16 CrosstabDialog ....................................................................................... 598\n9.17 Cut .......................................................................................................... 599\n9.18 DBCancel ............................................................................................... 600\n9.19 DBErrorCode (obsolete) ........................................................................  602\n9.20 DBErrorMessage (obsolete) ..................................................................  603\n9.21 DeletedCount .........................................................................................  605\n9.22 DeleteRow .............................................................................................. 606\n9.23 Describe ................................................................................................. 607\n9.24 Drag .......................................................................................................  612\n9.25 Expand ................................................................................................... 613\n9.26 ExpandAll ............................................................................................... 614\n9.27 ExpandAllChildren .................................................................................. 615\n9.28 ExpandLevel ..........................................................................................  616\n9.29 ExportJson .............................................................................................  617\n9.29.1 Syntax 1 ....................................................................................... 617\n9.29.2 Syntax 2 ....................................................................................... 619\n9.29.3 Syntax 3 ....................................................................................... 620\n9.29.4 Syntax 4 ....................................................................................... 622\n9.30 ExportRowAsJson .................................................................................. 625\n9.31 Filter .......................................................................................................  627\n9.32 FilteredCount .......................................................................................... 628\n9.33 Find ........................................................................................................  629\n9.34 FindGroupChange .................................................................................. 633\n9.35 FindNext ................................................................................................. 635\n9.36 FindRequired .......................................................................................... 635\n9.37 FindRequiredColumn (obsolete) ............................................................  639\n9.38 FindRequiredColumnName (obsolete) ................................................... 639\n"}
{"page": 15, "text": "9.39 FindRequiredRow (obsolete) .................................................................  640\n9.40 Generate (obsolete) ............................................................................... 641\n9.41 GenerateHTMLForm (obsolete) ............................................................. 643\n9.42 GenerateResultSet ................................................................................. 644\n9.43 GenerateXHTML (obsolete) ................................................................... 646\n9.44 GenerateXMLWeb (obsolete) ................................................................  647\n9.45 GetBandAtPointer ..................................................................................  648\n9.46 GetBorderStyle ....................................................................................... 650\n9.47 GetChanges ........................................................................................... 651\n9.48 GetChangesBlob (obsolete) ................................................................... 653\n9.49 GetChild .................................................................................................  654\n9.50 GetChildObject (obsolete) ...................................................................... 656\n9.51 GetClickedColumn .................................................................................  657\n9.52 GetClickedRow ......................................................................................  658\n9.53 GetColumn ............................................................................................. 659\n9.54 GetColumnName ...................................................................................  660\n9.55 GetContextService .................................................................................  661\n9.56 GetFormat .............................................................................................. 662\n9.57 GetFullContext (obsolete) ...................................................................... 663\n9.58 GetFullState ...........................................................................................  664\n9.59 GetFullStateBlob (obsolete) ................................................................... 665\n9.60 GetItem (obsolete) .................................................................................  666\n9.61 GetItemDate ........................................................................................... 667\n9.62 GetItemDateTime ................................................................................... 670\n9.63 GetItemDecimal .....................................................................................  672\n9.64 GetItemFormattedString ......................................................................... 674\n9.65 GetItemNumber ...................................................................................... 675\n9.66 GetItemStatus ........................................................................................  677\n9.67 GetItemString ......................................................................................... 679\n9.68 GetItemTime ..........................................................................................  681\n9.69 GetItemUnformattedString .....................................................................  683\n9.70 GetLastError (obsolete) .........................................................................  684\n9.71 GetLastErrorString (obsolete) ................................................................  685\n9.72 GetMessageText (obsolete) ................................................................... 687\n9.73 GetNextModified ....................................................................................  687\n9.74 GetObjectAtPointer ................................................................................  689\n9.75 GetParent ............................................................................................... 690\n9.76 GetRichTextAlign ...................................................................................  691\n9.77 GetRichTextColor ................................................................................... 692\n9.78 GetRichTextFaceName .......................................................................... 693\n9.79 GetRichTextSize ....................................................................................  694\n9.80 GetRichTextStyle ...................................................................................  695\n9.81 GetRow ..................................................................................................  696\n9.82 GetRowFromRowId ................................................................................ 697\n9.83 GetRowIdFromRow ................................................................................ 698\n9.84 GetSelectedRow ....................................................................................  699\n9.85 GetSQLPreview (obsolete) ....................................................................  700\n9.86 GetSQLSelect ........................................................................................  701\n"}
{"page": 16, "text": "9.87 GetStateStatus (obsolete) ...................................................................... 702\n9.88 GetText ..................................................................................................  704\n9.89 GetTrans ................................................................................................  705\n9.90 GetUpdateStatus (obsolete) ..................................................................  707\n9.91 GetValidate ............................................................................................  708\n9.92 GetValue ................................................................................................  709\n9.93 GroupCalc .............................................................................................. 711\n9.94 Hide ........................................................................................................ 712\n9.95 ImportClipboard ...................................................................................... 712\n9.96 ImportFile ...............................................................................................  715\n9.97 ImportJson .............................................................................................  719\n9.98 ImportJsonByKey ...................................................................................  726\n9.99 ImportRowFromJson .............................................................................. 731\n9.100 ImportString .......................................................................................... 734\n9.101 InsertDocument .................................................................................... 737\n9.102 InsertRow ............................................................................................. 739\n9.103 IsExpanded ..........................................................................................  740\n9.104 IsRowSelected (obsolete) ....................................................................  741\n9.105 IsSelected ............................................................................................  742\n9.106 LineCount ............................................................................................. 743\n9.107 ModifiedCount ...................................................................................... 744\n9.108 Modify ................................................................................................... 746\n9.109 Move ....................................................................................................  757\n9.110 OLEActivate .........................................................................................  758\n9.111 OneTrip (obsolete) ............................................................................... 759\n9.112 Paste .................................................................................................... 762\n9.113 PasteRTF ............................................................................................. 763\n9.114 PointerX ...............................................................................................  764\n9.115 PointerY ...............................................................................................  765\n9.116 Position ................................................................................................  766\n9.116.1 Syntax 1 For DataWindows with standard presentation\nstyles .......................................................................................................  766\n9.116.2 Syntax 2 For DataWindows with RichTextEdit presentation\nstyles .......................................................................................................  767\n9.117 PostEvent ............................................................................................. 770\n9.118 Print ...................................................................................................... 771\n9.118.1 Syntax 1 For printing a single DataWindow or DataStore .......... 772\n9.118.2 Syntax 2 For printing a visual object in a print job ..................... 773\n9.119 PrintCancel ........................................................................................... 775\n9.119.1 Syntax 1 For DataWindows and DataStores .............................  775\n9.119.2 Syntax 2 For canceling a print job ............................................. 776\n9.120 ReplaceText ......................................................................................... 778\n9.121 ReselectRow ........................................................................................ 779\n9.122 Reset .................................................................................................... 780\n9.123 ResetInk ............................................................................................... 781\n9.124 ResetTransObject ................................................................................  782\n9.125 ResetUpdate ........................................................................................  783\n9.126 Resize ..................................................................................................  784\n"}
{"page": 17, "text": "9.127 Retrieve ................................................................................................ 785\n9.128 RowCount ............................................................................................  789\n9.129 RowsCopy ............................................................................................ 790\n9.130 RowsDiscard ........................................................................................ 792\n9.131 RowsMove ...........................................................................................  793\n9.132 SaveAs ................................................................................................. 795\n9.133 SaveAsAscii .........................................................................................  798\n9.134 SaveAsFormattedText .........................................................................  799\n9.135 SaveInk ................................................................................................  801\n9.136 SaveInkPic ...........................................................................................  803\n9.137 SaveNativePDFToBlob ........................................................................  804\n9.138 Scroll ....................................................................................................  805\n9.139 ScrollFirstPage (obsolete) .................................................................... 806\n9.140 ScrollLastPage (obsolete) .................................................................... 807\n9.141 ScrollNextPage ....................................................................................  808\n9.141.1 Syntax 1 For DataWindow controls and child DataWindows .....  808\n9.141.2 Syntax 2 For RichTextEdit DataWindows .................................. 810\n9.142 ScrollNextRow ...................................................................................... 811\n9.142.1 Syntax 1 For DataWindow controls and child DataWindows .....  811\n9.142.2 Syntax 2 For RichTextEdit DataWindows .................................. 812\n9.143 ScrollPriorPage ....................................................................................  813\n9.143.1 Syntax 1 For DataWindow controls and child DataWindows .....  814\n9.143.2 Syntax 2 For RichTextEdit DataWindows .................................. 815\n9.144 ScrollPriorRow .....................................................................................  816\n9.144.1 Syntax 1 For DataWindow controls and child DataWindows .....  816\n9.144.2 Syntax 2 For RichTextEdit DataWindows .................................. 817\n9.145 ScrollToRow ......................................................................................... 818\n9.146 SelectedLength ....................................................................................  820\n9.147 SelectedLine ........................................................................................  821\n9.148 SelectedStart ........................................................................................ 822\n9.149 SelectedText ........................................................................................  823\n9.150 SelectRow ............................................................................................ 824\n9.151 SelectText ............................................................................................  825\n9.151.1 Syntax 1 For DataWindows with standard edit styles ................ 825\n9.151.2 Syntax 2 For RichTextEdit DataWindows .................................. 827\n9.152 SelectTextAll ........................................................................................  828\n9.153 SelectTextLine .....................................................................................  830\n9.154 SelectTextWord .................................................................................... 831\n9.155 SelectTreeNode ...................................................................................  832\n9.156 SetAction (obsolete) ............................................................................. 833\n9.157 SetActionCode (obsolete) ....................................................................  834\n9.158 SetBorderStyle ..................................................................................... 836\n9.159 SetBrowser (obsolete) .........................................................................  836\n9.160 SetChanges .........................................................................................  838\n9.161 SetColumn ...........................................................................................  839\n9.162 SetColumnLink (obsolete) .................................................................... 841\n9.163 SetCultureFormat ................................................................................. 843\n9.164 SetDetailHeight ....................................................................................  843\n"}
{"page": 18, "text": "9.165 SetDWObject (obsolete) ......................................................................  844\n9.166 SetFilter ................................................................................................ 846\n9.167 SetFormat ............................................................................................  848\n9.168 SetFullState .......................................................................................... 849\n9.169 SetHTMLAction (obsolete) ................................................................... 851\n9.170 SetHTMLObjectName (obsolete) ......................................................... 852\n9.171 SetItem ................................................................................................. 853\n9.172 SetItemDate (obsolete) ........................................................................ 856\n9.173 SetItemDateTime (obsolete) ................................................................  857\n9.174 SetItemNumber (obsolete) ................................................................... 858\n9.175 SetItemStatus ....................................................................................... 859\n9.176 SetItemString (obsolete) ......................................................................  862\n9.177 SetItemTime (obsolete) ........................................................................ 863\n9.178 SetPageSize (obsolete) .......................................................................  864\n9.179 SetPosition ........................................................................................... 865\n9.180 SetRedraw ...........................................................................................  866\n9.181 SetRichTextAlign .................................................................................. 867\n9.182 SetRichTextColor .................................................................................  868\n9.183 SetRichTextFaceName ........................................................................  869\n9.184 SetRichTextSize ................................................................................... 870\n9.185 SetRichTextStyle .................................................................................. 871\n9.186 SetRow ................................................................................................. 872\n9.187 SetRowFocusIndicator .........................................................................  873\n9.188 SetSelfLink (obsolete) .......................................................................... 875\n9.189 SetServerServiceClasses (obsolete) ...................................................  877\n9.190 SetServerSideState (obsolete) ............................................................. 879\n9.191 SetSort .................................................................................................  880\n9.192 SetSQLPreview .................................................................................... 882\n9.193 SetSQLSelect ....................................................................................... 883\n9.194 SetTabOrder ........................................................................................  885\n9.195 SetText ................................................................................................. 886\n9.196 SetTrans ............................................................................................... 888\n9.197 SetTransObject ....................................................................................  889\n9.198 SetValidate ........................................................................................... 892\n9.199 SetValue ............................................................................................... 894\n9.200 SetWeight (obsolete) ...........................................................................  896\n9.201 SetWSObject (Obsolete) ...................................................................... 898\n9.202 ShareData ............................................................................................ 899\n9.203 ShareDataOff .......................................................................................  902\n9.204 Show ....................................................................................................  903\n9.205 ShowHeadFoot ....................................................................................  904\n9.206 Sort ....................................................................................................... 905\n9.207 TextLine ...............................................................................................  907\n9.208 TriggerEvent ......................................................................................... 908\n9.209 TypeOf .................................................................................................  909\n9.210 Undo ..................................................................................................... 909\n9.211 Update .................................................................................................. 910\n10 Methods for Graphs in the DataWindow Control ............................................. 914\n"}
{"page": 19, "text": "10.1 CategoryCount ....................................................................................... 914\n10.2 CategoryName ....................................................................................... 915\n10.3 Clipboard ................................................................................................ 915\n10.4 DataCount .............................................................................................. 916\n10.5 FindCategory .......................................................................................... 917\n10.6 FindSeries .............................................................................................. 918\n10.7 GetData .................................................................................................. 919\n10.8 GetDataDateVariable .............................................................................  920\n10.9 GetDataLabelling ...................................................................................  921\n10.10 GetDataNumberVariable ...................................................................... 922\n10.11 GetDataPieExplode .............................................................................. 923\n10.12 GetDataPieExplodePercentage ...........................................................  924\n10.13 GetDataStringVariable .........................................................................  925\n10.14 GetDataStyle ........................................................................................ 926\n10.14.1 Syntax 1 For the colors of a data point .....................................  927\n10.14.2 Syntax 2 For the line style and width used by a data point ........ 928\n10.14.3 Syntax 3 For the fill pattern of a data point ...............................  929\n10.14.4 Syntax 4 For the symbol of a data point ...................................  930\n10.15 GetDataStyleColorValue ......................................................................  931\n10.16 GetDataStyleFillPattern ........................................................................ 932\n10.17 GetDataStyleLineStyle .........................................................................  933\n10.18 GetDataStyleLineWidth ........................................................................ 934\n10.19 GetDataStyleSymbolValue ................................................................... 934\n10.20 GetDataTransparency .......................................................................... 935\n10.21 GetDataValue ....................................................................................... 936\n10.22 GetSeriesLabelling ............................................................................... 938\n10.23 GetSeriesStyle .....................................................................................  939\n10.23.1 Syntax 1 For the colors of a series ...........................................  939\n10.23.2 Syntax 2 For the line style and width used by a series .............. 940\n10.23.3 Syntax 3 For the fill pattern of a series .....................................  942\n10.23.4 Syntax 4 For the symbol of a series .......................................... 943\n10.23.5 Syntax 5 For determining whether a series is an overlay ..........  944\n10.24 GetSeriesStyleColorValue .................................................................... 945\n10.25 GetSeriesStyleFillPattern .....................................................................  945\n10.26 GetSeriesStyleLineStyle ....................................................................... 946\n10.27 GetSeriesStyleLineWidth .....................................................................  947\n10.28 GetSeriesStyleOverlayValue ................................................................ 948\n10.29 GetSeriesStyleSymbolValue ................................................................  949\n10.30 GetSeriesTransparency .......................................................................  950\n10.31 ObjectAtPointer ....................................................................................  951\n10.32 ObjectAtPointerDataPoint ....................................................................  952\n10.33 ObjectAtPointerSeries .......................................................................... 952\n10.34 Reset .................................................................................................... 953\n10.35 ResetDataColors .................................................................................. 954\n10.36 SaveAs ................................................................................................. 955\n10.37 SeriesCount .........................................................................................  957\n10.38 SeriesName .........................................................................................  957\n10.39 SetDataLabelling .................................................................................. 958\n"}
{"page": 20, "text": "10.40 SetDataPieExplode ..............................................................................  959\n10.41 SetDataStyle ........................................................................................  961\n10.41.1 Syntax 1 For setting a data point's colors .................................  961\n10.41.2 Syntax 2 For the line associated with a data point ....................  962\n10.41.3 Syntax 3 For the fill pattern of a data point ...............................  964\n10.41.4 Syntax 4 For the symbol of a data point ...................................  965\n10.42 SetDataTransparency ..........................................................................  966\n10.43 SetSeriesLabelling ...............................................................................  967\n10.44 SetSeriesStyle ...................................................................................... 968\n10.44.1 Syntax 1 For setting a series' colors .........................................  968\n10.44.2 Syntax 2 For lines in a graph ....................................................  970\n10.44.3 Syntax 3 For the fill pattern in a graph ...................................... 971\n10.44.4 Syntax 4 For the symbols in a graph ........................................  972\n10.44.5 Syntax 5 For creating an overlay in a graph .............................. 974\n10.45 SetSeriesTransparency ........................................................................ 975\nIndex ...................................................................................................................... 977\n"}
{"page": 21, "text": "DataWindow Operators and Expressions\nPage 21\n1 DataWindow Operators and Expressions\nAbout this chapter\nYou use an expression to request that a DataWindow object perform a computational\noperation. This chapter explains how expressions work and how to write them.\n1.1 Where you use DataWindow expressions\nA DataWindow expression is a combination of data, operators, and functions that,\nwhen evaluated, results in a value. An expression can include column names, operators,\nDataWindow expression functions, and constants such as numbers and text strings.\nIn painters\nDataWindow expressions are associated with DataWindow objects and reports. You specify\nthem in the DataWindow painter. You can also specify expressions in the Database painter,\nalthough these expressions have a slightly different format and are used only in validation\nrules.\nFor information about DataWindow expression functions that you can use in expressions, see\nUsing DataWindow expression functions, or look up the function you want in online help.\nIn painters, you use expressions in these ways:\nTable 1.1: Using DataWindow expressions in painters\nIn this painter\nExpressions are used in\nDataWindow painter\nComputed fields\nConditional expressions for property values\nValidation rules\nFilters\nSorting\nSeries and values in graphs\nColumns, rows, and values in crosstabs\nDatabase painter\nValidation rules\nOther types of expressions you use\nYou also use expressions in Quick Select, SQL Select, and the Query painter\nto specify selection criteria, and in SQL Select and the Query painter to create\ncomputed columns. In these painters you are using SQL operators and DBMS-specific\nfunctions, not DataWindow expression operators and functions, to create expressions.\nYou can access and change the value of DataWindow data and properties in code. The\nformat for expressions you specify in code is different from the same expression specified\nin the painter. These differences are described in Accessing Data in Code and Accessing\nDataWindow Object Properties in Code\nSome of the specific places where you use expressions are described here.\n"}
{"page": 22, "text": "DataWindow Operators and Expressions\nPage 22\nIn computed fields\nExpressions for computed fields can evaluate to any value. The datatype of the expression\nbecomes the datatype of the computed field:\nTable 1.2: Using expressions in computed fields\nExpression\nDescription\nToday ( )\nDisplays the date using the Today function\nSalary/12\nComputes the monthly salary\nSum (Salary\nfor group 1)\nComputes the salary for the first group using the Sum aggregate function\nPrice*Quantity Computes the total cost\nExpressions for graphs and crosstabs\nYou can use similar expressions for series and values in graphs and for columns,\nrows, and values in crosstabs.\nIn filters\nFilter expressions are boolean expressions that must evaluate to true or false:\nTable 1.3: Using expressions with filters\nExpression\nDescription\nAcademics = \"*****\"\nAND Cost = \"$$$\"\nDisplays data only for colleges with both a 5-star academic rating\nand a $$$ cost rating\nEmp_sal < 50000\nDisplays data for employees with salaries less than $50,000\nSalary > 50000 AND\nDept_id BETWEEN 400\nAND 700\nDisplays data for employees in departments 400, 500, 600, and\n700 with salaries greater than $50,000\nMonth(Bdate) = 9 OR\nMonth(Bdate) = 2\nDisplays data for people with birth dates in September or\nFebruary\nMatch ( Lname,\n\"[ ^ABC ]\" )\nDisplays data for people whose last name begins with A, B, or C\nIn validation rules for table columns\nValidation rules are boolean expressions that compare column data with values and that use\nrelational and logical operators. When the validation rule evaluates to false, the data in the\ncolumn is rejected.\nIn the DataWindow painter\nWhen you specify a validation rule in the DataWindow painter, you should validate the\nnewly entered value. To refer to the newly entered value, use the GetText function. Because\nGetText returns a string, you also need a data conversion function (such as Integer or Real) if\nyou compare the value to other types of data.\nIf you include the column name in the expression, you get the value that already exists for the\ncolumn instead of the newly entered value that needs validating.\n"}
{"page": 23, "text": "DataWindow Operators and Expressions\nPage 23\nIn the Database painter\nWhen you specify the validation rule in the Database painter, you are defining a general rule\nthat can be applied to any column. Use @placeholder to stand for the newly entered value.\nThe name you use for @placeholder is irrelevant. You can assign the rule to any column that\nhas a datatype appropriate for the comparison.\nWhen you define a DataWindow object, a validation rule assigned to a column is brought\ninto the DataWindow object and converted to DataWindow object syntax. @placeholder is\nconverted to GetText and the appropriate datatype conversion function.\nOther columns in the rule\nYou can refer to values in other columns for the current row by specifying their names in the\nvalidation rule:\nTable 1.4: Using expressions with values from other columns\nExpression in\nDatabase painter\nExpression in\nDataWindow\npainter\nDescription\n@column >=\n10000\nInteger(GetText())>=\n10000\nIf a user enters a salary below $10,000, an error\nmessage displays.\n@column IN (100,\n200, 300)\nInteger(GetText()) IN\n(100, 200, 300)\nIf a user does not enter a department ID of 100,\n200, or 300, an error message displays.\n@salary > 0\nLong(GetText()) > 0\nIf a user does not enter a positive number, an\nerror message displays.\nMatch(@disc_price,\n\"^[0-9]+$\") and\n@disc_price <\nFull_Price\nMatch(GetText( ),\n\"^[0-9]+$\") and\nReal(GetText()) <\nFull_Price\nIf a user enters any characters other than digits,\nor the resulting number is greater than or equal\nto the value in the Full_Price column, an error\nmessage displays.\n1.2 Operators used in DataWindow expressions\nAn operator is a symbol or word in an expression that performs an arithmetic calculation or\nlogical operation; compares numbers, text, or values; or manipulates text strings.\nFour types of operators are available:\n\u2022 Arithmetic for numeric datatypes. See Arithmetic operators in DataWindow expressions.\n\u2022 Relational for all datatypes. See Relational operators in DataWindow expressions.\n\u2022 Logical for all datatypes. See Logical operators in DataWindow expressions.\n\u2022 Concatenation for string datatypes. See Concatenation operator in DataWindow\nexpressions.\n1.2.1 Arithmetic operators in DataWindow expressions\nWhen you write an expression, you can use the following arithmetic operators:\n"}
{"page": 24, "text": "DataWindow Operators and Expressions\nPage 24\nTable 1.5: Using expressions with arithmetic operators\nOperator\nMeaning\nExample\n+\nAddition\nSubTotal + Tax\n-\nSubtraction\nPrice - Discount\n*\nMultiplication\nQuantity * Price\n/\nDivision\nDiscount / Price\n^\nExponentiation\nRating ^ 2.5\nMultiplication and division\nMultiplication and division are carried out to full precision (16-18 digits). Values are\nrounded:\nTable 1.6: Value rounding in DataWindow expressions\nExpression\nValue\n20.0/3\n6.666666666666667\n3*(20.0/3)\n20\nTruncate(20.0/3,4)\n6.6666\nCalculations with null\nWhen you form an arithmetic expression that contains a null value, the expression becomes\nnull. Thinking of null as undefined makes this easier to understand. For example, when a null\ncolumn is multiplied by 5, the entire expression also evaluates to null. Use the IsNull function\nto explicitly check for the null value.\nBoolean expressions that contain a null value evaluate to false rather than to null. For more\ninformation, see Relational operators in DataWindow expressions.\n1.2.2 Relational operators in DataWindow expressions\nYou use relational operators to compare a value with other values. The result is a boolean\nexpression whose value is always true or false.\nSince the result of a boolean expression is always true or false, a relational operator that\ncompares a value to null evaluates to false. For example, the expression \"column > 5\"\nevaluates to false (and \"NOT column > 5\" evaluates to true) when the column value is null.\nWhen you write an expression, you can use the following relational operators (more\ninformation about LIKE, IN, and BETWEEN follows the table):\nTable 1.7: Using expressions with relational operators\nOperator\nMeaning\nExample\n=\nIs equal to\nPrice = 100\n>\nIs greater than\nPrice > 100\n<\nIs less than\nPrice < 100\n<>\nIs not equal to\nPrice <> 100\n>=\nGreater than or equal to\nPrice >= 100\n"}
{"page": 25, "text": "DataWindow Operators and Expressions\nPage 25\nOperator\nMeaning\nExample\n<=\nLess than or equal to\nPrice <= 100\nNOT =\nIs not equal to\nPrice NOT= 100\nLIKE\nMatches this specified\npattern.\nEmp_lname LIKE 'C%' OR\nEmp_lname LIKE 'G%'\nIN\nIs in this set of values.\nDept_id IN (100, 200, 500)\nBETWEEN\nIs within this range of values.\nThe range includes the first\nand last values.\nPrice BETWEEN 1000 AND\n3000\nNOT LIKE\nDoes not match this specified\npattern.\nEmp_lname NOT LIKE 'C\n%' AND Emp_lname NOT\nLIKE 'G%'\nNOT IN\nIs not in this set of values.\nDept_id NOT IN (100, 200,\n500)\nNOT BETWEEN\nIs outside this range of\nvalues. The range includes\nthe first and last values.\nPrice NOT BETWEEN 1000\nAND 2000\nSpecial characters for operations with strings\nYou can use the following special characters with relational operators that take string values:\nTable 1.8: Special characters for use in expressions with relational operators\nSpecial character\nMeaning\nExample\n% (percent)\nMatches any group of\ncharacters.\nGood% matches all names\nthat begin with Good.\n_ (underscore)\nMatches any single character. Good _ _ _ matches all 7-\nletter names that begin with\nGood.\nLIKE and NOT LIKE operators\nUse LIKE to search for strings that match a predetermined pattern. Use NOT LIKE to search\nfor strings that do not match a predetermined pattern. When you use LIKE or NOT LIKE,\nyou can use the % or _ characters to match unknown characters in a pattern.\nFor example, the following expression for the Background.Color property of the Salary\ncolumn displays salaries in red for employees with last names beginning with F and displays\nall other salaries in white:\nIf(emp_lname LIKE'F%',RGB(255,0,0),RGB(255,255,255))\nEscape keyword\nIf you need to use the % or _ characters as part of the string, you can use the escape keyword\nto indicate that the character is part of the string. For example, the _ character in the\nfollowing filter string is part of the string to be searched for, but is treated as a wildcard:\ncomment LIKE ~'%o_a15progress%~'\n"}
{"page": 26, "text": "DataWindow Operators and Expressions\nPage 26\nThe escape keyword designates any character as an escape character (do not use a character\nthat is part of the string you want to match). In the following example, the asterisk (*)\ncharacter is inserted before the _ character and designated as an escape character, so that the\n_ character is treated as part of the string to be matched:\ncomment like ~'%o*_a15progress%~' escape ~'*~'\nBETWEEN and NOT BETWEEN operators\nUse BETWEEN to check if a value is within a range of values. Use NOT BETWEEN to\ncheck if a value is not in a range of values. The range of values includes the boundary values\nthat specify the range.\nFor example, the following expression for the Background.Color property of the Salary\ncolumn displays salaries in red when an employee's salary is between $50,000 and $100,000\nand displays all other salaries in white:\nIf(salary BETWEEN 50000 AND 100000, RGB(255,0,0), RGB(255,255,255))\nYou can use the BETWEEN and NOT BETWEEN operators with string values. For example,\nif the following expression is used for the Visual property of a column, column values\ndisplay only for departments listed alphabetically between Finance and Sales:\nIf(dept_name BETWEEN 'Finance' AND 'Sales',1,0)\nThe % or _ characters can be used when you are using string values with the BETWEEN and\nNOT BETWEEN operators. This example might include more department listings than the\nprevious example:\nIf(dept_name BETWEEN 'F%' AND 'S%',1,0)\nYou can also use the BETWEEN and NOT BETWEEN operators with methods. For\nexample:\nGetRow( ) BETWEEN 5 AND 8\nIN and NOT IN operators\nUse IN to check if a value is in a set of values. Use NOT IN to check if a value is not in a set\nof values.\nFor example, the following expression for the Background.Color property of the Salary\ncolumn displays salaries in red for employees in department 300 or 400 having a salary\nbetween $50,000 and $100,000, and displays all other salaries in white:\nIf(dept_id IN (300,400) and salary BETWEEN 50000 AND 100000, RGB(255,0,0),\n RGB(255,255,255))\n1.2.2.1 Comparing strings in DataWindow expressions\nWhen you compare strings, the comparison is case-sensitive. Leading blanks are significant,\nbut trailing blanks are not.\nCase-sensitivity examples\nAssume City1 is \"Austin\" and City2 is \"AUSTIN\". Then:\nCity1=City2\nreturns false.\n"}
{"page": 27, "text": "DataWindow Operators and Expressions\nPage 27\nTo compare strings regardless of case, use the Upper or Lower function. For example:\nUpper(City1)=Upper(City2)\nreturns true.\nFor information about these functions, see Using DataWindow expression functions.\nBlanks examples\nAssume City1 is \"Austin\" and City2 is \" Austin \". Then the expression:\nCity1=City2\nreturns false. PowerBuilder removes the trailing blank before making the comparison, but it\ndoes not remove the leading blank.\nTo prevent leading blanks from affecting a comparison, remove them with one of the trim\nfunctions: Trim or LeftTrim.\nFor example:\nTrim(City1)=Trim(City2)\nreturns true.\nTo compare strings when trailing blanks are significant, use an expression such as the\nfollowing to ensure that any trailing blanks are included in the comparison:\nCity1 + \">\" = City2 + \">\"\nFor information about these functions, see Using DataWindow expression functions.\n1.2.3 Logical operators in DataWindow expressions\nYou use logical operators to combine boolean expressions into a larger boolean expression.\nThe result is always true or false:\nTable 1.9: Using expressions with logical operators\nOperator\nMeaning\nExample\nNOT\nLogical negation.\nIf A is true, NOT A is false. If A is false,\nNOT A is true.\nNOT Price = 100\nAND\nLogical and.\nA AND B is true if both are true. A AND B is\nfalse if either is false.\nTax > 3 AND Ship < 5\nOR\nLogical or.\nA OR B is true if either is true or both are\ntrue. A OR B is false only if both are false.\nTax > 3 OR Ship < 5\nWhen you combine two or more boolean expressions to form a new expression, the new\nexpression is either true or false. The following truth table shows how true and false\nexpressions are evaluated to form an expression that is either true or false.\nFor example, if \"My dog has fleas\" is true and \"My hair is brown\" is false, then \"My dog has\nfleas OR my hair is brown\" is true, and \"My dog has fleas AND my hair is brown\" is false:\n"}
{"page": 28, "text": "DataWindow Operators and Expressions\nPage 28\nTable 1.10: Combining expressions with logical operators\nIf one expression has\nthis value\nAnd the logical\noperator is\nAnd if another\nexpression has this\nvalue\nThe resulting\nexpression has this\nvalue\nTRUE\nAND\nTRUE\nTRUE\nTRUE\nAND\nFALSE\nFALSE\nFALSE\nAND\nTRUE\nFALSE\nFALSE\nAND\nFALSE\nFALSE\nTRUE\nOR\nTRUE\nTRUE\nTRUE\nOR\nFALSE\nTRUE\nFALSE\nOR\nTRUE\nTRUE\nFALSE\nOR\nFALSE\nFALSE\nNOT TRUE\nAND\nTRUE\nFALSE\nNOT TRUE\nAND\nFALSE\nFALSE\nNOT FALSE\nAND\nTRUE\nTRUE\nNOT FALSE\nAND\nFALSE\nFALSE\nNOT TRUE\nOR\nTRUE\nTRUE\nNOT TRUE\nOR\nFALSE\nFALSE\nNOT FALSE\nOR\nTRUE\nTRUE\nNOT FALSE\nOR\nFALSE\nTRUE\nIf you use a logical operator with a boolean function that returns null, the term with the\nnull return value is evaluated as false. If you use the NOT logical operator with a boolean\nfunction that returns null, the complete term evaluates to true. For example, NOT gf_boolean\n() evaluates to true when gf_boolean returns null.\n1.2.4 Concatenation operator in DataWindow expressions\nThe concatenation operator joins the contents of two variables of the same type to form a\nlonger value. You can concatenate strings and blobs.\nTo concatenate values, you use the plus sign (+) operator.\nTable 1.11: Using expressions with concatenation operator\nString expression\nValue\n\"over\" + \"stock\"\noverstock\nLname + ', ' + Fname\nIf Lname is Hill and Fname is Craig, then\n\"Hill, Craig\"\nUsing quotes\nYou can use either single or double quotes in string expressions. For example, the\nexpression \"over\" + \"stock\" is equivalent to the expression 'over' + 'stock'.\n"}
{"page": 29, "text": "DataWindow Operators and Expressions\nPage 29\n1.3 Operator precedence in DataWindow expressions\nTo ensure predictable results, operators in DataWindow expressions are evaluated in a\nspecific order of precedence. When operators have the same precedence, they are evaluated\nfrom left to right.\nThe following table lists the operators in descending order of precedence:\nTable 1.12: Operator precedence in DataWindow expressions\nOperator\nPurpose\n( )\nGrouping\n^\nExponentiation\n*, /\nMultiplication and division\n+, -\nAddition and subtraction; string\nconcatenation\nIN,LIKE,BETWEEN\nSQL SELECT statement conditions\n=, >, <, <=, >=, <>\nRelational operators\nAND,OR\nLogical and and logical or\nNOT\nLogical negation\nOverriding the precedence order\nSince expressions in parentheses are evaluated first, to override the precedence order, enclose\nexpressions in parentheses. You can also use parentheses to clarify the order of evaluation.\nWithin each set of parentheses, precedence order applies.\nIn the expression x+y*a+b, y is first multiplied by a (because multiplication has a higher\nprecedence than addition). The result of the multiplication is then added to x and this result is\nthen added to b (because the + operators are evaluated left to right).\nTo force evaluation in a different order, group expressions with parentheses. For example, in\nthe expression x+(y*(a+b)), a+b is evaluated first. The sum a+b is then multiplied by y, and\nthis product is added to x.\n1.4 Evaluating DataWindow expressions in scripts\nIn a script, you use methods, properties, and data expressions for the DataWindow control\nto get information about the state of the DataWindow: the current row, the highlighted row,\nvalues of particular items. You can get other information by accessing properties of the\nDataWindow object, either with the Describe function or with property expressions.\nFor example, if you need to find the current row in a DataWindow, use the DataWindow\ncontrol function, GetRow:\nll_rownum = dw1.GetRow()\nIf you need to find the first row on the current page in a DataWindow, there is no\nDataWindow control function to return this information, but you can find it in the appropriate\nDataWindow object property:\nls_first = dw1.Object.DataWindow.FirstRowOnPage\nls_last = dw1.Object.DataWindow.LastRowOnPage\n"}
{"page": 30, "text": "DataWindow Operators and Expressions\nPage 30\ndw1.Title = \"Rows \" + ls_first + \" to \" + ls_last\nIn some cases, however, information you need might not be available either by using\nDataWindow control functions or by accessing DataWindow object properties.\nDataWindow expression functions sometimes provide information that is available in no\nother way. These functions, which are available within a DataWindow expression, are\ndocumented in Using DataWindow expression functions.\n1.5 Evaluating DataWindow expressions in the Describe function\nThe Describe function provides a way to evaluate DataWindow expressions outside their\nusual context. The Evaluate function, which is used only within Describe, allows you to\nevaluate DataWindow expressions within a script using data in the DataWindow.\nEvaluate has the following syntax:\ndwcontrol.Describe (\"Evaluate ( 'expression' , rownumber ) \" )\nExpression is the expression you want to evaluate and rownumber is the number of the row\nfor which you want to evaluate the expression. The expression can include DataWindow\nexpression functions that cannot be called in a script.\nThis example displays in the title of the DataWindow control the current page for the current\nrow in the DataWindow:\nstring ls_modstring, ls_rownum\nls_rownum = String(dw1.GetRow())\nls_modstring = \"Evaluate('Page()',\" + ls_rownum +\")\"\n// The resulting string, for row 99, would be:\n// Evaluate('Page()', 99)\nParent.Title = &\n\"Current page: \"+ dw1.Describe(ls_modstring)\nThis example returns the display value for the dept_id column for row 5:\ndw1.Describe(\"Evaluate('LookUpDisplay(dept_id)', 5)\")\nExpressions that apply to all rows\nTo evaluate an expression that applies to all rows, specify 0 for the rownumber argument.\nThis example calculates the sum of the salary column in the current DataWindow. It will\nreturn the expression's result or \"!\" if the expression is not valid:\ndw1.Describe(\"Evaluate('Sum(Salary)', 0)\")\nEvaluating user-specified expressions\nIn some types of applications, you might use Evaluate to get the result of an expression the\nuser specifies. For example, users might specify the type of aggregation they want to see.\nThis example evaluates an expression specified in a SingleLineEdit. It applies to all rows:\ndw1.Describe(\"Evaluate('\" + sle_expr.Text + \"', 0)\")\n1.6 Evaluating conditional DataWindow expressions with current\ndata\nQuerying a property for a column\n"}
{"page": 31, "text": "DataWindow Operators and Expressions\nPage 31\nValues for column properties normally apply to all the rows in the column. For example, if\nyou set the Protect property to \"1\" for the Emp_Id column, the user will be unable to modify\nEmp_Id for any of the rows. If you query the property value for this column at runtime, it will\nreturn \"1\".\nWhen the column has a conditional expression\nInstead of a constant, you can assign a conditional expression to some column properties.\nSuch properties are set on a row-by-row basis at runtime.\nFor example, you might wish to allow users to enter an employee id for new rows but protect\nthis value for existing rows. The conditional expression for this column's Protect property\nwould be:\nIf(IsRowNew(), 0, 1)\nWhen you query the Protect property at runtime, the result in this case would be the actual\nexpression (preceded by a default value and a tab character and enclosed in quotes) instead of\nthe property value. The value for the Protect property would be:\n\"0 <tab> If(IsRowNew(), 0, 1)\"\nGetting a property value for a particular row\nTo obtain the actual value of the Protect property for a particular row, you need to strip off\nthe default value and the tab and evaluate the returned expression for the desired row. After\nstripping off the extra information, you can construct an expression for Describe that uses the\nEvaluate function.\nThis example checks whether the value of the Protect property for emp_id is a constant or\na conditional expression. If it is a conditional expression, the script builds a string for the\nDescribe function that uses Evaluate to get the value for of Protect for the current row:\nstring ls_protect, ls_eval\nlong ll_row\nll_row = dw1.GetRow()\nls_protect = dw1.Object.id.Protect\nIF NOT IsNumber(ls_protect) THEN   \n      // Get the expression following the tab (~t)   \n      ls_protect = Right(ls_protect, &      \n         Len(ls_protect) - Pos(ls_protect, \"~t\"))   \n      \n      // Build string for Describe. Include a leading   \n      // quote to match the trailing quote that remains\n         ls_eval = \"Evaluate(~\"\" + ls_protect + \", \" &      \n         + String(ll_row) + \")\"   \n      ls_protect = dw1.Describe(ls_eval)\nEND IF\n// Display result\nst_result.Text = ls_protect\n"}
{"page": 32, "text": "DataWindow Expression Functions\nPage 32\n2 DataWindow Expression Functions\nAbout this chapter\nThis chapter provides syntax, descriptions, and examples of the functions you can use in\nexpressions in the DataWindow painter.\n2.1 Using DataWindow expression functions\nIn the DataWindow painter, you can use DataWindow expression functions in expressions for\ncomputed fields, filters, validation rules, and graphed data, with some exceptions.\nThe dialog boxes in which you define expressions include a list box that lists the available\nfunctions and their arguments. The dialog boxes make it easy to insert a function into the\nexpression.\nFor information about expressions, see DataWindow Operators and Expressions\nReturn values for functions and expressions\nDataWindow expression functions can return the following datatypes:\nDouble\nDecimal\nString\nDateTime\nTime\nWithin an expression, a function can return other datatypes (such as boolean, date, or\ninteger), but the final value of an expression is converted to one of these datatypes.\nRestrictions for aggregate functions\nAn aggregate function is a function (such as Avg, Max, StDev, and Sum) that operates on a\nrange of values in a column. When you use an aggregate function, some restrictions apply.\nYou cannot use an aggregate function:\n\u2022 In a filter\n\u2022 In a validation rule\n\u2022 As an argument for another aggregate function\nWhen you use aggregate functions, they cancel the effect of setting Retrieve Rows As\nNeeded. To do the aggregation, the DataWindow object always retrieves all rows.\nUser-defined functions in PowerBuilder\nYou can include user-defined functions in DataWindow expressions. The datatype of the\nfunction's return value can be any of the following: double, decimal, string, boolean, date,\nDateTime, or time. The function must be defined as a global function so that it is available to\nthe DataWindow object. However, a global function argument of datatype boolean cannot be\nprovided by a DataWindow expression because it does not map to any of the datatypes listed\nin Return values for functions and expressions.\n"}
{"page": 33, "text": "DataWindow Expression Functions\nPage 33\nBuilt-in DataWindow expression functions cannot be overridden. For example, if you create\na global function called Today, it is used instead of the PowerScript system function Today,\nbut it is not used instead of the DataWindow expression function Today.\nFormatting for the locally correct display of numbers\nNo matter what country you are creating objects and developing an application in, you must\nuse U.S. number notation in numbers or number masks in display formats, edit masks, and\nDataWindow expressions. This means that when you specify a number or number mask, use\na comma as the thousands delimiter and period for the decimal place.\nNumbers display appropriately in whatever countries you deploy applications in. At runtime,\nthe locally correct symbols for numbers display (because the international Control Panel\nsettings are used) when numbers are interpreted. For example, in countries where comma\nrepresents the decimal place and period represents thousands, users see numbers in those\nformats at runtime.\nFor information about the locally correct display of dates and day names, see String and\nDayName.\n2.2 Decimal support in DataWindow expressions\nDescription\nPowerBuilder provides a variety of ways to work with decimal values in DataWindow\nexpressions.\nUsage\nThe following arithmetic operators now return a decimal value if both operands have a\ndatatype of decimal:\nTable 2.1: Columns in the Fin_code table\nOperator\nMeaning\nExample\n+\nAddition\nSubtotal + Tax\n-\nSubtraction\nPrice - Discount\n*\nMultiplication\nQuantity*Price\n/\nQuantity*Price\nQuantity*Price\nIf either operand is not a decimal, the returned value is converted to a double datatype. The\nexponentiation operator (^) returns a double\nRelational operators that operate on numeric values, including =, >, <, <>, >=, and <=, can\ntake decimal operands. The precision of the decimal operand is maintained in comparisons.\nThe following functions return a decimal datatype if their arguments are decimals: Sum,\nCumulativeSum, Avg, Median, Count, First, Last, Max, Min, Large, Small, Var, VarP, Mod,\nMode, Abs, Case, If.\nThe following functions return a decimal result instead of a double: CrosstabAvgDec,\nCrosstabMaxDec, CrosstabMinDec, and CrosstabSumDec.\nThe Dec function converts a constant string to a decimal.\n"}
{"page": 34, "text": "DataWindow Expression Functions\nPage 34\nThe Specify Retrieval Arguments dialog box includes the Decimal and Decimal array types.\nSee also\nDec\n2.3 Four examples\nThe following topics provide examples that illustrate using DataWindow expression\nfunctions.\n2.3.1 Example 1: counting null values in a column\nA null value is a marker used to fill a place in a column where data is missing for any reason.\nThe value might not be applicable, or it might be missing or unknown. When a database table\nis created, each column in the table either allows null values or does not allow them. The\ncolumn or set of columns that define the primary key cannot allow null values. Sometimes it\nis useful to know how many null values there are in a particular column.\nWhat you want to do\nSuppose you are working with the Fin_code table in the Enterprise Application Sample\nDatabase. The Fin_code table has three columns:\nTable 2.2: Columns in the Fin_code table\nColumn\nWhat the column is\nAllows null values?\nCode\nUnique financial identifier (primary key)\nNo\nType\nCode type: expense or revenue\nNo\nDescription\nCode description: the department incurring the\nexpense or getting the revenue\nYes\nYou create a DataWindow object using the Code and Description columns. You want to\nknow the number of null values in the Description column.\nHow to do it\nIn the DataWindow object, you create a computed field that uses functions to display the\nnumber of null values in the Description column.\nFor the sake of demonstrating the use of functions, the following computed fields are\ncreated in the Summary band of the DataWindow object (with text objects that tell you what\ninformation each computed field is providing):\nCount(description for all)\ncounts the number of descriptions (that are not null);\nSum(If(IsNull(description), 1, 0))\nreturns a 1 if the description column is null, a 0 if the description column is not null, and then\nadds the total;\nCount(id for all)\n"}
{"page": 35, "text": "DataWindow Expression Functions\nPage 35\ncounts the number of IDs (which is also the number of rows);\nSum(If(IsNull(description), 1, 1))\nadds the number of nulls and not nulls in the description column (which is the total number of\nrows) and should match the result of the\nCount( id for all ) function; and\nIsNull(description)\nevaluates whether the last row in the table has a description that is null. The return value of\nthe IsNull function is true or false.\nWhat you get\nHere is the design for the DataWindow object.\nHere is the DataWindow object showing eight descriptions, three of which are null and five\nof which are not null. The last description for Id=8 is null.\n"}
{"page": 36, "text": "DataWindow Expression Functions\nPage 36\n2.3.2 Example 2: counting active and terminated employees\nExample 1 demonstrates the use of the Sum and Count functions. Sum and Count are two\nexamples of a class of functions called aggregate functions.\nAn aggregate function is a function that operates on a range of values in a column. The\naggregate functions are:\nTable 2.3:\nAvg\nLarge\nMode\nSum\nCount\nLast\nPercent\nVar\nCumulativePercent\nMax\nSmall\nVarP\nCumulativeSum\nMedian\nStDev\n \nFirst\nMin\nStDevP\n \nAbout crosstab functions\nAlthough the crosstab functions (CrosstabAvg, CrosstabAvgDec, CrosstabCount,\nCrosstabMax, CrosstabMaxDec, CrosstabMin, CrosstabMinDec, CrosstabSum, and\nCrosstabSumDec) behave like aggregate functions, they are not included on the list\nbecause they are for crosstabs only and are designed to work in the crosstab matrix.\nA few restrictions apply to the use of aggregate functions. You cannot use an aggregate\nfunction:\n\u2022 In a filter\n\u2022 In a validation rule\n\u2022 As an argument for another aggregate function\nThis example demonstrates the use of the Sum aggregate function.\nWhat you want to do\nUsing the employee table in the PB Demo DB as the data source, you create a DataWindow\nobject using at least the Emp_id and the Status columns. You want the DataWindow object\nto display the number of active employees, terminated employees, and on leave employees in\nthe company.\nHow to do it\nIn the summary band in the workspace, add three computed fields to the DataWindow object\nthat use the Sum and If functions:\nSum(If(status = \"A\", 1, 0))\ncounts the number of Active employees in your company;\nSum(If(status = \"T\", 1, 0))\ncounts the number of Terminated employees in your company;\n"}
{"page": 37, "text": "DataWindow Expression Functions\nPage 37\nSum(If(status = \"L\",1,0))\ncounts the number of On Leave employees in your company.\nBy clicking the Page computed field button, you can also add a Page computed field in the\nfooter band to display the page number and total pages at the bottom of each page of the\nDataWindow object.\nWhat you get\nHere is what the design of the DataWindow object looks like.\nHere is the last page of the DataWindow object, with the total number of active employees,\nterminated employees, and on leave employees in the company displayed.\n"}
{"page": 38, "text": "DataWindow Expression Functions\nPage 38\nIf you want more information\nWhat if you decide that you also want to know the number of active employees, terminated\nemployees, and on leave employees in each department in the company?\nTo display the active employees, terminated employees, and on leave employees in each\ndepartment:\n1.\nSelect Design>Data Source from the menu bar so that you can edit the data source.\n2.\nSelect Design>Select tables from the menu bar and open the Department table in the\nSelect painter workspace, which currently displays the Employee table with the Emp_id\nand Status columns selected.\n3.\nSelect the department_dept_name column to add it to your data source.\n4.\nSelect Rows>Create Group from the menu bar to create a group and group by\ndepartment name.\n5.\nIn the trailer group band, add three additional computed fields:\nSum(If(status = \"A\", 1, 0) for group 1)\ncounts the number of active employees in each department;\nSum(If(status = \"T\", 1, 0) for group 1)\ncounts the number of terminated employees in each department;\nSum(If(status = \"L\", 1, 0) for group 1)\ncounts the number of on leave employees in each department.\nHere is what the design of the grouped DataWindow object looks like.\nHere is the last page of the DataWindow object with the number of active employees,\nterminated employees, and on leave employees in the shipping department displayed,\n"}
{"page": 39, "text": "DataWindow Expression Functions\nPage 39\nfollowed by the total number of active employees, terminated employees, and on leave\nemployees in the company.\n2.3.3 Example 3: creating a row indicator\nThis example demonstrates the use of several functions: Bitmap, Case, CurrentRow, GetRow,\nand RGB.\nWhat you want to do\nUsing the Employee table in the Enterprise Application Sample Database, you create a\nDataWindow object using the Emp_id, Emp_fname, Emp_lname, and Salary columns.\nIn the painter, you want to display a number of items such as the number of the current\nrow, an arrow that is an indicator of the current row, and the salary for an employee with a\nbackground color that depends on what the salary is.\nHow to do it\nIn the workspace, add the following:\n\u2022 A computed field CurrentRow( ), which displays the number of the current row.\n"}
{"page": 40, "text": "DataWindow Expression Functions\nPage 40\n\u2022 A picture object, which is a right-arrow, for which you define an expression for the arrow's\nvisible property:\nIf(CurrentRow()= GetRow(), 1, 0)\nThe expression causes an arrow to display in the current row and no arrow to display in\nother rows.\n\u2022 A computed field using the If, CurrentRow, and GetRow functions:\nIf(CurrentRow() = GetRow(),\"Current\",\"Not current\")\ndisplays the word \"Current\" when the row is the current row and \"Not current\" for all other\nrows.\n\u2022 A computed field (typed on one line) using the Bitmap, CurrentRow, and GetRow\nfunctions:\nBitmap(If(CurrentRow()= GetRow(), \"c:\\sampl\\ex\\code\\indicatr.bmp\", \" \"))\ndisplays an arrow bitmap for the current row and no bitmap for all other rows.\n\u2022 An expression for the Background.Color property of the salary column:\nCase(salary WHEN IS >60000 THEN RGB(192,192,192)\nWHEN IS >40000 THEN RGB(0,255,0) ELSE\nRGB(255,255,255))\nThe expression causes a salary above $40,000 to display in green, a salary above $60,000\nto display in gray, and all other salaries to display in white.\nWhat you get\nHere is what the design of the DataWindow object looks like:\nHere is what the data looks like with the second row current.\n"}
{"page": 41, "text": "DataWindow Expression Functions\nPage 41\nNotice that the number of the current row is 2; the first row and the third row are \"Not\ncurrent\" (and therefore display no bitmap); and the second row, which is the current row,\ndisplays the arrow row indicator.\nOn your screen, the salary in the first row has a green background because it is more than\n$40,000; the salary in the second row has a gray background because it is more than $60,000;\nand the salary in the third row has a white background, which matches the background of the\nDataWindow object.\n2.3.4 Example 4: displaying all data when a column allows nulls\nWhen you create an arithmetic expression that has a null value, the value of the expression\nis null. This makes sense, since null means essentially undefined and the expression is\nundefined, but sometimes this fact can interfere with what you want to display.\nWhat you want to do\nA table in your database has four columns: Id, Corporation, Address1, and Address2. The\nCorporation, Address1, and Address2 columns allow null values. Using this table as the\ndata source, you create a DataWindow object using the four columns. You now want the\nDataWindow object to display both parts of the address, separated by a comma.\nYou create a computed field to concatenate Address1 and Address2 with a comma separator.\nHere is the expression that defines the computed field:\naddress1 + \", \" + address2\nWhen you preview the DataWindow object, if either Address1 or Address2 is null, no part\nof the address displays because the value of the expression is null. To display a part of the\naddress, you need to create a computed field that forces evaluation even if Address2 is null.\nNote that Address2 is assumed to have data only if Address1 has data for a particular row.\n"}
{"page": 42, "text": "DataWindow Expression Functions\nPage 42\nHow to do it\nIn the detail band, create a computed field that uses the If and IsNull functions:\nIf(IsNull(address1 + address2), address1, address1 \n+ \", \" + address2)\nThe computed field says this: if the concatenation of the addresses is null (because address2\nis null), then display address1, and if it is not null, display both parts of the address separated\nby a comma.\nWhat you get\nHere is what the design of the DataWindow object looks like. It includes both the computed\nfield that does not work and the one that does.\nWhen you preview the DataWindow object, notice that the first computed field displays null\nfor ABC Corporation and XYZ Corporation. The second computed field displays the first\npart of the address, which is not null.\n2.4 Alphabetical list of DataWindow expression functions\nThe list of DataWindow expression functions follows in alphabetical order.\n"}
{"page": 43, "text": "DataWindow Expression Functions\nPage 43\n2.4.1 Abs\nDescription\nCalculates the absolute value of a number.\nSyntax\nAbs ( n )\nTable 2.4:\nArgument\nDescription\nn\nThe number for which you want the absolute value\nReturn value\nThe datatype of n. Returns the absolute value of n.\nExamples\nThis expression counts all the product numbers where the absolute value of the product\nnumber is distinct:\nCount(product_number for All DISTINCT Abs (product_number))\nOnly data with an absolute value greater than 5 passes this validation rule:\nAbs(value_set) > 5\nSee also\nCount\nAbs in Section 2.4.1, \u201cAbs\u201d in PowerScript Reference\n2.4.2 ACos\nDescription\nCalculates the arc cosine of an angle.\nSyntax\nACos ( n )\nTable 2.5:\nArgument\nDescription\nn\nThe ratio of the lengths of two sides of a triangle for which you want a\ncorresponding angle (in radians). The ratio must be a value between -1\nand 1.\nReturn value\nDouble. Returns the arc cosine of n if it succeeds.\nExamples\nThis expression returns 0:\n"}
{"page": 44, "text": "DataWindow Expression Functions\nPage 44\nACos(1)\nThis expression returns 3.141593 (rounded to six places):\nACos(-1)\nThis expression returns 1.000000 (rounded to six places):\nACos(.540302)\nSee also\nCos\nASin\nATan\nACos in Part I, \u201cPowerScript Reference\u201d\n2.4.3 Asc\nDescription\nConverts the first character of a string to its Unicode code point. A Unicode code point is the\nnumerical integer value given to a Unicode character.\nSyntax\nAsc ( string )\nTable 2.6:\nArgument\nDescription\nstring\nThe string for which you want the code point value of the first character\nReturn value\nUnsigned integer. Returns the code point value of the first character in string.\nUsage\nUse Asc to test the case of a character or manipulate text and letters.\nTo find out the case of a character, you can check whether its code point value is within the\nappropriate range.\nExamples\nThis expression for a computed field returns the string in code_id if the code point value of\nthe first character in code_id is A (65):\nIf (Asc(code_id) = 65, code_id, \"Not a valid code\")\nThis expression for a computed field checks the case of the first character of lname and if it is\nlowercase, makes it uppercase:\nIF (Asc(lname) > 64 AND Asc(lname) < 91, lname, WordCap(lname))\nSee also\n"}
{"page": 45, "text": "DataWindow Expression Functions\nPage 45\nChar\nWordCap\nAsc in Section 2.4.31, \u201cAsc\u201d in PowerScript Reference\n2.4.4 AscA\nDescription\nConverts the first character of a string to its ASCII integer value.\nSyntax\nAscA ( string )\nTable 2.7:\nArgument\nDescription\nstring\nThe string for which you want the ASCII value of the first character\nReturn value\nInteger. Returns the ASCII value of the first character in string.\nUsage\nUse AscA to test the case of a character or manipulate text and letters.\nTo find out the case of a character, you can check whether its ASCII value is within the\nappropriate range.\nExamples\nThis expression for a computed field returns the string in code_id if the ASCII value of the\nfirst character in code_id is A (65):\nIf (AscA(code_id) = 65, code_id, \"Not a valid code\")\nThis expression for a computed field checks the case of the first character of lname and if it is\nlowercase, makes it uppercase:\nIF (AscA(lname) > 64 AND AscA(lname) < 91, lname, WordCap(lname))\nSee also\nCharA\nWordCap\nAscA in Part I, \u201cPowerScript Reference\u201d\n2.4.5 ASin\nDescription\nCalculates the arc sine of an angle.\nSyntax\nASin ( n )\n"}
{"page": 46, "text": "DataWindow Expression Functions\nPage 46\nTable 2.8:\nArgument\nDescription\nn\nThe ratio of the lengths of two sides of a triangle for which you want a\ncorresponding angle (in radians). The ratio must be a value between -1\nand 1.\nReturn value\nDouble. Returns the arc sine of n if it succeeds.\nExamples\nThis expression returns .999998 (rounded to six places):\nASin(.84147)\nThis expression returns .520311 (rounded to six places):\nASin(LogTen (Pi (1)))\nThis expression returns 0:\nASin(0)\nSee also\nSin\nACos\nATan\nPi\nASin in Section 2.4.33, \u201cASin\u201d in PowerScript Reference\n2.4.6 ATan\nDescription\nCalculates the arc tangent of an angle.\nSyntax\nATan ( n )\nTable 2.9:\nArgument\nDescription\nn\nThe ratio of the lengths of two sides of a triangle for which you want a\ncorresponding angle (in radians)\nReturn value\nDouble. Returns the arc tangent of n if it succeeds.\nExamples\nThis expression returns 0:\n"}
{"page": 47, "text": "DataWindow Expression Functions\nPage 47\nATan(0)\nThis expression returns 1.000 (rounded to three places):\nATan(1.55741)\nThis expression returns 1.267267 (rounded to six places):\nATan(Pi(1))\nSee also\nTan\nASin\nACos\nATan in Section 2.4.39, \u201cATan\u201d in PowerScript Reference\n2.4.7 Avg\nDescription\nCalculates the average of the values of the column.\nSyntax\nAvg ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } )\nTable 2.10:\nArgument\nDescription\ncolumn\nThe column for which you want the average of the data values. Column\ncan be the column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nFOR range\n(optional)\nThe data that will be included in the average. For most presentation\nstyles, values for range are:\n\u2022 ALL -- (Default) The average of all values in column.\n\u2022 GROUP n -- The average of values in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The average of the values in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The average of all values in column in\nthe crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The average of values in column in the range\nspecified for the Rows option.\n"}
{"page": 48, "text": "DataWindow Expression Functions\nPage 48\nArgument\nDescription\n\u2022 OBJECT -- (OLE objects only) The average of values in column in the\nrange specified for the Rows option.\nDISTINCT\n(optional)\nCauses Avg to consider only the distinct values in column when\ncalculating the average. For a value of column, the first row found with\nthe value is used and other rows that have the same value are ignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nThe numeric datatype of the column. Returns the average of the values of the rows in range.\nUsage\nIf you specify range, Avg returns the average value of column in range. If you specify\nDISTINCT, Avg returns the average value of the distinct values in column, or if you specify\nexpresn, the average of column for each distinct value of expresn.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the\nRange property), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nIn calculating the average, null values are ignored.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the average of the values in the column named salary:\nAvg(salary)\nThis expression returns the average of the values in group 1 in the column named salary:\nAvg(salary for group 1)\nThis expression returns the average of the values in column 5 on the current page:\nAvg(#5 for page)\n"}
{"page": 49, "text": "DataWindow Expression Functions\nPage 49\nThis computed field returns Above Average if the average salary for the page is greater than\nthe average salary:\nIf(Avg(salary for page) > Avg(salary), \"Above Average\", \" \")\nThis expression for a graph value sets the data to the average value of the sale_price column:\nAvg(sale_price)\nThis expression for a graph value sets the data value to the average value of the sale_price\ncolumn for the entire graph:\nAvg(sale_price for graph)\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the average of the order amount for the distinct order\nnumbers:\nAvg(order_amt for all DISTINCT order_nbr)\nSee also\nMedian\nMode\n2.4.8 Bitmap\nDescription\nDisplays the specified image file.\nFor computed fields only\nYou can use the Bitmap function only in a computed field.\nSyntax\nBitmap ( string )\nTable 2.11:\nArgument\nDescription\nstring\nA column containing the image files, a string containing the name of an\nimage file (a BMP, GIF, JPEG, RLE, or WMF file), or an expression that\nevaluates to a string containing the name of an image file\nReturn value\nThe special datatype bitmap, which cannot be used in any other function.\nUsage\nUse Bitmap to dynamically display an image file in a computed field. When string is a\ncolumn containing image files, a different image can display for each row.\nExamples\nThese examples are all expressions for a computed field.\n"}
{"page": 50, "text": "DataWindow Expression Functions\nPage 50\nThis expression dynamically displays the image file contained in the column named\nemployees:\nBitmap(employees)\nIf the employees column is column 3, this next expression gives the same result as the\nexpression above:\nBitmap(#3)\nThis expression displays the tools.bmp file:\nBitmap(\"TOOLS.BMP\")\nIf the image file has no file extension, the method will check whether the file is a valid image\nfile (a BMP, GIF, JPEG, RLE, or WMF file). For example, this expression displays the\nperson file if it is a valid image file.\nBitmap(\"E:\\images\\person\")\nThis expression tests the value in the column named password and then uses the value to\ndetermine which image to display:\nBitmap(If(password = \"y\", \"yes.bmp\", \"no.bmp\"))\nSee also\nExample 3: creating a row indicator\n2.4.9 Case\nDescription\nTests the values of a column or expression and returns values based on the results of the test.\nSyntax\nCase ( column WHEN value1 THEN result1 { WHEN value2 THEN result2 \n   { ... } } { ELSE resultelse } ) \nTable 2.12:\nArgument\nDescription\ncolumn\nThe column or expression whose values you want to test. Column can\nbe the column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. Column is compared to each valuen.\nWHEN\n(optional)\nIntroduces a value-result pair. At least one WHEN is required.\nvaluen\nOne or more values that you want to compare to values of column. A\nvalue can be:\n\u2022 A single value\n\u2022 A list of values separated by commas (for example, 2, 4, 6, 8)\n\u2022 A TO clause (for example, 1 TO 20)\n"}
{"page": 51, "text": "DataWindow Expression Functions\nPage 51\nArgument\nDescription\n\u2022 IS followed by a relational operator and comparison value (for\nexample, IS>5)\n\u2022 Any combination of the above with an implied OR between\nexpressions (for example, 1,3,5,7,9,27 TO 33, IS>42)\nTHEN\nIntroduces the result to be returned when column matches the\ncorresponding valuen.\nresultn\nAn expression whose value is returned by Case for the corresponding\nvaluen. All resultn values must have the same datatype.\nELSE (optional)\nSpecifies that for any values of column that do not match the values of\nvaluen already specified, Case returns resultelse.\nresultelse\nAn expression whose value is returned by Case when the value of column\ndoes not match any WHEN valuen expression.\nReturn value\nThe datatype of resultn. Returns the result you specify in resultn.\nUsage\nIf more than one WHEN clause matches column, Case returns the result of the first matching\none.\nExamples\nThis expression for the Background.Color property of a Salary column returns values that\nrepresent red when an employee's salary is greater than $70,000, green when an employee's\nsalary is greater than $50,000, and blue otherwise:\nCase(salary WHEN IS >70000 THEN RGB(255,0,0) WHEN IS\n>50000 THEN RGB(0,255,0) ELSE RGB(0,0,255))\nThis expression for the Background.Color property of an employee Id column returns red for\nId 101, gray for Id 102, and black for all other Id numbers:\nCase(emp_id WHEN 101 THEN 255 WHEN 102 THEN RGB(100,100,100) ELSE 0)\nThis expression for the Format property of the Marital_status column returns Single, Married,\nand Unknown based on the data value of the Marital_status column for an employee:\nCase(marital_status WHEN 'S'THEN 'Single' WHEN 'M' THEN\n'Married' ELSE 'Unknown')\nSee also\nExample 3: creating a row indicator\nIf\n2.4.10 Ceiling\nDescription\nRetrieves the smallest whole number that is greater than or equal to a specified limit.\n"}
{"page": 52, "text": "DataWindow Expression Functions\nPage 52\nSyntax\nCeiling ( n )\nTable 2.13:\nArgument\nDescription\nn\nThe number for which you want the smallest whole number that is greater\nthan or equal to it\nReturn value\nThe datatype of n. Returns the smallest whole number that is greater than or equal to n.\nExamples\nThese expressions both return -4:\nCeiling(-4.2)\nCeiling(-4.8)\nThis expression for a computed field returns ERROR if the value in discount_amt is greater\nthan the smallest whole number that is greater than or equal to discount_factor times price.\nOtherwise, it returns discount_amt:\nIf(discount_amt <= Ceiling(discount_factor * price),\nString(discount_amt), \"ERROR\")\nTo pass this validation rule, the value in discount_amt must be less than or equal to the\nsmallest whole number that is greater than or equal to discount_factor times price:\ndiscount_amt <= Ceiling(discount_factor * price)\nSee also\nInt\nRound\nTruncate\nCeiling in Section 2.4.60, \u201cCeiling\u201d in PowerScript Reference\n2.4.11 Char\nDescription\nConverts an integer to a Unicode character.\nSyntax\nChar ( n )\nTable 2.14:\nArgument\nDescription\nn\nThe integer you want to convert to a character\nReturn value\n"}
{"page": 53, "text": "DataWindow Expression Functions\nPage 53\nString. Returns the character whose code point value is n.\nExamples\nThis expression returns the escape character:\nChar(27)\nSee also\nAsc\nChar in Section 2.4.63, \u201cChar\u201d in PowerScript Reference\n2.4.12 CharA\nDescription\nConverts an integer to an ASCII character.\nSyntax\nCharA ( n )\nTable 2.15:\nArgument\nDescription\nn\nThe integer you want to convert to a character\nReturn value\nString. Returns the character whose ASCII value is n.\nExamples\nThis expression returns the escape character:\nCharA(27)\nSee also\nAscA\nCharA in Section 2.4.64, \u201cCharA\u201d in PowerScript Reference\n2.4.13 Cos\nDescription\nCalculates the cosine of an angle.\nSyntax\nCos ( n )\nTable 2.16:\nArgument\nDescription\nn\nThe angle (in radians) for which you want the cosine\nReturn value\n"}
{"page": 54, "text": "DataWindow Expression Functions\nPage 54\nDouble. Returns the cosine of n.\nExamples\nThis expression returns 1:\nCos(0)\nThis expression returns .540302:\nCos(1)\nThis expression returns -1:\nCos(Pi(1))\nSee also\nPi\nSin\nTan\nCos in Section 2.4.96, \u201cCos\u201d in PowerScript Reference\n2.4.14 Count\nDescription\nCalculates the total number of rows in the specified column.\nSyntax\nCount ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } )\nTable 2.17:\nArgument\nDescription\ncolumn\nThe column for which you want the number of rows. Column can be\nthe column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn.\nFOR range\n(optional)\nThe data that will be included in the count. For most presentation styles,\nvalues for range are:\n\u2022 ALL -- (Default) The count of all rows in column.\n\u2022 GROUP n -- The count of rows in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The count of the rows in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The count of all rows in column in the\ncrosstab.\n"}
{"page": 55, "text": "DataWindow Expression Functions\nPage 55\nArgument\nDescription\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The count of values in column in the range\nspecified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The count of values in column in the\nrange specified for the Rows option.\nDISTINCT\n(optional)\nCauses Count to consider only the distinct values in column when\ncounting the rows. For a value of column, the first row found with the\nvalue is used and other rows that have the same value are ignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nUsage\nIf you specify range, Count determines the number of rows in column in range. If you specify\nDISTINCT, Count returns the number of the distinct rows displayed in column, or if you\nspecify expresn, the number of rows displayed in column where the value of expresn is\ndistinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the Range\nproperty), and the aggregation function uses that range.\nSettings for Rows include the following:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nNull values in the column are ignored and are not included in the count.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the number of rows in the column named emp_id that are not null:\nCount(emp_id)\nThis expression returns the number of rows in the column named emp_id of group 1 that are\nnot null:\n"}
{"page": 56, "text": "DataWindow Expression Functions\nPage 56\nCount(emp_id for group 1)\nThis expression returns the number of dept_ids that are distinct:\nCount(dept_id for all DISTINCT)\nThis expression returns the number of regions with distinct products:\nCount(region_id for all DISTINCT Lower(product_id))\nThis expression returns the number of rows in column 3 on the page that are not null:\nCount(#3 for page)\nSee also\nExample 1: counting null values in a column\n2.4.15 CrosstabAvg\nDescription\nCalculates the average of the values returned by an expression in the values list of the\ncrosstab. When the crosstab definition has more than one column, CrosstabAvg can also\ncalculate averages of the expression's values for groups of column values.\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabAvg ( n {, column, groupvalue } )\nTable 2.18:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\naverage of the returned values. The crosstab expression must be numeric.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog box for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\nDouble. Returns the average of the crosstab values returned by expression n for all the\ncolumn values or, optionally, for a subset of column values. To return a decimal datatype, use\nCrosstabAvgDec.\nUsage\n"}
{"page": 57, "text": "DataWindow Expression Functions\nPage 57\nThis function is meaningful only for the average of the values of the expression in a row in\nthe crosstab. This means you can use it only in the detail band, not in a header, trailer, or\nsummary band.\nNull values are ignored and are not included in the average.\nHow functions in a crosstab are used\nWhen a crosstab is generated from your definition, the appropriate computed fields are\nautomatically created using the Crosstab functions. To understand the functions, consider\na crosstab with two columns (year and quarter), a row (product), and the values expression\nAvg(amount for crosstab).\nThe Crosstab Definition dialog box looks like this.\nWhen you define the crosstab described above, the painter automatically creates the\nappropriate computed fields. A computed field named avg_amount returns the average of the\nquarterly figures for each year. Its expression is:\nCrosstabAvg(1, 2, \"@year\")\nA second computed field named grand_avg_amount computes the average of all the amounts\nin the row. Its expression is:\nCrosstabAvg(1)\nOther computed fields in the summary band use the Avg function to display the average of\nthe values in the amount column, the yearly averages, and the final average.\nThe crosstab in the Design view looks like this.\n"}
{"page": 58, "text": "DataWindow Expression Functions\nPage 58\nEach row in the crosstab (after adjusting the column widths) has cells for the amounts in\nthe quarters, a repeating cell for the yearly average, and a grand average. The crosstab also\ndisplays averages of the amounts for all the financial codes in the quarters in the summary\nband at the bottom.\nWhat the function arguments mean\nWhen the crosstab definition has more than one column, you can specify column qualifiers\nfor any of the Crosstab functions, so that the crosstab displays calculations for groups of\ncolumn values. As illustrated previously, when year and quarter are the columns in the\ncrosstab, the expression for the computed field is:\nCrosstabAvg(1, 2, \"@year\")\nThe value 2 refers to the quarter column (the second column in the Crosstab Definition\ndialog) and \"@year\" specifies grouping values from the year column (meaning the function\n"}
{"page": 59, "text": "DataWindow Expression Functions\nPage 59\nwill average values for the quarters within each year). The value 1 refers to the crosstab-\nvalues expression that will be averaged. In the resulting crosstab, the computed field repeats\nin each row after the cells for the quarters within each year.\nTips for defining crosstabs\nWhen you define a crosstab with more than one column, the order of the columns in the\nColumns box of the Crosstab Definition dialog box governs the way the columns are\ngrouped. To end up with the most effective expressions, make the column that contains the\ngrouping values (for example, year or department) the first column in the Columns box and\nthe column that contains the values to be grouped (for example, quarter or employee) second.\nTo display calculations for groups of rows, define groups as you would for other\nDataWindow presentation styles and define computed fields in the group header or footer\nusing noncrosstab aggregation functions, such as Avg, Sum, or Max.\nReviewing the expressions\nTo review the expressions defined for the crosstab values, open the Crosstab\nDefinition dialog box (select Design>Crosstab from the menubar).\nExamples\nThe first two examples use the crosstab expressions shown below:\nCount(emp_id for crosstab),Sum(salary for crosstab)\nThis expression for a computed field in the crosstab returns the average of the employee\ncounts (the first expression):\nCrosstabAvg(1)\nThis expression for a computed field in the crosstab returns the average of the salary totals\n(the second expression):\nCrosstabAvg(2)\nConsider a crosstab that has two columns (region and city) and the values expression\nAvg(sales for crosstab). This expression for a computed field in the detail band computes the\naverage sales over all the cities in a region:\nCrosstabAvg(1, 2, \"@region\")\nThis expression for another computed field in the same crosstab computes the grand average\nover all the cities:\nCrosstabAvg(1)\nSee also\nCrosstabAvgDec\nCrosstabCount\nCrosstabMax\nCrosstabMin\nCrosstabSum\n"}
{"page": 60, "text": "DataWindow Expression Functions\nPage 60\n2.4.16 CrosstabAvgDec\nDescription\nCalculates the average of the values returned by an expression in the values list of the\ncrosstab and returns a result with the decimal datatype. When the crosstab definition has\nmore than one column, CrosstabAvgDec can also calculate averages of the expression's\nvalues for groups of column values.\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabAvgDec ( n {, column, groupvalue } )\nTable 2.19:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\naverage of the returned values. The crosstab expression must be numeric.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog box for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\nDecimal. Returns the average of the crosstab values returned by expression n for all the\ncolumn values or, optionally, for a subset of column values.\nUsage\nUse this function instead of CrosstabAvg when you want to return a decimal datatype instead\nof a double datatype. For more information, see CrosstabAvg.\nSee also\nCrosstabMaxDec\nCrosstabMinDec\nCrosstabSumDec\nDecimal support in DataWindow expressions\n2.4.17 CrosstabCount\nDescription\nCounts the number of values returned by an expression in the values list of the crosstab.\nWhen the crosstab definition has more than one column, CrosstabCount can also count the\nnumber of the expression's values for groups of column values.\n"}
{"page": 61, "text": "DataWindow Expression Functions\nPage 61\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabCount ( n {, column, groupvalue } )\nTable 2.20:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\ntotal number of returned values.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\nLong. Returns the number of values returned by expression n for all the column values or,\noptionally, for a subset of column values.\nUsage\nThis function is meaningful only for the count of the values of the expression in a row in\nthe crosstab. This means you can use it only in the detail band, not in a header, trailer, or\nsummary band.\nNull values are ignored and are not included in the count.\nFor more information about restricting the calculation to groups of values when the crosstab\ndefinition has more than one column, see Usage for CrosstabAvg.\nReviewing the expressions\nTo review the expressions defined for the crosstab values, open the Crosstab\nDefinition dialog box (select Design>Crosstab from the menubar).\nExamples\nThese examples all use the crosstab-values expressions shown below:\nCount(emp_id for crosstab), Sum(salary for crosstab)\nThis expression for a computed field in the crosstab returns the count of the employee counts\n(the first expression):\nCrosstabCount(1)\nThis expression for a computed field in the crosstab returns the count of the salary totals (the\nsecond expression):\n"}
{"page": 62, "text": "DataWindow Expression Functions\nPage 62\nCrosstabCount(2)\nThe next two examples use a crosstab with two columns (year and quarter), a row (product),\nand the values expression Avg(sales for crosstab).\nThis expression for a computed field returns the count of the sales for each year:\nCrosstabCount(1, 2, \"@year\")\nThis expression for a computed field returns the count of all the sales in the row:\nCrosstabCount(1)\nFor an example illustrating how the painter automatically defines a crosstab by creating\ncomputed fields using the Crosstab functions, see CrosstabAvg.\nSee also\nCrosstabAvg\nCrosstabMax\nCrosstabMin\nCrosstabSum\n2.4.18 CrosstabMax\nDescription\nCalculates the maximum value returned by an expression in the values list of the crosstab.\nWhen the crosstab definition has more than one column, CrosstabMax can also calculate the\nmaximum of the expression's values for groups of column values.\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabMax ( n {, column, groupvalue } )\nTable 2.21:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\nmaximum returned value. The expression's datatype must be numeric.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog box for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\n"}
{"page": 63, "text": "DataWindow Expression Functions\nPage 63\nDouble. Returns the maximum value returned by expression n for all the column values or,\noptionally, for a subset of column values. To return a decimal datatype, use CrosstabMaxDec.\nUsage\nThis function is meaningful only for the maximum of the values of the expression in a row\nin the crosstab. This means you can use it only in the detail band, not in a header, trailer, or\nsummary band.\nNull values are ignored and are not included in the comparison.\nFor more information about restricting the calculation to groups of values when the crosstab\ndefinition has more than one column, see Usage for CrosstabAvg.\nReviewing the expressions\nTo review the expressions defined for the crosstab values, open the Crosstab\nDefinition dialog box (select Design>Crosstab from the menubar).\nExamples\nThese examples all use the crosstab-values expressions shown below:\nCount(emp_id for crosstab), Sum(salary for crosstab)\nThis expression for a computed field in the crosstab returns the maximum of the employee\ncounts (the first expression):\nCrosstabMax(1)\nThis expression for a computed field in the crosstab returns the maximum of the salary totals\n(the second expression):\nCrosstabMax(2)\nThe next two examples use a crosstab with two columns (year and quarter), a row (product),\nand a values expression Avg(sales for crosstab).\nThis expression for a computed field returns the largest of the quarterly average sales for each\nyear:\nCrosstabMax(1, 2, \"@year\")\nThis expression for a computed field returns the maximum of all the average sales in the row:\nCrosstabMax(1)\nFor an example illustrating how the painter automatically defines a crosstab by creating\ncomputed fields using the Crosstab functions, see CrosstabAvg.\nSee also\nCrosstabAvg\nCrosstabCount\nCrosstabMaxDec\nCrosstabMin\nCrosstabSum\n"}
{"page": 64, "text": "DataWindow Expression Functions\nPage 64\n2.4.19 CrosstabMaxDec\nDescription\nCalculates the maximum value returned by an expression in the values list of the crosstab\nand returns a result with the decimal datatype. When the crosstab definition has more than\none column, CrosstabMaxDec can also calculate the maximum of the expression's values for\ngroups of column values.\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabMaxDec ( n {, column, groupvalue } )\nTable 2.22:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\nmaximum returned value. The expression's datatype must be numeric.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog box for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\nDecimal. Returns the maximum value returned by expression n for all the column values or,\noptionally, for a subset of column values.\nUsage\nUse this function instead of CrosstabMax when you want to return a decimal datatype instead\nof a double datatype. For more information, see CrosstabMax.\nSee also\nCrosstabAvgDec\nCrosstabMinDec\nCrosstabSumDec\nDecimal support in DataWindow expressions\n2.4.20 CrosstabMin\nDescription\nCalculates the minimum value returned by an expression in the values list of the crosstab.\nWhen the crosstab definition has more than one column, CrosstabMin can also calculate the\nminimum of the expression's values for groups of column values.\n"}
{"page": 65, "text": "DataWindow Expression Functions\nPage 65\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabMin ( n {, column, groupvalue } )\nTable 2.23:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\nminimum return value. The expression's datatype must be numeric.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog box for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\nDouble. Returns the minimum value returned by expression n for all the column values or,\noptionally, for a subset of column values. To return a decimal datatype, use CrosstabMinDec.\nUsage\nThis function is meaningful only for the minimum of the values of the expression in a row\nin the crosstab. This means you can use it only in the detail band, not in a header, trailer, or\nsummary band.\nNull values are ignored and are not included in the comparison.\nFor more information about restricting the calculation to groups of values when the crosstab\ndefinition has more than one column, see Usage for CrosstabAvg.\nReviewing the expressions\nTo review the expressions defined for the crosstab values, open the Crosstab\nDefinition dialog box (select Design>Crosstab from the menubar).\nExamples\nThese examples all use the crosstab-values expressions shown below:\nCount(emp_id for crosstab), Sum(salary for crosstab)\nThis expression for a computed field in the crosstab returns the minimum of the employee\ncounts (the first expression):\nCrosstabMin(1)\nThis expression for a computed field in the crosstab returns the minimum of the salary totals\n(the second expression):\n"}
{"page": 66, "text": "DataWindow Expression Functions\nPage 66\nCrosstabMin(2)\nThe next two examples use a crosstab with two columns (year and quarter), a row (product),\nand the values expression Avg(sales for crosstab).\nThis expression for a computed field returns the smallest of the quarterly average sales for\neach year:\nCrosstabMin(1, 2, \"@year\")\nThis expression for a computed field returns the minimum of all the average sales in the row:\nCrosstabMin(1)\nFor an example illustrating how the painter automatically defines a crosstab by creating\ncomputed fields using the crosstab functions, see CrosstabAvg.\nSee also\nCrosstabAvg\nCrosstabCount\nCrosstabMax\nCrosstabMinDec\nCrosstabSum\n2.4.21 CrosstabMinDec\nDescription\nCalculates the minimum value returned by an expression in the values list of the crosstab\nand returns a result with the decimal datatype. When the crosstab definition has more than\none column, CrosstabMinDec can also calculate the minimum of the expression's values for\ngroups of column values.\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabMinDec ( n {, column, groupvalue } )\nTable 2.24:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\nminimum return value. The expression's datatype must be numeric.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog box for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\n"}
{"page": 67, "text": "DataWindow Expression Functions\nPage 67\nArgument\nDescription\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\nDecimal. Returns the minimum value returned by expression n for all the column values or,\noptionally, for a subset of column values.\nUsage\nUse this function instead of CrosstabMin when you want to return a decimal datatype instead\nof a double datatype. For more information, see CrosstabMin.\nSee also\nCrosstabAvgDec\nCrosstabMaxDec\nCrosstabSumDec\nDecimal support in DataWindow expressions\n2.4.22 CrosstabSum\nDescription\nCalculates the sum of the values returned by an expression in the values list of the crosstab.\nWhen the crosstab definition has more than one column, CrosstabSum can also calculate the\nsum of the expression's values for groups of column values.\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabSum ( n {, column, groupvalue } )\nTable 2.25:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\nsum of the returned values. The expression's datatype must be numeric.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog box for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\n"}
{"page": 68, "text": "DataWindow Expression Functions\nPage 68\nDouble. Returns the total of the values returned by expression n for all the column values or,\noptionally, for a subset of column values. To return a decimal datatype, use CrosstabSumDec.\nUsage\nThis function is meaningful only for the sum of the values of the expression in a row in\nthe crosstab. This means you can use it only in the detail band, not in a header, trailer, or\nsummary band.\nNull values are ignored and are not included in the sum.\nFor more information about restricting the calculation to groups of values when the crosstab\ndefinition has more than one column, see Usage for CrosstabAvg.\nReviewing the expressions\nTo review the expressions defined for the crosstab values, open the Crosstab\nDefinition dialog box (select Design>Crosstab from the menubar).\nExamples\nThese examples all use the crosstab-values expressions shown below:\nCount(emp_id for crosstab),Sum(salary for crosstab)\nThis expression for a computed field in the crosstab returns the sum of the employee counts\n(the first expression):\nCrosstabSum(1)\nThis expression for a computed field in the crosstab returns the sum of the salary totals (the\nsecond expression):\nCrosstabSum(2)\nThe next two examples use a crosstab with two columns (year and quarter), a row (product),\nand the values expression Avg(sales for crosstab).\nThis expression for a computed field returns the sum of the quarterly average sales for each\nyear:\nCrosstabSum(1, 2, \"@year\")\nThis expression for a computed field returns the sum of all the average sales in the row:\nCrosstabSum(1)\nFor an example illustrating how the painter automatically defines a crosstab by creating\ncomputed fields using the Crosstab functions, see CrosstabSum.\nSee also\nCrosstabAvg\nCrosstabCount\nCrosstabMax\nCrosstabMin\nCrosstabSumDec\n"}
{"page": 69, "text": "DataWindow Expression Functions\nPage 69\n2.4.23 CrosstabSumDec\nDescription\nCalculates the sum of the values returned by an expression in the values list of the crosstab\nand returns a result with the decimal datatype. When the crosstab definition has more than\none column, CrosstabSumDec can also calculate the sum of the expression's values for\ngroups of column values.\nFor crosstabs only\nYou can use this function only in a crosstab DataWindow object.\nSyntax\nCrosstabSumDec ( n {, column, groupvalue } )\nTable 2.26:\nArgument\nDescription\nn\nThe number of the crosstab-values expression for which you want the\nsum of the returned values. The expression's datatype must be numeric.\ncolumn\n(optional)\nThe number of the crosstab column as it is listed in the Columns box\nof the Crosstab Definition dialog box for which you want intermediate\ncalculations.\ngroupvalue\n(optional)\nA string whose value controls the grouping for the calculation.\nGroupvalue is usually a value from another column in the crosstab. To\nspecify the current column value in a dynamic crosstab, rather than a\nspecific value, specify @ plus the column name as a quoted string.\nReturn value\nDecimal. Returns the total of the values returned by expression n for all the column values or,\noptionally, for a subset of column values.\nUsage\nUse this function instead of CrosstabSum when you want to return a decimal datatype instead\nof a double datatype. For more information, see CrosstabSum.\nSee also\nCrosstabAvgDec\nCrosstabMaxDec\nCrosstabMinDec\nDecimal support in DataWindow expressions\n2.4.24 CumulativePercent\nDescription\nCalculates the total value of the rows up to and including the current row in the specified\ncolumn as a percentage of the total value of the column (a running percentage).\n"}
{"page": 70, "text": "DataWindow Expression Functions\nPage 70\nSyntax\nCumulativePercent ( column { FOR range } )\nTable 2.27:\nArgument\nDescription\ncolumn\nThe column for which you want the cumulative value of the rows up\nto and including the current row as a percentage of the total value of\nthe column for range. Column can be the column name or the column\nnumber preceded by a pound sign (#). Column can also be an expression\nthat includes a reference to the column. The datatype of column must be\nnumeric.\nFOR range\n(optional)\nThe data that will be included in the cumulative percentage. For most\npresentation styles, values for range are:\n\u2022 ALL -- (Default) The cumulative percentage of all rows in column.\n\u2022 GROUP n -- The cumulative percentage of rows in column in the\nspecified group. Specify the keyword GROUP followed by the group\nnumber: for example, GROUP 1.\n\u2022 PAGE -- The cumulative percentage of the rows in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The cumulative percentage of all rows\nin column in the crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The cumulative percentage of values in\ncolumn in the range specified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The cumulative percentage of values in\ncolumn in the range specified for the Rows option.\nReturn value\nLong. Returns the cumulative percentage value.\nUsage\nIf you specify range, CumulativePercent restarts the accumulation at the start of the range.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the Range\nproperty), and the aggregation function uses that range.\nSettings for Rows include the following:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n"}
{"page": 71, "text": "DataWindow Expression Functions\nPage 71\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nIn calculating the percentage, null values are ignored.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the running percentage for the values that are not null in the column\nnamed salary:\nCumulativePercent(salary)\nThis expression returns the running percentage for the column named salary for the values in\ngroup 1 that are not null:\nCumulativePercent(salary for group 1)\nThis expression entered in the Value box on the Data property page for a graph returns the\nrunning percentage for the salary column for the values in the graph that are not null:\nCumulativePercent(salary for graph)\nThis expression in a crosstab computed field returns the running percentage for the salary\ncolumn for the values in the crosstab that are not null:\nCumulativePercent(salary for crosstab)\nSee also\nPercent\nCumulativeSum\n2.4.25 CumulativeSum\nDescription\nCalculates the total value of the rows up to and including the current row in the specified\ncolumn (a running total).\nSyntax\nCumulativeSum ( column { FOR range } )\nTable 2.28:\nArgument\nDescription\ncolumn\nThe column for which you want the cumulative total value of the rows\nup to and including the current row for group. Column can be the column\nname or the column number preceded by a pound sign (#). Column\n"}
{"page": 72, "text": "DataWindow Expression Functions\nPage 72\nArgument\nDescription\ncan also be an expression that includes a reference to the column. The\ndatatype of column must be numeric.\nFOR range\n(optional)\nThe data that will be included in the cumulative sum. For most\npresentation styles, values for range are:\n\u2022 ALL -- (Default) The cumulative sum of all values in column.\n\u2022 GROUP n -- The cumulative sum of values in column in the specified\ngroup. Specify the keyword GROUP followed by the group number:\nfor example, GROUP 1.\n\u2022 PAGE -- The cumulative sum of the values in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The cumulative sum of all values in\ncolumn in the crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The cumulative sum of values in column in\nthe range specified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The cumulative sum of values in\ncolumn in the range specified for the Rows option.\nReturn value\nThe appropriate numeric datatype. Returns the cumulative total value of the rows.\nUsage\nIf you specify range, CumulativeSum restarts the accumulation at the start of the range.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the\nRange property), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nIn calculating the sum, null values are ignored.\nExamples\nThis expression returns the running total for the values that are not null in the column named\nsalary:\n"}
{"page": 73, "text": "DataWindow Expression Functions\nPage 73\nCumulativeSum(salary)\nThis expression returns the running total for the values that are not null in the column named\nsalary in group 1:\nCumulativeSum(salary for group 1)\nThis expression entered in the Value box on the Data property page for a graph returns the\nrunning total for the salary column for the values in the graph that are not null:\nCumulativeSum(salary for graph)\nThis expression in a crosstab computed field returns the running total for the salary column\nfor the values in the crosstab that are not null:\nCumulativeSum(salary for crosstab)\nSee also\nCumulativePercent\n2.4.26 CurrentRow\nDescription\nReports the number of the current row (the row with focus).\nSyntax\nCurrentRow ( )\nReturn value\nLong. Returns the number of the row if it succeeds and 0 if no row is current.\nWhat row is current\nThe current row is not always a row displayed on the screen. For example, if the\ncursor is on row 7 column 2 and the user uses the scroll bar to scroll to row 50, the\ncurrent row remains row 7 unless the user clicks row 50.\nExamples\nThis expression in a computed field returns the number of the current row:\nCurrentRow()\nThis expression for a computed control displays an arrow bitmap as an indicator for the row\nwith focus and displays no bitmap for rows not having focus. As the user moves from row to\nrow, an arrow marks where the user is:\nBitmap(If(CurrentRow() = GetRow(),\"arrow.bmp\",\"\"))\nAlternatively, this expression for the Visible property of an arrow picture control makes the\narrow bitmap visible for the row with focus and invisible for rows not having focus. As the\nuser moves from row to row, an arrow marks where the user is:\nIf(CurrentRow() = GetRow(), 1, 0)\nSee also\n"}
{"page": 74, "text": "DataWindow Expression Functions\nPage 74\nExample 3: creating a row indicator\nGetRow\n2.4.27 Date\nDescription\nConverts a string whose value is a valid date to a value of datatype date.\nSyntax\nDate ( string )\nTable 2.29:\nArgument\nDescription\nstring\nA string containing a valid date (such as Jan 1, 2004, or 12-31-99) that\nyou want returned as a date\nReturn value\nDate. Returns the date in string as a date. If string does not contain a valid date, Date returns\nnull.\nRegional Settings\nTo make sure you get correct return values for the year, you must verify that yyyy\nis the Short Date Style for year in the Regional Settings of the user's Control Panel.\nYour program can check this with the RegistryGet function.\nIf the setting is not correct, you can ask the user to change it manually or to have the\napplication change it (by calling the RegistrySet function). The user might need to\nreboot after the setting is changed.\nUsage\nThe value of the string must be a valid date.\nValid dates\nValid dates can include any combination of day (1-31), month (1-12 or the name or\nabbreviation of a month), and year (two or four digits). Leading zeros are optional for month\nand day. If the month is a name or an abbreviation, it can come before or after the day; if it is\na number, it must be in the month location specified in the Windows control panel. A 4-digit\nnumber is assumed to be a year.\nIf the year is two digits, the assumption of century follows this rule: for years between 00 and\n49, the first two digits are assumed to be 20; for years between 50 and 99, the first two digits\nare assumed to be 19. If your data includes dates before 1950, such as birth dates, always\nspecify a four-digit year to ensure the correct interpretation.\nThe function handles years from 1000 to 3000 inclusive.\nAn expression has a more limited set of datatypes than the functions that can be part of\nthe expression. Although the Date function returns a date value, the whole expression is\npromoted to a DateTime value. Therefore, if your expression consists of a single Date\n"}
{"page": 75, "text": "DataWindow Expression Functions\nPage 75\nfunction, it will appear that Date returns the wrong datatype. To display the date without the\ntime, choose an appropriate display format. (See Using DataWindow expression functions.)\nExamples\nThese expressions all return the date datatype for July 4, 2004 when the default location of\nthe month in Regional Settings is center:\nDate(\"2004/07/04\")\nDate(\"2004 July 4\")\nDate(\"July 4, 2004\")\nSee also\nIsDate\nDate in Section 2.4.106, \u201cDate\u201d in PowerScript Reference\n2.4.28 DateTime\nDescription\nCombines a date and a time value into a DateTime value.\nSyntax\nDateTime ( date {, time } )\nTable 2.30:\nArgument\nDescription\ndate\nA valid date (such as Jan 1, 2005, or 12-31-99) or a blob variable whose\nfirst value is a date that you want included in the value returned by\nDateTime.\ntime (optional)\nA valid time (such as 8am or 10:25:23:456799) or a blob variable whose\nfirst value is a time that you want included in the value returned by\nDateTime. If you include a time, only the hour portion is required. If\nyou omit the minutes, seconds, or microseconds, they are assumed to be\nzeros. If you omit am or pm, the hour is determined according to the 24-\nhour clock.\nReturn value\nDateTime. Returns a DateTime value based on the values in date and optionally time. If time\nis omitted, DateTime uses 00:00:00.000000 (midnight).\nUsage\nTo display microseconds in a time, the display format for the field must include\nmicroseconds.\nFor information on valid dates, see Date.\nExamples\nThis expression returns the values in the order_date and order_time columns as a DateTime\nvalue that can be used to update the database:\nDateTime(Order_Date, Order_Time)\n"}
{"page": 76, "text": "DataWindow Expression Functions\nPage 76\nUsing this expression for a computed field displays 11/11/01 11:11:00:\nDateTime(11/11/01, 11:11)\nSee also\nDate\nTime\nDateTime in Section 2.4.107, \u201cDateTime\u201d in PowerScript Reference\n2.4.29 Day\nDescription\nObtains the day of the month in a date (or datetime) value.\nSyntax\nDay ( date | datetime )\nTable 2.31:\nArgument\nDescription\ndate or datetime\nThe date or datetime for which you want the day\nReturn value\nInteger. Returns an integer (1-31) representing the day of the month in date.\nExamples\nThis expression returns 31:\nDay(2020-01-31)\nThis expression returns the day of the month in the start_date column:\nDay(start_date)\nThe following expressions return the day of the month for today:\nDay(today())\nDay(datetime(today(),now()))\nSee also\nDate\nIsDate\nMonth\nYear\nDay in Section 2.4.108, \u201cDay\u201d in PowerScript Reference\n2.4.30 DayName\nDescription\n"}
{"page": 77, "text": "DataWindow Expression Functions\nPage 77\nGets the day of the week in a date (or datetime) value and returns the weekday's name.\nSyntax\nDayName ( date | datetime )\nTable 2.32:\nArgument\nDescription\ndate or datetime\nThe date or datetime for which you want the name of the day\nReturn value\nString. Returns a string whose value is the name of the weekday (Sunday, Monday, and so\non) for date.\nUsage\nDayName returns a name in the language of the deployment files available on the machine\nwhere the application is run. If you have installed localized deployment files in the\ndevelopment environment or on a user's machine, then on that machine the name returned by\nDayName will be in the language of the localized files.\nFor information about localized deployment files, see Section 8.1, \u201cInternationalizing an\nApplication\u201d in Application Techniques.\nExamples\nThis expression for a computed field returns Okay if the day in date_signed is not Sunday:\nIf(DayName(date_signed) <> \"Sunday\", \"Okay\", \"Invalid Date\")\nTo pass this validation rule, the day of today must not be Sunday:\nDayName(datetime(today(),now())) <> \"Sunday\"\nOr\nDayName(today()) <> \"Sunday\" //today returns datetime if it is a DataWindow\n function\nSee also\nDate\nDay\nDayNumber\nIsDate\nDayName in Section 2.4.109, \u201cDayName\u201d in PowerScript Reference\n2.4.31 DayNumber\nDescription\nGets the day of the week of a date value and returns the number of the weekday.\nSyntax\nDayNumber ( date )\n"}
{"page": 78, "text": "DataWindow Expression Functions\nPage 78\nTable 2.33:\nArgument\nDescription\ndate\nThe date from which you want the number of the day of the week\nReturn value\nInteger. Returns an integer (1-7) representing the day of the week of date. Sunday is day 1,\nMonday is day 2, and so on.\nExamples\nThis expression for a computed field returns Wrong Day if the date in start_date is not a\nSunday or a Monday:\nIf(DayNumber(start_date) > 2, \"Okay\", \"Wrong Day\")\nThis expression for a computed field returns Wrong Day if the date in end_date is not a\nSaturday or a Sunday:\nIf(DayNumber(end_date) > 1 and DayNumber(end_date) \n< 7, \"Okay\", \"Wrong Day\")\nThis validation rule for the column end_date ensures that the day is not a Saturday or Sunday:\nDayNumber(end_date) >1 and DayNumber(end_date) < 7\nSee also\nDate\nDay\nDayName\nIsDate\nDayNumber in Section 2.4.110, \u201cDayNumber\u201d in PowerScript Reference\n2.4.32 DaysAfter\nDescription\nGets the number of days one date occurs after another.\nSyntax\nDaysAfter ( date1, date2 )\nTable 2.34:\nArgument\nDescription\ndate1\nA date value that is the start date of the interval being measured\ndate2\nA date value that is the end date of the interval\nReturn value\nLong. Returns a long containing the number of days date2 occurs after date1. If date2 occurs\nbefore date1, DaysAfter returns a negative number.\nExamples\n"}
{"page": 79, "text": "DataWindow Expression Functions\nPage 79\nThis expression returns 4:\nDaysAfter(2005-12-20, 2005-12-24)\nThis expression returns -4:\nDaysAfter(2005-12-24, 2005-12-20)\nThis expression returns 0:\nDaysAfter(2005-12-24, 2005-12-24)\nThis expression returns 5:\nDaysAfter(2004-12-29, 2005-01-03)\nSee also\nDate\nSecondsAfter\nDaysAfter in Section 2.4.111, \u201cDaysAfter\u201d in PowerScript Reference\n2.4.33 Dec\nDescription\nConverts the value of a string to a decimal.\nSyntax\nDec ( string )\nTable 2.35:\nArgument\nDescription\nstring\nThe string you want returned as a decimal\nReturn value\nDecimal. Returns the contents of string as a decimal if it succeeds and 0 if string is not a\nnumber.\nUsage\nThe decimal datatype supports up to 28 digits.\nYou can also append the letter D in upper or lowercase to identify a number as a decimal\nconstant in DataWindow expressions. For example, 2.0d and 123.456789012345678901D are\ntreated as decimals.\nExamples\nThis expression returns the string 24.3 as a decimal datatype:\nDec(\"24.3\")\nThis expression for a computed field returns \"Not a valid score\" if the string in the score\ncolumn does not contain a number. The expression checks whether the Dec function returns\n0, which means it failed to convert the value:\n"}
{"page": 80, "text": "DataWindow Expression Functions\nPage 80\nIf ( Dec(score) <> 0, score, \"Not a valid score\")\nThis expression returns 0:\nDec(\"3ABC\")    // 3ABC is not a number\nThis validation rule checks that the value in the column the user entered is greater than\n1999.99:\nDec(GetText()) > 1999.99\nThis validation rule for the column named score insures that score contains a string:\nDec(score) <> 0\nSee also\nDec in Section 2.4.114, \u201cDec\u201d in PowerScript Reference\nDecimal support in DataWindow expressions\n2.4.34 Describe\nDescription\nReports the values of properties of a DataWindow object and controls within the object. Each\ncolumn and graphic control in the DataWindow object has a set of properties, which are listed\nin Controls in a DataWindow and their properties. You specify one or more properties as a\nstring and Describe returns the values of the properties.\nSyntax\nDescribe ( propertylist )\nTable 2.36:\nArgument\nDescription\npropertylist\nA string whose value is a blank-separated list of properties or Evaluate\nfunctions. For a list of valid properties, see Controls in a DataWindow\nand their properties.\nReturn value\nString. Returns a string that includes a value for each property or Evaluate function. A new\nline character (~n) separates the value of each item in propertylist.\nIf propertylist contains an invalid item, Describe returns an exclamation point (!) for that item\nand ignores the rest of propertylist. Describe returns a question mark (?) if there is no value\nfor a property.\nUsage\nSpecifying the values for propertylist can be complex. For information and examples, see the\nDescribe method for the DataWindow control.\nExamples\nThis expression for a computed field in the header band of a DataWindow object displays the\nDataWindow object's SELECT statement:\n"}
{"page": 81, "text": "DataWindow Expression Functions\nPage 81\nDescribe(\"DataWindow.Table.Select\")\nSee also\nDescribe\n2.4.35 Exp\nDescription\nRaises e to the specified power.\nSyntax\nExp ( n )\nTable 2.37:\nArgument\nDescription\nn\nThe power to which you want to raise e (2.71828)\nReturn value\nDouble. Returns e raised to the power n.\nExamples\nThis expression returns 7.38905609893065:\nExp(2)\nSee also\nLog\nLogTen\nExp in Section 2.4.159, \u201cExp\u201d in PowerScript Reference\n2.4.36 Fact\nDescription\nGets the factorial of a number.\nSyntax\nFact ( n )\nTable 2.38:\nArgument\nDescription\nn\nThe number for which you want the factorial\nReturn value\nDouble. Returns the factorial of n.\nExamples\nThis expression returns 24:\nFact(4)\n"}
{"page": 82, "text": "DataWindow Expression Functions\nPage 82\nBoth these expressions return 1:\nFact(1)\nFact(0)\nSee also\nFact in Section 2.4.167, \u201cFact\u201d in PowerScript Reference\n2.4.37 Fill\nDescription\nBuilds a string of the specified length by repeating the specified characters until the result\nstring is long enough.\nSyntax\nFill ( chars, n )\nTable 2.39:\nArgument\nDescription\nchars\nA string whose value will be repeated to fill the return string\nn\nA long whose value is the number of characters in the string you want\nreturned\nReturn value\nString. Returns a string n characters long filled with repetitions of the characters in the\nargument chars. If the argument chars has more than n characters, the first n characters of\nchars are used to fill the return string. If the argument chars has fewer than n characters, the\ncharacters in chars are repeated until the return string has n characters.\nUsage\nFill is used to create a line or other special effect. For example, asterisks repeated in a printed\nreport can fill an amount line, or hyphens can simulate a total line in a screen display.\nExamples\nThis expression returns a string containing 35 asterisks:\nFill(\"*\", 35)\nThis expression returns the string -+-+-+-:\nFill(\"-+\", 7)\nThis expression returns 10 tildes (~):\nFill(\"~~\", 10)\nSee also\nFillA\nSpace\nFill in Section 2.4.183, \u201cFill\u201d in PowerScript Reference\n"}
{"page": 83, "text": "DataWindow Expression Functions\nPage 83\n2.4.38 FillA\nDescription\nBuilds a string of the specified length in bytes by repeating the specified characters until the\nresult string is long enough.\nSyntax\nFillA ( chars, n )\nTable 2.40:\nArgument\nDescription\nchars\nA string whose value will be repeated to fill the return string\nn\nA long whose value is the number of bytes in the string you want\nreturned\nReturn value\nString. Returns a string n bytes long filled with repetitions of the characters in the argument\nchars. If the argument chars has more than n bytes, the first n bytes of chars are used to fill\nthe return string. If the argument chars has fewer than n bytes, the characters in chars are\nrepeated until the return string has n bytes.\nUsage\nFillA replaces the functionality that Fill had in DBCS environments in PowerBuilder 9. In\nSBCS environments, Fill and FillA return the same results.\nSee also\nFill\nFillA in Section 2.4.184, \u201cFillA\u201d in PowerScript Reference\n2.4.39 First\nDescription\nReports the value in the first row in the specified column.\nSyntax\nFirst ( column { FOR range  { DISTINCT { expresn  {, expres2 {, ... } } } } } )\nTable 2.41:\nArgument\nDescription\ncolumn\nThe column for which you want the value of the first row. Column\ncan be a column name or a column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn.\nFOR range\n(optional)\nThe data that will be included when the value in the first row is found.\nValues for range depend on the presentation style. See the Usage section\nfor more information.\n"}
{"page": 84, "text": "DataWindow Expression Functions\nPage 84\nArgument\nDescription\nDISTINCT\n(optional)\nCauses First to consider only the distinct values in column when\ndetermining the first value. For a value of column, the first row found\nwith the value is used and other rows that have the same value are\nignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nThe datatype of the column. Returns the value in the first row of column. If you specify\nrange, First returns the value of the first row in column in range.\nUsage\nIf you specify range, First determines the value of the first row in column in range. If you\nspecify DISTINCT, First returns the first distinct value in column, or if you specify expresn,\nthe first distinct value in column where the value of expresn is distinct.\nFor most presentation styles, values for range are:\n\u2022 ALL -- (Default) The value in the first of all rows in column.\n\u2022 GROUP n -- The value in the first of rows in column in the specified group. Specify the\nkeyword GROUP followed by the group number: for example, GROUP 1.\n\u2022 PAGE -- The value in the first of the rows in column on a page.\nFor Crosstabs, specify CROSSTAB for range to indicate the first of all rows in column in the\ncrosstab.\nFor Graphs specify GRAPH and for OLE objects specify OBJECT for range, to indicate the\nvalue in the first row in column in the range specified for the Rows option.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the\nRange property), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in the\npainter. To do the aggregation, a DataWindow object always retrieves all rows.\n"}
{"page": 85, "text": "DataWindow Expression Functions\nPage 85\nExamples\nThis expression returns the first value in column 3 on the page:\nFirst(#3 for page)\nThis expression returns the first distinct value in the column named dept_id in group 2:\nFirst(dept_id for group 2 DISTINCT)\nThis expression returns the first value in the column named dept_id in group 2:\nFirst(dept_id for group 2)\nSee also\nLast\n2.4.40 FontHeight\nDescription\nAllows you to find the height of the font for a column or computed field. This function takes\nthe column name as an argument. Use this function to set the minimum height to the size of\nthe font.\nSyntax\nFontHeight ( column )\nTable 2.42:\nArgument\nDescription\ncolumn\nThe column for which you want to find the font height. Column can be a\ncolumn name or a column number preceded by a pound sign (#). Column\ncan also be an expression that includes a reference to the column.\nReturn value\nLong. Returns the height of the font for the column:\n56 -- font size: 9\n64 -- font size: 10\n72 -- font size: 11\n76 -- font size: 12\nExample\ndw_1.object.fname.Height = \"0~tFontHeight(fname)\"\n2.4.41 GetPaintDC\nDescription\nReturns the GDI context to which to draw.\nSyntax\nGetPaintDC ( )\n"}
{"page": 86, "text": "DataWindow Expression Functions\nPage 86\nReturn value\nUnsignedLong.\nUsage\nThe clip region of the GDI context is guaranteed to be the same as the rectangle defined by\nGetPaintRectHeight, GetPaintRectWidth, GetPaintRectX, and GetPaintRectY.\nYou can also use the GetClipBox GDI function. You can compute the bounds inside the\nglobal rendering function itself.\nThe GetPaintDC expression is only valid in the context of the Paint expression function.\nExamples\nThis example draws a cube with the text of the column emp_lname.\nPaint\n(\n     MyDrawWPFCubeText\n     (\n          GetPaintDC(),\n          GetPaintRectX(),\n          GetPaintRectY(),\n          GetPaintRectWidth(),\n          GetPaintRectHeight(),\n          emp_lname,\n          GetRow()\n     )\n)\nSee also\nGetPaintRectHeight\nGetPaintRectWidth\nGetPaintRectX\nGetPaintRectY\nPaint\n2.4.42 GetPaintRectHeight\nDescription\nReturns the bounds of the computed field and the device context is clipped within those\nbounds. This expression is only valid in the context of the Paint expression function.\nSyntax\nGetPaintRectHeight ( )\nReturn value\nInteger. Returns the height bounds for the computed field.\nSee also\nGetPaintDC\nGetPaintRectWidth\n"}
{"page": 87, "text": "DataWindow Expression Functions\nPage 87\nGetPaintRectX\nGetPaintRectY\nPaint\n2.4.43 GetPaintRectWidth\nDescription\nReturns the bounds of the computed field and the device context is clipped within those\nbounds. This expression is only valid in the context of the Paint expression function.\nSyntax\nGetPaintRectWidth ( )\nReturn value\nInteger. Returns the width bounds for the computed field.\nSee also\nGetPaintDC\nGetPaintRectHeight\nGetPaintRectX\nGetPaintRectY\nPaint\n2.4.44 GetPaintRectX\nDescription\nReturns the bounds of the computed field and the device context is clipped within those\nbounds. This expression is only valid in the context of the Paint expression function.\nSyntax\nGetPaintRectX ( )\nReturn value\nInteger. Returns the X bound for the computed field.\nSee also\nGetPaintDC\nGetPaintRectHeight\nGetPaintRectWidth\nGetPaintRectY\nPaint\n2.4.45 GetPaintRectY\nDescription\n"}
{"page": 88, "text": "DataWindow Expression Functions\nPage 88\nReturns the bounds of the computed field and the device context is clipped within those\nbounds. This expression is only valid in the context of the Paint expression function.\nSyntax\nGetPaintRectY ( )\nReturn value\nInteger. Returns the Y bound for the computed field.\nSee also\nGetPaintDC\nGetPaintRectHeight\nGetPaintRectWidth\nGetPaintRectX\n2.4.46 GetRow\nDescription\nReports the number of a row associated with a band in a DataWindow object.\nSyntax\nGetRow ( )\nReturn value\nLong. Returns the number of a row if it succeeds, 0 if no data has been retrieved or added,\nand -1 if an error occurs. Where you call GetRow determines what row it returns, as follows:\nTable 2.43:\nIf the control in the DataWindow object is\nin this band\nGetRow returns\nHeader\nFirst row on the page\nGroup header\nFirst row in the group\nDetail\nThe row in which the expression occurs\nGroup trailer\nLast row in the group\nSummary\nLast row in the DataWindow object\nFooter\nLast row on the page\nExamples\nThis expression for a computed field in the detail band displays the number of each row:\nGetRow()\nThis expression for a computed field in the header band checks to see if there is data. It\nreturns the number of the first row on the page if there is data, and otherwise returns No Data:\nIf(GetRow()= 0, \"No Data\", String(GetRow()))\nSee also\n"}
{"page": 89, "text": "DataWindow Expression Functions\nPage 89\nExample 3: creating a row indicator\nCurrentRow\nGetRow\n2.4.47 GetText\nDescription\nObtains the text that a user has entered in a column.\nSyntax\nGetText ( )\nReturn value\nString. Returns the text the user has entered in the current column.\nUsage\nUse GetText in validation rules to compare what the user has entered to application-defined\ncriteria before it is accepted into the data buffer.\nExamples\nThis validation rule checks that the value the user entered in the column is less than 100:\nInteger(GetText()) < 100\nSee also\nGetText\n2.4.48 Hour\nDescription\nObtains the hour in a time value. The hour is based on a 24-hour clock.\nSyntax\nHour ( time )\nTable 2.44:\nArgument\nDescription\ntime\nThe time value from which you want the hour\nReturn value\nInteger. Returns an integer (00-23) containing the hour portion of time.\nExamples\nThis expression returns the current hour:\nHour(Now())\nThis expression returns 19:\nHour(19:01:31)\n"}
{"page": 90, "text": "DataWindow Expression Functions\nPage 90\nSee also\nMinute\nNow\nSecond\nHour in Section 2.4.375, \u201cHour\u201d in PowerScript Reference\n2.4.49 If\nDescription\nEvaluates a condition and returns a value based on that condition.\nSyntax\nIf ( boolean, truevalue, falsevalue )\nTable 2.45:\nArgument\nDescription\nboolean\nA boolean expression that evaluates to true or false.\ntruevalue\nThe value you want returned if the boolean expression is true. The value\ncan be a string or numeric value.\nfalsevalue\nThe value you want returned if the boolean expression is false. The value\ncan be a string or numeric value.\nReturn value\nThe datatype of truevalue or falsevalue. Returns truevalue if boolean is true and falsevalue if\nit is false. Returns null if an error occurs.\nExamples\nThis expression returns Boss if salary is over $100,000 and Employee if salary is less than or\nequal to $100,000:\nIf(salary > 100000, \"Boss\", \"Employee\")\nThis expression returns Boss if salary is over $100,000, Supervisor if salary is between\n$12,000 and $100,000, and Clerk if salary is less than or equal to $12,000:\nIf(salary > 100000, \"Boss\", If(salary > 12000, \"Supervisor\", \"Clerk\"))\nIn this example of a validation rule, the value the user should enter in the commission\ncolumn depends on the price. If price is greater than or equal to 1000, then the commission\nis between .10 and .20. If price is less than 1000, then the commission must be between .04\nand .09. The validation rule is:\n(Number(GetText()) >= If(price >=1000, .10, .04)) AND\n(Number(GetText()) <= If(price >= 1000, .20, .09))\nThe accompanying error message expression might be:\n\"Price is \" \n+  If(price >= 1000, \"greater than or equal to\", \"less than\") \n+ \" 1000. Commission must be between \" \n+  If(price >= 1000, \".10\", \".04\") \n"}
{"page": 91, "text": "DataWindow Expression Functions\nPage 91\n+ \" and \" \n+  If(price >= 1000, \".20.\", \".09.\")\nSee also\nExample 1: counting null values in a column\nExample 2: counting active and terminated employees\nExample 3: creating a row indicator\nExample 4: displaying all data when a column allows nulls\nCase\n2.4.50 Int\nDescription\nGets the largest whole number less than or equal to a number.\nSyntax\nInt ( n )\nTable 2.46:\nArgument\nDescription\nn\nThe number for which you want the largest whole number that is less\nthan or equal to it\nReturn value\nThe datatype of n. Returns the largest whole number less than or equal to n.\nExamples\nThese expressions return 3.0:\nInt(3.2)\nInt(3.8)\nThese expressions return -4.0:\nInt(-3.2)\nInt(-3.8)\nSee also\nCeiling\nInteger\nRound\nTruncate\nInt in Section 2.4.436, \u201cInt\u201d in PowerScript Reference\n2.4.51 Integer\nDescription\n"}
{"page": 92, "text": "DataWindow Expression Functions\nPage 92\nConverts the value of a string to an integer.\nSyntax\nInteger ( string )\nTable 2.47:\nArgument\nDescription\nstring\nThe string you want returned as an integer\nReturn value\nInteger. Returns the contents of string as an integer if it succeeds and 0 if string is not a\nnumber.\nExamples\nThis expression converts the string 24 to an integer:\nInteger(\"24\")\nThis expression for a computed field returns \"Not a valid age\" if age does not contain a\nnumber. The expression checks whether the Integer function returns 0, which means it failed\nto convert the value:\nIf (Integer(age) <> 0, age, \"Not a valid age\")\nThis expression returns 0:\nInteger(\"3ABC\")  // 3ABC is not a number\nThis validation rule checks that the value in the column the user entered is less than 100:\nInteger(GetText()) < 100\nThis validation rule for the column named age insures that age contains a string:\nInteger(age) <> 0\nSee also\nIsNumber\nInteger in Section 2.4.437, \u201cInteger\u201d in PowerScript Reference\n2.4.52 IsDate\nDescription\nTests whether a string value is a valid date.\nSyntax\nIsDate ( datevalue )\nTable 2.48:\nArgument\nDescription\ndatevalue\nA string whose value you want to test to determine whether it is a valid\ndate\n"}
{"page": 93, "text": "DataWindow Expression Functions\nPage 93\nReturn value\nBoolean. Returns true if datevalue is a valid date and false if it is not.\nExamples\nThis expression returns true:\nIsDate(\"Jan 1, 99\")\nThis expression returns false:\nIsDate(\"Jan 32, 2005\")\nThis expression for a computed field returns a day number or 0. If the date_received column\ncontains a valid date, the expression returns the number of the day in date_received in the\ncomputed field, and otherwise returns 0:\nIf(IsDate(String(date_received)), DayNumber(date_received), 0)\nSee also\nIsDate in Section 2.4.451, \u201cIsDate\u201d in PowerScript Reference\n2.4.53 IsExpanded\nDescription\nTests whether a node in a TreeView DataWindow with the specified TreeView level and that\nincludes the specified row is expanded.\nSyntax\nIsExpanded(long row, long level)\nTable 2.49:\nArgument\nDescription\nrow\nThe number of the row that belongs to the node\nlevel\nThe TreeView level of the node\nReturn value\nReturns true if the group is expanded and false otherwise.\nUsage\nA TreeView DataWindow has several TreeView level bands that can be expanded and\ncollapsed. You can use the IsExpanded function to test whether or not a node in a TreeView\nDataWindow is expanded.\nExamples\nThis expression returns true if the node that contains row 3 at TreeView level 2 is expanded:\nIsExpanded(3,2)\n2.4.54 IsNull\nDescription\n"}
{"page": 94, "text": "DataWindow Expression Functions\nPage 94\nReports whether the value of a column or expression is null.\nSyntax\nIsNull ( any )\nTable 2.50:\nArgument\nDescription\nany\nA column or expression that you want to test to determine whether its\nvalue is null\nReturn value\nBoolean. Returns true if any is null and false if it is not.\nUsage\nUse IsNull to test whether a user-entered value or a value retrieved from the database is null.\nExamples\nThis expression returns true if either a or b is null:\nIsNull(a + b)\nThis expression returns true if the value in the salary column is null:\nIsNull(salary)\nThis expression returns true if the value the user has entered is null:\nIsNull(GetText())\nSee also\nExample 1: counting null values in a column\nExample 4: displaying all data when a column allows nulls\nIsNull in Section 2.4.457, \u201cIsNull\u201d in PowerScript Reference\n2.4.55 IsNumber\nDescription\nReports whether the value of a string is a number.\nSyntax\nIsNumber ( string )\nTable 2.51:\nArgument\nDescription\nstring\nA string whose value you want to test to determine whether it is a valid\nnumber\nReturn value\n"}
{"page": 95, "text": "DataWindow Expression Functions\nPage 95\nBoolean. Returns true if string is a valid number and false if it is not.\nExamples\nThis expression returns true:\nIsNumber(\"32.65\")\nThis expression returns false:\nIsNumber(\"A16\")\nThis expression for a computed field returns \"Not a valid age\" if age does not contain a\nnumber:\nIf(IsNumber(age), age, \"Not a valid age\")\nTo pass this validation rule, Age_nbr must be a number:\nIsNumber(Age_nbr) = true\nSee also\nInteger\nIsNumber in Section 2.4.458, \u201cIsNumber\u201d in PowerScript Reference\n2.4.56 IsRowModified\nDescription\nReports whether the row has been modified.\nSyntax\nIsRowModified ( )\nReturn value\nBoolean. Returns true if the row has been modified and false if it has not.\nUsage\nIn a DataWindow object, when you use IsRowModified in bands other than the detail\nband, it reports on a row in the detail band. See GetRow for a table specifying which row is\nassociated with each band for reporting purposes.\nExamples\nThis expression in a computed field in the detail area displays true or false to indicate\nwhether each row has been modified:\nIsRowModified()\nThis expression defined in the Properties view for the Color property of the computed field\ndisplays the text (true) in red if the user has modified any value in the row:\nIf(IsRowModified(), 255, 0)\nSee also\nGetRow\n"}
{"page": 96, "text": "DataWindow Expression Functions\nPage 96\n2.4.57 IsRowNew\nDescription\nReports whether the row has been newly inserted.\nSyntax\nIsRowNew ( )\nReturn value\nBoolean. Returns true if the row is new and false if it was retrieved from the database.\nUsage\nIn a DataWindow object, when you call IsRowNew in bands other than the detail band,\nit reports on a row in the detail band. See GetRow for a table specifying which row is\nassociated with each band for reporting purposes.\nExamples\nThis expression defined in the Properties view for the Protect property of a column prevents\nthe user from modifying the column unless the row has been newly inserted:\nIf(IsRowNew(), 0, 1)\nSee also\nGetRow\nGetItemStatus\n2.4.58 IsSelected\nDescription\nDetermines whether the row is selected. A selected row is highlighted using reverse video.\nSyntax\nIsSelected ( )\nReturn value\nBoolean. Returns true if the row is selected and false if it is not selected.\nUsage\nWhen you use IsSelected in bands other than the detail band, it reports on a row in the detail\nband. See GetRow for a table specifying which row is associated with each band for reporting\npurposes.\nExamples\nThis expression for a computed field in the detail area displays a bitmap if the row is\nselected:\nBitmap(If(IsSelected(), \"beach.bmp\", \"\"))\nThis example allows the DataWindow object to display a salary total for all the selected rows.\nThe expression for a computed field in the detail band returns the salary only when the row\n"}
{"page": 97, "text": "DataWindow Expression Functions\nPage 97\nis selected so that another computed field in the summary band can add up all the selected\nsalaries.\nThe expression for cf_selected_salary (the computed field in the detail band) is:\nIf(IsSelected(), salary, 0)\nThe expression for the computed field in the summary band is:\nSum(cf_selected_salary for all)\nSee also\nGetRow\nIsSelected\n2.4.59 IsTime\nDescription\nReports whether the value of a string is a valid time value.\nSyntax\nIsTime ( timevalue )\nTable 2.52:\nArgument\nDescription\ntimevalue\nA string whose value you want to test to determine whether it is a valid\ntime\nReturn value\nBoolean. Returns true if timevalue is a valid time and false if it is not.\nExamples\nThis expression returns true:\nIsTime(\"8:00:00 am\")\nThis expression returns false:\nIsTime(\"25:00\")\nTo pass this validation rule, the value in start_time must be a time:\nIsTime(start_time)\nSee also\nIsTime in Section 2.4.464, \u201cIsTime\u201d in PowerScript Reference\n2.4.60 Large\nDescription\nFinds a large value at a specified ranking in a column (for example, third- largest, fifth-\nlargest) and returns the value of another column or expression based on the result.\nSyntax\n"}
{"page": 98, "text": "DataWindow Expression Functions\nPage 98\nLarge ( returnexp, column, ntop { FOR range { DISTINCT { expres1 \n   {, expres2 {, ... } } } } } )\nTable 2.53:\nArgument\nDescription\nreturnexp\nThe value you want returned when the large value is found. Returnexp\nincludes a reference to a column, but not necessarily the column that is\nbeing evaluated for the largest value, so that a value is returned from the\nsame row that contains the large value.\ncolumn\nThe column that contains the large value you are searching for. Column\ncan be a column name or a column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nntop\nThe ranking of the large value in relation to the column's largest value.\nFor example, when ntop is 2, Large finds the second-largest value.\nFOR range\n(optional)\nThe data that will be included when the largest value is found. For most\npresentation styles, values for range are:\n\u2022 ALL -- (Default) The largest of all values in column.\n\u2022 GROUP n -- The largest of values in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The largest of the values in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The largest of all values in column in\nthe crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The largest of values in column in the range\nspecified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The largest of values in column in the\nrange specified for the Rows option.\nDISTINCT\n(optional)\nCauses Large to consider only the distinct values in column when\ndetermining the large value. For a value of column, the first row found\nwith the value is used and other rows that have the same value are\nignored.\nexpresn\n(optional)\nOne or more expressions that you need to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nThe datatype of returnexp. Returns the ntop-largest value if it succeeds and -1 if an error\noccurs.\n"}
{"page": 99, "text": "DataWindow Expression Functions\nPage 99\nUsage\nIf you specify range, Large returns the value in returnexp when the value in column is the\nntop-largest value in range. If you specify DISTINCT, Large returns returnexp when the\nvalue in column is the ntop-largest value of the distinct values in column, or if you specify\nexpresn, the ntop-largest for each distinct value of expresn.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the Range\nproperty), and the aggregation function uses that range. Settings for Rows are as follows:\n\u2022 For the Graph or OLE presentation style, Rows is always All\n\u2022 For Graph controls, Rows can be All, Page, or Group\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies\nMax might be faster\nIf you do not need a return value from another column and you want to find the\nlargest value (ntop = 1), use Max; it is faster.\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThese expressions return the names of the salespersons with the three largest sales (sum_sales\nis the sum of the sales for each salesperson) in group 2, which might be the salesregion\ngroup. Note that sum_sales contains the values being compared, but Large returns a value in\nthe name column:\nLarge(name, sum_sales, 1 for group 2)\nLarge(name, sum_sales, 2 for group 2)\nLarge(name, sum_sales, 3 for group 2)\nThis example reports the salesperson with the third-largest sales, considering only the first\nentry for each person:\nLarge(name, sum_sales, 3 for all DISTINCT sum_sales)\nSee also\nSmall\n2.4.61 Last\nDescription\nGets the value in the last row in the specified column.\nSyntax\nLast ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } ) \n"}
{"page": 100, "text": "DataWindow Expression Functions\nPage 100\nTable 2.54:\nArgument\nDescription\ncolumn\nThe column for which you want the value of the last row. Column\ncan be a column name or a column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn.\nFOR range\n(optional)\nThe data that will be included when the value in the last row is found. For\nmost presentation styles, values for range are:\n\u2022 ALL -- (Default) The value in the last of all rows in column.\n\u2022 GROUP n -- The value in the last row in column in the specified\ngroup. Specify the keyword GROUP followed by the group number:\nfor example, GROUP 1.\n\u2022 PAGE -- The value in the last row in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The value in the last row in column in\nthe crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The value in the last row in column in the\nrange specified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The value in the last row in column in\nthe range specified for the Rows option.\nDISTINCT\n(optional)\nCauses Last to consider only the distinct values in column when\ndetermining the last value. For a value of column, the first row found\nwith the value is used and other rows that have the same value are\nignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nThe datatype of the column. Returns the value in the last row of column. If you specify range,\nLast returns the value of the last row in column in range.\nUsage\nIf you specify range, Last determines the value of the last row in column in range. If you\nspecify DISTINCT, Last returns the last distinct value in column, or if you specify expresn,\nthe last distinct value in column where the value of expresn is distinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the\nRange property), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n"}
{"page": 101, "text": "DataWindow Expression Functions\nPage 101\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the last distinct value in the column named dept_id in group 2:\nLast(dept_id for group 2 DISTINCT)\nThis expression returns the last value in the column named emp_id in group 2:\nLast(emp_id for group 2)\nSee also\nFirst\n2.4.62 LastPos\nDescription\nFinds the last position of a target string in a source string.\nSyntax\nLastPos ( string1, string2, searchlength )\nTable 2.55:\nArgument\nDescription\nstring1\nThe string in which you want to find string2.\nstring2\nThe string you want to find in string1.\nsearchlength\n(optional)\nA long that limits the search to the leftmost searchlength characters of the\nsource string string1. The default is the entire string.\nReturn value\nLong. Returns a long whose value is the starting position of the last occurrence of string2 in\nstring1 within the characters specified in searchlength. If string2 is not found in string1 or if\nsearchlength is 0, LastPos returns 0. If any argument's value is null, LastPos returns null.\nUsage\nThe LastPos function is case-sensitive. The entire target string must be found in the source\nstring.\n"}
{"page": 102, "text": "DataWindow Expression Functions\nPage 102\nExamples\nThis statement returns 6, because the position of the last occurrence of RU is position 6:\nLastPos(\"BABE RUTH\", \"RU\")\nThis statement returns 3:\nLastPos(\"BABE RUTH\", \"B\")\nThis statement returns 0, because the case does not match:\nLastPos(\"BABE RUTH\", \"be\") \nThis statement searches the leftmost 4 characters and returns 0, because the only occurrence\nof RU is after position 4:\nLastPos(\"BABE RUTH\", \"RU\", 2)\nSee also\nPos\n2.4.63 Left\nDescription\nObtains a specified number of characters from the beginning of a string.\nSyntax\nLeft ( string, n )\nTable 2.56:\nArgument\nDescription\nstring\nThe string containing the characters you want\nn\nA long specifying the number of characters you want\nReturn value\nString. Returns the leftmost n characters in string if it succeeds and the empty string (\"\") if an\nerror occurs.\nIf n is greater than or equal to the length of the string, Left returns the entire string. It does not\nadd spaces to make the return value's length equal to n.\nExamples\nThis expression returns BABE:\nLeft(\"BABE RUTH\", 4)\nThis expression returns BABE RUTH:\nLeft(\"BABE RUTH\", 40)\nThis expression for a computed field returns the first 40 characters of the text in the column\nhome_address:\nLeft(home_address, 40)\n"}
{"page": 103, "text": "DataWindow Expression Functions\nPage 103\nSee also\nLeftA\nMid\nPos\nRight\nLeft in Part I, \u201cPowerScript Reference\u201d\n2.4.64 LeftA\nDescription\nObtains a specified number of bytes from the beginning of a string.\nSyntax\nLeftA ( string, n )\nTable 2.57:\nArgument\nDescription\nstring\nThe string containing the characters you want\nn\nA long specifying the number of bytes you want\nReturn value\nString. Returns the characters in the leftmost n bytes in string if it succeeds and the empty\nstring (\"\") if an error occurs.\nIf n is greater than or equal to the length of the string, LeftA returns the entire string. It does\nnot add spaces to make the return value's length equal to n.\nUsage\nLeftA replaces the functionality that Left had in DBCS environments in PowerBuilder 9. In\nSBCS environments, Left and LeftA return the same results.\nSee also\nMidA\nPosA\nRightA\nLeftA in Part I, \u201cPowerScript Reference\u201d\n2.4.65 LeftTrim\nDescription\nRemoves spaces from the beginning of a string.\nSyntax\nLeftTrim ( string )\n"}
{"page": 104, "text": "DataWindow Expression Functions\nPage 104\nTable 2.58:\nArgument\nDescription\nstring\nThe string you want returned with leading spaces deleted\nReturn value\nString. Returns a copy of string with leading spaces deleted if it succeeds and the empty\nstring (\"\") if an error occurs.\nExamples\nThis expression returns RUTH:\nLeftTrim(\" RUTH\")\nThis expression for a computed field deletes any leading blanks from the value in the column\nlname and returns the value preceded by the salutation specified in salut_emp:\nsalut_emp + \" \" +  LeftTrim(lname)\nSee also\nRightTrim\nTrim\nLeftTrim in Section 2.4.473, \u201cLeftTrim\u201d in PowerScript Reference\n2.4.66 Len\nDescription\nReports the length of a string in characters.\nSyntax\nLen ( string )\nTable 2.59:\nArgument\nDescription\nstring\nThe string for which you want the length\nReturn value\nLong. Returns a long containing the length of string in characters if it succeeds and -1 if an\nerror occurs.\nExamples\nThis expression returns 0:\nLen(\"\")\nThis validation rule tests that the value the user entered is fewer than 20 characters:\nLen(GetText()) < 20\nSee also\n"}
{"page": 105, "text": "DataWindow Expression Functions\nPage 105\nLenA\nLen in Section 2.4.475, \u201cLen\u201d in PowerScript Reference\n2.4.67 LenA\nDescription\nReports the length of a string in bytes.\nSyntax\nLenA ( string )\nTable 2.60:\nArgument\nDescription\nstring\nThe string for which you want the length\nReturn value\nLong. Returns a long containing the length of string in bytes if it succeeds and -1 if an error\noccurs.\nUsage\nLenA replaces the functionality that Len had in DBCS environments in PowerBuilder 9. In\nSBCS environments, Len and LenA return the same results.\nSee also\nLen\nLenA in Section 2.4.476, \u201cLenA\u201d in PowerScript Reference\n2.4.68 Log\nDescription\nGets the natural logarithm of a number.\nSyntax\nLog ( n )\nTable 2.61:\nArgument\nDescription\nn\nThe number for which you want the natural logarithm (base e). The value\nof n must be greater than 0.\nReturn value\nDouble. Returns the natural logarithm of n. An execution error occurs if n is negative or zero.\nInverse\nThe inverse of the Log function is the Exp function.\n"}
{"page": 106, "text": "DataWindow Expression Functions\nPage 106\nExamples\nThis expression returns 2.302585092:\nLog(10)\nThis expression returns -.693147 ...:\nLog(0.5)\nBoth these expressions result in an error at runtime:\nLog(0)\nLog(-2)\nSee also\nExp\nLogTen\nLog in Section 2.4.496, \u201cLog\u201d in PowerScript Reference\n2.4.69 LogTen\nDescription\nGets the base 10 logarithm of a number.\nSyntax\nLogTen ( n )\nTable 2.62:\nArgument\nDescription\nn\nThe number for which you want the base 10 logarithm. The value of n\nmust not be negative.\nReturn value\nDouble. Returns the base 10 logarithm.\nObtaining a number\nThe expression 10^n is the inverse for LogTen(n). To obtain n given number (nbr =\nLogTen(n)), use n = 10^nbr.\nExamples\nThis expression returns 1:\nLogTen(10)\nThe following expressions both return 0:\nLogTen(1)\nLogTen(0)\nThis expression results in an execution error:\n"}
{"page": 107, "text": "DataWindow Expression Functions\nPage 107\nLogTen(-2)\nSee also\nLog\nLogTen in Section 2.4.497, \u201cLogTen\u201d in PowerScript Reference\n2.4.70 Long\nDescription\nConverts the value of a string to a long.\nSyntax\nLong ( string )\nTable 2.63:\nArgument\nDescription\nstring\nThe string you want returned as a long\nReturn value\nLong. Returns the contents of string as a long if it succeeds and 0 if string is not a valid\nnumber.\nExamples\nThis expression returns 2167899876 as a long:\nLong(\"2167899876\")\nSee also\nLong in Section 2.4.498, \u201cLong\u201d in PowerScript Reference\n2.4.71 LookUpDisplay\nDescription\nObtains the display value in the code table associated with the data value in the specified\ncolumn.\nSyntax\nLookUpDisplay ( column )\nTable 2.64:\nArgument\nDescription\ncolumn\nThe column for which you want the code table display value\nReturn value\nString. Returns the display value when it succeeds and the empty string (\"\") if an error\noccurs.\n"}
{"page": 108, "text": "DataWindow Expression Functions\nPage 108\nUsage\nIf a column has a code table, a buffer stores a value from the data column of the code table,\nbut the user sees a value from the display column. Use LookUpDisplay to get the value the\nuser sees.\nCode tables and data values and graphs\nWhen a column that is displayed in a graph has a code table, the graph displays\nthe data values of the code table by default. To display the display values, call this\nfunction when you define the graph data.\nExamples\nThis expression returns the display value for the column unit_measure:\nLookUpDisplay(unit_measure)\nAssume the column product_type has a code table and you want to use it as a category for a\ngraph. To display the product type descriptions instead of the data values in the categories,\nenter this expression in the Category option on the Data page in the graph's property sheet:\nLookUpDisplay(product_type)\n2.4.72 Lower\nDescription\nConverts all the characters in a string to lowercase.\nSyntax\nLower ( string )\nTable 2.65:\nArgument\nDescription\nstring\nThe string you want to convert to lowercase letters\nReturn value\nString. Returns string with uppercase letters changed to lowercase if it succeeds and the\nempty string (\"\") if an error occurs.\nExamples\nThis expression returns castle hill:\nLower(\"Castle Hill\")\nSee also\nUpper\nLower in Section 2.4.501, \u201cLower\u201d in PowerScript Reference\n2.4.73 Match\nDescription\n"}
{"page": 109, "text": "DataWindow Expression Functions\nPage 109\nDetermines whether a string's value contains a particular pattern of characters.\nSyntax\nMatch ( string, textpattern )\nTable 2.66:\nArgument\nDescription\nstring\nThe string in which you want to look for a pattern of characters\ntextpattern\nA string whose value is the text pattern\nReturn value\nBoolean. Returns true if string matches textpattern and false if it does not. Match also returns\nfalse if either argument has not been assigned a value or the pattern is invalid.\nUsage\nMatch enables you to evaluate whether a string contains a general pattern of characters. To\nfind out whether a string contains a specific substring, use the Pos function.\nTextpattern is similar to a regular expression. It consists of metacharacters, which have\nspecial meaning, and ordinary characters, which match themselves. You can specify that the\nstring begin or end with one or more characters from a set, or that it contain any characters\nexcept those in a set.\nA text pattern consists of metacharacters, which have special meaning in the match string,\nand nonmetacharacters, which match the characters themselves.\nThe following tables explain the meaning and use of these metacharacters:\nTable 2.67:\nMetacharacter\nMeaning\nExample\nCaret (^)\nMatches the beginning of a\nstring\n^C matches C at the\nbeginning of a string.\nDollar sign ($)\nMatches the end of a string\ns$ matches s at the end of a\nstring.\nPeriod (.)\nMatches any character\n. . . matches three consecutive\ncharacters.\nBackslash (\\)\nRemoves the following\nmetacharacter's special\ncharacteristics so that it\nmatches itself\n\\$ matches $.\nCharacter class (a group of\ncharacters enclosed in square\nbrackets [ ])\nMatches any of the enclosed\ncharacters\n[AEIOU] matches A, E, I, O,\nor U.\nYou can use hyphens\nto abbreviate ranges of\ncharacters in a character\nclass. For example, [A-Za-z]\nmatches any letter.\n"}
{"page": 110, "text": "DataWindow Expression Functions\nPage 110\nMetacharacter\nMeaning\nExample\nComplemented character\nclass (first character inside\nthe square brackets is a caret)\nMatches any character not in\nthe group following the caret\n[^0-9] matches any character\nexcept a digit, and [^A-Za-z]\nmatches any character except\na letter.\nThe metacharacters asterisk (*), plus (+), and question mark (?) are unary operators that are\nused to specify repetitions in a regular expression:\nTable 2.68:\nMetacharacter\nMeaning\nExample\n* (asterisk)\nIndicates zero or more\noccurrences\nA* matches zero or more As\n(no As, A, AA, AAA, and so\non)\n+ (plus)\nIndicates one or more\noccurrences\nA+ matches one A or more\nthan one A (A, AAA, and so\non)\n? (question mark)\nIndicates zero or one\noccurrence\nA? matches an empty string\n(\"\") or A\nSample patterns\nThe following table shows various text patterns and sample text that matches each pattern:\nTable 2.69:\nThis pattern\nMatches\nAB\nAny string that contains AB, such as ABA, DEABC, graphAB_one.\nB*\nAny string that contains 0 or more Bs, such as AC, B, BB, BBB,\nABBBC, and so on. Since B* used alone matches any string, you would\nnot use it alone, but notice its use in some the following examples.\nAB*C\nAny string containing the pattern AC or ABC or ABBC, and so on (0 or\nmore Bs).\nAB+C\nAny string containing the pattern ABC or ABBC or ABBBC, and so on\n(1 or more Bs).\nABB*C\nAny string containing the pattern ABC or ABBC or ABBBC, and so on\n(1 B plus 0 or more Bs).\n^AB\nAny string starting with AB.\nAB?C\nAny string containing the pattern AC or ABC (0 or 1 B).\n^[ABC]\nAny string starting with A, B, or C.\n[^ABC]\nA string containing any characters other than A, B, or C.\n^[^abc]\nA string that begins with any character except a, b, or c.\n^[^a-z]$\nAny single-character string that is not a lowercase letter (^ and $ indicate\nthe beginning and end of the string).\n[A-Z]+\nAny string with one or more uppercase letters.\n"}
{"page": 111, "text": "DataWindow Expression Functions\nPage 111\nThis pattern\nMatches\n^[0-9]+$\nAny string consisting only of digits.\n^[0-9][0-9][0-9]$ Any string consisting of exactly three digits.\n^([0-9][0-9]\n[0-9])$\nAny string consisting of exactly three digits enclosed in parentheses.\nExamples\nThis validation rule checks that the value the user entered begins with an uppercase letter. If\nthe value of the expression is false, the data fails validation:\nMatch(GetText(), \"^[A-Z]\")\nSee also\nPos\nMatch in Section 2.4.514, \u201cMatch\u201d in PowerScript Reference\n2.4.74 Max\nDescription\nGets the maximum value in the specified column.\nSyntax\nMax ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } )\nTable 2.70:\nArgument\nDescription\ncolumn\nThe column for which you want the maximum value. Column can be\nthe column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nFOR range\n(optional)\nThe data that will be included when the maximum value is found. For\nmost presentation styles, values for range are:\n\u2022 ALL -- (Default) The maximum value of all rows in column.\n\u2022 GROUP n -- The maximum value of rows in column in the specified\ngroup. Specify the keyword GROUP followed by the group number:\nfor example, GROUP 1.\n\u2022 PAGE -- The maximum value of the rows in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The maximum value of all rows in\ncolumn in the crosstab.\nFor Graph and OLE objects, specify one of the following:\n"}
{"page": 112, "text": "DataWindow Expression Functions\nPage 112\nArgument\nDescription\n\u2022 GRAPH -- (Graphs only) The maximum value in column in the range\nspecified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The maximum value in column in the\nrange specified for the Rows option.\nDISTINCT\n(optional)\nCauses Max to consider only the distinct values in column when\ndetermining the largest value. For a value of column, the first row found\nwith the value is used and other rows that have the same value are\nignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nThe datatype of the column. Returns the maximum value in the rows of column. If you\nspecify range, Max returns the maximum value in column in range.\nUsage\nIf you specify range, Max determines the maximum value in column in range. If you specify\nDISTINCT, Max returns the maximum distinct value in column, or if you specify expresn,\nthe maximum distinct value in column where the value of expresn is distinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the\nRange property), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nNull values are ignored and are not considered in determining the maximum.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the maximum of the values in the age column on the page:\nMax(age for page)\nThis expression returns the maximum of the values in column 3 on the page:\n"}
{"page": 113, "text": "DataWindow Expression Functions\nPage 113\nMax(#3 for page)\nThis expression returns the maximum of the values in the column named age in group 1:\nMax(age for group 1)\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the maximum of the order amount for the distinct order\nnumbers:\nMax(order_amt for all DISTINCT order_nbr)\nSee also\nMin\nMax in Section 2.4.516, \u201cMax\u201d in PowerScript Reference\n2.4.75 Median\nDescription\nCalculates the median of the values of the column. The median is the middle value in the set\nof values, for which there is an equal number of values greater and smaller than it.\nSyntax\nMedian ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } )\nTable 2.71:\nArgument\nDescription\ncolumn\nThe column for which you want the median of the data values. Column\ncan be the column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nFOR range\n(optional)\nThe data that will be included in the median. For most presentation styles,\nvalues for range are:\n\u2022 ALL -- (Default) The median of all values in column.\n\u2022 GROUP n -- The median of values in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The median of the values in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The median of all values in column in\nthe crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The median of values in column in the range\nspecified for the Rows.\n"}
{"page": 114, "text": "DataWindow Expression Functions\nPage 114\nArgument\nDescription\n\u2022 OBJECT -- (OLE objects only) The median of values in column in the\nrange specified for the Rows option.\nDISTINCT\n(optional)\nCauses Median to consider only the distinct values in column when\ndetermining the median. For a value of column, the first row found with\nthe value is used and other rows that have the same value are ignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nThe numeric datatype of the column. Returns the median of the values of the rows in range if\nit succeeds and -1 if an error occurs.\nUsage\nIf you specify range, Median returns the median value of column in range. If you specify\nDISTINCT, Median returns the median value of the distinct values in column, or if you\nspecify expresn, the median of column for each distinct value of expresn.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the Range\nproperty), and the aggregation function uses that range.\nSettings for Rows include the following:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nIn calculating the median, null values are ignored.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the median of the values in the column named salary:\nMedian(salary)\nThis expression returns the median of the values in the column named salary of group 1:\nMedian(salary for group 1)\nThis expression returns the median of the values in column 5 on the current page:\n"}
{"page": 115, "text": "DataWindow Expression Functions\nPage 115\nMedian(#5 for page)\nThis computed field returns Above Median if the median salary for the page is greater than\nthe median for the report:\nIf(Median(salary for page) > Median(salary), \"AboveMedian\", \" \")\nThis expression for a graph value sets the data value to the median value of the sale_price\ncolumn:\nMedian(sale_price)\nThis expression for a graph value entered on the Data page in the graph's property sheet sets\nthe data value to the median value of the sale_price column for the entire graph:\nMedian(sale_price for graph)\nAssuming a DataWindow object displays the order number, amount, and line items for\neach order, this computed field returns the median of the order amount for the distinct order\nnumbers:\nMedian(order_amt for all DISTINCT order_nbr)\nSee also\nAvg\nMode\n2.4.76 Mid\nDescription\nObtains a specified number of characters from a specified position in a string.\nSyntax\nMid ( string, start {, length } )\nTable 2.72:\nArgument\nDescription\nstring\nThe string from which you want characters returned.\nstart\nA long specifying the position of the first character you want returned\n(the position of the first character of the string is 1).\nlength (optional)\nA long whose value is the number of characters you want returned. If you\ndo not enter length or if length is greater than the number of characters to\nthe right of start, Mid returns the remaining characters in the string.\nReturn value\nString. Returns characters specified in length of string starting at character start. If start is\ngreater than the number of characters in string, the Mid function returns the empty string\n(\"\"). If length is greater than the number of characters remaining after the start character, Mid\nreturns the remaining characters. The return string is not filled with spaces to make it the\nspecified length.\n"}
{"page": 116, "text": "DataWindow Expression Functions\nPage 116\nExamples\nThis expression returns \"\":\nMid(\"BABE RUTH\", 40, 5)\nThis expression returns BE RUTH:\nMid(\"BABE RUTH\", 3)\nThis expression in a computed field returns ACCESS DENIED if the fourth character in the\ncolumn password is not R:\nIf(Mid(password, 4, 1) = \"R\", \"ENTER\", \"ACCESS DENIED\")\nTo pass this validation rule, the fourth character in the column password must be 6:\nMid(password, 4, 1) = \"6\"\nSee also\nMid in Section 2.4.522, \u201cMid\u201d in PowerScript Reference\n2.4.77 MidA\nDescription\nObtains a specified number of bytes from a specified position in a string.\nSyntax\nMidA ( string, start {, length } )\nTable 2.73:\nArgument\nDescription\nstring\nThe string from which you want characters returned.\nstart\nA long specifying the position of the first byte you want returned (the\nposition of the first byte of the string is 1).\nlength (optional)\nA long whose value is the number of bytes you want returned. If you do\nnot enter length or if length is greater than the number of bytes to the\nright of start, MidA returns the remaining bytes in the string.\nReturn value\nString. Returns characters specified by the number of bytes in length of string starting at the\nbyte specified by start. If start is greater than the number of bytes in string, the MidA function\nreturns the empty string (\"\"). If length is greater than the number of bytes remaining after\nthe start byte, MidA returns the remaining bytes. The return string is not filled with spaces to\nmake it the specified length.\nUsage\nMidA replaces the functionality that Mid had in DBCS environments in PowerBuilder 9. In\nSBCS environments, Mid and MidA return the same results.\nSee also\n"}
{"page": 117, "text": "DataWindow Expression Functions\nPage 117\nMid\nMidA in Section 2.4.523, \u201cMidA\u201d in PowerScript Reference\n2.4.78 Min\nDescription\nGets the minimum value in the specified column.\nSyntax\nMin ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } )\nTable 2.74:\nArgument\nDescription\ncolumn\nThe column for which you want the minimum value. Column can be\nthe column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nFOR range\n(optional)\nThe data that will be included in the minimum. For most presentation\nstyles, values for range are:\n\u2022 ALL -- (Default) The minimum of all values in column.\n\u2022 GROUP n -- The minimum of values in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The minimum of the values in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The minimum of all values in column\nin the crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The minimum of values in column in the\nrange specified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The minimum of values in column in\nthe range specified for the Rows option.\nDISTINCT\n(optional)\nCauses Min to consider only the distinct values in column when\ndetermining the minimum value. For a value of column, the first row\nfound with the value is used and other rows that have the same value are\nignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\n"}
{"page": 118, "text": "DataWindow Expression Functions\nPage 118\nThe datatype of the column. Returns the minimum value in the rows of column. If you\nspecify range, Min returns the minimum value in the rows of column in range.\nUsage\nIf you specify range, Min determines the minimum value in column in range. If you specify\nDISTINCT, Min returns the minimum distinct value in column, or if you specify expresn, the\nminimum distinct value in column where the value of expresn is distinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the Range\nproperty), and the aggregation function uses that range. Settings for Rows include:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nNull values are ignored and are not considered in determining the minimum.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the minimum value in the column named age in group 2:\nMin(age for group 2)\nThis expression returns the minimum of the values in column 3 on the page:\nMin(#3 for page)\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the minimum of the order amount for the distinct order\nnumbers:\nMin(order_amt for all DISTINCT order_nbr)\nSee also\nMax\nMin in Section 2.4.525, \u201cMin\u201d in PowerScript Reference\n2.4.79 Minute\nDescription\nObtains the number of minutes in the minutes portion of a time value.\n"}
{"page": 119, "text": "DataWindow Expression Functions\nPage 119\nSyntax\nMinute ( time )\nTable 2.75:\nArgument\nDescription\ntime\nThe time value from which you want the minutes\nReturn value\nInteger. Returns the minutes portion of time (00 to 59).\nExamples\nThis expression returns 1:\nMinute(19:01:31)\nSee also\nHour\nSecond\nMinute in Section 2.4.526, \u201cMinute\u201d in PowerScript Reference\n2.4.80 Mod\nDescription\nObtains the remainder (modulus) of a division operation.\nSyntax\nMod ( x, y )\nTable 2.76:\nArgument\nDescription\nx\nThe number you want to divide by y\ny\nThe number you want to divide into x\nReturn value\nThe datatype of x or y, whichever datatype is more precise.\nExamples\nThis expression returns 2:\nMod(20, 6)\nThis expression returns 1.5:\nMod(25.5, 4)\nThis expression returns 2.5:\nMod(25, 4.5)\n"}
{"page": 120, "text": "DataWindow Expression Functions\nPage 120\nSee also\nMod in Section 2.4.527, \u201cMod\u201d in PowerScript Reference\n2.4.81 Mode\nDescription\nCalculates the mode of the values of the column. The mode is the most frequently occurring\nvalue.\nSyntax\nMode ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } )\nTable 2.77:\nArgument\nDescription\ncolumn\nThe column for which you want the mode of the data values. Column\ncan be the column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nFOR range\n(optional)\nThe data that will be included in the mode. For most presentation styles,\nvalues for range are:\n\u2022 ALL -- (Default) The mode of all values in column.\n\u2022 GROUP n -- The mode of values in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The mode of the values in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The mode of all values in column in\nthe crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The mode of values in column in the range\nspecified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The mode of values in column in the\nrange specified for the Rows option.\nDISTINCT\n(optional)\nCauses Mode to consider only the distinct values in column when\ndetermining the mode. For a value of column, the first row found with the\nvalue is used and other rows that have the same value are ignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\n"}
{"page": 121, "text": "DataWindow Expression Functions\nPage 121\nThe numeric datatype of the column. Returns the mode of the values of the rows in range if it\nsucceeds and -1 if an error occurs.\nUsage\nIf you specify range, Mode returns the mode of column in range. If you specify DISTINCT,\nMode returns the mode of the distinct values in column, or if you specify expresn, the mode\nof column for each distinct value of expresn.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the Range\nproperty), and the aggregation function uses that range. Settings for Rows include:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nIn calculating the mode, null values are ignored.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the mode of the values in the column named salary:\nMode(salary)\nThis expression returns the mode of the values for group 1 in the column named salary:\nMode(salary for group 1)\nThis expression returns the mode of the values in column 5 on the current page:\nMode(#5 for page)\nThis computed field returns Above Mode if the mode of the salary for the page is greater than\nthe mode for the report:\nIf(Mode(salary for page) > Mode(salary), \"Above Mode\", \" \")\nThis expression for a graph value sets the data value to the mode of the sale_price column:\nMode(sale_price)\nThis expression for a graph value entered on the Data page in the graph's property sheet sets\nthe data value to the mode of the sale_price column for the entire graph:\nMode(sale_price for graph)\n"}
{"page": 122, "text": "DataWindow Expression Functions\nPage 122\nAssuming a DataWindow object displays the order number, amount, and line items for\neach order, this computed field returns the mode of the order amount for the distinct order\nnumbers:\nMode(order_amt for all DISTINCT order_nbr)\nSee also\nAvg\nMedian\n2.4.82 Month\nDescription\nGets the month of a date value.\nSyntax\nMonth ( date )\nTable 2.78:\nArgument\nDescription\ndate\nThe date from which you want the month\nReturn value\nInteger. Returns an integer (1 to 12) whose value is the month portion of date.\nExamples\nThis expression returns 1:\nMonth(2005-01-31)\nThis expression for a computed column returns Wrong Month if the month in the column\nexpected_grad_date is not 6:\nIf(Month(expected_grad_date) = 6, \"June\", \"Wrong Month\")\nThis validation rule expression checks that the value of the month in the date in the column\nexpected_grad_date is 6:\nMonth(expected_grad_date) = 6\nSee also\nDay\nDate\nYear\nMonth in Section 2.4.529, \u201cMonth\u201d in PowerScript Reference\n2.4.83 Now\nDescription\n"}
{"page": 123, "text": "DataWindow Expression Functions\nPage 123\nObtains the current time based on the system time of the client machine.\nSyntax\nNow ( )\nReturn value\nTime. Returns the current time based on the system time of the client machine.\nUsage\nUse Now to compare a time to the system time or to display the system time on the screen.\nThe timer interval specified for the DataWindow object determines the frequency at which\nthe value of Now is updated. For example, if the timer interval is one second, it is updated\nevery second. The default timer interval is one minute (60,000 milliseconds).\nExamples\nThis expression returns the current system time:\nNow()\nThis expression sets the column value to 8:00 when the current system time is before 8:00\nand to the current time if it is after 8:00:\nIf(Now() < 08:00:00, '08:00:00', String(Now()))\nThe displayed time refreshes every time the specified time interval period elapses.\nIf a static value of time is required (for example, the time when a report has been executed or\nthe retrieve has started), you can use a static text field that you modify as follows:\n//Set the time when the report was executed in \n//the text field t_now\ndw1.Modify(\"t_now.text='\"+ String(Now(),\"hh:mm\")+\"'\")\n//execute the report\ndw1.retrieve() \nSee also\nIf\nYear\nNow in Section 2.4.535, \u201cNow\u201d in PowerScript Reference\n2.4.84 Number\nDescription\nConverts a string to a number.\nSyntax\nNumber ( string )\nTable 2.79:\nArgument\nDescription\nstring\nThe string you want returned as a number\n"}
{"page": 124, "text": "DataWindow Expression Functions\nPage 124\nReturn value\nA numeric datatype. Returns the contents of string as a number. If string is not a valid\nnumber, Number returns 0.\nExamples\nThis expression converts the string 24 to a number:\nNumber(\"24\")\nThis expression for a computed field tests whether the value in the age column is greater than\n55 and if so displays N/A; otherwise, it displays the value in age:\nIf(Number(age) > 55, \"N/A\", age)\nThis validation rule checks that the number the user entered is between 25,000 and 50,000:\nNumber(GetText())>25000 AND Number (GetText())<50000\n2.4.85 Page\nDescription\nGets the number of the current page.\nSyntax\nPage ( )\nReturn value\nLong. Returns the number of the current page.\nCalculating the page count\nThe vertical size of the paper less the top and bottom margins is used to calculate the\npage count. When the print orientation is landscape, the vertical size of the paper is\nthe shorter dimension. If the DataWindow object is not set to print preview, then the\nsize of the control determines the page number.\nWhen Page() is in the header, it uses the first row currently visible on the page to\ndetermine the page number. When it is in the footer, it uses the last row currently\nvisible. Therefore, it is possible for the values to be different.\nExamples\nThis expression returns the number of the current page:\nPage()\nIn the DataWindow object's footer band, this expression for a computed field displays a string\nshowing the current page number and the total number of pages in the report. The result has\nthe format Page n of total:\n'Page ' + Page() + ' of ' + PageCount()\nSee also\nPageAbs\n"}
{"page": 125, "text": "DataWindow Expression Functions\nPage 125\nPageAcross\nPageCount\nPageCountAcross\n2.4.86 PageAbs\nDescription\nGets the absolute number of the current page.\nSyntax\nPageAbs ( )\nReturn value\nLong. Returns the absolute number of the current page.\nUsage\nUse this function for group reports that have ResetPageCount = yes. It returns the absolute\npage number, ignoring the page reset count. This enables you to number the grouped pages,\nbut also to obtain the absolute page when the user wants to print the current page, regardless\nof what that page number is in a grouped page report.\nExamples\nThis expression returns the absolute number of the current page:\nPageAbs()\nThis example obtains the absolute page number for the first row on the page in the string\nvariable ret:\nstring ret, row\nrow = dw1.Object.DataWindow.FirstRowOnPage\nret = dw1.Describe(\"Evaluate('pageabs()', \"+row+\")\")\nSee also\nPage\nPageCount\nPageCountAcross\n2.4.87 PageAcross\nDescription\nGets the number of the current horizontal page. For example, if a report is twice the width of\nthe print preview window and the window is scrolled horizontally to display the portion of\nthe report that was outside the preview, PageAcross returns 2 because the current page is the\nsecond horizontal page.\nSyntax\nPageAcross ( )\nReturn value\n"}
{"page": 126, "text": "DataWindow Expression Functions\nPage 126\nLong. Returns the number of the current horizontal page if it succeeds and -1 if an error\noccurs.\nExamples\nThis expression returns the number of the current horizontal page:\nPageAcross()\nSee also\nPage\nPageCount\nPageCountAcross\n2.4.88 PageCount\nDescription\nGets the total number of pages when a DataWindow object is being viewed in Print Preview.\nThis number is also the number of printed pages if the DataWindow object is not wider\nthan the preview window. If the DataWindow object is wider than the preview window, the\nnumber of printed pages will be greater than the number PageCount gets.\nSyntax\nPageCount ( )\nReturn value\nLong. Returns the total number of pages.\nUsage\nPageCount applies to Print Preview.\nCalculating the page count\nThe vertical size of the paper less the top and bottom margins is used to calculate the\npage count. When the print orientation is landscape, the vertical size of the paper is\nthe shorter dimension. If the DataWindow object is not set to print preview, then the\nsize of the control determines the page count.\nExamples\nThis expression returns the number of pages:\nPageCount()\nIn the DataWindow object's footer band, this expression for a computed field displays a string\nshowing the current page number and the total number of pages in the report. The result has\nthe format Page n of total:\n'Page ' + Page() + ' of ' + PageCount()\nSee also\nPage\n"}
{"page": 127, "text": "DataWindow Expression Functions\nPage 127\nPageAcross\nPageCountAcross\n2.4.89 PageCountAcross\nDescription\nGets the total number of horizontal pages that are wider than the Print Preview window when\na DataWindow object is viewed in Print preview.\nSyntax\nPageCountAcross ( )\nReturn value\nLong. Returns the total number of horizontal pages if it succeeds and -1 if an error occurs.\nUsage\nPageCountAcross applies to Print Preview.\nExamples\nThis expression returns the number of horizontal pages in the Print Preview window:\nPageCountAcross()\nSee also\nPage\nPageAcross\nPageCount\n2.4.90 Paint\nDescription\nTakes a string expression argument and returns the same string, allowing you to paint inside\na DataWindow object in a way that respect the position and z-order of other DataWindow\nobjects.\nSyntax\nPaint ( expr )\nTable 2.80:\nArgument\nDescription\nexpr\nAny valid DataWindow expression. It should contain a function call\nto a drawing global function with rendering logic. If expr is a string\nexpression and the value is not null, the computed field will render the\nevaluated string expression.\nReturn value\nString. The Paint expression function takes a string expression argument and returns the same\nstring.\n"}
{"page": 128, "text": "DataWindow Expression Functions\nPage 128\nExamples\nThis example instantiates the drawing functions and, if the drawing function returns false, the\ntext \"No Pie\" displays.\nPaint\n(\n     MyDrawPieSlice\n     (\n          GetPaintDC()\n          GetPaintRectX()\n          GetPaintRectY()\n          GetPaintRectWidth()\n          GetPaintRectHeight()\n          GetRow()*100/RowCount()\n     )\n)\n \nPaint\n(\n     MyDrawPieSlice\n     (\n          GetPaintDC(),\n          GetRow()*100/RowCount()\n     )\n)\n \nPaint\n(\n if MyDrawPieSlice(GetPaintDC()),\"\",\"No Pie\")\n)\n2.4.91 Percent\nDescription\nGets the percentage that the current value represents of the total of the values in the column.\nSyntax\nPercent ( column { FOR range { DISTINCT { expres1 {, expres2  {, ... } } } } } )\nTable 2.81:\nArgument\nDescription\ncolumn\nThe column for which you want the value of each row expressed as\na percentage of the total of the values of the column. Column can be\nthe column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nFOR range\n(optional)\nThe data to be included in the percentage. For most presentation styles,\nvalues for range are:\n\u2022 ALL -- (Default) The percentage that the current value represents of all\nrows in column.\n\u2022 GROUP n -- The percentage that the current value represents of\nrows in column in the specified group. Specify the keyword GROUP\nfollowed by the group number: for example, GROUP 1.\n"}
{"page": 129, "text": "DataWindow Expression Functions\nPage 129\nArgument\nDescription\n\u2022 PAGE -- The percentage that the current value represents of the rows\nin column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The percentage that the current value\nrepresents of all rows in column in the crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The percentage that the current value\nrepresents of values in column in the range specified for the Rows\noption.\n\u2022 OBJECT -- (OLE objects only) The percentage that the current value\nrepresents of values in column in the range specified for the Rows\noption.\nDISTINCT\n(optional)\nCauses Percent to consider only the distinct values in column when\ndetermining the percentage. For a value of column, the first row found\nwith the value is used and other rows that have the same value are\nignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nA numeric datatype (decimal, double, integer, long, or real). Returns the percentage the\ncurrent row of column represents of the total value of the column.\nUsage\nUsually you use Percent in a column to display the percentage for each row. You can also use\nPercent in a header or trailer for a group. In the header, Percent displays the percentage for\nthe first value in the group, and in the trailer, for the last value in the group.\nIf you specify range, Percent returns the percentage that the current row of column represents\nrelative to the total value of range. For example, if column 5 is salary, Percent(#5 for group 1)\nis equivalent to salary/(Sum(Salary for group 1)).\nIf you specify DISTINCT, Percent returns the percent that a distinct value in column\nrepresents of the total value of column. If you specify expresn, Percent returns the percent\nthat the value in column represents of the total for column in a row in which the value of\nexpresn is distinct.\nFormatting the percent value\nThe percentage is displayed as a decimal value unless you specify a format for the\nresult. A display format can be part of the computed field's definition.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the\n"}
{"page": 130, "text": "DataWindow Expression Functions\nPage 130\nRange property), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nNull values are ignored and are not considered in the calculation.\nNot in validation rules, filter expressions, or crosstabs\nYou cannot use Percent or other aggregate functions in validation rules or filter\nexpressions. Percent does not work for crosstabs; specifying \"for crosstab\" as a range\nis not available for Percent.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the value of each row in the column named salary as a percentage of\nthe total of salary:\nPercent(salary)\nThis expression returns the value of each row in the column named cost as a percentage of\nthe total of cost in group 2:\nPercent(cost for group 2)\nThis expression entered in the Value box on the Data tab page in the Graph Object property\nsheet returns the value of each row in the qty_ordered as a percentage of the total for the\ncolumn in the graph:\nPercent(qty_ordered for graph)\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the order amount as a percentage of the total order amount\nfor the distinct order numbers:\nPercent(order_amt for all DISTINCT order_nbr)\nSee also\nCumulativePercent\n2.4.92 Pi\nDescription\nMultiplies pi by a specified number.\nSyntax\nPi ( n )\n"}
{"page": 131, "text": "DataWindow Expression Functions\nPage 131\nTable 2.82:\nArgument\nDescription\nn\nThe number you want to multiply by pi (3.14159265358979323...)\nReturn value\nDouble. Returns the result of multiplying n by pi if it succeeds and -1 if an error occurs.\nUsage\nUse Pi to convert angles to and from radians.\nExamples\nThis expression returns pi:\nPi(1)\nBoth these expressions return the area of a circle with the radius Rad:\nPi(1) * Rad^2\nPi(Rad^2)\nThis expression computes the cosine of a 45-degree angle:\nCos(45.0 * (Pi(2)/360))\nSee also\nCos\nSin\nTan\nPi in Section 2.4.567, \u201cPi\u201d in PowerScript Reference\n2.4.93 Pos\nDescription\nFinds one string within another string.\nSyntax\nPos ( string1, string2 {, start } )\nTable 2.83:\nArgument\nDescription\nstring1\nThe string in which you want to find string2.\nstring2\nThe string you want to find in string1.\nstart (optional)\nA long indicating where the search will begin in string. The default is 1.\nReturn value\nLong. Returns a long whose value is the starting position of the first occurrence of string2 in\nstring1 after the position specified in start. If string2 is not found in string1 or if start is not\nwithin string1, Pos returns 0.\n"}
{"page": 132, "text": "DataWindow Expression Functions\nPage 132\nUsage\nThe Pos function is case-sensitive.\nExamples\nThis expression returns the position of the letter a in the value of the last_name column:\nPos(last_name, \"a\")\nThis expression returns 6:\nPos(\"BABE RUTH\", \"RU\")\nThis expression returns 1:\nPos(\"BABE RUTH\", \"B\")\nThis expression returns 0 (because the case does not match):\nPos(\"BABE RUTH\", \"be\")\nThis expression returns 0 (because it starts searching at position 5, after the occurrence of\nBE):\nPos(\"BABE RUTH\", \"BE\", 5)\nSee also\nLastPos\nLeft\nMid\nPosA\nRight\nPos in Section 2.4.574, \u201cPos\u201d in PowerScript Reference\n2.4.94 PosA\nDescription\nFinds one string within another string.\nSyntax\nPosA ( string1, string2 {, start } )\nTable 2.84:\nArgument\nDescription\nstring1\nThe string in which you want to find string2.\nstring2\nThe string you want to find in string1.\nstart (optional)\nA long indicating the position in bytes where the search will begin in\nstring. The default is 1.\nReturn value\n"}
{"page": 133, "text": "DataWindow Expression Functions\nPage 133\nLong. Returns a long whose value is the starting position of the first occurrence of string2 in\nstring1 after the position in bytes specified in start. If string2 is not found in string1 or if start\nis not within string1, PosA returns 0.\nUsage\nPosA replaces the functionality that Pos had in DBCS environments in PowerBuilder 9. In\nSBCS environments, Pos and PosA return the same results.\nSee also\nLastPos\nLeftA\nMidA\nPos\nRightA\nPosA in Section 2.4.575, \u201cPosA\u201d in PowerScript Reference\n2.4.95 ProfileInt\nDescription\nObtains the integer value of a setting in the specified profile file.\nSyntax\nProfileInt ( filename, section, key, default )\nTable 2.85:\nArgument\nDescription\nfilename\nA string whose value is the name of the profile file. If you do not specify\na full path, ProfileInt uses the operating system's standard file search\norder to find the file.\nsection\nA string whose value is the name of a group of related values in the\nprofile file. In the file, section names are in square brackets. Do not\ninclude the brackets in section. Section is not case-sensitive.\nkey\nA string specifying the setting name in section whose value you want.\nThe setting name is followed by an equal sign in the file. Do not include\nthe equal sign in key. Key is not case-sensitive.\ndefault\nAn integer value that ProfileInt returns if filename is not found, if\nsection or key does not exist in filename, or if the value of key cannot be\nconverted to an integer.\nReturn value\nInteger. Returns default if filename is not found, section is not found in filename, key is not\nfound in section, or the value of key is not an integer. Returns -1 if an error occurs.\nUsage\nUse ProfileInt and ProfileString to get configuration settings from a profile file you have\ndesigned for your application. ProfileInt and ProfileString can read files with ANSI or\n"}
{"page": 134, "text": "DataWindow Expression Functions\nPage 134\nUTF16-LE encoding on Windows systems, and ANSI or UTF16-BE encoding on UNIX\nsystems.\nUsing a DataWindow object in different environments\nPowerBuilder\nYou can use PowerScript SetProfileString to change values in the profile file to\ncustomize your application's configuration at runtime. Before you make changes,\nyou can use ProfileInt and ProfileString to obtain the original settings so you can\noptionally restore them when the user exits the application.\nWeb control\nProfileInt always returns the value of default. It does not open a file on the user's\nmachine; doing so would be a security violation.\nExamples\nThis example uses the following PROFILE.INI file:\n[MyApp]\nMaximized=1\n[Security]\nClass = 7\nThis expression tries to return the integer value of the keyword Minimized in section MyApp\nof file C:\\PROFILE.INI. It returns 3 if there is no MyApp section or no Minimized keyword\nin the MyApp section. Based on the sample file above, it returns 3:\nProfileInt(\"C:\\PROFILE.INI\", \"MyApp\", \"minimized\", 3)\nSee also\nProfileString\nProfileInt in Section 2.4.612, \u201cProfileInt\u201d in PowerScript Reference\n2.4.96 ProfileString\nDescription\nObtains the string value of a setting in the specified profile file.\nSyntax\nProfileString ( filename, section, key, default )\nTable 2.86:\nArgument\nDescription\nfilename\nA string whose value is the name of the profile file. If you do not specify\na full path, ProfileString uses the operating system's standard file search\norder to find the file.\nsection\nA string whose value is the name of a group of related values in the\nprofile file. In the file, section names are in square brackets. Do not\ninclude the brackets in section. Section is not case-sensitive.\n"}
{"page": 135, "text": "DataWindow Expression Functions\nPage 135\nArgument\nDescription\nkey\nA string specifying the setting name in section whose value you want.\nThe setting name is followed by an equal sign in the file. Do not include\nthe equal sign in key. Key is not case-sensitive.\ndefault\nA string value that ProfileString returns if filename is not found, if\nsection or key does not exist in filename, or if the value of key cannot be\nconverted to an integer.\nReturn value\nString, with a maximum length of 4096 characters. Returns the string from key within section\nwithin filename. If filename is not found, section is not found in filename, or key is not found\nin section, ProfileString returns default. If an error occurs, it returns the empty string (\"\").\nUsage\nUse ProfileInt and ProfileString to get configuration settings from a profile file you have\ndesigned for your application. ProfileInt and ProfileString can read files with ANSI or\nUTF16-LE encoding on Windows systems, and ANSI or UTF16-BE encoding on UNIX\nsystems.\nUsing a DataWindow object in different environments\nPowerBuilder\nYou can use PowerScript SetProfileString to change values in the profile file to\ncustomize your application's configuration at runtime. Before you make changes,\nyou can use ProfileInt and ProfileString to obtain the original settings so you can\noptionally restore them when the user exits the application.\nWeb control\nProfileString always returns the value of default. It does not open a file on the user's\nmachine; doing so would be a security violation.\nExamples\nThis example uses the following section in the PROFILE.INI file:\n[Employee]\nName=\"Smith\"\n[Dept]\nName=\"Marketing\"\nThis expression returns the string for the keyword Name in section Employee in file C:\n\\PROFILE.INI. It returns None if the section or keyword does not exist. In this case it returns\nSmith:\nProfileString(\"C:\\PROFILE.INI\", \"Employee\", \"Name\", \"None\")\nSee also\nProfileInt\nProfileString in Section 2.4.613, \u201cProfileString\u201d in PowerScript Reference\nSetProfileString in Section 2.4.761, \u201cSetProfileString\u201d in PowerScript Reference\n"}
{"page": 136, "text": "DataWindow Expression Functions\nPage 136\n2.4.97 Rand\nDescription\nObtains a random whole number between 1 and a specified upper limit.\nSyntax\nRand ( n )\nTable 2.87:\nArgument\nDescription\nn\nThe upper limit of the range of random numbers you want returned. The\nlower limit is always 1. The upper limit cannot exceed 32,767.\nReturn value\nA numeric datatype, the datatype of n. Returns a random whole number between 1 and n.\nUsage\nThe sequence of numbers generated by repeated calls to the Rand function is a computer-\ngenerated pseudorandom sequence.\nYou can control whether the sequence is different each time your application runs by calling\nthe PowerScript Randomize function to initialize the random number generator.\nExamples\nThis expression returns a random whole number between 1 and 10:\nRand(10)\nSee also\nRand in Section 2.4.614, \u201cRand\u201d in PowerScript Reference\nRandomize in Section 2.4.615, \u201cRandomize\u201d in PowerScript Reference\n2.4.98 Real\nDescription\nConverts a string value to a real datatype.\nSyntax\nReal ( string )\nTable 2.88:\nArgument\nDescription\nstring\nThe string whose value you want to convert to a real\nReturn value\nReal. Returns the contents of a string as a real. If string is not a valid number, Real returns 0.\nExamples\n"}
{"page": 137, "text": "DataWindow Expression Functions\nPage 137\nThis expression converts 24 to a real:\nReal(\"24\")\nThis expression returns the value in the column temp_text as a real:\nReal(temp_text)\nSee also\nReal in Section 2.4.618, \u201cReal\u201d in PowerScript Reference\n2.4.99 RelativeDate\nDescription\nObtains the date that occurs a specified number of days after or before another date.\nSyntax\nRelativeDate ( date, n )\nTable 2.89:\nArgument\nDescription\ndate\nA date value\nn\nAn integer indicating the number of days\nReturn value\nDate. Returns the date that occurs n days after date if n is greater than 0. Returns the date that\noccurs n days before date if n is less than 0.\nExamples\nThis expression returns 2005-02-10:\nRelativeDate(2005-01-31, 10)\nThis expression returns 2005-01-21:\nRelativeDate(2005-01-31, -10)\nSee also\nDaysAfter\nRelativeDate in Section 2.4.627, \u201cRelativeDate\u201d in PowerScript Reference\n2.4.100 RelativeTime\nDescription\nObtains a time that occurs a specified number of seconds after or before another time within a\n24-hour period.\nSyntax\nRelativeTime ( time, n )\n"}
{"page": 138, "text": "DataWindow Expression Functions\nPage 138\nTable 2.90:\nArgument\nDescription\ntime\nA time value\nn\nA long number of seconds\nReturn value\nTime. Returns the time that occurs n seconds after time if n is greater than 0. Returns the time\nthat occurs n seconds before time if n is less than 0. The maximum return value is 23:59:59.\nExamples\nThis expression returns 19:01:41:\nRelativeTime(19:01:31, 10)\nThis expression returns 19:01:21:\nRelativeTime(19:01:31, -10)\nSee also\nSecondsAfter\nRelativeTime in Section 2.4.628, \u201cRelativeTime\u201d in PowerScript Reference\n2.4.101 Replace\nDescription\nReplaces a portion of one string with another.\nSyntax\nReplace ( string1, start, n, string2 )\nTable 2.91:\nArgument\nDescription\nstring1\nThe string in which you want to replace characters with string2.\nstart\nA long whose value is the number of the first character you want\nreplaced. (The first character in the string is number 1.)\nn\nA long whose value is the number of characters you want to replace.\nstring2\nThe string that replaces characters in string1. The number of characters\nin string2 can be greater than, equal to, or fewer than the number of\ncharacters you are replacing.\nReturn value\nString. Returns the string with the characters replaced if it succeeds and the empty string (\"\")\nif it fails.\nUsage\nIf the start position is beyond the end of the string, Replace appends string2 to string1. If\nthere are fewer characters after the start position than specified in n, Replace replaces all the\ncharacters to the right of character start.\n"}
{"page": 139, "text": "DataWindow Expression Functions\nPage 139\nIf n is zero, then in effect Replace inserts string2 into string1.\nExamples\nThis expression changes the last two characters of the string David to e to make it Dave:\nReplace(\"David\", 4, 2, \"e\")\nThis expression returns MY HOUSE:\nReplace(\"YOUR HOUSE\", 1, 4, \"MY\")\nThis expression returns Closed for the Winter:\nReplace(\"Closed for Vacation\", 12, 8, \"the Winter\")\nSee also\nReplaceA\nReplace in Section 2.4.636, \u201cReplace\u201d in PowerScript Reference\n2.4.102 ReplaceA\nDescription\nReplaces a portion of one string with another.\nSyntax\nReplaceA ( string1, start, n, string2 )\nTable 2.92:\nArgument\nDescription\nstring1\nThe string in which you want to replace bytes with string2.\nstart\nA long whose value is the number of the first byte you want replaced.\n(The first byte in the string is number 1.)\nn\nA long whose value is the number of bytes you want to replace.\nstring2\nThe string that replaces bytes in string1. The number of bytes in string2\ncan be greater than, equal to, or fewer than the number of bytes you are\nreplacing.\nReturn value\nString. Returns the string with the bytes replaced if it succeeds and the empty string (\"\") if it\nfails.\nUsage\nIf the start position is beyond the end of the string, ReplaceA appends string2 to string1. If\nthere are fewer bytes after the start position than specified in n, ReplaceA replaces all the\nbytes to the right of character start.\nIf n is zero, then in effect ReplaceA inserts string2 into string1.\nReplaceA replaces the functionality that Replace had in DBCS environments in\nPowerBuilder 9. In SBCS environments, Replace and ReplaceA return the same results.\n"}
{"page": 140, "text": "DataWindow Expression Functions\nPage 140\nSee also\nReplace\nReplaceA in Section 2.4.637, \u201cReplaceA\u201d in PowerScript Reference\n2.4.103 RGB\nDescription\nCalculates the long value that represents the color specified by numeric values for the red,\ngreen, and blue components of the color.\nSyntax\nRGB ( red, green, blue )\nTable 2.93:\nArgument\nDescription\nred\nThe integer value of the red component of the color\ngreen\nThe integer value of the green component of the color\nblue\nThe integer value of the blue component of the color\nReturn value\nLong. Returns the long that represents the color created by combining the values specified in\nred, green, and blue. If an error occurs, RGB returns null.\nUsage\nThe formula for combining the colors is:\nRed + (256 * Green) + (65536 * Blue)\nUse RGB to obtain the long value required to set the color for text and drawing objects. You\ncan also set an object's color to the long value that represents the color. The RGB function\nprovides an easy way to calculate that value.\nDetermining color components\nThe value of a component color is an integer between 0 and 255 that represents the amount of\nthe component that is required to create the color you want. The lower the value, the darker\nthe color; the higher the value, the lighter the color.\nThe following table lists red, green, and blue values for the 16 standard colors:\nTable 2.94:\nColor\nRed value\nGreen value\nBlue value\nBlack\n0\n0\n0\nWhite\n255\n255\n255\nLight Gray\n192\n192\n192\nDark Gray\n128\n128\n128\nRed\n255\n0\n0\n"}
{"page": 141, "text": "DataWindow Expression Functions\nPage 141\nColor\nRed value\nGreen value\nBlue value\nDark Red\n128\n0\n0\nGreen\n0\n255\n0\nDark Green\n0\n128\n0\nBlue\n0\n0\n255\nDark Blue\n0\n0\n128\nMagenta\n255\n0\n255\nDark Magenta\n128\n0\n128\nCyan\n0\n255\n255\nDark Cyan\n0\n128\n128\nYellow\n255\n255\n0\nBrown\n128\n128\n0\nExamples\nThis expression returns as a long 8421376, which represents dark cyan:\nRGB(0,128,128)\nThis expression for the Background.Color property of a salary column returns a long that\nrepresents red if an employee's salary is greater than $50,000 and white if salary is less than\nor equal to $50,000:\nIf(salary>50000, RGB(255,0,0), RGB(255,255,255))\nSee also\nExample 3: creating a row indicator\nRGB in Section 2.4.654, \u201cRGB\u201d in PowerScript Reference\n2.4.104 RichText\nDescription\nTakes as argument a string expression interpreted as RTF and renders it as such. If the\nargument is not RTF nothing is rendered.\nSyntax\nRichText ( string )\nTable 2.95:\nArgument\nDescription\nstring\nThe string expression to render as RTF\nReturn value\nNone.\nExamples\n"}
{"page": 142, "text": "DataWindow Expression Functions\nPage 142\nThis expression displays the contents of the short_desc column's as rich text.\nRichText( short_desc )\n2.4.105 RichTextFile\nDescription\nTakes as argument a string expression interpreted as a RTF file name and renders the\ncontents. If the argument is not a RTF file nothing is rendered.\nSyntax\nRichTextFile ( string )\nTable 2.96:\nArgument\nDescription\nstring\nThe string expression to render as RTF file\nReturn value\nNone.\nExamples\nThis expression displays the contents of the richtext.rtf file as rich text.\nRichTextFile(\"richtext.rtf\")\n2.4.106 Right\nDescription\nObtains a specified number of characters from the end of a string.\nSyntax\nRight ( string, n )\nTable 2.97:\nArgument\nDescription\nstring\nThe string from which you want characters returned\nn\nA long whose value is the number of characters you want returned from\nthe right end of string\nReturn value\nString. Returns the rightmost n characters in string if it succeeds and the empty string (\"\") if\nan error occurs.\nIf n is greater than or equal to the length of the string, Right returns the entire string. It does\nnot add spaces to make the return value's length equal to n.\nExamples\nThis expression returns HILL:\n"}
{"page": 143, "text": "DataWindow Expression Functions\nPage 143\nRight(\"CASTLE HILL\", 4)\nThis expression returns CASTLE HILL:\nRight(\"CASTLE HILL\", 75)\nSee also\nLeft\nMid\nPos\nRight in Section 2.4.655, \u201cRight\u201d in PowerScript Reference\n2.4.107 RightA\nDescription\nObtains a specified number of characters from the end of a string.\nSyntax\nRight ( string, n )\nTable 2.98:\nArgument\nDescription\nstring\nThe string from which you want characters returned\nn\nA long whose value is the number of characters you want returned from\nthe right end of string\nReturn value\nString. Returns the rightmost n characters in string if it succeeds and the empty string (\"\") if\nan error occurs.\nIf n is greater than or equal to the length of the string, RightA returns the entire string. It does\nnot add spaces to make the return value's length equal to n.\nUsage\nRightA replaces the functionality that Right had in DBCS environments in PowerBuilder 9.\nIn SBCS environments, Right and RightA return the same results.\nSee also\nLeftA\nMidA\nPosA\nRight\n2.4.108 RightTrim\nDescription\n"}
{"page": 144, "text": "DataWindow Expression Functions\nPage 144\nRemoves spaces from the end of a string.\nSyntax\nRightTrim ( string )\nTable 2.99:\nArgument\nDescription\nstring\nThe string you want returned with trailing blanks deleted\nReturn value\nString. Returns a copy of string with trailing blanks deleted if it succeeds and the empty\nstring (\"\") if an error occurs.\nExamples\nThis expression returns RUTH:\nRightTrim(\"RUTH \")\nSee also\nLeftTrim\nTrim\nRightTrim in Section 2.4.658, \u201cRightTrim\u201d in PowerScript Reference\n2.4.109 Round\nDescription\nRounds a number to the specified number of decimal places.\nSyntax\nRound ( x , n )\nTable 2.100:\nArgument\nDescription\nx\nThe number you want to round.\nn\nThe number of decimal places to which you want to round x. Valid\nvalues are 0 through 28.\nReturn value\nDecimal. If n is positive, Round returns x rounded to the specified number of decimal places.\nIf n is negative, it returns x rounded to (- n +1) places before the decimal point. Returns -1 if\nit fails.\nExamples\nThis expression returns 9.62:\nRound(9.624, 2)\n"}
{"page": 145, "text": "DataWindow Expression Functions\nPage 145\nThis expression returns 9.63:\nRound(9.625, 2)\nThis expression returns 9.600:\nRound(9.6, 3)\nThis expression returns -9.63:\nRound(-9.625, 2)\nThis expression returns -10:\nRound(-9.625, -1)\nSee also\nCeiling\nInt\nTruncate\nRound in Section 2.4.662, \u201cRound\u201d in PowerScript Reference\n2.4.110 RowCount\nDescription\nObtains the number of rows that are currently available in the primary buffer.\nSyntax\nRowCount ( )\nReturn value\nLong. Returns the number of rows that are currently available, 0 if no rows are currently\navailable, and -1 if an error occurs.\nExamples\nThis expression in a computed field returns a warning if no data exists and the number of\nrows if there is data:\nIf(RowCount() = 0, \"No Data\", String(RowCount()))\nSee also\nRowCount\n2.4.111 RowHeight\nDescription\nReports the height of a row associated with a band in a DataWindow object.\nSyntax\nRowHeight ( )\nReturn value\n"}
{"page": 146, "text": "DataWindow Expression Functions\nPage 146\nLong. Returns the height of the row in the units specified for the DataWindow object if it\nsucceeds, and -1 if an error occurs.\nUsage\nWhen you call RowHeight in a band other than the detail band, it reports on a row in the\ndetail band. See GetRow for a table specifying which row is associated with each band for\nreporting purposes.\nWhen a band has Autosize Height set to true, you should avoid using the RowHeight\nDataWindow expression function to set the height of any element in the row. Doing so can\nresult in a logical inconsistency between the height of the row and the height of the element.\nIf you need to use RowHeight, you must set the Y coordinate of the element to 0 on the\nPosition page in the Properties view, otherwise the bottom of the element might be clipped.\nYou must do this for every element that uses such an expression. If you move any elements in\nthe band, make sure that their Y coordinates are still set to 0.\nYou should not use an expression whose runtime value is greater than the value returned by\nRowHeight. For example, you should not set the height of a column to rowheight() + 30.\nSuch an expression produces unpredictable results at runtime.\nExamples\nThis expression for a computed field in the detail band displays the height of each row:\nRowHeight()\nSee also\nGetRow\n2.4.112 Second\nDescription\nObtains the number of seconds in the seconds portion of a time value.\nSyntax\nSecond ( time )\nTable 2.101:\nArgument\nDescription\ntime\nThe time value from which you want the seconds\nReturn value\nInteger. Returns the seconds portion of time (00 to 59).\nExamples\nThis expression returns 31:\nSecond(19:01:31)\nSee also\nHour\n"}
{"page": 147, "text": "DataWindow Expression Functions\nPage 147\nMinute\nSecond in Section 2.4.677, \u201cSecond\u201d in PowerScript Reference\n2.4.113 SecondsAfter\nDescription\nGets the number of seconds one time occurs after another.\nSyntax\nSecondsAfter ( time1, time2 )\nTable 2.102:\nArgument\nDescription\ntime1\nA time value that is the start time of the interval being measured\ntime2\nA time value that is the end time of the interval\nReturn value\nLong. Returns the number of seconds time2 occurs after time1. If time2 occurs before time1,\nSecondsAfter returns a negative number.\nExamples\nThis expression returns 15:\nSecondsAfter(21:15:30, 21:15:45)\nThis expression returns -15:\nSecondsAfter(21:15:45, 21:15:30)\nThis expression returns 0:\nSecondsAfter(21:15:45, 21:15:45)\nSee also\nDaysAfter\nSecondsAfter in Section 2.4.678, \u201cSecondsAfter\u201d in PowerScript Reference\n2.4.114 Sign\nDescription\nReports whether the number is negative, zero, or positive by checking its sign.\nSyntax\nSign ( n )\nTable 2.103:\nArgument\nDescription\nn\nThe number for which you want to determine the sign\n"}
{"page": 148, "text": "DataWindow Expression Functions\nPage 148\nReturn value\nInteger. Returns a number (-1, 0, or 1) indicating the sign of n.\nExamples\nThis expression returns 1 (the number is positive):\nSign(5)\nThis expression returns 0:\nSign(0)\nThis expression returns -1 (the number is negative):\nSign(-5)\nSee also\nSign in Section 2.4.809, \u201cSign\u201d in PowerScript Reference\n2.4.115 Sin\nDescription\nCalculates the sine of an angle.\nSyntax\nSin ( n )\nTable 2.104:\nArgument\nDescription\nn\nThe angle (in radians) for which you want the sine\nReturn value\nDouble. Returns the sine of n if it succeeds and -1 if an error occurs.\nExamples\nThis expression returns .8414709848078965:\nSin(1)\nThis expression returns 0:\nSin(0)\nThis expression returns 0:\nSin(pi(1))\nSee also\nCos\nPi\nTan\nSin in Section 2.4.811, \u201cSin\u201d in PowerScript Reference\n"}
{"page": 149, "text": "DataWindow Expression Functions\nPage 149\n2.4.116 Small\nDescription\nFinds a small value at a specified ranking in a column (for example, third-smallest, fifth-\nsmallest) and returns the value of another column or expression based on the result.\nSyntax\nSmall ( returnexp, column, nbottom { FOR range { DISTINCT { expres1 \n   {,  expres2 {, ... } } } } } )\nTable 2.105:\nArgument\nDescription\nreturnexp\nThe value you want returned when the small value is found. Returnexp\nincludes a reference to a column, but not necessarily the column that is\nbeing evaluated for the small value, so that a value is returned from the\nsame row that contains the small value.\ncolumn\nThe column that contains the small value you are searching for. Column\ncan be a column name or a column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nnbottom\nThe relationship of the small value to the column's smallest value. For\nexample, when nbottom is 2, Small finds the second-smallest value.\nFOR range\n(optional)\nThe data that will be included when finding the small value. For most\npresentation styles, values for range are:\n\u2022 ALL -- (Default) The small value of all rows in column.\n\u2022 GROUP n -- The small value of rows in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The small value of the rows in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The small value of all rows in column\nin the crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The small value in column in the range\nspecified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The small value in column in the range\nspecified for the Rows option.\nDISTINCT\n(optional)\nCauses Small to consider only the distinct values in column when\ndetermining the small value. For a value of column, the first row found\nwith the value is used and other rows that have the same value are\nignored.\n"}
{"page": 150, "text": "DataWindow Expression Functions\nPage 150\nArgument\nDescription\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nThe datatype of returnexp. Returns the nbottom-smallest value if it succeeds and -1 if an error\noccurs.\nUsage\nIf you specify range, Small returns the value in returnexp when the value in column is the\nnbottom-smallest value in range. If you specify DISTINCT, Small returns returnexp when\nthe value in column is the nbottom-smallest value of the distinct values in column, or if you\nspecify expresn, then bottom-smallest for each distinct value of expresn.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the Range\nproperty), and the aggregation function uses that range.\nSettings for Rows include the following:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nMin might be faster\nIf you do not need a return value from another column and you want to find the smallest\nvalue (nbottom = 1), use Min; it is faster.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter expressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in the\npainter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThese expressions return the names of the salespersons with the three smallest sales\n(sum_sales is the sum of the sales for each salesperson) in group 2, which might be the\nsalesregion group. Note that sum_sales contains the values being compared, but Small returns\na value in the name column:\nSmall(name, sum_sales, 1 for group 2)\nSmall(name, sum_sales, 2 for group 2)\nSmall(name, sum_sales, 3 for group 2)\nThis example reports the salesperson with the third-smallest sales, considering only the first\nentry for each salesperson:\nSmall(name, sum_sales, 3 for all DISTINCT sum_sales)\nSee also\n"}
{"page": 151, "text": "DataWindow Expression Functions\nPage 151\nLarge\n2.4.117 Space\nDescription\nBuilds a string of the specified length whose value consists of spaces.\nSyntax\nSpace ( n )\nTable 2.106:\nArgument\nDescription\nn\nA long whose value is the length of the string you want filled with spaces\nReturn value\nString. Returns a string filled with n spaces if it succeeds and the empty string (\"\") if an error\noccurs.\nExamples\nThis expression for a computed field returns 10 spaces in the computed field if the value of\nthe rating column is Top Secret; otherwise, it returns the value in rating:\nIf(rating = \"Top Secret\", Space(10), rating)\nSee also\nFill\nSpace in Section 2.4.815, \u201cSpace\u201d in PowerScript Reference\n2.4.118 Sqrt\nDescription\nCalculates the square root of a number.\nSyntax\nSqrt ( n )\nTable 2.107:\nArgument\nDescription\nn\nThe number for which you want the square root\nReturn value\nDouble. Returns the square root of n.\nUsage\nSqrt( n ) is the same as n ^.5.\nTaking the square root of a negative number causes an execution error.\nExamples\n"}
{"page": 152, "text": "DataWindow Expression Functions\nPage 152\nThis expression returns 1.414213562373095:\nSqrt(2)\nThis expression results in an error at execution time:\nSqrt(-2)\nSee also\nSqrt in Section 2.4.816, \u201cSqrt\u201d in PowerScript Reference\n2.4.119 StDev\nDescription\nCalculates an estimate of the standard deviation for the specified column. Standard deviation\nis a measurement of how widely values vary from average.\nSyntax\nStDev ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } )\nTable 2.108:\nArgument\nDescription\ncolumn\nThe column for which you want an estimate for the standard deviation of\nthe values in the rows. Column can be the column name or the column\nnumber preceded by a pound sign (#). Column can also be an expression\nthat includes a reference to the column. The datatype of column must be\nnumeric.\nFOR range\n(optional)\nThe data to be included in the estimate of the standard deviation. For\nmost presentation styles, values for range are:\n\u2022 ALL -- (Default) The estimate of the standard deviation for all values\nin column.\n\u2022 GROUP n -- The estimate of the standard deviation for values in\ncolumn in the specified group. Specify the keyword GROUP followed\nby the group number: for example, GROUP 1.\n\u2022 PAGE -- The estimate of the standard deviation for the values in\ncolumn on a page.\nFor Crosstabs, specify CROSSTAB for range to indicate the standard\ndeviation for all values in column in the crosstab.\nFor Graph objects specify GRAPH and for OLE objects specify OBJECT\nto indicate the standard deviation for values in column in the range\nspecified for the Rows option.\nDISTINCT\n(optional)\nCauses StDev to consider only the distinct values in column when\ndetermining the standard deviation. For a value of column, the first row\nfound with the value is used and other rows that have the same value are\nignored.\n"}
{"page": 153, "text": "DataWindow Expression Functions\nPage 153\nArgument\nDescription\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nDouble. Returns an estimate of the standard deviation for column.\nUsage\nIf you specify range, StDev returns an estimate for the standard deviation of column within\nrange. If you specify DISTINCT, StDev returns an estimate of the standard deviation for the\ndistinct values in column, or if you specify expresn, the estimate of the standard deviation of\nthe rows in column where the value of expresn is distinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data tab page (the Range\nproperty), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nEstimating or calculating actual standard deviation\nStDev assumes that the values in column are a sample of the values in the rows in the column\nin the database table. If you selected all the rows in the column in the DataWindow object's\nSELECT statement, use StDevP to compute the standard deviation of the population.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter expressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in the\npainter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThese examples all assume that the SELECT statement did not retrieve all the rows in the\ndatabase table. StDev is intended to work with a subset of rows, which is a sample of the full\nset of data.\nThis expression returns an estimate for standard deviation of the values in the column named\nsalary:\nStDev(salary)\nThis expression returns an estimate for standard deviation of the values in the column named\nsalary in group 1:\nStDev(salary for group 1)\nThis expression returns an estimate for standard deviation of the values in column 4 on the\npage:\n"}
{"page": 154, "text": "DataWindow Expression Functions\nPage 154\nStDev(#4 for page)\nThis expression entered in the Value box on the Data tab page in the graph's property sheet\nreturns an estimate for standard deviation of the values in the qty_used column in the graph:\nStDev(qty_used for graph)\nThis expression for a computed field in a crosstab returns the estimate for standard deviation\nof the values in the qty_ordered column in the crosstab:\nStDev(qty_ordered for crosstab)\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the estimated standard deviation of the order amount for the\ndistinct order numbers:\nStDev(order_amt for all DISTINCT order_nbr)\nSee also\nStDevP\nVar\n2.4.120 StDevP\nDescription\nCalculates the standard deviation for the specified column. Standard deviation is a\nmeasurement of how widely values vary from average.\nSyntax\nStDevP ( column { FOR range { DISTINCT { expres1 {, expres2  {, ... } } } } } )\nTable 2.109:\nArgument\nDescription\ncolumn\nThe column for which you want the standard deviation of the values\nin the rows. Column can be the column name or the column number\npreceded by a pound sign (#). Column can also be an expression that\nincludes a reference to the column. The datatype of column must be\nnumeric.\nFOR range\n(optional)\nThe data to be included in the standard deviation. For most presentation\nstyles, values for range are:\n\u2022 ALL -- (Default) The standard deviation for all values in column.\n\u2022 GROUP n -- The standard deviation for values in column in the\nspecified group. Specify the keyword GROUP followed by the group\nnumber: for example, GROUP 1.\n\u2022 PAGE -- The standard deviation for the values in column on a page.\nFor Crosstabs, specify CROSSTAB for range to indicate the standard\ndeviation for all values in column in the crosstab.\n"}
{"page": 155, "text": "DataWindow Expression Functions\nPage 155\nArgument\nDescription\nFor Graph objects specify GRAPH and for OLE objects specify OBJECT\nto indicate the standard deviation for values in column in the range\nspecified for the Rows option.\nDISTINCT\n(optional)\nCauses StDevP to consider only the distinct values in column when\ndetermining the standard deviation. For a value of column, the first row\nfound with the value is used and other rows that have the same value are\nignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nDouble. Returns the standard deviation for column.\nUsage\nIf you specify range, StDevP returns the standard deviation for column within range. If you\nspecify DISTINCT, StDevP returns an estimate of the standard deviation for the distinct\nvalues in column, or if you specify expresn, the estimate of the standard deviation of the rows\nin column where the value of expresn is distinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data tab page (the Range\nproperty), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nEstimating or calculating actual standard deviation\nStDevP assumes that the values in column are the values in all the rows in the column in the\ndatabase table. If you did not select all rows in the column in the SELECT statement, use\nStDev to compute an estimate of the standard deviation of a sample.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter expressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in the\npainter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThese examples all assume that the SELECT statement retrieved all rows in the database\ntable. StDevP is intended to work with a full set of data, not a subset.\nThis expression returns the standard deviation of the values in the column named salary:\nStDevP(salary)\n"}
{"page": 156, "text": "DataWindow Expression Functions\nPage 156\nThis expression returns the standard deviation of the values in group 1 in the column named\nsalary:\nStDevP(salary for group 1)\nThis expression returns the standard deviation of the values in column 4 on the page:\nStDevP(#4 for page)\nThis expression entered in the Value box on the Data tab page in the graph's property sheet\nreturns the standard deviation of the values in the qty_ordered column in the graph:\nStDevP(qty_ordered for graph)\nThis expression for a computed field in a crosstab returns the standard deviation of the values\nin the qty_ordered column in the crosstab:\nStDevP(qty_ordered for crosstab)\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the standard deviation of the order amount for the distinct\norder numbers:\nStDevP(order_amt for all DISTINCT order_nbr)\nSee also\nStDev\nVarP\n2.4.121 String\nDescription\nFormats data as a string according to a specified display format mask. You can convert and\nformat date, DateTime, numeric, and time data. You can also apply a display format to a\nstring.\nSyntax\nString ( data {, format } )\nTable 2.110:\nArgument\nDescription\ndata\nThe data you want returned as a string with the specified formatting. Data\ncan have a date, DateTime, numeric, time, or string datatype.\nformat (optional) A string of the display masks you want to use to format the data. The\nmasks consist of formatting information specific to the datatype of data.\nIf data is type string, format is required.\nThe format string can consist of more than one mask, depending on the\ndatatype of data. Each mask is separated by a semicolon. See Usage for\ndetails on each datatype.\nReturn value\n"}
{"page": 157, "text": "DataWindow Expression Functions\nPage 157\nString. Returns data in the specified format if it succeeds and the empty string (\"\") if the\ndatatype of data does not match the type of display mask specified or format is not a valid\nmask.\nUsage\nFor date, DateTime, numeric, and time data, the system's default format is used for the\nreturned string if you do not specify a format. For numeric data, the default format is the\n[General] format.\nFor string data, a display format mask is required. (Otherwise, the function would have\nnothing to do.)\nThe format can consist of one or more masks:\n\u2022 Formats for date, DateTime, string, and time data can include one or two masks. The first\nmask is the format for the data; the second mask is the format for a null value.\n\u2022 Formats for numeric data can have up to four masks. A format with a single mask handles\nboth positive and negative data. If there are additional masks, the first mask is for positive\nvalues, and the additional masks are for negative, zero, and null values.\nA format can include color specifications.\nIf the display format does not match the datatype, the attempt to apply the mask produces\nunpredictable results.\nFor information on specifying display formats, see Section 6.5.4, \u201cDefining display formats\u201d\nin Users Guide.\nWhen you use String to format a date and the month is displayed as text (for example, when\nthe display format includes \"mmm\"), the month is in the language of the deployment files\navailable when the application is run. If you have installed localized files in the development\nenvironment or on a user's machine, then on that machine the month in the resulting string\nwill be in the language of the localized files.\nFor information about localized deployment files, see Section 8.1, \u201cInternationalizing an\nApplication\u201d in Application Techniques.\nExamples\nThis expression returns Jan 31, 2005:\nString(2005-01-31, \"mmm dd, yyyy\")\nThis expression returns Jan 31, 2005 6 hrs and 8 min:\nString(2005-01-31 06:08:00, 'mmm dd, yyyy, h \"hrs and\" m \"min\"')\nThis expression:\nString(nbr, \"0000;(000);****;empty\")\nreturns:\n0123 if nbr is 123\n(123) if nbr is -123\n**** if nbr is 0\nempty if nbr is null\n"}
{"page": 158, "text": "DataWindow Expression Functions\nPage 158\nThis expression returns A-B-C:\nString(\"ABC\", \"@-@-@\")\nThis expression returns A*B:\nString(\"ABC\", \"@*@\")\nThis expression returns ABC:\nString(\"ABC\", \"@@@\")\nThis expression returns a space:\nString(\"ABC\", \" \")\nThis expression returns 6 hrs and 8 min:\nString(06:08:02,'h \"hrs and\" m \"min\"')\nThis expression returns 08:06:04 pm:\nString(20:06:04, \"hh:mm:ss am/pm\")\nThis expression returns 8:06:04 am:\nString(08:06:04, \"h:mm:ss am/pm\")\nThis expression returns 6:11:25.300000:\nString(6:11:25.300000, \"h:mm:ss.ffffff\")\nSee also\nString in Section 2.4.826, \u201cString\u201d in PowerScript Reference\n2.4.122 StripRTF\nDescription\nRemoves the rich text formatting from the specified column\nSyntax\nStripRTF ( string )\nTable 2.111:\nArgument\nDescription\nstring\nThe column to be stripped of rich text formatting.\nExamples\nThis expression is used in a compute field expression to remove the formatting from a rich\ntext edit column and display plain text in the compute field.\nStripRTF(rte_description)\n2.4.123 Sum\nDescription\nCalculates the sum of the values in the specified column.\n"}
{"page": 159, "text": "DataWindow Expression Functions\nPage 159\nSyntax\nSum ( column { FOR range { DISTINCT { expres1 {, expres2  {, ... } } } } } )\nTable 2.112:\nArgument\nDescription\ncolumn\nThe column for which you want the sum of the data values. Column can\nbe the column name or the column number preceded by a pound sign\n(#). Column can also be an expression that includes a reference to the\ncolumn. The datatype of column must be numeric.\nFOR range\n(optional)\nThe data to be included in the sum. For most presentation styles, values\nfor range are:\n\u2022 ALL -- (Default) The sum of all values in column.\n\u2022 GROUP n -- The sum of values in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The sum of the values in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The sum of all values in column in the\ncrosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The sum of values in column in the range\nspecified for the Rows option of the graph.\n\u2022 OBJECT -- (OLE objects only) The sum of values in column in the\nrange specified for the Rows option of the OLE object.\nDISTINCT\n(optional)\nCauses Sum to consider only the distinct values in column when\ndetermining the sum. For a value of column, the first row found with the\nvalue is used and other rows that have the same value are ignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nThe appropriate numeric datatype. Returns the sum of the data values in column.\nUsage\nIf you specify range, Sum returns the sum of the values in column within range. If you\nspecify DISTINCT, Sum returns the sum of the distinct values in column, or if you specify\nexpresn, the sum of the values of column where the value of expresn is distinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the\n"}
{"page": 160, "text": "DataWindow Expression Functions\nPage 160\nRange property), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nNull values are ignored and are not included in the calculation.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThis expression returns the sum of the values in group 1 in the column named salary:\nSum(salary for group 1)\nThis expression returns the sum of the values in column 4 on the page:\nSum(#4 for page)\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the sum of the order amount for the distinct order numbers:\nSum(order_amt for all DISTINCT order_nbr)\nSee also\nExample 1: counting null values in a column\nExample 2: counting active and terminated employees\n2.4.124 Tan\nDescription\nCalculates the tangent of an angle.\nSyntax\nTan ( n )\nTable 2.113:\nArgument\nDescription\nn\nThe angle (in radians) for which you want the tangent\nReturn value\nDouble. Returns the tangent of n if it succeeds and -1 if an error occurs.\n"}
{"page": 161, "text": "DataWindow Expression Functions\nPage 161\nExamples\nBoth these expressions return 0:\nTan(0)\nTan(Pi(1))\nThis expression returns 1.55741:\nTan(1)\nSee also\nCos\nPi\nSin\nTan in Section 2.4.837, \u201cTan\u201d in PowerScript Reference\n2.4.125 Time\nDescription\nConverts a string to a time datatype.\nSyntax\nTime ( string )\nTable 2.114:\nArgument\nDescription\nstring\nA string containing a valid time (such as 8 am or 10:25) that you want\nreturned as a time datatype. Only the hour is required; you do not have to\ninclude the minutes, seconds, or microseconds of the time or am or pm.\nThe default value for minutes and seconds is 00 and for microseconds is\n000000. am or pm is determined automatically.\nReturn value\nTime. Returns the time in string as a time datatype. If string does not contain a valid time,\nTime returns 00:00:00.\nExamples\nThis expression returns the time datatype for 45 seconds before midnight (23:59:15):\nTime(\"23:59:15\")\nThis expression for a computed field returns the value in the time_received column as a value\nof type time if time_received is not the empty string. Otherwise, it returns 00:00:00:\nIf(time_received = \"\" ,00:00:00, Time(time_received))\nThis example is similar to the previous one, except that it returns 00:00:00 if time_received\ncontains a null value:\nIf(IsNull(time_received), 00:00:00, Time(time_received))\nSee also\n"}
{"page": 162, "text": "DataWindow Expression Functions\nPage 162\nTime in Section 2.4.840, \u201cTime\u201d in PowerScript Reference\n2.4.126 Today\nDescription\nObtains the system date and time.\nSyntax\nToday ( )\nReturn value\nDateTime. Returns the current system date and time.\nUsage\nTo display both the date and the time, a computed field must have a display format that\nincludes the time.\nThe PowerScript and DataWindow painter versions of the Today function have different\ndatatypes. The return value of the PowerScript Today function is date.\nExamples\nThis expression for a computed field displays the date and time when the display format for\nthe field is \"mm/dd/yy hh:mm\":\nToday()\nSee also\nNow\nToday in Section 2.4.843, \u201cToday\u201d in PowerScript Reference\n2.4.127 Trim\nDescription\nRemoves leading and trailing spaces from a string.\nSyntax\nTrim ( string )\nTable 2.115:\nArgument\nDescription\nstring\nThe string you want returned with leading and trailing spaces deleted\nReturn value\nString. Returns a copy of string with all leading and trailing spaces deleted if it succeeds and\nthe empty string (\"\") if an error occurs.\nUsage\nTrim is useful for removing spaces that a user might have typed before or after newly entered\ndata.\n"}
{"page": 163, "text": "DataWindow Expression Functions\nPage 163\nExamples\nThis expression returns BABE RUTH:\nTrim(\" BABE RUTH \")\nSee also\nLeftTrim\nRightTrim\nTrim in Section 2.4.859, \u201cTrim\u201d in PowerScript Reference\n2.4.128 Truncate\nDescription\nTruncates a number to the specified number of decimal places.\nSyntax\nTruncate ( x,  n )\nTable 2.116:\nArgument\nDescription\nx\nThe number you want to truncate.\nn\nThe number of decimal places to which you want to truncate x. Valid\nvalues are 0 through 28.\nReturn value\nThe datatype of x. If n is positive, returns x truncated to the specified number of decimal\nplaces. If n is negative, returns x truncated to (- n +1) places before the decimal point.\nReturns -1 if it fails.\nExamples\nThis expression returns 9.2:\nTruncate(9.22, 1)\nThis expression returns 9.2:\nTruncate(9.28, 1)\nThis expression returns 9:\nTruncate(9.9, 0)\nThis expression returns -9.2:\nTruncate(-9.29, 1)\nThis expression returns 0:\nTruncate(9.2, -1)\nThis expression returns 50:\n"}
{"page": 164, "text": "DataWindow Expression Functions\nPage 164\nTruncate(54, -1)\nSee also\nCeiling\nInt\nRound\nTruncate in Section 2.4.861, \u201cTruncate\u201d in PowerScript Reference\n2.4.129 Upper\nDescription\nConverts all characters in a string to uppercase letters.\nSyntax\nUpper ( string )\nTable 2.117:\nArgument\nDescription\nstring\nThe string you want to convert to uppercase letters\nReturn value\nString. Returns string with lowercase letters changed to uppercase if it succeeds and the\nempty string (\"\") if an error occurs.\nExamples\nThis expression returns BABE RUTH:\nUpper(\"Babe Ruth\")\nSee also\nLower\nUpper in Section 2.4.869, \u201cUpper\u201d in PowerScript Reference\n2.4.130 Var\nDescription\nCalculates an estimate of the variance for the specified column. The variance is the square of\nthe standard deviation.\nSyntax\nVar ( column { FOR range { DISTINCT { expres1 {, expres2  {, ... } } } } } )\nTable 2.118:\nArgument\nDescription\ncolumn\nThe column for which you want an estimate for the variance of the values\nin the rows. Column can be the column name or the column number\npreceded by a pound sign (#). Column can also be an expression that\n"}
{"page": 165, "text": "DataWindow Expression Functions\nPage 165\nArgument\nDescription\nincludes a reference to the column. The datatype of column must be\nnumeric.\nFOR range\n(optional)\nThe data to be included in the estimate of the variance. For most\npresentation styles, values for range are:\n\u2022 ALL -- (Default) The estimate of the variance for all rows in column.\n\u2022 GROUP n -- The estimate of the variance for rows in column in the\nspecified group. Specify the keyword GROUP followed by the group\nnumber: for example, GROUP 1.\n\u2022 PAGE -- The estimate of the variance for the rows in column on a\npage.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The estimate of the variance for all\nrows in column in the crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The estimate of the variance for rows in\ncolumn in the range specified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The estimate of the variance for rows\nin column in the range specified for the Rows option.\nDISTINCT\n(optional)\nCauses Var to consider only the distinct values in column when\ndetermining the variance. For a value of column, the first row found with\nthe value is used and other rows that have the same value are ignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nDouble or decimal if the arguments are decimal. Returns an estimate for the variance for\ncolumn. If you specify group, Var returns an estimate for the variance for column within\ngroup.\nUsage\nIf you specify range, Var returns an estimate for the variance for column within range. If\nyou specify DISTINCT, Var returns the variance for the distinct values in column, or if\nyou specify expresn, the estimate for the variance of the rows in column where the value of\nexpresn is distinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the Range\nproperty), and the aggregation function uses that range.\nSettings for Rows include the following:\n"}
{"page": 166, "text": "DataWindow Expression Functions\nPage 166\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nEstimating variance or calculating actual variance\nVar assumes that the values in column are a sample of the values in rows in the\ncolumn in the database table. If you select all rows in the column in the SELECT\nstatement, use VarP to compute the variance of a population.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThese examples all assume that the SELECT statement did not retrieve all of the rows in the\ndatabase table. Var is intended to work with a subset of rows, which is a sample of the full set\nof data.\nThis expression returns an estimate for the variance of the values in the column named salary:\nVar(salary)\nThis expression returns an estimate for the variance of the values in the column named salary\nin group 1:\nVar(salary for group 1)\nThis expression entered in the Value box on the Data property page in the graph's property\nsheet returns an estimate for the variance of the values in the quantity column in the graph:\nVar(quantity for graph)\nThis expression for a computed field in a crosstab returns an estimate for the variance of the\nvalues in the quantity column in the crosstab:\nVar(quantity for crosstab)\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the estimate for the variance of the order amount for the\ndistinct order numbers:\nVar(order_amt for all DISTINCT order_nbr)\nSee also\nStDev\nVarP\n"}
{"page": 167, "text": "DataWindow Expression Functions\nPage 167\n2.4.131 VarP\nDescription\nCalculates the variance for the specified column. The variance is the square of the standard\ndeviation.\nSyntax\nVarP ( column { FOR range { DISTINCT { expres1 {, expres2 {, ... } } } } } )\nTable 2.119:\nArgument\nDescription\ncolumn\nThe column for which you want the variance of the values in the rows.\nColumn can be the column name or the column number preceded by\na pound sign (#). Column can also be an expression that includes a\nreference to the column. The datatype of column must be numeric.\nFOR range\n(optional)\nThe data that will be included in the variance. For most presentation\nstyles, values for range are:\n\u2022 ALL -- (Default) The variance for all rows in column.\n\u2022 GROUP n -- The variance for rows in column in the specified group.\nSpecify the keyword GROUP followed by the group number: for\nexample, GROUP 1.\n\u2022 PAGE -- The variance for the rows in column on a page.\nFor Crosstabs, specify CROSSTAB for range:\n\u2022 CROSSTAB -- (Crosstabs only) The variance for all rows in column in\nthe crosstab.\nFor Graph and OLE objects, specify one of the following:\n\u2022 GRAPH -- (Graphs only) The variance for rows in column in the range\nspecified for the Rows option.\n\u2022 OBJECT -- (OLE objects only) The variance for rows in column in the\nrange specified for the Rows option.\nDISTINCT\n(optional)\nCauses VarP to consider only the distinct values in column when\ndetermining the variance. For a value of column, the first row found with\nthe value is used and other rows that have the same value are ignored.\nexpresn\n(optional)\nOne or more expressions that you want to evaluate to determine distinct\nrows. Expresn can be the name of a column, a function, or an expression.\nReturn value\nDouble or decimal if the arguments are decimal. Returns the variance for column. If you\nspecify group, Var returns the variance for column within range.\nUsage\n"}
{"page": 168, "text": "DataWindow Expression Functions\nPage 168\nIf you specify range, VarP returns the variance for column within range. If you specify\nDISTINCT, VarP returns the variance for the distinct values in column, or if you specify\nexpresn, the variance of the rows in column where the value of expresn is distinct.\nFor graphs and OLE objects, you do not select the range when you call the function. The\nrange has already been determined by the Rows setting on the Data property page (the\nRange property), and the aggregation function uses that range. Settings for Rows include the\nfollowing:\n\u2022 For the Graph or OLE presentation style, Rows is always All.\n\u2022 For Graph controls, Rows can be All, Page, or Group.\n\u2022 For OLE controls, Rows can be All, Current Row, Page, or Group. The available choices\ndepend on the layer the control occupies.\nEstimating variance or calculating actual variance\nVarP assumes that the values in column are the values in all rows in the column in\nthe database table. If you did not select all the rows in the column in the SELECT\nstatement, use Var to compute an estimate of the variance of a sample.\nNot in validation rules or filter expressions\nYou cannot use this or other aggregate functions in validation rules or filter\nexpressions.\nUsing an aggregate function cancels the effect of setting Retrieve Rows As Needed in\nthe painter. To do the aggregation, a DataWindow object always retrieves all rows.\nExamples\nThese examples all assume that the SELECT statement retrieved all rows in the database\ntable. VarP is intended to work with a full set of data, not a subset.\nThis expression returns the variance of the values in the column named salary:\nVarP(salary)\nThis expression returns the variance of the values in group 1 in the column named salary:\nVarP(salary for group 1)\nThis expression returns the variance of the values in column 4 on the page:\nVarP(#4 for page)\nThis expression entered in the Value box on the Data property page in the graph's property\nsheet returns the variance of the values in the quantity column in the graph:\nVarP(quantity for graph)\nThis expression for a computed field in a crosstab returns the variance of the values in the\nquantity column in the crosstab:\nVarP(quantity for crosstab)\n"}
{"page": 169, "text": "DataWindow Expression Functions\nPage 169\nAssuming a DataWindow object displays the order number, amount, and line items for each\norder, this computed field returns the variance of the order amount for the distinct order\nnumbers:\nVarP(order_amt for all DISTINCT order_nbr)\nSee also\nStDevP\nVar\n2.4.132 WordCap\nDescription\nSets the first letter of each word in a string to a capital letter and all other letters to lowercase\n(for example, ROBERT E. LEE would be Robert E. Lee).\nSyntax\nWordCap ( string )\nTable 2.120:\nArgument\nDescription\nstring\nA string or expression that evaluates to a string that you want to display\nwith initial capital letters (for example, Monday Morning)\nReturn value\nString. Returns string with the first letter of each word set to uppercase and the remaining\nletters lowercase if it succeeds, and null if an error occurs.\nExamples\nThis expression returns Boston, Massachusetts:\nWordCap(\"boston, MASSACHUSETTS\")\nThis expression concatenates the characters in the emp_fname and emp_lname columns and\nmakes the first letter of each word uppercase:\nWordCap(emp_fname + \" \" + emp_lname)\n2.4.133 Year\nDescription\nGets the year of a date value.\nSyntax\nYear ( date )\nTable 2.121:\nArgument\nDescription\ndate\nThe date value from which you want the year\n"}
{"page": 170, "text": "DataWindow Expression Functions\nPage 170\nReturn value\nInteger. Returns an integer whose value is a 4-digit year adapted from the year portion of date\nif it succeeds and 1900 if an error occurs.\nIf the year is two digits, then the century is set as follows. If the year is between 00 to 49, the\nfirst two digits are 20; if the year is between 50 and 99, the first two digits are 19.\nUsage\nObtains the year portion of date. Years from 1000 to 3000 inclusive are handled.\nIf your data includes dates before 1950, such as birth dates, always specify a 4-digit year so\nthat Year (and other functions, such as Sort) interpret the date as intended.\nRegional settings\nTo make sure you get correct return values for the year, you must verify that yyyy\nis the Short Date Style for year in the Regional Settings of the user's Control Panel.\nYour program can check this with the RegistryGet function.\nIf the setting is not correct, you can ask the user to change it manually or to have the\napplication change it (by calling the RegistrySet function). The user might need to\nreboot after the setting is changed.\nExamples\nThis expression returns 2005:\nYear(2005-01-31)\nSee also\nDay\nMonth\nYear in Section 2.4.884, \u201cYear\u201d in PowerScript Reference\n"}
{"page": 171, "text": "DataWindow Object Properties\nPage 171\n3 DataWindow Object Properties\nAbout this chapter\nThis chapter describes the properties that control the appearance and behavior of a\nDataWindow object.\n3.1 Overview of DataWindow object properties\nDataWindow object properties apply to the DataWindow object itself, not to the\nDataWindow control or DataStore that contains it. There are several ways you can affect the\nvalues of DataWindow object properties at runtime:\n\u2022 Use the general-purpose Describe and Modify methods to get and set property values.\n\u2022 Use methods that get and set specific properties.\n\u2022 Use methods that get and set specific properties.\n\u2022 For many properties, enter expressions in the painter that set properties conditionally at\nruntime.\n\u2022 You can use the SyntaxFromSQL method on a transaction object to generate DataWindow\nsource code that sets some DataWindow properties. You can use the generated code in the\nCreate method to create new DataWindows.\nSummary tables in the first part of this chapter\nThe tables in Controls in a DataWindow and their properties list the properties for each\ncontrol within a DataWindow object, with short descriptions. There are also tables for\nSyntaxFromSql object keywords. After the first table of DataWindow properties, the tables\nare alphabetical by control and keyword name.\nThe tables include check mark columns that identify whether you can use that property\nwith Modify (M) or SyntaxFromSql (S). When (exp) is included in the description, you can\nspecify a DataWindow expression as the value for that property. A DataWindow expression\nlets you specify conditions for determining the property value.\nYou can get the value of all properties in all tables\nAt runtime, you can use Describe or dot notation to get the value of all properties\nlisted in all tables.\nAlphabetical reference list in the second part of this chapter\nThe second half of this chapter is an alphabetical list of properties with descriptions, syntax,\nand examples. When you find a property you want to use in the first part, look up the\nproperty in the alphabetical list to find the specific syntax you need to use. In the tables that\ndescribe the property values, (exp) again indicates that you can use a DataWindow expression\nfor the value.\nAccessing properties in different DataWindow environments\nThe property reference has syntax for Describe and Modify and for PowerBuilder dot\nnotation.\n"}
{"page": 172, "text": "DataWindow Object Properties\nPage 172\nExamples and quoted strings\nThe only examples given are PowerBuilder examples. However, the arguments for Describe\nand Modify are quoted strings that are generally valid in all environments. If the strings\ninclude nested quotes, see Nested strings and special characters for DataWindow object\nproperties for information on the appropriate escape character in each environment.\nFor more information and examples of setting properties, see:\n\u2022 Accessing DataWindow Object Properties in Code\n\u2022 Describe and Modify methods in Methods for the DataWindow Control\n\u2022 SyntaxFromSql method in Section 2.4.833, \u201cSyntaxFromSQL\u201d in PowerScript Reference\n3.2 Controls in a DataWindow and their properties\nThe tables in this section list the properties that apply to DataWindow objects and\nSyntaxFromSql (Group, Style, and Title) keywords.\nTable 3.1:\nTopic for DataWindow objects and keywords\nProperties for the DataWindow object\nProperties for Button controls in DataWindow objects\nProperties for Column controls in DataWindow objects\nProperties for Computed Field controls in DataWindow objects\nProperties for Graph controls in DataWindow objects\nProperties for GroupBox controls in DataWindow objects\nProperties for the Group keyword\nProperties for InkPicture controls in DataWindow objects\nProperties for Line controls in DataWindow objects\nProperties for OLE Object controls in DataWindow objects\nProperties for Oval, Rectangle, and RoundRectangle controls in DataWindow objects\nAdditional properties for RoundRectangle controls in DataWindow objects\nProperties for Picture controls in DataWindow objects\nProperties for Report controls in DataWindow objects\nProperties for the Style keyword\nProperties for TableBlob controls in DataWindow objects\nProperties for Text controls in DataWindow objects\nTitle keyword\n3.2.1 Properties for the DataWindow object\nAn x in the M (Modify) column means you can change the property. An x in the S column\nmeans you can use the property with the SyntaxFromSql method. When (exp) is included in\nthe description, you can specify a DataWindow expression as the value for that property.\n"}
{"page": 173, "text": "DataWindow Object Properties\nPage 173\nObsolete feature\nAn obsolete feature means a feature that is available, but is no longer eligible for\ntechnical support and will no longer be enhanced.\nTable 3.2:\nProperty for the\nDataWindow\nM\nS\nDescription\nAttributes\n \n \nAll general properties.\nBands\n \n \nList of bands.\nBandname.property x\n \nColor, height, and so on for a band, where bandname\nis Detail, Footer, Header, Summary, Trailer, or\nTreeView.Level.\nBandname.Text\nx\n \nRich text content where bandname is Detail, Footer, or\nHeader.\nBrushmode\nx\n \nSetting used for background or primary gradient.\nColor\nx\nx\nBackground color.\nColumn.Count\n \n \nNumber of columns.\nCrosstab.property\nx\n \nSettings for a crosstab DataWindow.\nCSSGen.property\nx\n \nSettings that specify the physical path to which a\ngenerated CSS style sheet is published and the URL\nwhere the style sheet is located.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nData\n \n \nDescription of data.\nData.HTML\n \n \nDescription of the data and format of the DataWindow\nin HTML format.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nData.HTMLTable\n \n \nDescription of the data in the DataWindow in HTML\ntable format.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nData.XHTML\n \n \nA string containing the row data content of the\nDataWindow object in XHTML format.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\n"}
{"page": 174, "text": "DataWindow Object Properties\nPage 174\nProperty for the\nDataWindow\nM\nS\nDescription\nData.XML\n \n \nA string containing the row data content of the\nDataWindow object in XML format.\nData.XMLDTD\n \n \nA string containing the full document type definition\n(DTD) of the XML output for a DataWindow object.\nData.XMLSchema  \n \nA string containing the full schema of the XML output\nof a DataWindow object.\nData.XMLWeb\n \n \nA string containing browser-specific JavaScript that\nperforms the XSLT transformation on the browser after\nthe XML Web DataWindow generator generates all\nnecessary components.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nData.XSLFO\n \n \nA string containing XSL Formatting Objects (XSL-\nFO) that represents the data and presentation of the\nDataWindow object.\nDetail.property\nx\n \nColor, height, and so on for the detail band.\nEditMask.property x\n \nSettings for EditMask edit style.\nExport.PDF.Distill.CustomPostScript\nx\n \nSetting that enables you to specify the PostScript printer\ndriver settings used when data is exported to PDF using\nthe Distill! method.\nExport.PDF.Methodx\n \nSetting that determines whether data is exported to\nPDF from a DataWindow object by printing to a\nPostScript file and distilling to PDF, or by saving\nin XSL Formatting Objects (XSL-FO) format and\nprocessing to PDF.\nExport.PDF.NativePDF.Author\nx\n \nSetting that enables you to specify the author for the\nPDF file when using the PDFlib method to print data\nfrom a DataWindow object to a PDF file.\nExport.PDF.NativePDF.CustomOrientation\nx\n \nSetting that enables you to specify the page orientation\nwhen using the PDFlib method to print data from a\nDataWindow object to a PDF file.\nExport.PDF.NativePDF.CustomSize\nx\n \nSetting that enables you to specify the paper size\nwhen using the PDFlib method to print data from a\nDataWindow object to a PDF file.\nExport.PDF.NativePDF.ImageFormat\nx\n \nSetting that enables you to select a format for images in\nthe PDF file when you use the PDFlib method to save\ndata from a DataWindow object to a PDF file.\n"}
{"page": 175, "text": "DataWindow Object Properties\nPage 175\nProperty for the\nDataWindow\nM\nS\nDescription\nExport.PDF.NativePDF.Keywords\nx\n \nSetting that enables you to specify the keywords for the\nPDF file when using the PDFlib method to print data\nfrom a DataWindow object to a PDF file.\nExport.PDF.NativePDF.MasterPassword\nx\n \nSetting that enables you to set a password for the\nadministration permissions -- print, copy, edit, etc. --\nto the generated PDF file, when you use the PDFlib\nmethod to save data from a DataWindow object to a\nPDF file.\nExport.PDF.NativePDF.PDFStandard\nx\n \nSetting that enables you to select a PDF conformance\nlevel when you use the PDFlib method to save data\nfrom a DataWindow object to a PDF file.\nExport.PDF.NativePDF.Restrictions\nx\n \nSetting that enables you to set the permissions\n(including copying/printing/editing) of the generated\nPDF file, when you use the PDFlib method to save data\nfrom a DataWindow object to a PDF file.\nExport.PDF.NativePDF.Subject\nx\n \nSetting that enables you to specify the subject for the\nPDF file when using the PDFlib method to print data\nfrom a DataWindow object to a PDF file.\nExport.PDF.NativePDF.UserPassword\nx\n \nSetting that enables you to set a password for opening\nthe generated PDF file, when you use the PDFlib\nmethod to save data from a DataWindow object to a\nPDF file.\nExport.PDF.NativePDF.UsePrintSpec\nx\n \nSetting that enables you to use the page orientation and\npaper size settings in the Print Specifications tab or in\nthe Print.Orientation and Print.Paper.Size properties,\nwhen you use the PDFlib method to save data from a\nDataWindow object to a PDF file.\nExport.PDF.XSLFOP.Print\nx\n \nSetting that enables you to send a DataWindow object\ndirectly to a printer using platform-independent Java\nprinting when using the XSL-FO method to export to\nPDF. This is an option of the Apache FOP processor.\nExport.XHTML.TemplateCount\n \n \nThe number of XHTML export templates associated\nwith a DataWindow object.\nExport.XHTML.Template[ ].Name\n \n \nThe name of an XHTML export template associated\nwith a DataWindow object.\nExport.XHTML.UseTemplate\nx\n \nSetting that optionally controls the logical structure of\nthe XHTML generated by a DataWindow object from a\nDataWindow data expression using dot notation.\nExport.XML.HeadGroups\nx\n \nSetting that causes elements, attributes, and all other\nitems above the Detail Start element in an XML export\ntemplate for a group DataWindow to be iterated for\neach group in the exported XML.\n"}
{"page": 176, "text": "DataWindow Object Properties\nPage 176\nProperty for the\nDataWindow\nM\nS\nDescription\nExport.XML.IncludeWhitespace\nx\n \nSetting that determines whether the XML document is\nformatted by inserting whitespace characters (carriage\nreturns, linefeeds, tabs, and spacebar spaces).\nExport.XML.MetaDataType\nx\n \nSetting that controls the type of metadata generated\nwith the XML exported from a DataWindow object\nusing the SaveAs method or a .Data.XML expression.\nExport.XML.SaveMetaData\nx\n \nSetting that controls the storage format for the metadata\ngenerated with the XML exported from a DataWindow\nobject using the SaveAs method or a .Data.XML\nexpression.\nExport.XML.TemplateCount\n \n \nThe number of XML export templates associated with a\nDataWindow object.\nExport.XML.Template[ ].Name\n \n \nThe name of an XML export template associated with a\nDataWindow object.\nExport.XML.UseTemplate\nx\n \nSetting that optionally controls the logical structure of\nthe XML exported from a DataWindow object using the\nSaveAs method or the .Data.XML property.\nFirstRowOnPage\n \n \nThe row number of the first displayed row.\nFont.Bias\nx\n \nTreat fonts as display or printer.\nFooter.property\nx\n \nColor, height, and so on for the footer band (see\nBandname.property in this table).\nGradient.property\nx\n \nSettings that control the gradient display in a\nDataWindow object.\nGrid.ColumnMove x\n \nWhether the user can drag to reposition columns.\nGrid.Lines\nx\n \nOptions for lines in grid DataWindow and crosstab.\nHeader.#.property\nx\n \nColor, height, and so on for a group's header band.\nHeader.property\nx\n \nColor, height, and so on for the header band.\nHelp.property\nx\n \nHelp settings for DataWindow actions.\nHideGrayLine\nx\n \nWhether a gray line displays at page boundaries.\nHorizontalScrollMaximum\n \n \nWidth of scroll box in the horizontal scroll bar.\nHorizontalScrollMaximum2\n \n \nWidth of second scroll box when scroll bar is split.\nHorizontalScrollPosition\nx\n \nPosition of the scroll box in the scroll bar.\nHorizontalScrollPosition2\nx\n \nPosition of scroll box in second split scroll bar.\nHorizontalScrollSplitx\n \nThe position of the split in the scroll bar.\nHTMLDW\nx\n \n(exp) Whether HTML for the DataWindow is\ninteractive and coordinated with a server component for\nretrievals and updates.\nObsolete property\n"}
{"page": 177, "text": "DataWindow Object Properties\nPage 177\nProperty for the\nDataWindow\nM\nS\nDescription\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nHTMLGen.propertyx\n \n(exp) Settings for HTML generation.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nHTMLTable.propertyx\n \nSettings for the display of DataWindow data when\ndisplayed in HTML table format.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nImport.XML.Trace x\n \nSetting that determines whether import trace\ninformation is written to a log file.\nImport.XML.TraceFile\nx\n \nSpecifies the name and location of an import trace file.\nImport.XML.UseTemplate\nx\n \nSetting that optionally controls the logical structure of\nthe XML imported from an XML file to a DataWindow\nobject using the ImportFile method.\nJSGen.property\nx\n \nSettings that specify the physical path to which\ngenerated JavaScript is published and the URL\nindicating the location of the generated JavaScript.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nLabel.property\nx\nx\nSettings for the Label presentation style.\nLastRowOnPage\n \n \nThe last visible row on the page.\nMessage.Title\nx\nx\nThe title of the dialog box that displays errors.\nNested\n \n \nWhether the DataWindow has nested reports.\nNoUserPrompt\nx\n \nDetermines whether an error message is displayed to\nthe user.\nObjects\n \n \nThe controls in the DataWindow.\nOLE.Client.propertyx\n \nSettings for the DataWindow as OLE client.\nPicture.property\nx\n \nSettings that control the background picture display in a\nDataWindow object.\nPointer\nx\n \n(exp) The pointer when over the DataWindow.\nPrint.Preview.property\nx\n \nVarious settings for print preview.\nPrint.property\nx\nx\nVarious settings for printing.\nPrinter\nx\n \nThe currently selected printer.\n"}
{"page": 178, "text": "DataWindow Object Properties\nPage 178\nProperty for the\nDataWindow\nM\nS\nDescription\nProcessing\n \n \nProcessing required by the presentation style.\nQueryMode\nx\n \nWhether the DataWindow is in query mode.\nQuerySort\nx\n \nWhether to sort the result set from the query.\nReadOnly\nx\n \nWhether the DataWindow is read-only.\nRetrieve.AsNeeded x\n \nWhether to retrieve data only as needed.\nRichText.property\nx\n \nSettings for a RichText DataWindow.\nRow.Resize\nx\n \nWhether user can change the height of rows.\nRows_Per_Detail\n \nx\nNumber of rows in each column of N-Up style.\nSelected\nx\n \nList of selected controls.\nSelected.Data\n \n \nList of selected data.\nSelected.Mouse\nx\n \nWhether user can use the mouse to select.\nShowBackColorOnXP\nx\n \nWhether the background color that you select for a\nbutton displays on Windows XP.\nShowDefinition\nx\n \n(exp) Display column names instead of data.\nSparse\nx\n \n(exp) The repeating columns to be suppressed.\nStorage\n \n \nThe amount of storage used by DataWindow.\nStoragePageSize\n \n \nThe default page size for DataWindow storage.\nSummary.property x\n \nColor, height, and so on for the summary band.\nSyntax\n \n \nThe syntax of the DataWindow.\nSyntax.Data\n \n \nThe data of the DataWindow in parse format.\nSyntax.Modified\nx\n \nWhether the syntax has been modified.\nTable.property\nx\n \nVarious settings for the database.\nTable.sqlaction.property\nx\n \nStored procedures for update activity.\nTimer_Interval\nx\nx\nThe milliseconds between timer events.\nTransparency\n(DataWindow\nobjects)\nx\n \nSetting that controls the transparency of the\nbackground/primary gradient color.\nTrailer.#.property\nx\n \nColor, height, and so on for a group's trailer band.\nTree.property\nx\n \nSettings for a TreeView DataWindow.\nTree.Leaf.TreeNodeIconName\nx\n \nThe file name of the tree node icon in the detail band of\na TreeView DataWindow.\nTree.Level.#.propertyx\n \nThe file name of the icon for a TreeView node in a\nTreeView level band when the icon is in either the\nexpanded or collapsed state.\nUnits\n \nx\nThe unit of measure for the DataWindow.\nVerticalScrollMaximum\n \n \nThe height of the scroll box in the scroll bar.\n"}
{"page": 179, "text": "DataWindow Object Properties\nPage 179\nProperty for the\nDataWindow\nM\nS\nDescription\nVerticalScrollPositionx\n \nThe position of the scroll box in the scroll bar.\nXHTMLGen.Browserx\n \nA string that identifies the browser in which XHTML\ngenerated within an XSLT style sheet is displayed.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nXMLGen.property x\n \nSettings that specify the physical path to which XML\nis published and the URL referenced by the JavaScript\nthat transforms the XML to XHTML.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nXSLTGen.property x\n \nSettings that specify the physical path to which the\ngenerated XSLT style sheet is published and the URL\nreferenced by the JavaScript that transforms the XML\nto XHTML.\nObsolete property\nThis property is obsolete because the Web DataWindow\ntechnology is obsolete.\nZoom\nx\n \nThe scaling percentage of the DataWindow.\n3.2.2 Properties for Button controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.3:\nProperty for a Button\nM\nDescription\nAccessibleDescription\nx\nA description of the control for use by assistive\ntechnology tools.\nAccessibleName\nx\nA descriptive label for the control.\nAccessibleRole\n \nA description of the kind of user-interface element that\nthe control is.\nBackground.property\nx\nBackground settings for the button.\nColor\nx\n(exp) The text color.\nDefaultPicture\nx\nWhether or not the action's default picture is to be used\non the button (user-defined action has no default picture).\nEnabled\nx\n(exp) Determines whether the control on a DataWindow\nis enabled.\n"}
{"page": 180, "text": "DataWindow Object Properties\nPage 180\nProperty for a Button\nM\nDescription\nFilename\nx\n(exp) Name of the file containing the picture to be used\non the button (if not specified, just the text is used).\nFont.property\nx\n(exp) Font settings for the text.\nHTextAlign\nx\n(exp) How the text in the button is horizontally aligned.\nValues are: 0 (center), 1 (left), 2 (right).\nHeight\nx\n(exp) The height of the button control.\nHideSnaked\nx\nWhether the button control appears once per page when\nprinting newspaper columns.\nMoveable\nx\nWhether the user can move the button control.\nName\n \nThe name of the button control.\nOriginalSize\nx\nWhether the button image is shown in its original size.\nPointer\nx\n(exp) The pointer image when it is over the button\ncontrol.\nResizeable\nx\nWhether the user can resize the button control.\nSlideLeft\nx\n(exp) Whether the button control moves left to fill in\nempty space.\nSlideUp\nx\n(exp) How the button control moves up to fill in empty\nspace.\nSuppressEventProcessingx\nWhether or not ButtonClicked and ButtonClicking events\nare fired for this particular button.\nTabSequence\nx\nThe position of the button in the tab order.\nTag\nx\n(exp) The tag text for the button control.\nText\nx\n(exp) The displayed text.\nType\n \nThe control's type, which is button.\nVTextAlign\nx\n(exp) How the text in the button is vertically aligned.\nValues are: 0 (center), 1 (top), 2 (bottom), 3 (multiline).\nVisible\nx\n(exp) Whether the button control is visible.\nWidth\nx\n(exp) The width of the button control.\nX\nx\n(exp) The x coordinate of the button control.\nY\nx\n(exp) The y coordinate of the button control.\n3.2.3 Properties for Column controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. An x in the S column\nmeans you can use the property with the SyntaxFromSQL method. When (exp) is included in\nthe description, you can specify a DataWindow expression as the value for that property.\n"}
{"page": 181, "text": "DataWindow Object Properties\nPage 181\nTable 3.4:\nProperty for a\nColumn\nM\nS\nDescription\nAccessibleDescription x\n \nA description of the control for use by assistive\ntechnology tools.\nAccessibleName\nx\n \nA descriptive label for the control.\nAccessibleRole\n \n \nA description of the kind of user-interface element\nthat the control is.\nAccelerator\nx\n \n(exp) The accelerator key for the column.\nAlignment\nx\n \n(exp) The alignment of the column's text.\nAttributes\n \n \nA list of the properties of the column.\nBackground.property x\nx\n(exp) Background settings for the column.\nBand\n \n \nThe band containing the column.\nBitmapName\n \n \nWhether the column's content names a picture that\nwill be displayed instead of the text.\nBorder\nx\nx\n(exp) The type of border around the column.\nCheckBox.property\nx\n \nSettings for CheckBox edit style.\nColor\nx\nx\n(exp) The text color.\nColType\n \n \nThe column's datatype.\nCriteria.property\nx\n \nSettings for column in Prompt for Criteria dialog\nbox.\ndbAlias\nx\n \nAn alias for the name of the database column.\ndbName\nx\n \nThe name of the database column.\ndddw.property\nx\n \nSettings for DropDownDataWindow edit style.\nddlb.property\nx\n \nSettings for DropDownListBox edit style.\nEdit.property\nx\nx\nSettings for Edit edit style.\nEditMask.property\nx\n \nSettings for EditMask edit style.\nFont.property\nx\nx\n(exp) Font settings for the column text.\nFormat\nx\n \n(exp) The column's display format.\nHeight\nx\n \n(exp) The height of the column.\nHeight.AutoSize\nx\n \nWhether column height is adjusted to fit the data.\nHeight.HasMinHeight x\n \nWhether the column should maintain its minimum\nheight.\nHideSnaked\nx\n \nWhether the control appears once per page when\nprinting newspaper columns.\nHTML.property\nx\n \n(exp) Settings for creating hyperlinks for column\ndata.\nIdentity\nx\n \nWhether the DBMS sets the column's value.\nID\n \n \nThe number of the column.\n"}
{"page": 182, "text": "DataWindow Object Properties\nPage 182\nProperty for a\nColumn\nM\nS\nDescription\nInk.property\nx\n \nSettings for Ink attributes of the InkEdit edit style.\nInkEdit.property\nx\n \nSettings for InkEdit edit style.\nInitial\nx\n \nThe initial value in the column for a new row.\nKey\nx\n \nWhether column is part of the table's primary key.\nMoveable\nx\n \nWhether the user can move the column.\nName\n \n \nThe name of the column.\nPointer\nx\n \n(exp) The pointer's image when it is over the\ncolumn.\nProtect\nx\n \n(exp) Whether the column is protected from\nchanges.\nRadioButtons.property x\n \nSettings for RadioButton edit style.\nResizeable\nx\n \nWhether the user can resize the column.\nRichEdit.property\nx\n \nSettings for RichText edit style.\nRightToLeft\nx\n \nWhether the column is set for right-to-left reading.\nSlideLeft\nx\n \n(exp) Whether the column moves left to fill in space.\nSlideUp\nx\n \n(exp) How the column moves up to fill in space.\nTabSequence\nx\n \nThe position of the column in the tab order.\nTag\nx\n \n(exp) The tag text for the column.\nType\n \n \nThe control's type, which is Column.\nUpdate\nx\n \nWhether the column is updatable.\nValidation\nx\n \n(exp) The validation expression for the column.\nValidationMsg\nx\n \n(exp) The message displayed when validation fails.\nValues (for columns)\nx\n \nThe values in the column's code table.\nVisible\nx\n \n(exp) Whether the column control is visible.\nWidth\nx\n \n(exp) The width of the column.\nWidth.Autosize\nx\n \nIn Grid style DataWindows, determines whether\nthe column's width adjusts according to the data it\ncontains.\nX\nx\n \n(exp) The x coordinate of the column.\nY\nx\n \n(exp) The y coordinate of the column.\n3.2.4 Properties for Computed Field controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\n"}
{"page": 183, "text": "DataWindow Object Properties\nPage 183\nTable 3.5:\nProperty for a computed\nfield\nM\nDescription\nAccessibleDescription\nx\nA description of the control for use by assistive\ntechnology tools.\nAccessibleName\nx\nA descriptive label for the control.\nAccessibleRole\n \nA description of the kind of user-interface element that\nthe control is.\nAlignment\nx\n(exp) The alignment of the computed field's text.\nAttributes\n \nA list of the properties of the computed field.\nBackground.property\nx\n(exp) Background settings for the computed field.\nBand\n \nThe band containing the computed field.\nBorder\nx\n(exp) The type of border around the computed field.\nColor\nx\n(exp) The text color.\nColType\n \nThe column's datatype.\nEnabled\nx\n(exp) Determines whether the control on a DataWindow\nis enabled.\nExpression\nx\nThe expression for the computed field.\nFocusRectangle\nx\nDetermines whether a rectangle displays around the\nselected control.\nFont.property\nx\n(exp) Font settings for the computed field.\nFormat\nx\n(exp) The computed field's display format.\nHeight\nx\n(exp) The height of the computed field.\nHeight.AutoSize\nx\nWhether the computed field's height is adjusted to fit the\ndata.\nHeight.HasMinHeight\nx\nWhether the computed field should maintain its\nminimum height.\nHideSnaked\nx\nWhether the control appears once per page when printing\nnewspaper columns.\nHTML.property\nx\n(exp) Settings for creating hyperlinks for the computed\nfield.\nMoveable\nx\nWhether the user can move the computed field.\nName\n \nThe name of the computed field.\nPointer\nx\n(exp) The pointer image when it is over the computed\nfield.\nResizeable\nx\nWhether the user can resize the computed field.\nSlideLeft\nx\n(exp) Whether the computed field moves left to fill in\nspace.\nSlideUp\nx\n(exp) How the computed field moves up to fill in empty\nspace.\n"}
{"page": 184, "text": "DataWindow Object Properties\nPage 184\nProperty for a computed\nfield\nM\nDescription\nTabSequence\nx\nThe position of the computed field in the tab order.\nTag\nx\n(exp) The tag text for the computed field.\nType\n \nThe control's type, which is Compute.\nVisible\nx\n(exp) Whether the computed field control is visible.\nWidth\nx\n(exp) The width of the computed field.\nX\nx\n(exp) The x coordinate of the computed field.\nY\nx\n(exp) The y coordinate of the computed field.\n3.2.5 Properties for Graph controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.6:\nProperty for a Graph\nM\nDescription\nAccessibleDescription\nx\nA description of the control for use by assistive\ntechnology tools.\nAccessibleName\nx\nA descriptive label for the control.\nAccessibleRole\n \nA description of the kind of user-interface element that\nthe control is.\nAttributes\n \nA list of the properties of the graph.\nAxis\nx\n(exp) List of items (categories, series, or values) for the\naxis.\nAxis.property\nx\n(exp) Properties for a graph axis.\nAxis.DispAttr\nx\n(exp) Display properties for an axis (see\nDispAttr.fontproperty in this table).\nBackColor\nx\n(exp) The background color of the graph.\nBand\n \nThe band containing the graph.\nBorder\nx\n(exp) The type of border around the graph.\nCategory\nx\n(exp) List of categories for the axis (see Axis in this\ntable).\nCategory.property\nx\n(exp) Properties for the Category axis (see\nAxis.property in this table).\nCategory.DispAttr\nx\n(exp) Display properties for the Category axis (see\nDispAttr.fontproperty in this table).\nColor\nx\n(exp) The text color.\nDepth\nx\n(exp) The depth of a 3D graph.\nDispAttr.fontproperty\nx\nFont settings for various components of the graph.\nElevation\nx\n(exp) The elevation of a 3D graph.\n"}
{"page": 185, "text": "DataWindow Object Properties\nPage 185\nProperty for a Graph\nM\nDescription\nEnabled\nx\n(exp) Determines whether the control on a DataWindow\nis enabled.\nFocusRectangle\nx\nDetermines whether a rectangle displays around the\nselected control.\nGraphType\nx\n(exp) The type of graph (pie, bar, and so on).\nHeight\nx\n(exp) The height of the graph.\nHideSnaked\nx\nWhether the control appears once per page when\nprinting newspaper columns.\nLegend\nx\n(exp) The location of the legend.\nLegend.DispAttr.fontpropertyx\n(exp) Display properties for the legend.\nMoveable\nx\nWhether the user can move the graph.\nName\n \nThe name of the graph control.\nOverlapPercent\nx\n(exp) The overlap between data markers in different\nseries.\nPerspective\nx\n(exp) The distance of the graph from the front of the\nwindow.\nPie.DispAttr.fontproperty\nx\n(exp) Display properties for the pie slice labels.\nPlotNullData\nx\nWhether a continuous line is drawn in a line graph when\nthere is no data.\nPointer\nx\n(exp) The pointer image when it is over the graph.\nRange\n \nThe rows in the DataWindow that are included in the\ngraph.\nRender3D\nx\nWhether the graph is rendered in the DirectX 3D style.\nResizeable\nx\nWhether the user can resize the graph.\nRotation\nx\n(exp) The left-to-right rotation of a 3D graph.\nSeries\nx\n(exp) List of series for the axis (see Axis in the table).\nSeries.property\nx\n(exp) Properties for the Series axis (see Axis.property in\nthis table).\nSeries.DispAttr\nx\n(exp) Display properties for the Series axis (see\nDispAttr.fontproperty in this table).\nShadeColor\nx\n(exp) The color of the back edge for 3D data markers.\nSizeToDisplay\nx\n(exp) Whether to size the graph to the display area.\nSlideLeft\nx\n(exp) Whether the graph moves left to fill in empty\nspace.\nSlideUp\nx\n(exp) How the graph moves up to fill in empty space.\nSpacing\nx\n(exp) The gap between categories.\nTabSequence\nx\nThe position of the graph in the tab order.\nTag\nx\n(exp) The tag text for the graph.\n"}
{"page": 186, "text": "DataWindow Object Properties\nPage 186\nProperty for a Graph\nM\nDescription\nTitle\nx\n(exp) The graph's title.\nTitle.DispAttr.fontproperty x\n(exp) Display properties for the title.\nType\n \nThe control's type, which is graph.\nValues\nx\n(exp) List of values for the axis (see Axis in the table).\nValues.property\nx\n(exp) Properties for the Values axis (see Axis.property\nin the table).\nValues.DispAttr\nx\n(exp) Display properties for the Values axis (see\nDispAttr.fontproperty in the table).\nVisible\nx\n(exp) Whether the graph control is visible.\nWidth\nx\n(exp) The width of the graph.\nX\nx\n(exp) The x coordinate of the graph.\nY\nx\n(exp) The y coordinate of the graph.\n3.2.6 Properties for GroupBox controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.7:\nProperty for a\nGroupBox\nM\nDescription\nAccessibleDescription\nx\nA description of the control for use by assistive\ntechnology tools.\nAccessibleName\nx\nA descriptive label for the control.\nAccessibleRole\n \nA description of the kind of user-interface element that\nthe control is.\nAttributes\n \nA list of the properties of the GroupBox control.\nBackground.property\nx\n(exp) Background settings for the GroupBox control.\nBand\n \nThe band containing the GroupBox control.\nBorder\nx\n(exp) Border style: 2 (box), 5 (3D lowered), 6 (3D\nraised).\nColor\nx\n(exp) The text color.\nFont.property\nx\n(exp) Font settings for the text.\nHeight\nx\n(exp) The height of the GroupBox control.\nHideSnaked\nx\nWhether the GroupBox control appears once per page\nwhen printing newspaper columns.\nMoveable\nx\nWhether the user can move the GroupBox control.\nName\n \nThe name of the GroupBox control.\nPointer\nx\n(exp) The pointer image when it is over the GroupBox\ncontrol.\n"}
{"page": 187, "text": "DataWindow Object Properties\nPage 187\nProperty for a\nGroupBox\nM\nDescription\nResizeable\nx\nWhether the user can resize the GroupBox control.\nSlideLeft\nx\n(exp) Whether the GroupBox control moves left to fill\nin empty space.\nSlideUp\nx\n(exp) How the GroupBox control moves up to fill in\nempty space.\nTag\nx\n(exp) The tag text for the GroupBox control.\nText\nx\n(exp) The displayed text.\nType\n \nThe control's type, which is GroupBox.\nVisible\nx\n(exp) Whether the GroupBox control is visible.\nWidth\nx\n(exp) The width of the GroupBox control.\nX\nx\n(exp) The x coordinate of the GroupBox control.\nY\nx\n(exp) The y coordinate of the GroupBox control.\n3.2.7 Properties for the Group keyword\nYou use these properties when generating DataWindow source code with the SyntaxFromSql\nmethod.\nTable 3.8:\nProperty\nDescription\nNewPage (Group keywords)\nWhether a change in a group column's value\ncauses a page break.\nResetPageCount\nWhether a new value in a group column\nrestarts page numbering.\n3.2.8 Properties for InkPicture controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.9:\nProperty for an\nInkPicture\nM\nDescription\nBackImage\n \nThe column containing the background image for the\nInkPicture.\nBand\n \nThe band containing the InkPicture.\nBorder\nx\n(exp) The type of border around the InkPicture.\nEnabled\nx\n(exp) Whether the control is enabled.\nHeight\nx\n(exp) The height of the InkPicture.\nInk.property\nx\n(exp) Attributes of the ink in the InkPicture.\nInkPic.property\nx\n(exp) Properties that specify the behavior of the\nInkPicture.\n"}
{"page": 188, "text": "DataWindow Object Properties\nPage 188\nProperty for an\nInkPicture\nM\nDescription\nKeyClause\nx\n(exp) The key clause used when retrieving the blob.\nMoveable\nx\nWhether the user can move the InkPicture.\nName\n \nThe name of the InkPicture control.\nPointer\nx\n(exp) The pointer image when it is over the InkPicture.\nResizeable\nx\nWhether the user can resize the InkPicture.\nSlideLeft\nx\n(exp) Whether the InkPicture moves left to fill in\nempty space.\nTable (for InkPicture and\nTableBlobs)\nx\n(exp) The table that contains large binary columns used\nin the control.\nTag\nx\n(exp) The tag text for the InkPicture.\nVisible\nx\n(exp) Whether the InkPicture control is visible.\nWidth\nx\n(exp) The width of the InkPicture.\nX\nx\n(exp) The x coordinate of the InkPicture.\nY\nx\n(exp) The y coordinate of the InkPicture.\n3.2.9 Properties for Line controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.10:\nProperty for a Line\nM\nDescription\nAttributes\n \nA list of the properties of the line.\nBackground.property\nx\n(exp) Background settings for the line.\nBand\n \nThe band containing the line.\nHideSnaked\nx\nWhether the control appears once per page when\nprinting newspaper columns.\nMoveable\nx\nWhether the user can move the line.\nName\n \nThe name of the line control.\nPen.property\nx\n(exp) Appearance settings of the line.\nPointer\nx\n(exp) The pointer image when it is over the line.\nResizeable\nx\nWhether the user can resize the line.\nSlideLeft\nx\n(exp) Whether the line moves left to fill empty space.\nSlideUp\nx\n(exp) How the line moves up to fill empty space.\nTag\nx\n(exp) The tag text for the line.\nType\n \nThe control's type, which is Line.\nVisible\nx\n(exp) Whether the Line control is visible.\nX1, X2\nx\n(exp) The x coordinate of each end of the line.\n"}
{"page": 189, "text": "DataWindow Object Properties\nPage 189\nProperty for a Line\nM\nDescription\nY1, Y2\nx\n(exp) The y coordinate of each end of the line.\n3.2.10 Properties for OLE Object controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.11:\nProperty for OLE\nObject control\nM\nDescription\nActivation\nx\nThe way the OLE Object control is activated.\nAttributes\n \nA list of the properties of the OLE Object control.\nBand\n \nThe band containing the OLE Object control.\nBinaryIndex\n \nAn internal pointer.\nBorder\nx\n(exp) The type of border around the OLE Object\ncontrol.\nClientName\nx\nThe name of the OLE client in the server window.\nContentsAllowed\nx\nWhether the control can be embedded, linked, or both.\nDisplayType\nx\nWhether the control displays an icon or contents.\nEnabled\nx\n(exp) Determines whether the control on a\nDataWindow is enabled.\nFocusRectangle\nx\nDetermines whether a rectangle displays around the\nselected control.\nGroupBy\nx\n(exp) The grouping columns for the transferred data.\nHeight\nx\n(exp) The height of the OLE Object control.\nHideSnaked\nx\nWhether the control appears once per page when\nprinting newspaper columns.\nLinkUpdateOptions\nx\nHow a linked control is updated.\nMoveable\nx\nWhether the user can move the OLE Object control.\nName\n \nThe name of the OLE Object control.\nEnabled\nx\n(exp) Determines whether the control on a\nDataWindow is enabled.\nPointer\nx\n(exp) The pointer image when it is over the control.\nRange\n \nMethod for choosing the rows transferred to the OLE\ncontrol.\nResizeable\nx\nWhether the user can resize the OLE Object control.\nSizeToDisplay\nx\n(exp) Whether the OLE Object control is automatically\nsized to the display area.\nSlideLeft\nx\n(exp) Whether the control moves left to fill in space.\nSlideUp\nx\n(exp) How the control moves up to fill in space.\n"}
{"page": 190, "text": "DataWindow Object Properties\nPage 190\nProperty for OLE\nObject control\nM\nDescription\nTabSequence\nx\nThe position of the control the tab order.\nTag\nx\n(exp) The tag text for the control.\nTarget\nx\n(exp) The columns or expressions whose data you want\nto transfer to the OLE Object control.\nType\n \nThe control's type, which is OLE.\nVisible\nx\n(exp) Whether the control is visible.\nWidth\nx\n(exp) The width of the control.\nX\nx\n(exp) The x coordinate of the control.\nY\nx\n(exp) The y coordinate of the control.\n3.2.11 Properties for Oval, Rectangle, and RoundRectangle controls in\nDataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.12:\nProperty\nM\nDescription\nAttributes\n \nA list of the properties of the control.\nBackground.property\nx\n(exp) Background settings for the control.\nBand\n \nThe band containing the control.\nBrush.property\nx\n(exp) Settings for fill pattern and color.\nHeight\nx\n(exp) The height of the control.\nHideSnaked\nx\nWhether the control appears once per page when\nprinting newspaper columns.\nMoveable\nx\nWhether the user can move the control.\nName\n \nThe name of the control.\nPen.property\nx\n(exp) Appearance settings of the control.\nPointer\nx\n(exp) The pointer image when it is over the control.\nResizeable\nx\nWhether the user can resize the control.\nSlideLeft\nx\n(exp) Whether the control moves left to fill empty\nspace.\nSlideUp\nx\n(exp) How the control moves up to fill empty space.\nTag\nx\n(exp) The tag text for the control.\nType\n \nThe control's type, which is ellipse, rectangle, or\nroundrectangle.\nVisible\nx\n(exp) Whether the control is visible.\nX\nx\n(exp) The x coordinate of the control.\n"}
{"page": 191, "text": "DataWindow Object Properties\nPage 191\nProperty\nM\nDescription\nY\nx\n(exp) The y coordinate of the control.\n3.2.11.1 Additional properties for RoundRectangle controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nProperties for Oval, Rectangle, and RoundRectangle controls in DataWindow objects also\napply to RoundRectangle controls.\nTable 3.13:\nProperty\nM\nDescription\nEllipseHeight\nx\n(exp) The radius of the vertical part of the rounded\ncorner.\nEllipseWidth\nx\n(exp) The radius of the horizontal part of the rounded\ncorner.\n3.2.12 Properties for Picture controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.14:\nProperty for a Picture\nM\nDescription\nAccessibleDescription\nx\nA description of the control for use by assistive\ntechnology tools.\nAccessibleName\nx\nA descriptive label for the control.\nAccessibleRole\n \nA description of the kind of user-interface element that\nthe control is.\nAttributes\n \nA list of the properties of the picture.\nBand\n \nThe band containing the picture.\nBorder\nx\n(exp) The type of border around the picture.\nEnabled\nx\n(exp) Determines whether the control on a\nDataWindow is enabled.\nFilename\nx\n(exp) The file containing the picture.\nFocusRectangle\nx\nDetermines whether a rectangle displays around the\nselected control.\nHeight\nx\n(exp) The height of the picture.\nHideSnaked\nx\nWhether the control appears once per page when\nprinting newspaper columns.\nHTML.property\nx\n(exp) Settings for creating a hyperlink for the picture.\nInvert\nx\n(exp) Whether the colors are displayed inverted.\nMoveable\nx\nWhether the user can move the picture.\nName\n \nThe name of the picture control.\n"}
{"page": 192, "text": "DataWindow Object Properties\nPage 192\nProperty for a Picture\nM\nDescription\nOriginalSize\nx\nWhether the picture is shown in its original size.\nPointer\nx\n(exp) The pointer image when it is over the picture.\nResizeable\nx\nWhether the user can resize the picture.\nSlideLeft\nx\n(exp) Whether the picture moves left to fill in empty\nspace.\nSlideUp\nx\n(exp) How the picture moves up to fill in empty space.\nTabSequence\nx\nThe position of the picture in the tab order.\nTag\nx\n(exp) The tag text for the picture.\nType\n \nThe control's type, which is picture.\nVisible\nx\n(exp) Whether the picture control is visible.\nWidth\nx\n(exp) The width of the picture.\nX\nx\n(exp) The x coordinate of the picture.\nY\nx\n(exp) The y coordinate of the picture.\n3.2.13 Properties for Report controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.15:\nProperty for a Report\nM\nDescription\nAttributes\n \nA list of the properties of the report.\nBand\n \nThe band containing the report.\nBorder\nx\n(exp) The type of border around the report.\nCriteria\nx\nThe search condition of the WHERE clause that relates\nthe report to the main DataWindow.\nDataObject\nx\nThe name of the DataWindow that is the nested report.\nHeight\nx\n(exp) The height of the report.\nHeight.AutoSize\nx\nWhether the height of the control will be adjusted to\ndisplay all the data.\nHideSnaked\nx\nWhether the control appears once per page when\nprinting newspaper columns.\nMoveable\nx\nWhether the user can move the report.\nName\n \nThe name of the Report control.\nNest_Arguments\nx\nRetrieval arguments for the report.\nNewPage (Report\ncontrols)\nx\nWhether to start the report on a new page (composite\nonly).\nPointer\nx\n(exp) The pointer image when it is over the report.\nResizeable\nx\nWhether the user can resize the report.\n"}
{"page": 193, "text": "DataWindow Object Properties\nPage 193\nProperty for a Report\nM\nDescription\nSlideLeft\nx\n(exp) Whether the report moves left to fill in empty\nspace.\nSlideUp\nx\n(exp) How the report moves up to fill in empty space.\nShowBackground\nx\nWhether the background settings of the report display.\nTag\nx\n(exp) The tag text for the report.\nTrail_Footer\nx\nWhere to print the footer (composite only).\nType\n \nThe control's type, which is report.\nVisible\nx\n(exp) Whether the Report control is visible.\nWidth\nx\n(exp) The width of the report.\nX\nx\n(exp) The x coordinate of the report.\nY\nx\n(exp) The y coordinate of the report.\n3.2.14 Properties for the Style keyword\nYou use these properties when generating DataWindow source code with the SyntaxFromSql\nmethod.\nTable 3.16:\nProperty\nDescription\nDetail_Bottom_Margin\nBottom margin of the detail area.\nDetail_Top_Margin\nTop margin of the detail area.\nHeader_Bottom_Margin\nBottom margin of the header area.\nHeader_Top_Margin\nTop margin of the header area.\nHorizontal_Spread\nHorizontal space between columns in the\ndetail area.\nLeft_Margin\nThe left margin of the DataWindow.\nReport\nWhether the DataWindow is a read-only\nreport.\nType\nThe presentation style.\nVertical_Size\nThe height of the columns in the detail area.\nVertical_Spread\nThe vertical space between columns in the\ndetail area.\n3.2.15 Properties for TableBlob controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. When (exp) is included\nin the description, you can specify a DataWindow expression as the value for that property.\nTable 3.17:\nProperty for a TableBlob M\nDescription\nAttributes\n \nA list of the properties of the TableBlob.\nBand\n \nThe band containing the TableBlob.\n"}
{"page": 194, "text": "DataWindow Object Properties\nPage 194\nProperty for a TableBlob M\nDescription\nBorder\nx\n(exp) The type of border around the TableBlob.\nClientName\nx\nThe name of the OLE client in the server window.\nEnabled\nx\n(exp) Determines whether the control on a DataWindow\nis enabled.\nFocusRectangle\nx\nDetermines whether a rectangle displays around the\nselected control.\nHeight\nx\n(exp) The height of the TableBlob.\nHideSnaked\nx\nWhether the control appears once per page when\nprinting newspaper columns.\nID\n \nThe number of the TableBlob.\nKeyClause\nx\n(exp) The key clause used when retrieving the blob.\nMoveable\nx\nWhether the user can move the TableBlob.\nName\n \nThe name of the TableBlob.\nOLEClass\nx\n(exp) The name of the TableBlob's OLE column.\nPointer\nx\n(exp) The pointer image when it is over the TableBlob.\nResizeable\nx\nWhether the user can resize the TableBlob.\nSlideLeft\nx\n(exp) Whether the TableBlob moves left to fill empty\nspace.\nSlideUp\nx\n(exp) How the TableBlob moves up to fill empty space.\nTabSequence\nx\nThe position of the control in the tab order.\nTag\nx\n(exp) The tag text for the control.\nTemplate\nx\n(exp) The file used to start the OLE application.\nType\n \nThe control's type, which is TableBlob.\nVisible\nx\n(exp) Whether the TableBlob is visible.\nWidth\nx\n(exp) The width of the TableBlob.\nX\nx\n(exp) The x coordinate of the TableBlob.\nY\nx\n(exp) The y coordinate of the TableBlob.\n3.2.16 Properties for Text controls in DataWindow objects\nAn x in the M (Modify) column means you can change the property. An x in the S column\nmeans you can use the property with the SyntaxFromSQL method. When (exp) is included in\nthe description, you can specify a DataWindow expression as the value for that property.\nTable 3.18:\nProperty for text\nM\nS\nDescription\nAccessibleDescription x\n \nA description of the control for use by assistive\ntechnology tools.\nAccessibleName\nx\n \nA descriptive label for the control.\n"}
{"page": 195, "text": "DataWindow Object Properties\nPage 195\nProperty for text\nM\nS\nDescription\nAccessibleRole\n \n \nA description of the kind of user-interface element that\nthe control is.\nAlignment\nx\nx\nThe alignment of the text.\nAttributes\n \n \nA list of the properties of the text control.\nBackground.property x\nx\n(exp) Background settings for the text control.\nBand\n \n \nThe band containing the text control.\nBorder\nx\nx\n(exp) The type of border around the text control.\nColor\nx\nx\n(exp) The text color.\nEnabled\nx\n \n(exp) Determines whether the control on a DataWindow\nis enabled.\nFocusRectangle\nx\n \nDetermines whether a rectangle displays around the\nselect control.\nFont.property\nx\nx\n(exp) Font settings for the text.\nHeight\nx\n \n(exp) The height of the text control.\nHeight.AutoSize\nx\n \nWhether the control's height is adjusted to fit the data.\nHeight.HasMinHeight x\n \nWhether the control should maintain its minimum\nheight.\nHideSnaked\nx\n \nWhether the control appears once per page when\nprinting newspaper columns.\nHTML.property\nx\n \n(exp) Settings for creating a hyperlink for the text.\nMoveable\nx\n \nWhether the user can move the text control.\nName\n \n \nThe name of the text control.\nPointer\nx\n \n(exp) The pointer image when it is over the text control.\nResizeable\nx\n \nWhether the user can resize the text control.\nSlideLeft\nx\n \n(exp) Whether the text control moves left to fill space.\nSlideUp\nx\n \n(exp) How the text control moves up to fill empty space.\nTabSequence\nx\n \nThe position of the text in the tab order.\nTag\nx\n \n(exp) The tag text for the text control.\nText\nx\n \n(exp) The displayed text.\nType\n \n \nThe control's type, which is Text.\nVisible\nx\n \n(exp) Whether the control is visible.\nWidth\nx\n \n(exp) The width of the text control.\nX\nx\n \n(exp) The x coordinate of the text control.\nY\nx\n \n(exp) The y coordinate of the text control.\n"}
{"page": 196, "text": "DataWindow Object Properties\nPage 196\n3.2.17 Title keyword\nYou use this property when generating DataWindow source code with the SyntaxFromSql\nmethod.\nTable 3.19:\nProperty\nDescription\nTitle(\"string\")\nThe title for the DataWindow.\n3.3 Alphabetical list of DataWindow object properties\nThe properties for DataWindow objects and controls within a DataWindow object follow in\nalphabetical order.\nThe simple Visual Basic example shown for most properties can be used in C# by adding a\nsemicolon to the end of each statement.\nTo see the properties organized by type of control or syntax keyword, see Controls in a\nDataWindow and their properties.\n3.3.1 Accelerator\nDescription\nThe accelerator key that a user can press to select a column in the DataWindow object.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Accelerator\nDescribe and Modify argument:\n\"columnname.Accelerator { = 'acceleratorkey ' }\"\nTable 3.20:\nParameter\nDescription\ncolumnname\nThe name of the column for which you want to get or set the accelerator\nkey.\nacceleratorkey\n(exp) A string expression whose value is the letter that will be the\naccelerator key for columnname. Acceleratorkey can be a quoted\nDataWindow expression.\nUsage\nAn accelerator key for a column allows users to select a column (change focus) with a\nkeystroke rather than with the mouse. The user changes focus by pressing the accelerator key\nin combination with the Alt key.\n"}
{"page": 197, "text": "DataWindow Object Properties\nPage 197\nIn the painter\nSelect the control and set the value in the Properties view, Edit tab.\nDisplaying the accelerator\nThe column does not display the key. To let users know what key to use, you can include an\nunderlined letter in a text control that labels the column. When you enter the text control's\nlabel, precede the character you want underlined with an ampersand (&).\nAccelerator keys and edit styles\nTo use an accelerator key with the CheckBox or RadioButton edit style, select the Edit edit\nstyle and specify the accelerator there.\nExamples\ndw1.Object.emp_name.Accelerator = 'A'\nls_data = dw1.Describe(\"emp_name.Accelerator\")\ndw1.Modify(\"emp_name.Accelerator='A'\")\n3.3.2 AccessibleDescription\nDescription\nA description of the control and/or its purpose for use by accessibility tools such as readers\nfor visually-impaired users.\nApplies to\nColumn, computed field, picture, text, graph, group box, and button controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.AccessibleDescription\nDescribe and Modify argument:\n\"controlname.AccessibleDescription { = 'description ' }\"\nTable 3.21:\nParameter\nDescription\ncolumnname\nThe name of the control for which you want\nto get or set the accessible description\ndescription\n(exp) A string that describes the control's\npurpose or appearance\nUsage\nYou do not need to supply a description if the AccessibleName and AccessibleRole\nproperties adequately describe the control, as in the case of a button with the label OK. You\nshould provide a description for a picture or report control.\nIn the painter\nIn the Other tab in the Properties view, type a description in the AccessibleDescription text\nbox.\n"}
{"page": 198, "text": "DataWindow Object Properties\nPage 198\nExamples\ndw1.Object.b_1.AccessibleDescription = 'Scrolls to Next Row'\nstrData = dw1.Describe(\"b_1.AccessibleDescription\")\ndw1.Modify(\"b_1.AccessibleDescription='Scrolls to next row'\")\n3.3.3 AccessibleName\nDescription\nA label that briefly describes the control for use by accessibility tools such as readers for\nvisually-impaired users.\nApplies to\nColumn, computed field, picture, text, graph, group box, and button controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.AccessibleName\nDescribe and Modify argument:\n\"controlname.AccessibleName { = 'description ' }\"\nTable 3.22:\nParameter\nDescription\ncolumnname\nThe name of the control for which you want\nto get or set the accessible description\ndescription\n(exp) A string that briefly describes the\ncontrol\nUsage\nThe AccessibleName property is a brief description, such as the text in a button or the name\nof a menu item.\nIn the painter\nIn the Other tab in the Properties view, type a name in the AccessibleName text box.\nExamples\ndw1.Object.b_1.AccessibleName = 'Next'\nls_data = dw1.Describe(\"b_1.AccessibleName\")\ndw1.Modify(\"b_1.AccessibleName='Next'\")\n3.3.4 AccessibleRole\nDescription\nA description of the kind of user-interface element that the control is, for use by accessibility\ntools such as readers for visually-impaired users.\nApplies to\n"}
{"page": 199, "text": "DataWindow Object Properties\nPage 199\nColumn, computed field, picture, text, graph, group box, and button controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.AccessibleRole\nDescribe and Modify argument:\n\"controlname.AccessibleRole { = 'enumeratedvalue ' }\"\nTable 3.23:\nParameter\nDescription\ncolumnname\nThe name of the control for which you want\nto get or set the accessible description\ndescription\n(exp) A number specifying the type of\nAccessibleRole as a numeric value of the\nAccessibleRole DataWindow constant.\nUsage\nThe description is a member of the AccessibleRole enumerated variable. The default role is\ndefaultrole! and is used when the role cannot be determined.\nTable 3.24: AccessibleRole values for DataWindow controls\nControl\nAccessibleRole\nButton\npushbuttonrole!\nColumn\ntextrole!\nComputed field\nstatictextrole!\nGraph\ndiagramrole!\nGroup box\ngroupingrole!\nPicture\ngraphicrole!\nText\nstatictextrole!\nIn the painter\nIn the Other tab in the Properties view, select a value in the AccessibleRole drop-down list.\nExamples\nls_data = dw1.Object.b_1.AccessibleRole\nls_data = dw1.Describe(\"b_1.AccessibleRole\")\n3.3.5 Action\nDescription\nThe action a user can assign to a button control.\nApplies to\n"}
{"page": 200, "text": "DataWindow Object Properties\nPage 200\nButton controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.buttonname.Action\nDescribe and Modify argument:\n\"buttonname.Action { = ' value ' }\"\nTable 3.25:\nParameter\nDescription\nbuttonname\nThe name of the button for which you want\nto assign an action.\nvalue\nThe action value assigned to the button.\nValues are listed in the following table.\n \nTable 3.26:\nValue Action\nDescription\nValue returned to ButtonClicked\nevent\n0\nUserDefined(Default) Allows for programming\nof the ButtonClicked and\nButtonClicking events with no\nintervening action occurring.\nReturn code from the user's coded\nevent script.\n1\nRetrieve\n(Yield)\nRetrieves rows from the database.\nBefore retrieval actually occurs,\noption to yield is turned on. This\nallows the Cancel action to take\neffect during a long retrieve.\nNumber of rows retrieved.\n2\nRetrieve\nRetrieves rows from the database.\nThe option to yield is not\nautomatically turned on.\nNumber of rows retrieved.\n3\nCancel\nCancels a retrieval that has been\nstarted with the option to yield.\n0\n4\nPageNext Scrolls to the next page.\nThe row displayed at the top of\nthe DataWindow control when the\nscrolling is complete or attempts to\ngo past the first row.\n-1 if an error occurs.\n5\nPagePrior Scrolls to the prior page.\nThe row displayed at the top of\nthe DataWindow control when the\nscrolling is complete or attempts to\ngo past the first row.\n"}
{"page": 201, "text": "DataWindow Object Properties\nPage 201\nValue Action\nDescription\nValue returned to ButtonClicked\nevent\n-1 if an error occurs.\n6\nPageFirst Scrolls to the first page.\n1 if successful.\n-1 if an error occurs.\n7\nPageLast\nScrolls to the last page.\nThe row displayed at the top of\nthe DataWindow control when the\nscrolling is complete or attempts to\ngo past the first row.\n-1 if an error occurs.\n8\nSort\nDisplays Sort dialog box and sorts\nas specified.\n1 if successful.\n-1 if an error occurs.\n9\nFilter\nDisplays Filter dialog box and\nfilters as specified.\nNumber of rows filtered.\nNumber < 0 if an error occurs.\n10\nDeleteRowIf button is in detail band, deletes\nrow associated with button;\notherwise, deletes the current row.\n1 if successful.\n-1 if an error occurs.\n11\nAppendRowInserts row at the end.\nRow number of newly inserted row.\n12\nInsertRow If button is in detail band, inserts\nrow using row number associated\nwith the button; otherwise, inserts\nrow using the current row.\nRow number of newly inserted row.\n13\nUpdate\nSaves changes to the database.\nIf the update is successful, a\nCOMMIT is issued. If the update\nfails, a ROLLBACK is issued\n1 if successful.\n-1 if an error occurs.\n14\nSaveRowsAs\nDisplays Save As dialog box and\nsaves rows in the format specified.\nNumber of rows filtered.\n15\nPrint\nPrints one copy of the DataWindow\nobject.\n0\n16\nPreview\nToggles between preview and print\npreview.\n0\n17\nPreviewWithRulers\nToggles between rulers on and off.\n0\n18\nQueryModeToggles between query mode on\nand off.\n0\n19\nQuerySort Specifies sorting criteria (forces\nquery mode on).\n0\n20\nQueryClearRemoves the WHERE clause from\na query (if one was defined).\n0\nUsage\n"}
{"page": 202, "text": "DataWindow Object Properties\nPage 202\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nExamples\ndw1.Object.b_retrieve.Action = \"2\"\nsetting = dw1.Describe(\"b_retrieve.Action\")\ndw1.Modify(\"b_retrieve.Action = '2'\")\n3.3.6 Activation\nDescription\nThe way the server for the OLE object in the OLE Object control is activated. Choices\ninclude letting the user activate the object by double-clicking or putting activation under\nprogram control.\nApplies to\nOLE Object controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.olecontrolname.Activation\nDescribe and Modify argument:\n\"olecontrolname.Activation { = ' activationtype ' }\"\nTable 3.27:\nParameter\nDescription\nolecontrolname\nThe name of the OLE Object control for which you want to get or set the\nactivation method.\nactivationtype\n(exp) A number specifying the method of activation for the OLE object.\nActivationtype can be a quoted DataWindow expression.\nValues are:\n0 -- The object has to be activated with the Activate method.\n1 -- The user can activate the object by double-clicking on it.\n2 -- The object activates when the container gets focus.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Options tab.\nExamples\ndw1.Object.ole_report.Activation\nls_data = dw1.Describe(\"ole_report.Activation\")\n"}
{"page": 203, "text": "DataWindow Object Properties\nPage 203\ndw1.Modify(\"ole_report.Activation='2'\")\n3.3.7 Alignment\nDescription\nThe alignment of the control's text within its borders.\nApplies to\nColumn, Computed Field, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Alignment\nDescribe and Modify argument:\n\"controlname.Alignment { = ' alignmentvalue ' }\"\nSyntaxFromSql:\nText ( ... Alignment = alignmentvalue ... )\nTable 3.28:\nParameter\nDescription\ncontrolname\nThe name of the control for which you want to get or set the alignment.\nalignmentvalue (exp) A number specifying the type of alignment for the text of\ncontrolname. Alignmentvalue can be a quoted DataWindow expression.\nValues are:\n0 -- (Default) Left\n1 -- Right\n2 -- Center\n3 -- Justified\nWhen generating DataWindow syntax with SyntaxFromSql, the setting for\nAlignment applies to all text controls used as column labels.\nUsage\nWhen you select justified, the last line of text is not stretched to fill the line. Controls with\nonly one line of text look left aligned.\nIn the painter\nSelect the control and set the value using:\n\u2022 Properties view, General tab\n\u2022 StyleBar\n"}
{"page": 204, "text": "DataWindow Object Properties\nPage 204\nExamples\ndw1.Object.emp_name_t.Alignment = 2\nls_data = dw1.Describe(\"emp_name.Alignment\")\ndw1.Modify(\"emp_name_t.Alignment='2'\")\n3.3.8 Arguments\nDescription\nThe retrieval arguments required by the data source. You specify retrieval arguments in the\nDataWindow's SELECT statement and you provide values for the retrieval arguments when\nyou call the Retrieve method.\nApplies to\nDatabase table for the DataWindow object\nNot settable in PowerScript. Used in DataWindow syntax.\nSyntax\nTable(Arguments = ( (name1, type), (name2, type) ... ) ... )\nTable 3.29:\nParameter\nDescription\nname\nThe name of the retrieval argument\ntype\nThe type of the argument:\n\u2022 Date or a Date list\n\u2022 DateTime or a DateTime list\n\u2022 Number or a Number list\n\u2022 String or a String list\n\u2022 Time or a Time list\nUsage\nIn the painter\nSet the value in the SQL Select painter or Query painter.\nOpen the SQL Select painter by selecting Design>Data Source from the menu bar in\nthe DataWindow painter, or create or open a query in the Query painter. Then select\nDesign>Retrieval Arguments.\n3.3.9 Attributes\nDescription\nA tab-separated list of all the properties that apply to a control.\n"}
{"page": 205, "text": "DataWindow Object Properties\nPage 205\nApplies to\nDataWindow, Button, Column, Computed Field, Graph, GroupBox, Line, OLE, Oval,\nPicture, Rectangle, Report, RoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Attributes\nDescribe argument:\n\"controlname.Attributes\"\nExamples\nls_data = dw1.Object.emp_name_t.Attributes\nls_data = dw1.Describe(\"DataWindow.Attributes\")\nls_data = dw1.Describe(\"emp_name_t.Attributes\")\n3.3.10 Axis\nDescription\nThe list of items or the expression associated with an axis of a graph. Each item is separated\nby a comma. You can ask for the list of categories on the Category axis, the series on the\nSeries axis, or the values on the Values axis.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.axis\nDescribe and Modify argument:\n\"graphname.axis { = 'list ' }\"\nTable 3.30:\nParameter\nDescription\ngraphname\nThe name of the graph within the DataWindow object for which you want to\nget or set the list of items for axis.\naxis\nAn axis name.\nValues are:\n\u2022 Category\n\u2022 Series\n\u2022 Values\n"}
{"page": 206, "text": "DataWindow Object Properties\nPage 206\nParameter\nDescription\nlist\nA string listing the categories, series, or values for the graph. The content of\nthe list depends on the axis you specify. The items in the list are separated by\ncommas. List is quoted.\nUsage\nIn the painter\nSelect the graph control and set the value by selecting a column or expression for each axis in\nthe Properties view, Data tab.\nExamples\nls_data = dw1.Object.gr_1.Values\ndw1.Object.gr_1.Series = \"Actual, Budget\"\nls_data = dw1.Describe(\"gr1.Category\")\nls_data = dw1.Describe(\"gr1.Series\")\nls_data = dw1.Describe(\"gr1.Values\")\ndw1.Modify(\"gr1.Series='Actual, Budget'\")\n3.3.11 Axis.property\nDescription\nSettings that control the appearance of an axis on a graph.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.axis.property\nDescribe and Modify argument:\n\"graphname.axis.property { = value }\"\nTable 3.31:\nParameter\nDescription\ngraphname\nThe name of the graph within the DataWindow object for which you want\nto get or set a property value for an axis.\naxis\nAn axis name.\nValues are:\n\u2022 Category\n\u2022 Series\n\u2022 Values\nproperty\nA property for the axis. Properties and their settings are listed in the table\nthat follows.\nvalue\nThe value to be assigned to the property. For axis properties, value can be a\nquoted DataWindow expression.\n"}
{"page": 207, "text": "DataWindow Object Properties\nPage 207\n \nTable 3.32:\nProperty for\nAxis\nValue\nAutoScale\n(exp) A boolean number specifying whether PowerBuilder scales the axis\nautomatically. Enabled when the axis displays nonstring data.\nValues are:\n0 -- No, do not automatically scale the axis.\n1 -- Yes, automatically scale the axis.\nPainter: Axis tab, Scale group.\nDispAttr.\nfontproperty\n(exp) Properties that control the appearance of the text that labels the axis\ndivisions.\nFor a list of font properties, see the main entry for DispAttr.fontproperty.\nPainter: Text tab. Choose Category Axis Text, Series Axis Text, or Values\nAxis Text, and set font properties.\nDisplayEveryNLabels\n(exp) An integer specifying which major axis divisions to label. For\nexample, 2 means label every other tick mark. Values 0 and 1 both mean\nlabel every tick mark. If the labels are too long, they are clipped.\nPainter: Axis tab, Major Divisions group (not available for all graph types).\nDropLines\n(exp) An integer indicating the type of drop line for the axis.\nValues are:\n0 -- None\n1 -- Solid\n2 -- Dash\n3 -- Dot\n4 -- DashDot\n5 -- DashDotDot\nPainter: Axis tab, Major Divisions group (not available for all graph types).\nNot supported by Render3D graph style.\nFrame\n(exp) An integer indicating the type of line used for the frame. Values are\n0--5. See DropLines in this table for their meaning. Available for 3D graph\ntypes.\nPainter: Axis tab, Line Style group.\nNot supported by Render3D graph style.\nLabel\n(exp) A string whose value is the axis label.\nPainter: Axis tab.\nLabelDispAttr. (exp) Properties that control the appearance of the axis label.\n"}
{"page": 208, "text": "DataWindow Object Properties\nPage 208\nProperty for\nAxis\nValue\nfontproperty\nFor a list of font properties, see the main entry for DispAttr.fontproperty.\nPainter: Text tab. Choose Category Axis Label, Series Axis Label, or\nValues Axis Label, and set font properties.\nMajorDivisions (exp) An integer specifying the number of major divisions on the axis.\nPainter: Axis tab, Major Divisions group.\nMajorGridLine (exp) An integer specifying the type of line for the major grid. Values are\n0-5. See DropLines in this table for their meaning.\nPainter: Axis tab, Major Divisions group.\nNot supported by Render3D graph style.\nMajorTic\n(exp) An integer specifying the type of the major tick marks.\nValues are:\n1 -- None\n2 -- Inside\n3 -- Outside\n4 -- Straddle\nPainter: Axis tab, Major Divisions group.\nNot supported by Render3D graph style.\nMaximumValue(exp) A double specifying the maximum value for the axis.\nPainter: Axis tab, Scale group.\nMinimumValue (exp) A double specifying the minimum value for the axis.\nPainter: Axis tab, Scale group.\nMinorDivisions (exp) An integer specifying the number of minor divisions on the axis.\nPainter: Axis tab, Minor Divisions group.\nNot supported by Render3D graph style.\nMinorGridLine (exp) An integer specifying the type of line for the minor grid. Values are\n0-5. See DropLines in this table for their meaning.\nPainter: Axis tab, Minor Divisions group.\nNot supported by Render3D graph style.\nMinorTic\n(exp) An integer specifying the type of the minor tick marks.\nValues are:\n1 -- None\n2 -- Inside\n3 -- Outside\n4 -- Straddle\n"}
{"page": 209, "text": "DataWindow Object Properties\nPage 209\nProperty for\nAxis\nValue\nPainter: Axis tab, Minor Divisions group.\nNot supported by Render3D graph style.\nOriginLine\n(exp) An integer specifying the type of origin line for the axis. Values are\n0-5. See DropLines in this table for their meaning. Enabled for numeric\ndata axes.\nPainter: Axis tab, Line Style group.\nNot supported by Render3D graph style.\nPrimaryLine\n(exp) An integer specifying the type of primary line for the axis. Values are\n0-5. See DropLines in this table for their meaning.\nPainter: Axis tab, Line Style group.\nNot supported by Render3D graph style.\nRoundTo\n(exp) A double specifying the value to which you want to round the axis\nvalues. Specify both a value and a unit (described next).\nPainter: Axis tab, Scale group.\nRoundToUnit\n(exp) An integer specifying the units for the rounding value. The units must\nbe appropriate for the axis datatype.\nValues are:\n0 -- Default, for an axis of any datatype\n1 -- Years, for an axis of type date or DateTime\n2 -- Months, for an axis of type date or DateTime\n3 -- Days, for an axis of type date or DateTime\n4 -- Hours, for an axis of type time or DateTime\n5 -- Minutes, for an axis of type time or DateTime\n6 -- Seconds, for an axis of type time or DateTime\n7 -- Microseconds, for an axis of type time or DateTime\nPainter: Axis tab, Scale group.\nScaleType\n(exp) An integer specifying the type of scale used for the axis.\nValues are:\n1 -- Scale_Linear\n2 -- Scale_Log10\n3 -- Scale_Loge\nPainter: Axis tab, Scale group.\nScaleValue\n(exp) An integer specifying the scale of values on the axis.\nValues are:\n"}
{"page": 210, "text": "DataWindow Object Properties\nPage 210\nProperty for\nAxis\nValue\n1 -- Scale_Actual\n2 -- Scale_Cumulative\n3 -- Scale_Percentage\n4 -- Scale_CumPercent\nPainter: Axis tab, Scale group.\nSecondaryLine (exp) An integer specifying the type of secondary line for the axis. The line\nis parallel to and opposite the primary line and is usually not displayed in\n2D graphs. Values are 0-5. See DropLines in this table for their meaning.\nPainter: Axis tab, Line Style group.\nNot supported by Render3D graph style.\nShadeBackEdge(exp) A boolean number specifying whether the back edge of the axis is\nshaded.\nValues are:\n0 -- No, the back edge is not shaded\n1 -- Yes, the back edge is shaded\nPainter: Axis tab. Enabled for 3D graphs only.\nNot supported by Render3D graph style.\nSort\n(exp) An integer specifying the way the axis values should be sorted. (Does\nnot apply to the Values axis.)\nValues are:\n0 -- Unsorted\n1 -- Ascending\n2 -- Descending\nPainter: Axis tab, Line Style group.\nUsage\nIn the painter\nSelect the graph control or the Graph DataWindow object and set the value in the Properties\nview. To set most axis properties, select the Axis tab and an axis in the Axis drop-down list.\nFont properties are set on the Text tab.\nExamples\nstring ls_data\nls_data = dw1.Object.gr_1.Category.AutoScale\ndw1.Object.Category.LabelDispAttr.Alignment = 2\nls_data = dw1.Describe(\"gr_1.Category.AutoScale\")\ndw1.Modify(\"gr_1.Series.AutoScale=0\")\ndw1.Modify(\"gr_1.Values.Label='Cities'\")\ndw1.Modify(\"gr_1.Category.LabelDispAttr.Alignment=2\")\n"}
{"page": 211, "text": "DataWindow Object Properties\nPage 211\n3.3.12 BackColor\nDescription\nThe background color of a graph in a DataWindow.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.BackColor\nDescribe and Modify argument:\n\"graphname.BackColor { = long }\"\nTable 3.33:\nParameter\nDescription\ngraphname\nThe graph whose background color you want to get or set.\nlong\n(exp) A long expression specifying the color (red, green, and blue\nvalues) to be used as the graph's background color. Long can be a quoted\nDataWindow expression.\nUsage\nIn the painter\nSelect the graph control and set the value in the Properties view, General tab.\nExamples\ndw1.Object.graph_1.BackColor = 250\nsetting = dw1.Describe(\"graph_1.BackColor\")\ndw1.Modify(\"graph_1.BackColor=250\")\n3.3.13 Background.property\nDescription\nSettings for the color and transparency of a control.\nApplies to\nButton, Column, Computed Field, GroupBox, Line, Oval, Rectangle, RoundRectangle, and\nText controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Background.property\nDescribe and Modify argument:\n\"controlname.Background.property { = 'value ' }\"\nSyntaxFromSql:\nColumn ( Background.property = value )\nText ( Background.property = value )\n"}
{"page": 212, "text": "DataWindow Object Properties\nPage 212\nTable 3.34:\nParameter\nDescription\ncontrolname\nThe control whose Background properties you want to get or set.\nWhen generating DataWindow syntax with SyntaxFromSql, the\nBackground settings apply to all columns or all text controls.\nproperty\nA property that applies to the background of a control, as listed in the\nProperty table below.\nvalue\nValues for the properties are shown below. Value can be a quoted\nDataWindow expression.\nTable 3.35:\nProperty for\nBackground\nValue\nBrushmode\n(exp) An integer indicating the type of \"brush\" to use for the gradient.\nValues are:\nPainter: Background tab, Gradient group (not available in RichText,\nGraph, or OLE DataWindow objects).\nColor\n(exp) A long expression specifying the color (the red, green, and blue\nvalues) to be used as the control's background color.\nPainter: Background tab\nMode\n(exp) A number expression specifying the mode of the background of\ncontrolname.\nValues are:\n0 -- Make the control's background opaque\n1 -- Make the control's background transparent\n2 -- Make the control's background partially transparent\nTransparency\n(exp) An integer in the range 0 to 100, where 0 means that the column\nor control's primary background is opaque and 100 that it is completely\ntransparent.\nPainter: Background tab.\nGradient.Angle\n(exp) An integer indicating the angle in degrees (values are 0 to 360) used\nto offset the color and transparency gradient. This property is used only\nwhen the column's or control's background.gradient.mode takes values of\n3 or 4.\nPainter: Background tab, Gradient group.\nGradient.Color\n(exp) A long specifying the color (the red, green, and blue values) to be\nused as the column or control's secondary background color. The gradient\ndefines transitions between the primary and secondary background colors.\nPainter: Background tab, Gradient group.\nGradient.Focus\n(exp) An integer in the range 0 to 100, specifying the distance (as\na percentage) from the center where the background color is at its\n"}
{"page": 213, "text": "DataWindow Object Properties\nPage 213\nProperty for\nBackground\nValue\nmaximum. (For example, if the radial gradient is used and the value is set\nto 0, the color will be at the center of the background; if the value is set to\n100, the color will be at the edges of the background.)\nPainter: Background tab, Gradient group\nGradient.Repetition.Mode\n(exp) Specifies the mode for determining the number of gradient\ntransitions for the column's or control's background color and\ntransparency.\nPermitted values and their meanings are:\n\u2022 0\nGradient.repetition.count determines the number of gradient transitions\n\u2022 1\nGradient.repetition.length determines the number of gradient transitions\nPainter: Background tab, Gradient group.\nGradient.Repetition.Count\n(exp) An integer specifying the number of gradient transitions for\nbackground color and transparency. A value of 0 indicates 1 transition.\nA value of 3 indicates 4 transitions. This property is used only when the\ngradient.repetition.mode property for the column or control takes the\nvalue of 0 (by count).\nPainter: Background tab, Gradient group.\nGradient.Repetition.Length\n(exp) A long specifying the number of gradient transitions. This property\nis used only when the gradient.repetition.mode property for the column or\ncontrol takes the value of 1 (by length). The units for the length that you\nassign for gradient transitions are set by the DataWindow object's Units\nproperty.\nPainter: Background tab, Gradient group.\nGradient.Scale\n(exp) An integer in the range 0 to 100 specifying the rate of transition to\nthe gradient color (as a percentage).\nPainter: Background tab, Gradient group\nGradient.Spread (exp) An integer in the range 0 to 100 indicating the contribution of the\nsecond color to the blend (as a percentage).\nPainter: Background tab, Gradient group\nGradient.Transparency\n(exp) An integer in the range 0 to 100, where 0 means that the column\nor control's secondary (gradient) background is opaque and 100 that it\nis completely transparent. The gradient defines transitions between the\nprimary and secondary transparency settings.\nPainter: Background tab, Gradient group.\nUsage\n"}
{"page": 214, "text": "DataWindow Object Properties\nPage 214\nIn the painter\nSelect the control and set the value in the Properties view, Font tab for controls that have text\nand in the General tab for drawing controls (choose Transparent or a color).\nWhen you choose a Brush Hatch fill pattern other than Solid for an Oval, Rectangle, or\nRoundRectangle control, the Background Color and the Brush Color are used for the pattern\ncolors.\nBackground color of a button\nThe background color of a button will take effect only when the Windows classic style\noption is selected. Select \"Enable Windows Classic Style in the IDE\" in the System Options\nfor this property to take effect when running the application from the IDE; and select\n\"Windows classic style\" in the project painter for this property to take effect when running\nthe application executable.\nBackground color of a line\nThe background color of a line is the color that displays between the segments of the line\nwhen the pen style is not solid.\nTransparent background\nIf Background.Mode is transparent (1), Background.Color is ignored.\nBackground gradient properties\nBackground gradient and transparency properties do not apply to DataWindow objects with\nthe RichText, Graph, or OLE presentation style, and do not apply to the Line control.\nDropDownDataWindows and GetChild\nWhen you set Background.Color and Background.Mode for a column with a\nDropDownDataWindow, references to the DropDownDataWindow become invalid. Call\nGetChild again after changing these properties to obtain a valid reference.\nExamples\ndw1.Object.oval_1.Background.Color = RGB(255, 0, 128)\nls_data = dw1.Describe(\"oval_1.Background.Color\")\ndw1.Modify(\"emp_name.Background.Color='11665407'\")\nls_data = dw1.Describe(\"emp_name.Background.Mode\")\ndw1.Modify(\"emp_name.Background.Mode='1'\")\ndw1.Modify(\"rndrect_1.Background.Mode='0'\")\nSQLCA.SyntaxFromSQL(sql_syntax, &\n   \"Style(...) Column(Background.Mode=1 ...) ...\", &\n   ls_Errors)\nSQLCA.SyntaxFromSQL(sql_syntax, &\n  \"Style(...) Column(Background.Color=11665407 ...)\", &\n  ls_Errors)\n3.3.14 BackImage\nDescription\nThe column that contains the background image for an InkPicture control in a DataWindow.\nApplies to\nInkPicture controls\nSyntax\n"}
{"page": 215, "text": "DataWindow Object Properties\nPage 215\nPowerBuilder dot notation:\ndw_control.Object.inkpicname.BackImage\nDescribe and Modify argument:\n\"inkpicname.BackImage{ = colname }\"\nTable 3.36:\nParameter\nDescription\ninkpicname\nThe graph whose background color you want to get or set.\ncolname\nA string value specifying the name of the long binary column that contains\nthe background image for the control.\nUsage\nIn the painter\nSelect the InkPicture control and set the value in the Properties view, Definition tab, Col for\nImage property. The image format can be JPEG, GIF, BMP, or ICO. If you change the image,\ncall the Retrieve method to force the DataWindow to retrieve the new image.\nExamples\nsval = dw1.Object.inkpic_1.backimage\ndw1.Object.inkpic_1.backimage = 'InkImg'\n3.3.15 Band\nDescription\nThe band or layer in the DataWindow object that contains the control. The returned text is\none of the following, where # is the level number of a group: detail, footer, header, header.#,\nsummary, trailer.#, tree.level.#, foreground, background.\nChanging a control's band\nUse the SetPosition method to change a control's band at runtime.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, Line, OLE, Oval, Picture, Rectangle,\nReport, RoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Band\nDescribe and Modify argument:\n\"controlname.Band\"\nTable 3.37:\nParameter\nDescription\ncontrolname\nThe name of the control within the DataWindow for which you want the\nband it occupies\n"}
{"page": 216, "text": "DataWindow Object Properties\nPage 216\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab, Layer option. When\nthe control's layer is Band, you can drag the control into another band.\nExamples\nls_data = dw1.Object.emp_title.Band\nls_data = dw1.Describe(\"emp_title.Band\")\n3.3.16 Bandname.property\nDescription\nSettings for the color, size, and pointer of a band in the DataWindow object. The gradient\nsettings do not work in reports.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.bandname.property\nDescribe and Modify argument:\n\"DataWindow.bandname{.#}.property { = value }\"\nTable 3.38:\nParameter\nDescription\nbandname\nThe identifier of a band in the DataWindow object.\nValues are:\n\u2022 Detail\n\u2022 Footer\n\u2022 Summary\n\u2022 Header\n\u2022 Trailer\n\u2022 Tree.Level\nSetting the header.#, trailer.#, and tree.level.# bands\nYou cannot use dot notation to set the header.#, trailer.#, and tree.level.#\nbands.\n#\nThe number of the group or TreeView level you want when bandname is\nHeader, Trailer, or Tree.Level. The group must exist.\nproperty\nA property that applies to the band, as listed in the table below.\n"}
{"page": 217, "text": "DataWindow Object Properties\nPage 217\nParameter\nDescription\nvalue\nValues for the properties are shown in the following table.\n \nTable 3.39:\nProperty for\nBandname\nValue\nBrushmode\n(exp) An integer indicating the type of \"brush\" to use for the gradient.\nValues are:\n0 -- Solid\n1 -- Horizontal\n2 -- Vertical\n3 -- Angle\n4 -- ScaledAngle\n5 -- Radial\nPainter: Background tab, Gradient group (not available for RichText, Graph,\nor OLE DataWindow objects).\nColor\n(exp) A long specifying the color (the red, green, and blue values) to be\nused as the band's background color. Value can be a quoted DataWindow\nexpression.\nPainter: General tab.\nHeight\nAn integer specifying the height of the detail area in the unit of measure\nspecified for the DataWindow.\nPainter: General tab.\nFor another way of setting the height of the detail band, see the\nSetDetailHeight method.\nHeight.AutoSizeAllows the band to grow to display a row, picture, or nested report without\ncutting off any of its content. In the detail band, selecting this property sets\nthe minimum height for all rows to the size specified by the Height property\nfor the band.\nValues are:\nNo -- Fixes the band height to the size set for the Height property of the\nband.\nYes -- Adjusts the band height to accommodate the full content of a row or\nthe controls in the band. However, the band height cannot be reduced below\nthe value set for the Height property of the band.\nThis property can be especially useful to set on the detail band when\nit contains rows with a text column that you want to display without\ncutting off any of the text. The height of the detail band must not grow\n"}
{"page": 218, "text": "DataWindow Object Properties\nPage 218\nProperty for\nBandname\nValue\nlarger than a page, except when it contains nested DataWindows with the\nReport.Height.AutoSize property set to Yes.\nYou can set this property on individual columns and controls as well as on\nthe band itself. For more information, see the Height.AutoSize property for\nDataWindow objects.\nThere are some limitations on the use of this property:\n\u2022 The Height.Autosize property is not supported on DataWindows with\nGraph, Label, OLE, or Rich Text presentation styles.\n\u2022 Nested report overflow to the next page is supported in detail bands only.\n\u2022 Bands cannot be autosized if autosizing would preclude the display of at\nleast one detail band row per page.\nPainter: General tab when the band is selected.\nPointer\n(exp) A string specifying a value of the Pointer enumerated datatype or the\nname of a cursor file (.CUR) to be used for the pointer. See Section 2.4.759,\n\u201cSetPointer\u201d in PowerScript Reference for a list of Pointer values.\nPointername can be a quoted DataWindow expression.\nPainter: Pointer tab.\nSuppress\nA boolean that lets you suppress group headers after page breaks. You can\nset this property on group header bands only. When a group listing straddles\na page break, all group headers for which you set this property will be\nsuppressed. The suppressed headers do not display at the top of the page.\nHowever, if the page break coincides with the start of a new group, only\nheaders above the current group header can be suppressed.\nValues are:\nNo -- Does not suppress group headers.\nYes -- Suppresses group headers.\nPainter: General tab when a group header band is selected.\nTransparency\n(exp) An integer in the range 0 to 100, where 0 means that the background is\nopaque and 100 that it is completely transparent.\nPainter: Background tab.\nGradient.Angle (exp) An integer indicating the angle in degrees (values are 0 to 360) used to\noffset the color and transparency gradient. This property is used only when\nthe DataWindow band gradient.mode takes values of 3 or 4.\nPainter: Background tab, Gradient group.\nGradient.Color (exp) A long specifying the color (the red, green, and blue values) to be\nused as the band object's secondary background color. The gradient defines\n"}
{"page": 219, "text": "DataWindow Object Properties\nPage 219\nProperty for\nBandname\nValue\ntransitions between the primary and secondary background colors. Value\ncan be a quoted DataWindow expression.\nPainter: Background tab.\nGradient.Focus (exp) An integer in the range 0 to 100, specifying the distance (as a\npercentage) from the center where the background color is at its maximum.\n(For example, if the radial gradient is used and the value is set to 0, the color\nwill be at the center of the background; if the value is set to 100, the color\nwill be at the edges of the background.)\nPainter: Background tab, Gradient group\nGradient.Scale (exp) An integer in the range 0 to 100 specifying the rate of transition to the\ngradient color (as a percentage).\nPainter: Background tab, Gradient group\nGradient.Spread(exp) An integer in the range 0 to 100 indicating the contribution of the\nsecond color to the blend (as a percentage).\nPainter: Background tab, Gradient group\nGradient.Repetition.Mode\n(exp) Specifies the mode for determining the number of gradient transitions\nfor band background color and transparency.\nPermitted values and their meanings are:\n\u2022 0\nGradient.repetition.count determines the number of gradient transitions\n\u2022 1\nGradient.repetition.length determines the number of gradient transitions\nPainter: Background tab, Gradient group.\nGradient.Repetition.Count\n(exp) An integer specifying the number of gradient transitions for\nbackground color and transparency. A value of 0 indicates 1 transition.\nA value of 3 indicates 4 transitions. This property is used only when the\ngradient.repetition.mode property for the DataWindow band takes the value\nof 0 (by count).\nPainter: Background tab, Gradient group.\nGradient.Repetition.Length\n(exp) A long specifying the number of gradient transitions. This property is\nused only when the gradient.repetition.mode property for the DataWindow\nband takes the value of 1 (by length). The units for the length that you\nassign for the band's gradient transitions are set by the DataWindow object's\nUnits property.\nPainter: Background tab, Gradient group.\nGradient.Transparency\n(exp) An integer in the range 0 to 100, where 0 means that the band's\nsecondary (gradient) background is opaque and 100 that it is completely\n"}
{"page": 220, "text": "DataWindow Object Properties\nPage 220\nProperty for\nBandname\nValue\ntransparent. The gradient defines transitions between the primary and\nsecondary transparency settings.\nPainter: Background tab, Gradient group.\nUsage\nIn the painter\nSelect the band by clicking the gray divider for the band. Set the value in the Properties view.\nExamples\nstring ls_data\nls_data = dw1.Object.DataWindow.Detail.Height\ndw1.Object.DataWindow.Detail.Pointer = \"hand.cur\"\n \nls_data = dw1.Describe(\"DataWindow.Detail.Height\")\nls_data = &\n   dw1.Describe(\"DataWindow.Detail.Height.AutoSize\")\ndw1.Modify(\"DataWindow.Detail.Pointer='hand.cur'\")\ndw1.Modify(\"DataWindow.Detail.Pointer='~\"Cross!~\" ~t \nif(emp_status=~\"a~\", ~\"HourGlass!~\", ~\"Cross!~\")'\")\ndw1.Modify(\"DataWindow.Footer.Height=250\")\nll_color = RGB(200, 200, 500)\ndw1.Modify(\"DataWindow.Header.2.Color=\" &\n   + String(ll_color))\ndw1.Modify(\"DataWindow.Trailer.2.Height=500\")\ndw1.Modify( &\n  \"DataWindow.Summary.Pointer='c:\\pb\\total.cur'\")\n3.3.17 Bandname.Text\nDescription\n(RichText presentation style only) The rich text content of the specified band as an ASCII\nstring.\nApplies to\nDataWindows in the RichText presentation style\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.bandname.Text\nDescribe and Modify argument:\n\"DataWindow.bandname.Text { = rtfstring }\"\nTable 3.40:\nParameter\nDescription\nbandname\nThe identifier of a band in the DataWindow object that has the RichText\npresentation style. Values are:\n\u2022 Detail\n"}
{"page": 221, "text": "DataWindow Object Properties\nPage 221\nParameter\nDescription\n\u2022 Header\n\u2022 Footer\nrtfstring\nA string whose value is the rich text content of the band. The string includes\nthe rich text formatting codes, text, and input fields.\nText assigned to the header or footer band is ignored if\nRichText.HeaderFooter is set to no.\nWhen you assign text using the Modify method or dot notation, nested quotes\nmust be represented with tildes and quotes. If your data is a pure RTF string,\nuse the PasteRTF method.\nUsage\nIn the painter\nSet the value by editing the content of each band in the painter workspace.\nExamples\nls_footertext = dw1.Object.DataWindow.Footer.Text\nls_data = dw1.Describe(\"DataWindow.Detail.Text\")\n3.3.18 Bands\nDescription\nA list of the bands in the DataWindow object. The list can include one or more of the\nfollowing band identifiers, where # is the level number of a group: Detail, Footer, Header,\nHeader.#, Summary, Trailer.#, Tree.Level.#. The items in the list are separated by tabs.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Bands\nDescribe argument:\n\"DataWindow.Bands\"\nExamples\nls_data = dw1.Object.DataWindow.Bands\nls_data = dw1.Describe(\"DataWindow.Bands\")\n3.3.19 BinaryIndex\nDescription\nAn internal index that PowerBuilder uses to manage the OLE Object control in the library.\nThere is no reason to get this value; the value has no external significance.\nApplies to\n"}
{"page": 222, "text": "DataWindow Object Properties\nPage 222\nOLE Object controls\nSyntax\n\"olecontrolname.BinaryIndex\"\n3.3.20 BitmapName\nDescription\nWhether PowerBuilder interprets the column's value as the name of a picture file and displays\nthe picture instead of the text. BitmapName's value is either Yes or No.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.BitmapName\nDescribe argument:\n\"columnname.BitmapName\"\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Display As Pic\noption.\nExamples\nls_data = dw1.Object.emp_name.BitmapName\nls_data = dw1.Describe(\"emp_name.BitmapName\")\n3.3.21 Border\nDescription\nThe type of border for the control.\nApplies to\nColumn, Computed Field, Graph, GroupBox, OLE, Picture, Report, TableBlob, and Text\ncontrols\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Border\nDescribe and Modify argument:\n\"controlname.Border { = 'value ' }\"\nSyntaxFromSql:\n   Column ( ... Border = value ... )\n"}
{"page": 223, "text": "DataWindow Object Properties\nPage 223\n   Text ( ... Border = value ... )\nTable 3.41:\nParameter\nDescription\ncontrolname\nThe name of the control whose border you want to get or set.\nWhen generating DataWindow syntax with SyntaxFromSql, the Border\nsetting applies to all columns or all text controls.\nvalue\n(exp) A number specifying the type of border.\nValues are:\n0 -- None\n1 -- Shadow\n2 -- Rectangle\n3 -- Resize\n4 -- Line\n5 -- 3D Lowered\n6 -- 3D Raised\nThe value can be a quoted DataWindow painter expression.\nWhen you change between Resize and another border, change the\nResizeable property too so that the control's appearance and behavior match.\nFor columns, you can access the Border property with the GetBorderStyle\nand SetBorderStyle methods.\nThe \"3D Lowered\" style will take effect only when the Windows classic\nstyle option is selected. Select \"Enable Windows Classic Style in the IDE\" in\nthe System Options for this style to take effect when running the application\nfrom the IDE; and select \"Windows classic style\" in the project painter for\nthis style to take effect when running the application executable.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nChanging the Border setting between Resize and another border affects the Resizeable\noption on the Position tab. To make another border resizable, choose the border then reset\nResizeable.\nFor examples of other ways to set properties, using Border as an example, see What you can\ndo with DataWindow object properties.\nExamples\nstring ls_data\nls_data = dw1.Object.emp_name_t.Border\ndw1.Object.emp_name_t.Border='6'\nls_data = dw1.Describe(\"emp_name_t.Border\")\ndw1.Modify(\"emp_name_t.Border='6'\")\n"}
{"page": 224, "text": "DataWindow Object Properties\nPage 224\nSQLCA.SyntaxFromSQL(sql_syntax, &\n\"Style(...) Column(Border=5 ...) ...\", ls_Errors)\n3.3.22 Brush.property\nDescription\nSettings for the fill pattern and color of a graphic control.\nApplies to\nOval, Rectangle, and RoundRectangle controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Brush.property\nDescribe and Modify argument:\n\"controlname.Brush.property { = 'value ' }\"\nTable 3.42:\nParameter\nDescription\ncontrolname\nThe name of the Line, Oval, Rectangle, RoundRectangle, or Text control\nwhose Brush property you want to get or set.\nproperty\nA property that applies to the Brush characteristics of a control, as listed in\nthe table below.\nvalue\nValues for the properties are shown in the next table. Value can be a quoted\nDataWindow expression.\n \nTable 3.43:\nProperty for\nBrush\nValue\nColor\n(exp) A long expression specifying the color (the red, green, and blue\nvalues) to be used to fill the control.\nHatch\n(exp) A number expression specifying the fill pattern of controlname.\nValues are:\n0 -- Horizontal\n1 -- Bdiagonal (lines from lower left to upper right)\n2 -- Vertical\n3 -- Cross\n4 -- Fdiagonal (lines from upper left to lower right)\n5 -- DiagCross\n6 -- Solid\n7 -- Transparent\n"}
{"page": 225, "text": "DataWindow Object Properties\nPage 225\nProperty for\nBrush\nValue\n8 - Background (use the settings on the Background tab)\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nWhen you choose a Brush Hatch fill pattern other than Solid or Transparent, the Background\nColor and the Brush Color are used for the pattern colors.\nExamples\nstring ls_data\nls_data = dw1.Object.oval_1.Brush.Hatch\ndw1.Object.oval_1.Brush.Hatch = 5\nls_data = dw1.Describe(\"oval_1.Brush.Hatch\")\ndw1.Modify(\"oval_1.Brush.Hatch='5'\")\ndw1.Modify(\"oval_1.Brush.Color='16731766'\")\n3.3.23 Brushmode\nDescription\nSetting that controls the type of \"brush\" used for the background or primary gradient.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.brushmode\nDescribe and Modify argument:\n\"DataWindow (brushmode = { integer } )\"\nTable 3.44:\nParameter\nDescription\ninteger\nThe value to be assigned to the property:\n0 -- Solid\n1 -- HorizontalGradient\n2 -- VerticalGradient\n3 -- AngleGradient\n4 -- ScaledAngleGradient\n5 -- RadialGradient\n6 -- Picture\nUsage\n"}
{"page": 226, "text": "DataWindow Object Properties\nPage 226\nIn the painter\nSet the brushmode value on the Background tab of the Properties view.\nIf you save to an EMF or WMF, the properties on the Background tab are not saved with the\nDataWindow.\nThe following table explains the possible values for Brushmode:\nTable 3.45:\nValue\nDescription\n0 - Solid\nThe background is a solid color as selected\n1 -\nHorizontalGradient\nThe color changes horizontally from the primary color (and transparency)\nto the secondary color (and transparency). The primary values are\ndefined by the datawindow.color and datawindow.transparency, and\nthe secondary values are defined by datawindow.gradient.color and\ndatawindow.gradient.transparency. The gradient can be repeated using the\ndatawindow.gradient.repetition.mode property.\n2 -\nVerticalGradient\nThe color changes vertically from the background color (and transparency)\nto the secondary color (and transparency). The primary values are\ndefined by the datawindow.color and datawindow.transparency, and\nthe secondary values are defined by datawindow.gradient.color and\ndatawindow.gradient.transparency. The gradient can be repeated using the\ndatawindow.gradient.repetition.mode property.\n3 -\nAngleGradient\nThe color changes at a specific angle off the horizontal from the\nbackground color (and transparency) to the secondary color (and\ntransparency). The angle is specified in datawindow.gradient.angle.\nThe primary values are defined by the datawindow.color and\ndatawindow.transparency, and the secondary values are defined by\ndatawindow.gradient.color and datawindow.gradient.transparency. The\ngradient can be repeated using the datawindow.gradient.repetition.mode\nproperty.\n4 -\nScaledAngleGradient\nThe color changes at an angle, which adjusts according to the changes\nin the aspect ratio of the DataWindow control. The starting angle\nis specified in datawindow.gradient.angle. The primary values are\ndefined by the datawindow.color and datawindow.transparency, and\nthe secondary values are defined by datawindow.gradient.color and\ndatawindow.gradient.transparency. The gradient can be repeated using the\ndatawindow.gradient.repetition.mode property.\n5 -\nRadialGradient\nThe background color (and transparency) starts at the center and slow\nchanges to the gradient color (and transparency) at the boundaries of the\nDataWindow. The primary values are defined by the datawindow.color\nand datawindow.transparency, and the secondary values are defined by\ndatawindow.gradient.color and datawindow.gradient.transparency.\n6 - Picture\nA picture is used as the background. The image is specified in\ndatawindow.picture.file.\nSee also\n"}
{"page": 227, "text": "DataWindow Object Properties\nPage 227\nColor\nTransparency (DataWindow objects)\nGradient.property\nPicture.property\n3.3.24 Category\nSee Axis, Axis.property, and DispAttr.fontproperty.\n3.3.25 CheckBox.property\nDescription\nSettings for a column whose edit style is CheckBox.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.CheckBox.property\nDescribe and Modify argument:\n\"columnname.CheckBox.property { = value }\"\nTable 3.46:\nParameter\nDescription\ncolumnname\nThe column whose edit style is CheckBox for which you want to get or set\nproperty values.\nproperty\nA property for the CheckBox edit style, as listed in the table below.\nvalue\nValues for the properties are shown in the table below. For CheckBox\nproperties, value cannot be a DataWindow expression.\n \nTable 3.47:\nProperty for\nCheckBox\nValue\nLeftText\nWhether the CheckBox label is to the left or right of the CheckBox.\nValues are:\nYes -- Display the label on the left.\nNo -- Display the label on the right.\nPainter: Edit tab, Left Text option.\nOff\nA string constant specifying the column value when the CheckBox is off\n(unchecked). The resulting value must be the same datatype as the column.\n"}
{"page": 228, "text": "DataWindow Object Properties\nPage 228\nProperty for\nCheckBox\nValue\nPainter: Edit tab, Data Value for Off option.\nOn\nA string constant specifying the value that will be put in the column when\nthe CheckBox is on (checked). The resulting value must be the same\ndatatype as the column.\nPainter: Edit tab, Data Value for On option.\nOther\nA string constant specifying the value that will be put in the column when\nthe CheckBox is in the third state (neither checked nor unchecked). The\nvalue must be the same datatype as the column.\nPainter: Edit tab, This option is available when ThreeStates is True.\nScale\nWhether you want to scale the 2D CheckBox. Takes effect only when the\nThreeD property is No.\nValues are:\nYes -- Scale the CheckBox.\nNo -- Do not scale the CheckBox.\nPainter: Edit tab,Scale option.\nText\nA string specifying the CheckBox's label text.\nPainter: Edit tab, Text option.\nThreeD\nWhether the CheckBox should be 3D.\nValues are:\nYes -- Make the CheckBox 3D\nNo -- Do not make the CheckBox 3D\nPainter: Edit tab, 3D Look option.\nThreeStates\nWhether the CheckBox should have three states.\nValues are:\nYes -- The CheckBox has three states\nNo -- The CheckBox does not have three states\nPainter: Edit tab, 3 States option.\nUsage\nIn the painter\nSelect the control and set values in the Properties view, Edit tab, when Style Type option is\nCheckBox.\nExamples\ndw1.Modify(\"emp_gender.CheckBox.3D=no\")\nIF dw1.Describe(\"emp_status.CheckBox.LeftText\") &\n      = \"yes\" THEN\ndw1.Modify(\"emp_status2.CheckBox.LeftText=yes\")\n"}
{"page": 229, "text": "DataWindow Object Properties\nPage 229\nEND IF\ndw1.Modify(\"emp_status.CheckBox.Off='Terminated'\")\ndw1.Modify(\"emp_status.CheckBox.On='Active'\")\ndw1.Modify(\"emp_status.CheckBox.Other='Unknown'\")\ndw1.Object.emp_gender.CheckBox.ThreeD = \"no\"\nIF dw1.Object.emp_status.CheckBox.LeftText = \"yes\" THEN\ndw1.Object.emp_status2.CheckBox.LeftText = \"yes\"\nEND IF\n3.3.26 ClientName\nDescription\nThe name of the OLE client. The default is \"Untitled.\" ClientName is used by some\napplications in the server window's title.\nApplies to\nOLE Object and TableBlob controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.ClientName\nDescribe and Modify argument:\n\"controlname.ClientName { = ' clientname  ' }\"\nTable 3.48:\nParameter\nDescription\ncontrolname\nThe name of a blob column or an OLE Object control.\nclientname\n(exp) A string expression to be used in the title of the server application's\nwindow. For a blob, the string usually includes data from the current row so\nthat the window title can identify the blob's row.\nBegin the string with a tab (~t) when you modify the value so that\nPowerBuilder evaluates the expression instead of displaying it.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Options tab.\nExamples\ncname = dw1.Object.emppict_blob.ClientName\ndw1.Object.emppict_blob.ClientName = &\n      \"~t'Data for ' String(emp_id)\"\ncname = dw1.Describe(\"emppict_blob.ClientName\")\ndw1.Modify(\"emppict_blob.ClientName='\" + &\n   \"~t~\"Data for ~\" + String(emp_id)'\")\n3.3.27 Color\nDescription\n"}
{"page": 230, "text": "DataWindow Object Properties\nPage 230\nThe text color of the column or the background color of the DataWindow.\nThe color affected by the Color property depends on the control:\n\u2022 For the DataWindow, Color specifies the background color\n\u2022 For columns, computed fields, and text, Color specifies the text color\n\u2022 For graphs, Color specifies the line color used for axes, borders around data markers, tick\nmarks, and the outline of the box for 3D graphs\nApplies to\nDataWindow, Button, Column, Graph, and GroupBox controls\nSyntax\nPowerBuilder dot notation:\n   dw_control.Object.DataWindow.Color\n   dw_control.Object.controlname.Color\nDescribe and Modify argument:\n   \"DataWindow.Color { = long }\"\n   \"controlname.Color { = long }\"\nSyntaxFromSql:\n   DataWindow ( Color = long )\n   Column ( Color = long )\nTable 3.49:\nParameter\nDescription\ncontrolname\nThe column whose text color you want to set or the graph whose line color\nyou want to set.\nlong\n(exp for columns only) A long value specifying the color of the column text\nor the DataWindow background. When you are specifying the text color of\na column, you can specify a DataWindow expression in quotes. You cannot\nspecify an expression for the DataWindow background color.\nWhen generating DataWindow syntax with SyntaxFromSql, the Color\nsetting for Column applies to all columns.\nUsage\nIn the painter\nFor the DataWindow background, click the DataWindow to deselect all controls and set the\nvalue in the Properties view, Background tab, Color option. If you save to an EMF or WMF,\nthe properties on the Background tab are not saved with the DataWindow.\nFor a column's text color, select the column and set the value in the Properties view, Font tab,\nText Color option.\nFor a graph's line color, select the graph and set the value in the Properties view, General tab,\nText Color option.\n"}
{"page": 231, "text": "DataWindow Object Properties\nPage 231\nExamples\nstring column_text_color\ncolumn_text_color = dw1.Object.emp_name.Color\ndw1.Object.salary.Color = &\n      \"0~tIf(salary>90000,255,65280)\"\ndw_back_color = dw1.Describe(\"DataWindow.Color\")\ncolumn_text_color = dw1.Describe(\"emp_name.Color\")\ndw1.Modify( &\n      \"salary.Color='0~tIf(salary>90000,255,65280)'\")\nSee also\nBackColor\nBackground.property\n3.3.28 ColType\nDescription\nThe datatype of the column or computed field.\nApplies to\nColumn and Computed Field controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.ColType\nDescribe argument:\n\"controlname.ColType\"\nTable 3.50:\nParameter\nDescription\ncontrolname\nThe column for which you want the datatype. Possible datatypes are:\n\u2022 Char (n) -- n is the number of characters\n\u2022 Date\n\u2022 DateTime\n\u2022 Decimal (n) -- n is the number of decimal places\n\u2022 Int\n\u2022 Long\n\u2022 Number\n\u2022 Real\n\u2022 Time\n"}
{"page": 232, "text": "DataWindow Object Properties\nPage 232\nParameter\nDescription\n\u2022 Timestamp\n\u2022 ULong\nUsage\nIn the painter\nThe value of ColType is derived from the data or expression you specify for the control. The\nvalue is displayed in the Column Specifications view.\nDate column types\nIf you define a DataWindow with a column of type Date and deploy it with a DBMS\nthat uses the DateTime datatype, set the StaticBind database parameter to 0 or No.\nThis forces PowerBuilder to get a result set description before retrieving data and\nadjust the bind information if necessary.\nFor more information, see Section 1.1.162, \u201cStaticBind\u201d in Connection Reference.\nExamples\nstring ls_coltype\nls_coltype = dw1.Object.emp_id.ColType\nls_coltype = dw1.Describe(\"emp_id.ColType\")\n3.3.29 Column.Count\nDescription\nThe number of columns in the DataWindow object.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Column.Count\nDescribe argument:\n\"DataWindow.Column.Count\"\nUsage\nIn the painter\nThe value is determined by the number of columns you select in the SQL Select painter,\nwhether or not they are displayed.\nColumn limit\nThere is a limit of 1000 on the number of columns in a DataWindow object.\n"}
{"page": 233, "text": "DataWindow Object Properties\nPage 233\nExamples\nstring ls_colcount\nls_colcount = dw1.Object.DataWindow.Column.Count\nls_colcount = dw1.Describe(\"DataWindow.Column.Count\")\n3.3.30 ContentsAllowed\nDescription\nThe way the OLE Object control holds the OLE object. You can restrict the container to only\nembedded or only linked objects, or you can allow either type.\nApplies to\nOLE Object controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.olecontrolname.ContentsAllowed\nDescribe and Modify argument:\n\"olecontrolname.ContentsAllowed { = ' contentstype ' }\"\nTable 3.51:\nParameter\nDescription\nolecontrolname The name of the OLE Object control for which you want to get or set the\ntype of contents.\ncontentstype\nA number specifying whether the OLE object in the control has to be\nembedded, has to be linked, or can be either embedded or linked.\nValues are:\n0 -- Embedded\n1 -- Linked\n2 -- Any\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Options tab, Contents option.\nExamples\nstring ls_data\nls_data = dw1.Object.ole_report.ContentsAllowed\ndw1.Object.ole_report.ContentsAllowed = 2\nls_data = dw1.Describe(\"ole_report.ContentsAllowed\")\ndw1.Modify(\"ole_report.ContentsAllowed='2'\")\n3.3.31 Criteria\nDescription\n"}
{"page": 234, "text": "DataWindow Object Properties\nPage 234\nThe search condition of the WHERE clause for a related report. The Criteria property defines\nthe connection between the related report and the DataWindow.\nApplies to\nReport controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.reportname.Criteria\nDescribe and Modify argument:\n\"reportname.Criteria { = string }\"\nTable 3.52:\nParameter\nDescription\nreportname\nThe name of the report control for which you want to get or set Criteria.\nstring\nAn expression that will be the search condition of the WHERE clause for the\nrelated report.\nExamples\nls_colcount = dw1.Object.rpt_1.Criteria\ndw1.Object.rpt_1.Criteria = \"emp_id=:emp_id\"\nls_colcount = dw1.Describe(\"rpt_1.Criteria\")\ndw1.Modify(\"rpt_1.Criteria='emp_id=:emp_id'\")\nSee also\nNest_Arguments DataWindow object property in Nest_Arguments.\n3.3.32 Criteria.property\nDescription\nSettings for the Prompt for Criteria dialog box. When Prompt for Criteria is enabled,\nPowerBuilder prompts the user to specify criteria for retrieving data whenever the Retrieve\nmethod is called. Note that the Required property also affects query mode.\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Criteria.property\nDescribe and Modify argument:\n\"columnname.Criteria.property { = value }\"\nTable 3.53:\nParameter\nDescription\ncolumnname\nThe name of the column for which you want to get or set Prompt for\nCriteria properties.\n"}
{"page": 235, "text": "DataWindow Object Properties\nPage 235\nParameter\nDescription\nproperty\nA property for the Prompt for Criteria dialog box. Properties and their\nsettings are listed in the table below.\nvalue\nA Yes or No value to be assigned to the property. For Criteria properties,\nvalue cannot be a DataWindow expression.\n \nTable 3.54:\nProperty for\nCriteria\nValue\nDialog\nWhether Prompt for Criteria is on for columnname.\nValues are:\nYes -- Include columnname in the Prompt for Criteria dialog box.\nNo -- (Default) Do not include columnname in the Prompt for Criteria\ndialog box.\nIf the Dialog property is Yes for at least one column in the DataWindow,\nthen PowerBuilder displays the Prompt for Criteria dialog box when the\nRetrieve method is called.\nPainter: Column Specifications view, Prompt check box.\nOverride_Edit\nWhether the user must enter data in the Prompt for Criteria dialog box\naccording to the edit style defined for the column in the DataWindow\nobject or be allowed to enter any specifications in a standard edit control.\nValues are:\nYes -- Allow the user to override the column's edit style and enter data in a\nstandard edit control.\nNo -- (Default) Constrain the user to the edit style for the column.\nPainter: Properties view, General Tab, Override Edit option.\nRequired\nWhether the user is restricted to the equality operator (=) when specifying\ncriteria in query mode and in the Prompt for Criteria dialog box.\nValues are:\nYes -- Require the user to use the equality operator only.\nNo -- (Default) Allow the user to use any relational operator, including =,\n<>, <, >, >=, and <=.\nPainter: Properties view, General tab, Equality Required option.\nUsage\nIn the painter\nSet the values using the menus and Properties view as described in the table above.\nExamples\n"}
{"page": 236, "text": "DataWindow Object Properties\nPage 236\nstring setting\nsetting = dw1.Object.empname.Criteria.Dialog\ndw1.Object.empname.Criteria.Dialog= \"Yes\"\nsetting = dw1.Describe(\"empname.Criteria.Dialog\")\ndw1.Modify(\"empname.Criteria.Dialog=Yes\")\ndw1.Modify(\"empname.Criteria.Override_Edit=Yes\")\ndw1.Modify(\"empname.Criteria.Required=No\")\nIF dw1.Describe(\"empname.Edit.Style\") = \"dddw\" THEN\ndw1.Modify(\"empname.Criteria.Override_Edit=Yes\")\nEND IF\n3.3.33 Crosstab.property\nDescription\nSettings for a DataWindow object whose presentation style is Crosstab.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Crosstab.property\nDescribe and Modify argument:\n\"DataWindow.Crosstab.property { = value }\"\nTable 3.55:\nParameter\nDescription\nproperty\nA property for a Crosstab DataWindow. Properties and their settings are listed\nin the table below.\nvalue\nA string expression listing the items to be assigned to the property. For\nCrosstab properties, value is always quoted and can be a DataWindow\nexpression.\nTable 3.56:\nProperty for\nCrosstab\nValue\nColumns\n(exp) A string containing a comma- or tab-separated list of the names of\ncolumns that make up the columns of the crosstab. These are the columns\nthat display across the top of the crosstab.\nPainter: Columns option.\nRows\n(exp) A string containing a comma- or tab-separated list of the names of\ncolumns that make up the rows of the crosstab.\nPainter: Rows option.\nSourceNames (exp) A string containing a comma-separated list of column names to be\ndisplayed in the Crosstab Definition dialog box. The default names are the\ncolumn names from the database.\n"}
{"page": 237, "text": "DataWindow Object Properties\nPage 237\nProperty for\nCrosstab\nValue\nPainter: Source Data option.\nStaticMode\nA string indicating whether a dynamic crosstab should be put into a static\nmode. The dynamic crosstab remains in static mode until you set StaticMode\nto No. While the dynamic crosstab is in static mode, you can manipulate the\nproperties of individual columns.\nValues are:\nYes -- StaticMode is enabled\nNo -- (Default) StaticMode is disabled\nPainter: Not set in painter.\nValues\n(exp) A string containing a comma- or tab-separated list of expressions that\nwill be used to calculate the values of the crosstab.\nPainter: Values option.\nUsage\nIn the painter\nFor DataWindow objects with the Crosstab presentation style, set the values in the Crosstab\nDefinition dialog box. To display the dialog box, right-click in the Design view to display the\npop-up menu and select Crosstab.\nExamples\nsetting = dw1.Object.DataWindow.Crosstab.Columns\ndw1.Object.DataWindow.Crosstab.Columns = \"dept_id\"\nsetting = dw1.Describe(\"DataWindow.Crosstab.Columns\")\ndw1.Modify(\"DataWindow.Crosstab.Columns='dept_id'\")\ndw1.Modify(\"DataWindow.Crosstab.Rows='salary'\")\ndw1.Modify(\"DataWindow.Crosstab.SourceNames=\" &\n   + \"'Order Number, Item Number, Price'\")\ndw1.Modify(\"DataWindow.Crosstab.Values='empname'\")\ndw1.Modify(\"DataWindow.Crosstab.StaticMode='yes'\")\nSee also\nCrosstabDialog function in the Section 9.16, \u201cCrosstabDialog\u201d\nTable.property\n3.3.34 CSSGen.property (obsolete)\nDescription\nSettings that specify the physical path to which a generated CSS style sheet is published and\nthe URL where the style sheet is located.\nObsolete property\nCSSGen.property is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\n"}
{"page": 238, "text": "DataWindow Object Properties\nPage 238\nThe Web Generation tab and JavaScript Generation tab are preserved for the\nbackward compatibility only.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.CSSGen.property\nDescribe and Modify argument:\n\"DataWindow.CSSGen.property { = ' value ' }\"\nTable 3.57:\nParameter\nDescription\nproperty\nOne of the following:\n\u2022 PublishPath\n\u2022 ResourceBase\n\u2022 SessionSpecific\nvalue\n(exp) PublishPath -- a string that specifies the physical path of the website\nfolder to which PowerBuilder publishes the generated CSS style sheet\n(exp) ResourceBase -- a string that specifies the URL of the generated CSS\nstyle sheet to be referenced in a link element in the XHTML page\n(exp) SessionSpecific -- a boolean that when set to \"yes\" forces a session-\nspecific ID to be applied to any generated document names that would\notherwise be shared\nUsage\nThe PublishPath folder must correspond to the URL specified in the ResourceBase property.\nAt runtime, after PowerBuilder generates the CSS style sheet to the PublishPath folder, it\nincludes it in the final XHTML page by referencing it with the ResourceBase property in a\n<link> element.\nTypically you share style (CSS), layout (XSLT), and control definitions (JS) for use by all\nclients; however, if you use dynamic DataWindow objects customized for specific clients,\nyou can force generation of the DataWindow presentation-related document names to be\nspecific to each client. You do this by setting the CSSGen.SessionSpecific property to \"yes\".\nThis eliminates the possibility of server-side contention for presentation formats when the\nDataWindow generation is specific to the client.\nIn the painter\nIn the Web Generation tab in the Properties view for the DataWindow object, select CSS\nfrom the Format to Configure list, specify the Resource Base and Publish Path locations,\n"}
{"page": 239, "text": "DataWindow Object Properties\nPage 239\nand check the Session-specific CSS, XSLT and JS file names check box if you want to force\ngeneration of client-specific names.\nExamples\nThese statements set the CSSGen.ResourceBase and CSSGen.PublishPath properties:\ndw1.Object.DataWindow.CSSGen.ResourceBase= &\n   'http://www.myserver.com/xmlsource'\ndw1.Object.DataWindow.CSSGen.PublishPath= &\n   'C:\\work\\outputfiles\\xmlsource'\nThis statement sets the CSSGen.SessionSpecific property for a JSP page:\ndwGen.Modify   (\"DataWindow.CSSGen.SessionSpecific='Yes'\");\n3.3.35 Data\nDescription\nA tab-separated list describing the data in the DataWindow object.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data\nDescribe argument:\n\"DataWindow.Data\"\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Data\nsetting = dw1.Describe(\"DataWindow.Data\")\n3.3.36 Data.HTML (obsolete)\nDescription\nA string containing HTML and JavaScript that represents data and presentation of the\nDataWindow object.\nThe data is presented in a read-only HTML table or data-entry form, depending on settings of\nother properties.\nObsolete property\nData.HTML is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nDataWindows\n"}
{"page": 240, "text": "DataWindow Object Properties\nPage 240\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data.HTML\nDescribe argument:\n\"DataWindow.Data.HTML\"\nUsage\nWhen HTMLDW is set to False, the value of Data.HTML is the same as the value of\nHTMLTable -- a read-only HTML table that displays all retrieved rows.\nWhen the HTMLDW property is set to True, the value of Data.HTML is a form that\nsupports data input with client scripts for data validation and events. The generated string for\nData.HTML includes:\n\u2022 HTML input elements\n\u2022 JavaScript for validating newly entered data based on validation rules in the DataWindow\nobject\n\u2022 HTML and JavaScript for navigation based on DataWindow Button controls with scrolling\nactions\n\u2022 State information about the modification status of data items\nJavaScript for navigation passes the state of the DataWindow back to the page server in\ntwo variables: objectname_action and objectname_context. It also passes back any page\nparameters defined in the HTMLGen.SelfLinkArgs property. All the HTMLGen.property\nvalues affect the way HTML is generated.\nThe resulting Web DataWindow is a client-side control for a Web page with events and\nmethods that can cooperate with a server component for a Web-based data entry application.\nExceptions\nIf the DataWindow is in print preview mode, or there are no columns with non-zero tab order,\nthe setting of HTMLDW is ignored and the generated HTML is a read-only table, not a data-\nentry form.\nTo generate a simple form without data entry methodality, you can use the\nGenerateHTMLForm method.\nExamples\nstrHtml = dw1.Object.DataWindow.Data.HTML\nstrHtml = dw1.Describe(\"DataWindow.Data.HTML\")\n3.3.37 Data.HTMLTable (obsolete)\nDescription\nThe data in the DataWindow object described in HTML table format. This property is used in\nthe process of dynamically creating Web pages from a database.\n"}
{"page": 241, "text": "DataWindow Object Properties\nPage 241\nObsolete property\nData.HTMLTable is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data.HtmlTable\nDescribe argument:\n\"DataWindow.Data.HtmlTable\"\nUsage\nSome presentation styles translate better into HTML than others. The Tabular, Group,\nFreeform, Crosstab, and Grid presentation styles produce good results. The Composite,\nRichText, OLE 2.0, TreeView, and Graph presentation styles produce HTML tables based\non the result set only and not on the presentation style. DataWindows with overlapping\ncontrols in them might not produce the desired results. Nested reports are ignored; they are\nnot included in the generated HTML.\nThe generated HTML for Data.HTMLTable is a read-only HTML Table element that\nincludes:\n\u2022 All retrieved rows\n\u2022 Hyperlinks for text, pictures, computed fields, and columns as defined in the\nHTML.property settings\nData.HTMLTable is not affected by the HTMLDW property and does not generate a client\ncontrol with events and support for scripting in the Web page.\nThe values of HTMLGen.Browser and HTMLGen.Version affect the generated HTML.\nSetting these properties causes the generated HTML to be optimized for a specific level of\nHTML support or specific browser using style sheets and absolute positioning, if possible.\nFor more information, see HTMLGen.property.\nThe resulting HTML table does not allow data entry. To produce HTML forms, see the\nData.HTML property and the GenerateHTMLForm method.\nAn easy way to see a DataWindow in a Web browser\nThe HTML string that the Data.HTMLTable property returns is equivalent to the string that is\nsaved when you use either the File>Save Rows As HTML Table option in the DataWindow\npainter workspace or the SaveAs method.\nTo see what a DataWindow will look like, save it as an HTML file and open the file in a Web\nbrowser such as Netscape.\nIn the painter\n"}
{"page": 242, "text": "DataWindow Object Properties\nPage 242\nWhen HTMLDW is not selected, the Design>HTML Preview displays the value of\nData.HTMLTable. Save an HTML file that you can use later in a browser with File>Save\nRows As; set the Save As Type to HTML Table.\nExamples\nls_html = dw1.Object.DataWindow.Data.HTMLTable\nls_html = dw1.Describe(\"DataWindow.Data.HTMLTable\")\n3.3.38 Data.XHTML (obsolete)\nDescription\nA string containing the row data content of the DataWindow object in XHTML format.\nObsolete property\nData.XHTML is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nThe Web Generation tab and JavaScript Generation tab are preserved for the\nbackward compatibility only.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data.XHTML\nDescribe argument:\n\"DataWindow.Data.XHTML\"\nUsage\nIf any of the Export.XHTML properties have been set, the string that is generated reflects the\nvalues of these properties.\nThe resulting XHTML string contains a <form> element that supports data input, which\nworks with separate client scripts for data validation and events. This JavaScript is either\ndynamically generated and/or statically deployed. To generate static JavaScript, select\nHTML/XHTML from the Format to Configure drop-down list on the JavaScript Generation\npage in the DataWindow painter Properties view, specify names for the files you want to\ngenerate, and click the Generate File button.\nThe generated XHTML string also includes:\n\u2022 XHTML input elements\n\u2022 XHTML and JavaScript for navigation based on DataWindow button controls with\nscrolling actions\n\u2022 State information about the modification status of data items\n"}
{"page": 243, "text": "DataWindow Object Properties\nPage 243\nJavaScript for navigation passes the state of the DataWindow back to the page server\nin two variables: objectname_action and objectname_context. It also passes back any\npage parameters defined in the HTMLGen.SelfLinkArgs property. All applicable\nHTMLGen.property values also affect the way the XHTML is generated.\nThe resulting XML Web DataWindow is a client-side control for a Web page, such as a JSP\npage, with events and methods that can cooperate with a server component for a Web-based\ndata entry application.\nExamples\nThe following statements set the template used by the DataWindow dw1 to t_report and\nreturn the generated XHTML document to the string ls_XHTML. To generate the string, the\nfinal statement invokes the XML Web DataWindow generator to generate the XHTML, CSS,\nand JavaScript components, applying the t_report template to the generated XHTML and\nCSS style sheet.\nstring strXHTML\ndw1.Modify(\"DataWindow.Export.XHTML.UseTemplate = 't_report'\")\nstrXHTML = dw1.Describe(\"DataWindow.Data.XHTML\")\n3.3.39 Data.XML\nDescription\nA string containing the row data content of the DataWindow object in XML format.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data.XML\nDescribe argument:\n\"DataWindow.Data.XML\"\nUsage\nIf any of the Export.XML properties have been set, the string that is generated reflects the\nvalues of these properties.\nNote\nIf Export.XML.SaveMetaData is set to MetaDataExternal!, no metadata is generated in the\nstring.\nExamples\nThe following statements set the template used by the DataWindow dw1 to t_report, specify\nthat metadata in the XMLSchema! format should be included in the generated XML, and\nreturn the generated XML document to the string ls_xml.\nstring ls_xml\ndw1.Modify(\"DataWindow.Export.XML.UseTemplate = 't_report'\")\ndw1.Modify(\"DataWindow.Export.XML.SaveMetaData = MetaDataInternal!\")\ndw1.Modify(\"DataWindow.Export.XML.MetaDataType = XMLSchema!\")\n"}
{"page": 244, "text": "DataWindow Object Properties\nPage 244\nls_xml = dw1.Object.DataWindow.Data.XML\n3.3.40 Data.XMLDTD\nDescription\nA string containing the full document type definition (DTD) of the XML output for a\nDataWindow object.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data.XMLDTD\nDescribe argument:\n\"DataWindow.Data.XMLDTD\"\nUsage\nUse this property to return the full DTD of the XML output of a DataWindow object\nseparately from the generated XML document itself. The export template used affects the\ngenerated DTD.\nExamples\nThe following statements set the template used by the DataWindow dw1 to t_report and\nreturn the generated DTD to the string ls_xml_dtd.\nstring ls_xml_dtd\ndw1.Object.DataWindow.Export.XML.UseTemplate = 't_report'\nls_xml_dtd = dw1.Object.DataWindow.Data.XMLDTD\n3.3.41 Data.XMLSchema\nDescription\nA string containing the full schema of the XML output of a DataWindow object.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data.XMLSchema\nDescribe argument:\n\"DataWindow.Data.XMLSchema\"\nUsage\nUse this property to return the full schema of the XML output of a DataWindow object\nseparately from the generated XML document itself. The export template used affects the\ngenerated schema.\n"}
{"page": 245, "text": "DataWindow Object Properties\nPage 245\nExamples\nThe following statements set the template used by the DataWindow dw1 to t_report and\nreturn the XML schema to the string ls_xml_schema.\nstring ls_xml_schema\ndw1.Object.DataWindow.Export.XML.UseTemplate = 't_report'\nls_xml_schema = dw1.Object.DataWindow.Data.XMLSchema\n3.3.42 Data.XMLWeb (obsolete)\nDescription\nA string containing browser-specific JavaScript that performs the XSLT transformation on\nthe browser after the XML Web DataWindow generator generates all necessary components.\nObsolete property\nData.XMLWeb is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nThe Web Generation tab and JavaScript Generation tab are preserved for the\nbackward compatibility only.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data.XMLWeb\nDescribe argument:\n\"DataWindow.Data.XMLWeb\"\nUsage\nIf any of the Export.XHTML properties have been set, the string that is generated reflects the\nvalues of these properties.\nThe resulting XHTML string contains a <form> element that supports data input, which\nworks with separate client scripts for data validation and events.\nThis JavaScript is either dynamically generated and/or statically deployed. To generate static\nJavaScript, select HTML/XHTML from the Format to Configure drop-down list on the\nJavaScript Generation page in the DataWindow painter Properties view, specify names for\nthe files you want to generate, and click the Generate File button.\nThe generated XHTML string also includes:\n\u2022 XHTML input elements\n\u2022 XHTML and JavaScript for navigation based on DataWindow button controls with\nscrolling actions\n\u2022 State information about the modification status of data items\n"}
{"page": 246, "text": "DataWindow Object Properties\nPage 246\nJavaScript for navigation passes the state of the DataWindow back to the page server\nin two variables: objectname_action and objectname_context. It also passes back any\npage parameters defined in the HTMLGen.SelfLinkArgs property. All applicable\nHTMLGen.property values also affect the way the XHTML is generated.\nThe resulting XML Web DataWindow is a client-side control for a Web page, such as a JSP\npage, with events and methods that can cooperate with a server component for a Web-based\ndata entry application.\nExamples\nThe following statements set the template used by the DataWindow dw1 to t_report and\nreturn the generated XSLT transformation to the string ls_transform. To generate the string,\nthe final statement invokes the XML Web DataWindow generator to generate the XML,\nXSLT, CSS, and JavaScript components, applying the t_report template to the generated\nXSLT and CSS style sheet.\nstring ls_transform\ndw1.Modify(\"DataWindow.Export.XHTML.UseTemplate = 't_report'\")\nls_transform = dw1.Object.DataWindow.Data.XMLWeb\n3.3.43 Data.XSLFO\nDescription\nA string containing XSL Formatting Objects (XSL-FO) that represents the data and\npresentation of the DataWindow object.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Data.XSLFO\nDescribe argument:\n\"DataWindow.Data.XSLFO\"\nUsage\nUse this property to return the data and presentation of a DataWindow object in XSL-FO\nformat. The export template associated with the DataWindow object does not affect the\ngenerated string.\nExamples\nThe following statements return the data and presentation of the DataWindow object dw1 to\nthe string ls_xslfo in XSL-FO format.\nstring ls_xslfo\nls_xslfo = dw1.Object.DataWindow.Data.XSLFO\n3.3.44 DataObject\nDescription\n"}
{"page": 247, "text": "DataWindow Object Properties\nPage 247\nThe name of the DataWindow object that is the nested report within the main DataWindow\nobject.\nApplies to\nReport controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.reportname.DataObject\nDescribe and Modify argument:\n\"reportname.DataObject = 'dwname ' \"\nTable 3.58:\nParameter\nDescription\nreportname\nThe name of the Report control in the main DataWindow object for which\nyou want to get or set the nested DataWindow object\ndwname\nA string naming a DataWindow object in the application's libraries that is the\nDataWindow object for the report within the main DataWindow object\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Report option.\nExamples\nsetting = dw1.Object.rpt_1.DataObject\ndw1.Object.rpt_1.DataObject = \"d_empdata\"\nsetting = dw1.Describe(\"rpt_1.DataObject\")\ndw1.Modify(\"rpt_1.DataObject='d_empdata'\")\n3.3.45 dbAlias\nDescription\nThe name of the database column but with the table alias in place of the table name, if any.\nThis value can be used to construct the update DataWindow syntax dynamically when an\nalias name is used for a table.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.dbAlias\nDescribe and Modify argument:\n\"columnname.dbAlias { = ' dbcolumnname ' }\"\n"}
{"page": 248, "text": "DataWindow Object Properties\nPage 248\nTable 3.59:\nParameter\nDescription\ncolumnname\nThe name of the column for which you want the name of the corresponding\ndatabase column qualified with the table alias name\ndbcolumnname The name of the database column associated with columnname qualified\nwith the alias of the table name\nUsage\nDbAlias is the name of the database column in the format tablealiasname.columnname. The\nvalue of dbAlias does not include the quotes that can be part of the SQL syntax. This property\ncan be used to construct update DataWindow syntax dynamically when an alias is used for a\ncolumn name.\nIn the painter\nYou can specify an alias for a table in the SQL Select painter if you convert the SQL\nstatement for a DataWindow object to syntax. Select Design>Data Source to open the SQL\nSelect painter, then select Design>Convert to Syntax. In the text window that displays, add\nthe alias name to the FROM clause using the syntax:\nFROM tablename tablealiasname\nExamples\nSuppose a DataWindow object has the following SQL Select syntax, with the alias \"emp\" for\nthe table \"employee\":\nSELECT \"emp\".\"emp_id\", \n       \"emp\".\"emp_fname\",\n       \"emp\".\"emp_lname\"\n       \"emp\".\"dept_id\"\n       \"emp\".\"salary\"\nFROM \"employee\" \"emp\"  WHERE ( \"emp\".\"salary\" > 50000 )\nThen the following statements would return the string \"employee.emp_id\" in ls_name and the\nstring \"emp.emp_id\" in ls_alias:\nstring ls_alias, ls_name\nls_name = dw1.Object.emp_id.dbName\nls_name = dw1.Describe(\"emp_id.dbName\")\nls_alias = dw1.Object.emp_id.dbAlias\nls_alias = dw1.Describe(\"emp_id.dbAlias\")\nSee also\ndbName\n3.3.46 dbName\nDescription\nThe name of the database column. PowerBuilder uses this value to construct the update\nsyntax.\nApplies to\n"}
{"page": 249, "text": "DataWindow Object Properties\nPage 249\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.dbName\nDescribe and Modify argument:\n\"columnname.dbName { = ' dbcolumnname ' }\"\nTable 3.60:\nParameter\nDescription\ncolumnname\nThe name of the column for which you want the name of the corresponding\ndatabase column\ndbcolumnnameThe name of the database column associated with columnname\nUsage\nDbName is the name of the database column in the format tablename.columnname. The value\nof dbName does not include the quotes that can be part of the SQL syntax.\nIn the painter\nThe Syntax view in the SQL Select painter displays the database column names (they can be\nshown with quotes).\nExamples\ndbcol = dw1.Object.emp_id.dbName\ndw1.Object.emp_id.dbName = \"emp_id\"\ndbcol = dw1.Describe(\"emp_id.dbName\")\ndw1.Modify(\"emp_id.dbName='emp_id'\")\nSee also\ndbAlias\n3.3.47 dddw.property\nDescription\nProperties that control the appearance and behavior of a column with the\nDropDownDataWindow edit style.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.dddw.property\nDescribe and Modify argument:\n\"columnname.dddw.property { = value }\"\n"}
{"page": 250, "text": "DataWindow Object Properties\nPage 250\nTable 3.61:\nParameter\nDescription\ncolumnname The name of a column that has the DropDownDataWindow edit style.\nproperty\nA property for the DropDownDataWindow column. Properties and their\nsettings are listed in the table below.\nvalue\nThe value to be assigned to the property. For dddw properties, value cannot\nbe a DataWindow expression.\nTable 3.62:\nProperty for\ndddw\nValue\nAllowEdit\nWhether the user can type a value as well as choose from the\nDropDownDataWindow's list.\nValues are:\nYes -- Typing is allowed.\nNo -- (Default) Typing is not allowed.\nCall GetChild after setting dddw.AllowEdit to get a valid reference to the\ncolumn's DropDownDataWindow.\nPainter: Allow Editing option.\nAutoHScroll\nWhether the DropDownDataWindow automatically scrolls horizontally\nwhen the user enters or deletes data.\nValues are:\nYes -- (Default) Scroll horizontally automatically.\nNo -- Do not scroll automatically.\nPainter: Auto Horizontal Scroll option.\nAutoRetrieve Whether the DropDownDataWindow data is retrieved when the parent\nDataWindow data is retrieved.\nValues are:\nYes -- (Default) Data is automatically retrieved.\nNo -- Data must be retrieved separately.\nPainter: AutoRetrieve option.\nCase\nThe case of the text in the DropDownDataWindow.\nValues are:\nAny -- Character of any case allowed.\nUpper -- Characters converted to uppercase.\nLower -- Characters converted to lowercase.\nCall GetChild after setting dddw.Case to get a valid reference to the column's\nDropDownDataWindow.\n"}
{"page": 251, "text": "DataWindow Object Properties\nPage 251\nProperty for\ndddw\nValue\nPainter: Case option.\nDataColumn\nA string whose value is the name of the data column in the associated\nDropDownDataWindow. Value is quoted.\nCall GetChild after setting dddw.DataColumn to get a valid reference to the\ncolumn's DropDownDataWindow.\nPainter: Data Column option, visible after selecting a DataWindow.\nDisplayColumnA string whose value is the name of the display column in the associated\nDropDownDataWindow. Value is quoted.\nCall GetChild after setting dddw.DisplayColumn to get a valid reference to\nthe column's DropDownDataWindow.\nPainter: Display Column option, visible after selecting a DataWindow.\nHScrollBar\nWhether a horizontal scroll bar displays in the DropDownDataWindow.\nValues are:\nYes -- Display a horizontal scroll bar.\nNo -- Do not display a horizontal scroll bar.\nPainter: Horizontal Scroll Bar option.\nHSplitScroll\nWhether the horizontal scroll bar is split. The user can adjust the split\nposition.\nValues are:\nYes -- Split the horizontal scroll bar so the user can scroll the display and\ndata columns separately.\nNo -- The horizontal scroll bar is not split.\nPainter: Split Horizontal Scroll Bar option.\nLimit\nAn integer from 0 to 32767 specifying the maximum number of characters\nthat can be entered in the DropDownDataWindow. Zero means unlimited.\nPainter: Limit option.\nLines\nAn integer from 0 to 32767 specifying the number of lines (values) to display\nin the DropDownDataWindow. This property does not apply in Web pages\nbecause the browser controls how the DropDownDataWindow displays.\nPainter: Lines in DropDown option.\nName\nA string whose value is the name of the DropDownDataWindow associated\nwith the column.\nCall GetChild after setting dddw.Name to get a valid reference to the\ncolumn's DropDownDataWindow.\nPainter: DataWindow option.\n"}
{"page": 252, "text": "DataWindow Object Properties\nPage 252\nProperty for\ndddw\nValue\nNilIsNull\nWhether to set the data value of the DropDownDataWindow to null when the\nuser leaves the edit box blank.\nValues are:\nYes -- Make the Empty string null.\nNo -- Do not make the empty string null.\nPainter: Empty String is null option.\nPercentWidth An integer specifying the width of the drop-down portion of the\nDropDownDataWindow as a percentage of the column's width. For example,\n300 sets the display width to three times the column width.\nCall GetChild after setting dddw.PercentWidth to get a valid reference to the\ncolumn's DropDownDataWindow.\nPainter: Width of DropDown option.\nRequired\nWhether the column is required.\nValues are:\nYes -- Required.\nNo -- (Default) Not required.\nPainter: Required option.\nShowList\nWhether the ListBox portion of the DropDownDataWindow displays when\nthe column has focus. A down arrow does not display at the right end of the\nDropDownDataWindow when dddw.ShowList is yes.\nValues are:\nYes -- Display the list whenever the column has the focus.\nNo -- Do not display the list until the user selects the column.\nPainter: Always Show List option.\nUseAsBorder Whether a down arrow displays at the right end of the\nDropDownDataWindow.\nValues are:\nYes -- Display the arrow.\nNo -- Do not display the arrow.\nNote that if ShowList is set to Yes, the column ignores the UseAsBorder\nproperty and the arrow never displays.\nPainter: Always Show Arrow option.\nVScrollBar\nWhether a vertical scroll bar displays in the DropDownDataWindow for long\nlists.\nValues are:\n"}
{"page": 253, "text": "DataWindow Object Properties\nPage 253\nProperty for\ndddw\nValue\nYes -- Display a vertical scroll bar.\nNo -- Do not display a vertical scroll bar.\nPainter: Vertical Scroll Bar option.\nUsage\nDropDownDataWindows and GetChild\nWhen you set some of the dddw properties, as noted in the table, references to the\nDropDownDataWindow become invalid. Call GetChild again after changing these properties\nto obtain a valid reference.\nTo retrieve a DropDownDataWindow when the AutoRetrieve property is set to \"false\", you\ncan access the object data as follows:\nDataWindowChild mgr_id\ndw1.GetChild (\"dept_head_id\", mgr_id)\nmgr_id.SetTransObject (SQLCA)\nmgr_id.Retrieve ( )\nYou can also pass a retrieval argument for the retrieve on the child DataWindow object.\nDoing a reset to clear the data\nWhen a DropDownDataWindow is retrieved, its data is kept with its own Data Object. If you\nretrieve the DropDownDataWindow and then set the AutoRetrieve property on the parent to\n\"false\", the data for the child is not cleared on a reset and re-retrieve of the parent.\nTo clear data from a DropDownDataWindow, you must call Reset on the child DataWindow\nobject:\ndw1.GetChild (\"dept_head_id\", mgr_id)\nmgr_id.reset ( )\nIn the painter\nSelect the control and set values in the Properties view, Edit tab, when Style Type is\nDropDownDW.\nExamples\nls_data = dw1.Describe(\"emp_status.dddw.AllowEdit\")\ndw1.Modify(\"emp_status.dddw.Case='Any'\")\ndw1.Modify(\"emp_status.dddw.DataColumn='status_id'\")\ndw1.Modify(\"emp_status.dddw.Limit=30\")\ndw1.Modify(\"emp_status.dddw.Name='d_status'\")\ndw1.Modify(\"emp_status.dddw.PercentWidth=120\")\ndw1.Object.emp_status.dddw.Case = \"Any\"\nstring ls_data\nls_data = dw1.Object.emp_status.dddw.AllowEdit\")\n3.3.48 ddlb.property\nDescription\nProperties that control the appearance and behavior of a column with the DropDownListBox\nedit style.\nApplies to\n"}
{"page": 254, "text": "DataWindow Object Properties\nPage 254\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.ddlb.property\nDescribe and Modify argument:\n\"columnname.ddlb.property { = value }\"\nTable 3.63:\nParameter\nDescription\ncolumnname The name of a column that has the DropDownListBox edit style.\nproperty\nA property for the DropDownListBox column. Properties and their settings\nare listed in the table below.\nvalue\nThe value to be assigned to the property. For ddlb properties, value cannot be\na DataWindow expression.\nTable 3.64:\nProperty for\nddlb\nValue\nAllowEdit\nWhether the user can type a value as well as choose from the\nDropDownListBox's list.\nValues are:\nYes -- Typing is allowed.\nNo -- (Default) Typing is not allowed.\nPainter: Allow Editing option.\nAutoHScroll\nWhether the DropDownListBox automatically scrolls horizontally when the\nuser enters or deletes data.\nValues are:\nYes -- (Default) Scroll horizontally automatically.\nNo -- Do not scroll automatically.\nPainter: Auto Horizontal Scroll option.\nCase\nThe case of the text in the DropDownListBox.\nValues are:\nAny -- Character of any case allowed.\nUpper -- Characters converted to uppercase.\nLower -- Characters converted to lowercase.\nPainter: Case option.\nLimit\nAn integer from 0 - 32767 specifying the maximum number of characters\nthat can be entered in the DropDownListBox. Zero means unlimited.\nPainter: Limit option.\n"}
{"page": 255, "text": "DataWindow Object Properties\nPage 255\nProperty for\nddlb\nValue\nNilIsNull\nWhether to set the data value of the DropDownListBox to null when the user\nleaves the edit box blank.\nValues are:\nYes -- Make the empty string null.\nNo -- Do not make the empty string null.\nPainter: Empty string is null option.\nRequired\nWhether the column is required.\nValues are:\nYes -- Required.\nNo -- (Default) Not required.\nPainter: Required option.\nShowList\nWhether the ListBox portion of the DropDownListBox displays when the\ncolumn has focus. A down arrow does not display at the right end of the\nDropDownListBox when ddlb.ShowList is yes.\nValues are:\nYes -- Display the list whenever the column has focus.\nNo -- Do not display the list until the user selects the column.\nPainter: Always Show List option.\nSorted\nWhether the list in the DropDownListBox is sorted.\nValues are:\nYes -- The list is sorted.\nNo -- The list is not sorted.\nPainter: Sorted option.\nUseAsBorder Whether a down arrow displays at the right end of the DropDownListBox.\nValues are:\nYes -- Display the arrow.\nNo -- Do not display the arrow.\nNote that if ShowList is set to Yes, the column ignores the UseAsBorder\nproperty and the arrow never displays.\nPainter: Always Show Arrow option.\nVScrollBar\nWhether a vertical scroll bar displays in the DropDownListBox for long lists.\nValues are:\nYes -- Display a vertical scroll bar.\nNo -- Do not display a vertical scroll bar.\n"}
{"page": 256, "text": "DataWindow Object Properties\nPage 256\nProperty for\nddlb\nValue\nPainter: Vertical Scroll Bar option.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Edit tab, when Style Type is\nDropDownListBox.\nExamples\nls_data = dw1.Describe(\"emp_status.ddlb.AllowEdit\")\ndw1.Modify(\"emp_status.ddlb.Case='Any'\")\ndw1.Modify(\"emp_status.ddlb.Limit=30\")\nstring ls_data\nls_data = dw1.Object.emp_status.ddlb.AllowEdit\ndw1.Object.emp_status.ddlb.Case = \"Any\"\n3.3.49 DefaultPicture\nDescription\nSpecifies whether a button displays a default picture for the button's action.\nApplies to\nButton controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.buttonname.DefaultPicture\nDescribe and Modify argument:\n\"buttonname.DefaultPicture { = ' value ' }\"\nTable 3.65:\nParameter\nDescription\nbuttonname\nThe name of the button to which you want to assign an action.\nvalue\nWhether the action's default picture is used.\nValues are:\nYes -- Use the default picture.\nNo -- Do not use the default picture.\nUsage\nDefault pictures can be associated with all button action types.\nYou can add your own action pictures by setting the DefaultPicture property to False and\nsetting the Filename property to the file name for the picture you want. You can use a URL\ninstead of a complete path to qualify the file name, and you can leave off the URL server\nname, mapping prefix, and folder name if you set them in the HTMLGen.ResourceBase\nproperty.\n"}
{"page": 257, "text": "DataWindow Object Properties\nPage 257\nA user-defined action does not have a default picture associated with it.\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Action Default\nPicture option. When the DefaultPicture is not set, you can specify a picture file name in the\nPicture File property. Button pictures can be BMP, GIF, or JPEG files.\nExamples\ndw1.Object.b_name.DefaultPicture = \"Yes\"\nsetting = dw1.Describe(\"b_name.DefaultPicture\")\ndw1.Modify(\"b_name.DefaultPicture ='No'\")\nSee also\nHTMLGen.property\nDefaultPicture\nFilename\n3.3.50 Depth\nDescription\nThe depth of a 3D graph.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.Depth\nDescribe and Modify argument:\n\"graphname.Depth { = ' depthpercent ' }\"\nTable 3.66:\nParameter\nDescription\ngraphname\nThe graph control within the DataWindow for which you want to set the\ndepth.\ndepthpercent (exp) An integer whose value is the depth of the graph, specified as a\npercentage of the graph's width. Depthpercent can be a quoted DataWindow\nexpression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Depth slider.\nExamples\nstring setting\nsetting = dw1.Object.graph_1.Depth\ndw1.Object.graph_1.Depth = 70\nsetting = dw1.Describe(\"graph_1.Depth\")\ndw1.Modify(\"graph_1.Depth='70'\")\n"}
{"page": 258, "text": "DataWindow Object Properties\nPage 258\n3.3.51 Detail_Bottom_Margin\nDescription\nThe size of the bottom margin of the DataWindow's detail area.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Detail_Bottom_Margin = value )\nTable 3.67:\nParameter\nDescription\nvalue\nAn integer specifying the size of the bottom margin of the detail area in\nthe units specified for the DataWindow.\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n   'Style(...Detail_Bottom_Margin = 25 ...)', &\n   errstring)\n3.3.52 Detail_Top_Margin\nDescription\nThe size of the top margin of the DataWindow's detail area.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Detail_Top_Margin = value )\nTable 3.68:\nParameter\nDescription\nvalue\nAn integer specifying the size of the top margin of the detail area in the\nunits specified for the DataWindow.\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n'Style(...Detail_Top_Margin = 25 ...)', &\nerrstring)\n3.3.53 Detail.property\nSee Bandname.property.\n3.3.54 DispAttr.fontproperty\nDescription\nSettings for the appearance of various text components of a graph.\n"}
{"page": 259, "text": "DataWindow Object Properties\nPage 259\nApplies to\nProperties of Graph controls, as noted throughout this discussion\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.property.DispAttr.fontproperty\nDescribe and Modify argument:\n\"graphname.property.DispAttr.fontproperty { = value }\"\nTable 3.69:\nParameter\nDescription\ngraphname\nThe Graph control in a DataWindow for which you want to get or set font\nappearance values.\nproperty\nA text component of the graph, such as an Axis keyword (Category, Series,\nor Values), Legend, Pie, or Title, specifying the graph component whose\nappearance you want to get or set. These properties have their own entries.\nThese values are listed in the following table.\nYou can also set font properties for the label of an axis with the following\nsyntax:\n\"graphname.axis.LabelDispAttr.fontproperty { = value }\"\nfontproperty\nA property that controls the appearance of text in the graph. Properties and\ntheir settings are listed in the table below.\nvalue\nThe value to be assigned to fontproperty. Value can be a quoted\nDataWindow expression.\nTable 3.70:\nProperty for\nDispAttr\nValue\nAlignment\n(exp) The alignment of the text.\nValues are:\n0 -- Left\n1 -- Right\n2 -- Center\nPainter: Alignment option.\nAlignment for axis labels and text not supported by Render3D graph style.\nAutoSize\n(exp) Whether the text element should be autosized according to the amount\nof text being displayed.\nValues are:\n0 -- Do not autosize\n1 -- Autosize\nPainter: Autosize check box.\n"}
{"page": 260, "text": "DataWindow Object Properties\nPage 260\nProperty for\nDispAttr\nValue\nBackColor\n(exp) A long value specifying the background color of the text.\nPainter: BackColor option.\nDisplayExpression\nAn expression whose value is the label for the graph component. The default\nexpression is the property containing the text for the graph component. The\nexpression can include the text property and add other variable text.\nPainter: Display Expression option.\nFont.CharSet\n(exp) An integer specifying the character set to be used.\nValues are:\n0 -- ANSI\n1 -- The default character set for the specified font\n2 -- Symbol\n128 -- Shift JIS\n255 -- OEM\nPainter: FontCharSet option.\nFont.Escapement(exp) An integer specifying the rotation for the baseline of the text in tenths\nof a degree. For example, a value of 450 rotates the text 45 degrees. 0 is\nhorizontal.\nPainter: Escapement option.\nFont.Face\n(exp) A string specifying the name of the font face, such as Arial or Courier.\nPainter: FaceName option.\nFont.Family\n(exp) An integer specifying the font family (Windows uses both face and\nfamily to determine which font to use).\nValues are:\n0 -- AnyFont\n1 -- Roman\n2 -- Swiss\n3 -- Modern\n4 -- Script\n5 -- Decorative\nPainter: Family option.\nFont.Height\n(exp) An integer specifying the height of the text in the unit of measure for\nthe DataWindow. To specify size in points, specify a negative number. Not\navailable when AutoSize is checked.\nPainter: Size option, specified in points.\nFont.Italic\n(exp) Whether the text should be italic.\n"}
{"page": 261, "text": "DataWindow Object Properties\nPage 261\nProperty for\nDispAttr\nValue\nValues are:\n0 -- Not italic (default)\n1 -- Italic\nPainter: Italic option.\nFont.OrientationSame as Escapement.\nFont.Pitch\n(exp) The pitch of the font.\nValues are:\n0 -- The default pitch for your system\n1 -- Fixed\n2 -- Variable\nPainter: Pitch option.\nFont.Strikethrough\n(exp) Whether the text should be crossed out.\nValues are:\n0 -- Not crossed out (default)\n1 -- Crossed out\nPainter: Strikeout option.\nFont.Underline(exp) Whether the text should be underlined.\nValues are:\n0 -- Not underlined (default)\n1 -- Underlined\nPainter: Underline option.\nFont.Weight\n(exp) An integer specifying the weight of the text, for example, 400 for\nnormal or 700 for bold.\nPainter: Set indirectly using the Bold option.\nFont.Width\n(exp) An integer specifying the width of the font in the unit of measure\nspecified for the DataWindow. Width is usually unspecified, which results in\na default width based on the other properties.\nPainter: Width option.\nFormat\n(exp) A string containing the display format for the text.\nPainter: Format option.\nTextColor\n(exp) A long specifying the color to be used for the text.\nPainter: TextColor option.\nUsage\nIn the painter\n"}
{"page": 262, "text": "DataWindow Object Properties\nPage 262\nSelect the control and set values in the Properties view, Text tab. Settings apply to the\nselected item in the Text Object list box.\nExamples\nsetting = dw1.Object.Category.LabelDispAttr.Font.Face\ndw1.Object.Category.LabelDispAttr.Font.Face = \"Arial\"\nsetting =  &\n   dw1.Describe(\"Category.LabelDispAttr.Font.Face\")\ndw1.Modify(\"gr_1.Category.LabelDispAttr.Font.Face= &\n   'Arial'\")\ndw1.Modify(\"gr_1.Title.DispAttr.DisplayExpression=\" &\n   \"'Title + ~\"~n~\" + Today()'\")\n3.3.55 DisplayType\nDescription\nThe way the OLE Object control displays the OLE object it contains. It can display an icon or\nan image of the object's contents. The image is reduced to fit inside the OLE container.\nBoth the icon and the image are provided by the OLE server. If the OLE server does not\nsupport a contents view, PowerBuilder displays an icon even if DisplayType is set to\ncontents.\nApplies to\nOLE Object controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.olecontrolname.DisplayType\nDescribe and Modify argument:\n\"olecontrolname.DisplayType { = ' type ' }\"\nTable 3.71:\nParameter\nDescription\nolecontrolnameThe name of the OLE Object control for which you want to get or set the\ntype of display.\ntype\nA number specifying whether the user will see an icon or an image of the\nOLE object's contents. Type can be a quoted DataWindow expression.\nValues are:\n0 -- Icon\n1 -- Content\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Options tab.\nExamples\nstring ls_data\nls_data = dw1.Object.ole_report.DisplayType\n"}
{"page": 263, "text": "DataWindow Object Properties\nPage 263\ndw1.Object.ole_report.DisplayType = 1\nls_data = dw1.Describe(\"ole_report.DisplayType\")\ndw1.Modify(\"ole_report.DisplayType='1'\")\n3.3.56 Edit.property\nDescription\nSettings that affect the appearance and behavior of columns whose edit style is Edit.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Edit.property\nDescribe and Modify argument:\n\"columnname.Edit.property { = value }\"\nSyntaxFromSql:\nColumn ( Edit.property = value )\nTable 3.72:\nParameter\nDescription\ncolumnname\nThe column with the Edit edit style for which you want to get or set property\nvalues. You can specify the column name or a pound sign (#) and the\ncolumn number.\nproperty\nA property for the column's Edit style. Properties and their settings are\nlisted in the table below. The table identifies the properties you can use with\nSyntaxFromSql.\nvalue\nThe value to be assigned to the property. For most Edit properties, you\ncannot specify a DataWindow expression. The exception is Edit.Format.\n \nTable 3.73:\nProperty for\nEdit\nValue\nAutoHScroll\nWhether the edit control scrolls horizontally automatically when data is\nentered or deleted.\nValues are:\nYes -- Scroll horizontally automatically.\nNo -- Do not scroll horizontally automatically.\nYou can use AutoHScroll with SyntaxFromSql. The setting applies to all the\ncolumns in the generated syntax.\nPainter: Auto Horizontal Scroll option.\nAutoSelect\nWhether to select the contents of the edit control automatically when it\nreceives focus.\n"}
{"page": 264, "text": "DataWindow Object Properties\nPage 264\nProperty for\nEdit\nValue\nValues are:\nYes -- Select automatically.\nNo -- Do not select automatically.\nYou can use AutoSelect with SyntaxFromSql. The setting applies to all the\ncolumns in the generated syntax.\nPainter: Auto Selection option.\nAutoVScroll\nWhether the edit box scrolls vertically automatically when data is entered or\ndeleted.\nValues are:\nYes -- Scroll vertically automatically.\nNo -- Do not scroll vertically automatically.\nYou can use AutoVScroll with SyntaxFromSql. The setting applies to all the\ncolumns in the generated syntax.\nPainter: Auto Vertical Scroll option.\nCase\nThe case of the text in the edit control.\nValues are:\nAny -- Character of any case allowed.\nUpper -- Characters converted to uppercase.\nLower -- Characters converted to lowercase.\nPainter: Case option.\nCodeTable\nWhether the column has a code table.\nValues are:\nYes -- Code table defined.\nNo -- No code table defined.\nPainter: Use Code Table option.\nDisplayOnly\nWhether the column is display only.\nValues are:\nYes -- Do not allow the user to enter data; make the column display only.\nNo -- (Default) Allow the user to enter data.\nPainter: Display Only option.\nFor conditional control over column editing, use the Protect property.\nFocusRectangleWhether a dotted rectangle (the focus rectangle) surrounds the current row\nof the column when the column has focus.\nValues are:\n"}
{"page": 265, "text": "DataWindow Object Properties\nPage 265\nProperty for\nEdit\nValue\nYes -- Display the focus rectangle.\nNo -- Do not display the focus rectangle.\nYou can use FocusRectangle with SyntaxFromSql. The setting applies to all\nthe columns in the generated syntax.\nPainter: Show Focus Rectangle option.\nFormat\n(exp) A string containing the display format of the edit control. The value\nfor Format is quoted and can be a DataWindow expression.\nPainter: Format option (do not use quotes around the value).\nHScrollBar\nWhether a horizontal scroll bar displays in the edit control.\nValues are:\nYes -- Display the horizontal scroll bar.\nNo -- Do not display the horizontal scroll bar.\nPainter: Horizontal Scroll Bar option.\nLimit\nA number specifying the maximum number of characters (0 to 32,767) that\nthe user can enter. 0 means unlimited.\nPainter: Limit option.\nName\nA string whose value is the name of the predefined edit style associated with\nthe column. Named styles are defined in the Database painter and can be\nreused. Specifying a name that has not been previously defined associates\nthe name with the column but does not define a new edit style.\nPainter: Style Name option.\nNilIsNull\nWhether to set the value of the edit control to null when the user leaves it\nblank.\nValues are:\nYes -- Make the empty string null.\nNo -- Do not make the empty string null.\nPainter: Empty String is Null option.\nPassword\nWhether to assign secure display mode to the column. When the user enters\ncharacters, they display as asterisks (*).\nValues are:\nYes -- Assign secure display mode to the column.\nNo -- Do not assign secure-display mode to the column.\nIf you change the Password property, you should also change the Format\nproperty to display the results you want (for example, *****).\nPainter: Password option.\nRequired\nWhether the column is required.\n"}
{"page": 266, "text": "DataWindow Object Properties\nPage 266\nProperty for\nEdit\nValue\nValues are:\nYes -- It is required.\nNo -- It is not required.\nPainter: Required option.\nStyle\n(Describe only) Returns the edit style of the column.\nPainter: Style Type option.\nUseEllipsis\nWhether an ellipsis (three dots) displays when a column with the Edit edit\nstyle contains character data that is too long for the display column in the\nDataWindow.\nThe ellipsis does not display when the column has focus.\nValues are:\nYes -- Truncate the data and add an ellipsis.\nNo -- Truncate the data. Do not add an ellipsis.\nThe property is ignored if you:\n\u2022 Check Autosize Height on the Position page or set the Height.Autosize\nproperty in a script.\n\u2022 Specify an expression for the Escapement property on the Font page or set\nthe Font.Escapement property in a script to rotate the text.\nPainter: Use Ellipsis check box on the Format page.\nValidateCode\nWhether the code table will be used to validate user-entered values.\nValues are:\nYes -- Use the code table.\nNo -- Do not use the code table.\nPainter: Validate option, available when Use Code Table is selected.\nVScrollBar\nWhether a vertical scroll bar displays in the line edit.\nValues are:\nYes -- Display vertical scroll bars.\nNo -- Do not display vertical scroll bars.\nPainter: Vertical Scroll Bar option.\nUsage\nIn the painter\nSelect the control and set values in the Properties view, Edit tab, when Style Type is Edit.\nExamples\n"}
{"page": 267, "text": "DataWindow Object Properties\nPage 267\nstring setting\nsetting = dw1.Object.emp_name.Edit.AutoHScroll\ndw1.Object.emp_name.Edit.Required = \"no\"\nsetting = dw1.Describe(\"emp_name.Edit.AutoHScroll\")\ndw1.Modify(\"emp_name.Edit.Required=no\")\ndw1.Object.col1.Edit.UseEllipsis = Yes\ndw1.Modify(\"col1.Edit.UseEllipsis=Yes\")\n3.3.57 EditMask.property\nDescription\nSettings that affect the appearance and behavior of columns with the EditMask edit style.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.EditMask.property\nDescribe and Modify argument:\n\"columnname.EditMask.property { = value }\"\nTable 3.74:\nParameter\nDescription\ncolumnname\nThe column with the EditMask edit style for which you want to get or set\nproperty values. You can specify the column name or a pound sign (#) and\nthe column number.\nproperty\nA property for the column's EditMask style. Properties and their settings are\nlisted in the table below.\nvalue\nThe value to be assigned to the property. For EditMask properties, you\ncannot specify a DataWindow expression.\nTable 3.75:\nProperty for\nEditMask\nValue\nAutoSkip\nWhether the EditMask will automatically skip to the next field when the\nmaximum number of characters has been entered.\nValues are:\nYes -- Skip automatically.\nNo -- Do not skip automatically.\nPainter: AutoSkip option.\nCodeTable\nWhether the column has a code table.\nValues are:\nYes -- Code table defined.\nNo -- No code table defined.\n"}
{"page": 268, "text": "DataWindow Object Properties\nPage 268\nProperty for\nEditMask\nValue\nPainter: Code Table option. When selected, Display Value and DataValue\nare displayed for specifying code table entries.\nDDCalendar\nWhether a drop-down calendar control displays when a user clicks in a\ncolumn with a Date or DateTime edit mask.\nValues are:\nYes -- Drop-down calendar control displays.\nNo -- (Default) Drop-down calendar control does not display.\nPainter: Drop-down Calendar option.\nDDCal_AlignRight\nWhether the drop-down calendar is aligned with the right side of the column.\nValues are:\nYes -- Column is right aligned.\nNo -- (Default) Column is left aligned.\nPainter: Drop Align Right option on Other page.\nDDCal_BackColor\nThe background color of the drop-down calendar. The default is Window\nBackground. This property is not supported on the Windows 8.1/10\noperating system.\nPainter: CalendarBackColor option on Other page.\nDDCal_TextColor\nThe color of text in the drop-down calendar. The default is Window Text.\nThis property is not supported on the Windows 8.1/10 operating system.\nPainter: CalendarTextColor option on Other page.\nDDCal_TitleBackColor\nThe background color of the title in the drop-down calendar. The default is\nHighlight. This property is not supported on the Windows 8.1/10 operating\nsystem.\nPainter: CalendarTitleBackColor option on Other page.\nDDCal_TitleTextColor\nThe color of text in the title of the drop-down calendar. The default is\nHighlight Text. This property is not supported on the Windows 8.1/10\noperating system.\nPainter: CalendarTitleTextColor option on Other page.\nDDCal_TrailingTextColor\nThe color of trailing text (days in the previous and next months) in the drop-\ndown calendar. The default is Disabled Text. This property is not supported\non the Windows 7/8.1/10 operating system.\nPainter: CalendarTrailingTextColor option on Other page.\nFocusRectangleWhether a dotted rectangle (the focus rectangle) will surround the current\nrow of the column when the column has focus.\nValues are:\nYes -- (Default) Display the focus rectangle.\n"}
{"page": 269, "text": "DataWindow Object Properties\nPage 269\nProperty for\nEditMask\nValue\nNo -- Do not display the focus rectangle.\nPainter: Show Focus Rectangle option.\nMask\nA string containing the edit mask for the column.\nPainter: Mask option.\nReadOnly\nWhether the column is read-only. This property is valid only if\nEditMask.Spin is set to Yes.\nValues are:\nYes -- Do not allow the user to enter data; make the column read-only.\nNo -- (Default) Allow the user to enter data.\nPainter: Read Only option.\nRequired\nWhether the column is required.\nValues are:\nYes -- It is required.\nNo -- It is not required.\nPainter: Required option.\nSpin\nWhether the user can scroll through a list of possible values for the column\nwith a spin control.\nValues are:\nYes -- Display a spin control.\nNo -- (Default) Do not display a spin control.\nPainter: Spin Control option.\nSpinIncr\nAn integer indicating the amount to increment the spin control's values. The\ndefault for numeric values is 1; for dates, 1 year; and for time, 1 minute.\nAvailable for numeric, date, and time columns.\nFor columns that are not numeric, date, or time, the spin control scrolls\nthrough values in an associated code table. If the EditMask.CodeTable\nproperty is No, the spin increment has no effect for these columns.\nPainter: Spin Increment option.\nSpinRange\nA string containing the maximum and minimum values for the column\nthat will display in the spin control. The two values are separated by a tilde\n(~). This property is effective only if EditMaskSpin is True. Available for\nnumeric, date, and time columns.\nBecause the SpinRange string is within another quoted string, the tilde\nseparator becomes four tildes in PowerBuilder, which reduces to a single\ntilde when parsed. The format for the string is:\n\"EditMask.SpinRange = 'minval~~~~maxval ' \"\n"}
{"page": 270, "text": "DataWindow Object Properties\nPage 270\nProperty for\nEditMask\nValue\nPainter: Spin Range group, Spin Min and Spin Max options.\nUseEllipsis\nWhether an ellipsis (three dots) displays when a column with the EditMask\nedit style contains character data that is too long for the display column in\nthe DataWindow.\nThe ellipsis does not display when the column has focus.\nValues are:\nYes -- Truncate the data and add an ellipsis.\nNo -- Truncate the data. Do not add an ellipsis.\nThe property is ignored if you:\n\u2022 Check Autosize Height on the Position page or set the Height.Autosize\nproperty in a script.\n\u2022 Specify an expression for the Escapement property on the Font page or set\nthe Font.Escapement property in a script to rotate the text.\nPainter: Use Ellipsis check box on the Format page.\nUseFormat\nWhether a Format Display mask is used for a column's display. A Format\nDisplay mask is used only when the column does not have focus.\nValues are:\nYes -- Use a Format Display mask.\nNo -- (Default) Do not use a Format Display mask.\nPainter: Use Format option.\nUsage\nIn the painter\nSelect the control and set values in the Properties view, Edit tab, when Style is EditMask.\nExamples\nsetting = dw1.Describe(\"emp_status.EditMask.Spin\")\ndw1.Modify(\"empBonus.EditMask.SpinIncr=1000\")\ndw1.Modify(\"empBonus.EditMask.SpinRange='0~~~~5000'\")\nstring setting\nsetting = dw1.Object.emp_status.EditMask.Spin\ndw1.Object.emp_bonus.EditMask.SpinIncr = 1000\ndw1.Object.id.EditMask.SpinRange = \"0~~~~10\"\ndw1.Object.col1.EditMask.UseEllipsis = Yes\ndw1.Modify(\"col1.EditMask.UseEllipsis=Yes\")\n3.3.58 Elevation\nDescription\nThe elevation in a 3D graph.\n"}
{"page": 271, "text": "DataWindow Object Properties\nPage 271\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.Elevation\nDescribe and Modify argument:\n\"graphname.Elevation { = ' integer ' }\"\nTable 3.76:\nParameter\nDescription\ngraphname\nThe name of the graph control in the DataWindow for which you want to get\nor set the elevation.\ninteger\n(exp) An integer specifying the elevation of the graph. Elevation can be a\nquoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Elevationscroll bar\n(enabled when a 3D graph type is selected).\nExamples\nstring setting\nsetting = dw1.Object.graph_1.Elevation\ndw1.Object.graph_1.Elevation = 35\nsetting = dw1.Describe(\"graph_1.Elevation\")\ndw1.Modify(\"graph_1.Elevation=35\")\ndw1.Modify(\"graph_1.Elevation='10~tIf(...,20,30)'\")\n3.3.59 EllipseHeight\nDescription\nThe radius of the vertical part of the corners of a RoundRectangle.\nApplies to\nRoundRectangle controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.rrectname.EllipseHeight\nDescribe and Modify argument:\n\"rrectname.EllipseHeight { = ' integer ' }\"\nTable 3.77:\nParameter\nDescription\nrrectname\nThe name of the RoundRectangle control in the DataWindow for which you\nwant to get or set the ellipse height.\n"}
{"page": 272, "text": "DataWindow Object Properties\nPage 272\nParameter\nDescription\ninteger\n(exp) An integer specifying the radius of the vertical part of the corners of a\nRoundRectangle in the DataWindow's unit of measure. EllipseHeight can be a\nquoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nExamples\nstring setting\nsetting = dw1.Object.rrect_1.EllipseHeight\ndw1.Object.rrect_1.EllipseHeight = 35\nsetting = dw1.Describe(\"rrect_1.EllipseHeight\")\ndw1.Modify(\"rrect_1.EllipseHeight=35\")\ndw1.Modify(\"rrect_1.EllipseHeight='10~tIf(...,20,30)'\")\n3.3.60 EllipseWidth\nDescription\nThe radius of the horizontal part of the corners of a RoundRectangle.\nApplies to\nRoundRectangle controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.rrectname.EllipseWidth\nDescribe and Modify argument:\n\"rrectname.EllipseWidth { = ' integer ' }\"\nTable 3.78:\nParameter\nDescription\nrrectname\nThe name of the RoundRectangle control in the DataWindow for which you\nwant to get or set the ellipse width.\ninteger\n(exp) An integer specifying the radius of the horizontal part of the corners of a\nRoundRectangle in the DataWindow's unit of measure. EllipseWidth can be a\nquoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nExamples\nstring setting\n"}
{"page": 273, "text": "DataWindow Object Properties\nPage 273\nsetting = dw1.Object.rrect_1.EllipseWidth\ndw1.Object.rrect_1.EllipseWidth = 35\nsetting = dw1.Describe(\"rrect_1.EllipseWidth\")\ndw1.Modify(\"rrect_1.EllipseWidth=35\")\ndw1.Modify(\"rrect_1.EllipseWidth='10~tIf(...,20,30)'\")\n3.3.61 Enabled\nDescription\nDetermines whether a control in a DataWindow is enabled.\nApplies to\nButton, Computed Field, Graph, InkPicture, OLE Database Blob, OLE Object, Picture, and\nText controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.buttonname.Enabled\nDescribe and Modify argument:\n\"buttonname.Enabled { = ' value ' }\"\nTable 3.79:\nParameter\nDescription\nbuttonname\nThe name of the button that you want to enable or disable.\nvalue\nWhether the button is enabled.\nValues are:\nYes -- (Default) The button is enabled.\nNo -- The button is disabled.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view General tab, Enabled option.\nWhen the Enabled check box is cleared, or the Enabled property is otherwise set to false, the\nbutton control is grayed and its actions are not performed.\nExamples\ndw1.Object.b_name.Enabled = \"No\"\nsetting = dw1.Describe(\"b_name.Enabled\")\ndw1.Modify(\"b_name.Enabled ='No'\")\n3.3.62 Export.PDF.Distill.CustomPostScript\nDescription\nSetting that enables you to specify the PostScript printer driver settings used when data is\nexported to PDF using the Distill! method.\n"}
{"page": 274, "text": "DataWindow Object Properties\nPage 274\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.Distill.CustomPostScript\nDescribe and Modify argument:\n\"DataWindow.Export.PDF.Distill.CustomPostScript { = 'value' }\"\nTable 3.80:\nParameter\nDescription\nvalue\n(exp) Whether the printer specified in the DataWindow.Printer property is\nused when data is exported to PDF.\nValues are:\n\u2022 1 -- The printer specified in DataWindow.Printer is used for PDF export.\n\u2022 0 -- The default printer is used for PDF export (default).\nUsage\nThe Distill! method performs a PostScript \"print to file\" before distilling to PDF. This\nproperty can be set to specify that you want to use a custom PostScript printer before you call\nthe SaveAs method with PDF! as the SaveAsType or select File>Save Rows As with the file\ntype PDF in the DataWindow painter.\nSet this property if you want to use a PostScript printer driver for which you have set specific\nprint options such as options for font and graphic handling. If this property is not set, a\ndefault PostScript printer driver specifically designed for distilling purposes is used.\nThis property has no effect if the Export.PDF.Method property is set to NativePDF! or\nXSLFOP!.\nIn the painter\nIn the Data Export tab in the Properties view for the DataWindow object, select \"PDF\" from\nthe Format to Configure list and \"Distill!\" from the Method list, and then select \"Distill\nCustom PostScript\".\nExamples\nThis example specifies an HP LaserJet PostScript printer as the printer to be used to export\nPDF with customized settings, and saves the data to a file called custom.pdf:\nint li_ret\ndw1.Object.DataWindow.Export.PDF.Method = Distill!\ndw1.Object.DataWindow.Printer = \"HP LaserJet 4Si/4Si MX PostScript\"\ndw1.Object.DataWindow.Export.PDF.Distill.CustomPostScript=\"1\"\nli_ret = dw1.SaveAs(\"custom.pdf\", PDF!, true)\n"}
{"page": 275, "text": "DataWindow Object Properties\nPage 275\nThis example uses Modify to set the PDF export properties and specify a network printer:\ndw1.Modify (\"DataWindow.Export.PDF.Method = Distill!\")\ndw1.Modify (\"Printer = '\\\\print-server\\pr-18' \")\ndw1.Modify (\"DataWindow.Export.PDF.Distill.CustomPostScript = '1'\")\nSee also\nExport.PDF.Method\n3.3.63 Export.PDF.Method\nDescription\nSetting that determines whether data is exported to PDF from a DataWindow object by\nprinting to a PostScript file and distilling to PDF, by saving to PDF via PDFlib, or by saving\nin XSL Formatting Objects (XSL-FO) format and processing to PDF.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.Method\nDescribe and Modify argument:\n\"DataWindow.Export.PDF.Method { = 'value' }\"\nTable 3.81:\nParameter\nDescription\nvalue\nA string specifying a value of the PDFMethod enumerated datatype\nUsage\nThis property can be set to specify the method used to export data to PDF before you call\nthe SaveAs method with PDF! as the SaveAsType or select File>Save Rows As with the file\ntype PDF in the DataWindow painter. If this property is not set, the distill method is used by\ndefault.\nPDFMethod is an enumerated datatype that can hold the following values:\nTable 3.82:\nEnumerated value\nNumeric value\nMeaning\nDistill!\n0\nData is printed to a PostScript\nfile and distilled to PDF\n(default).\nXSLFOP!\n1\nData is saved as XSL-FO and\nprocessed to PDF.\nNativePDF!\n2\nData is saved to PDF using\nPDFlib.\n"}
{"page": 276, "text": "DataWindow Object Properties\nPage 276\nThe distill method and the PDFlib method provides a robust solution that can save all types\nof DataWindow objects on the Windows platform. The XSL-FO method uses a platform-\nindependent Java process, and is particularly useful for printing DataWindow objects in the\nserver on a UNIX operating system.\nSaving as XSL-FO\nYou can also save the data in a DataWindow object in XSL-FO format and customize\nthe filters used to convert it to PDF and other output formats. To do so, use XSLFO!\nas the SaveAsType parameter when you call SaveAs, or select XSL-FO as the file\ntype when you save rows in the DataWindow painter.\nDeployment requirements\nIf your application uses the distill method, you must distribute the GNU Ghostscript files\nand default PostScript printer driver and related files (if using the default printer) with your\napplication. If your application uses the XSL-FO method, you must distribute Apache FOP\nfiles and the Java Runtime Environment (JRE) with your application. For more information,\nsee Section 9.2, \u201cDeploying Applications and Components\u201d in Application Techniques.\nIn the painter\nOn the Data Export page in the Properties view for the DataWindow object, select \"PDF\"\nfrom the Format to Configure list and \"Distill!\", \"NativePDF!\", or \"XSLFOP!\" from the\nMethod list.\nExamples\nThis statement specifies that data is exported to PDF using XSL-FO:\ndw1.Modify (\"DataWindow.Export.PDF.Method = XSLFOP! \")\nSee also\nExport.PDF.Distill.CustomPostScript\nExport.PDF.XSLFOP.Print\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nSection 6.2.3.1, \u201cSaving the data as PDF\u201d in Users Guide\n"}
{"page": 277, "text": "DataWindow Object Properties\nPage 277\n3.3.64 Export.PDF.NativePDF.Author\nDescription\nSetting that enables you to specify the author for the PDF file when you use the PDFlib\nmethod to save data from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.Author\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.Author { = 'value' }\"\nTable 3.83:\nParameter\nDescription\nvalue\nA string specifying the author for the PDF file.\nUsage\nIn the painter\nInput the author in the Data Export tab in the Properties view for the DataWindow object.\nExamples\nThis example specifies the author for the PDF file, and saves the data to a file called\ncustom.pdf:\nint li_ret\ndw1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw1.Object.DataWindow.Export.PDF.NativePDF.author = \"Kate M.\"\ndw1.Object.DataWindow.Export.PDF.NativePDF.subject = \"Sales Data Report\"\ndw1.Object.DataWindow.Export.PDF.NativePDF.keywords = \"Product A\"\nli_ret = dw1.SaveAs(\"custom.pdf\", PDF!, true)\nThis example uses Modify to specify the author for the PDF file:\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.Author =  'Kate M.'\")\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\n"}
{"page": 278, "text": "DataWindow Object Properties\nPage 278\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.65 Export.PDF.NativePDF.CustomOrientation\nDescription\nSetting that enables you to specify the page orientation when you use the PDFlib method to\nsave data from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.CustomOrientation\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.CustomOrientation { = 'value' }\"\nTable 3.84:\nParameter\nDescription\nvalue\n(exp) An integer indicating the page orientation.\nValues are:\n\u2022 0 - The orientation which is set in the Print Specification page in the\nDataWindow object's Properties view.\n\u2022 1 - Landscape\n\u2022 2 - Portrait\nUsage\nIn the painter\nSelect an orientation mode from the Orientation list in the Data Export tab in the Properties\nview for the DataWindow object.\nExamples\nThis example exports PDF in portrait mode, and saves the data to a file called custom.pdf:\nint li_ret\ndw1.Object.DataWindow.Export.PDF.NativePDF.UsePrintSpec = 'No'\ndw1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw1.Object.DataWindow.Export.PDF.NativePDF.CustomOrientation = '2'\nli_ret = dw1.SaveAs(\"custom.pdf\", PDF!, true)\nThis example uses Modify to export PDF in portrait mode:\n"}
{"page": 279, "text": "DataWindow Object Properties\nPage 279\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.UsePrintSpec = No\")\ndw1.Modify(\"DataWindow.Export.PDF.Method = NativePDF!\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.CustomOrientation = '2'\")\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.66 Export.PDF.NativePDF.CustomSize\nDescription\nSetting that enables you to specify the paper size when you use the PDFlib method to save\ndata from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.CustomSize\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.CustomSize { = 'value' }\"\nTable 3.85:\nParameter\nDescription\nvalue\n(exp) An integer indicating the paper size.\nValues are:\n\u2022 0 - Default paper size which is A4 by default.\n\u2022 1 - A1 594 x 841 mm\n\u2022 2 - A2 420 x 594 mm\n"}
{"page": 280, "text": "DataWindow Object Properties\nPage 280\nParameter\nDescription\n\u2022 3 - A3 297 x 420 mm\n\u2022 4 - A4 210 x 297 mm\n\u2022 5 - Letter 8 1/2 x 11 in\n\u2022 6 - Legal 8 1/2 x 14 in\nUsage\nIn the painter\nSelect a size from the Paper Size list in the Data Export tab in the Properties view for the\nDataWindow object.\nExamples\nThis example exports PDF with A4 paper size, and saves the data to a file called custom.pdf:\nint li_ret\ndw1.Object.DataWindow.Export.PDF.NativePDF.UsePrintSpec = 'No'\ndw1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw1.Object.DataWindow.Export.PDF.NativePDF.CustomSize = '0'\nli_ret = dw1.SaveAs(\"custom.pdf\", PDF!, true)\nThis example uses Modify to set the PDF export properties:\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.UsePrintSpec = No\")\ndw1.Modify(\"DataWindow.Export.PDF.Method = NativePDF!\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.CustomSize = '0'\")\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.67 Export.PDF.NativePDF.ImageFormat\nDescription\n"}
{"page": 281, "text": "DataWindow Object Properties\nPage 281\nSetting that enables you to select a format for the embedded images in the PDF file when you\nuse the PDFlib method to save data from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.ImageFormat\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.ImageFormat { = 'value' }\"\nTable 3.86:\nParameter\nDescription\nvalue\n(exp) An integer indicating the file format of the embedded images in the\nDataWindow object.\nValues are:\n\u2022 0 - (Default) BMP\n\u2022 1 - JPG\n\u2022 2 - PNG\n\u2022 3 - GIF\nThe image format affects the speed of creating the PDF file and the size of\nthe PDF file.\nIn the order from the fastest to the lowest: JPG, BMP, PNG, GIF\nIn the order from the smallest to the biggest: JPG, GIF, BMP, PNG\nExamples\nThis example saves the embedded image as JPG format, and saves the data to a file called\ncustom.pdf:\nint li_ret\ndw_1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw_1.Object.DataWindow.Export.PDF.NativePDF.ImageFormat = '1' //JPG\nli_ret = dw_1.SaveAs(\"c:\\custom.pdf\",PDF!, true)\nThis example uses Modify to set the PDF print properties:\ndw1.Modify(\"DataWindow.Export.PDF.Method = NativePDF!\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.ImageFormat = '1'\")\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\n"}
{"page": 282, "text": "DataWindow Object Properties\nPage 282\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.68 Export.PDF.NativePDF.Keywords\nDescription\nSetting that enables you to specify the keywords for the PDF file when you use the PDFlib\nmethod to save data from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.Keywords\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.Keywords { = 'value' }\"\nTable 3.87:\nParameter\nDescription\nvalue\nA string specifying the keywords for the PDF file.\nUsage\nIn the painter\nInput the keywords in the Data Export tab in the Properties view for the DataWindow object.\nExamples\nThis example specifies the keywords for the PDF file, and saves the data to a file called\ncustom.pdf:\nint li_ret\ndw1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw1.Object.DataWindow.Export.PDF.NativePDF.keywords = \"Product A\"\nli_ret = dw1.SaveAs(\"custom.pdf\", PDF!, true)\nThis example uses Modify to specify the keywords for the PDF file:\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.Keywords = 'Product A'\")\n"}
{"page": 283, "text": "DataWindow Object Properties\nPage 283\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.69 Export.PDF.NativePDF.MasterPassword\nDescription\nSetting that enables you to set a password for changing the security settings and permissions\n(copy/print/edit/etc.) of the generated PDF file, when you use the PDFlib method to save data\nfrom a DataWindow object to a PDF file. Therefore, this master password is also referred to\nas owner or permissions password.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.MasterPassword\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.MasterPassword { = 'value' }\"\nTable 3.88:\nParameter\nDescription\nvalue\n(exp) The password for the administration permissions of the generated\nPDF file.\nThe value can be a string containing at least one character or no more than\n37 characters. If more than 37 characters are set, the first 37 characters\nwill be used as the password. The characters must be printable ASCII\ncharacters. Any unprintable ASCII characters will cause PB dot notation to\nthrow an exception.\nUsage\n"}
{"page": 284, "text": "DataWindow Object Properties\nPage 284\nOnce you set the master password, the user with the master password automatically has the\npermission of opening the file and all other permissions (such as copying, printing, editing\netc.) to the PDF file.\nOnce you set the master password, you can further control the access restrictions of the file,\nfor example, restrict opening the file by setting the Export.PDF.NativePDF.UserPassword\nproperty, or restrict copying/printing/editing/etc. the file by setting the\nExport.PDF.NativePDF.Restrictions property. If the master password is empty, it indicates\nno master password or user password is required to open the file or copy/print/edit the file\n(which means any one can open the file and copy/print/edit the file with no restrictions).\nThe master password cannot be the same as the user password which is set by the\nExport.PDF.NativePDF.UserPassword property, otherwise SaveAs function will fail and\nreturn -1.\nThis property takes no effect for files created using PDF/A standard.\nExamples\nThis example sets the user password and the master password, and saves the data to a file\ncalled custom.pdf:\nint li_ret\ndw_1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw_1.Object.DataWindow.Export.PDF.NativePDF.UserPassword = '123'\ndw_1.Object.DataWindow.Export.PDF.NativePDF.MasterPassword = '456'\nli_ret = dw_1.SaveAs(\"c:\\custom.pdf\",PDF!, true)\nThis example uses Modify to set the user password and the master password:\ndw1.Modify(\"DataWindow.Export.PDF.Method = NativePDF!\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.UserPassword='123'\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.MasterPassword='456'\")\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.70 Export.PDF.NativePDF.PDFStandard\nDescription\n"}
{"page": 285, "text": "DataWindow Object Properties\nPage 285\nSetting that enables you to select a PDF conformance level when you use the PDFlib method\nto save data from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.PDFStandard\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.PDFStandard { = 'value' }\"\nTable 3.89:\nParameter\nDescription\nvalue\n(exp) An integer indicating the level of PDF conformance.\nValues are:\n\u2022 0 - None.\n\u2022 1 - PDF/A-1a\n\u2022 2 - PDF/A-1b\n\u2022 3 - PDF/A-3a\n\u2022 4 - PDF/A-3b\n\u2022 5 - PDF/A-3u\nUsage\nIn the painter\nSelect a value from the PDF Conformance list in the Data Export tab in the Properties view\nfor the DataWindow object.\nExamples\nThis example exports PDF using PDF/A-1a standard, and saves the data to a file called\ncustom.pdf:\nint li_ret\ndw_1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw_1.Object.DataWindow.Export.PDF.NativePDF.PDFStandard = '1' //PDF/A-1a\nli_ret = dw_1.SaveAs(\"c:\\custom.pdf\",PDF!, true)\nThis example uses Modify to set the PDF print properties:\ndw1.Modify(\"DataWindow.Export.PDF.Method = NativePDF!\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.PDFStandard = '1'\")\nSee also\n"}
{"page": 286, "text": "DataWindow Object Properties\nPage 286\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.71 Export.PDF.NativePDF.Restrictions\nDescription\nSetting that enables you to specify the permission settings that restrict certain actions (such as\ncopying/printing/editing) of the generated PDF file, when you use the PDFlib method to save\ndata from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.Restrictions\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.Restrictions { = 'value' }\"\nTable 3.90:\nParameter\nDescription\nvalue\n(exp) The password for opening the generated PDF file.\nThe value can be a string containing one or more of the following values\n(separated by \",\"):\n\u2022 noprint! - Acrobat will prevent printing the file.\n\u2022 nohiresprint! - Acrobat will prevent high-resolution printing. If noprint\nis not set, printing is restricted to the print as image feature which prints\na low-resolution rendition of the page.\n\u2022 nomodify! - Acrobat will prevent editing or cropping pages and creating\nor changing form fields.\n"}
{"page": 287, "text": "DataWindow Object Properties\nPage 287\nParameter\nDescription\n\u2022 noassemble! - Acrobat will prevent inserting, deleting, or rotating pages\nand creating bookmarks and thumbnails.\n\u2022 noannots! - Acrobat will prevent creating or changing annotations and\nform fields.\n\u2022 noforms! - Acrobat will prevent form field filling. (implies nomodify\nand noannots)\n\u2022 nocopy! - Acrobat will prevent copying and extracting text or graphics;\nthe accessibility interface will be controlled by noaccessible.\n\u2022 noaccessible! - (Obsolete in PDF 2.0; not allowed in PDF/UA-1)\nAcrobat will prevent extracting text or graphics for accessibility\n\u2022 plainmetadata! - (PDF 1.5) Keep XMP document metadata unencrypted\neven in an encrypted document.\nUsage\nIf you set the restrictions of the PDF file, you must also set the master password by the\nExport.PDF.NativePDF.MasterPassword property. There must be a value specified for\nthe restriction property, otherwise syntax error may occur. If you do not want to set any\nrestriction, please set Export.PDF.NativePDF.MasterPassword to empty, which indicates\nno master password or user password is required to open the file or copy/print/edit the file\n(which means any one can open the file and copy/print/edit the file with no restrictions).\nIf you set restrictions without setting the user password, a user can open the PDF file, and has\nthe permissions specified by the restriction property.\nThis property takes no effect for files created using PDF/A standard.\nExamples\nThis example prevents the PDF file being printed and copied, sets the master password, and\nsaves the data to a file called custom.pdf:\nint li_ret\ndw_1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw_1.Object.DataWindow.Export.PDF.NativePDF.Restrictions = 'noprint!,nocopy!'\ndw_1.Object.DataWindow.Export.PDF.NativePDF.MasterPassword = '456'\nli_ret = dw_1.SaveAs(\"c:\\custom.pdf\",PDF!, true)\nThis example uses Modify to set the restrictions and the master password:\ndw1.Modify(\"DataWindow.Export.PDF.Method = NativePDF!\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.Restrictions='noprint!,nocopy!'\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.MasterPassword='456'\")\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\n"}
{"page": 288, "text": "DataWindow Object Properties\nPage 288\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.72 Export.PDF.NativePDF.Subject\nDescription\nSetting that enables you to specify the subject for the PDF file when you use the PDFlib\nmethod to save data from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.Subject\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.Subject { = 'value' }\"\nTable 3.91:\nParameter\nDescription\nvalue\nA string specifying the subject for the PDF file.\nUsage\nIn the painter\nInput the subject in the Data Export tab in the Properties view for the DataWindow object.\nExamples\nThis example specifies the subject for the PDF file, and saves the data to a file called\ncustom.pdf:\nint li_ret\ndw1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw1.Object.DataWindow.Export.PDF.NativePDF.author = \"Kate M.\"\ndw1.Object.DataWindow.Export.PDF.NativePDF.subject = \"Sales Data Report\"\ndw1.Object.DataWindow.Export.PDF.NativePDF.keywords = \"Product A\"\nli_ret = dw1.SaveAs(\"custom.pdf\", PDF!, true)\nThis example uses Modify to specify the subject for the PDF file:\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.Subject = 'Sales Data Report'\")\n"}
{"page": 289, "text": "DataWindow Object Properties\nPage 289\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.UserPassword\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n3.3.73 Export.PDF.NativePDF.UserPassword\nDescription\nSetting that enables you to set a password for opening the generated PDF file, when you use\nthe PDFlib method to save data from a DataWindow object to a PDF file. Therefore, this user\npassword is also referred to as open password.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.UserPassword\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.UserPassword { = 'value' }\"\nTable 3.92:\nParameter\nDescription\nvalue\n(exp) The password for opening the generated PDF file.\nThe value can be a string containing at least one character or no more than\n37 characters. If more than 37 characters are set, the first 37 characters\nwill be used as the password. The characters must be printable ASCII\ncharacters. Any unprintable ASCII characters will cause PB dot notation to\nthrow an exception.\nWhen the value is empty, it indicates no password is required to open the\nfile.\nUsage\n"}
{"page": 290, "text": "DataWindow Object Properties\nPage 290\nIf you set the user password for opening the PDF file, you must also set the master password\nby the Export.PDF.NativePDF.MasterPassword property. If the master password is empty,\nit indicates no master password or user password is required to open the file or copy/print/\nedit the file (which means any one can open the file and copy/print/edit the file with no\nrestrictions).\nIf you set the user password without setting the restrictions, a user with the user password\ncan open the PDF file for viewing only. You can use the Export.PDF.NativePDF.Restrictions\nproperty to set whether the user with the user password can have permissions of printing,\ncopying, editing etc.\nThe user password and the master password cannot be the same, otherwise SaveAs function\nwill fail and return -1.\nIf a PDF file requires a password to open, you can either input the user password or the\nmaster password. When inputting the user password, you will have the permissions set by\nthe Export.PDF.NativePDF.Restrictions property; when inputting the master password, you\nautomatically have access to all of the the permissions.\nThis property takes no effect for files created using PDF/A standard.\nExamples\nThis example sets the user password and the master password, and saves the data to a file\ncalled custom.pdf:\nint li_ret\ndw_1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw_1.Object.DataWindow.Export.PDF.NativePDF.UserPassword = '123'\ndw_1.Object.DataWindow.Export.PDF.NativePDF.MasterPassword = '456'\nli_ret = dw_1.SaveAs(\"c:\\custom.pdf\",PDF!, true)\nThis example uses Modify to set the user password and the master password:\ndw1.Modify(\"DataWindow.Export.PDF.Method = NativePDF!\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.UserPassword='123'\")\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.MasterPassword='456'\")\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UsePrintSpec\nPrint.property\n"}
{"page": 291, "text": "DataWindow Object Properties\nPage 291\n3.3.74 Export.PDF.NativePDF.UsePrintSpec\nDescription\nSetting that enables you to use the page orientation and paper size settings in the Print\nSpecifications tab or in the Print.Orientation and Print.Paper.Size properties, when you use\nthe PDFlib method to save data from a DataWindow object to a PDF file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.NativePDF.UsePrintSpec\nDescribe argument:\n\"DataWindow.Export.PDF.NativePDF.UsePrintSpec { = 'value' }\"\nTable 3.93:\nParameter\nDescription\nvalue\n(exp) Whether to use the settings in the print specifications or not.\nValues are:\n\u2022 Yes - Use the settings in the Print Specifications page or in the\nPrint.Orientation and Print.Paper.Size properties.\n\u2022 No - (Default) Use the settings in the Data Export page\nor in the Export.PDF.NativePDF.CustomOrientation and\nExport.PDF.NativePDF.CustomSize properties.\nUsage\nIn the painter\nSelect the \"Use Paper Size and Orientation Settings from Print Specifications\" checkbox\nin the Data Export tab in the Properties view for the DataWindow object.\nExamples\nThis example exports PDF with Letter paper size in Landscape mode, and saves the data to a\nfile called custom.pdf:\nint li_ret\ndw_1.Object.DataWindow.Export.PDF.NativePDF.UsePrintSpec = 'Yes'\ndw_1.Object.DataWindow.Export.PDF.Method = NativePDF!\ndw_1.Object.DataWindow.Print.Orientation = '1' //Landscape!\ndw_1.Object.DataWindow.Print.Paper.Size = '1' //1 \u2013 Letter 8 1/2 x 11 in\nli_ret = dw_1.SaveAs(\"c:\\custom.pdf\",PDF!, true)\nThis example uses Modify to set the PDF print properties:\ndw1.Modify(\"DataWindow.Export.PDF.NativePDF.UsePrintSpec = Yes\")\ndw1.Modify(\"DataWindow.Export.PDF.Method = NativePDF!\")\ndw1.Modify(\"DataWindow.Export.Print.Orientation = '1'\")\ndw1.Modify(\"DataWindow.Export.Print.Paper.Size = '1'\")\n"}
{"page": 292, "text": "DataWindow Object Properties\nPage 292\nSee also\nExport.PDF.Method\nExport.PDF.NativePDF.Author\nExport.PDF.NativePDF.CustomOrientation\nExport.PDF.NativePDF.CustomSize\nExport.PDF.NativePDF.ImageFormat\nExport.PDF.NativePDF.Keywords\nExport.PDF.NativePDF.MasterPassword\nExport.PDF.NativePDF.PDFStandard\nExport.PDF.NativePDF.Restrictions\nExport.PDF.NativePDF.Subject\nExport.PDF.NativePDF.UserPassword\nPrint.property\n3.3.75 Export.PDF.XSLFOP.Print\nDescription\nSetting that enables you to send a DataWindow object directly to a printer using platform-\nindependent Java printing when using the XSL-FO method to export to PDF. This is an\noption of the Apache FOP processor.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.PDF.XSLFOP.Print\nDescribe argument:\n\"DataWindow.Export.PDF.XSLFOP.Print { = 'value' }\"\nTable 3.94:\nParameter\nDescription\nvalue\n(exp) Whether the exported PDF is sent directly to the default printer.\nValues are:\n\u2022 Yes -- The DataWindow object is exported to a PDF file and sent\ndirectly to a printer.\n\u2022 No -- The DataWindow object is exported to a PDF file but is not\nprinted (default).\nUsage\n"}
{"page": 293, "text": "DataWindow Object Properties\nPage 293\nSet this property if you are using the XSL-FO method to export a DataWindow object to\na PDF file and you want to send the PDF file directly to a printer. The PDF file is always\nprinted to the default system printer. The DataWindow.Printer property setting is ignored.\nThis property has no effect if the Export.PDF.Method property is set to NativePDF! or\nDistill!.\nIn the painter\nOn the Data Export page in the Properties view for the DataWindow object, select PDF from\nthe Format to Configure list and XSLFOP! from the Method list, and then select Print Using\nXSLFOP.\nExamples\nThis example specifies the XSLFOP! method for PDF export, sets the XSLFOP.Print\nproperty, and saves the data to a file called printed.pdf, which is sent directly to the default\nprinter:\nint li_ret\ndw1.Object.DataWindow.Export.PDF.Method = XSLFOP!\ndw1.Object.DataWindow.Export.PDF.xslfop.print='Yes'\nli_ret = dw1.SaveAs(\"printed.pdf\", PDF!, true)\nSee also\nExport.PDF.Method\n3.3.76 Export.XHTML.TemplateCount\nDescription\nThe number of XHTML export templates associated with a DataWindow object.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XHTML.TemplateCount\nDescribe argument:\n\"DataWindow.Export.XHTML.TemplateCount\"\nUsage\nThis property is used to get a count of the XHTML export templates associated with a\nDataWindow object. It returns a long specifying the number of XHTML export templates\npreviously saved in the DataWindow painter for the specified DataWindow object. The\ncount is used with the DataWindow.Export.XHTML.Template[ ].Name property to enable an\napplication to select an export template at runtime.\nExamples\nThis code in the open event of a window uses the TemplateCount property to get the\nnumber of templates associated with dw1. It then uses the number returned as the upper\n"}
{"page": 294, "text": "DataWindow Object Properties\nPage 294\nlimit in a FOR loop that populates a drop-down list box with the template names, using the\nDataWindow.Export.XHTML.Template[ ].Name property.\nstring ls_template_name\nlong l_template_count, i\nl_template_count = Long &\n   (dw1.Object.DataWindow.Export.XHTML.TemplateCount)\nfor i=1 to l_template_count)\n  ls_template_name = &\n  dw1.Object.DataWindow.Export.XHTML.Template[i].Name \n ddlb_1.AddItem(ls_template_name)\nnext\nBefore generating the XHTML, set the export template using the text in the drop-down list\nbox:\ndw1.Object.DataWindow.Export.XHTML.UseTemplate = ddlb_1.text\nSee also\nExport.XHTML.Template[ ].Name\nExport.XHTML.UseTemplate\n3.3.77 Export.XHTML.Template[ ].Name\nDescription\nThe name of an XHTML export template associated with a DataWindow object.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XHTML.Template[ num ].Name\nDescribe argument:\n\"DataWindow.Export.XHTML.Template[ num ]Name\"\nTable 3.95:\nParameter\nDescription\nnum\n(exp) A long specifying the index of the export template\nUsage\nThis property returns the names of the XHTML export templates associated with\na DataWindow object by index. The index can range from 1 to the value of the\nDataWindow.Export.XHTML.TemplateCount property. The order reflects the serialized\nstorage order of all templates, which is a read-only setting. These properties, with\nDataWindow.Export.XHTML.UseTemplate, enable an application to select an export\ntemplate dynamically at runtime.\nExamples\n"}
{"page": 295, "text": "DataWindow Object Properties\nPage 295\nSee Export.XHTML.TemplateCount.\nSee also\nExport.XHTML.TemplateCount\nExport.XHTML.UseTemplate\n3.3.78 Export.XHTML.UseTemplate\nDescription\nSetting that optionally controls the logical structure of the XHTML generated by a\nDataWindow object from a DataWindow data expression using dot notation.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XHTML.UseTemplate\nDescribe and Modify argument:\n\"DataWindow.Export.XHTML.UseTemplate { = 'value ' }\"\nTable 3.96:\nParameter\nDescription\nvalue\n(exp) A string specifying the name of an XHTML export template\npreviously saved in the DataWindow painter for the specified\nDataWindow object\nUsage\nThis property uses a template defined in the DataWindow painter to specify the logical\nstructure and attribute overrides that PowerBuilder should use to generate XHTML from a\nDataWindow object. It is designed to be used with the data expression for the DataWindow\nobject, and should be set before a data expression statement.\nIn the painter\nIn the Data Export tab in the Properties view for the DataWindow object, select XHTML\nfrom the Format to Configure list and select a template from the Use Template list.\nExamples\nThis example stores the name of the export template used in dw1 in the string ls_template. If\nno template is selected in dw1, an empty string is returned.\nstring ls_template_name\nls_template_name = dw1.Describe (\"DataWindow.Export.XHTML.UseTemplate\")\nThis example sets the name of the current XHTML export template used in dw1 to t_report.\nIf t_report does not exist, the current template is not changed.\ndw1.Modify(\"DataWindow.Export.XHTML.UseTemplate = 't_report' \")\nSee also\n"}
{"page": 296, "text": "DataWindow Object Properties\nPage 296\nExport.XHTML.TemplateCount\nExport.XHTML.Template[ ].Name\n3.3.79 Export.XML.HeadGroups\nDescription\nSetting that causes elements, attributes, and all other items above the Detail Start element\nin an XML export template for a group DataWindow to be iterated for each group in the\nexported XML.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XML.HeadGroups\nDescribe and Modify argument:\n\"DataWindow.Export.XML.HeadGroups { = 'value ' }\"\nTable 3.97:\nParameter\nDescription\nvalue\n(exp) Whether the contents of the header section in an export template\niterate in the generated XML.\nValues are:\n\u2022 Yes -- The header section is repeated for each group (default).\n\u2022 No -- The header section is not repeated.\nUsage\nThis property must be set for group DataWindow objects if you want elements and other\nitems added to the header section of an XML export template to be repeated before each\ngroup in the exported XML. For DataWindow objects with multiple groups, each XML\nfragment in the header section between a Group Header element and the next Group Header\nelement or Detail Start element is iterated.\nIn the painter\nIn the Data Export tab in the Properties view for the DataWindow object, select XML from\nthe Format to Configure list and select Iterate header for Groups.\nExamples\ndw1.Object.DataWindow.Export.XML.HeadGroups = \"Yes\"\ndw1.Modify(\"DataWindow.Export.XML.HeadGroups = 'No' \")\n3.3.80 Export.XML.IncludeWhitespace\nDescription\n"}
{"page": 297, "text": "DataWindow Object Properties\nPage 297\nSetting that determines whether the XML document is formatted by inserting whitespace\ncharacters (carriage returns, linefeeds, tabs, and spacebar spaces).\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XML.IncludeWhitespace\nDescribe and Modify argument:\n\"DataWindow.Export.XML.IncludeWhitespace { = 'value ' }\"\nTable 3.98:\nParameter\nDescription\nvalue\n(exp) Whether the generated XML is formatted with whitespace characters.\nValues are:\n\u2022 Yes -- Whitespace characters are inserted.\n\u2022 No -- Whitespace characters are not inserted (default).\nUsage\nThis property should be set before you export a DataWindow object if you want to view or\nverify the exported XML using a text editor.\nIn the painter\nIn the Data Export tab in the Properties view for the DataWindow object, select XML from\nthe Format to Configure list and select Include Whitespace.\nExamples\ndw1.Object.DataWindow.Export.XML.IncludeWhitespace = \"No\"\ndw1.Modify(\"DataWindow.Export.XML.IncludeWhitespace = 'Yes' \")\n3.3.81 Export.XML.MetaDataType\nDescription\nSetting that controls the type of metadata generated with the XML exported from a\nDataWindow object using the SaveAs method or a .Data.XML expression.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XML.MetaDataType\nDescribe and Modify argument:\n"}
{"page": 298, "text": "DataWindow Object Properties\nPage 298\n\"DataWindow.Export.XML.MetaDataType { = 'value ' }\"\nTable 3.99:\nParameter\nDescription\nvalue\n(exp) A string specifying a value of the Export.XML.MetaDataType\nenumerated datatype\nUsage\nThis property must be set to specify the type of metadata generated before you call the\nSaveAs method with XML! as the SaveAsType to save data as an XML document, or\nuse the .Data.XML expression to save data as an XML string. The metadata is saved\ninto the exported XML itself or into an associated file, depending on the value of the\nExport.XML.SaveMetaData property.\nThe Export.XML.MetaDataType property is an enumerated datatype that can hold the\nfollowing values:\nTable 3.100:\nEnumerated value\nNumeric value\nMeaning\nXMLNone!\n0\nMetadata (XML Schema or\nDTD) is not generated when\nXML is exported\nXMLSchema!\n1\nXML Schema is generated\nwhen XML is exported\nXMLDTD!\n2\nDTD is generated when XML\nis exported\nIf the data item for a column is null or an empty string, an empty element is created when you\nexport XML. If you select XMLSchema!, child elements with null data items are created with\nthe content \"xsi:nil='true'\".\nIn the painter\nIn the Data Export tab in the Properties view for the DataWindow object, select XML from\nthe Format to Configure list and select a value from the Meta Data Type list.\nExamples\nThis statement specifies that no metadata will be generated when the DataWindow is\nexported to XML:\ndw1.Object.DataWindow.Export.XML.MetaDataType = XMLNone!\nThese statements export the contents of dw1 to the file c:\\myxml.xml using the XML export\ntemplate called t_schema, and generate an external XML schema file at c:\\myxml.xsd:\ndw1.Modify(\"DataWindow.Export.XML.UseTemplate = 't_schema'\")\ndw1.Modify(\"DataWindow.Export.XML.MetaDataType = 1\")\ndw1.Modify(\"DataWindow.Export.XML.SaveMetaData = 1\")\ndw1.SaveAs(\"c:\\myxml.xml\", XML!, false)\nSee also\nExport.XML.SaveMetaData\n"}
{"page": 299, "text": "DataWindow Object Properties\nPage 299\n3.3.82 Export.XML.SaveMetaData\nDescription\nSetting that controls the storage format for the metadata generated with the XML exported\nfrom a DataWindow object using the SaveAs method or a .Data.XML expression.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XML.SaveMetaData\nDescribe and Modify argument:\n\"DataWindow.Export.XML.SaveMetaData { = 'value ' }\"\nTable 3.101:\nParameter\nDescription\nvalue\n(exp) A string specifying a value of the Export.XML.SaveMetaData\nenumerated datatype\nUsage\nThis property must be set to specify how to store the generated metadata before you call the\nSaveAs method with XML! as the SaveAsType to save data as an XML document, or use\nthe .Data.XML expression to save data as an XML string. The metadata can be saved into the\nexported XML document or string or into an associated file.\nNote\nIf Export.XML.MetaDataType is set to XMLNone!, the value of the\nExport.XML.SaveMetaData property is not used.\nThe Export.XML.SaveMetaData property is an enumerated datatype that can hold the\nfollowing values:\nTable 3.102:\nEnumerated\nvalue\nNumeric\nvalue\nMeaning\nMetaDataInternal!\n0\nThe metadata is saved into the generated XML document or\nstring. To save metadata using the .Data.XML expression syntax,\nyou must use this value.\nMetaDataExternal!\n1\nWith the SaveAs method, metadata is saved as an external\nfile with the same name as the XML document but with the\nextension .xsd (for XMLSchema! type) or .dtd (for XMLDTD!\ntype). A reference to the name of the metadata file is included in\nthe output XML document.\nWith .Data.XML, no metadata is generated in the XML string.\n"}
{"page": 300, "text": "DataWindow Object Properties\nPage 300\nIn the painter\nIn the Data Export tab in the Properties view for the DataWindow object, select XML from\nthe Format to Configure list and select a value from the Save Meta Data list.\nExamples\ndw1.Object.DataWindow.Export.XML.SaveMetaData = 0\ndw1.Modify(\"DataWindow.Export.XML.SaveMetaData = &\n   MetaDataExternal!\")\nSee also\nExport.XML.MetaDataType\n3.3.83 Export.XML.TemplateCount\nDescription\nThe number of XML export templates associated with a DataWindow object.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XML.TemplateCount\nDescribe argument:\n\"DataWindow.Export.XML.TemplateCount\"\nUsage\nThis property is used to get a count of the XML export templates associated with a\nDataWindow object. It returns a long specifying the number of XML export templates\npreviously saved in the DataWindow painter for the specified DataWindow object. The\ncount is used with the DataWindow.Export.XML.Template[ ].Name property to enable an\napplication to select an export template at runtime.\nExamples\nThis code in the open event of a window uses the TemplateCount property to get the\nnumber of templates associated with dw1. It then uses the number returned as the upper\nlimit in a FOR loop that populates a drop-down list box with the template names, using the\nDataWindow.Export.XML.Template[ ].Name property.\nstring ls_template_count, ls_template_name\nlong i\nls_template_count = dw1.Describe (\"DataWindow.Export.XML.TemplateCount\")\nfor i=1 to Long(ls_template_count)\n  ls_template_name = dw1.Object.DataWindow.Export.XML.Template[i].Name\n  ddlb_1.AddItem(ls_template_name)\nnext\nBefore generating the XML, set the export template using the text in the drop-down list box:\ndw1.Object.DataWindow.Export.XML.UseTemplate = ddlb_1.text\n"}
{"page": 301, "text": "DataWindow Object Properties\nPage 301\nSee also\nExport.XML.Template[ ].Name\nExport.XML.UseTemplate\n3.3.84 Export.XML.Template[ ].Name\nDescription\nThe name of an XML export template associated with a DataWindow object.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Export.XML.Template[num ].Name\nDescribe argument:\n\"DataWindow.Export.XML.Template[num ]Name\"\nTable 3.103:\nParameter\nDescription\nnum\n(exp) A long specifying the index of the export template\nUsage\nThis property is used to get the names of the XML export templates associated with a\nDataWindow object. It returns a string specifying the name of an export template previously\nsaved in the DataWindow painter for the specified DataWindow object. The property is used\nwith the DataWindow.Export.XML.TemplateCount property to enable an application to\nselect an export template at runtime.\nExamples\nSee Export.XML.TemplateCount.\nSee also\nExport.XML.TemplateCount\nExport.XML.UseTemplate\n3.3.85 Export.XML.UseTemplate\nDescription\nSetting that optionally controls the logical structure of the XML exported from a\nDataWindow object using the SaveAs method or the .Data.XML property.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\n"}
{"page": 302, "text": "DataWindow Object Properties\nPage 302\ndw_control.Object.DataWindow.Export.XML.UseTemplate\nDescribe and Modify argument:\n\"DataWindow.Export.XML.UseTemplate { = 'value ' }\"\nTable 3.104:\nParameter\nDescription\nvalue\n(exp) A string specifying the name of an export template previously saved in\nthe DataWindow painter for the specified DataWindow object\nUsage\nThis property should be set to specify the logical structure of the XML generated before you\ncall the SaveAs method with XML! as the SaveAsType to save data as an XML document, or\nuse the .Data.XML expression to save data as an XML string.\nIn the painter\nIn the Data Export tab in the Properties view for the DataWindow object, select XML from\nthe Format to Configure list and select a template from the Use Template list.\nExamples\nThis example stores the name of the export template used in dw1 in the string ls_template. If\nno template is selected in dw1, an empty string is returned.\nstring ls_template_name\nls_template_name = dw1.Describe(\"DataWindow.Export.XML.UseTemplate\")\nThis example sets the name of the current XML export template used in dw1 to t_report. If\nt_report does not exist, the current template is not changed.\ndw1.Modify(\"DataWindow.Export.XML.UseTemplate = 't_report' \")\nSee also\nExport.XML.MetaDataType\nExport.XML.SaveMetaData\n3.3.86 Expression\nDescription\nThe expression for a computed field control in the DataWindow. The expression is made\nup of calculations and DataWindow expression functions. The DataWindow evaluates the\nexpression to get the value it will display in the computed field.\nApplies to\nComputed field controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.computename.Expression\nDescribe and Modify argument:\n\"computename.Expression { = 'string' }\"\n"}
{"page": 303, "text": "DataWindow Object Properties\nPage 303\nTable 3.105:\nParameter\nDescription\ncomputename The name of the computed field control in the DataWindow for which you\nwant to get or set the expression\nstring\nA string whose value is the expression for the computed field\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Expression option.\nThe More button displays the Modify Expression dialog, which provides help in specifying\nthe expression. The Verify button tests the expression.\nExamples\nsetting = dw1.Object.comp_1.Expression\ndw1.Object.comp_1.Expression = \"avg(salary for all)\"\nsetting = dw1.Describe(\"comp_1.Expression\")\ndw1.Modify(\"comp_1.Expression='avg(salary for all)'\")\n3.3.87 Filename\nDescription\nThe file name containing the image for a Picture or Button control in the DataWindow. If no\nimage is specified for a Button control, only text is used for the button label.\nApplies to\nPicture and Button controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Filename\nDescribe and Modify argument:\n\"controlname.Filename { = ' filestring' }\"\nTable 3.106:\nParameter\nDescription\ncontrolname\nThe name of the Picture or Button control in the DataWindow for which you\nwant to get or set the image file name.\nfilestring\n(exp) A string containing the name of the file that contains the image.\nFilestring can be a quoted DataWindow expression.\nButton pictures can be BMP, GIF, or JPEG files. You can use a URL instead\nof a full path name, and if you set the HTMLGen.ResourceBase property to\nthe URL address, you need to specify only a relative file name for this string.\nIf you include the name of the file containing the image in the executable for\nthe application, PowerBuilder will always use that image; you cannot use\nModify to change the image.\n"}
{"page": 304, "text": "DataWindow Object Properties\nPage 304\nUsage\nIn the painter\nFor a Picture control, select the control and set the value in the Properties view, General tab,\nFile Name option. For a Button control, select the control and set the value in the Properties\nview, General tab, Picture File option. The Action Default Picture check box must be cleared\nto set the value for the picture file.\nExamples\nExample for a Picture control:\nsetting = dw1.Object.bitmap_1.Filename\ndw1.Object.bitmap_1.Filename = \"exclaim.bmp\"\nsetting = dw1.Describe(\"bitmap_1.Filename\")\ndw1.Modify(\"bitmap_1.Filename='exclaim.bmp'\")\nExample for a Button control:\ndw1.Object.b_name.FileName = \"logo.gif\"\nls_data = dw1.Describe(\"b_name.FileName\")\ndw1.Modify(\"b_name.FileName = 'logo.jpg'\")\nSee also\nDefaultPicture\n3.3.88 FirstRowOnPage\nDescription\nThe first row currently visible in the DataWindow.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.FirstRowOnPage\nDescribe argument:\n\"DataWindow.FirstRowOnPage\"\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.FirstRowOnPage\nsetting = dw1.Describe(\"DataWindow.FirstRowOnPage\")\n3.3.89 FocusRectangle\nDescription\nWhether a rectangle displays around the selected control.\nApplies to\nColumn, Computed Field, Graph, OLE Object, OLE Database Blob, Picture, and Text\ncontrols\n"}
{"page": 305, "text": "DataWindow Object Properties\nPage 305\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.FocusRectangle\nDescribe and Modify argument:\n\"controlname.FocusRectangle = value\"\nTable 3.107:\nParameter\nDescription\ncontrolname\nThe name of the control for which you want to show or hide the focus\nrectangle\nvalue\nWhether the focus rectangle appears when the control has focus. Values\nare:\n\u2022 Yes -- The focus rectangle displays\n\u2022 No -- The focus rectangle does not display\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Edit tab, Show Focus Rectangle\noption.\nExamples\nString ls_DataObject\nstring ls_focus, ls_focus1\n \nls_DataObject= dw_1.DataObject\nIf ls_DataObject = \"d_dept\" Then\n   dw_1.Modify(\"t_1.focusrectangle = \" + \"yes\")\n   ls_focus = dw_1.describe(\"t_1.focusrectangle\")\n   ls_focus1 = dw_1.object.t_1.focusrectangle\nElse\n   dw_1.Modify(\"gr_1.focusrectangle = \" + \"yes\")\n   ls_focus = dw_1.describe(\"gr_1.focusrectangle\")\n   ls_focus1 = dw_1.object.gr_1.focusrectangle\nEnd If\n \nmessagebox(ls_focus, ls_focus1)\n3.3.90 Font.Bias\nDescription\nThe way fonts are manipulated in the DataWindow at runtime.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Font.Bias\n"}
{"page": 306, "text": "DataWindow Object Properties\nPage 306\nDescribe and Modify argument:\n\"DataWindow.Font.Bias { = biasvalue }\"\nTable 3.108:\nParameter\nDescription\nbiasvalue\nAn integer indicating how the fonts will be manipulated at execution.\nBiasvalue cannot be a DataWindow expression.\nValues are:\n0 -- As display fonts\n1 -- As printer fonts\n2 -- Neutral; no manipulation will take place\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Font.Bias\ndw1.Object.DataWindow.Font.Bias = 1\nsetting = dw1.Describe(\"DataWindow.Font.Bias\")\ndw1.Modify(\"DataWindow.Font.Bias=1\")\n3.3.91 Font.property\nDescription\nSettings that control the appearance of fonts within a DataWindow, except for graphs, which\nhave their own settings (see DispAttr).\nApplies to\nButton, Column, Computed Field, GroupBox, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Font.property\nDescribe and Modify argument:\n\"controlname.Font.property { = ' value ' }\"\nSyntaxFromSql:\n   Column(Font.property = value)\n   Text(Font.property = value)\nTable 3.109:\nParameter\nDescription\ncontrolname\nThe name of a column, computed field, or text control for which you want\nto get or set font properties. For a column, you can specify the column name\nor a pound sign (#) followed by the column number.\nWhen you generate DataWindow syntax with SyntaxFromSql, the Font\nsettings apply to all columns or all text controls.\n"}
{"page": 307, "text": "DataWindow Object Properties\nPage 307\nParameter\nDescription\nproperty\nA property of the text. The properties and their values are listed in the table\nbelow.\nvalue\nThe value to be assigned to the property. Value can be a quoted\nDataWindow expression.\n \nTable 3.110:\nProperty for\nFont\nValue\nCharSet\n(exp) An integer specifying the character set to be used.\nValues are:\n0 -- ANSI\n1 -- The default character set for the specified font\n2 -- Symbol\n128 -- Shift JIS\n255 -- OEM\nPainter: Font tab, CharSet option.\nEscapement\n(exp) An integer specifying the rotation for the baseline of the text in tenths\nof a degree. For example, a value of 450 rotates the text 45 degrees. 0 is\nhorizontal.\nPainter: Font tab, Escapement option.\nFace\n(exp) A string specifying the name of the font face, such as Arial or Courier.\nPainter: Font tab, FaceName option or StyleBar.\nFamily\n(exp) An integer specifying the font family (Windows uses both face and\nfamily to determine which font to use).\nValues are:\n0 -- AnyFont\n1 -- Roman\n2 -- Swiss\n3 -- Modern\n4 -- Script\n5 -- Decorative\nPainter: Font tab, Family option.\nHeight\n(exp) An integer specifying the height of the text in the unit measure for the\nDataWindow. To specify size in points, specify a negative number.\nPainter: Font tab, Size option (specified in points) or StyleBar or\nExpressions tab.\n"}
{"page": 308, "text": "DataWindow Object Properties\nPage 308\nProperty for\nFont\nValue\nItalic\n(exp) Whether the text should be italic. The default is no.\nPainter: Font tab, Italic check box or StyleBar.\nPitch\n(exp) The pitch of the font.\nValues are:\n0 -- The default pitch for your system\n1 -- Fixed\n2 -- Variable\nPainter: Font tab, Pitch option.\nStrikethrough\n(exp) Whether the text should be crossed out. The default is no.\nPainter: Font tab, Strikeout check box.\nUnderline\n(exp) Whether the text should be underlined. The default is no.\nPainter: Font tab, Underline check box or StyleBar.\nWeight\n(exp) An integer specifying the weight of the text; for example, 400 for\nnormal or 700 for bold.\nPainter: Set indirectly using the Font tab, Bold option or the StyleBar, Bold\nbutton.\nWidth\n(exp) An integer specifying the average character width of the font in the\nunit of measure specified for the DataWindow. Width is usually unspecified,\nwhich results in a default width based on the other properties.\nPainter: Set indirectly using the font selection.\nUsage\nIn the painter\nSelect the control and set the value using the:\n\u2022 Properties view, Font tab\n\u2022 For some font settings, StyleBar\nExamples\ndw1.Object.emp_name_t.Font.Face\ndw1.Object.emp_name_t.Font.Face = \"Arial\"\ndw1.Describe(\"emp_name_t.Font.Face\")\ndw1.Modify(\"emp_name_t.Font.Face='Arial'\")\nSee also\nTransparency (columns and controls)\n3.3.92 Footer.property\nSee Bandname.property.\n"}
{"page": 309, "text": "DataWindow Object Properties\nPage 309\n3.3.93 Format\nDescription\nThe display format for a column.\nYou can use the GetFormat and SetFormat methods instead of Describe and Modify to get\nand change a column's display format. The advantage to using Modify is the ability to specify\nan expression.\nApplies to\nColumn and Computed Field controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Format\nDescribe and Modify argument:\n\"controlname.Format { = ' value ' }\"\nTable 3.111:\nParameter\nDescription\ncontrolname The name of the column or computed field for which you want to get or set the\ndisplay format.\nvalue\n(exp) A string specifying the display format. See Section 6.5.4, \u201cDefining\ndisplay formats\u201d in Users Guide for information on constructing display\nformats. Value can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Format tab.\nIf you want to add text to a numeric display format and use a color attribute, you must\ninclude the escape character (\\) before each literal in the mask. For example:\n[red]\\D\\e\\p\\t\\: ###\nExamples\nsetting = dw1.Object.phone.Format\ndw1.Object.\"phone.Format = \"[red](@@@)@@@-@@@@;'None'\"\nsetting = dw1.Describe(\"phone.Format\")\ndw1.Modify( &\n\"phone.Format='[red](@@@)@@@-@@@@;~~~'None~~~''\")\nSee also\nGetFormat function in Section 9.56, \u201cGetFormat\u201d\nSetFormat function in Section 9.167, \u201cSetFormat\u201d\n3.3.94 Gradient.property\nDescription\n"}
{"page": 310, "text": "DataWindow Object Properties\nPage 310\nSettings that control the gradient display in a DataWindow object. Gradient display properties\nare not supported in RichText, Graph, or OLE DataWindow presentation styles.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.datawindow.gradient.property\nDescribe and Modify argument:\n\"DataWindow.gradient.property { = value }\"\nTable 3.112:\nParameter\nDescription\nproperty\nA property for the gradient. Properties and their settings are listed in the table\nthat follows.\nvalue\nThe value to be assigned to the property. For gradient properties, value can be\na quoted DataWindow expression.\n \nTable 3.113:\nProperty\nfor\nGradient\nValue\nAngle\nAn integer indicating the angle in degrees (values are 0 to 360) used to\noffset the color and transparency gradient. This property is used only when\ndatawindow.brushmode takes values of 3 or 4.\nPainter: Background tab, Gradient group.\nColor\nThe gradient color of the DataWindow. This property is only in effect when\ndatawindow.brushmode takes values 1 through 5.\nPainter: Background tab, Gradient group\nFocus\nAn integer in the range 0 to 100, specifying the distance (as a percentage)\nfrom the center where the background color is at its maximum. (For example,\nif the radial gradient is used and the value is set to 0, the color will be at the\ncenter of the background; if the value is set to 100, the color will be at the\nedges of the background.)\nPainter: Background tab, Gradient group\nRepetition.Mode\nSpecifies the mode for determining the number of gradient transitions.\nPermitted values and their meanings are:\n\u2022 0\nGradient.repetition.count determines the number of gradient transitions\n"}
{"page": 311, "text": "DataWindow Object Properties\nPage 311\nProperty\nfor\nGradient\nValue\n\u2022 1\nGradient.repetition.length determines the number of gradient transitions\nPainter: Background tab, Gradient group.\nRepetition.Count\nAn integer specifying the number of gradient transitions for background\ncolor and transparency. A value of 0 indicates 1 transition. A value\nof 3 indicates 4 transitions. This property is used only when the\ndatawindow.brushmode property takes values from 1 to 4 and when the when\nthe datawindow.gradient.repetition.mode value is 0 (by count). The maximum\nis 10,000.\nPainter: Background tab, Gradient group.\nRepetition.Length\nA long specifying the number of gradient transitions. This property is used\nonly when the datawindow.brushmode property takes values from 1 to 4 and\nthe datawindow.gradient.repetition.mode property takes the value of 1 (by\nlength). The units for the length that you assign for gradient transitions are set\nby the datawindow.units property.\nPainter: Background tab, Gradient group.\nScale\nAn integer in the range 0 to 100 specifying the rate of transition to the\ngradient color (as a percentage).\nPainter: Background tab, Gradient group\nSpread\nAn integer in the range 0 to 100 indicating the contribution of the second\ncolor to the blend (as a percentage).\nPainter: Background tab, Gradient group\nTranparency An integer in the range 0 to 100, where 0 means that the secondary (gradient)\nbackground is opaque and 100 that it is completely transparent. The gradient\ndefines transitions between the primary and secondary transparency settings.\nPainter: Background tab, Gradient group\nUsage\nIn the painter\nSelect the DataWindow object and set the value on the Background tab of the Properties\nview.\nIf you save to an EMF or WMF, the properties on the Background tab are not saved with the\nDataWindow.\nExamples\nstring ls_data\nls_data = dw_1.Object.datawindow.brushmode\ndw_1.Object.datawindow.Brushmode = 5\nls_data = dw_1.Describe(\"datawindow.brushmode\")\ndw_1.Modify(\"datawindow.Brushmode=6\")\n"}
{"page": 312, "text": "DataWindow Object Properties\nPage 312\ndw_1.Modify(\"datawindow.Gradient.Transparency=75\")\nSee also\nBrushmode\nPicture.property\n3.3.95 GraphType\nDescription\nThe type of graph, such as bar, pie, column, and so on.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.GraphType\nDescribe and Modify argument:\n\"graphname.GraphType { = ' typeinteger ' }\"\nTable 3.114:\nParameter\nDescription\ngraphname\nThe graph control for which you want to get or change the\ntype.\ntypeinteger\n(exp) An integer identifying the type of graph in the\nDataWindow object. Typeinteger can be a quoted\nDataWindow expression.\nValues are:\n \n1 -- Area\n2 -- Bar\n3 -- Bar3D\n4 -- Bar3DObj\n5 -- BarStacked\n6 -- BarStacked3DObj\n7 -- Col\n8 -- Col3D\n9 -- Col3DObj\n10 -- ColStacked\n11 -- ColStacked3DObj\n12 -- Line\n13 -- Pie\n14 -- Scatter\n15 -- Area3D\n16 -- Line3D\n17 -- Pie3D\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nExamples\n"}
{"page": 313, "text": "DataWindow Object Properties\nPage 313\nstring setting\nsetting = dw1.Object.graph_1.GraphType\ndw1.Object.graph_1.GraphType = 17\nsetting = dw1.Describe(\"graph_1.GraphType\")\ndw1.Modify(\"graph_1.GraphType=17\")\n3.3.96 Grid.ColumnMove\nDescription\nWhether the user can rearrange columns by dragging.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Grid.ColumnMove\nDescribe and Modify argument:\n\"DataWindow.Grid.ColumnMove { = value } \"\nTable 3.115:\nParameter\nDescription\nvalue\nWhether the user can rearrange columns.\nValues are:\nYes -- The user can drag columns.\nNo -- The user cannot drag columns.\nUsage\nIn the painter\nSelect the DataWindow object by deselecting all controls; then set the value in the Properties\nview, General tab, Grid group, Column Moving check box (available when the presentation\nstyle is Grid, Crosstab, or TreeView with the Grid Style option selected).\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Grid.ColumnMove\ndw1.Object.DataWindow.Grid.ColumnMove = No\nsetting = dw1.Describe(\"DataWindow.Grid.ColumnMove\")\ndw1.Modify(\"DataWindow.Grid.ColumnMove=No\")\n3.3.97 Grid.Lines\nDescription\nThe way grid lines display and print in a DataWindow whose presentation style is Grid,\nCrosstab, or TreeView.\nApplies to\nDataWindows\n"}
{"page": 314, "text": "DataWindow Object Properties\nPage 314\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Grid.Lines\nDescribe and Modify argument:\n\"DataWindow.Grid.Lines { = value }\"\nTable 3.116:\nParameter\nDescription\nvalue\nAn integer specifying whether grid lines are displayed on the screen and\nprinted.\nValues are:\n0 -- Yes, grid lines are displayed and printed.\n1 -- No, grid lines are not displayed and printed.\n2 -- Grid lines are displayed, but not printed.\n3 -- Grid lines are printed, but not displayed.\nUsage\nIn the painter\nSelect the DataWindow object by deselecting all controls; then set the value in the Properties\nview, General tab, Grid group, Display option (available when the presentation style is Grid,\nCrosstab, or TreeView with the Grid Style option selected).\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Grid.Lines\ndw1.Object.DataWindow.Grid.Lines = 2\nsetting = dw1.Describe(\"DataWindow.Grid.Lines\")\ndw1.Modify(\"DataWindow.Grid.Lines=2\")\n3.3.98 GroupBy\nDescription\nA comma-separated list of the columns or expressions that control the grouping of the data\ntransferred from the DataWindow to the OLE object. When there is more than one grouping\ncolumn, the first one is the primary group and the columns that follow are nested groups.\nApplies to\nOLE Object controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.olecontrolname.GroupBy\nDescribe and Modify argument:\n\"olecontrolname.GroupBy { = ' columnlist ' }\"\n"}
{"page": 315, "text": "DataWindow Object Properties\nPage 315\nTable 3.117:\nParameter\nDescription\nolecontrolnameThe name of the OLE Object control for which you want to get or set the\ngrouping columns.\ncolumnlist\n(exp) A list of the columns or expressions that control the grouping. If there\nis more than one, separate them with commas. Columnlist can be a quoted\nDataWindow expression.\nUsage\nTarget and Range also affect the data that is transferred to the OLE object.\nIn the painter\nSelect the control and set the value in the Properties view, Data tab, Group By option.\nExamples\nls_data = dw1.Object.ole_report.GroupBy\ndw1.Object.ole_report.GroupBy = \"emp_state, emp_office\"\ndw1.Object.ole_report.GroupBy = \"year\"\nls_data = dw1.Describe(\"ole_report.GroupBy\")\ndw1.Modify(\"  &\n   ole_report.GroupBy='emp_state, emp_office'\")\ndw1.Modify(\"ole_report.GroupBy='year'\")\n3.3.99 Header_Bottom_Margin\nDescription\nThe size of the bottom margin of the DataWindow's header area. Header_Bottom_Margin is\nmeaningful only when type is Grid or Tabular.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Header_Bottom_Margin = value )\nTable 3.118:\nParameter\nDescription\nvalue\nAn integer specifying the size of the bottom margin of the header area in\nthe units specified for the DataWindow. The bottom margin is the distance\nbetween the bottom of the header area and the last line of the header.\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n'Style(...Header_Bottom_Margin = 25 ...)', &\nerrstring)\n3.3.100 Header_Top_Margin\nDescription\n"}
{"page": 316, "text": "DataWindow Object Properties\nPage 316\nThe size of the top margin of the DataWindow's header area. Header_Top_Margin is\nmeaningful only when type is Grid or Tabular.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Header_Top_Margin = value )\nTable 3.119:\nParameter\nDescription\nvalue\nAn integer specifying the size of the top margin of the header area in the units\nspecified for the DataWindow. The top margin is the distance between the top\nof the header area and the first line of the header.\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n'Style(...Header_Top_Margin = 500 ...)', errstring)\n3.3.101 Header.property\nSee Bandname.property.\n3.3.102 Header.#.property\nSee Bandname.property.\n3.3.103 Height\nDescription\nThe height of a control in the DataWindow.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, OLE, Oval, Picture, Rectangle, Report,\nRoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Height\nDescribe and Modify argument:\n\"controlname.Height { = ' value ' }\"\nTable 3.120:\nParameter\nDescription\ncontrolname\nThe control within the DataWindow whose height you want to get or set.\nvalue\n(exp) An integer specifying the height of the control in the unit of measure\nspecified for the DataWindow. Value can be a quoted DataWindow\nexpression.\n"}
{"page": 317, "text": "DataWindow Object Properties\nPage 317\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab.\nExamples\nstring setting\nsetting = dw1.Object.empname.Height\ndw1.Object.empname.Height = 50\nsetting = dw1.Describe(\"empname.Height\")\ndw1.Modify(\"empname.Height=50\")\n3.3.104 Height.AutoSize\nDescription\nWhether the control's width should be held constant and its height adjusted so that all the data\nis visible. This property is for use with read-only controls and printed reports. It should not be\nused with data entry fields or controls.\nApplies to\nColumn, Computed Field, Report, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Height.AutoSize\nDescribe and Modify argument:\n\"controlname.Height.AutoSize { = value }\"\nTable 3.121:\nParameter\nDescription\ncontrolname\nThe control for which you want to get or set the AutoSize property.\nvalue\nWhether the width or height of the control will be adjusted to display all the\ndata. The height is limited to what can fit on the page.\nValues are:\nNo -- Use the height defined in the painter.\nYes -- Calculate the height so that all the data is visible.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab, Autosize Height\ncheck box.\nMinimum height\nThe height of the column, computed field, or text will never be less than the minimum height\n(the height selected in the painter).\n"}
{"page": 318, "text": "DataWindow Object Properties\nPage 318\nWhen the band has Autosize Height set to true, you should avoid using the RowHeight\nDataWindow expression function to set the height of any element in the row. Doing so can\nresult in a logical inconsistency between the height of the row and the height of the element.\nFor more information, see the RowHeight function description.\nExamples\nstring setting\nsetting = dw1.Object.empname.Height.AutoSize\ndw1.Object.empname.Height.AutoSize = \"Yes\"\nsetting = dw1.Describe(\"empname.Height.AutoSize\")\ndw1.Modify(\"empname.Height.AutoSize=Yes\")\nSee also\nBandname.property\nHeight.HasMinHeight\n3.3.105 Height.HasMinHeight\nDescription\nWhether the column in a DataWindow object should maintain its minimum height, when its\nAutosize property is enabled. The property is false by default.\nHasMinHeight only applies to columns that have Autosize enabled. When both Autosize\nheight and HasMinHeight are true, the height value will be the max value between the auto\nheight value (the calculated value when the Autosize height is set to true) and the value\nspecified in the Height property.\nApplies to\nColumn, Computed Field, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Height.HasMinHeight\nDescribe and Modify argument:\n\"controlname.Height.HasMinHeight { = value }\"\nTable 3.122:\nParameter\nDescription\ncontrolname\nThe control for which you want to get or set the HasMinHeight property.\nvalue\nWhether the column should maintain its minimum height, when its Autosize\nproperty is enabled.\nValues are:\nNo -- (default) Do not use the minimum height. If the Autosize property is\nenabled, the column that contains no data will be completely hidden.\nYes -- Use the minimum height (the height selected in the painter) for the\ncolumn.\n"}
{"page": 319, "text": "DataWindow Object Properties\nPage 319\nUsage\nIn the painter\nCan be set only in code, not in the painter.\nExamples\nstring setting\nsetting = dw1.Object.empname.Height.HasMinHeight\ndw1.Object.empname.Height.AutoSize = \"Yes\"\ndw1.Object.empname.Height.HasMinHeight = \"Yes\"\nsetting = dw1.Describe(\"empname.Height.HasMinHeight\")\ndw1.Modify(\"empname.Height.AutoSize=Yes\")\ndw1.Modify(\"empname.Height.HasMinHeight=Yes\")\nSee also\nHeight.AutoSize\n3.3.106 Help.property\nDescription\nSettings for customizing the Help topics associated with DataWindow dialog boxes.\nFor more information about Help, see Section 2.4.807, \u201cShowHelp\u201d in PowerScript\nReference.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Help.property\nDescribe and Modify argument:\n\"DataWindow.Help.property { = value }\"\nTable 3.123:\nParameter\nDescription\nproperty\nA property for specifying DataWindow Help. Help properties and their\nsettings are listed in the table below. The File property must have a valid\nfile name before the rest of the Help property settings can become valid.\nvalue\nThe value to be assigned to the property. For Help properties, value cannot\nbe a DataWindow expression.\n \nTable 3.124:\nProperty for\nHelp\nValue\nCommand\nAn integer specifying the type of Help command that is specified in the\nfollowing TypeID properties.\n"}
{"page": 320, "text": "DataWindow Object Properties\nPage 320\nProperty for\nHelp\nValue\nValues are:\n0 -- Index\n1 -- TopicID\n2 -- Search keyword\nFile\nA string containing the fully qualified name of the compiled Help file (for\nexample, C:\\proj\\MYHELP.HLP). When this property has a value, Help\nbuttons display on the DataWindow dialog boxes at runtime.\nTypeID\nA string specifying the default Help command to be used when a Help\ntopic is not specified for the dialog using one of the following eight dialog-\nspecific properties listed in this table.\nTypeID.ImportFileA string specifying the Help topic for the Import File dialog box, which\nmight display when the ImportFile method is called in code.\nTypeID.Retrieve.Argument\nA string specifying the Help topic for the Retrieval Arguments dialog box,\nwhich displays when retrieval arguments expected by the DataWindow's\nSELECT statement are not specified for the Retrieve method in code.\nTypeID.Retrieve.Criteria\nA string specifying the Help topic for the Prompt for Criteria dialog box,\nwhich displays when the Criteria properties have been turned on for at\nleast one column and the Retrieve method is called in code.\nTypeID.SaveAs A string specifying the Help topic for the Save As dialog box, which might\ndisplay when the SaveAs method is called in code.\nTypeID.SetCrosstab\nA string specifying the Help topic for the Crosstab Definition dialog box,\nwhich might display when the CrosstabDialog method is called in code.\nTypeID.SetFilter A string specifying the Help topic for the Set Filter dialog box, which\nmight display when the SetFilter and Filter methods are called in code.\nTypeID.SetSort A string specifying the Help topic for the Set Sort dialog box, which might\ndisplay when the SetSort and Sort methods are called in code.\nTypeID.SetSortExpr\nA string specifying the Help topic for the Modify Expression dialog, which\ndisplays when the user double-clicks on a column in the Set Sort dialog.\nUsage\nIn the painter\nCan be set only in code, not in the painter.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Help.Command\ndw1.Object.DataWindow.Help.File = \"myhelp.hlp\"\ndw1.Object.DataWindow.Help.Command = 1\nsetting = dw1.Describe(\"DataWindow.Help.Command\")\ndw1.Modify(\"DataWindow.Help.File='myhelp.hlp'\")\ndw1.Modify(\"DataWindow.Help.Command=1\")\ndw1.Modify(\"DataWindow.Help.TypeID.SetFilter = 'filter_topic'\")\ndw1.Modify(\"DataWindow.Help.TypeID.Retrieve.Criteria = 'criteria_topic'\")\n"}
{"page": 321, "text": "DataWindow Object Properties\nPage 321\n3.3.107 HideGrayLine\nDescription\nShows or hides a gray line to indicate that a fixed page has been crossed when scrolling in a\nDataWindow with group headers.\nApplies to\nDataWindow control\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.HideGrayLine\nDescribe and Modify argument:\n\"DataWindow.HideGrayLine { = 'value ' }\"\nTable 3.125:\nParameter\nDescription\nvalue\n(exp) Whether a gray line displays in the Preview view and at runtime.\nValues are:\nYes -- The gray line is hidden.\nNo -- The gray line displays (default).\nValue can be a quoted DataWindow expression.\nUsage\nThis property can be set in the open event for the window in which the DataWindow\ndisplays. Note that you cannot suppress the display of repeating group headers.\nIn the painter\nSelect the DataWindow object by deselecting all controls; then set the value in the Properties\nview, General tab. This option is enabled only for DataWindows with group headers.\nExamples\ndw1.Object.DataWindow.HideGrayLine = yes\n3.3.108 HideSnaked\nDescription\nWhether the control appears only once per page when you print the DataWindow using the\nnewspaper columns format.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, Line, OLE, Oval, Picture, Rectangle,\nReport, RoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\n"}
{"page": 322, "text": "DataWindow Object Properties\nPage 322\ndw_control.Object.controlname.HideSnaked\nDescribe and Modify argument:\n\"controlname.HideSnaked { = ' value ' }\"\nTable 3.126:\nParameter\nDescription\ncontrolname The name of the control for which you want to get or set the HideSnaked\nsetting.\nvalue\n(exp) Whether the control appears once or multiple times in the printed output\nwhen the output has multiple columns (like a newspaper).\nValues are:\n1 -- The control will appear only once on a page.\n0 -- The control will appear in each column on a page.\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, HideSnaked check\nbox.\nExamples\nstring setting\nsetting = dw1.Object.graph_1.HideSnaked\ndw1.Object.text_title.HideSnaked = \"1\"\nsetting = dw1.Describe(\"graph_1.HideSnaked\")\ndw1.Modify(\"text_title.HideSnaked=1\")\n3.3.109 Horizontal_Spread\nDescription\nThe space between columns in the detail area of the DataWindow object. Horizontal_Spread\nis meaningful only when type is Grid or Tabular.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Horizontal_Spread = value ) \nTable 3.127:\nParameter\nDescription\nvalue\nAn integer specifying the space between columns in the detail area of the\nDataWindow object area in the units specified for the DataWindow\n"}
{"page": 323, "text": "DataWindow Object Properties\nPage 323\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n'Style(...Horizontal_Spread = 25 ...)', errstring)\n3.3.110 HorizontalScrollMaximum\nDescription\nThe maximum width of the scroll box of the DataWindow's horizontal scroll bar. This value\nis set by PowerBuilder based on the layout of the DataWindow object and the size of the\nDataWindow control. Use HorizontalScrollMaximum with HorizontalScrollPosition to\nsynchronize horizontal scrolling in multiple DataWindow objects.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.HorizontalScrollMaximum\nDescribe argument:\n\"DataWindow.HorizontalScrollMaximum\"\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.HorizontalScrollMaximum\nsetting = dw1.Describe(\"DataWindow.HorizontalScrollMaximum\")\n3.3.111 HorizontalScrollMaximum2\nDescription\nThe maximum width of the second scroll box when the horizontal scroll bar is split\n(HorizontalScrollSplit is greater than 0). This value is set by PowerBuilder based on the\ncontent of the DataWindow. Use HorizontalScrollMaximum2 with HorizontalScrollPosition2\nto synchronize horizontal scrolling in multiple DataWindow objects.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.HorizontalScrollMaximum2\nDescribe argument:\n\"DataWindow.HorizontalScrollMaximum2\"\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.HorizontalScrollMaximum2\nsetting = dw1.Describe(\"DataWindow.HorizontalScrollMaximum2\")\n"}
{"page": 324, "text": "DataWindow Object Properties\nPage 324\n3.3.112 HorizontalScrollPosition\nDescription\nThe position of the scroll box in the horizontal scroll bar. Use HorizontalScrollMaximum\nwith HorizontalScrollPosition to synchronize horizontal scrolling in multiple DataWindow\nobjects.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.HorizontalScrollPosition\nDescribe and Modify argument:\n\"DataWindow.HorizontalScrollPosition { = scrollvalue }\"\nTable 3.128:\nParameter\nDescription\nscrollvalue\nAn integer specifying the position of the scroll box in the horizontal scroll\nbar of the DataWindow\nExamples\nstring spos1\nspos1 = dw1.Object.DataWindow.HorizontalScrollPosition\nstring smax1, smax2, spos1, modstring\ninteger pos2\nsmax1 = dw1.Describe( &\n\"DataWindow.HorizontalScrollMaximum\")\nspos1 = dw1.Describe( &\n\"DataWindow.HorizontalScrollPosition\")\nsmax2 = dw_2.Describe( &\n\"DataWindow.HorizontalScrollMaximum\")\npos2 = Integer(spos1) * Integer(smax2) / Integer(smax1)\nmodstring = \"DataWindow.HorizontalScrollPosition=\" &\n+ String(pos2)\ndw1.Modify(modstring)\n3.3.113 HorizontalScrollPosition2\nDescription\nThe position of the scroll box in the second portion of the horizontal scroll bar when the\nscroll bar is split (HorizontalScrollSplit is greater than 0). Use HorizontalScrollMaximum2\nwith HorizontalScrollPosition2 to synchronize horizontal scrolling in multiple DataWindow\nobjects.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\n"}
{"page": 325, "text": "DataWindow Object Properties\nPage 325\ndw_control.Object.DataWindow.HorizontalScrollPosition2\nDescribe and Modify argument:\n\"DataWindow.HorizontalScrollPosition2 { = scrollvalue }\"\nTable 3.129:\nParameter\nDescription\nscrollvalue\nAn integer specifying the position of the scroll box in the second portion of a\nsplit horizontal scroll bar of the DataWindow\nExamples\nstring spos\nspos =dw1.Object.DataWindow.HorizontalScrollPosition2\ndw1.Object.DataWindow.HorizontalScrollPosition2 = 200\nspos = dw1.Describe( &\n   \"DataWindow.HorizontalScrollPosition2\")\ndw1.Modify( &\n   \"DataWindow.HorizontalScrollPosition2=200\")\n3.3.114 HorizontalScrollSplit\nDescription\nThe position of the split in the DataWindow's horizontal scroll bar. If HorizontalScrollSplit is\nzero, the scroll bar is not split.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.HorizontalScrollSplit\nDescribe and Modify argument:\n\"DataWindow.HorizontalScrollSplit { = splitdistance }\"\nTable 3.130:\nParameter\nDescription\nsplitdistance\nAn integer indicating where the split will occur in the horizontal scroll bar in\na DataWindow object in the unit of measure specified for the DataWindow\nobject\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.HorizontalScrollSplit\ndw1.Object.DataWindow.HorizontalScrollSplit = 250\nstr = dw1.Describe(\"DataWindow.HorizontalScrollSplit\")\ndw1.Modify(\"DataWindow.HorizontalScrollSplit=250\")\n3.3.115 HTextAlign\nDescription\n"}
{"page": 326, "text": "DataWindow Object Properties\nPage 326\nThe way text in a button is horizontally aligned.\nApplies to\nButton controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.buttonname.HTextAlign\nDescribe and Modify argument:\n\"buttonname.HTextAlign { = ' value ' }\"\nTable 3.131:\nParameter\nDescription\nbuttonname\nThe name of the button for which you want to align text.\nvalue\nAn integer indicating how the button text is horizontally aligned.\nValues are:\n0 -- Center\n1 -- Left\n2 -- Right\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Horizontal Alignment\noption.\nExamples\ndw1.Object.b_name.HTextAlign = \"1\"\nsetting = dw1.Describe(\"b_name.HTextAlign\")\ndw1.Modify(\"b_name.HTextAlign ='1'\")\n3.3.116 HTML.property (obsolete)\nDescription\nSettings for adding user-defined HTML syntax and hyperlinks to controls in a Web\nDataWindow.\nObsolete property\nHTML.property is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nColumn, Computed Field, Picture, and Text controls\nSyntax\nPowerBuilder dot notation:\n"}
{"page": 327, "text": "DataWindow Object Properties\nPage 327\ndw_control.Object.controlname.HTML.property\nDescribe and Modify argument:\n\"controlname.HTML.property { = ' value ' }\"\nTable 3.132:\nParameter\nDescription\ncontrolname\nThe name of the control whose HTML properties you want to get or set.\nproperty\nA property for generating HTML syntax and hyperlinks in a Web\nDataWindow. Properties and their values are listed in the table below.\nvalue\nThe value to be assigned to the property. Value can be a quoted\nDataWindow expression only where noted.\nTable 3.133:\nProperty for\nHTML\nValue\nAppendedHTMLHTML you want to append to the generated syntax for the rendering of a\nDataWindow control before the closing bracket of the HTML element for\nthat control.\nLink\n(exp) A URL that is the target of a link (HTML anchor element) generated\nfor each data item in the column or for the specified control. The text or\nuser-visible part of the link will be the data value in the column, the value\nof the computed field, the text in the Text control, or the image of a Picture\ncontrol.\nThe URL can include parameters. Other properties, such as LinkArgs, can\ncause additional parameters to be added when the HTML is generated.\nLinkArgs\nA string in the form:\nargname='exp'{ | argname = 'exp' } ... \nArgname is a page parameter to be passed to the server.\nExp is a DataWindow expression whose value is a string. It is evaluated and\nconverted using URL encoding and included in the linkargs string.\nThe evaluated LinkArgs string is appended to the HTML.Link property\nwhen HTML is generated to produce a hyperlink for each data item in a\ncolumn or other DataWindow control.\nLinkTarget\n(exp) The name of a target frame or window for the hyperlink (HTML A\nelement) specified in the Link property. The target is included using the\nTARGET attribute.\nYou can use the LinkTarget property to direct the new page to a detail\nwindow or frame in a master/detail page design.\nIf LinkTarget is null or an empty string (\"\"), then no TARGET attribute is\ngenerated.\nValueIsHTML (exp) A boolean that, if true, allows the control contents (data value in a\nread-only column, the value of a computed field that is not calculated on the\n"}
{"page": 328, "text": "DataWindow Object Properties\nPage 328\nProperty for\nHTML\nValue\n(does not\napply to\nPicture\ncontrols)\nclient, or the text in a Text control) to be generated as HTML. For XHTML,\nthe control contents must be well-formed XHTML.\nUsage\nThe Link properties are typically used to create master/detail Web pages where a link on a\ndata item jumps to a detail DataWindow for that item. LinkArgs is used to pass a retrieval\nargument identifying the particular item.\nThe AppendedHTML property is used to specify attributes and event actions to add to the\nHTML rendered for Web DataWindow controls.\nScrollToRow emulation\nThe ValueIsHTML property allows you to include standalone HTML syntax or tags in the\ngenerated Web DataWindow. You can use this feature to add horizontal rules (<HR>) and\nanchor tags (<A HREF=\"home.htm\">home</A>) to Web DataWindows. If you add row-\nspecific anchor tags, you can use the Modify method or DataWindow expressions to generate\nconditional HTML for each row.\nThe HTML generator does not validate the HTML you append to or include in controls in\nDataWindow objects. If the HTML is invalid, the DataWindow might not display correctly.\nYou must also be careful not to append an event name that is already generated for the\ncontrol as a coded client-side event.\nIn the painter\nSelect the control and set the value in the Properties view, HTML tab.\nExamples\n// EMPID and PAGE are page parameters for the \n// page server's session object\ndw1.Object.empid.HTML.Link = \"empform.html\"\ndw1.Object.empid.HTML.LinkArgs = \"EMPID = 'empid'\"\ndw1.Object.empid.HTML.LinkTarget = \"detail_win\"\ndw1.Object.empid.HTML.ValueIsHTML = \"true\"\ndw1.Object.helpicon.HTML.Link = \"help.html\"\ndw1.Object.helpicon.LinkArgs = \"PAGE = 'empform'\"\nsetting = dw1.Describe(\"DataWindow.HTML.Link\")\ndw1.Modify(\"empid.HTML.Link = 'empform.html'\")\n3.3.117 HTMLDW (obsolete)\nDescription\nSpecifies whether HTML generated for the DataWindow object provides updates and\ninteractivity.\nObsolete property\nHTMLDW is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\n"}
{"page": 329, "text": "DataWindow Object Properties\nPage 329\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.HTMLDW = value\nDescribe and Modify argument:\n\"DataWindow.HTMLDW { = ' value ' }\"\nTable 3.134:\nParameter\nDescription\nvalue\nThe value to be assigned to the property. Value can be a quoted DataWindow\nexpression.\nValues are:\n\u2022 Yes -- DataWindow HTML generation uses the HTMLGen properties.\n\u2022 No -- DataWindow HTML generation is a read-only. table as described for\nthe Data.HTMLTable property.\nUsage\nWhen HTMLDW is set to Yes, the generated HTML supports data entry and takes advantage\nof browser features that enable user interaction when used with a page server (as described\nfor the Data.HTML property). The generated HTML can be used to produce a page that\ndisplays a subset of retrieved rows and can include JavaScript code requesting additional\npages with other subsets of the retrieved rows.\nThe resulting HTML can be used as a Web DataWindow control, which is a cooperation\nbetween a server component, a page server, and a client Web browser. The server component\nproduces the HTML and the page server incorporates it into a Web page.\nThe user interacts with the DataWindow in the client browser, and actions produced by\nbuttons in the DataWindow object are sent back to the page server. The page server calls\nmethods of the server component to request processing for the data in the DataWindow\nobject, including applying actions, updating data, and scrolling to other subsets.\nTo affect the level of DataWindow features in the resulting HTML, or to produce master/\ndetail links between two Web DataWindow controls, see HTMLGen.property.\nDataWindow features that will not be rendered into HTML include:\n\u2022 Graph, OLE, and RichText presentation styles and controls.\n\u2022 Client-side expressions that include aggregate functions. Aggregate functions cannot be\nevaluated in the browser. Instead, they will be evaluated on the server and the resulting\nvalue included in the HTML.\n\u2022 Resizable and movable controls.\n"}
{"page": 330, "text": "DataWindow Object Properties\nPage 330\n\u2022 Sliding of controls to fill empty space.\n\u2022 Autosizing of height or width.\n\u2022 EditMasks for column data entry.\nIn the painter\nSelect the DataWindow object by deselecting all controls; then select or clear the Web\nDataWindow check box on the General tab in the Properties view.\nExamples\ndw1.Object.DataWindow.HTMLDW = \"yes\"\nsetting = dw1.Describe (\"DataWindow.HTMLDW\")\ndw1.Modify(\"DataWindow.HTMLDW = 'yes'\")\n3.3.118 HTMLGen.property (obsolete)\nDescription\nSettings that control the level of features incorporated into HTML generated for the\nDataWindow.\nObsolete property\nHTMLGen.property is obsolete and should not be used, because the Web\nDataWindow technology is obsolete.\nThe Web Generation tab and JavaScript Generation tab are preserved for the\nbackward compatibility only.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.HTMLGen.property\nDescribe and Modify argument:\n\"DataWindow.HTMLGen.property { = ' value ' }\"\nTable 3.135:\nParameter\nDescription\nproperty\nA property that controls how HTML is generated for a DataWindow.\nProperties and their values are listed in the table below.\nvalue\nThe value to be assigned to the property. Value can be a quoted DataWindow\nexpression where noted.\n \n"}
{"page": 331, "text": "DataWindow Object Properties\nPage 331\nTable 3.136:\nProperty for\nHTMLGen\nValue\nBrowser\n(exp) A string identifying the browser in which you want to display the\ngenerated HTML. The value should match the browser identifier part of\nthe text string that the browser specifies in the HTTP header it sends to the\nserver. This property is usually set dynamically on the server according to\nthe HTTP header returned from the client.\nRecognized strings are listed in Browser recognition.\nClientComputedFields\n(exp) Whether computed fields that reference column data are translated into\nJavaScript and computed in the client browser.\nValues are:\n\u2022 Yes -- (Default) Computed fields are translated to JavaScript where\npossible.\n\u2022 No -- Computed fields are always calculated on the server.\nRegardless of this setting, if the computed field includes aggregation\nfunctions, the computed field is calculated on the server. For more\ninformation about this and the following properties, see Client properties\nClientEvents\n(exp) Whether JavaScript code to trigger events is included in the generated\nHTML.\nValues are:\n\u2022 Yes -- (Default) JavaScript for triggering events is generated.\n\u2022 No -- JavaScript for events is not generated.\nClientFormatting(exp) Whether display formats are applied to data items that do not have\nfocus. JavaScript for formatting the data is translated from display formats\nspecified in the DataWindow painter. If you want to use regional settings,\nsuch as a period as a date separator and a comma as a decimal separator, you\nmust set ClientFormatting to Yes.\nValues are:\n\u2022 Yes -- (Default) Display formats are applied to data.\n\u2022 No -- Display formats are not used.\nClientScriptable(exp) Whether client-side JavaScript can interact with the control.\nValues are:\n\u2022 Yes -- Client-side JavaScript can call methods of the control.\n\u2022 No -- (Default) Client-side JavaScript cannot call methods.\nThis option adds approximately 20K to the size of the generated HTML.\n"}
{"page": 332, "text": "DataWindow Object Properties\nPage 332\nProperty for\nHTMLGen\nValue\nClientValidation(exp) Whether JavaScript code to perform validation of user-entered data\nis included in the generated HTML. The validation code is translated from\nvalidation expressions specified in the DataWindow painter.\nValues are:\n\u2022 Yes -- (Default) Validation expressions are generated.\n\u2022 No -- Validation expressions are not generated.\nCommonJSFile(exp) Cache file name for common JavaScript functions required by Web\nDataWindows at runtime. If you set this property, the file is downloaded to\nthe browser client once per session for use by all Web DataWindows. You\ncan prefix the file name to a URL, or you can use the URL that you set with\nthe HTMLGen.ResourceBase property. See JavaScript caching.\nDateJSFile\n(exp) Cache file name for common Web DataWindow functions that use a\ndate format. If you set this property, the file is downloaded to the browser\nclient once per session for use by all Web DataWindows. You can prefix\nthe file name with a URL, or you can use the URL that you set with the\nHTMLGen.ResourceBase property. See JavaScript caching.\nEncodeSelfLinkArgs\n(exp) A switch to disable HTML 4 encoding of the evaluated\nHTMLGen.SelfLinkArgs expressions that are generated as hidden fields.\nThe standard encoding limits character replacement to: &quot;, &amp;, &lt;,\nand &gt;. Disabling the standard encoding allows you to encode additional\ncharacters, but you must encode the argument expressions yourself.\nValues are:\n\u2022 Yes -- (Default) Encoding performed by PowerBuilder.\n\u2022 No -- Encoding not performed.\nGenerateDDDWFrames\n(exp) Specifies whether drop-down DataWindows are generated using inline\nframes (iFrames). The use of iFrames enhances the display so that the drop-\ndown DataWindow displays in a Web application as it would in a Windows\napplication. Using iFrames increases the volume of markup generated.\nValues are:\n\u2022 Yes -- (Default) Drop-down DataWindows are generated in formatted div\nelements over an iFrame.\n\u2022 No -- Drop-down DataWindows are generated in HTML select elements.\nThe use of the GenerateDDDWFrames option for drop-down DataWindows\nis supported only in the Internet Explorer browser. In other browsers, the\nHTML select element is always used.\n"}
{"page": 333, "text": "DataWindow Object Properties\nPage 333\nProperty for\nHTMLGen\nValue\nGenerateJavaScript\n(exp) Specifies whether to generate JavaScript if the browser is not\nrecognized. Keep in mind that without JavaScript, updating of data is not\navailable. Navigation links are still supported.\nValues are:\n\u2022 Yes -- (Default) JavaScript is generated even if the browser is not\nrecognized. The resulting JavaScript is portable and does not use browser-\nspecific features.\n\u2022 No -- JavaScript is not generated unless the browser is recognized\nHTMLVersion (exp) The version of HTML to generate.\nValues are:\n\u2022 3.2 -- (Default) The HTML will include style sheets, but no absolute\npositioning or regular expressions.\n\u2022 4.0 -- The HTML will include style sheets, absolute positioning, and\nregular expressions.\nIf the browser is recognized, this property is ignored and browser-specific\nHTML is generated.\nNetscapeLayers(exp) Formats the Web DataWindow for Netscape 4.0 or later using absolute\npositioning (in a manner similar to the formatting for Internet Explorer). See\nNetscapeLayers property.\nNumberJSFile (exp) Cache file name for common Web DataWindow functions that use a\nnumber format. If you set this property, the file is downloaded to the browser\nclient once per session for use by all Web DataWindows. You can prefix\nthe file name with a URL, or you can use the URL that you set with the\nHTMLGen.ResourceBase property. See JavaScript caching.\nObjectName\n(exp) A string specifying a name used in generated code for the Web\nDataWindow client control, page parameters, and client-side events.\nYou must specify a unique object name when there will be more than one\nWeb DataWindow on a Web page so that names will not conflict.\nPageSize\n(exp) The number of rows of data to include in a generated Web page. If\nthe Web page does not include all available rows, you can include button\ncontrols to navigate to the rest of the data. To include all available rows in\nthe page, specify 0 for PageSize.\nIf the HTMLDW property is set to Yes, PageSize is used.\nIf it is set to No, PageSize is ignored and all rows in the result set are\ngenerated in a single page.\nPagingMethod A value of the WebPagingMethod enumerated variable that determines how\npaging is handled.\n"}
{"page": 334, "text": "DataWindow Object Properties\nPage 334\nProperty for\nHTMLGen\nValue\nValues are:\nPostBack! (0) -- (default) The control posts back to the server to perform\npaging operations.\nCallback! (1) -- The control calls a service on the client to perform paging\noperations.\nXMLClientSide! (2) -- The control retrieves the entire XML result set and\nperforms paging operations on the client. This option is only available when\nthe XML rendering format is used.\nSee PagingMethod.\nResourceBase (exp) The URL for included JavaScript files. If you set this property, you\ndo not need to include a URL in the values for these other HTMLGen\nproperties: CommonJSFile, DateJSFile, NumberJSFile, and StringJSFile.\nSelfLink\n(exp) A string specifying the URL for the current page. It cannot include\nparameters. Parameters specified in SelfLinkArgs can be added when HTML\nis generated.\nSelfLink is used to generate URLs for navigation buttons that obtain\nadditional rows from the result set and for other buttons that reload the page,\nsuch as Update and Retrieve.\nSelfLinkArgs A string in the form:\nargname='exp'{ | argname = 'exp' } ... \nArgname is a page parameter to be passed to the server.\nExp is a DataWindow expression whose value is a string. The DataWindow\nin the server component evaluates it, converts it using URL encoding, and\nincludes it in the SelfLinkArgs string.\nThe evaluated SelfLinkArgs expressions are included in the generated\nHTML as hidden fields. The arguments supply information that the server\nneeds to render additional pages of the result set, such as retrieval arguments.\nStringJSFile\n(exp) Cache file name for common Web DataWindow functions that use a\nstring format. If you set this property, the file is downloaded to the browser\nclient once per session for use by all Web DataWindows. You can prefix\nthe file name with a URL, or you can use the URL that you set with the\nHTMLGen.ResourceBase property. See JavaScript caching.\nTabIndexBase (exp) Sets the starting tab order number for a Web DataWindow. This\nproperty is useful for a Web page with multiple Web DataWindows when\nyou can tab between columns of the DataWindows. Setting this property has\nno effect on page functionality when the page is viewed in a browser that\ndoes not support the tab index attribute. The maximum tab index allowed for\na page is 32767. See TabIndexBase property.\nUserJSFile\n(exp) Cache file name for user-defined Web DataWindow functions.\nIf you set this property, the file is downloaded to the browser client\n"}
{"page": 335, "text": "DataWindow Object Properties\nPage 335\nProperty for\nHTMLGen\nValue\nonce per session for use by all Web DataWindows. You can prefix\nthe file name to a URL, or you can use the URL that you set with the\nHTMLGen.ResourceBase property. See JavaScript caching.\nUsage\nMost of these properties are considered only when the HTMLDW property is set to Yes.\nBrowser recognition\nThe Browser and HTMLVersion properties are always considered when HTML is generated,\nregardless of the HTMLDW setting.\nBrowser identification strings are sent by the client to the server in the HTTP header. The\nserver component can assign the HTTP_USER_AGENT value from the HTTP header to the\nBrowser property. If the string specifies a browser that the DataWindow engine supports, the\nDataWindow will generate HTML optimized for that browser. Browser-specific HTML is\ngenerated only for Microsoft Internet Explorer and Netscape browsers.\nIf the browser is not recognized or not specified, then the generated HTML will use the\nHTMLVersion and GenerateJavaScript properties to decide what features to include.\nDataWindow HTML generation recognizes these browsers:\nTable 3.137:\nBrowser\nHTTP header string\nHTML features used\nNetscape\nMozilla/1.x (\nNo style sheets, no absolute positioning,\nno JavaScript.\n \nMozilla/2.x (\nMozilla/3.x (\nJavaScript.\nNo style sheets, no absolute positioning,\nno regular expressions.\n \nMozilla/4.x (\n \nStyle sheets, JavaScript, regular\nexpressions.\nNo absolute positioning.\nMicrosoft\nInternet\nExplorer\nMozilla/1.22 (compatible; MSIE 2.x; No style sheets, no absolute positioning,\nno tab order, no JavaScript.\n \nMozilla/2.0 (compatible; MSIE 3.x;\nStyle sheets, tab order, JavaScript.\nNo absolute positioning, no regular\nexpressions.\n \nMozilla/4.0 (compatible; MSIE 4.x,\nMozilla/4.0 (compatible; MSIE 5.x;\nMozilla/4.0 (compatible; MSIE 6.x;\nStyle sheets, absolute positioning, tab\norder, regular expressions.\nOpera\nMozilla/3.0 (compatible; Opera 3.x;\nJavaScript, regular expressions.\nNo style sheets, no absolute positioning.\n"}
{"page": 336, "text": "DataWindow Object Properties\nPage 336\nColumns with RichText edit style\nTo save rich text formatting in columns with the RichText edit style, the\nHTMLGen.Browser property must be set to \"Microsoft Internet Explorer\" and the\nHTMLGen.HTMLVersion property to \"4.0\".\nClient properties\nThe ClientEvents, ClientFormatting, ClientValidation, ClientComputedFields, and\nClientScriptable properties control the amount of JavaScript that is generated for the Web\nDataWindow, which impacts the size of the page that is downloaded to the browser. You can\nreduce the size of the generated HTML by setting one or more of the properties to No.\nJavaScript caching\nYou can also reduce the size of the generated HTML by setting up cache files for common\nWeb DataWindow client-side methods. You can generate these files using the JavaScript\nGeneration wizard that you launch from a button on the JavaScript Generation tab of the\nProperties view in the DataWindow painter.\nOnce you generate these files, you can set the file names as values for the CommonJSFile,\nDateJSFile, NumberJSFile, and/or StringJSFile properties. When you set these properties,\nthe methods defined in the referenced files will not be generated with the HTML in any Web\nDataWindow pages that are sent to the page server and client browser.\nWith JavaScript caching, you improve performance after the first Web DataWindow page\nis generated-as long as the browser on the client computer is configured to use cached files.\nWith caching enabled, the browser loads the JS files from the Web server into its cache, and\nthese become available for all the Web DataWindow pages in your application. There is no\nperformance gain if the browser does not find the JS files in its cache since, in this case, it\nreloads the files from the Web server.\nPagingMethod\nThe PagingMethod property determines whether the control uses the client-side script\ncallback mechanism introduced in the .NET Framework 2.0 to execute server-side code\nwithout posting and refreshing the current page.\nThe default is to post back to the server (PostBack!).\nThe Callback! option uses script callbacks to retrieve the next page of XML data. It\ncorresponds to the Microsoft GridView control's EnableSortingAndPagingCallback property,\nbut applies only to paging. Client-side sorting is handled by another mechanism.\nFor the XML rendering format, the design of the Callback! option requires that a reusable\nXSLT stylesheet be generated so that the browser can cache it. The benefit from this\nrequirement is that only the XML data for the next requested page need be returned by\nthe callback. This XML data is always trivial in size (about a 1 to 20 ratio), resulting in\nsignificant bandwidth savings. This is unlike other implementations, where the entire\npresentation is always regenerated and downloaded again from every callback.\nThe generated XSLT stylesheet is not reusable, and therefore cannot be cached by the\nbrowser, if the DataWindow layout is inconsistent page-to-page, or it does not contain a\ncomplete first page of data. In these scenarios, the Callback! option defers to PostBack! until\na stylesheet can be generated that is reusable, and can therefore be cached in the browser.\n"}
{"page": 337, "text": "DataWindow Object Properties\nPage 337\nThe XMLClientSide! option is only available with the XML rendering format. It retrieves\nthe entire XML result set and uses XSLT re-transformation of the cached stylesheet to\nperform paging on the client. This option can currently be used only if the presentation style\nis uniform from page to page. For example, it cannot handle a summary band on the last\npage.\nWhen PagingMethod is set to XMLClientSide!, InsertRow, AppendRow, and DeleteRow\nactions do not require a postback or callback to the server. However, computed fields in the\nDataWindow that are dependent on the RowCount method are not refreshed until an action\nsuch as Update or Retrieve forces a postback to the server.\nNetscapeLayers property\nEven if you set the NetscapeLayers property to true, certain functionality in a Netscape\nbrowser using absolute positioning might not be identical to the functionality available\nwith Internet Explorer. For example, you cannot tab between DataWindow columns using a\nNetscape browser on an NT machine (although you can do this using a Netscape browser on\na Solaris machine).\nTabIndexBase property\nIf you add Web DataWindows to a page that already has a Web DataWindow on it, you can\nset the TabIndexBase property for each Web DataWindow you add.\nFor a page with two Web DataWindows, setting the tab index base for the second\nDataWindow to a number greater than the tab index for the last column of the first\nDataWindow allows the user (using an Internet Explorer browser) to tab through all the\ncolumns of the first DataWindow before tabbing to the second DataWindow. Otherwise,\npressing the Tab key could cause the cursor and focus to jump from one DataWindow to\nanother instead of tabbing to the next column in the DataWindow that initially had focus.\nIn the painter\nSelect the DataWindow object by deselecting all controls; then set the values in the Properties\nview, Web Generation tab or JavaScript Generation tab. Select HTML/XHTML from the\nFormat to Configure list to display the properties.\nExamples\ndw1.Object.DataWindow.HTMLGen.HTMLVersion = \"4.0\"\nsetting = dw1.Describe (\"DataWindow.HTMLGen.Browser\")\ndw1.Modify(\"DataWindow.HTMLGen.ClientValidation = 'no'\")\ndw1.Modify(\"DataWindow.HTMLGen.PublishPath = 'C:\\Inetpub\\wwwroot\\MyWebApp\n\\generatedfiles'\")\ndw1.Modify(\"DataWindow.HTMLGen.ResourceBase = '/MyWebApp/generatedfiles'\")\nThis statement sets the XMLGen.Paging property so that the complete result set is\ndownloaded to the client and paging takes place on the client:\ndw1.Modify(\"DataWindow.HTMLGen.PagingMethod=XMLClientSide!\")\nThis statement sets the HTMLGen.PagingMethod property to use script callbacks:\ndw1.Object.DataWindow.HTMLGen.PagingMethod=1\n3.3.119 HTMLTable.property (obsolete)\nDescription\n"}
{"page": 338, "text": "DataWindow Object Properties\nPage 338\nSettings for the display of DataWindow data when displayed in HTML table format. These\nsettings simplify the transfer of data from a database to an HTML page. They are particularly\nuseful when used to create HTML pages dynamically.\nObsolete property\nHTMLTable.property is obsolete and should not be used, because the Web\nDataWindow technology is obsolete.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.HTMLTable.property\nDescribe and Modify argument:\n\"DataWindow.HTMLTable.property { = ' value ' }\"\nTable 3.138:\nParameter\nDescription\nproperty\nA property for a DataWindow to be displayed in HTML table format.\nProperties and their values are listed in the table below.\nvalue\nThe value to be assigned to the property. Value can be a quoted DataWindow\nexpression.\n \nTable 3.139:\nProperty\nfor\nHTMLTable\nValue\nBorder\n(exp) Border attribute for the HTMLTable element. The default is 1 (line\naround the table).\nCellPadding (exp) CellPadding attribute for the HTMLTable element. The default is 0.\nCellSpacing (exp) CellSpacing attribute for the HTMLTable element. The default is 0.\nGenerateCSS(exp) Controls whether the DataWindow HTMLTable property's Table\nelement contains border, cellpadding, cellspacing, nowrap, and width\nattributes. Also controls whether elements within the table contain CLASS\nreferences that control style sheet use. The default is no.\nNoWrap\n(exp) NoWrap attribute for the HTMLTable element. The default is to include\nthis attribute.\nStyleSheet\n(exp) HTML cascading style sheet generated for the DataWindow.\nWidth\nWidth attribute for the HTMLTable element. The default is 0.\nUsage\n"}
{"page": 339, "text": "DataWindow Object Properties\nPage 339\nIn the painter\nSet the value using the Properties view, HTML Table tab.\nExamples\ndw1.Object.DataWindow.HTMLTable.Border = \"2\"\nsetting = dw1.Describe (\"DataWindow.HTMLTable.StyleSheet\")\ndw1.Modify(\"DataWindow.HTMLTable.NoWrap = 'yes'\")\n3.3.120 ID\nDescription\nThe number of the column or TableBlob.\nApplies to\nColumn and TableBlob controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.ID\nDescribe and Modify argument:\n\"controlname.ID\"\nTable 3.140:\nParameter\nDescription\ncontrolname The name of the column or TableBlob for which you want the ID number\nExamples\nsetting = dw1.Object.empname.ID\nsetting = dw1.Describe(\"empname.ID\")\n3.3.121 Identity\nDescription\nWhether the database is to supply the value of the column in a newly inserted row. If so, the\ncolumn is not updatable; the column is excluded from the INSERT statement.\nNot all DBMSs support the identity property. For more information see the documentation\nfor your DBMS.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Identity\nDescribe and Modify argument:\n\"columnname.Identity { = ' value ' }\"\n"}
{"page": 340, "text": "DataWindow Object Properties\nPage 340\nTable 3.141:\nParameter\nDescription\ncolumnname A string containing the name of the column for which you want to get or set\nthe identity property.\nvalue\nA string indicating whether a column's value in a newly inserted row is\nsupplied by the DBMS:\nYes -- The DBMS will supply the value of the column in a newly inserted\nrow; the column is not updatable.\nNo -- The column is updatable.\nExamples\ndw1.Object.empid.Identity = \"yes\"\ndw1.Modify(\"empid.Identity='yes'\")\n3.3.122 Import.XML.Trace\nDescription\nSetting that determines whether import trace information is written to a log file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Import.XML.Trace\nDescribe and Modify argument:\n\"DataWindow.Import.XML.Trace { = ' value ' }\"\nTable 3.142:\nParameter\nDescription\nvalue\nWhether trace information is written to a log file.\nValues are:\n\u2022 Yes -- Trace information is written to a log file.\n\u2022 No -- Trace information is not written to a log file (default).\nUsage\nIf you want to collect trace information, this property should be set before you call\nthe ImportClipboard, ImportFile, or ImportString method to import data from an\nXML document. The trace information is appended to the file you specify using the\nImport.XML.TraceFile property. If no trace file is specified, trace information is appended to\na file named pbxmltrc.log in the current directory.\nIn the painter\n"}
{"page": 341, "text": "DataWindow Object Properties\nPage 341\nIn the Data Import tab in the Properties view for the DataWindow object, select XML from\nthe Format to Configure list, and type a file name in the Trace File Name text box.\nExamples\nThis example specifies that trace information should be written to a file called xmltrace.log in\nthe C:\\temp directory.\ndw1.Modify(\"DataWindow.Import.XML.Trace = 'yes' \")\ndw1.Modify(\"DataWindow.Import.XML.TraceFile = 'C:\\temp\\xmltrace.log' \")\nSee also\nImport.XML.TraceFile\n3.3.123 Import.XML.TraceFile\nDescription\nSpecifies the name and location of an import trace file.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Import.XML.TraceFile\nDescribe and Modify argument:\n\"DataWindow.Import.XML.TraceFile { = ' value ' }\"\nTable 3.143:\nParameter\nDescription\nvalue\nA string whose value is the name of the trace output file. If the file does not\nexist, it is created.\nUsage\nIf you want to collect trace information, the Import.XML.Trace property should be set\nbefore you call the ImportClipboard, ImportFile, or ImportString method to import data\nfrom an XML document. The trace information is appended to the file you specify using the\nImport.XML.TraceFile property. If no trace file is specified, trace information is appended to\na file named pbxmltrc.log in the current directory.\nIn the painter\nIn the Data Import tab in the Properties view for the DataWindow object, select XML from\nthe Format to Configure list, and type a file name in the Trace File Name text box.\nExamples\nThis example specifies that trace information should be written to a file called xmltrace.log in\nthe C:\\temp directory.\ndw1.Object.DataWindow.Import.XML.Trace = 'yes'\ndw1.Object.DataWindow.Import.XML.TraceFile = 'C:\\temp\\xmltrace.log'\n"}
{"page": 342, "text": "DataWindow Object Properties\nPage 342\nSee also\nImport.XML.Trace\n3.3.124 Import.XML.UseTemplate\nDescription\nSetting that optionally controls the logical structure of the XML imported from an XML file\ninto a DataWindow object using the ImportFile method.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Import.XML.UseTemplate\nDescribe and Modify argument:\n\"DataWindow.Import.XML.UseTemplate { = ' value ' }\"\nTable 3.144:\nParameter\nDescription\nvalue\n(exp) A string specifying the name of an import template previously saved in\nthe DataWindow painter for the specified DataWindow object\nUsage\nThis property should be set to specify the logical structure of the XML imported before you\ncall the ImportFile method to import data from an XML document. An import template is not\nrequired if the XML document from which data is imported corresponds to the DataWindow\ncolumn definition.\nIf an export template for a DataWindow object exists, it can be used as an import template.\nOnly the mapping of column names to element attribute names is used for import. The order\nof elements within the template is not significant, because import values are located by name\nmatch and nesting depth within the XML document. All other information in the template,\nsuch as controls and comments, is ignored.\nIn the painter\nIn the Data Import tab in the Properties view for the DataWindow object, select XML from\nthe Format to Configure list and select a template from the Use Template list.\nExamples\nThis example sets the name of the current XML import template used in dw1 to\nt_import_report. If t_import_report does not exist, the current template is not changed.\ndw1.Modify(\"DataWindow.Import.XML.UseTemplate = 't_import_report' \")\nSee also\nImport.XML.UseTemplate\n"}
{"page": 343, "text": "DataWindow Object Properties\nPage 343\n3.3.125 Initial\nDescription\nThe initial value of the column in a newly inserted row.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Initial\nDescribe and Modify argument:\n\"columnname.Initial { = ' initialvalue ' }\"\nTable 3.145:\nParameter Description\ncolumnnameA string containing the name of the column for which you want to get or set\nthe initial property.\ninitialvalue A string containing the initial value of the column. Special values include:\nEmpty -- A string of length 0\nNull -- No value\nSpaces -- All blanks\nToday -- Current date, time, or date and time\nExamples\nsetting = dw1.Object.empname.Initial\ndw1.Object.empname.Initial = \"empty\"\nsetting = dw1.Describe(\"empname.Initial\")\ndw1.Modify(\"empname.Initial='empty'\")\ndw1.Modify(\"empstatus.Initial='A'\")\n3.3.126 Ink.property\nDescription\nProperties that control the attributes of ink in an InkPicture control or a column with the\nInkEdit edit style.\nApplies to\nColumn and InkPicture controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.inkpicname.Ink.property\ndw_control.Object.columnname.Ink.property\nDescribe and Modify argument:\n"}
{"page": 344, "text": "DataWindow Object Properties\nPage 344\n\"inkpicname.Ink.property { = value }\"\n\"columnname.Ink.property { = value }\"\nTable 3.146:\nParameter\nDescription\ninkpicname\nThe name of an InkPicture control.\ncolumnname The name of a column that has the InkEdit edit style.\nproperty\nA property for the InkPicture control or InkEdit column. Properties and their\nsettings are listed in the table below.\nvalue\nThe value to be assigned to the property.\n \nTable 3.147:\nProperty for\nInk\nValue\nAntiAliased\nA drawing attribute that specifies whether the foreground and background\ncolors along the edge of the drawn ink are blended (antialiased) to make the\nstroke smoother and sharper.\nValues are:\ntrue -- The ink stroke appears smoother and sharper (default)\nfalse -- The ink stroke is not antialiased\nPainter: InkAntiAliased option.\nColor\nA drawing attribute that specifies the current ink color. The default color is\nblack.\nPainter: InkColor option.\nHeight\nA drawing attribute that specifies the height of the side of the rectangular pen\ntip in HIMETRIC units (1 HIMETRIC unit = .01mm). The default is 1.\nPainter: InkHeight option.\nIgnorePressureA drawing attribute that specifies whether the drawn ink gets wider as the\npressure of the pen tip on the tablet surface increases.\nValues are:\ntrue -- Pressure from the pen tip is ignored\nfalse -- The width of the ink increases with the pressure of the pen tip\n(default)\nPainter: IgnorePressure option.\nPentip\nA drawing attribute that specifies whether the pen tip is round or rectangular.\nValues are:\nBall (0) -- The pen tip is round (default)\nRectangle (1) -- The pen tip is rectangular\n"}
{"page": 345, "text": "DataWindow Object Properties\nPage 345\nProperty for\nInk\nValue\nPainter: PenTip option.\nTransparency A drawing attribute that specifies the transparency of drawn ink. The range of\nvalues is from 0 for totally opaque (the default) to 255 for totally transparent.\nPainter: InkTransparency option.\nWidth\nA drawing attribute that specifies the width of the side of the rectangular pen\ntip in HIMETRIC units (1 HIMETRIC unit = .01mm). The default is 53.\nPainter: InkWidth option.\nUsage\nIn the painter\nSelect the control and set values in the Properties view, Ink or InkPicture tab, InkAttributes\nsection.\nExamples\ndw1.Object.inkpic1.Ink.Antialiased = true\nli_color = dw1.Describe(\"emp_status.Ink.Color\")\nSee also\nInkEdit.property\nInkPic.property\n3.3.127 InkEdit.property\nDescription\nProperties that control the behavior of a column with the InkEdit edit style.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.InkEdit.property\nDescribe and Modify argument:\n\"columnname.InkEdit.property { = value }\"\nTable 3.148:\nParameter\nDescription\ncolumnname The name of a column that has the InkEdit edit style.\nproperty\nA property for the InkEdit column. Properties and their settings are listed in\nthe table below.\nvalue\nThe value to be assigned to the property.\n"}
{"page": 346, "text": "DataWindow Object Properties\nPage 346\n \nTable 3.149:\nProperty\nfor InkEdit\nValue\nAutoSelect\nWhether to select the contents of the edit control automatically when it\nreceives focus. Values are:\nYes -- Select automatically (default).\nNo -- Do not select automatically.\nYou can use AutoSelect with SyntaxFromSql. The setting applies to all the\ncolumns in the generated syntax.\nPainter: Auto Selection option.\nDisplayOnly Specifies whether the text is display-only and cannot be changed by the user.\nValues are:\ntrue -- Text cannot be changed by user.\nfalse -- Text can be changed by user (default).\nPainter: Display Only option.\nFactoid\nSpecifies a context for ink recognition. Set this property if the input data is\nof a known type, such as a date or Web address, to constrain the search for\na recognition result. Possible values include digit, e-mail, Web, date, time,\nnumber, currency, percent, and telephone. For a list of values, see the table\nthat follows.\nPainter: Factoid option.\nFocusRectangle\nWhether a dotted rectangle (the focus rectangle) will surround the current row\nof the column when the column has focus. Values are:\nYes -- (Default) Display the focus rectangle.\nNo -- Do not display the focus rectangle (default).\nYou can use FocusRectangle with SyntaxFromSql. The setting applies to all\nthe columns in the generated syntax.\nPainter: Show Focus Rectangle option.\nHScrollbar\nWhether a horizontal scroll bar displays in the edit control. Values are:\nYes -- Display the horizontal scroll bar.\nNo -- Do not display the horizontal scroll bar (default).\nPainter: Horizontal Scroll Bar option.\nInkMode\nSpecifies whether ink collection is enabled and whether ink only or ink and\ngestures are collected. Values are:\nInkDisabled (0) -- Ink collection is disabled.\nCollectInkOnly (1) -- Only ink is collected.\nCollectInkAndGestures (2) -- Ink and gestures are collected (default).\n"}
{"page": 347, "text": "DataWindow Object Properties\nPage 347\nProperty\nfor InkEdit\nValue\nPainter: InkMode option.\nLimit\nA number specifying the maximum number of characters (0 to 32,767) that the\nuser can enter. 0 means unlimited.\nPainter: Limit option.\nNilIsNull\nWhether to set the data value of the InkEdit to null when the user leaves the\nedit box blank. Values are:\nYes -- Make the Empty string null.\nNo -- Do not make the empty string null (default).\nPainter: Empty String is null option.\nRecognitionTimer\nSpecifies the time period in milliseconds between the last ink stroke and the\nstart of text recognition. The default is 2000 (two seconds).\nPainter: RecognitionTimer option.\nRequired\nWhether the column is required. Values are:\nYes -- Required.\nNo -- (Default) Not required.\nPainter: Required option.\nUseMouseForInput\nSpecifies whether the mouse can be used for input on a Tablet PC. Values are:\ntrue -- The mouse can be used for input\nfalse -- The mouse cannot be used for input (default)\nPainter: UseMouseForInput option.\nVScrollbar\nWhether a vertical scroll bar displays in the edit control. Values are:\nYes -- Display a vertical scroll bar.\nNo -- Do not display a vertical scroll bar (default).\nPainter: Vertical Scroll Bar option.\nUsage\nThe following values for Factoid are available. After the Default and None factoids, the drop-\ndown list in the Properties view displays factoids for special formats in alphabetical order,\nfollowed by single-character factoids and Asian-language factoids. You can set multiple\nfactoids by separating them with the pipe ( | ) character.\nTable 3.150:\nFactoid\nDescription\nDefault\nReturns recognizer to the default setting. For Western languages, the default\nsetting includes the user and system dictionaries, various punctuation marks,\nand the Web and Number factoids. For Eastern languages, the default setting\nincludes all characters supported by the recognizer.\nNone\nDisables all factoids, dictionaries, and the language model.\n"}
{"page": 348, "text": "DataWindow Object Properties\nPage 348\nFactoid\nDescription\nCurrency\nCurrency in pounds, dollars, euros, and yen.\nDate\nDates written in English; for example 8/19/2005, Aug 19, 2005, or Friday,\nAugust 19, 2005.\nE-mail\nE-mail addresses.\nFilename\nWindows file name paths. The name cannot include the following\ncharacters: / : \" < > |\nNumber\nNumeric values, including ordinals, decimals, separators, common suffixes,\nand mathematical symbols. This factoid includes the Currency and Time\nfactoids.\nPercent\nA number followed by the percent symbol.\nPostal Code Postal codes as written in English, for example 01730 or CT17 9PW.\nSystem\nDictionary\nWords in the system dictionary only.\nTelephone\nTelephone numbers as written in English, for example (555) 555 5555 or +44\n1234 123456.\nTime\nTimes as written in English, for example 15:05 or 3:05 pm.\nWeb\nVarious URL formats.\nWord List\nWords on the word list associated with the recognizer context only.\nDigit\nA single digit (0-9).\nOne Char\nA single ANSI character.\nUpper Char A single uppercase character.\nIn addition, the following Asian-language factoids are available:\nTable 3.151:\nBopomofo\nKanji Common\nHangul Common\nKatakana\nHiragana\nKorean Common\nJamo\nSimplified Chinese Common\nJapanese Common\nTraditional Chinese Common\nIn the painter\nSelect the control and set values in the Properties view, Ink tab for properties relating to Ink,\nor the Edit tab for properties common to other edit styles. The Style Type on the Edit tab\nmust be set to InkEdit.\nExamples\nstring str\nstr = dw1.Object.emp_name.InkEdit.Factoid\ndw1.Object.emp_name.InkEdit.Factoid = EMAIL\nstr = dw1.Describe(\"emp_bd.InkEdit.Factoid\")\ndw1.Modify(\"emp_bd.InkEdit.Factoid=EMAIL\")\nstring str\n"}
{"page": 349, "text": "DataWindow Object Properties\nPage 349\nstr = dw1.Object.emp_name.InkEdit.AutoHScroll\ndw1.Object.emp_name.InkEdit.Required = \"no\"\nSee also\nInk.property\n3.3.128 InkPic.property\nDescription\nProperties that control the behavior of ink in an InkPicture control.\nApplies to\nInkPicture controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.inkpicname.InkPic.property\nDescribe and Modify argument:\n\"inkpicname.InkPic.property { = value }\"\nTable 3.152:\nParameter\nDescription\ninkpicname\nThe name of an InkPicture control.\nproperty\nA property for the InkPicture control. Properties and their settings are listed in\nthe table below.\nvalue\nThe value to be assigned to the property.\n \nTable 3.153:\nProperty\nfor InkPic\nValue\nAutoErase\nSpecifies whether the auto erase feature available on some styluses is turned\non. Values are:\ntrue -- AutoErase is turned on.\nfalse -- AutoErase is turned off (default).\nPainter: AutoErase option.\nBackColor\nSpecifies the numeric value of the background color: -2 to 16,777,215. For\nmore information about color, see the RGB function.\nPainter: BackColor option.\nCollectionModeSpecifies whether ink only, gestures only, or ink and gestures are collected.\nValues are:\nInkOnly (0) -- Only ink is collected (default).\nGestureOnly (1) -- Only gestures are collected.\nInkAndGesture (2) -- Ink and gestures are collected.\n"}
{"page": 350, "text": "DataWindow Object Properties\nPage 350\nProperty\nfor InkPic\nValue\nPainter: CollectionMode option.\nDynamicRendering\nSpecifies whether the ink is rendered (displayed in the control) as it is drawn.\nThe default is true.\nPainter: DynamicRendering option.\nEditMode\nSpecifies whether the editing mode of the control is set for drawing, deleting,\nor selecting ink. Values are:\nInkMode (0) -- Ink is drawn (default).\nDeleteMode (1) -- Ink is deleted.\nSelectMode (2) -- Ink is selected.\nPainter: EditMode option.\nEraserMode\nSpecifies whether ink is removed by stroke or point. Values are:\nStrokeErase (0) -- The entire ink stroke under the stylus is removed (default).\nPointErase (1) -- Only the ink under the stylus is removed.\nPainter: EraserMode option.\nEraserWidth Specifies the width of the eraser pen tip in HIMETRIC units (1 HIMETRIC\nunit = .01mm). The default is 212. This property applies when EditMode is\nset to DeleteMode and EraserMode is set to PointErase.\nPainter: EraserWidth option.\nHighContrastInk\nSpecifies whether ink is rendered in a single color when the system is in high\ncontrast mode and draws the selection rectangle and handles in high contrast.\nValues are:\ntrue -- Ink is rendered in a single color in high contrast mode (default).\nfalse -- Ink is not rendered in a single color in high contrast mode.\nPainter: HighContrastInk option.\nInkEnabled\nSpecifies whether the InkPicture control collects pen input. Values are:\ntrue -- The control collects pen input (default).\nfalse -- The control does not collect pen input and no pen-related events fire.\nPainter: InkEnabled option.\nMarginX\nSpecifies the x-axis margin around the control in PowerBuilder units. The\ndefault value is 0.\nPainter: MarginX option.\nMarginY\nSpecifies the y-axis margin around the control in PowerBuilder units. The\ndefault value is 0.\nPainter: MarginY option.\nPictureSizeMode\nSpecifies how the picture is displayed in the control. Values are:\n"}
{"page": 351, "text": "DataWindow Object Properties\nPage 351\nProperty\nfor InkPic\nValue\nCenter Image (1) -- The picture is centered in the control.\nNormal (2) -- The picture is displayed in the upper-left corner of the control\nand any part of the picture that does not fit in the control is clipped (default).\nStretch (3) -- The picture is stretched to fill the control.\nPainter: PictureSizeMode option.\nUsage\nIn the painter\nSelect the control and set values in the Properties view, InkPicture tab.\nExamples\ndw1.Object.inkpic1.InkPic.InkEnabled = true\nli_color = dw1.Describe(\"inkpic1.InkPic.BackColor\")\nSee also\nInk.property\n3.3.129 Invert\nDescription\nThe way the colors in a Picture control are displayed, either inverted or normal.\nApplies to\nPicture controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.bitmapname.Invert\nDescribe and Modify argument:\n\"bitmapname.Invert { = ' number ' }\"\nTable 3.154:\nParameter\nDescription\nbitmapname The name of the Picture control in the DataWindow for which you want to\ninvert the colors.\nnumber\n(exp) A boolean number indicating whether the colors of the picture will\ndisplay inverted. Values are:\n0 -- (Default) No; do not invert the picture's colors.\n1 -- Yes; display the picture with colors inverted.\n"}
{"page": 352, "text": "DataWindow Object Properties\nPage 352\nParameter\nDescription\nNumber can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Invert Image check\nbox.\nExamples\nstring setting\nsetting = dw1.Object.bitmap_1.Invert\ndw1.Object.bitmap_1.Invert=\"0~tIf(empstatus='A',0,1)\"\nsetting = dw1.Describe(\"bitmap_1.Invert\")\ndw1.Modify(  &\n\"bitmap_1.Invert='0~tIf(empstatus=~~~'A~~~',0,1)'\")\n3.3.130 JSGen.property (obsolete)\nDescription\nSettings that specify the physical path to which generated JavaScript is published and the\nURL indicating the location of the generated JavaScript.\nObsolete property\nJSGen.property is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nThe Web Generation tab and JavaScript Generation tab are preserved for the\nbackward compatibility only.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.JSGen.property\nDescribe and Modify argument:\n\"DataWindow.JSGen.property { = ' value ' }\"\nTable 3.155:\nParameter\nDescription\nproperty\nOne of the following:\n\u2022 PublishPath\n\u2022 ResourceBase\n"}
{"page": 353, "text": "DataWindow Object Properties\nPage 353\nParameter\nDescription\nvalue\n(exp) PublishPath -- A string that specifies the physical path of the website\nfolder to which PowerBuilder publishes the generated JavaScript.\n(exp) ResourceBase -- A string that specifies the URL of the generated\nJavaScript for performing client-side XSLT transformation and instantiation\nof client-side data.\nUsage\nThe PublishPath folder must correspond to the URL specified in the ResourceBase property.\nAt runtime, after PowerBuilder generates JavaScript to the PublishPath folder, it includes it\nin the final XHTML page by referencing it with the value of the ResourceBase property in a\n<script> element.\nIn the painter\nIn the JavaScript Generation tab in the Properties view for the DataWindow object, select\nXHTML from the Format to Configure list and specify the ResourceBase and Publish Path\nlocations.\nExamples\nThese statements set the JSGen.ResourceBase and JSGen.PublishPath properties:\ndw1.Object.DataWindow.JSGen.ResourceBase= &\n   'http://www.myserver.com/xmlsource'\ndw1.Object.DataWindow.JSGen.PublishPath= &\n   'C:\\work\\outputfiles\\xmlsource'\n3.3.131 Key\nDescription\nWhether the column is part of the database table's primary key.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Key\nDescribe and Modify argument:\n\"columnname.Key { = value }\"\nTable 3.156:\nParameter\nDescription\ncolumnname The column for which you want to get or set primary key status.\nvalue\nWhether the column is part of the primary key. Values are:\nYes -- The column is part of the primary key\n"}
{"page": 354, "text": "DataWindow Object Properties\nPage 354\nParameter\nDescription\nNo -- The column is not part of the key\nUsage\nIn the painter\nSet the value using the Rows menu, Update Properties.\nExamples\nstring setting\nsetting = dw1.Object.empid.Key\ndw1.Object.empid.Key = \"Yes\"\nsetting = dw1.Describe(\"empid.Key\")\ndw1.Modify(\"empid.Key=Yes\")\n3.3.132 KeyClause\nDescription\nAn expression to be used as the key clause when retrieving the blob.\nApplies to\nTableBlob controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.tblobname.KeyClause\nDescribe and Modify argument:\n\"tblobname.KeyClause { = ' keyclause ' }\"\nTable 3.157:\nParameter Description\ntblobname\nThe name of the TableBlob for which you want to specify a key clause.\nkeyclause\n(exp) A string that will be built into a key clause using the substitutions\nprovided. The key clause can be any valid WHERE clause. Keyclause can be a\nquoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Definition tab, Key Clause option.\nExamples\nWith the following setting, the value of key_col will be put in col2 when PowerBuilder\nconstructs the WHERE clause for the SELECTBLOB statement:\ndw1.Modify(blob_1.KeyClause='Key_col = :col2'\")\n"}
{"page": 355, "text": "DataWindow Object Properties\nPage 355\n3.3.133 Label.property\nDescription\nSettings for a DataWindow whose presentation style is Label.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Label.property\nDescribe and Modify argument:\n\"DataWindow.Label.property { = value }\"\nSyntaxFromSql:\nDataWindow(Label.property = value)\nTable 3.158:\nParameter\nDescription\nproperty\nA property for the Label presentation style. Properties and their settings are\nlisted in the table below.\nvalue\nThe value to be assigned to the property. For Label properties, value cannot\nbe a DataWindow expression.\nTable 3.159:\nProperty for\nLabel\nValue\nColumns\nAn integer indicating the number of columns of labels on a sheet.\nPainter: Label group, Labels Across option.\nColumns.Spacing\nAn integer indicating the space between columns of labels in the units\nspecified for the DataWindow object.\nPainter: Arrangement group, Between Columns option.\nEllipse_HeightAn integer specifying the height of the rounded corners of a RoundRectangle\nlabel. This property is not valid for any other label shape. This value uses the\nsame unit of measure specified for the DataWindow object.\nPainter: Not set in painter.\nEllipse_WidthAn integer specifying the width of the rounded corners of a RoundRectangle\nlabel. This property is not valid for any other label shape. This value uses the\nsame unit of measure specified for the DataWindow object.\nPainter: Not set in painter.\nHeight\nAn integer specifying the height of a label in the units specified for the\nDataWindow object.\n"}
{"page": 356, "text": "DataWindow Object Properties\nPage 356\nProperty for\nLabel\nValue\nPainter: Label group, Height option.\nName\nA string containing the name of a label.\nPainter: Predefined Label option.\nRows\nAn integer indicating the number of rows of labels on a sheet.\nPainter: Label group, Labels Down option.\nRows.SpacingAn integer indicating the space between rows of labels on a sheet in the units\nspecified for the DataWindow object.\nPainter: Arrangement group, Between Rows option.\nShape\nA string specifying the shape of a label.\nValues are:\nRectangle\nRoundRectangle\nOval\nPainter: Not set in painter.\nSheet\n(Describe only) Whether the paper is sheet fed or continuous.\nValues are:\nYes -- Sheet fed\nNo -- Continuous\nPainter: Arrangement group, Paper option.\nTopDown\n(Describe only) Whether the labels will be printed from the top to the bottom\nor across the page.\nValues are:\nNo -- Print labels across the page.\nYes -- Print labels from top to bottom.\nPainter: Arrangement group, Arrange option.\nWidth\nAn integer specifying the width of a label in the units specified for the\nDataWindow object.\nPainter: Label group, Width option.\nUsage\nIn the painter\nSelect the DataWindow object by deselecting all controls; then set the value in the Properties\nview, General tab (when presentation style is Label).\nExamples\nstring setting\n"}
{"page": 357, "text": "DataWindow Object Properties\nPage 357\nsetting = dw1.Object.DataWindow.Label.Sheet\ndw1.Object.DataWindow.Label.Width = 250\nsetting = dw1.Describe(\"DataWindow.Label.Sheet\")\ndw1.Modify(\"DataWindow.Label.Width=250\")\ndw1.Modify(\"DataWindow.Label.Height=150\")\ndw1.Modify(\"DataWindow.Label.Columns=2\")\ndw1.Modify(\"DataWindow.Label.Width=250\")\ndw1.Modify(\"DataWindow.Label.Name='Address1'\")\n3.3.134 LabelDispAttr.fontproperty\nSee DispAttr.fontproperty.\n3.3.135 LastRowOnPage\nDescription\nThe last row currently visible in the DataWindow.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.LastRowOnPage\nDescribe argument:\n\"DataWindow.LastRowOnPage\"\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.LastRowOnPage\nsetting = dw1.Describe(\"DataWindow.LastRowOnPage\")\n3.3.136 Left_Margin\nDescription\nThe size of the left margin of the DataWindow object.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Left_Margin = value )\nTable 3.160:\nParameter\nDescription\nvalue\nAn integer specifying the size of the left margin in the units specified for the\nDataWindow\n"}
{"page": 358, "text": "DataWindow Object Properties\nPage 358\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n'Style( ... LeftMargin = 500 ... )', errstring)\n3.3.137 Legend\nDescription\nThe location of the legend in a Graph control in a DataWindow.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.Legend\nDescribe and Modify argument:\n\"graphname.Legend { = ' value ' }\"\nTable 3.161:\nParameter\nDescription\ngraphname\nThe name of the graph control for which you want to specify the location of\nthe legend.\nvalue\n(exp) A number indicating the location of the legend of a graph.\nValues are:\n0 -- None\n1 -- Left\n2 -- Right\n3 -- Top\n4 -- Bottom\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Legend option\n(applicable when the graph has more than one series).\nExamples\nstring setting\nsetting = dw1.Object.graph_1.Legend\ndw1.Object.graph_1.Legend = 2\nsetting = dw1.Describe(\"graph_1.Legend\")\ndw1.Modify(\"graph_1.Legend=2\")\n"}
{"page": 359, "text": "DataWindow Object Properties\nPage 359\ndw1.Modify(\"graph_1.Legend='2~tIf(dept_id=200,0,2)'\")\n3.3.138 Legend.DispAttr.fontproperty\nSee DispAttr.fontproperty.\n3.3.139 Level\nDescription\nThe grouping level.\nLevel is used in DataWindow syntax only for the Create method.\nApplies to\nGroup keywords\nSyntax\nGroup ( BY( colnum1, colnum2, ... ) ... Level = n ... )\n3.3.140 LineRemove\nDescription\n(RichText presentation style only) Whether the line of text that contains the input field for the\ncolumn or computed field is removed when the input field is empty. LineRemove is similar\nto the SlideUp property for controls in other presentation styles.\nApplies to\nColumn and Computed Field controls in the RichText presentation style\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.LineRemove\nDescribe and Modify argument:\n\"controlname.LineRemove { = ' value ' }\"\nTable 3.162:\nParameter\nDescription\ncontrolname The name of the column or computed field whose line of text you want\nremoved when the input field is empty.\nvalue\n(exp) Whether the line of text is removed so that the rest of the text slides up\nwhen the input field for controlname is empty. Values are:\n\u2022 Yes -- The line of text will be removed when the input field is empty.\n\u2022 No -- The line of text will not be removed.\nValue can be a quoted DataWindow expression.\n"}
{"page": 360, "text": "DataWindow Object Properties\nPage 360\nExamples\nstring setting\nsetting = dw1.Object.emp_street2.LineRemove\ndw1.Object.emp_street2.LineRemove = true\nsetting = dw1.Describe(\"emp_street2.LineRemove\")\ndw1.Modify(\"emp_street2.LineRemove=yes\")\n3.3.141 LinkUpdateOptions\nDescription\nWhen the OLE Object control is linked, the method for updating the link information. If the\nuser tries to activate the OLE object and PowerBuilder cannot find the linked file, which\nbreaks the link, LinkUpdateOptions controls whether PowerBuilder automatically displays a\ndialog box prompting the user to find the file. If you turn off the automatic dialog box, you\ncan reestablish the link by calling the LinkTo or LinkUpdateDialog in code.\nApplies to\nOLE Object controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.olecontrolname.LinkUpdateOptions\nDescribe and Modify argument:\n\"olecontrolname.LinkUpdateOptions { = 'updatetype ' }\"\nTable 3.163:\nParameter\nDescription\nolecontrolnameThe name of the OLE Object control for which you want to get or set the link\nupdate method.\nupdatetype\nA number specifying how broken links will be reestablished. Updatetype can\nbe a quoted DataWindow expression.\nValues are:\n\u2022 LinkUpdateAutomatic!\n\u2022 LinkUpdateManual!\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Options tab, Link Update option.\nExamples\nstring ls_data\nls_data = dw1.Object.ole_report.LinkUpdateOptions\ndw1.Object.ole_report.LinkUpdateOptions = 0\nls_data = dw1.Describe(\"ole_report.LinkUpdateOptions\")\n"}
{"page": 361, "text": "DataWindow Object Properties\nPage 361\ndw1.Modify(\"ole_report.LinkUpdateOptions='0'\")\n3.3.142 Message.Title\nDescription\nThe title of the dialog box that displays when an error occurs.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Message.Title\nDescribe and Modify argument:\n\"DataWindow.Message.Title { = ' titlestring ' }\"\nSyntaxFromSql:\nDataWindow(Message.Title = ' titlestring ' )\nTable 3.164:\nParameter\nDescription\ntitlestring\nA string containing the title for the title bar of the DataWindow dialog box\nthat displays when an error occurs\nExamples\nsetting = dw1.Object.DataWindow.Message.Title\ndw1.Object.DataWindow.Message.Title = \"Mistake!\"\nsetting = dw1.Describe(\"DataWindow.Message.Title\")\ndw1.Modify(\"DataWindow.Message.Title='Bad, Bad, Bad'\")\nSQLCA.SyntaxFromSQL(sql_syntax, &\n\"Style(...) &\nDataWindow(Message.Title='Sales Report' ...) ...\", &\nls_Errors)\n3.3.143 Moveable\nDescription\nWhether the specified control in the DataWindow can be moved at runtime. Moveable\ncontrols should be in the DataWindow's foreground.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, Line, OLE, Oval, Picture, Rectangle,\nReport, RoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Moveable\n"}
{"page": 362, "text": "DataWindow Object Properties\nPage 362\nDescribe and Modify argument:\n\"controlname.Moveable { = number }\"\nTable 3.165:\nParameter\nDescription\ncontrolname The control within the DataWindow for which you want to get or set the\nMoveable property that governs whether the user can move the control\nnumber\nA boolean number specifying whether the control is movable.\nValues are:\n0 -- False, the control is not movable.\n1 -- True, the control is movable.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab.\nExamples\nstring setting\nsetting = dw1.Object.bitmap_1.Moveable\ndw1.Object.bitmap_1.Moveable = 1\nsetting = dw1.Describe(\"bitmap_1.Moveable\")\ndw1.Modify(\"bitmap_1.Moveable=1\")\n3.3.144 Multiline\nDescription\n(RichText presentation style) Whether the column or computed field can contain multiple\nlines. Multiline is effective only when Width.Autosize is set to No.\nApplies to\nColumn and Computed Field controls in the RichText presentation style\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Multiline\nDescribe and Modify argument:\n\"controlname.Multiline { = ' value ' }\"\nTable 3.166:\nParameter\nDescription\ncontrolname The name of the column or computed field that will contain multiple lines.\nvalue\n(exp) Whether the input field can contain multiline lines. Values are:\n\u2022 Yes -- The input field can contain multiple lines.\n"}
{"page": 363, "text": "DataWindow Object Properties\nPage 363\nParameter\nDescription\n\u2022 No -- The input field cannot contain multiple lines.\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Input Field or Compute tab,\nMultiLine option.\nTo display the property sheet, click the input field (column or computed field) to select it.\nThen right-click and select Properties from the pop-up menu.\nExamples\nstring setting\nsetting = dw1.Object.emp_street2.Multiline\ndw1.Object.emp_street2.Multiline = true\nsetting = dw1.Describe(\"emp_street2.Multiline\")\ndw1.Modify(\"emp_street2.Multiline=yes\")\n3.3.145 Name\nDescription\nThe name of the control.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, InkPicture, Line, OLE, Oval, Picture,\nRectangle, Report, RoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Name\nDescribe argument:\n\"controlname.Name\"\nTable 3.167:\nParameter\nDescription\ncontrolname The control for which you want the name. For columns, you can specify the\ncolumn number preceded by #.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Name option.\nExamples\nsetting = dw1.Object.#4.Name\nsetting = dw1.Describe(\"#4.Name\")\n"}
{"page": 364, "text": "DataWindow Object Properties\nPage 364\n3.3.146 Nest_Arguments\nDescription\nThe values for the retrieval arguments of a nested report. The number of values in the list\nshould match the number of retrieval arguments defined for the nested report.\nApplies to\nReport controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.reportname.Nest_Arguments\nDescribe and Modify argument:\n\"reportname.Nest_Arguments { = list } \"\nTable 3.168:\nParameter\nDescription\nreportname\nThe name of the nested report for which you want to supply retrieval\nargument values.\nlist\nA list of values for the retrieval arguments of the nested report. The format\nfor the list is:\n( (\"arg1\") {,(\"arg2\") {,(\"arg3\") {,... } } } )\nUsage\nThe list is not a quoted string. It is surrounded by parentheses, and each argument value\nwithin the list is parenthesized, surrounded with double quotes, and separated by commas. If\nan argument is a literal string, use single quotes within the double quotes.\nWhen changing the values for the retrieval arguments, you must supply values for all the\nretrieval arguments defined for the report. If you specify fewer or more arguments, an error\nwill occur at runtime when the DataWindow retrieves its data.\nTo remove the report's retrieval arguments, specify empty parentheses. If no arguments are\nspecified, the user is prompted for the values at runtime.\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nExamples\nsetting = dw1.Object.rpt_1.Nest_Arguments\ndw1.Object.rpt_1.Nest_Arguments = &\n\"((~\"cust_id~\"),(~\"'Eastern'~\"))\"\nsetting = dw1.Describe(\"rpt_1.Nest_Arguments\")\ndw1.Modify(\"rpt_1.Nest_Arguments\" \"=((~\"cust_id~\"), (~\"'Eastern'~\"))\")\ndw1.Modify(\"rpt_1.Nest_Arguments=()\")\n3.3.147 Nested\nDescription\n"}
{"page": 365, "text": "DataWindow Object Properties\nPage 365\nWhether the DataWindow contains nested DataWindows. Values returned are Yes or No.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Nested\nDescribe argument:\n\"DataWindow.Nested\"\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Nested\nsetting = dw1.Describe(\"DataWindow.Nested\")\n3.3.148 NewPage (Group keywords)\nDescription\nWhether a change in the value of a group column causes a page break.\nApplies to\nGroup keywords\nSyntax\nSyntaxFromSql:\nGroup ( colnum1, colnum2 NewPage )\nExamples\n SQLCA.SyntaxFromSQL(sql_syntax, &\n\"Style(Type=Group) \" + &\n\"Group(#3 NewPage ResetPageCount)\", &\nls_Errors)\n3.3.149 NewPage (Report controls)\nDescription\nWhether a nested report starts on a new page. NewPage applies only to reports in a composite\nDataWindow. Note that if the Trail_Footer property of the preceding report is set to No, the\ncurrent report will be forced to begin on a new page regardless of the NewPage value.\nApplies to\nReport controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.reportname.NewPage\nDescribe and Modify argument:\n"}
{"page": 366, "text": "DataWindow Object Properties\nPage 366\n\"reportname.NewPage { = value } \"\nTable 3.169:\nParameter\nDescription\nreportname\nThe name of the report control for which you want to get or set the\nNewPage property.\nvalue\nWhether the report begins a new page.\nValues are:\nYes -- Start the report on a new page.\nNo -- Do not start the report on a new page.\nUsage\nIn the painter\nSelect the Report control in the Composite presentation style and set the value in the\nProperties view, General tab, New Page check box.\nExamples\nstring newpage_setting\nnewpage_setting = dw1.Object.rpt_1.NewPage\ndw1.Object.rpt_1.NewPage = \"Yes\"\nnewpage_setting = dw1.Describe(\"rpt_1.NewPage\")\ndw1.Modify(\"rpt_1.NewPage=Yes\")\n3.3.150 NoUserPrompt\nDescription\nDetermines whether message boxes are displayed to the user during DataWindow processing.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.NoUserPrompt\nDescribe and Modify argument:\n\"DataWindow.NoUserPrompt { = ' value ' }\"\nTable 3.170:\nParameter\nDescription\nvalue\nA string specifying whether any message box requiring user intervention\ndisplays during DataWindow processing.\nValues are:\nYes -- No message box displays.\n"}
{"page": 367, "text": "DataWindow Object Properties\nPage 367\nParameter\nDescription\nNo -- (Default) Message boxes display when invoked during DataWindow\nprocessing.\nUsage\nSet the NoUserPrompt property to yes if the DataWindow is to be used in a batch process\nwhen there is no possibility of end-user intervention. Dialog boxes you can prevent from\ndisplaying include the Error, Print, Retrieve, CrossTab, Expression, SaveAs, Import, Query,\nRichText, Filter, and Sort dialog boxes.\nExamples\ndw1.Object.DataWindow.NoUserPrompt = \"yes\"\ndw1.Modify(\"DataWindow.NoUserPrompt=no\")\n3.3.151 Objects\nDescription\nA list of the controls in the DataWindow object. The names are returned as a tab-separated\nlist.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Objects\nDescribe argument:\n\"DataWindow.Objects\"\nExamples\nsetting = dw1.Describe(\"DataWindow.Objects\")\n3.3.152 OLE.Client.property\nDescription\nSettings that some OLE server applications use to identify the client's information. The\nproperty values can be used to construct the title of the server window.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.OLE.Client.property\nDescribe and Modify argument:\n"}
{"page": 368, "text": "DataWindow Object Properties\nPage 368\n\"DataWindow.OLE.Client.property { = ' value ' }\"\nTable 3.171:\nParameter\nDescription\nproperty\nAn OLE client property, as shown in the table below.\nvalue\nValues for the properties are shown in the table below. Value cannot be a\nDataWindow expression.\n \nTable 3.172:\nProperty\nfor\nOLE.Client\nValue\nClass\nThe client class for the DataWindow. The default is DataWindow.\nName\nThe client name for the DataWindow. The default is Untitled.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Definition tab.\nExamples\nls_data = dw1.Object.DataWindow.OLE.Client.Class\ndw1.Object.DataWindow.OLE.Client.Class = \"PB\"\nls_data = dw1.Describe(\"DataWindow.OLE.Client.Class\")\ndw1.Modify(\"DataWindow.OLE.Client.Class = 'PB'\")\n3.3.153 OLEClass\nDescription\nThe name of the OLE class for the TableBlob control.\nApplies to\nTableBlob controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.tblobname.OLEClass\nDescribe and Modify argument:\n\"tblobname.OLEClass { = 'oleclassname ' }\"\nTable 3.173:\nParameter\nDescription\ntblobname\nThe TableBlob column for which you want to get or set the class of server\napplication.\n"}
{"page": 369, "text": "DataWindow Object Properties\nPage 369\nParameter\nDescription\noleclassname (exp) A string specifying a class of an OLE server application installed on\nyour system. Oleclassname is quoted and can be a DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Definition tab, OLE Class:\nDescription option.\nExamples\nsetting = dw1.Object.blob_1.OLEClass\ndw1.Object.blob_1.OLEClass = 'Word.Document'\nsetting = dw1.Describe(\"blob_1.OLEClass\")\ndw1.Modify(\"blob_1.OLEClass='Word.Document'\")\n3.3.154 OriginalSize\nDescription\nThe property specifies whether the width and height of the picture are set to their original\nvalues.\nApplies to\nButton and Bitmap controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.OriginalSize\nDescribe and Modify argument:\n\"controlname.OriginalSize { = 'value'} \"\nTable 3.174:\nParameter\nDescription\ncontrolname The control for which you want to set the value.\nvalue\nA string specifying whether the control's image is set to its original size.\nValues are:\nTrue -- The image displays at its original size.\nFalse -- The image height and width can be set to other measurements.\nUsage\nIn the painter\nSelect the control and then set the value in the Properties view, General tab, Original Size\ncheck box.\n"}
{"page": 370, "text": "DataWindow Object Properties\nPage 370\nIn scripts\nThe OriginalSize property takes a boolean value. The following line sets the OriginalSize\nproperty to false:\ndw_1.Object.p_empphoto.originalsize=\"false\"\nYou should not try to change the width or height of a picture control when OriginalSize is set\nto true, because it can lead to unexpected behavior.\nExamples\ndw_1.Modify(\"p_empphoto.originalsize='true'\")\ndw_1.Modify(\"p_product.originalsize='false'\")\ndw_1.Modify(\"p_product.height='250'\")\ndw_1.Modify(\"p_product.width='250'\")\n3.3.155 OverlapPercent\nDescription\nThe percentage of overlap for the data markers (such as bars or columns) in different series in\na graph.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.OverlapPercent\nDescribe and Modify argument:\n\"graphname.OverlapPercent { = ' integer ' }\"\nTable 3.175:\nParameter\nDescription\ngraphname\nThe name of the graph control in the DataWindow object for which you want\nto get or set the percentage of overlap.\ninteger\n(exp) An integer specifying the percent of the width of the data markers that\nwill overlap. Integer can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, OverlapPercent option\n(applicable when a series has been specified).\nExamples\nstring setting\nsetting = dw1.Object.graph_1.OverlapPercent\ndw1.Object.graph_1.OverlapPercent = 25\nsetting = dw1.Describe(\"graph_1.OverlapPercent\")\n"}
{"page": 371, "text": "DataWindow Object Properties\nPage 371\ndw1.Modify(\"graph_1.OverlapPercent=25\")\n3.3.156 Pen.property\nDescription\nSettings for a line or the outline of a control.\nApplies to\nLine, Oval, Rectangle, and RoundRectangle controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Pen.property\nDescribe and Modify argument:\n\"controlname.Pen.property { = value }\"\nTable 3.176:\nParameter\nDescription\ncontrolname\nThe name of the control whose Pen property you want to get or set.\nproperty\nA property that applies to the Pen characteristics of controlname, as listed in\nthe table below.\nvalue\nThe value of the property, as shown in the table below. Value can be a quoted\nDataWindow expression.\n \nTable 3.177:\nProperty for\nPen\nValue\nColor\n(exp) A long specifying the color (the red, green, and blue values) to be used\nas the control's line color.\nPainter: Pen Color option.\nStyle\n(exp) A number specifying the style of the line.\nValues are:\n0 -- Solid\n1 -- Dash\n2 -- Dotted\n3 -- Dash-dot pattern\n4 -- Dash-dot-dot pattern\n5 -- Null (no visible line)\nPainter: Pen Style option.\n"}
{"page": 372, "text": "DataWindow Object Properties\nPage 372\nProperty for\nPen\nValue\nWidth\n(exp) A number specifying the width of the line in the unit of measure\nspecified for the DataWindow.\nPainter: Pen Width option (not available when Style is a value other than\nSolid).\nUsage\nIn the painter\nSelect the control and set values in the Properties view, General tab.\nExamples\nstring setting\nsetting = dw1.Object.line_1.Pen.Width\ndw1.Object.line_1.Pen.Width = 10\nsetting = dw1.Describe(\"line_1.Pen.Width\")\ndw1.Modify(\"line_1.Pen.Width=10\")\n3.3.157 Perspective\nDescription\nThe distance from the front of the window at which the graph appears.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.Perspective\nDescribe and Modify argument:\n\"graphname.Perspective { = ' integer ' }\"\nTable 3.178:\nParameter Description\ngraphname The name of the graph control in the DataWindow object for which you want\nto get or set the perspective.\ninteger\n(exp) An integer between 1 and 100 specifying how far away the graph\nappears. The larger the number, the greater the distance and the smaller the\ngraph appears. Integer can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Perspective scroll bar\n(available when a 3D graph type is selected).\n"}
{"page": 373, "text": "DataWindow Object Properties\nPage 373\nExamples\nstring setting\nsetting = dw1.Object.graph_1.Perspective\ndw1.Object.graph_1.Perspective = 20\nsetting = dw1.Describe(\"graph_1.Perspective\")\ndw1.Modify(\"graph_1.Perspective=20\")\n3.3.158 Picture.property\nDescription\nSettings that control the background picture displayed in a DataWindow object. Picture\nproperties are not supported in RichText, Graph, or OLE DataWindow presentation styles.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.datawindow.picture.property\nDescribe and Modify argument:\n\"DataWindow.picture.property { = value }\"\nTable 3.179:\nParameter\nDescription\nproperty\nA property for the picture background. Properties and their settings are\nlisted in the table that follows. Picture properties are used only when the\ndatawindow.brushmode value is 6. These properties are not available for\nRichText, Graph, or OLE DataWindow objects.\nvalue\nThe value to be assigned to the property. For picture properties, value can be a\nquoted DataWindow expression.\nTable 3.180:\nProperty\nfor Picture\nValue\nClip.Bottom An integer specifying the percentage to clip from the bottom edge of the\nbackground picture.\nPainter: Background tab, Picture group.\nClip.Left\nAn integer specifying the percentage to clip from the left edge of the\nbackground picture.\nPainter: Background tab, Picture group.\nClip.Right\nAn integer specifying the percentage to clip from the right edge of the\nbackground picture.\nPainter: Background tab, Picture group.\n"}
{"page": 374, "text": "DataWindow Object Properties\nPage 374\nProperty\nfor Picture\nValue\nClip.Top\nAn integer specifying the percentage to clip from the top edge of the\nbackground picture.\nPainter: Background tab, Picture group.\nFile\nPainter: Background tab, Picture group.\nA string indicating the pathname for the picture file to be used for the\nDataWindow background. Supported formats are BMP, GIF, JPEG, RLE,\nWMF, and PNG.\nMode\nAn integer indicating the orientation and size of the background picture, and\nwhether it is tiled. Tiling also depends on the Scale.X and Scale.Y values.\nValues are:\n0 -- Original Size\n1 -- Fit to Width\n2 -- Fit to Height\n3 -- Preserve Aspect Ratio/Max to Rect\n4 -- Stretch to Fit\n5 -- Tile\n6 -- Flip X\n7 -- Flip Y\n8 -- Flip XY\nPainter: Background tab, Picture group.\nScale.X\nAn integer from 0 to 100 that indicates the horizontal size of the bitmap\nin relation to the horizontal size of the DataWindow object. If you set the\nScale.X and Scale.Y properties to 100, the background picture will cover the\nentire DataWindow object. This property is used only when picture.tilemode\nis set to 5, 6, 7, or 8.\nPainter: Background tab, Picture group.\nScale.Y\nAn integer from 0 to 100 that indicates the vertical size of the bitmap in\nrelation to the vertical size of the DataWindow object. If you set the Scale.X\nand Scale.Y properties to 100, the background picture will cover the entire\nDataWindow object. This property is used only when picture.tilemode is set to\n5, 6, 7, or 8.\nPainter: Background tab, Picture group.\nTranparency An integer in the range 0 to 100, where 0 means that the background bitmap is\nopaque and 100 that it is completely transparent.\nPainter: Background tab, Picture group.\nUsage\n"}
{"page": 375, "text": "DataWindow Object Properties\nPage 375\nIn the painter\nSelect the DataWindow object and set the value on the Background tab of the Properties\nview.\nIf you save to an EMF or WMF, the properties on the Background tab are not saved with the\nDataWindow.\nThis table explains the values for Picture.Mode:\nTable 3.181:\nValue\nDescription\n0 - Original\nSize\nThe image is centered and not tiled to fit the DataWindow.\n1 - Fit to\nWidth\nThe image is stretched or compressed (depending on the aspect ratio) until its\nwidth matches that of the DataWindow control).\n2 - Fit to\nHeight\nThe image is stretch or compressed (depending on the the aspect ratio) until\nits height matches that of the DataWindow control.\n3 - Preserve\nAspect\nRatio/Max to\nRect\nThe image is stretched or compressed (without distortion) until its width\nor height matches that of the DataWindow control without either of them\nexceeding the bounds of the DataWindow control.\n4 - Stretch to\nFit\nThe image is stretched to fill the DataWindow control, without preserving the\naspect ratio.\n5 - Tile\nThe image is tiled to fill the DataWindow. The number of repetitions will be\naffected by the values of picture.scale.x, picture.scale.y, and the picture.clip\nproperties.\n6 - Flip X\nThe image is used to fill the DataWindow by tiling and then it is flipped\nhorizontally as you move from one tile to the next in a row. The number of\nrepetitions will be affected by the values of picture.scale.x, picture.scale.y,\nand the picture.clip properties.\n7 - Flip Y\nThe image is used to fill the DataWindow by tiling and then it is flipped\nvertically as you move from one tile to the next in a column. The number of\nrepetitions will be affected by the values of picture.scale.x, picture.scale.y,\nand the picture.clip properties.\n8 - Flip XY\nThe image is used to fill the DataWindow by tiling and then it is flipped\nhorizontally as you move along the rows and vertically as you move along\nthe columns. The number of repetitions will be affected by the values of\npicture.scale.x, picture.scale.y, and the picture.clip properties.\nExamples\ndw_1.Modify(\"datawindow.brushmode=6\") \ndw_1.Object.datawindow.picture.File=\"MyPic.bmp\"\n3.3.159 Pie.DispAttr.fontproperty\nSee DispAttr.fontproperty.\n"}
{"page": 376, "text": "DataWindow Object Properties\nPage 376\n3.3.160 PlotNullData\nDescription\nWhether a continuous line is drawn between tics in a line graph when there is no data on the\nX and Y axes.\nApplies to\nGraph controls, Graph DataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.PlotNullData\nDescribe and Modify argument:\n\"graphname.PlotNullData { = ' value ' }\"\nTable 3.182:\nParameter\nDescription\ngraphname\nThe name of the graph control in the DataWindow object for which you want\nto get or set the perspective.\nvalue\nA boolean number indicating whether a continuous line is drawn between tics\nin a line graph when there is no data.\nValues are:\n0 -- (False) The line is broken when there is no data.\n1 -- (True) The line is continuous.\nUsage\nIn the painter\nSet the value in the Properties view, General tab, PlotNullData check box (available when a\nline graph type is selected).\nExamples\nstring setting\nsetting = dw1.Object.graph_1.PlotNullData\ndw1.Object.graph_1.PlotNullData = 1\nsetting = dw1.Describe(\"graph_1.PlotNullData\")\ndw1.Modify(\"graph_1.PlotNullData=1\")\n3.3.161 Pointer\nDescription\nThe image to be used for the mouse pointer when the pointer is over the specified control.\nIf you specify a pointer for the whole DataWindow, PowerBuilder uses that pointer except\nwhen the pointer is over a control that also has a Pointer setting.\n"}
{"page": 377, "text": "DataWindow Object Properties\nPage 377\nApplies to\nDataWindow, Button, Column, Computed Field, Graph, GroupBox, Line, OLE, Oval,\nPicture, Rectangle, Report, RoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Pointer\nDescribe and Modify argument:\n\"controlname.Pointer { = 'pointername ' }\"\nTable 3.183:\nParameter\nDescription\ncontrolname\nThe name of the control in the DataWindow for which you want to get or\nset the pointer. Specify DataWindow to specify the pointer for the whole\nDataWindow.\npointername\n(exp) A string specifying a value of the Pointer enumerated datatype or the\nname of a cursor file (.CUR) to be used for the pointer. (See Section 2.4.759,\n\u201cSetPointer\u201d in PowerScript Reference for a list of Pointer values.)\nPointername can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Pointer tab.\nExamples\nsetting = dw1.Object.graph_1.Pointer\ndw1.Object.graph_1.Pointer = 'Cross!'\nsetting = dw1.Describe(\"graph_1.Pointer\")\ndw1.Modify(\"graph_1.Pointer = 'Cross!'\")\ndw1.Modify(\"graph_1.Pointer = 'c:\\pb040\\mycurs.cur'\")\n3.3.162 Print.Preview.property\nDescription\nProperties that control the print preview of a DataWindow.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Print.Preview.property\nDescribe and Modify argument:\n"}
{"page": 378, "text": "DataWindow Object Properties\nPage 378\n\"DataWindow.Print.Preview.property { = value }\"\nSyntaxFromSql:\nDataWindow ( Print.Preview.property = value )\nTable 3.184:\nParameter\nDescription\nproperty\nA property for print preview. Properties and their settings are listed in the\ntable below.\nvalue\nThe value to be assigned to the property. Value cannot be a DataWindow\nexpression.\n \nTable 3.185:\nProperty for\nPrint.Preview\nValue\nButtons\nWhether buttons display in print preview.\nValues are:\nYes -- Buttons are displayed.\nNo -- (Default) Buttons are not displayed.\nPainter: Display Buttons - Print Preview.\nOutline\nWhether a blue line displays to show the location of the margins.\nValues are:\nYes -- (Default) Margin outline is displayed.\nNo -- Margin outline is not displayed.\nPainter: Print Preview Shows Outline\nRulers\nWhether the rulers display when the DataWindow object displays in preview\nmode. Values are:\nYes -- Display the rulers.\nNo -- (Default) Do not display the rulers.\nYou can view rulers in Preview mode in the DataWindow painter. With the\nPreview view selected, select File>Print Preview, then File>Print Preview\nRulers. However, the setting is not used at runtime. To see rulers at runtime,\nset Print.Preview.Rulers in code.\nZoom\nAn integer indicating the zoom factor of the print preview. The default is\n100%.\nYou can view different zoom percentages in Preview mode in the\nDataWindow painter. With the Preview view selected, select File>Print\nPreview, then File>Print Preview Zoom. However, the setting is not used at\n"}
{"page": 379, "text": "DataWindow Object Properties\nPage 379\nProperty for\nPrint.Preview\nValue\nruntime. To change the zoom factor at runtime, set Print.Preview.Zoom in\ncode.\nUsage\nIn the painter\nSelect the DataWindow by deselecting all controls; then set values in the Properties view,\nPrint Specifications tab.\nExamples\ndw1.Object.DataWindow.Print.Preview.Buttons = 'Yes'\nsetting = dw1.Describe (\"DataWindow.Print.Preview.Buttons\")\ndw1.Modify(\"DataWindow.Print.Preview.Buttons = 'Yes'\")\ndw1.Object.DataWindow.Print.Preview.Rulers = 'Yes'\nsetting = dw1.Describe (\"DataWindow.Print.Preview.Rulers\")\ndw1.Modify(\"DataWindow.Print.Preview.Rulers = 'Yes'\")\nSee also\nPrint.property\n3.3.163 Print.property\nDescription\nProperties that control the printing of a DataWindow.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Print.property\nDescribe and Modify argument:\n\"DataWindow.Print.property { = value }\"\nSyntaxFromSql:\nDataWindow ( Print.property = value )\nTable 3.186:\nParameter\nDescription\nproperty\nA property for printing. Properties and their settings are listed in the table\nbelow.\nvalue\nThe value to be assigned to the property. Value cannot be a DataWindow\nexpression.\n \n"}
{"page": 380, "text": "DataWindow Object Properties\nPage 380\nTable 3.187:\nProperty\nfor Print\nValue\nBackground Whether the background settings of the DataWindow and controls display on\nthe printed report.\nValues are:\nYes -- Display background on report. This feature is not supported when you\nuse a picture as the DataWindow background.\nNo -- (Default) Do not display background on report.\nPainter: Print Shows Background option.\nButtons\nWhether buttons display on the printed output.\nValues are:\nYes -- Buttons are displayed.\nNo -- Buttons are not displayed.\nPainter: Display Buttons - Print.\nCanUseDefaultPrinter\nWhether a report can be printed on the default system printer if the printer\nspecified by the PrinterName property is not valid.\nPainter: Can Use Default Printer option.\nClipText\nWhether the text of a static text field on a printed page is clipped to the\ndimensions of the text field when the text field has no visible border setting.\nValues are:\nYes -- The printed text does not overrun the text field.\nNo -- (Default) The entire text can overrun the text field.\nText is automatically clipped for text fields with visible border settings even if\nthis property is not set.\nPainter: Clip Text option.\nCollate\nWhether printing is collated. Note that collating is usually slower since the\nprint is repeated to produce collated sets.\nValues are:\nYes -- (Default) Collate the pages of the print job.\nNo -- Do not collate.\nPainter: Collate Copies option.\nColor\nAn integer indicating whether the printed output will be color or monochrome.\nValues are:\n1 -- Color\n2 -- Monochrome\n"}
{"page": 381, "text": "DataWindow Object Properties\nPage 381\nProperty\nfor Print\nValue\nThe user can specify the value in the system's Print dialog box if the printer\ndriver supports it.\nColumns\nAn integer specifying the number of newspaper-style columns the\nDataWindow will print on a page. For purposes of page fitting, the whole\nDataWindow is a single column. The default is 1.\nPainter: Newspaper Columns Across option.\nColumns.WidthAn integer specifying the width of the newspaper-style columns in the units\nspecified for the DataWindow.\nPainter: Newspaper Columns Width option.\nCopies\nAn integer indicating the number of copies to be printed.\nThe user can also specify this value in the system's Print Setup dialog box if\nthe printer driver supports it.\nIf you use both the Print.Copies property and the Print Setup dialog box to\nindicate that multiple copies should be printed, the total number of copies\nprinted is the product of the two values.\nCustomPage.Length\nA long indicating the desired length of a custom paper size for printing.\nUse this property in conjunction with Print.CustomPage.Width and with\nPaper.Size set to 256.\nCustomPage.Width\nA long indicating the desired width of a custom paper size for printing.\nUse this property in conjunction with Print.CustomPage.Length and with\nPaper.Size set to 256.\nDocumentName\nA string containing the name that will display in the print queue when the user\nsends the contents of the DataWindow object to the printer.\nPainter: Document Name option.\nDuplex\nAn integer indicating duplex or double-sided printing for printers capable of\nduplex printing.\nValues are:\n0 -- Default\n1 -- Normal (nonduplex) printing\n2 -- Short-edge binding (the long edge of the page is horizontal)\n3 -- Long-edge binding (the long edge of the page is vertical)\nThe user can specify the value in the system's Print dialog box if the printer\ndriver supports it.\nFilename\nA string containing the name of the file to which you want to print the report.\nAn empty string means send to the printer.\nPainter: Cannot be set in painter.\nMargin.BottomAn integer indicating the width of the bottom margin on the printed page in\nthe units specified for the DataWindow.\n"}
{"page": 382, "text": "DataWindow Object Properties\nPage 382\nProperty\nfor Print\nValue\nYou can set Margin.Bottom when using SyntaxFromSql to generate\nDataWindow syntax.\nPainter: Bottom Margin option.\nMargin.Left An integer indicating the width of the left margin on the printed page in the\nunits specified for the DataWindow.\nYou can set Margin.Left when using SyntaxFromSql to generate DataWindow\nsyntax.\nPainter: Left Margin option.\nMargin.Right An integer indicating the width of the right margin on the printed page in the\nunits specified for the DataWindow.\nYou can set Margin.Right when using SyntaxFromSql to generate\nDataWindow syntax.\nPainter: Right Margin option.\nMargin.Top An integer indicating the width of the top margin on the printed page in the\nunits specified for the DataWindow.\nYou can set Margin.Top when using SyntaxFromSql to generate DataWindow\nsyntax.\nPainter: Top Margin option.\nOrientation\nAn integer indicating the print orientation. This property has no effect if the\ncomputer has no default printer.\nValues are:\n0 -- The default orientation for your printer\n1 -- Landscape\n2 -- Portrait\nPainter: Paper Orientation option.\nOverridePrintJob\nWhether you want to override the print job print settings defined in the\nPrintOpen method with the print specifications of the DataWindow.\nValues are:\nYes -- Override the print job print settings.\nNo -- (Default) Do not override the print job print settings.\nPainter: Override Print Job option.\nPage.Range\nA string containing the numbers of the pages you want to print, separated\nby commas. You can also specify a range with a dash. For example, to print\npages 1, 2, and 5 through 10, enter: \"1,2, 5-10\". The empty string means print\nall.\nThe user can specify the value in the system's Print dialog box if the printer\ndriver supports it.\n"}
{"page": 383, "text": "DataWindow Object Properties\nPage 383\nProperty\nfor Print\nValue\nPage.RangeInclude\nAn integer indicating what pages to print within the desired range.\nValues are:\n0 -- Print all.\n1 -- Print all even pages.\n2 -- Print all odd pages.\nThe user can specify the value in the system's Print dialog box if the printer\ndriver supports it.\nPaper.Size\nAn integer indicating the size of the paper used for the output:\n0 -- Default paper size for the printer\n1 -- Letter 8 1/2 x 11 in\n2 -- LetterSmall 8 1/2 x 11 in\n3 -- Tabloid 17 x 11 in\n4 -- Ledger 17 x 11 in\n5 -- Legal 8 1/2 x 14 in\n6 -- Statement 5 1/2 x 8 1/2 in\n7 -- Executive 7 1/4 x 10 1/2 in\n8 -- A3 297 x 420 mm\n9 -- A4 210 x 297 mm\n10 -- A4 Small 210 x 297 mm\n11 -- A5 148 x 210 mm\n12 -- B4 250 x 354 mm\n13 -- B5 182 x 257 mm\n14 -- Folio 8 1/2 x 13 in\n15 -- Quarto 215 x 275 mm\n16 -- 10x14 in\n17 -- 11x17 in\n18 -- Note 8 1/2 x 11 in\n19 -- Envelope #9 3 7/8 x 8 7/8\n20 -- Envelope #10 4 1/8 x 9 1/2\n21 -- Envelope #11 4 1/2 x 10 3/8\n22 -- Envelope #12 4 x 11 1/276\n23 -- Envelope #14 5 x 11 1/2\n24 -- C size sheet\n"}
{"page": 384, "text": "DataWindow Object Properties\nPage 384\nProperty\nfor Print\nValue\n25 -- D size sheet\n26 -- E size sheet\n27 -- Envelope DL 110 x 220 mm\n28 -- Envelope C5 162 x 229 mm\n29 -- Envelope C3 324 x 458 mm\n30 -- Envelope C4 229 x 324 mm\n31 -- Envelope C6 114 x 162 mm\n32 -- Envelope C65 114 x 229 mm\n33 -- Envelope B4 250 x 353 mm\n34 -- Envelope B5 176 x 250 mm\n35 -- Envelope B6 176 x 125 mm\n36 -- Envelope 110 x 230 mm\n37 -- Envelope Monarch 3.875 x 7.5 in\n38 -- 6 3/4 Envelope 3 5/8 x 6 1/2 in\n39 -- US Std Fanfold 14 7/8 x 11 in\n40 -- German Std Fanfold 8 1/2 x 12 in\n41 -- German Legal Fanfold 8 1/2 x 13 in\n255, 256 -- User-defined paper size (see \"Usage\" below)\nPainter: Paper Size option.\nPaper.Source An integer indicating the bin that will be used as the paper source. The integer\nyou use depends on the tray number used by the printer. (To determine the\nactual bin setting, you can query the printer with a utility that makes API calls\nto the printer driver.)\nTypical values are:\n0 -- Default\n1 -- Upper\n2 -- Lower\n3 -- Middle\n4 -- Manual\n5 -- Envelope\n6 -- Envelope manual\n7 -- Auto\n8 -- Tractor\n"}
{"page": 385, "text": "DataWindow Object Properties\nPage 385\nProperty\nfor Print\nValue\n9 -- Smallfmt\n10 -- Largefmt\n11 -- Large capacity\n14 -- Cassette\nPainter: Paper Source option.\nPreview\nWhether the DataWindow object is displayed in preview mode.\nValues are:\nYes -- Display in preview mode.\nNo -- (Default) Do not display in preview mode.\nPreview.Background\nWhether the background settings of the DataWindow and controls display in\nthe print preview.\nValues are:\nYes -- Display in preview mode.\nNo -- (Default) Do not display in preview mode.\nPainter: Preview Shows Background option.\nPrinterName A string containing the name of the printer you want to use to print the\nDataWindow report. If the printer name is not specified or if the named\nprinter cannot be found at runtime, print output can be directed to the default\nprinter for the user's machine by setting the CanUseDefaultPrinter property.\nOtherwise, an error is returned.\nPainter: Printer Name option.\nPrompt\nWhether a Printer Setup dialog displays before a job prints so the user can\nchange the paper or other settings for the current printer.\nValues are:\nYes -- (Default) Display a Printer Setup dialog.\nNo -- Do not display a Printer Setup dialog.\nChoosing Cancel in the Printer Setup dialog dismisses the Setup dialog; it\ndoes not cancel printing. To allow the user to cancel printing, see the Print\nmethod.\nFor DataStores, this property is ignored; a dialog is never displayed.\nPainter: Prompt Before Printing check box.\nQuality\nAn integer indicating the quality of the output.\nValues are:\n0 -- Default\n1 -- High\n"}
{"page": 386, "text": "DataWindow Object Properties\nPage 386\nProperty\nfor Print\nValue\n2 -- Medium\n3 -- Low\n4 -- Draft\nThe user can specify the value in the system's Print dialog box if the printer\ndriver supports it.\nScale\nAn integer specifying the scale of the printed output as a percent.\nThe scaling percentage is passed to the print driver. If you have problems with\nscaling, you might be using a driver that does not support scaling.\nThe user can specify the value in the system's Print dialog box if the printer\ndriver supports it.\nFor more information, see your print driver documentation.\nUsage\nIn the painter\nSelect the DataWindow by deselecting all controls; then set values in the Properties view,\nPrint Specifications tab.\nTo specify a user-defined paper size, set the Paper.Size property to 255 or 256, then set the\nPrint.CustomPage.Length and Print.Custom.Page.Width properties to the desired size. With\nPaper.Size set to 255, Length and Width are in the units specified for the DataWindow on the\nGeneral page in the Properties view. For example:\n// DataWindow Units set to 1/1000 inch\ndw1.Modify(\"DataWindow.Print.Paper.Size=255\")\n//9.875 inches long\ndw1.Modify(\"DataWindow.Print.CustomPage.Length=9875\")\n//7.375 inches wide\ndw1.Modify(\"DataWindow.Print.CustomPage.Width=7375\") \nWith Paper.Size set to 256, Length and Width are in millimeters:\ndw1.Modify(\"DataWindow.Print.Paper.Size=256\")\n//25.4 centimeters long\ndw1.Modify(\"DataWindow.Print.CustomPage.Length=254\")\n//19.5 centimeters wide\ndw1.Modify(\"DataWindow.Print.CustomPage.Width=195\") \nExamples\nstrData = dw1.Object.DataWindow.Print.Scale\ndw1.Object.DataWindow.Print.Paper.Size = 3\nstrData = dw1.Describe(\"DataWindow.Print.Scale\")\ndw1.Modify(\"DataWindow.Print.Paper.Size = 3\")\ndw1.Modify(\"DataWindow.Print.Margin.Top=500\")\ndw1.Object.DataWindow.Print.Buttons = 'Yes'\nsetting = dw1.Describe(\"DataWindow.Print.Buttons\")\ndw1.Modify(\"DataWindow.Print.Buttons = 'Yes'\")\nSee also\nPrint.Preview.property\n"}
{"page": 387, "text": "DataWindow Object Properties\nPage 387\n3.3.164 Printer\nDescription\nThe name of the printer for printing the DataWindow as specified in the system's printer\nselection dialog box.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Printer = \"printername\"\nDescribe and Modify argument:\n\"DataWindow.Printer\" { = printername }\"\nTable 3.188:\nParameter\nDescription\nprintername\nName of the printer you want to use for your\nDataWindow\nUsage\nThe printer you select for a DataWindow does not affect the PowerBuilder default printer\nor the system default printer. To specify a network-connected printer, you must use a fully\nspecified network printer name:\ndw1.Object.DataWindow.Printer = \"\\\\net-print\\pr-6\"\nIf you specify a DataWindow printer, but the printer is not found, the DataWindow engine\ndoes not attempt to print to a default device.\nExamples\nThe following example changes the DataWindow printer (but does not affect the system\ndefault printer device):\ndw1.Modify ('DataWindow.Printer=\"My LaserJet 3\" ')\nYou can display the DataWindow printer with either of the following calls:\nstring ls_dwprinter\nls_dwprinter = dw1.Object.DataWindow.Printer\nls_dwprinter = dw1.Describe(\"DataWindow.Printer\")\n3.3.165 Processing\nDescription\nThe type of processing required to display the data in the selected presentation style.\nApplies to\nDataWindows\n"}
{"page": 388, "text": "DataWindow Object Properties\nPage 388\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Processing\nDescribe argument:\n\"DataWindow.Processing\"\nReturn values are:\n0 -- (Default) Form, group, n-up, or tabular\n1 -- Grid\n2 -- Label\n3 -- Graph\n4 -- Crosstab\n5 -- Composite\n6 -- OLE\n7 -- RichText\n8 -- TreeView\n9 -- TreeView with Grid\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Processing\nsetting = dw1.Describe(\"DataWindow.Processing\")\n3.3.166 Protect\nDescription\nThe protection setting of a column. The Protect property overrides tab order settings. When a\ncolumn is protected, the user cannot edit it even if the column's tab order is greater than 0.\nApplies to\nA column\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Protect\nDescribe and Modify argument:\n\"columnname.Protect { = ' integer ' }\"\nTable 3.189:\nParameter\nDescription\ncolumnname The name of the column for which you want to get or set the protection.\ninteger\n(exp) A boolean integer specifying whether the column is protected.\n"}
{"page": 389, "text": "DataWindow Object Properties\nPage 389\nParameter\nDescription\nValues are:\n0 -- False, the column is not protected.\n1 -- True, the column is protected.\nInteger can be a quoted DataWindow expression.\nUsage\nA user cannot change a column value if any one of these conditions is true:\n\u2022 TabSequence is 0\n\u2022 Edit.DisplayOnly is Yes when the column has the Edit edit style\n\u2022 Protect is 1\nOnly the Protect property allows you to specify a conditional expression that protects some\nvalues in the column but not others.\nIn the painter\nSelect the control and set the value in the Properties view, General tab (using a conditional\nexpression).\nExamples\nstring setting\nsetting = dw1.Object.emp_stat.Protect\ndw1.Object.emp_stat.Protect=1\nsetting = dw1.Describe(\"emp_stat.Protect\")\ndw1.Modify(\"emp_stat.Protect=1\")\ndw1.Modify(\"emp_stat.Protect='1~tIf(IsRowNew(),0,1)'\")\n3.3.167 QueryClear\nDescription\nRemoves the WHERE clause from a query. Note that the only valid setting is Yes.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.QueryClear\nModify argument:\n\"DataWindow.QueryClear { = value }\"\nTable 3.190:\nParameter Description\nvalue\nRemove the WHERE clause from a query.\n"}
{"page": 390, "text": "DataWindow Object Properties\nPage 390\nParameter Description\nYes is the only valid value.\nExamples\ndw1.Object.DataWindow.QueryClear = \"yes\"\ndw1.Modify(\"DataWindow.QueryClear=yes\")\n3.3.168 QueryMode\nDescription\nWhether the DataWindow is in query mode. In query mode, the user can specify the desired\ndata by entering WHERE criteria in one or more columns.\nDataWindow presentation styles\nYou cannot use QueryMode with DataWindow objects that use any of the following\npresentation styles: N-Up, Label, Crosstab, RichText, and Graph.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.QueryMode\nDescribe and Modify argument:\n\"DataWindow.QueryMode { = value }\"\nTable 3.191:\nParameter\nDescription\nvalue\nWhether the DataWindow is in query mode.\nValues are:\nyes -- Query mode is enabled.\nno -- Query mode is disabled.\nUsage\nAfter the user specifies retrieval criteria in query mode, subsequent calls to Retrieve can use\nthe new criteria. To retrieve data based on user selection, change the query mode back to no\nand use AcceptText to accept the user's specification before the next call to Retrieve.\nSetting QuerySort to yes also puts the DataWindow into query mode, changing the\nQueryMode property's value to yes.\nQuery mode and secondary DataWindows\nWhen you are sharing data, you cannot turn on query mode for a secondary DataWindow.\nTrying to set the QueryMode or QuerySort properties results in an error.\n"}
{"page": 391, "text": "DataWindow Object Properties\nPage 391\nBuffer manipulation and query mode\nA DataWindow cannot be in query mode when you call the RowsCopy method.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.QueryMode\ndw1.Object.DataWindow.QueryMode = \"yes\"\nsetting = dw1.Describe(\"DataWindow.QueryMode\")\ndw1.Modify(\"DataWindow.QueryMode=yes\")\n3.3.169 QuerySort\nDescription\nWhether the result set is sorted when the DataWindow retrieves the data specified in query\nmode. When query sort is on, the user specifies sorting criteria in the first row of the query\nform.\nDataWindow presentation styles\nYou cannot use QuerySort with DataWindow objects that use any of the following\npresentation styles: N-Up, Label, Crosstab, RichText, and Graph.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.QuerySort\nDescribe and Modify argument:\n\"DataWindow.QuerySort { = value }\"\nTable 3.192:\nParameter\nDescription\nvalue\nWhether the data retrieved from query mode specifications is sorted.\nValues are:\nYes -- Sorting is enabled.\nNo -- Sorting is disabled.\nUsage\nIf the DataWindow is not already in query mode, setting QuerySort to Yes also sets\nQueryMode to Yes, putting the DataWindow in query mode.\nWhen you set QuerySort to No, the DataWindow remains in query mode until you also set\nQueryMode to No.\nQuery mode and secondary DataWindows\n"}
{"page": 392, "text": "DataWindow Object Properties\nPage 392\nWhen you are sharing data, you cannot turn on query mode for a secondary DataWindow.\nTrying to set the QueryMode or QuerySort properties results in an error.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.QuerySort\ndw1.Object.DataWindow.QuerySort = \"yes\"\nsetting = dw1.Describe(\"DataWindow.QuerySort\")\ndw1.Modify(\"DataWindow.QuerySort=yes\")\n3.3.170 RadioButtons.property\nDescription\nProperties that control the appearance and behavior of a column with the RadioButton edit\nstyle.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.RadioButtons.property\nDescribe and Modify argument:\n\"columnname.RadioButtons.property { = value }\"\nTable 3.193:\nParameter\nDescription\ncolumnname The name of the column that has the RadioButton edit style.\nproperty\nA property for the RadioButton column. Properties and their settings are listed\nin the table below.\nvalue\nThe value to be assigned to the property. For RadioButton properties, value\ncannot be a DataWindow expression.\n \nTable 3.194:\nProperty for\nRadioButtons\nValue\n3D or\nThreeD\nWhether the radio buttons are 3D. Values are:\nYes -- Make the buttons 3D.\nNo -- Do not make the buttons 3D.\nPainter: 3D Look option.\nWhen using dot notation, use the term ThreeD instead of 3D.\nColumns\nAn integer constant specifying the number of columns of radio buttons.\n"}
{"page": 393, "text": "DataWindow Object Properties\nPage 393\nProperty for\nRadioButtons\nValue\nPainter: Columns Across option.\nLeftText\nWhether the text labels for the radio buttons are on the left side.\nValues are:\nYes -- The text is on the left of the radio buttons.\nNo -- The text is on the right of the radio buttons.\nPainter: Left Text option.\nScale\nWhether the circle is scaled to the size of the font. Scale has an effect only\nwhen 3D is No.\nValues are:\nYes -- Scale the circles.\nNo -- Do not scale the circles.\nPainter: Scale Circles option.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Edit tab when Style Type is\nRadioButtons.\nExamples\nsetting = dw1.Describe(\"empg.RadioButtons.LeftText\")\ndw1.Modify(\"emp_gender.RadioButtons.LeftText=no\")\ndw1.Modify(\"emp_gender.RadioButtons.3D=Yes\")\ndw1.Modify(\"emp_gender.RadioButtons.Columns=2\")\nstring setting\nsetting = &\n   dw1.Object.emp_gender.RadioButtons.LeftText\ndw1.Object.emp_gender.RadioButtons.LeftText = \"no\"\n3.3.171 Range\nDescription\nThe rows in the DataWindow used in the graph or OLE Object control. Range can be all\nrows, the rows on the current page, a group that you have defined for the DataWindow, or the\ncurrent row (OLE Object controls only).\nApplies to\nGraph and OLE Object controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Range\nDescribe argument:\n"}
{"page": 394, "text": "DataWindow Object Properties\nPage 394\n\"controlname.Range\"\nTable 3.195:\nParameter\nDescription\ncontrolname The name of the graph control within the DataWindow that will display the\ngraphed rows or the name of the OLE Object control that holds an OLE object\nto which the specified range of rows will be transferred.\nUsage\nPossible values are:\n-2 -- The current row (OLE Object controls only)\n-1 -- The rows on a single page in the DataWindow object\n0 -- All the rows in the DataWindow object\nn -- The number of a group level in the DataWindow object\nGroupBy and Target also affect the data that is transferred to the OLE object.\nIn the painter\nSelect the control and set the value in the Properties view, Data tab, Rows option.\nExamples\nstring strRange\nstrRange = dw1.Object.graph_salary.Range\nstrRange = dw1.Object.ole_report.Range\nstrRange = dw1.Describe(\"graph_salary.Range\")\nstrRange = dw1.Describe(\"ole_report.Range\")\n3.3.172 ReadOnly\nDescription\nWhether the DataWindow is read-only.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.ReadOnly\nDescribe and Modify argument:\n\"DataWindow.ReadOnly { = value }\"\nTable 3.196:\nParameter Description\nvalue\nWhether the DataWindow is read-only.\nValues are:\nYes -- Make the DataWindow read-only.\n"}
{"page": 395, "text": "DataWindow Object Properties\nPage 395\nParameter Description\nNo -- (Default) Do not make the DataWindow read-only.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.ReadOnly\ndw1.Object.DataWindow.ReadOnly=\"Yes\"\nsetting = dw1.Describe(\"DataWindow.ReadOnly\")\ndw1.Modify(\"DataWindow.ReadOnly=Yes\")\n3.3.173 Render3D\nDescription\nWhether the GraphType is rendered in the DirectX 3D style.\nApplies to\nGraph controls and Graph DataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.Render3D\nDescribe and Modify argument:\n\"graphname.Render3D { = ' boolean ' }\nTable 3.197:\nParameter\nDescription\ngraphname\nThe graph control for which you want to get or change the type.\nGraph types that can use the new 3D rendering style are:\n \n3 -- Bar 3D\n8 -- Col3D\n15 -- Area3D\n16 -- Line3D\n17 -- Pie3D\nboolean\n0 = Original 3D style\n1 = New 3D rendering style\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nExamples\nThe following statement sets a graph control to the DirectX 3D style.\ngr_1.Render3D=true\nThe following statement sets a DataWindow in the graph presentation style to the DirectX 3D\nstyle.\ndw_1.Object.gr_1.Render3D=true\n"}
{"page": 396, "text": "DataWindow Object Properties\nPage 396\n3.3.174 ReplaceTabWithSpace\nDescription\nWhether tab characters embedded in the data for a DataWindow display as square boxes\nwhen the row is not the current row.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.ReplaceTabWithSpace\nDescribe and Modify argument:\n\"DataWindow.ReplaceTabWithSpace { = value }\"\nTable 3.198:\nParameter\nDescription\nvalue\nWhether tab characters embedded in the data for a DataWindow are\nreplaced with spaces.\nValues are:\nYes -- Replace each tab character with four spaces.\nNo -- (Default) Do not replace tab characters.\nExamples\nstring str\nstr = dw1.Object.DataWindow.ReplaceTabWithSpace\ndw1.Object.DataWindow.ReplaceTabWithSpace=\"Yes\"\nstr = dw1.Describe(\"DataWindow.ReplaceTabWithSpace\")\ndw1.Modify(\"DataWindow.ReplaceTabWithSpace=Yes\")\n3.3.175 Report\nDescription\nWhether the DataWindow is a read-only report.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Report = value )\nTable 3.199:\nParameter\nDescription\nvalue\nWhether the DataWindow is a read-only report, similar to a DataWindow\ncreated in the Report painter.\nValues are:\n"}
{"page": 397, "text": "DataWindow Object Properties\nPage 397\nParameter\nDescription\nYes -- The DataWindow is a read-only report.\nNo -- The DataWindow is not read-only.\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n'Style(...Report = yes ...)', errstring)\n3.3.176 ResetPageCount\nDescription\nSpecifies that a change in the value of the group column causes the page count to begin again\nat 0.\nApplies to\nGroup keywords\nSyntax\nSyntaxFromSql:\nGroup (col1 {col2 ...} ... ResetPageCount )\nExamples\nSQLCA.SyntaxFromSQL(sql_syntax, &\n   \"Style(Type=Group) \" + &\n   \"Group(#3 NewPage ResetPageCount)\", &\n   errorvar)\n3.3.177 Resizeable\nDescription\nWhether the user can resize the specified control.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, Line, OLE, Oval, Picture, Rectangle,\nReport, RoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Resizeable\nDescribe and Modify argument:\n\"controlname.Resizeable { = value }\"\nTable 3.200:\nParameter\nDescription\ncontrolname The control within the DataWindow whose Resizeable setting you want to get\nor set.\nvalue\nA boolean number indicating whether controlname can be resized.\n"}
{"page": 398, "text": "DataWindow Object Properties\nPage 398\nParameter\nDescription\nValues are:\n0 -- (False) The control cannot be resized.\n1 -- (True) The control can be resized.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab.\nWhen you make the control resizable, set the Border property to the resizable border so the\nuser knows it is resizable.\nExamples\nstring setting\nsetting = dw1.Object.graph_1.Resizeable\ndw1.Object.graph_1.Resizeable = 1\nsetting = dw1.Describe(\"graph_1.Resizeable\")\ndw1.Modify(\"graph_1.Resizeable=1\")\ndw1.Modify(\"bitmap_1.Resizeable=0\")\n3.3.178 Retrieve\nDescription\nThe SQL statement for the DataWindow.\nRetrieve is set in DataWindow syntax only for the Create method.\nApplies to\nTable keywords\nSyntax\nTable ( ... Retrieve = selectstatement ... )\n3.3.179 Retrieve.AsNeeded\nDescription\nWhether rows will be retrieved only as needed from the database. After the application\ncalls the Retrieve method to get enough rows to fill the visible portion of the DataWindow,\nadditional rows are \"needed\" when the user scrolls down to view rows that have not been\nviewed yet.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Retrieve.AsNeeded\nDescribe and Modify argument:\n\"DataWindow.Retrieve.AsNeeded { = 'value ' }\"\n"}
{"page": 399, "text": "DataWindow Object Properties\nPage 399\nTable 3.201:\nParameter\nDescription\nvalue\nWhether rows will be retrieved only as needed from the database.\nValues are:\n\u2022 Yes -- Rows will be retrieved only as needed.\n\u2022 No -- All rows will be retrieved when the Retrieve method is called.\nUsage\nIn the painter\nSet the value using Rows>Retrieve Options>Rows As Needed.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Retrieve.AsNeeded\ndw1.Object.DataWindow.Retrieve.AsNeeded= \"Yes\"\nsetting = dw1.Describe(\"DataWindow.Retrieve.AsNeeded\")\ndw1.Modify(\"DataWindow.Retrieve.AsNeeded=Yes\")\n3.3.180 RichEdit.property\nDescription\nSettings that affect the appearance and behavior of columns whose edit style is RichText.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.RichEdit.property\nDescribe and Modify argument:\n\"columnname.RichEdit.property { = value }\"\nSyntaxFromSql:\nColumn ( RichEdit.property = value )\nTable 3.202:\nParameter\nDescription\ncolumnname The column with the RichText edit style for which you want to get or set\nproperty values. You can specify the column name or a pound sign (#) and the\ncolumn number.\nproperty\nA property for the column's Edit style. Properties and their settings are\nlisted in the table below. The table identifies the properties you can use with\nSyntaxFromSql.\nvalue\nThe value to be assigned to the property.\n"}
{"page": 400, "text": "DataWindow Object Properties\nPage 400\n \nTable 3.203:\nProperty\nfor\nRichEdit\nValue\nAutoSelect\nWhether to select the contents of the column control automatically when it\nreceives focus.\nValues are:\nYes -- Select automatically.\nNo -- Do not select automatically.\nYou can use AutoSelect with SyntaxFromSql. The setting applies to all the\ncolumns in the generated syntax.\nPainter: Auto Selection option\nDisplayOnly Whether the column is display only.\nValues are:\nYes -- Do not allow the user to enter data; make the column display only.\nNo -- Allow the user to enter data.\nPainter: Display Only option\nFor conditional control over column editing, use the Protect property.\nFocusRectangleWhether a dotted rectangle (the focus rectangle) surrounds the current row of\nthe column when the column has focus.\nValues are:\nYes -- Display the focus rectangle.\nNo -- Do not display the focus rectangle.\nYou can use FocusRectangle with SyntaxFromSql. The setting applies to all\nthe columns in the generated syntax.\nPainter: Show Focus Rectangle option\nLimit\nA number specifying the maximum number of characters (0 to 32,767) that\nthe user can enter. 0 means unlimited.\nPainter: Limit option.\nNilIsNull\nWhether to set the value of the column control to null when the user leaves it\nblank.\nValues are:\nYes -- Make the empty string null.\nNo -- Do not make the empty string null.\nPainter: Empty String is Null option.\nRequired\nWhether the column is required.\n"}
{"page": 401, "text": "DataWindow Object Properties\nPage 401\nProperty\nfor\nRichEdit\nValue\nValues are:\nYes -- It is required.\nNo -- It is not required.\nPainter: Required option.\nVScrollBar\nWhether a vertical scroll bar displays in the column control.\nValues are:\nYes -- Display vertical scroll bars.\nNo -- Do not display vertical scroll bars.\nPainter: Vertical Scroll Bar option.\nUsage\nIn the painter\nSelect the control and set values in the Properties view, Edit tab, when Style Type is\nRichText.\nExamples\nstring setting\nsetting = &\n   dw_1.Object.rte_description.RichEdit.AutoSelect\ndw_1.Object.rte_description.RichEdit.VScrollBar=\"yes\"\nsetting = dw_1.Describe(&\n   \"rte_description.RichEdit.VScrollBar\")\ndw_1.Modify(\"rte_description.RichEdit.Required=no\")\n3.3.181 RichText.property\nDescription\nProperties for the DataWindow RichText presentation style.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.RichText.property\nDescribe and Modify argument:\n\"DataWindow.RichText.property { = value }\"\nTable 3.204:\nParameter\nDescription\nproperty\nA property for the DataWindow RichText presentation style. Properties and\nappropriate values are listed in the table below.\nvalue\nA value to be assigned to the property.\n"}
{"page": 402, "text": "DataWindow Object Properties\nPage 402\n \nTable 3.205:\nProperty\nfor\nRichText\nValue\nBackColor\nA long specifying the numeric value of the background color of the text\nediting area. Values are -2 to 16,777,215.\nFor more information about color, see RGB.\nPainter: Background Color group, General option.\nControlCharsVisible\nSpecifies whether control characters (carriage returns, spaces, and tabs) are\nvisible. Values are:\n\u2022 Yes -- Control characters are visible.\n\u2022 No -- Control characters are hidden.\nPainter: RichText Presentation group, ControlChars Visible option.\nDisplayOnly Specifies whether users can make changes to the contents. Values are:\n\u2022 Yes -- The content, including text and input files, is protected (the user\ncannot edit it).\n\u2022 No -- The user can edit the content.\nPainter: Display Only option.\nHeaderFooter(Read-only) Specifies whether the RichTextEdit DataWindow has a header/\nfooter section. This property must be set in the painter and cannot be changed\nat runtime. Values are:\n\u2022 Yes -- The control has a header/footer section.\n\u2022 No -- The control does not have a header/footer section.\nIf a document has a header or footer and the HeaderFooter property is set to\nno, then header/footer information in the document is ignored. If the document\nis then saved in the same file, the header/footer information is lost.\nPainter: Header/Footer option.\nInputField\nBackColor\nA long specifying the default background color for all input fields: -2 to\n16,777,215.\nPainter: Background Color group, Input Field option.\nInputField\nNamesVisible\nSpecifies whether input field names are displayed in input fields, rather than\nthe input field values. Values are:\n\u2022 Yes -- Input fields display.\n\u2022 No -- Input fields do not display.\n"}
{"page": 403, "text": "DataWindow Object Properties\nPage 403\nProperty\nfor\nRichText\nValue\nThe value you specify is ignored when the InputFieldsVisible property is set\nto false.\nPainter: RichText Presentation group, Input Field Names Visible option.\nInputFields\nVisible\nSpecifies whether input fields display in the DataWindow object. Values are:\n\u2022 Yes -- Input fields display their names.\n\u2022 No -- Input fields display their data.\nPainter: RichText Presentation group, Input Fields Visible option.\nPictureFrame\n(obsolete)\n(Obsolete) This property is no longer supported since PowerBuilder 12.6.\nSpecifies whether pictures are displayed as empty frames. Values are:\n\u2022 Yes -- Pictures are displayed as empty frames.\n\u2022 No -- The pictures are displayed.\nPainter: Pictures As Frame option.\nPopMenu\nSpecifies whether the user has access to a pop-up menu by clicking the right\nmouse button on the DataWindow. The menu allows the user to cut and paste,\ninsert a file, and select formatting options. Values are:\n\u2022 Yes -- Pop-up menu is enabled.\n\u2022 No -- Pop-up menu is disabled.\nPainter: PopUp Menu option.\nReadOnly\nSpecifies whether the user can change the data and the text in the\nDataWindow. Values are:\n\u2022 Yes -- The DataWindow is read-only (text and data cannot be modified).\n\u2022 No -- The text and the data can be modified.\nReturnsVisible\n(obsolete)\nReplaced by RichText.ControlCharsVisible property.\nRulerBar\nSpecifies whether a ruler bar is visible above the editing area. If visible, the\nuser can use it to see measurements while setting tabs and margins on the tab\nbar (see the TabBar property in this table). Values are:\n\u2022 Yes -- Ruler bar is visible.\n\u2022 No -- Ruler bar is hidden.\n"}
{"page": 404, "text": "DataWindow Object Properties\nPage 404\nProperty\nfor\nRichText\nValue\nIf the RichTextEdit pop-up menu is enabled, the user can use it to turn ruler\nbar display on and off (see the PopMenu property in this table).\nPainter: RichText Bars group, Ruler option.\nSpacesVisibleSpecifies whether spaces are visible. Values are:\n\u2022 Yes -- Spaces are visible.\n\u2022 No -- Spaces are hidden.\nPainter: RichText Presentation group, Spaces Visible option.\nTabBar\n(obsolete)\n(Obsolete) This property is no longer supported since PowerBuilder 12.6.\nSpecifies whether a bar for setting tabs is visible above the editing area.\nValues are:\n\u2022 Yes -- Tab bar is visible.\n\u2022 No -- Tab bar is hidden.\nIf the pop-up menu is enabled, the user can use it to turn tab bar display on\nand off (see the PopMenu property in this table).\nPainter: RichText Bars group, Tab option.\nTabsVisible Specifies whether tabs are visible. Values are:\n\u2022 Yes -- Spaces are visible.\n\u2022 No -- Spaces are hidden.\nPainter: RichText Presentation group, Tabs Visible option.\nToolBar\nSpecifies whether a tool bar for formatting text is visible above the editing\narea. Values are:\n\u2022 Yes -- Tool bar is visible.\n\u2022 No -- Tool bar is not visible.\nIf the pop-up menu is enabled, the user can use it to turn tool bar display on\nand off (see the PopMenu property in this table).\nPainter: RichText Bars group, Tool option.\nWordWrap\nDetermines whether large blocks of text that do not contain spaces wrap\nautomatically to the next line when the line reaches the margin. Values are:\n\u2022 Yes -- Automatic word wrap is enabled.\n"}
{"page": 405, "text": "DataWindow Object Properties\nPage 405\nProperty\nfor\nRichText\nValue\n\u2022 No -- Automatic word wrap is disabled. Users cannot enter characters\nbeyond the right margin, and must move the cursor to a new line to continue\nentering text. If an inserted document conatins a block of text too large to fit\non a line, the nonfitting characters are hidden.\nPainter: Word Wrap option\nUsage\nIn the painter\nSelect the DataWindow by deselecting all controls; then set the value in the Properties view,\nGeneral tab, when the presentation style is RichText.\nExamples\nstring setting\nsetting = &\n   dw1.Object.DataWindow.RichText.DisplayOnly\ndw1.Object.DataWindow.RichText.PopMenu = \"yes\"\nsetting = &\n   dw1.Describe(\"DataWindow.RichText.DisplayOnly\")\ndw1.Modify(\"DataWindow.RichText.PopMenu = 'yes'\")\n3.3.182 RightToLeft\nDescription\nThe RightToLeft property is used to set controls to read right-to-left. This property is for use\nwhen you are developing an application for a language that has right-to-left reading order.\nApplies to\nColumn\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.RightToLeft\nDescribe and Modify argument:\n\"controlname.RightToLeft { = integer }\"\nTable 3.206:\nParameter\nDescription\ncontrolname The name of the control for which you want to get or set the right-to-left\nproperty.\ninteger\nWhether the control is set to right-to-left:\n\u2022 0 -- (False) The control is not set to right-to-left\n"}
{"page": 406, "text": "DataWindow Object Properties\nPage 406\nParameter\nDescription\n\u2022 1 -- (True) The control is set to right-to-left\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nExamples\ndw_1.Object.fname.RightToLeft=1\n3.3.183 Rotation\nDescription\nThe degree of left-to-right rotation for the graph control within the DataWindow when the\ngraph has a 3D type.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.Rotation\nDescribe and Modify argument:\n\"graphname.Rotation = { 'integer ' }\"\nTable 3.207:\nParameter\nDescription\ngraphname\nThe name of the Graph control for which you want to get or set the rotation.\ninteger\n(exp) The degree of rotation for the graph. Effective values range from -90 to\n90. Integer can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Rotation scroll bar\n(enabled when a 3D graph type is selected).\nExamples\nstring setting\nsetting = dw1.Object.graph_1.Rotation\ndw1.Object.graph_1.Rotation=25\nsetting = dw1.Describe(\"graph_1.Rotation\")\ndw1.Modify(\"graph_1.Rotation=25\")\ndw1.Modify(\"graph_1.Rotation='1~tHour(Now())'\")\n3.3.184 Row.Resize\nDescription\n"}
{"page": 407, "text": "DataWindow Object Properties\nPage 407\nWhether the user can use the mouse to change the height of the rows in the detail area of the\nDataWindow.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Row.Resize\nDescribe and Modify argument:\n\"DataWindow.Row.Resize { = value } \"\nTable 3.208:\nParameter\nDescription\nvalue\nWhether the user can resize the rows in the detail area. Values are:\n\u2022 1 -- Yes, the user can resize the rows.\n\u2022 0 -- No, the user cannot resize the rows.\nUsage\nIn the painter\nSelect the DataWindow by deselecting all controls; then set the value in the Properties view,\nGeneral tab, Row Resize option (available when the presentation style is Grid or Crosstab).\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Row.Resize\ndw1.Object.DataWindow.Row.Resize = 0\nsetting = dw1.Describe(\"DataWindow.Row.Resize\")\ndw1.Modify(\"DataWindow.Row.Resize=0\")\n3.3.185 Rows_Per_Detail\nDescription\nThe number of rows in the detail area of an n-up DataWindow object. This property should\nbe 1 unless the Type property for the Style keyword is Tabular.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Rows_Per_Detail\nDescribe argument:\n"}
{"page": 408, "text": "DataWindow Object Properties\nPage 408\n\"DataWindow.Rows_Per_Detail\"\nSyntaxFromSql:\nDataWindow ( ... Rows_Per_Detail = n ... )\nTable 3.209:\nParameter\nDescription\nn\nA long specifying the number of rows in each column\nExamples\nSQLCA.SyntaxFromSQL(sqlselect, &\n   'DataWindow(...Rows_Per_Detail = 12 ...)', &\n   errstring)\n3.3.186 Selected\nDescription\nA list of selected controls within the DataWindow.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Selected\nDescribe and Modify argument:\n\"DataWindow.Selected = 'list ' \"\nTable 3.210:\nParameter\nDescription\nlist\nA list of the controls you want to select. In the list you designate a group of\ncontrols by specifying a range of row numbers and a range of controls in the\nformat:\nstartrow/endrow/startcontrol/endcontrol\nTo specify more than one group, separate each group with a semicolon:\nstartrow1/endrow1/startobj1/endobj1;startrow2/endrow2/startobj2/\nendobj2;...\nDo not include spaces in the string. You must use column names, not column\nnumbers.\nExamples\nsetting = dw1.Object.DataWindow.Selected\n"}
{"page": 409, "text": "DataWindow Object Properties\nPage 409\ndw1.Object.DataWindow.Selected = &\n\"1/10/emp_id/emp_name;12/23/salary/status\"\nsetting = dw1.Describe(\"DataWindow.Selected\")\ndw1.Modify(\"DataWindow.Selected=\"  &\n\"'1/10/emp_id/emp_name;12/23/salary/status'\")\n3.3.187 Selected.Data\nDescription\nA list describing the selected data in the DataWindow. Each column's data is separated by a\ntab and each row is on a separate line.\nApplies to\nDataWindows (Crosstab and Grid presentation styles only)\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Selected.Data\nDescribe argument:\n\"DataWindow.Selected.Data\"\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Selected.Data\nsetting = dw1.Describe(\"DataWindow.Selected.Data\")\n3.3.188 Selected.Mouse\nDescription\nWhether the user can use the mouse to select columns.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Selected.Mouse\nDescribe and Modify argument:\n\"DataWindow.Selected.Mouse { = value }\"\nTable 3.211:\nParameter\nDescription\nvalue\nWhether the user can use the mouse to select columns.\nValues are:\n\u2022 Yes -- The mouse can be used.\n"}
{"page": 410, "text": "DataWindow Object Properties\nPage 410\nParameter\nDescription\n\u2022 No -- The mouse cannot be used.\nUsage\nIn the painter\nSelect the DataWindow by deselecting all controls; then set the value in the Properties\nview, General tab, Mouse Selection option (available when the presentation style is Grid or\nCrosstab).\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Selected.Mouse\ndw1.Object.DataWindow.Selected.Mouse = \"Yes\"\nsetting = dw1.Describe(\"DataWindow.Selected.Mouse\")\ndw1.Modify(\"DataWindow.Selected.Mouse = Yes\")\n3.3.189 Series\nSee Axis, Axis.property, and DispAttr.fontproperty.\n3.3.190 ShadeColor\nDescription\nThe color used for shading the back edge of the series markers when the graph's type is 3D.\nShadeColor has no effect unless Series.ShadeBackEdge is 1 (Yes). If ShadeBackEdge is 0,\nthe axis plane is the same color as the background color of the graph.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.ShadeColor\nDescribe and Modify argument:\n\"graphname.ShadeColor { = ' long ' }\"\nTable 3.212:\nParameter\nDescription\ngraphname\nThe Graph control in the DataWindow for which you want to shade color.\nlong\n(exp) A long number converted to a string specifying the color of the shading\nfor axes of a 3D graph.\nYou can use the RGB function in a DataWindow expression or in\nPowerScript to calculate the desired color value. However, be sure to convert\nthe return value of the PowerScript function to a string.\nLong can be a quoted DataWindow expression.\n"}
{"page": 411, "text": "DataWindow Object Properties\nPage 411\nUsage\nTo set the shade color for individual series markers, such as bars or pie slices, use the method\nSetDataStyle.\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Shade Color option.\nExamples\nstring setting\nsetting = dw1.Object.graph_1.ShadeColor\ndw1.Object.graph_1.ShadeColor = 16600000\nsetting = dw1.Describe(\"graph_1.ShadeColor\")\ndw1.Modify(\"graph_1.ShadeColor=16600000\")\ndw1.Modify(\"graph_1.ShadeColor=String(RGB(90,90,90)))\ndw1.Modify(\"graph_1.ShadeColor='0~t\" &\n      + If(salary>50000,\" &\n      + String(RGB(100,90,90)) &\n      + \",\" &\n      + String(RGB(90,90,100)) &\n      + \")'\")\n3.3.191 ShowBackColorOnXP\nDescription\nWhether the background color that you select for a button displays on Windows XP.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.ShowBackColorOnXP\nDescribe and Modify argument:\n\"DataWindow.ShowBackColorOnXP{ = value }\"\nTable 3.213:\nParameter\nDescription\nvalue\nA boolean value that indicates whether the background color that you select\nfor a button displays on Windows XP.\nValues are:\nYes -- Display the background color.\nNo -- Do not display the background color (default).\nUsage\nThe Background.Color property is not supported for buttons on Windows XP by default\nbecause the current XP theme controls the appearance of the button.\nIn the painter\n"}
{"page": 412, "text": "DataWindow Object Properties\nPage 412\nSet the Show Backcolor on XP property on the General tab of the Properties view for the\nDataWindow object. The background color you selected will display in Preview mode.\nExamples\ndw1.Modify(\"DataWindow.ShowBackColorOnXP = yes\")\ndw1.Object.DataWindow.ShowBackColorOnXP = \"yes\"\n3.3.192 ShowBackground\nDescription\nWhether the background settings of the report display.\nApplies to\nReport controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.ShowBackground\nDescribe and Modify argument:\n\"controlname.ShowBackground{ = 'value '}\"\nTable 3.214:\nParameter\nDescription\nvalue\nA boolean value that indicates whether the report's background color settings\ndisplay.\nValues are:\nYes -- Display the background settings.\nNo -- Do not display the background settings (default).\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Show Background\ncheck box.\nExamples\ndw1.Modify(\"r_orders_nested.ShowBackground = yes\")\ndw1.Object.DataWindow.ShowBackground = \"yes\"\n3.3.193 ShowDefinition\nDescription\nWhether the DataWindow definition will display. The DataWindow will display the column\nnames instead of data.\nApplies to\n"}
{"page": 413, "text": "DataWindow Object Properties\nPage 413\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.ShowDefinition\nDescribe and Modify argument:\n\"DataWindow.ShowDefinition { = 'value ' }\"\nTable 3.215:\nParameter\nDescription\nvalue\n(exp) Whether the column names will display.\nValues are:\n\u2022 Yes -- Display the column names.\n\u2022 No -- Display the data, if any.\nValue can be a quoted DataWindow expression.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.ShowDefinition\ndw1.Object.DataWindow.ShowDefinition = \"Yes\"\nsetting = dw1.Describe(\"DataWindow.ShowDefinition\")\ndw1.Modify(\"DataWindow.ShowDefinition=Yes\")\n3.3.194 SizeToDisplay\nDescription\nWhether the graph should be sized automatically to the display area.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.SizeToDisplay\nDescribe and Modify argument:\n\"graphname.SizeToDisplay { = 'value ' }\"\nTable 3.216:\nParameter\nDescription\ngraphname\nThe graph control in the DataWindow for which you want to get or set\nadjustability.\n"}
{"page": 414, "text": "DataWindow Object Properties\nPage 414\nParameter\nDescription\nvalue\n(exp) A boolean number specifying whether to adjust the size of the graph to\nthe display.\nValues are:\n\u2022 0 -- False, do not adjust the size of the graph.\n\u2022 1 -- True, adjust the size of the graph.\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Size To Display\noption.\nExamples\nstring setting\nsetting = dw1.Object.graph_1.SizeToDisplay\ndw1.Object.graph_1.SizeToDisplay = 0\nsetting = dw1.Describe(\"graph_1.SizeToDisplay\")\ndw1.Modify(\"graph_1.SizeToDisplay=0\")\n3.3.195 SlideLeft\nDescription\nWhether the control moves to the left when other controls to the left leave empty space\navailable. This property is for use with read-only controls and printed reports. It should not be\nused with data entry fields or controls.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, Line, Oval, Picture, Rectangle, Report,\nRoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.SlideLeft\nDescribe and Modify argument:\n\"controlname.SlideLeft { = ' value ' }\"\nTable 3.217:\nParameter\nDescription\ncontrolname\nThe name of the control for which you want to get or set the Slide setting.\nvalue\n(exp) Whether the control slides left when there is empty space to its left.\nValues are:\n"}
{"page": 415, "text": "DataWindow Object Properties\nPage 415\nParameter\nDescription\n\u2022 Yes -- The control will slide left into available space.\n\u2022 No -- The control will remain in position.\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab, Slide Left check box.\nExamples\nstring setting\nsetting = dw1.Object.graph_1.SlideLeft\ndw1.Object.emp_lname.SlideLeft = \"yes\"\nsetting = dw1.Describe(\"graph_1.SlideLeft\")\ndw1.Modify(\"emp_lname.SlideLeft=yes\")\n3.3.196 SlideUp\nDescription\nWhether the control moves up when other controls above it leave empty space available. This\nproperty is for use with read-only controls and printed reports. It should not be used with data\nentry fields or controls.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, Line, Oval, Picture, Rectangle, Report,\nRoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.SlideUp\nDescribe and Modify argument:\n\"controlname.SlideUp { = ' value ' }\"\nTable 3.218:\nParameter\nDescription\ncontrolname\nThe name of the control for which you want to get or set the Slide setting.\nvalue\n(exp) How the control slides up when there is empty space above it.\nValues are:\n\u2022 AllAbove -- Slide the control up if all the controls in the row above it are\nempty.\n\u2022 DirectlyAbove -- Slide the column or control up if the controls directly\nabove it are empty.\n"}
{"page": 416, "text": "DataWindow Object Properties\nPage 416\nParameter\nDescription\n\u2022 No -- The control will not slide up.\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab, Slide Up check box.\nExamples\nstring setting\nsetting = dw1.Object.graph_1.SlideUp\ndw1.Object.emp_lname.SlideUp = \"no\"\nsetting = dw1.Describe(\"graph_1.SlideUp\")\ndw1.Modify(\"emp_lname.SlideUp=no\")\n3.3.197 Sort\nDescription\nSort criteria for a newly created DataWindow. To specify sorting for existing DataWindows,\nsee the SetSort and Sort methods.\nApplies to\nTable keywords in DataWindow syntax\nSyntax\nDataWindow syntax for Create method:\nTable ( ... Sort = stringexpression ... )\nTable 3.219:\nParameter\nDescription\nstringexpressionA string whose value represents valid sort criteria. See the SetSort method\nfor the format for sort criteria. If the criteria string is null, PowerBuilder\nprompts for a sort specification when it displays the DataWindow.\n3.3.198 Spacing\nDescription\nThe gap between categories in a graph.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.Spacing\nDescribe and Modify argument:\n"}
{"page": 417, "text": "DataWindow Object Properties\nPage 417\n\"graphname.Spacing { = 'integer ' }\"\nTable 3.220:\nParameter\nDescription\ngraphname\nThe name of the graph control in the DataWindow for which you want to get\nor set the spacing.\ninteger\n(exp) An integer specifying the gap between categories in the graph. You\nspecify the value as a percentage of the width of the data marker. For\nexample, in a bar graph, 100 is the width of one bar, 50 is half a bar, and so\non. Integer can be a DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Spacing option.\nExamples\nstring setting\nsetting = dw1.Object.graph_1.Spacing\ndw1.Object.graph_1.Spacing = 120\nsetting = dw1.Describe(\"graph_1.Spacing\")\ndw1.Modify(\"graph_1.Spacing=120\")\n3.3.199 Sparse\nDescription\nThe names of repeating columns that will be suppressed in the DataWindow.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Sparse\nDescribe and Modify argument:\n\"DataWindow.Sparse { = 'list ' }\"\nTable 3.221:\nParameter\nDescription\nlist\n(exp) A tab-separated list of column names to be suppressed. List can be a\nquoted DataWindow expression.\nCreate method (include at the end of the DataWindow syntax):\nSparse ( names = \"col1~tcol2~tcol3 ...\")\nUsage\nIn the painter\n"}
{"page": 418, "text": "DataWindow Object Properties\nPage 418\nSet the value using Rows>Suppress Repeating Values.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Sparse\ndw1.Object.DataWindow.Sparse = 'col1~tcol2'\nsetting = dw1.Describe(\"DataWindow.Sparse\")\ndw1.Modify(\"DataWindow.Sparse='col1~tcol2'\")\n3.3.200 Storage\nDescription\nThe amount of virtual storage in bytes that has been allocated for the DataWindow object.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Storage\nDescribe argument:\n\"DataWindow.Storage\"\nUsage\nCanceling a query that uses too much storage\nYou can check this property in the script for the RetrieveRow event in the DataWindow\ncontrol and cancel a query if it is consuming too much storage.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Storage\nsetting = dw1.Describe(\"DataWindow.Storage\")\nIF Long(setting) > 50000 THEN RETURN 1\n3.3.201 StoragePageSize\nDescription\nThe default page size for DataWindow storage.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.StoragePageSize\nDescribe and Modify argument:\n\"DataWindow.StoragePageSize { = 'size ' }\"\n"}
{"page": 419, "text": "DataWindow Object Properties\nPage 419\nTable 3.222:\nParameter\nDescription\nsize\nTwo values are provided to enable the DataWindow to use the available\nvirtual memory most efficiently in the current environment:\n\u2022 LARGE (Recommended)\n\u2022 MEDIUM\nUsage\nSet this property to avoid out of memory errors when performing large retrieve, import, or\nRowsCopy operations. The property must be set before the operation is invoked.\nExamples\ndw1.Modify(\"datawindow.storagepagesize='LARGE'\")\ndw1.object.datawindow.storagepagesize='large'\n3.3.202 Summary.property\nSee Bandname.property.\n3.3.203 SuppressEventProcessing\nDescription\nWhether the ButtonClicked or ButtonClicking event is fired for this particular button.\nApplies to\nButton controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.buttonname.SuppressEventProcessing\nDescribe and Modify argument:\n\"buttonname.SuppressEventProcessing { = ' value ' }\"\nTable 3.223:\nParameter\nDescription\nbuttonname\nThe name of the button control for which you want to suppress event\nprocessing.\nvalue\nWhether event processing is to occur.\nValues are:\nYes -- The event should not be fired.\nNo -- The event should be fired (default).\nUsage\n"}
{"page": 420, "text": "DataWindow Object Properties\nPage 420\nIn the painter\nSelect the control and set the value in the Properties view, General tab.\nExamples\nstring setting\ndw1.Object.b_name.SuppressEventProcessing = \"Yes\"\nsetting = dw1.Describe(\"b_name.SuppressEventProcessing\")\ndw1.Modify(\"b_name.SuppressEventProcessing = 'No'\")\n3.3.204 Syntax\nDescription\nThe complete syntax for the DataWindow.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Syntax\nDescribe argument:\n\"DataWindow.Syntax\"\nExamples\nsetting = dw1.Object.DataWindow.Syntax\nsetting = dw1.Describe(\"DataWindow.Syntax\")\n3.3.205 Syntax.Data\nDescription\nThe data in the DataWindow object described in parse format (the format required by the\nDataWindow parser).\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Syntax.Data\nDescribe argument:\n\"DataWindow.Syntax.Data\"\nUsage\nUse this property with the Syntax property to obtain the description of the DataWindow\nobject and the data. Using this information, you can create a syntax file that represents both\nthe structure and data of a DataWindow at an instant in time. You can then use the syntax file\n"}
{"page": 421, "text": "DataWindow Object Properties\nPage 421\nas a DropDownDataWindow containing redefined data at a single location or to mail this as a\ntext object.\n3.3.206 Syntax.Modified\nDescription\nWhether the DataWindow syntax has been modified by a function call or user intervention.\nCalling the Modify, SetSort, or SetFilter method or changing the size of the DataWindow\ngrid automatically sets Syntax.Modified to Yes.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Syntax.Modified\nDescribe and Modify argument:\n\"DataWindow.Syntax.Modified { = value }\"\nTable 3.224:\nParameter\nDescription\nvalue\nWhether the DataWindow syntax has been modified.\nValues are:\n\u2022 Yes -- DataWindow syntax has been modified.\n\u2022 No -- DataWindow has not been modified.\nUsage\nUse this property in Modify to set Syntax.Modified to No after you cause a change in the\nsyntax that does not affect the user (such as setting preview on).\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Syntax.Modified\ndw1.Object.DataWindow.Syntax.Modified = \"No\"\nsetting = dw1.Describe(\"DataWindow.Syntax.Modified\")\ndw1.Modify(\"DataWindow.Syntax.Modified=No\")\n3.3.207 Table (for Create)\nDescription\nThe section of the DataWindow syntax that specifies information about the DataWindow's\ndatabase table, including the name of the update table.\nUse Table in DataWindow syntax for the Create method.\nSyntax\nDoes not apply.\n"}
{"page": 422, "text": "DataWindow Object Properties\nPage 422\nUsage\nUse this property to redefine a DataWindow result set. You can add a column, change the\ndatatype of a column, or make other changes to the table section of your DataWindow\ninvolving properties that are not accessible through Modify calls or dot notation.\nCaution\nWhen you use this property to redefine the result set, you must redefine the table\nsection in its entirety.\nYou can call the GetItem and SetItem methods to access columns added using this\nproperty, but the columns do not display in the DataWindow unless you call Modify(\"create\ncolumn(...)\") to add them.\nTo redefine your table section:\n1. Export your DataWindow object to a DOS file.\n2. Copy only the table section into your script.\n3. Modify the table section to meet your needs.\n4. Put the new table definition into a string variable. Change existing double quotation marks\n(\") in the string to single quotation marks (') and change the tilde quotation marks to tilde\ntilde single quotation marks (~~').\n5. Call Modify. Modifying the table section of your DataWindow causes the DataWindow to\nbe reset.\n6. (Optionally) Call Modify to add the column to the DataWindow display.\n3.3.208 Table (for InkPicture and TableBlobs)\nDescription\nThe name of the database table that contains the blob(s).\nApplies to\nInkPicture and TableBlob controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Table\nDescribe and Modify argument:\n\"controlname.Table { = 'tablename ' }\"\nTable 3.225:\nParameter\nDescription\ncontrolname\nThe name of the control in the DataWindow.\n"}
{"page": 423, "text": "DataWindow Object Properties\nPage 423\nParameter\nDescription\ntablename\n(exp) A string specifying the name of the table that contains the blob data.\nTablename can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Definition tab, Table option. For\nInkPicture controls, the table contains a large binary column to store ink overlay data and a\nlarge binary column to hold a background image for the InkPicture control. For TableBlob\ncontrols, the table contains the large binary database object you want to insert into the\nDataWindow.\nExamples\nsetting = dw1.Object.inkpic_1.Table\ndw1.Object.inkpic_1.Table = \"inkpictable\"\n \nsetting = dw1.Describe(\"inkpic_1.Table\")\ndw1.Modify(\"inkpic_1.Table='inkpictable'\")\n \nsetting = dw1.Object.blob_1.Table\ndw1.Object.blob_1.Table = \"emp_pictures\"\nsetting = dw1.Describe(\"blob_1.Table\")\ndw1.Modify(\"blob_1.Table='emp_pictures'\")\n3.3.209 Table.property\nDescription\nProperties for the DataWindow's DBMS connection.\nYou can also specify stored procedures for update activities. For information, see\nTable.sqlaction.property.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Table.property\nDescribe and Modify argument:\n\"DataWindow.Table.property { = value }\"\nTable 3.226:\nParameter\nDescription\nproperty\nA property for the DataWindow's DBMS connection. Properties and\nappropriate values are listed in the table below.\nvalue\nThe value to be assigned to the property.\n \n"}
{"page": 424, "text": "DataWindow Object Properties\nPage 424\nTable 3.227:\nProperty\nfor Table\nValue\nArguments\n(Read only) A string containing retrieval argument names and types for the\nDataWindow.\nCrosstabData A string containing a tab-separated list of the expressions used to calculate the\nvalues of columns in a crosstab DataWindow.\nData.Storage A string indicating whether table data is to be kept in memory or offloaded to\ndisk.\nValues are:\n\u2022 Memory (Default) -- Table data is to be kept in memory.\n\u2022 Disk -- Table data is to be offloaded to disk.\nPainter: Rows>Retrieve Options>Rows to Disk.\nDelete.Argument\n(Internal use only) A string containing arguments to pass to the delete method.\nDelete.Method(Internal use only) The name of the method.\nDelete.Type (Internal use only) Currently stored procedure is the only type implemented.\nFilter\n(exp) A string containing the filter for the DataWindow. Filters are\nexpressions that can evaluate to true or false. The Table.Filter property filters\nthe data before it is retrieved. To filter data already in the DataWindow's\nbuffers, use the Filter property or the SetFilter and Filter methods.\nThe filter string can be a quoted DataWindow expression.\nPainter: Rows>Filter.\nGridColumns (Read-only) The grid columns of a DataWindow.\nInsert.Argument\n(Internal use only) A string containing arguments to pass to the insert method.\nInsert.Method(Internal use only) The name of the method.\nInsert.Type\n(Internal use only) Currently stored procedure is the only type implemented.\nProcedure\nA string that contains the number of the result set returned by the stored\nprocedure to populate the DataWindow object.\nYou can use this property only if your DBMS supports stored procedures.\nUse this property to change the stored procedure or to change the data source\nfrom a SELECT statement or script to a stored procedure (see the example).\nPainter: Set when Stored Procedure is selected as a data source.\nSelect\nA string containing the SQL SELECT statement that is the data source for the\nDataWindow.\nUse this property to specify a new SELECT statement or change the data\nsource from a stored procedure or Script to a SELECT statement.\nTable.Select has several advantages over the SetSqlSelect method:\n"}
{"page": 425, "text": "DataWindow Object Properties\nPage 425\nProperty\nfor Table\nValue\n\u2022 It is faster. PowerBuilder does not validate the statement until retrieval.\n\u2022 You can change data source for the DataWindow. For example, you can\nchange from a SELECT to a Stored Procedure.\n\u2022 You can use none or any of the arguments defined for the DataWindow\nobject in the SELECT. You cannot use arguments that were not previously\ndefined for the DataWindow object.\n\u2022 Describe always tries to return a SQL SELECT statement. If the database is\nnot connected and the property's value is a PBSELECT statement, Describe\nwill convert it to a SQL SELECT statement if a SetTransObject method has\nbeen executed.\nIf you are using describeless retrieval (the StaticBind database parameter is set\nto 1), you cannot use the Select property.\nPainter: Set when Select or Quick Select is selected as a data source.\nSelect.Attribute(Read-only) A string containing the PBSELECT statement for the\nDataWindow.\nSort\n(exp) A string containing the sort criteria for the DataWindow, for example,\n\"1A,2D\" (column 1 ascending, column 2 descending). The Table.Sort\nproperty sorts the data before it is retrieved. To sort data already in the\nDataWindow's buffers, use the SetSort and Sort methods.\nThe value for Sort is quoted and can be a DataWindow expression.\nPainter: Rows>Sort.\nSQLSelect\nThe most recently executed SELECT statement. Setting this has no effect. See\nSelect in this table.\nUpdate.Argument\n(Internal use only) A string containing arguments to pass to the update\nmethod.\nUpdate.Method(Internal use only) The name of the method.\nUpdate.Type (Internal use only) Currently stored procedure is the only type implemented.\nUpdateKey\nInPlace\nWhether the key column can be updated in place or the row has to be deleted\nand reinserted. This value determines the syntax PowerBuilder generates\nwhen a user modifies a key field:\n\u2022 Yes -- Use the UPDATE statement when the key is changed so that the key\nis updated in place.\n\u2022 No -- Use a DELETE and an INSERT statement when the key is changed.\nCaution\nWhen there are multiple rows in a DataWindow object and the user switches\nkeys or rows, updating in place might fail due to DBMS duplicate restrictions.\n"}
{"page": 426, "text": "DataWindow Object Properties\nPage 426\nProperty\nfor Table\nValue\nPainter: Rows>Update Properties, Key Modification.\nUpdateTable A string specifying the name of the database table used to build the Update\nsyntax.\nPainter: Rows>Update Properties, Table to Update.\nUpdateWhereAn integer indicating which columns will be included in the WHERE clause\nof the Update statement. The value of UpdateWhere can impact performance\nor cause lost data when more than one user accesses the same tables at the\nsame time.\nValues are:\n\u2022 0 -- Key columns only (risk of overwriting another user's changes, but fast).\n\u2022 1 -- Key columns and all updatable columns (risk of preventing valid\nupdates; slow because SELECT statement is longer).\n\u2022 2 -- Key and modified columns (allows more valid updates than 1 and is\nfaster, but not as fast as 0).\nFor more about the effects of this setting, see the discussion of the Specify\nUpdate Characteristics dialog box in Section 6.4, \u201cControlling Updates in\nDataWindow objects\u201d in Users Guide.\nPainter: Rows>Update Properties, Where Clause for Update/Delete.\nExamples\nsetting = dw1.Object.DataWindow.Table.Sort\ndw1.Object.DataWindow.Table.Data.Storage = \"disk\"\ndw1.Object.DataWindow.Table.Filter = \"salary>50000\"\nsetting = dw1.Describe(\"DataWindow.Table.Sort\")\ndw1.Modify(\"DataWindow.Table.Filter='salary>50000'\")\ndw_l.Modify (\" DataWindow.Table.Procedure= &\n      '1 Execute MyOwner MyProcName;1 &\n    @NameOfProcArg=:NameOfDWArg, &\n      @NameOfProcArg=:NameOfDWArg...' \")\nsqlvar = 'SELECT ... WHERE ...'\ndw1.Modify(\"DataWindow.Table.Select='\" + sqlvar + \"'\")\n3.3.210 Table.sqlaction.property\nDescription\nThe way data is updated in the database. When the Update method is executed, it can\nsend UPDATE, INSERT, and DELETE SQL statements to the DBMS. You can specify\nthat a stored procedure be used instead of the default SQL statement for each type of data\nmodification.\nApplies to\nDataWindows\n"}
{"page": 427, "text": "DataWindow Object Properties\nPage 427\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Table.sqlaction.property \nDescribe and Modify argument:\n\"DataWindow.Table.sqlaction.property { = value }\"\nTable 3.228:\nParameter Description\nsqlaction\nThe SQL statement that would ordinarily be executed as part of a database\nupdate.\nValues are:\n\u2022 UPDATE\n\u2022 INSERT\n\u2022 DELETE\nproperty\nA property for sqlaction. Properties and appropriate values are listed in the table\nbelow.\nvalue\nThe value to be assigned to the property.\nTable 3.229:\nProperty\nfor Table\nValue\nArguments A string specifying the arguments used in the stored procedure. The string takes\nthis format:\n(\"argname\", valuetype { =(\"valuesrc\" {, datasrc, paramtype } )\nArgname is the name of the stored procedure parameter.\nValuetype is one of the keywords described below. Datasrc and paramtype\napply to the COLUMN keyword.\nValuesrc is the column, computed field, or expression that produces the value to\nbe passed to the stored procedure.\nMethod\nA string specifying the name of the stored procedure. The stored procedure is\nused only if the value of Type is SP.\nType\nSpecifies whether the database update is performed using a stored procedure.\nValues are:\n\u2022 SP -- The update is performed using a stored procedure.\n\u2022 SQL -- The update is performed using standard SQL syntax (default).\n"}
{"page": 428, "text": "DataWindow Object Properties\nPage 428\nTable 3.230:\nKeyword\nfor\nvaluetype\nDescription\nCOLUMN The argument value will be taken from the table and column named in valuesrc.\nValuesrc has the form:\n\"tablename.column\"\nFor COLUMN, you must also specify whether the data is the new or original\ncolumn value. Values for datasrc are:\n\u2022 NEW\nThe new column value that is being sent to the database.\n\u2022 ORIG\nThe value that the DataWindow originally read from the database.\nYou can also specify the type of stored procedure parameter. Values for\nparamtype are:\n\u2022 IN\n(Default) An input parameter for the procedure.\n\u2022 OUT\nAn output parameter for the procedure. The DataWindow will assign the\nresulting value to the current row and column (usually used for identity and\ntimestamp columns).\n\u2022 INOUT\nAn input and output parameter.\nA sample string for providing a column argument is:\n(\"empid\", COLUMN=(\"employee.empid\", ORIG, IN))\nCOMPUTE The computed field named in valuesrc is the source of the value passed to the\nstored procedure.\nA sample string for providing a computed field argument is:\n(\"newsalary\", COMPUTE=(\"salary_calc\"))\nEXPRESSION\nThe expression specified in valuesrc is evaluated and passed to the stored\nprocedure.\nA sample string for providing an expression argument is:\n(\"dept_name\", EXPRESSION=(\"LookUpDisplay(dept_id)\"))\nUNUSED\nNo value is passed to the stored procedure.\nUsage\n"}
{"page": 429, "text": "DataWindow Object Properties\nPage 429\nIn the painter\nSet the values using Rows>Stored Procedure Update. Select the tab page for the SQL\ncommand you want to associate with a stored procedure.\nIn code\nIf you enable a DataWindow object to use stored procedures to update the database when it is\nnot already using stored procedures, you must change Type to SP first. Setting Type ensures\nthat internal structures are built before you set Method and Arguments. If you do not change\nType to SP, then setting Method or Arguments will fail.\nWhen the values you specify in code are nested in a longer string, you must use the\nappropriate escape characters for quotation marks.\nExamples\nEach is all on one line:\ndw_x.Describe(\"DataWindow.Table.Delete.Method\")\ndw_x.Describe(\"DataWindow.Table.Delete.Arguments\")\ndw_x.Modify(\"DataWindow.Table.Delete.Type=SP\")\ndw_x.Modify(\"DataWindow.Table.Delete.Arguments = ((~\"id~\",\n COLUMN=(~\"department.dept_id!~\", ORIG)))\") \ndw_x.Modify(\"DataWindow.Table.Delete.Method = ~\"spname~\"\")\n3.3.211 TabSequence\nDescription\nThe number assigned to the specified control in the DataWindow's tab order.\nApplies to\nButton, Column, Computed Field, Graph, OLE Object, OLE Database Blob, Picture, and\nText controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.TabSequence\nDescribe and Modify argument:\n\"columnname.TabSequence { = number }\"\nTable 3.231:\nParameter Description\ncolumnnameThe name of the column whose tab order you want to get or set.\nnumber\nA number from 0 to 32000 specifying the position of the column in the tab\norder. A value of 0 takes the column out of the tab order and makes it read-only.\nUsage\nIn the painter\nSet the value using Format>Tab Order.\nExamples\n"}
{"page": 430, "text": "DataWindow Object Properties\nPage 430\nstring setting\nsetting = dw1.Object.emp_name.TabSequence\ndw1.Object.emp_name.TabSequence = 10\nsetting = dw1.Describe(\"emp_name.TabSequence\")\ndw1.Modify(\"emp_name.TabSequence = 10\")\n3.3.212 Tag\nDescription\nThe tag value of the specified control. The tag value can be any text you see fit to use in your\napplication.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, Oval, Picture, Rectangle, Report,\nRoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Tag\nDescribe and Modify argument:\n\"controlname.Tag { = ' string ' }\"\nTable 3.232:\nParameter Description\ncontrolnameThe name of a control in the DataWindow.\nstring\n(exp) A string specifying the tag for controlname. String is quoted and can be a\nDataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Tag option.\nExamples\nsetting = dw1.Object.blob_1.Tag\ndw1.Object.graph_1.Tag = 'Graph of results'\nsetting = dw1.Describe(\"blob_1.Tag\")\ndw1.Modify(\"graph_1.Tag = 'Graph of results'\")\n3.3.213 Target\nDescription\nThe columns and expressions whose data is transferred from the DataWindow to the OLE\nobject.\nApplies to\nOLE Object controls\nSyntax\n"}
{"page": 431, "text": "DataWindow Object Properties\nPage 431\nPowerBuilder dot notation:\ndw_control.Object.oleobjectname.Target\nDescribe and Modify argument:\n\"oleobjectname.Target { = ' columnlist ' }\"\nTable 3.233:\nParameter\nDescription\noleobjectnameThe name of the OLE Object control for which you want to get or set the data\nto be transferred.\ncolumnlist\n(exp) A list of the columns or expressions whose data is transferred to the OLE\nobject. If there is more than one, separate them with commas. Columnlist can\nbe a quoted DataWindow expression.\nUsage\nGroupBy and Range also affect the data that is transferred to the OLE object.\nIn the painter\nSelect the control and set the value in the Properties view, Data tab, Target Data option.\nExamples\nsetting = dw1.Object.ole_1.Target\ndw1.Object.ole_1.Target = 'lname, Len(companyname)'\nsetting = dw1.Describe(\"ole_1.Target\")\ndw1.Modify(\"ole_1.Target = 'lname, Len(companyname)'\")\n3.3.214 Template\nDescription\nThe name of a file that will be used to start the application in OLE.\nApplies to\nTableBlob controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.tblobname.Template\nDescribe and Modify argument:\n\"tblobname.Template { = ' string ' }\"\nTable 3.234:\nParameter Description\ntblobname\nThe name of a TableBlob control in the DataWindow.\nstring\n(exp) A string whose value is the file name of an application that is to be the\nOLE template. String is quoted and can be a DataWindow expression.\nUsage\n"}
{"page": 432, "text": "DataWindow Object Properties\nPage 432\nIn the painter\nSelect the control and set the value in the Properties view, Definition tab, File Template\noption.\nExamples\nsetting = dw1.Object.blob_1.Template\ndw1.Object.blob_1.Template='Excel.xls'\nsetting = dw1.Describe(\"blob_1.Template\")\ndw1.Modify(\"blob_1.Template='Excel.xls'\")\n3.3.215 Text\nDescription\nThe text of the specified control.\nApplies to\nButton, GroupBox, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.textname.Text\nDescribe and Modify argument:\n\"textname.Text { = ' string ' }\"\nTable 3.235:\nParameter Description\ntextname\nThe name of a control in the DataWindow.\nstring\n(exp) A string specifying the text for textname. To specify an accelerator key in\nthe text, include an ampersand before the desired letter. The letter will display\nunderlined. String is quoted and can be a DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Text option.\nExamples\nsetting = dw1.Object.text_1.Text\ndw1.Object.text_1.Text = \"Employee &Name\"\nsetting = dw1.Describe(\"text_1.Text\")\ndw1.Modify(\"text_1.Text='Employee &Name'\")\n3.3.216 Timer_Interval\nDescription\nThe number of milliseconds between the internal timer events. When you use time in a\nDataWindow, an internal timer event is triggered at the interval specified by Timer_Interval.\nThis determines how often time fields are updated.\n"}
{"page": 433, "text": "DataWindow Object Properties\nPage 433\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Timer_Interval\nDescribe and Modify argument:\n\"DataWindow.Timer_Interval { = number }\"\nSyntaxFromSql:\nDataWindow ( Timer_Interval = number )\nTable 3.236:\nParameter\nDescription\nnumber\nAn integer specifying the interval between timer events in milliseconds. The\ndefault is 60,000 milliseconds or one minute. The maximum value is 65,535\nmilliseconds.\nUsage\nWhen a computed field uses Now as its expression value, it refreshes the displayed value\nevery time the timer interval period elapses.\nIn the painter\nSelect the DataWindow by deselecting all controls; then set the value in the Properties view,\nGeneral tab, Timer Interval option.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Timer_Interval\ndw1.Object.DataWindow.Timer_Interval = 10000\nsetting = dw1.Describe(\"DataWindow.Timer_Interval\")\ndw1.Modify(\"DataWindow.Timer_Interval=10000\")\n3.3.217 Title\nDescription\nThe title of the graph.\nApplies to\nGraph controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.graphname.Title\nDescribe and Modify argument:\n"}
{"page": 434, "text": "DataWindow Object Properties\nPage 434\n\"graphname.Title { = 'titlestring ' }\"\nTable 3.237:\nParameter\nDescription\ngraphname\nIn the DataWindow object, the name of the Graph control for which you want\nto get or set the title\ntitlestring\nA string specifying the graph's title\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab, Title option.\nThe default expression for the Title.DispAttr.DisplayExpression property is \"title\", which\nrefers to the value of the Title property. The display expression can combine the fixed\ntext of the Title property with other text, functions, and operators. If the expression for\nTitle.DispAttr.DisplayExpression does not include the Title property, then the value of the\nTitle property will be ignored.\nFor an example, see DispAttr.fontproperty.\nExamples\nsetting = dw1.Object.gr_1.Title\ndw1.Object.gr_1.Title = 'Sales Graph'\nsetting = dw1.Describe(\"gr_1.Title\")\ndw1.Modify(\"gr_1.Title = 'Sales Graph'\")\n3.3.218 Title.DispAttr.fontproperty\nSee DispAttr.fontproperty.\n3.3.219 Tooltip.property\nDescription\nSettings for tooltips for a column or control.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, InkPicture, Line, OLE, Blob OLE,\nOval, Picture, Rectangle, Report, RoundRectangle, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Tooltip.property\nDescribe and Modify argument:\n\"controlname.Tooltip.property { = 'value ' }\"\nSyntaxFromSql:\nColumn ( Tooltip.property = value )\nText ( Tooltip.property = value )\n"}
{"page": 435, "text": "DataWindow Object Properties\nPage 435\nTable 3.238:\nParameter\nDescription\ncontrolname The control whose Tooltip properties you want to get or set.\nWhen generating DataWindow syntax with SyntaxFromSql, the Tooltip\nsettings apply to all columns or all text controls.\nproperty\nA property that applies to the tooltip of a control, as listed in the Property table\nbelow.\nvalue\nValues for the properties are shown below. Value can be a quoted\nDataWindow expression.\nTable 3.239:\nProperty\nfor Tooltip\nValue\nBackcolor\n(exp) A long specifying the color (the red, green, and blue values) to be used\nfor the background color of the tooltip box.\nThis property will take effect only when the Windows classic style option is\nselected. Select \"Enable Windows Classic Style in the IDE\" in the System\nOptions for this property to take effect when running the application from\nthe IDE; and select \"Windows classic style\" in the project painter for this\nproperty to take effect when running the application executable.\nDelay.initial (exp) An integer specifying the time in milliseconds before the tooltip box\ndisplays (minimum zero, maximum 32767). Default value is 0.\nDelay.visible (exp) An integer specifying the time in milliseconds that the tootip box\nremains visible (minimum zero, maximum 32767). Default value is 32000.\nEnabled\n(exp) Whether the tooltip is enabled. Values are:\n1 -- The tooltip is enabled.\n0 -- (Default) The tooltip is disabled.\nHasCloseButton\nReserved for future use only\nIcon\n(exp) A string for the icon to display to the left of the title in the tooltip box.\nThe default is for no icon to display. Three stock icons are available for\ndisplay in the tooltip box: Info, Warning, and Error.\n0 -- None\n1 -- Info\n2 -- Warning\n3 -- Error\nIsbubble\n(exp) Whether the tooltip box displays as a basic rectangle or a callout bubble.\nValues are:\n0 -- Displays the standard tooltip shape.\n1 -- Displays the tooltip as a rounded callout bubble.\nMaxWidth\nReserved for future use only\n"}
{"page": 436, "text": "DataWindow Object Properties\nPage 436\nProperty\nfor Tooltip\nValue\nPosition\nReserved for future use only\nTip\n(exp) A string specifying the text for the tooltip. If you use an expression,\nmake sure the result is converted to a string.\nTitle\n(exp) A string specifying the tooltip box title. If you use an expression, make\nsure the result is converted to a string.\nTextcolor\n(exp) A long expression specifying the color (the red, green, and blue values)\nto be used as the control's tooltip color.\nThis property will take effect only when the Windows classic style option is\nselected. Select \"Enable Windows Classic Style in the IDE\" in the System\nOptions for this property to take effect when running the application from\nthe IDE; and select \"Windows classic style\" in the project painter for this\nproperty to take effect when running the application executable.\nUsage\nIn the painter\nSelect the control and set the value on the Tooltip tab of the Properties view.\nNot available for columns or controls in RichText, Graph, or OLE DataWindow objects.\nIf you want to add a tooltip to an InkPicture in a DataWindow, that InkPicture must not be\nenabled.\nExamples\ndw_1.Object.oval_1.Tooltip.Color = RGB(255, 0, 128)\nls_data = dw_1.Describe(\"oval_1.Tooltip.Color\")\ndw_1.Modify(\"emp_name.Tooltip.Color='11665407'\")\nSQLCA.SyntaxFromSQL(sql_syntax, &\n   \"Style(...) Column(Tooltip.Delay.Visible=15 ...) &\n    ...\",    ls_Errors)\nSQLCA.SyntaxFromSQL(sql_syntax, &\n  \"Style(...) Column(Tooltip.TextColor=11665407 ...)\"&\n  , ls_Errors)\n3.3.220 Trail_Footer\nDescription\nWhether the footer of a nested report is displayed at the end of the report or at the bottom\nof the page. Trail_Footer applies only to reports in a composite DataWindow. Setting\nTrail_Footer to No forces controls following the report onto a new page.\nApplies to\nReport controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.reportname.Trail_Footer\nDescribe and Modify argument:\n"}
{"page": 437, "text": "DataWindow Object Properties\nPage 437\n\"reportname.Trail_Footer { = value }\"\nTable 3.240:\nParameter\nDescription\nreportname\nThe name of the report control for which you want to get or set Trail_Footer.\nvalue\nWhether the report's footer trails the last line of the report or appears at the\nbottom of the page.\nValues are:\nYes -- The footer appears right after the last line of data in the report.\nNo -- The footer appears at the bottom of the page, forcing any data following\nthe report onto the following page.\nExamples\nstring setting\nsetting = dw1.Object.rpt_1.Trail_Footer\ndw1.Object.rpt_1.Trail_Footer = \"Yes\"\nsetting = dw1.Describe(\"rpt_1.Trail_Footer\")\ndw1.Modify(\"rpt_1.Trail_Footer = Yes\")\n3.3.221 Trailer.#.property\nSee Bandname.property.\n3.3.222 Transparency (columns and controls)\nDescription\nSettings for the transparency of the text in a control.\nApplies to\nButton, Column, Computed Field, GroupBox, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Transparency\nDescribe and Modify argument:\n\"controlname.Transparency { = 'value ' }\"\nTable 3.241:\nParameter\nDescription\ncontrolname\nThe name of the column or control in the DataWindow for which you want to\nspecify the percentage transparency for the text of the column or control.\nvalue\n(exp) An integer in the range 0 to 100, where 0 means that the text\nbackground is opaque and 100 that it is completely transparent.\nUsage\nIn the painter\n"}
{"page": 438, "text": "DataWindow Object Properties\nPage 438\nSelect the control and set the value in the Font tab of the Properties view.\nUsing Transparency with fonts\nThe Transparency property works with fonts, but only on screen. Text with\ntransparent properties appears blurry in PDF files. The transparent text does not\ndisplay in print unless you use True Type fonts.\nIn Windows Vista, ClearType anti-aliasing conflicts with the transparency settings and causes\nthe fonts to appear blurred. Turn off ClearType to avoid this problem; font transparency will\nwork, but the fonts will not be smoothed. You can also avoid using ClearType fonts.\nExamples\nsetting = dw_1.Object.cb_1.Transparency\ndw_1.Object.cb_1.Transparency = 50\n3.3.223 Transparency (picture controls in DataWindows)\nDescription\nSettings for the transparency of a picture control. This feature is not supported in the\nRichText and OLE processing styles.\nApplies to\nPicture controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Transparency\nDescribe and Modify argument:\n\"controlname.Transparency { = 'value ' }\"\nTable 3.242:\nParameter\nDescription\ncontrolname\nThe name of the picture control in the DataWindow for which you want to\nspecify the percentage transparency.\nvalue\n(exp) An integer in the range 0 to 100, where 0 means that the picture is\nopaque and 100 that it is completely transparent.\nUsage\nIn the painter\nSelect the control and set the value in the General tab of the Properties view.\nExamples\ndw_1.Object.p_1.Transparency = 50\n3.3.224 Transparency (DataWindow objects)\nDescription\n"}
{"page": 439, "text": "DataWindow Object Properties\nPage 439\nSetting that controls the transparency of the background/primary gradient color.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.transparency\nDescribe and Modify argument:\n\"DataWindow (transparency = { integer } )\"\nTable 3.243:\nParameter Description\ninteger\nAn integer in the range 0 to 100, where 0 means that the primary color\n(background) is opaque and 100 that it is completely transparent.\nUsage\nIn the painter\nSelect the DataWindow object and set the value on the Background tab of the Properties\nview.\nIf you save to an EMF or WMF, the properties on the Background tab are not saved with the\nDataWindow.\nSee also\nBrushmode\nColor\n3.3.225 Tree.property\nDescription\nSettings for a TreeView DataWindow.\nApplies to\nTreeView DataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Tree.property\nDescribe and Modify argument:\n\"DataWindow.Tree.property { = value } \"\nTable 3.244:\nParameter\nDescription\nproperty\nA property that controls the appearance or behavior of the TreeView\nDataWindow. Properties and their settings are listed in the table below.\n"}
{"page": 440, "text": "DataWindow Object Properties\nPage 440\nParameter\nDescription\nvalue\n(exp) A string value for the file name of the tree node icon in the detail band.\nValue can be a quoted DataWindow expression.\n \nTable 3.245:\nProperty for\nTree\nValue\nDefaultExpandToLevel\nA long value that is the default level of expansion for the TreeView\nDataWindow. For example, if the default level is 2, only data with a level\nless than or equal to 2 is expanded by default.The value must represent a\nvalid level.\nPainter: Expand To Level By Default drop-down list on the General page in\nthe Properties view. The list displays the levels that have been created for the\nDataWindow.\nIndent\nA long value in the units specified for the DataWindow that defines the\nposition of the state icon. The state icon is a plus (+) or minus (-) sign that\nindicates whether the tree node is in a collapsed or expanded state. The icon's\nindent indicates the level of the node in the tree. The X position of the state\nicon is the X position of its parent plus value.\nPainter: Select or enter a value in the Indent Value box on the General page.\nSelectNodeByMouse\nA boolean value that indicates whether you can select a tree node by clicking\nthe node with the mouse.\nValues are:\nYes -- You can select a tree node with a mouse-click (default).\nNo -- You cannot select a tree node with a mouse-click.\nPainter: Node By Mouse check box.\nShowConnectLines\nA boolean value that indicates whether lines connecting parents and\nchildren display in the DataWindow object. If you want to show lines\nconnecting rows in the detail band to their parent, you must also set\nShowLeafNodeConnectLines.\nValues are:\nYes -- Display connecting lines (default).\nNo -- Do not display connecting lines.\nPainter: Show Lines check box.\nShowLeafNodeConnectLines\nA boolean value that indicates whether lines connecting rows in the detail\nband to their parent display in the DataWindow object. This property is\ndisabled if Show Lines box is not set.\nValues are:\nYes -- Display connecting lines (default).\n"}
{"page": 441, "text": "DataWindow Object Properties\nPage 441\nProperty for\nTree\nValue\nNo -- Do not display connecting lines.\nPainter: Connect Leaf Nodes check box.\nShowTreeNodeIcon\nA boolean value that indicates whether tree node icons for level and detail\nbands display. If this property is not set, the Expanded and Collapsed Tree\nNode Icon File properties on the General properties page for each TreeView\nlevel are disabled.\nValues are:\nNo -- Do not display tree node icons (default).\nYes -- Display tree node icons.\nPainter: Use Tree Node Icon check box.\nStateIconAlignMode\nA long value that indicates how the state icon is aligned vertically with\nrespect to the TreeView level band.\nValues are:\n0 -- Middle (default).\n1 -- Top.\n2 -- Bottom.\nPainter: State Icon Align Mode drop-down list.\nUsage\nIn the painter\nSelect the control and set values in the Properties view, General tab.\nExamples\nThe following code sets and gets the long value that determines how many levels of the\nTreeView are expanded by default:\nlong ll_expandlevel\ndw1.Object.datawindow.tree.DefaultExpandToLevel = 1\nll_expandlevel = &\n   dw1.Object.DataWindow.Tree.DefaultExpandToLevel\nThe following code gets and sets the Indent value:\nindentVal = dw1.Object.DataWindow.Tree.indent\ndw1.Object.DataWindow.Tree.indent = 80\nThe following examples manipulate the SelectNodeByMouse property:\nif cbx_selectnodebymouse.checked then             ls_selectnodebymouse='yes' \nelse\n   ls_selectnodebymouse='no'\nend if\nls_ret=dw1.modify(\"datawindow.tree.selectnodebymouse='\"+ls_selectnodebymouse+\"'\")\nif len(ls_ret)>0 then Messagebox(\"\",ls_ret)\nend if\n"}
{"page": 442, "text": "DataWindow Object Properties\nPage 442\nls_selectnodebymouse=dw1.Describe(\"datawindow.tree.\nselectnodebymouse\")\nif lower(ls_selectnodebymouse)='no' then\n   cbx_selectnodebymouse.checked=false\nelse\n   cbx_selectnodebymouse.checked=true\nend if\ndw1.modify(\"datawindow.tree.selectnodebymouse='yes'\")\ndw1.Describe(\"datawindow.tree.selectnodebymouse\")\nThe following examples manipulate the show connecting lines properties:\nboolean lb_ShowLines, lb_ShowLeafLines\nlb_ShowLines =  &\n   dw1.Object.DataWindow.Tree.ShowConnectLines\ndw1.Object.DataWindow.Tree.ShowConnectLines='yes'\nlb_ShowLeafLines = dw1.Object.DataWindow.Tree.\nShowLeafNodeConnectLines\ndw1.Object.DataWindow.Tree.ShowLeafNodeConnectLines =&\n   'yes'\nThe following example gets the current value of the StateIconAlignMode property and sets it\nto be aligned at the top:\nls_StateIconAlignMode = dw1.Object.DataWindow.Tree.StateIconAlignMode\n//Align Top dw1.Object.DataWindow.Tree.StateIconAlignMode = 1\n3.3.226 Tree.Leaf.TreeNodeIconName\nDescription\nThe file name of the tree node icon in the detail band.\nApplies to\nTreeView DataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Tree.Leaf.TreeNodeIconName\nDescribe and Modify argument:\n\"DataWindow.Tree.Leaf.TreeNodeIconName { = value } \"\nTable 3.246:\nParameter\nDescription\nvalue\n(exp) A string value for the file name of the tree node icon in the detail band.\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the detail band by clicking the gray divider for the band. Specify a file name and\nlocation in the Tree Node Icon File box on the General tab in the Properties view. This\n"}
{"page": 443, "text": "DataWindow Object Properties\nPage 443\nproperty is disabled if Use Tree Node Icon is not set on the General tab in the Properties view\nfor the DataWindow.\nExamples\nls_LeafIcon =  &\n   dw1.Object.DataWindow.Tree.Leaf.TreeNodeIconName\ndw1.Object.DataWindow.Tree.Leaf.TreeNodeIconName =  &\n   \"c:\\pictures\\treenode.bmp\"\n3.3.227 Tree.Level.#.property\nDescription\nThe file name of the icon for a TreeView node in a TreeView level band when the icon is\nin either the expanded or collapsed state. You set the icon file name separately for each\nTreeView level band.\nApplies to\nTreeView DataWindows\nSyntax\nDescribe and Modify argument:\n\"DataWindow.Tree.Level.#.property { = value } \"\nTable 3.247:\nParameter\nDescription\n#\nThe number of the level for which you want to specify an icon. The level\nnumber must exist.\nproperty\nA property that indicates whether the icon specified is for the expanded or\ncollapsed state. Values are:\n\u2022 CollapsedTreeNodeIconName\n\u2022 ExpandedTreeNodeIconName\nvalue\n(exp) A string value that is the file name of the tree node icon in the selected\nTreeView level band.\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the level by clicking the gray divider for the band. Specify a file name and location in\nthe Collapsed Tree Node Icon File and Expanded Tree Node Icon File boxes on the General\ntab in the Properties view for the band. These properties are disabled if Use Tree Node Icon is\nnot selected on the General tab in the Properties view for the DataWindow.\nYou cannot get or set these properties using dot notation.\nExamples\nThe following example gets the name of the icon used when a level 1 node is collapsed:\n"}
{"page": 444, "text": "DataWindow Object Properties\nPage 444\nstring ls_ico\nls_ico = dw_tview.Describe  &\n (\"DataWindow.Tree.Level.1.CollapsedTreeNodeIconName\")\n3.3.228 Type\nDescription\nThe type of the control (for Describe) or the type of presentation style (for SyntaxFromSql).\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Type\nDescribe argument:\n\"controlname.Type\"\nTable 3.248:\nParameter\nDescription\ncontrolname\nThe name of the control for which you want the type. Valid values are:\ndatawindow\nbitmap (for Picture)\nbutton\ncolumn\ncompute (for Computed Field)\ngraph\ngroupbox\nline\nole\nellipse (for Oval)\nrectangle\nreport\nroundrectangle\ntableblob\ntext\nSyntaxFromSql:\nStyle ( Type = value )\nTable 3.249:\nParameter\nDescription\nvalue\nA keyword specifying the presentation style for the DataWindow object.\nKeywords are:\n(Default) Tabular\nGrid\nForm (for the Freeform style)\nCrosstab\nGraph\n"}
{"page": 445, "text": "DataWindow Object Properties\nPage 445\nParameter\nDescription\nGroup\nLabel\nNested\nOle\nRichText\nExamples\nstring setting\nsetting = dw1.Object.emp_name.Type\nsetting = dw1.Describe(\"emp_name.Type\")\nSQLCA.SyntaxFromSQL(sqlstring, &\n'Style(... Type=grid ...)', errstring)\n3.3.229 Units\nDescription\nThe unit of measure used to specify measurements in the DataWindow object. You set this in\nthe DataWindow Style dialog box when you define the DataWindow object.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Units\nDescribe argument:\n\"DataWindow.Units\"\nSyntaxFromSql:\nDataWindow ( Units = value )\nTable 3.250:\nParameter\nDescription\nvalue\nThe type of units for measurements in the DataWindow.\nValues are:\n0 -- PowerBuilder units\n1 -- Display pixels\n2 -- 1/1000 of a logical inch\n3 -- 1/1000 of a logical centimeter\nUsage\nPowerBuilder units and display pixels are adjusted for printing.\nIn the painter\n"}
{"page": 446, "text": "DataWindow Object Properties\nPage 446\nSelect the DataWindow by deselecting all controls; then set the value in the Properties view,\nGeneral tab, Units option.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Units\nsetting = dw1.Describe(\"DataWindow.Units\")\n3.3.230 Update\nDescription\nWhether the specified column is updatable. Each updatable column is included in the SQL\nstatement that the Update method sends to the database. All updatable columns should be in\nthe same database table.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Update\nDescribe and Modify argument:\n\"columnname.Update { = value }\"\nTable 3.251:\nParameter\nDescription\ncolumnname The column for which you want to get or set the updatable status\nvalue\nWhether the column is updatable.\nValues are:\nYes -- Include the column in the SQL statement for updating the database.\nNo -- Do not include the column in the SQL statement.\nUsage\nIn the painter\nSet the value using Rows>Update Properties, Updateable Columns option.\nExamples\nstring setting\nsetting = dw1.Object.emp_name.Update\ndw1.Object.emp_name.Update = \"No\"\nsetting = dw1.Describe(\"emp_name.Update\")\ndw1.Modify(\"emp_name.Update=No\")\n3.3.231 Validation\nDescription\n"}
{"page": 447, "text": "DataWindow Object Properties\nPage 447\nThe validation expression for the specified column. Validation expressions are expressions\nthat evaluate to true or false. They provide checking of data that the user enters in the\nDataWindow.\nTo set the validation expression, you can also use the SetValidate method. To check the\ncurrent validation expression, use the GetValidate method.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Validation\nDescribe and Modify argument:\n\"columnname.Validation { = ' validationstring ' }\"\nTable 3.252:\nParameter\nDescription\ncolumnname The column for which you want to get or set the validation rule..\nvalidationstring(exp) A string containing the rule that will be used to validate data entered\nin the column. Validation rules are expressions that evaluate to true or false.\nValidationstring is quoted and can be a DataWindow expression.\nUsage\nIn the painter\nSet the value using the Column Specifications view, Validation Expression option.\nUse operators, functions, and columns to build an expression. Use Verify to test it.\nExamples\nstring setting\nsetting = dw1.Object.emp_status.Validation\nsetting = dw1.Describe(\"emp_status.Validation\")\n3.3.232 ValidationMsg\nDescription\nThe message that PowerBuilder displays instead of the default message when an ItemError\nevent occurs in the column.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.ValidationMsg\nDescribe and Modify argument:\n"}
{"page": 448, "text": "DataWindow Object Properties\nPage 448\n\"columnname.ValidationMsg { = ' string ' }\"\nTable 3.253:\nParameter\nDescription\ncolumnname The column for which you want to get or set the error message displayed\nwhen validation fails.\nstring\n(exp) A string specifying the error message you want to set. String is quoted\nand can be a DataWindow expression.\nUsage\nIn the painter\nSet the value using the Column Specifications view, Validation Message option.\nExamples\nstring setting\nsetting = dw1.Object.emp_salary.ValidationMsg\ndw1.Object.emp_salary.ValidationMsg = &\n \"Salary must be between 10,000 and 100,000\"\nsetting = dw1.Describe(\"emp_salary.ValidationMsg\")\ndw1.Modify(\"emp_salary.ValidationMsg = \"  &\n\"'Salary must be between 10,000 and 100,000'\")\n3.3.233 Values (for columns)\nDescription\nThe values in the code table for the column.\nApplies to\nColumn controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.columnname.Values\nDescribe and Modify argument:\n\"columnname.Values { = ' string ' }\"\nTable 3.254:\nParameter\nDescription\ncolumnname The column for which you want to specify the contents of the code table.\nstring\n(exp) A string containing the code table values for the column. In the string,\nseparate the display values and the actual values with a tab character, and\nseparate multiple pairs of values with a slash using this format:\n\"displayval~tactualval/displayval~tactualval/ ...\"\nFor example:\n\"red~t1/white~t2\"\nString is quoted and can be a DataWindow expression.\n"}
{"page": 449, "text": "DataWindow Object Properties\nPage 449\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Edit tab.\nWhen Style Type is DropDownListBox, fill in the Display Value and Data Value columns for\nthe code table.\nWhen Style is Edit or EditMask, select the Use Code Table or Code Table check box and fill\nin the Display Value and Data Value columns for the code table.\nExamples\nsetting = dw1.Object.emp_status.Values\ndw1.Object.emp_status.Values = &\n      \"Active~tA/Part Time~tP/Terminated~tT\"\nsetting = dw1.Describe(\"emp_status.Values\")\ndw1.Modify(\"emp_status.Values = \n'Active~tA/Part Time~tP/Terminated~tT'\")\n3.3.234 Values (for graphs)\nSee Axis, Axis.property, and DispAttr.fontproperty.\n3.3.235 Vertical_Size\nDescription\nThe height of the columns in the detail area of the DataWindow object. Vertical_Size is\nmeaningful only when Type is Form (meaning the Freeform style). When a column reaches\nthe specified height, PowerBuilder starts a new column to the right of the current column.\nThe space between columns is specified in the Vertical_Spread property.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Vertical_Size = value )\nTable 3.255:\nParameter\nDescription\nvalue\nAn integer specifying the height of the columns in the detail area of the\nDataWindow object area in the units specified for the DataWindow\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n 'Style(... Vertical_Size=1225...)', errstring)\n3.3.236 Vertical_Spread\nDescription\n"}
{"page": 450, "text": "DataWindow Object Properties\nPage 450\nThe vertical space between columns in the detail area of the DataWindow object.\nVertical_Spread is meaningful only when Type is Form (meaning the Freeform style). The\nVertical_Size property determines when to start a new column.\nApplies to\nStyle keywords\nSyntax\nSyntaxFromSql:\nStyle ( Vertical_Spread = value ) \nTable 3.256:\nParameter Description\nvalue\nAn integer specifying the vertical space between columns in the detail area of\nthe DataWindow object area in the units specified for the DataWindow\nExamples\nSQLCA.SyntaxFromSQL(sqlstring, &\n   'Style(... Vertical_Spread=25...)', errstring)\n3.3.237 VerticalScrollMaximum\nDescription\nThe maximum height of the scroll box of the DataWindow's vertical scroll bar. This value is\nset by PowerBuilder based on the content of the DataWindow. Use VerticalScrollMaximum\nwith VerticalScrollPosition to synchronize vertical scrolling in multiple DataWindow objects.\nThe value is a long.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.VerticalScrollMaximum\nDescribe argument:\n\"DataWindow.VerticalScrollMaximum\"\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.VerticalScrollMaximum\nsetting = dw1.Describe(\"DataWindow.VerticalScrollMaximum\")\n3.3.238 VerticalScrollPosition\nDescription\nThe position of the scroll box in the vertical scroll bar. Use VerticalScrollMaximum with\nVerticalScrollPosition to synchronize vertical scrolling in multiple DataWindow objects.\nApplies to\n"}
{"page": 451, "text": "DataWindow Object Properties\nPage 451\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.VerticalScrollPosition\nDescribe and Modify argument:\n\"DataWindow.VerticalScrollPosition { = scrollvalue }\"\nTable 3.257:\nParameter Description\nscrollvalue A long specifying the position of the scroll box in the vertical scroll bar of the\nDataWindow\nExamples\nstring spos1\nspos1 = dw1.Object.DataWindow.VerticalScrollPosition\nstring spos1, smax, sscroll, modstring\nspos1 = & \n   dw1.Describe(\"DataWindow.VerticalScrollPosition\")\nsmax = & \n   dw1.Describe(\"DataWindow.VerticalScrollMaximum\")\nsscroll = String(Long(smax)/2)\nmodstring = \"DataWindow.VerticalScrollPosition=\" + &\n   sscroll\ndw1.Modify(modstring)\n3.3.239 Visible\nDescription\nWhether the specified control in the DataWindow is visible.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, Line, OLE, Oval, Picture, Rectangle,\nReport, RoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Visible\nDescribe and Modify argument:\n\"controlname.Visible { = 'value ' }\"\nTable 3.258:\nParameter\nDescription\ncontrolname The name of the control for which you want to get or set the Visible property.\nvalue\n(exp) Whether the specified control is visible.\nValues are:\n0 -- False; the control is not visible.\n"}
{"page": 452, "text": "DataWindow Object Properties\nPage 452\nParameter\nDescription\n1 -- True; the control is visible.\nValue can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, General tab. The Visible property\nis not supported for column controls in DataWindow objects with the Label presentation\nstyle.\nExamples\nstring setting\nsetting = dw1.Object.emp_status.Visible\ndw1.Object.emp_status.Visible = 0\ndw1.Object.emp_stat.Visible=\"0~tIf(emp_class=1,0,1)\"\nsetting = dw1.Describe(\"emp_status.Visible\")\ndw1.Modify(\"emp_status.Visible=0\")\ndw1.Modify(\"emp_stat.Visible='0~tIf(emp_cls=1,0,1)'\")\n3.3.240 VTextAlign\nDescription\nThe way text in a button is vertically aligned.\nApplies to\nButton controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.buttonname.VTextAlign\nDescribe and Modify argument:\n\"buttonname.VTextAlign { = 'value ' }\"\nTable 3.259:\nParameter\nDescription\nbuttonname\nThe name of the button for which you want to align text.\nvalue\nAn integer indicating how the button text is horizontally aligned.\nValues are:\n0 -- Center\n1 -- Top\n2 -- Bottom\n3 -- Multiline\nUsage\nIn the painter\n"}
{"page": 453, "text": "DataWindow Object Properties\nPage 453\nSelect the control and set the value in the Properties view, General tab, Vertical Alignment\noption.\nExamples\nstring setting\ndw1.Object.b_name.VTextAlign = \"0\"\nsetting = dw1.Describe(\"b_name.VTextAlign\")\ndw1.Modify(\"b_name.VTextAlign ='0'\")\n3.3.241 Width\nDescription\nThe width of the specified control.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, OLE, Oval, Picture, Rectangle, Report,\nRoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Width\nDescribe and Modify argument:\n\"controlname.Width { = ' value ' }\"\nTable 3.260:\nParameter\nDescription\ncontrolname\nThe name of the control for which you want to get or set the width.\nvalue\n(exp) The width of the controlname in the units specified for the\nDataWindow. Value can be a quoted DataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab.\nExamples\nstring setting\nsetting = dw1.Object.emp_name.Width\ndw1.Object.emp_name.Width = 250\nsetting = dw1.Describe(\"emp_name.Width\")\ndw1.Modify(\"emp_name.Width=250\")\n3.3.242 Width.Autosize\nDescription\n(RichText presentation style only) Whether the column or computed field input field adjusts\nits width according to the data it contains.\nThe Width.Autosize and Multiline properties can be set together so that the input field can\ndisplay multiple lines.\n"}
{"page": 454, "text": "DataWindow Object Properties\nPage 454\nApplies to\nColumn and Computed Field controls in the RichText presentation style\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Width.Autosize\nDescribe and Modify argument:\n\"controlname.Width.Autosize { = ' value ' }\"\nTable 3.261:\nParameter\nDescription\ncontrolname\nThe name of the column or computed field for which you want to get or set\nthe Autosize setting.\nvalue\n(exp) Whether the width of the input field adjusts according to the data it\ncontains. Values are:\n\u2022 Yes -- The width adjusts according to the data.\n\u2022 No -- The width is fixed and is set to the value of the Width property.\nUsage\nIn the painter\nSelect an input field so that it is flashing, then right-click and select Properties from the pop-\nup menu. Set the value on the property sheet, Input Field tab, Fixed Size option.\nExamples\nstring setting\nsetting = dw1.Object.emp_name.Width.Autosize\ndw1.Object.emp_name.Width.Autosize = \"yes\"\nsetting = dw1.Describe(\"emp_name.Width.Autosize\")\ndw1.Modify(\"emp_name.Width.Autosize=yes\")\n3.3.243 Width.Autosize\nDescription\n(Grid presentation style only) Whether a column adjusts its width according to the data it\ncontains.\nApplies to\nColumn controls in the Grid presentation style\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Width.Autosize\nDescribe and Modify argument:\n\"controlname.Width.Autosize { = ' value ' }\"\n"}
{"page": 455, "text": "DataWindow Object Properties\nPage 455\nTable 3.262:\nParameter\nDescription\ncontrolname\nThe name of the column for which you want to get or set the Autosize\nsetting.\nvalue\nHow the width of the column adjusts according to the data it contains. Values\nare:\n\u2022 0 -- None\n\u2022 1 -- Widest shown\n\u2022 2 -- Widest on page\n\u2022 3 -- Widest retrieved from database\nUsage\nIn the painter\nSelect a column control, then set the value in the Properties view, Position tab, Autosize\nWidth option.\n3.3.244 X\nDescription\nThe distance of the specified control from the left edge of the DataWindow object.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, OLE, Oval, Picture, Rectangle, Report,\nRoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.X\nDescribe and Modify argument:\n\"controlname.X { = ' value ' }\"\nTable 3.263:\nParameter\nDescription\ncontrolname\nThe name of the control for which you want to get or set the x coordinate.\nvalue\n(exp) An integer specifying the x coordinate of the control in the unit of\nmeasure specified for the DataWindow object. Value can be a quoted\nDataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab.\n"}
{"page": 456, "text": "DataWindow Object Properties\nPage 456\nExamples\nstring setting\nsetting = dw1.Object.emp_name.X\ndw1.Object.emp_name.X = 10\nsetting = dw1.Describe(\"emp_name.X\")\ndw1.Modify(\"emp_name.X=10\")\n3.3.245 X1, X2\nDescription\nThe distance of each end of the specified line from the left edge of the line's band.\nApplies to\nLine controls\nSyntax\nPowerBuilder dot notation:\n   dw_control.Object.controlname.X1\n   dw_control.Object.controlname.X2\nDescribe and Modify argument:\n   \"controlname.X1 { = ' value ' }\"\n   \"controlname.X2 { = ' value ' }\"\nTable 3.264:\nParameter\nDescription\ncontrolname\nThe name of the line for which you want to get or set one of the x\ncoordinates.\nvalue\n(exp) An integer specifying the x coordinate of the line in the unit of measure\nspecified for the DataWindow object. Value can be a quoted DataWindow\nexpression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab.\nExamples\nstring setting\nsetting = dw1.Object.line_1.X1\ndw1.Object.line_1.X1 = 10\ndw1.Object.line_1.X2 = 1000\nsetting = dw1.Describe(\"line_1.X1\")\ndw1.Modify(\"line_1.X1=10\")\ndw1.Modify(\"line_1.X2=1000\")\n3.3.246 XHTMLGen.Browser (obsolete)\nDescription\nA string that identifies the browser in which XHTML generated within an XSLT style sheet\nis displayed.\n"}
{"page": 457, "text": "DataWindow Object Properties\nPage 457\nObsolete property\nXHTMLGen.browser is obsolete and should not be used, because the Web\nDataWindow technology is obsolete.\nThe Web Generation tab and JavaScript Generation tab are preserved for the\nbackward compatibility only.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.XHTMLGen.Browser\nDescribe and Modify argument:\n\"DataWindow.XHTMLGen.Browser { = ' value ' }\"\nTable 3.265:\nParameter\nDescription\nvalue\n(exp) A string identifying the browser in which you want to display the\ngenerated XHTML. The value should match the browser identifier part of\nthe text string that the browser specifies in the HTTP header it sends to the\nserver. This property is usually set dynamically on the server according to the\nHTTP header returned from the client.\nRecognized strings are listed in the Usage section below.\nUsage\nIf the string specifies a browser that the DataWindow engine supports, the DataWindow\ngenerates an XSLT style sheet and JavaScript for XHTML transformation optimized for that\nbrowser. Browser-specific XSLT and JavaScript are generated only for Microsoft Internet\nExplorer 5.0 and later and Netscape 6.0 and later.\nBrowser identification strings are sent by the client to the server in the HTTP header. The\nserver component can assign the HTTP_USER_AGENT value from the HTTP header to the\nBrowser property.\nThe XML Web DataWindow generator recognizes these browsers:\nTable 3.266:\nBrowser\nHTTP header string\nMicrosoft\nInternet\nExplorer\nMozilla/4.0 (compatible; MSIE 5.0;\nMozilla/4.0 (compatible; MSIE 5.5;\nMozilla/4.0 (compatible; MSIE 6.x;\nNetscape\nMozilla/5.0(\nIn the painter\n"}
{"page": 458, "text": "DataWindow Object Properties\nPage 458\nOn the Web Generation tab in the Properties view for the DataWindow object, select\nXHTML from the Format to Configure list and select a browser from the list.\n3.3.247 XMLGen.property (obsolete)\nDescription\nSettings that specify how XML is generated, whether client-side, postback, or callback\npaging is used, the physical path to which XML is published, and the URL referenced by the\nJavaScript that transforms the XML to XHTML.\nObsolete property\nXMLGen.property is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nThe Web Generation tab and JavaScript Generation tab are preserved for the\nbackward compatibility only.\nApplies to\nDataWindow objects\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.XMLGen.property\nDescribe and Modify argument:\n\"DataWindow.XMLGen.property { = value  }\"\nTable 3.267:\nParameter\nDescription\nproperty\nOne of the following:\n\u2022 Inline\n\u2022 PublishPath\n\u2022 ResourceBase\nvalue\n(exp) Inline -- A boolean that specifies whether the XML generated for the\nXML Web DataWindow is generated inline to the XSLT transformation\nscript. Values are:\ntrue -- The XML is generated within the XSLT transformation script.\nfalse -- (default) The XML is published to a separate document.\n(exp) PublishPath -- A string that specifies the physical path of the website\nfolder to which PowerBuilder publishes the generated XML document that\ncontains the XML Web DataWindow content.\n(exp) ResourceBase -- A string that specifies the URL of the generated XML\ndocument that contains the XML Web DataWindow content.\n"}
{"page": 459, "text": "DataWindow Object Properties\nPage 459\nUsage\nInline\nThe XML published on the Internet in your XML Web DataWindow could contain sensitive\ndata, and this data might be exposed to Internet users when published to a separate document.\nFor increased security, if the Inline property to set to true, the XML is generated \"inline\" to\nthe XSLT transformation script in the page that renders the control. If only authenticated\nusers have access to this script, the security of the XML is ensured. Setting this property\nshould have no adverse side effects on the caching efficiency of the control.\nPublishPath and ResourceBase\nThe PublishPath folder must correspond to the URL specified in the ResourceBase property.\nAt runtime, after PowerBuilder generates XML content to the PublishPath folder, client-side\nJavaScript in a generated page downloads it using a reference to the ResourceBase property.\nThe JavaScript transforms the XML content to XHTML using the generated XSLT style\nsheet.\nIn the painter\nOn the Web Generation tab in the Properties view for the DataWindow object, select XML\nfrom the Format to Configure list and select the options you require.\nExamples\nThese statements set the XMLGen.ResourceBase and XMLGen.PublishPath properties:\ndw1.Object.DataWindow.XMLGen.ResourceBase= &\n   'http://www.myserver.com/xmlsource'\ndw1.Object.DataWindow.XMLGen.PublishPath= &\n   'C:\\work\\outputfiles\\xmlsource'\ndw1.Modify(\"DataWindow.XMLGen.PublishPath=\n   'C:\\Inetpub\\wwwroot\\MyWebApp\\generatedfiles'\")\ndw1.Modify(\"DataWindow.XMLGen.ResourceBase=\n   '/MyWebApp/generatedfiles'\")\nThis statement sets the XMLGen.Inline property so that XML is generated inline:\ndw1.Modify(\"DataWindow.XMLGen.Inline='1'\")\n3.3.248 XSLTGen.property (obsolete)\nDescription\nSettings that specify the physical path to which the generated XSLT style sheet is published\nand the URL referenced by the JavaScript that transforms the XML to XHTML.\nObsolete property\nXSLTGen.property is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nThe Web Generation tab and JavaScript Generation tab are preserved for the\nbackward compatibility only.\nApplies to\nDataWindow objects\n"}
{"page": 460, "text": "DataWindow Object Properties\nPage 460\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.XSLTGen.property\nDescribe and Modify argument:\n\"DataWindow.XSLTGen.property { = ' value ' }\"\nTable 3.268:\nParameter\nDescription\nproperty\nOne of the following:\n\u2022 PublishPath\n\u2022 ResourceBase\nvalue\n(exp) PublishPath -- A string that specifies the physical path of the website\nfolder to which PowerBuilder publishes the generated XSLT style sheet\n(exp) ResourceBase -- A string that specifies the URL of the generated XSLT\nstyle sheet\nUsage\nThe PublishPath folder must correspond to the URL specified in the ResourceBase property.\nAt runtime, after PowerBuilder generates the XSLT style sheet to the PublishPath folder,\nclient-side JavaScript in a generated page downloads it using a reference to the ResourceBase\nproperty. The JavaScript transforms the XML content to XHTML using the generated XSLT\nstyle sheet.\nIn the painter\nOn the Web Generation tab in the Properties view for the DataWindow object, select XSLT\nfrom the Format to Configure list and specify the ResourceBase and Publish Path locations.\nExamples\nThese statements set the XSLTGen.ResourceBase and XSLTGen.PublishPath properties:\ndw1.Object.DataWindow.XSLTGen.ResourceBase= &\n   'http://www.myserver.com/xmlsource'\ndw1.Object.DataWindow.XSLTGen.PublishPath= &\n   'C:\\work\\outputfiles\\xmlsource'\n3.3.249 Y\nDescription\nThe distance of the specified control from the top of the control's band.\nApplies to\nButton, Column, Computed Field, Graph, GroupBox, OLE, Oval, Picture, Rectangle, Report,\nRoundRectangle, TableBlob, and Text controls\nSyntax\nPowerBuilder dot notation:\n"}
{"page": 461, "text": "DataWindow Object Properties\nPage 461\ndw_control.Object.controlname.Y\nDescribe and Modify argument:\n\"controlname.Y { = ' value ' }\"\nTable 3.269:\nParameter\nDescription\ncontrolname\nThe name of the control for which you want to get or set the y coordinate.\nvalue\n(exp) An integer specifying the y coordinate of the control in the unit of\nmeasure specified for the DataWindow object. Value can be a quoted\nDataWindow expression.\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab.\nExamples\nstring setting\nsetting = dw1.Object.emp_name.Y\ndw1.Object.emp_name.Y = 100\nsetting = dw1.Describe(\"emp_name.Y\")\ndw1.Modify(\"emp_name.Y=100\")\n3.3.250 Y1, Y2\nDescription\nThe distance of each end of the specified line from the top of the line's band.\nApplies to\nLine controls\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.controlname.Y1   \ndw_control.Object.controlname.Y2\nDescribe and Modify argument:\n\"controlname.Y1 { = 'value ' }\"\n\"controlname.Y2 { = ' value ' }\"\nTable 3.270:\nParameter\nDescription\ncontrolname\nThe name of the line for which you want to get or set one of the y\ncoordinates.\nvalue\n(exp) An integer specifying the y coordinate of the line in the unit of measure\nspecified for the DataWindow object. Value can be a quoted DataWindow\nexpression.\n"}
{"page": 462, "text": "DataWindow Object Properties\nPage 462\nUsage\nIn the painter\nSelect the control and set the value in the Properties view, Position tab.\nExamples\nstring setting\nsetting = dw1.Object.line_1.Y1\ndw1.Object.line_1.Y1 = 50\ndw1.Object.line_1.Y2 = 50\nsetting = dw1.Describe(\"line_1.Y1\")\ndw1.Modify(\"line_1.Y1=50\")\ndw1.Modify(\"line_1.Y2=50\")\n3.3.251 Zoom\nDescription\nThe scaling percentage of the DataWindow object.\nApplies to\nDataWindows\nSyntax\nPowerBuilder dot notation:\ndw_control.Object.DataWindow.Zoom\nDescribe and Modify argument:\n\"DataWindow.Zoom { = value }\"\nTable 3.271:\nParameter\nDescription\nvalue\nAn integer specifying the scaling percentage of the DataWindow object. The\ndefault is 100%.\nUsage\nIn the painter\nTo see the effect of different zoom factors in Preview mode, use Design>Zoom. The zoom\nfactor you set in the painter is not used at runtime.\nLimitation\nThe zoom property is not supported for the Graph, RichText, and OLE DataWindow\nstyles.\nExamples\nstring setting\nsetting = dw1.Object.DataWindow.Zoom\ndw1.Object.DataWindow.Zoom = 50\nsetting = dw1.Describe(\"DataWindow.Zoom\")\ndw1.Modify(\"DataWindow.Zoom=50\")\n"}
{"page": 463, "text": "Accessing Data in Code\nPage 463\n4 Accessing Data in Code\nAbout this chapter\nThis chapter explains the syntax for constructing expressions that access data in a\nDataWindow object.\n4.1 Accessing data and properties in DataWindow programming\nenvironments\nIn each programming environment, you can use methods and sometimes expressions to\naccess the data and properties of a DataWindow object.\nData\nMethods for single items of data\nThese include GetItemString for data and Describe and Modify for properties. These methods\nare available in all environments.\nDataWindow data expressions\nThese let you access single items and blocks of data. You can access data in a single column,\ndata in selected rows, and ranges of rows and columns.\nData expressions have a variety of syntaxes depending on the amount of data you want to\naccess.\nYou can get and set data values using the following syntax:\ndwcontrol.Object.Data [ startrownum, startcolnum, endrownum, endcolnum ]\nFor a list of syntaxes, see Syntaxes for DataWindow data expressions.\nProperties\nMethods for properties\nThese are Describe and Modify. These methods are available in all environments.\nDataWindow property expressions\nThese let you get and set the values of properties of the DataWindow definition and of\ncontrols contained within the definition, such as columns and text labels.\nProperty expressions take this form:\ndwcontrol.Object.columnname.columnproperty = value \nWhere to find information\nThis chapter discusses techniques for accessing data with emphasis on data expressions.\nFor information on accessing properties using methods or property expressions, see\nAccessing DataWindow Object Properties in Code\n4.2 Techniques for accessing data\nTwo techniques\nThere are two ways to access data values in a DataWindow control:\n"}
{"page": 464, "text": "Accessing Data in Code\nPage 464\n\u2022 Methods\nSetItem and the group of GetItem methods access single values in specific rows and\ncolumns. For example:\ndw_1.SetItem(1, \"empname\", \"Phillips\")\nls_name = dw_1.GetItemString(1, \"empname\")\n\u2022 Expressions\nDataWindow data expressions use dot notation and can refer to single items, columns,\nblocks of data, selected data, or the whole DataWindow control. For example:\ndw_1.Object.empname[1] = \"Phillips\"\ndw_1.Object.Data[1,1] = \"Phillips\"\nBoth methods allow you to access data in any buffer and to get original or current values.\nWhich technique to use\nThe technique you use depends on how much data you are accessing and whether you know\nthe names of the DataWindow columns when the script is compiled:\nTable 4.1: Which technique to use when accessing data\nIf you want to access\nUse\nA single item\nEither an expression or a method. Both are\nequally efficient when referring to single\nitems.\nException\nIf you want to use a column's name rather\nthan its number, and the name is not known\nuntil runtime, use a method; methods allow\nyou to name the column dynamically.\nMore than one item, such as:\n\u2022 All the data in a column\n\u2022 A block of data specified by ranges of\nrows and columns\n\u2022 Data in selected rows\n\u2022 All the data in the DataWindow\nAn expression. Specifying the data you want\nin a single statement is much more efficient\nthan calling the methods repeatedly in a\nprogram loop.\nWhat's in this section\nThe rest of this section describes how to construct expressions for accessing DataWindow\ndata. The section Syntaxes for DataWindow data expressions  provides reference information\non the syntaxes for data expressions.\nFor information on methods\nFor information about using methods for accessing data, see\n"}
{"page": 465, "text": "Accessing Data in Code\nPage 465\nSetItem\nGetItemDate\nGetItemDateTime\nGetItemDecimal\nGetItemNumber\nGetItemString\nGetItemTime in Methods for the DataWindow Control\n4.2.1 About DataWindow data expressions\nThe Object property of the DataWindow control lets you specify expressions that refer\ndirectly to the data of the DataWindow object in the control. This direct data manipulation\nallows you to access small and large amounts of data in a single statement, without calling\nmethods.\nThere are several variations of data expression syntax, divided into three groups. This section\nsummarizes these syntaxes. The syntaxes are described in detail later in this chapter.\nData in columns or computed fields when you know the name\nOne or all items\n(if rownum is absent, include either buffer or datasource)\ndwcontrol.Object.columnname {.buffer } {.datasource } { [ rownum ] }\nReturns a single value (for a specific row number) or an array of values (when rownum is\nomitted) from the column.\nSee Syntax for one or all data items in a named column.\nSelected items\ndwcontrol.Object.columnname {.Primary }{.datasource }.Selected\nReturns an array of values from the column with an array element for each selected row.\nSee Syntax for selected data in a named column.\nRange of items\ndwcontrol.Object.columnname {.buffer } {.datasource } [ startrownum, endrownum ] \nReturns an array of values from the column with an array element for each row in the range.\nSee Syntax for a range of data in a named column.\nData in numbered columns\nSingle items\ndwcontrol.Object.Data {.buffer } {.datasource } [ rownum, colnum ] \nReturns a single item whose datatype is the datatype of the column.\nSee Syntax for a single data item in a DataWindow.\nBlocks of data\n"}
{"page": 466, "text": "Accessing Data in Code\nPage 466\ninvolving a range of rows and columns\ndwcontrol.Object.Data {.buffer } {.datasource } [ startrownum, startcolnum,\n endrownum, endcolnum ] \nReturns an array of structures or user objects. The structure elements match the columns in\nthe range. There is one array element for each row in the range.\nSee Syntax for data in a block of rows and columns.\nWhole rows\nSingle row or all rows\ndwcontrol.Object.Data {.buffer } {.datasource } { [ rownum ] }\nReturns one structure or user object (for a single row) or an array of them (for all rows). The\nstructure elements match the columns in the DataWindow object.\nSee Syntax for data in a single row or all rows.\nSelected rows\ndwcontrol.Object.Data {.Primary } {.datasource } .Selected\nReturns an array of structures or user objects. The structure elements match the columns in\nthe DataWindow object. There is one array element for each selected row.\nSee Syntax for all data from selected rows.\nSummary of syntaxes\nThis diagram summarizes the variations in data expression syntax:\nFigure: Variations in data expression syntax\nFor information about getting and setting values of DataWindow object properties using a\nsimilar syntax, see Accessing DataWindow Object Properties in Code\n4.2.1.1 When a DataWindow data expression is evaluated\nExpressions that refer to DataWindow data are not verified until execution of your\napplication.\nNo compiler checking\nWhen your script is compiled, PowerBuilder does not verify the parameters of the expression\nthat follow the Object property. Your application can select or change the DataWindow\nobject in a DataWindow control at runtime without invalidating the compiled script.\n"}
{"page": 467, "text": "Accessing Data in Code\nPage 467\nPotential execution errors\nIf the datatype of the expression is not compatible with how the expression is used, or if the\nspecified rows or columns do not exist, an error will occur at runtime.\nYou can handle the error by surrounding the expression in a try-catch block and catching any\nDWRuntimeErrors, or by writing a script for the DataWindow control's Error event.\n4.2.1.2 Getting and storing the data from a DataWindow data expression\nA DataWindow data expression can return a large amount of data.\nData structures for data\nSingle row and column\nWhen your data expression refers to a single row and column, you can assign the data to a\nvariable whose data matches the column's datatype. When the expression refers to a single\ncolumn but can refer to multiple rows, you must specify an array of the appropriate datatype.\nMore than one column\nWhen the expression refers to more than one column, you can get or set the data with a\nstructure or user object. When you create the definition, you must assign datatypes to the\nfields (in a structure) or instance variables (in a user object) that match the datatypes of the\ncolumns. When your expression refers to multiple rows, you get an array of the structure or\nuser object.\nLikewise, if you want to set data in the DataWindow control, you will set up the data in\nstructures or user objects whose elements match the columns referred to in the expression. An\narray of those structures or user objects will provide data for multiple rows.\nDatatypes\nFor matching purposes, the datatypes should be appropriate to the data -- for example, any\nnumeric datatype matches any other numeric type.\nExamples of data structures\nThe following table presents some examples of data specified by an expression and the type\nof data structures you might define for storing the data:\nTable 4.2: Types of storage for data specified by an expression\nType of\nselection\nSample data storage\nA single item\nA single variable of the appropriate datatype.\nA column of\nvalues\nAn array of the appropriate datatype.\nA row\nA structure whose elements have datatypes that match the DataWindow\nobject's columns.\nA user object whose instance variables match the DataWindow object's\ncolumns.\nSelected rows or\nall rows\nAn array of the structure or user object defined for a row.\n"}
{"page": 468, "text": "Accessing Data in Code\nPage 468\nType of\nselection\nSample data storage\nA block of values An array of structures or user objects whose elements or instance\nvariables match the columns included in the selected range.\nAssigning data to arrays\nWhen a data expression is assigned to an array, values are assigned beginning with array\nelement 1 regardless of the starting row number. If the array is larger than the number of rows\naccessed, elements beyond that number are unchanged. If it is smaller, a variable-size array\nwill grow to hold the new values. However, a fixed-size array that is too small for the number\nof rows will cause an execution error.\nTwo ways to instantiate user objects\nA user object needs to be instantiated before it is used.\nOne way is to use the CREATE statement after you declare the user object. If you\ndeclare an array of the user object, you must use CREATE for each array element.\nThe second way is to select the Autoinstantiate box for the user object in the User\nObject painter. When you declare the user object in a script, the user object will be\nautomatically instantiated, like a structure.\nAny datatype and data expressions\nThe actual datatype of a DataWindow data expression is Any, which allows the compiler to\nprocess the expression even though the final datatype is unknown. When data is accessed at\nruntime, you can assign the result to another Any variable or to a variable, structure, or user\nobject whose datatype matches the real data.\nExamples\nA single value\nThis example gets a value from column 2, whose datatype is string:\nstring ls_name\nls_name = dw_1.Object.Data[1,2]\nA structure that matches DataWindow columns\nIn this example, a DataWindow object has four columns:\nAn ID (number)\nA name (string)\nA retired status (boolean)\nA birth date (date)\nA structure to hold these values has been defined in the Structure painter. It is named\nstr_empdata and has four elements whose datatypes are integer, string, boolean, and date.\nTo store the values of an expression that accesses some or all the rows, you need an array of\nstr_empdata structures to hold the data:\nstr_empdata lstr_currdata[]\n"}
{"page": 469, "text": "Accessing Data in Code\nPage 469\nlstr_currdata = dw_1.Object.Data\nAfter this example executes, the upper bound of the array of structures, which is variable-\nsize, is equal to the number of rows in the DataWindow control.\nA user object that matches DataWindow columns\nIf the preceding example involved a user object instead of a structure, then a user object\ndefined in the User Object painter, called uo_empdata, would have four instance variables,\ndefined in the same order as the DataWindow columns:\ninteger id\nstring name\nboolean retired\ndate birthdate\nBefore accessing three rows, three array elements of the user object have been created (you\ncould use a FOR NEXT loop for this). The user object was not defined with Autoinstantiate\nenabled:\nuo_empdata luo_empdata[3]\nluo_empdata[1] = CREATE uo_empdata\nluo_empdata[2] = CREATE uo_empdata\nluo_empdata[3] = CREATE uo_empdata\nluo_empdata = dw_1.Object.Data[1,1,3,4]\n4.2.1.3 Setting DataWindow data with a DataWindow data expression\nWhen you set data in a DataWindow control, the datatypes of the source values must match\nthe datatypes of the columns being set.\nSingle value or an array\nWhen your data expression refers to a single row and column, you can set the value in the\nDataWindow control with a value that matches the column's datatype. When you are setting\nvalues in a single column and specifying an expression that can refer to multiple rows, the\nvalues you assign must be in an array of the appropriate datatype.\nMultiple columns and whole rows\nWhen the expression refers to more than one column, you can assign the data with a structure\nor user object to the DataWindow data. When you create the definition, the fields (in a\nstructure) or instance variables (in a user object) must match the columns. There must be\nthe same number of fields or variables, defined in the same order as the columns, with\ncompatible datatypes.\nWhen your expression can refer to multiple rows, you need an array of the structure or user\nobject.\nUsing arrays to set values\nYou do not have to know in advance how many rows are involved when you are setting data\nin the DataWindow control. PowerBuilder uses the number of elements in the source array\nand the number of rows in the target expression to determine how to make the assignment\nand whether it is necessary to insert rows.\nIf the target expression is selected rows or a range of rows, then:\n\u2022 When there are more array elements than target rows, the extra array elements are ignored\n"}
{"page": 470, "text": "Accessing Data in Code\nPage 470\n\u2022 When there are fewer array elements than target rows, the column(s) in the extra target\nrows are filled with default values\nIf the target expression is all rows but not all columns, then:\n\u2022 When there are more array elements than target rows, the extra array elements are ignored\n\u2022 When there are fewer array elements than target rows, only the first rows up to the number\nof array elements are affected\nIf the target expression is all rows and all columns, then the source data replaces all the\nexisting rows, resetting the DataWindow control to the new data.\nInserting new rows\nWhen you are setting data and you specify a range, then if rows do not exist in that range,\nrows are inserted to fill the range. For example, if the DataWindow control has four rows and\nyour expression says to assign data to rows 8 through 12, then eight more rows are added to\nthe DataWindow control. The new rows use the initial default values set up for each column.\nAfter the rows are inserted, the array of source data is applied to the rows as described above.\nExamples\nThese examples refer to a DataWindow object that has three columns: emp_id, emp_lname,\nand salary. The window declares these arrays as instance variables and the window's Open\nevent assigns four elements to each array:\ninteger ii_id[]\nstring is_name[]\ndouble id_salary[]\nuo_empdata iuo_data[]\nuo_empid_name iuo_id[]\nThe uo_empdata user object has three instance variables: id, name, and salary. The\nuo_empid_name user object has two instance variables: id and name.\nThis example sets emp_lname in the selected rows to the values of is_name, an array with\nfour elements. If two rows are selected, only the first two values of the array are used. If six\nrows are selected, the last two rows of the selection are set to an empty string:\ndw_1.Object.emp_lname.Selected = is_name\nThis example sets salary in rows 8 to 12 to the values in the array id_salary. The id_salary\narray has only four elements, so the extra row in the range is set to 0 or a default value:\ndw_1.Object.salary[8,12] = id_salary\nThis statement resets the DataWindow control and inserts four rows to match the array\nelements of iuo_data:\ndw_1.Object.Data.Primary = iuo_data\nThis example sets columns 1 and 2 in rows 5 to 8 to the values in the array iuo_id:\ndw_1.Object.Data.Primary[5,1, 8,2] = iuo_id\nThis example sets emp_id in the first four rows to the values in the ii_id array. Rows 5\nthrough 12 are not affected:\n"}
{"page": 471, "text": "Accessing Data in Code\nPage 471\ndw_1.Object.emp_id.Primary = ii_id\n4.3 Syntaxes for DataWindow data expressions\nThis section describes in detail the syntaxes that were summarized in About DataWindow\ndata expressions.\nYou can think of the syntaxes as grouped in three categories:\n\u2022 Expressions with a named column or computed field\n\u2022 Syntax for one or all data items in a named column\n\u2022 Syntax for selected data in a named column\n\u2022 Syntax for a range of data in a named column\n\u2022 Expressions with column numbers\n\u2022 Syntax for a single data item in a DataWindow\n\u2022 Syntax for data in a block of rows and columns\n\u2022 Expressions that access whole rows\n\u2022 Syntax for data in a single row or all rows\n\u2022 Syntax for all data from selected rows\n4.3.1 Syntax for one or all data items in a named column\nDescription\nA DataWindow data expression can access a single item in a column or computed field when\nyou specify the control name and a row number. It accesses all the data in the column when\nyou omit the row number.\nSyntax\ndwcontrol.Object.columnname {.buffer } {.datasource } { [ rownum ] }\nTable 4.3:\nParameter\nDescription\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you\nwant to get or set data.\ncolumnname\nThe name of a column or computed field in the DataWindow object in\ndwcontrol. If the column or computed field does not exist at runtime, an\nexecution error occurs.\nbuffer\n(optional)\nThe name of the buffer from which you want to get or set data. Values are:\n\u2022 Primary -- (Default) The data in the primary buffer (the data that has not\nbeen deleted or filtered out).\n"}
{"page": 472, "text": "Accessing Data in Code\nPage 472\nParameter\nDescription\n\u2022 Delete -- The data in the delete buffer (data deleted from the DataWindow\ncontrol).\n\u2022 Filter -- The data in the filter buffer (data that was filtered out).\ndatasource\n(optional)\nThe source of the data. Values are:\n\u2022 Current -- (Default) The current values in the DataWindow control.\n\u2022 Original -- The values that were initially retrieved from the database. For a\ncomputed field, you must specify Original because computed fields cannot\nbe changed and do not have current values.\nrownum\n(optional)\nThe row number of the desired item. The row number must be enclosed in\nbrackets.\nTo access all the data in the column, omit rownum.\nWhen buffer or datasource is not optional\nWhen rownum is omitted, you must specify at least one of the other elements\nin the expression: either buffer or datasource.\nReturn value\nThe expression has a datatype of Any. The expression returns a single value (for a specific\nrow number) or an array of values (when rownum is omitted). Each value has a datatype of\ncolumnname.\nUsage\nIs the expression a DWObject or data?\nWhen you want to access all the data in the column, remember to specify at least one of the\nother optional parameters. Otherwise, the expression you specify refers to the column control,\nnot its data. This expression refers to the DWObject empname, not the data in the column:\ndw_1.Object.empname\nIn contrast, these expressions all refer to data in the empname column:\ndw_1.Object.empname.Primary // All rows\ndw_1.Object.empname[5]      // Row 5\nRow numbers for computed fields\nWhen you refer to a control in a band other than the detail band (usually a computed field)\nyou still specify a row number. For the header, footer, or summary, specify a row number of\n1. For the group header or trailer, specify the group number:\ndw_1.Object.avg_cf[1]\nIf you specify nothing after the computed field name, you refer to the computed field\nDWObject, not the data. For a computed field that occurs more than once, you can get all\nvalues by specifying buffer or datasource instead of rownum, just as for columns.\nWhen the expression is an array\n"}
{"page": 473, "text": "Accessing Data in Code\nPage 473\nWhen the expression returns an array (because there is no row number), you must assign the\nresult to an array, even if you know there is only one row in the result.\nThis expression returns an array, even if there is only one row in the DataWindow control:\ndw_1.Object.empname.Primary\nThis expression returns a single value:\ndw_1.Object.empname[22]\nExamples\nBecause the default setting is current values in the primary buffer, the following expressions\nare equivalent -- both get the value in row 1 for the emp_name column:\ndw_1.Object.emp_name[1]\ndw_1.Object.emp_name.Primary.Current[1]\nThis statement sets the emp_name value in row 1 to Wilson:\ndw_1.Object.emp_name[1] = \"Wilson\"\nThis statement gets values for all the emp_name values that have been retrieved and assigns\nthem to an array of strings:\nstring ls_namearray[]\nls_namearray = dw_1.Object.emp_name.Current\nThis statement gets current values of emp_name from all rows in the filter buffer:\nstring ls_namearray[]\nls_namearray = dw_1.Object.emp_name.Filter\nThis statement gets original values of emp_name from all rows in the filter buffer:\nstring ls_namearray[]\nls_namearray = dw_1.Object.emp_name.Filter.Original\nThis statement gets the current value of emp_name from row 14 in the delete buffer:\nstring ls_name\nls_name = dw_1.Object.emp_name.Delete[14]\nThis statement gets the original value of emp_name from row 14 in the delete buffer:\nstring ls_name\nls_name = dw_1.Object.emp_name.Delete.Original[14]\nThis statement gets all the values of the computed field review_date:\nstring ld_review[]\nld_review = dw_1.Object.review_date.Original\n4.3.2 Syntax for selected data in a named column\nDescription\nA DataWindow data expression uses the Selected property to access values in a named\ncolumn or computed field for the currently selected rows. Selected data is always in the\nprimary buffer.\nSyntax\n"}
{"page": 474, "text": "Accessing Data in Code\nPage 474\ndwcontrol.Object.columnname {.Primary } {.datasource }.Selected\nTable 4.4:\nParameter Description\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you want\nto get or set data.\ncolumnnameThe name of a column or computed field in the DataWindow object in\ndwcontrol. If the column or computed field does not exist at runtime, an\nexecution error occurs.\ndatasource\n(optional)\nThe source of the data. Values are:\n\u2022 Current -- (Default) The current values in the DataWindow control.\n\u2022 Original -- The values that were initially retrieved from the database. For a\ncomputed field, you must specify Original (because computed fields cannot\nbe changed and do not have current values).\nReturn value\nThe datatype of the expression is Any. The expression returns an array of values with the\ndatatype of columnname.\nUsage\nWhen you specify selected values, the expression always returns an array and you must\nassign the result to an array, even if you know there is only one row selected.\nFor selected rows, the primary buffer is the only applicable buffer. For consistency, you can\ninclude Primary in this syntax but it is not necessary.\nExamples\nBecause the primary buffer is the only applicable buffer for selected data and current data is\nthe default, these expressions are all equivalent. They access values in the emp_name column\nfor selected rows:\ndw_1.Object.emp_name.Selected\ndw_1.Object.emp_name.Primary.Selected\ndw_1.Object.emp_name.Current.Selected\ndw_1.Object.emp_name.Primary.Current.Selected\nThese expressions both access original values for selected rows:\ndw_1.Object.emp_name.Original.Selected\ndw_1.Object.emp_name.Primary.Original.Selected\nThis example sets the emp_name value in the first selected row to an empty string. The rest\nof the selected rows are set to a default value, which can be an empty string:\nstring ls_empty[]\nls_empty[1] = \"\"\ndw_1.Object.emp_lname.Selected = ls_empty\nThis statement gets the original emp_name values in selected rows and assigns them to an\narray of strings:\nstring ls_namearray[]\n"}
{"page": 475, "text": "Accessing Data in Code\nPage 475\nls_namearray = dw_1.Object.emp_name.Original.Selected\n4.3.3 Syntax for a range of data in a named column\nDescription\nA DataWindow data expression accesses values in a named column or computed field for a\nrange of rows when you specify the starting and ending row numbers.\nSyntax\ndwcontrol.Object.columnname {.buffer } {.datasource } [ startrownum, endrownum ] \nTable 4.5:\nParameter\nDescription\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you\nwant to get or set data.\ncolumnname The name of a column or computed field in the DataWindow object in\ndwcontrol. If the column or computed field does not exist at runtime, an\nexecution error occurs.\nbuffer\n(optional)\nThe name of the buffer from which you want to get or set data. Values are:\n\u2022 Primary -- (Default) The data in the primary buffer (the data that has not\nbeen deleted or filtered out).\n\u2022 Delete -- The data in the delete buffer (data deleted from the DataWindow\ncontrol).\n\u2022 Filter -- The data in the filter buffer (data that was filtered out).\ndatasource\n(optional)\nThe source of the data. Values are:\n\u2022 Current -- (Default) The current values in the DataWindow control.\n\u2022 Original -- The values that were initially retrieved from the database. For a\ncomputed field, you must specify Original (because computed fields cannot\nbe changed and do not have current values).\nstartrownum The number of the first row in the desired range of rows.\nendrownum The number of the last row in the desired range of rows.\nThe row numbers must be enclosed in brackets and separated by commas.\nReturn value\nThe datatype of the expression is Any. The expression returns an array of values with\nan array element for each row in the range. Each value's datatype is the datatype of\ncolumnname.\nUsage\nWhen you specify a range, the expression always returns an array and you must assign the\nresult to an array, even if you know there is only one value in the result. For example, this\nexpression returns an array of one value:\n"}
{"page": 476, "text": "Accessing Data in Code\nPage 476\ndw_1.Object.empname[22,22]\nExamples\nBecause the primary buffer and current data are the default, these expressions are all\nequivalent:\ndw_1.Object.emp_name[11,20]\ndw_1.Object.emp_name.Primary[11,20]\ndw_1.Object.emp_name.Current[11,20]\ndw_1.Object.emp_name.Primary.Current[11,20]\nThis example resets the emp_name value in rows 11 through 20 to an empty string. Rows 12\nto 20 are set to a default value, which may be an empty string:\nstring ls_empty[]\nls_empty[1] = \"\"\ndw_1.Object.emp_name[11,20] = &\n      {\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"}\nThis statement gets the original emp_name values in rows 11 to 20 and assigns them to\nelements 1 to 10 in an array of strings:\nstring ls_namearray[]\nls_namearray = dw_1.Object.emp_name.Original[11,20]\nThis statement gets current values of emp_name from rows 5 to 8 in the Filter buffer and\nassigns them to elements 1 to 4 in an array of strings:\nstring ls_namearray[]\nls_namearray = dw_1.Object.emp_name.Filter[5,8]\nThis statement gets original values of emp_name instead of current values, as shown in the\nprevious example:\nstring ls_namearray[]\nls_namearray = &\ndw_1.Object.emp_name.Filter.Original[5,8]\nThis statement gets current values of emp_name from rows 50 to 200 in the delete buffer and\nassigns them to elements 1 to 151 in an array of strings:\nstring ls_namearray[]\nls_namearray = dw_1.Object.emp_name.Delete[50,200]\nThis statement gets original values of emp_name instead of current values, as shown in the\nprevious example:\nstring ls_namearray[]\nls_namearray = &\n      dw_1.Object.emp_name.Delete.Original[50,200]\n4.3.4 Syntax for a single data item in a DataWindow\nDescription\nA DataWindow data expression accesses a single data item when you specify its row and\ncolumn number.\nSyntax\n"}
{"page": 477, "text": "Accessing Data in Code\nPage 477\ndwcontrol.Object.Data {.buffer } {.datasource } [ rownum, colnum ] \nTable 4.6:\nParameter\nDescription\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you\nwant to get or set data.\nbuffer\n(optional)\nThe name of the buffer from which you want to get or set data. Values are:\n\u2022 Primary -- (Default) The data in the primary buffer (the data that has not\nbeen deleted or filtered out).\n\u2022 Delete -- The data in the delete buffer (data deleted from the DataWindow\ncontrol).\n\u2022 Filter -- The data in the filter buffer (data that was filtered out).\ndatasource\n(optional)\nThe source of the data. Values are:\n\u2022 Current -- (Default) The current values in the DataWindow control.\n\u2022 Original -- The values that were initially retrieved from the database.\nrownum\nThe row number of the desired item.\ncolnum\nThe column number of the desired item.\nThe row and column numbers must be enclosed in brackets and separated by\ncommas.\nReturn value\nThe datatype of the expression is Any. The expression returns a single item in the\nDataWindow control. Its datatype is the datatype of the column.\nExamples\nThese expressions both refer to a single item in row 1, column 2. The expressions access\ncurrent data in the primary buffer:\ndw_1.Object.Data[1,2]\ndw_1.Object.Data.Primary.Current[1,2]\nThis statement changes the value of the original data to 0 for the item in row 1, column 2 in\nthe Filter buffer. Column 2 holds numeric data:\ndw_1.Object.Data.Filter.Original[1,2] = 0\n4.3.5 Syntax for data in a block of rows and columns\nDescription\nA DataWindow data expression accesses data in a range of rows and columns when you\nspecify the starting and ending row and column numbers.\nSyntax\ndwcontrol.Object.Data {.buffer } {.datasource } [ startrownum, startcolnum,\n endrownum, endcolnum ] \n"}
{"page": 478, "text": "Accessing Data in Code\nPage 478\nTable 4.7:\nParameter\nDescription\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you\nwant to get or set data.\nbuffer\n(optional)\nThe name of the buffer from which you want to get or set data. Values are:\n\u2022 Primary -- (Default) The data in the primary buffer (the data that has not\nbeen deleted or filtered out).\n\u2022 Delete -- The data in the delete buffer (data deleted from the DataWindow\ncontrol).\n\u2022 Filter -- The data in the filter buffer (data that was filtered out).\ndatasource\n(optional)\nThe source of the data. Values are:\n\u2022 Current -- (Default) The current values in the DataWindow control.\n\u2022 Original -- The values that were initially retrieved from the database.\nstartrownum The number of the first row in the desired range of rows.\nstartcolnum\nThe number for the first column in the range.\nendrownum\nThe number of the last row in the range.\nendcolnum\nThe number for the last column in the range.\nThe row and column numbers must be enclosed in brackets and separated by\ncommas.\nReturn value\nThe datatype of the expression is Any. The expression returns an array of structures or user\nobjects. There is one structure element or user object instance variable for each column in the\ndesignated range. The datatype of each element matches the datatype of the corresponding\ncolumn. There is one structure or user object in the array for each row in the range of rows.\nUsage\nWhen you specify a block, the expression always returns an array and you must assign the\nresult to an array, even if you know there is only one structure in the result.\nThis expression returns an array of one structure from row 22:\ndw_1.Object.data[22,1,22,4]\nThis expression returns an array of one value from row 22, column 1:\ndw_1.Object.data[22,1,22,1]\nExamples\nThese statements both refer to data in the first ten rows and first four columns of the\nDataWindow object in the control dw_1. The primary buffer and current data are the default:\ndw_1.Object.Data[1,1,10,4]\ndw_1.Object.Data.Primary.Current[1,1,10,4]\n"}
{"page": 479, "text": "Accessing Data in Code\nPage 479\nThis example gets employee IDs and last names for all the rows in the delete buffer. The\nIDs and names are the first two columns. It saves the information in a structure, called\nstr_namelist, of two elements: an integer called id and a string called lastname. The structure\nwas defined previously in the Structure painter. The list of IDs and names is then saved in the\nfile DELETED.TXT:\ninteger li_fileNum\nlong ll_deletedrows\nstr_namelist lstr_namelist[]\n \nll_deletedrows = dw_1.DeletedCount()\nlstr_namelist = &\n      dw_1.Object.Data.Delete[1,1, ll_deletedrows,2]\n \nli_fileNum = FileOpen(\"C:\\HR\\DELETED.TXT\", &\n      LineMode!, Write!)\nFOR ll_count = 1 to UpperBound(lstr_namelist)\n      FileWrite(li_fileNum, &\n         String(lstr_namelist.id) + &\n         \" \" + &\n         lstr_namelist.lastname + &\n         \"~r~n\")\nNEXT\nFileClose(li_fileNum)\nUsing the structure from the previous example that holds IDs and last names, this example\nsets all the IDs and last names in the DataWindow control to null:\nlong ll_n\nstr_namelist lstr_namelist[]\n \nSetNull(lstr_namelist[1].id)\nSetNull(lstr_namelist[1].lastname)\n \nFOR ll_n = 2 to dw_1.RowCount()\n      lstr_namelist[ll_n] = lstr_namelist[1]\nNEXT\n \ndw_1.Object.Data[1,1, dw_1.RowCount(),2] = lstr_data\n4.3.6 Syntax for data in a single row or all rows\nDescription\nA DataWindow data expression accesses a single row when you specify the row number. It\naccesses all the data in the DataWindow control when you omit the row number.\nSyntax\ndwcontrol.Object.Data {.buffer } {.datasource } { [ rownum ] }\nTable 4.8:\nParameter\nDescription\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you\nwant to get or set data.\nbuffer\n(optional)\nThe name of the buffer from which you want to get or set data. Values are:\n\u2022 Primary -- (Default) The data in the primary buffer (the data that has not\nbeen deleted or filtered out).\n"}
{"page": 480, "text": "Accessing Data in Code\nPage 480\nParameter\nDescription\n\u2022 Delete -- The data in the delete buffer (data deleted from the DataWindow\ncontrol).\n\u2022 Filter -- The data in the filter buffer (data that was filtered out).\ndatasource\n(optional)\nThe source of the data. Values are:\n\u2022 Current -- (Default) The current values in the DataWindow control.\n\u2022 Original -- The values that were initially retrieved from the database.\nrownum\n(optional)\nThe number of the row you want to access.\nTo access data for all rows, omit rownum.\nThe row number must be enclosed in brackets.\nReturn value\nThe datatype of the expression is Any. The expression returns one structure or user object\n(for a single row) or an array of them (for all rows). There is one structure element or\ninstance variable for each column in the DataWindow object. The datatype of each element\nmatches the datatype of the corresponding column.\nUsage\nWhen you omit the row number, the expression always returns an array, and you must assign\nthe result to an array, even if you know there is only one row in the DataWindow control.\nExamples\nThese statements both access current data for row 5 in the primary buffer in the DataWindow\nobject contained in the DataWindow control dw_1:\ndw_1.Object.Data[5]\ndw_1.Object.Data.Primary.Current[5]\nThis example assigns all the data in dw_1 to the Any variable la_dwdata. The value assigned\nto la_dwdata is an array of data structures whose members match the column datatypes:\nany la_dwdata\nla_dwdata = dw_1.Object.Data\nThis example assigns all the data in the delete buffer for dw_1 to the Any variable la_dwdata:\nany la_dwdata\nla_dwdata = dw_1.Object.Data.Delete\nThis example replaces all the data in the nested report in row 2 with data from dw_2. The\ncolumns in the DataWindow object in dw_2 must match the columns in the DataWindow\nobject for the nested report:\ndw_1.Object.NestRep[2].Object.Data = &\n      dw_2.Object.Data\n4.3.7 Syntax for all data from selected rows\nDescription\n"}
{"page": 481, "text": "Accessing Data in Code\nPage 481\nA DataWindow data expression accesses all the data in the currently selected rows when you\nspecify the Data and Selected properties. Selected rows are always in the primary buffer.\nSyntax\ndwcontrol.Object.Data {.Primary } {.datasource }.Selected\nTable 4.9:\nParameter\nDescription\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you\nwant to get or set data.\ndatasource\n(optional)\nThe source of the data. Values are:\n\u2022 Current -- (Default) The current values in the DataWindow control.\n\u2022 Original -- The values that were initially retrieved from the database.\nReturn values\nThe datatype of the expression is Any. The expression returns an array of structures or\nuser objects. There is one structure element or instance variable for each column in the\nDataWindow object. The datatype of each element matches the datatype of the corresponding\ncolumn.\nUsage\nWhen you specify selected rows, the expression always returns an array, and you must assign\nthe result to an array even if you know there is only one row selected.\nExamples\nBecause the primary buffer is the only applicable buffer for selected data and current data is\nthe default, these expressions are all equivalent. They access data in the selected rows:\ndw_1.Object.Data.Selected\ndw_1.Object.Data.Primary.Selected\ndw_1.Object.Data.Current.Selected\ndw_1.Object.Data.Primary.Current.Selected\nBoth these expressions access original values for selected rows:\ndw_1.Object.Data.Original.Selected\ndw_1.Object.Data.Primary.Original.Selected\nThis example takes the values in the selected rows in dw_2 and populates a\nDropDownDataWindow in dw_1 with the values, replacing existing data in the\nDropDownDataWindow. The column with the DropDownDataWindow is called\nuseroptions. The columns of the DataWindow object in dw_2 must match the columns of the\nDataWindow object for the DropDownDataWindow:\ndw_1.Object.useroptions.Object.Data = &\n      dw_2.Object.Data.Selected\n"}
{"page": 482, "text": "Accessing DataWindow Object Properties in Code\nPage 482\n5 Accessing DataWindow Object Properties in\nCode\nAbout this chapter\nThis chapter explains the syntax for constructing expressions that access properties of\ncontrols within a DataWindow.\n5.1 About properties of the DataWindow object and its controls\nThis section describes:\n\u2022 What you can do with DataWindow object properties\n\u2022 Specifying property values in the DataWindow painter\n\u2022 Accessing DataWindow object property values in code\n\u2022 Using DataWindow expressions as property values\n\u2022 Nested strings and special characters for DataWindow object properties\n5.1.1 What you can do with DataWindow object properties\nThe DataWindow object defines the way data is displayed in a DataWindow control. It\ncontains controls that represent the columns, text labels, computed fields, and images.\nThe properties of the DataWindow object and its controls store the information that specifies\nthe behavior of the DataWindow object. They are not properties of the DataWindow control,\nbut of the DataWindow object displayed in the control.\nTerminology\nWhen you are programming for DataWindows, there are several types of expressions\ninvolved.\nA DataWindow expression is an expression assigned as a value to a DataWindow\nproperty and is evaluated by the DataWindow engine. The expression can refer to\ncolumn data and can have a different value for each row in the DataWindow.\nA DataWindow property expression is an expression in your code that gets or sets the\nvalue of a DataWindow property. Its effects are equivalent to what the Describe and\nModify methods do.\nA DataWindow data expression is an expression in your code that gets or sets data\nin the DataWindow. Its effects are similar to what the SetItem and several GetItem\nmethods do.\nTypes of values\nProperty values can be constants or can be DataWindow expressions. DataWindow\nexpressions allow the property value to be based on other conditions in the DataWindow,\n"}
{"page": 483, "text": "Accessing DataWindow Object Properties in Code\nPage 483\nincluding data values. Conditional expressions based on data can give the property a different\nvalue for each row.\nGetting and setting values\nYou establish initial values for properties in the DataWindow painter. You can also get and\nset property values at runtime in code.\nThere are several techniques for accessing property values. A particular property might be\naccessible by a subset of those techniques. For example, some properties are read-only at\nruntime, some can be set only at execution, and some accept only constants (not DataWindow\nexpressions) as values.\nFor a complete list of properties and the ways you can access each one, see DataWindow\nObject Properties\nExamples: ways of setting the Border property\nThis table lists the ways you can access a property, using the Border property as an example:\nTable 5.1: Ways to access and change DataWindow object properties\nWhat you can do with\nproperties\nHow to do it, using the\nBorder property as an\nexample\nWhat happens\nSet the initial value\nof the property in the\nworkspace\nProperty sheet, General\ntab, Border box\nThe Border property takes on the\nvalue you set unconditionally. In the\nPreview view and at runtime, the\ncontrol has the border you indicated\nin the workspace unless you set the\nBorder property again in some way.\nSpecify the value of\nthe property at runtime\nbased on an expression\ndefined for the control\nin the workspace\nProperty sheet, General\ntab, Border box,\nExpression button\nIn Preview and at runtime, the border\nchanges as specified in the expression,\nwhich overrides the setting on the\nproperty sheet.\nFor example, an expression can give\nthe Salary column value a ShadowBox\nborder when the salary exceeds\n$70,000.\nTo see the effect in the Preview view,\nyou might need to close Preview and\nreopen it.\nGet the value of the\nproperty at runtime in\ncode\nProperty expression for\nthe Border property or\nDescribe method\nBoth the expression and the Describe\nmethod return the value of the Border\nproperty for the specified control.\nChange the value of the\nproperty at runtime in\ncode\nProperty expression for\nthe Border property or\nModify method\nAt runtime, the value of the property\nchanges when the code executes. For\nexample, you could code Modify\nin the Clicked event and change the\nborder of the control the user clicked.\n"}
{"page": 484, "text": "Accessing DataWindow Object Properties in Code\nPage 484\nWhat you can do with\nproperties\nHow to do it, using the\nBorder property as an\nexample\nWhat happens\nSet the initial value\nof the property at\nruntime in code for a\nDataWindow being\ncreated\nSyntaxFromSQL method\nWhen SyntaxFromSQL executes, the\nborder value of all columns is set in\nthe generated syntax.\nPowerBuilder\nSyntaxFromSQL is a method\nof the Transaction object and is\ndescribed in the Section 2.4.833,\n\u201cSyntaxFromSQL\u201d in PowerScript\nReference.\n5.1.2 Specifying property values in the DataWindow painter\nWhen you specify values in the Properties view of the DataWindow painter, you are setting\nproperties of the DataWindow object and its controls.\nProperties for each control\nEach control in the DataWindow (columns, text, drawing controls) has its own property\nsheets, because there are different sets of properties for each object. To access individual\nproperty sheets, display the Properties view and then select a control.\nIf several controls have the same property and you want them all to have the same value,\nyou can select all the controls so that the property sheet shows the properties they have in\ncommon. When you change the property value, it is applied to all selected controls.\nDataWindow expressions for properties\nFor many properties, you can specify a DataWindow expression in the Properties view by\nclicking the Expression button beside the property. At runtime, the expression is evaluated\nfor each row. When the expression includes row-dependent information in the calculation\n(such as data), each row can have a different value for the property. In the painter, you can\nsee the results in the Preview view. (You might need to close Preview and reopen it if you are\nnot seeing the settings you have made.)\nFor information about the components of expressions, see Using DataWindow expression\nfunctions and the Part I, \u201cUsers Guide\u201d. For examples of expressions, see Using DataWindow\nexpressions as property values.\n5.1.3 Accessing DataWindow object property values in code\nTwo techniques\nThere are two ways to access property values in a DataWindow object:\n\u2022 Methods\nThe Describe and Modify methods use strings to specify the property names. For example:\ndw_1.Describe(\"empname.Border\")\ndw_1.Modify(\"empname.Border=1\")\n"}
{"page": 485, "text": "Accessing DataWindow Object Properties in Code\nPage 485\n\u2022 Expressions\nDataWindow property expressions use the Object property and dot notation. For example:\ndw_1.Object.empname.Border = 1\nli_border = Integer(dw_1.Object.empname.Border)\nIn JavaScript, only the Describe and Modify methods are available.\nWhich technique to use\nThe technique you use depends on the type of error checking you want to provide and on\nwhether you know the names of the controls and properties you want to access when the\nscript is compiled.\nTable 5.2: Error handling in DataWindow property expressions\nIf you want to\nUse\nUse column and property names that are known when\nthe script is compiled\nAn expression\nAvoid extra nested tildes (and you know the column\nand property names you want to access)\nAn expression\nBuild a string at runtime that names controls and\nproperties\nA method\nUse the DWRuntimeError to handle problems with\nincorrect control or property names\nAn expression in a try-catch block\nUse the Error event to handle problems with incorrect\ncontrol or property names\nAn expression and a script for the\nError event\nAvoid using the Error event (or DWRuntimeError)\nfor handling problems with incorrect control or\nproperty names\nA method and code that evaluates its\nreturn value\n5.1.4 Using DataWindow expressions as property values\nWhen a DataWindow object property's value can be an expression, you can make the\ncontrol's appearance or other properties depend on other information in the DataWindow.\nA DataWindow expression can include:\n\u2022 Operators\n\u2022 The names of controls within the DataWindow, especially column and computed field\nnames\n\u2022 DataWindow expression functions. Some functions, such as IsRowNew, refer to\ncharacteristics of an individual row\n\u2022 User-defined functions\nDifferent formats for the expression\nWhen you assign an expression in the painter, you specify just the expression:\n"}
{"page": 486, "text": "Accessing DataWindow Object Properties in Code\nPage 486\nDataWindowexpression\nWhen you assign an expression in code, you specify a default value, a tab, and the\nexpression:\ndefaultvalue [tab] DataWindowexpression\nExamples\nIn the painter\nThis expression for a column called emp_lname is applied to the Background.Color property.\nIt causes the name's background to be light gray (15790320) if the current row (person) uses\nthe day care benefit. If not, the background color is set to white:\nIf(bene_day_care = 'Y', 15790320, 1677215)\nIn code\nThe expression assigned to the Background.Color property includes a default value. Nested\nquotes complicate the syntax:\nPowerBuilder\ndw_1.Object.emp_lname.Background.Color = \"16777215 ~t If(bene_day_care = 'Y',\n 15790320, 16777215)\"\nJavaScript\ndw_1.Modify(\"emp_lname.Background.Color = \\\"16777215 \\t If(bene_day_care = 'Y',\n 15790320, 16777215)\\\");\n5.1.4.1 More examples in the DataWindow painter and in code\nThese examples illustrate the difference between the format for a DataWindow expression\nspecified in the DataWindow painter versus in code.\nBorder property\nThe expression applied to the Border property of the salary_plus_benefits column displays a\nborder around salaries over $60,000:\nIf(salary_plus_benefits > 60000, 1, 0)\nThis statement changes the expression in code:\ndw_1.Object.salary_plus_benefits.Border = &\n      \"0 ~t If(salary_plus_benefits > 60000, 1, 0)\"\nFont.Weight property for a column\nTo make out-of-state (not in Massachusetts) names and numbers bold in a phone list, apply\nthis expression to the name and phone_number columns. The state column must be part of\nthe data source, but it does not have to be displayed:\nIf(state = 'MA', 400, 700)\nThis statement changes the expression in code:\ndw_1.Object.name.Font.Weight = &\n      \"700 ~t If(state = 'MA', 400, 700)\"\ndw_1.Object.phone_number.Font.Weight = &\n"}
{"page": 487, "text": "Accessing DataWindow Object Properties in Code\nPage 487\n      \"700 ~t If(state = 'MA', 400, 700)\"\nBrush.Color property for a rectangle\nThis expression, applied to a rectangle drawn around all the columns in a tabular report,\ncauses alternate rows to be shaded (a graybar effect). Make sure the columns and computed\nfields have a transparent background. The expression Mod(GetRow( ), 2) = 1 distinguishes\nodd rows from even rows:\nIf(Mod(GetRow(), 2) = 1, 16777215, 15790320)\nThis statement changes the expression in code:\ndw_1.Object.rectangle_1.Brush.Color = &\n   \"0 ~t If(Mod(GetRow(), 2) = 1, 16777215, 15790320)\"\nBrush.Color and Brush.Hatch properties for a rectangle\nTo highlight employees whose review date is approaching, draw a rectangle behind the\nrow. This expression for the rectangle's Brush.Color property makes the rectangle light gray\nfor employees for whom the month of the start date matches the current month or the next\nmonth:\nIf(month(start_date) = month(today())\nor month(start_date) = month(today()) + 1\nor (month(today()) = 12 and month(start_date) = 1), 12632256, 16777215)\nA similar expression for the Brush.Hatch property makes the fill pattern of the rectangle\nBdiagonal (1) for review dates that are approaching. Otherwise, the rectangle is transparent\n(7) so that it does not show:\nIf(month(start_date) = month(today())\nor month(start_date) = month(today()) + 1\nor (month(today()) = 12 and month(start_date) = 1), 1, 7)\nYou can also set the Pen.Color and Pen.Style properties to affect the outline of the rectangle.\nIf you wanted to change the Brush.Color property in code instead of setting it in the painter,\nthe code would look like this:\ndw_1.Object.rectangle_1.Brush.Color = &\n   \"'16777215 ~t \" + &\n   \"If(month(start_date) = month(today()) \" + &\n   \"or month(start_date) = month(today()) + 1 \" + &\n   \"or (month(today()) = 12 \" + &\n   \"and month(start_date) = 1), 12632256, 16777215)'\"\nFont.Height property for a rectangle\nThis expression applied to the Font.Height property of a text control makes the text control in\nthe first row of a DataWindow larger than it appears in other rows. Make sure the borders of\nthe text control are large enough to accommodate the increased size:\nIf(GetRow() = 1, 500, 200)\nThis statement changes the expression for the text control t_desc in code:\ndw_1.Object.t_desc.Font.Height = &\n      \"200 ~t If(GetRow() = 1, 500, 200)\"\nFor more information\n"}
{"page": 488, "text": "Accessing DataWindow Object Properties in Code\nPage 488\nFor more information about DataWindow expressions, see DataWindow Operators and\nExpressions\n5.1.5 Nested strings and special characters for DataWindow object properties\nDataWindow property values often involve specifying strings within strings. Embedded\nquotation marks need special treatment so that the strings are parsed correctly. This treatment\nvaries depending on the programming language you are using.\nTable 5.3: Specifying property values in different scripting languages\nIf you are using\nSee\nPowerScript\nNested strings and special characters for\nDataWindow object properties.\nJavaScript\nNested strings and special characters\nin JavaScript for DataWindow object\nproperties.\n5.1.5.1 Nested strings and special characters for DataWindow object properties\nTilde (~) is the escape character that allows you to nest quoted strings within other quoted\nstrings and to specify special characters such as tabs and carriage returns. For DataWindow\nobject properties, several levels of nested strings can create a complicated expression.\nTechniques for quoting nested strings\nBoth double and single quotes are valid delimiters for strings. You can use this fact to\nsimplify the specification of nested strings.\nThere are two ways to embed a string within another string. You can:\n\u2022 Use the other type of quotation mark for the nested string. If the main string uses double\nquotes, the nested string can use single quotes.\n\"If(state='MA',255,0)\"\n\u2022 Use the escape character to specify that a quote is part of the string instead the closure of a\nprevious quote.\n\"If(state=~\"MA~\",255,0)\"\nIf the string includes a third level of nested strings, you need to add another tilde which must\nbe accompanied by its own escape character, a second tilde. This is the reason that tildes are\nusually specified in odd numbers (1, 3, or 5 tildes).\nThis Modify expression (entered on a single line in code) shows three levels of nested strings:\ndw_1.Modify(\n    \"DataWindow.Color = '255 ~t If(state= ~'MA~',255,0)'\")\nThis version of the expression has more tildes because there are no single quotes:\ndw_1.Modify(\"DataWindow.Color = ~\"255 ~t If(state= ~~~\"MA~~~\",255,0)~\"\")\nCommon special characters\n"}
{"page": 489, "text": "Accessing DataWindow Object Properties in Code\nPage 489\nStrings can also include special characters, as shown in the previous example. This table lists\nthe special characters that are most often used in DataWindow expressions.\nTable 5.4:\nEscape sequence\nMeaning\n~t\nTab\n~r\nCarriage return\n~n\nNewline or linefeed\n~\"\nDouble quote\n~'\nSingle quote\n~~\nTilde\nA line break is a carriage return plus a newline (\\r\\n).\nSpecial use of tilde\nA special case of specifying tildes involves the EditMask.SpinRange property, whose value\nis two numbers separated by a tilde (not an escape character, simply a tilde). To specify this\nvalue in a script, you must use a nested string with four tildes, which is interpreted as a single\ntilde when parsed:\ndw_1.Modify(\"benefits.EditMask.SpinRange='0~~~~10'\")\nMore information\nFor more information about nested strings and special characters, see Part I, \u201cPowerScript\nReference\u201d.\n5.1.5.2 Nested strings and special characters in JavaScript for DataWindow object properties\nDifferent processing by language and DataWindow\nJavaScript uses different characters from those used within the DataWindow to delimit\nstrings and identify special characters. For DataWindow object properties, several levels of\nnested strings and two types of delimiter can create a complicated expression.\nIn JavaScript, strings are delimited by double quotes and the escape character in strings\nis the backslash (\\). The escape character allows you to include double quotes and special\ncharacters within a string. The DataWindow can use either double or single quotes to delimit\nstrings and uses tilde (~) as an escape character.\nBecause some parts of the string are parsed by the language and some by the DataWindow,\nstrings passed to the DataWindow often use both types of escape character. The one to use\ndepends on whether the DataWindow or the external language will evaluate the character.\nThe external language deals with the outer string and converts escape sequences to the\ncorresponding special characters. Nested strings are dealt with by the DataWindow parser.\nGuidelines\nObserve these guidelines for each type of character:\n\u2022 Special characters use the language escape character. Tabs, newlines, and carriage returns\nare \\t, \\n, \\r\n"}
{"page": 490, "text": "Accessing DataWindow Object Properties in Code\nPage 490\n\u2022 Nested double quotes require the language escape character (\\) so they won't be interpreted\nas the closure of the opening double quote. Depending on the level of nesting, they may\nalso require the DataWindow escape character (~).\n\u2022 Single quotes for nested strings do not need the language escape character, but depending\non the level of nesting they may need the DataWindow escape character.\n\u2022 Tildes are specified in odd-numbered groups. They do not interact with the language\nescape character in counting the number of escape characters used.\nExamples\nBoth of these JavaScript examples are valid ways of nesting a string:\ndw_1.Modify(\"DataWindow.Crosstab.Values=\\\"empname\\\"\");\ndw_1.Modify(\"DataWindow.Crosstab.Values='empname'\");\nThe following three JavaScript statements specify the same string. They show a string with\nthree levels of nesting using different combinations of escape characters and quote types. In\nthe first example, note the escaping of the inner quote with a tilde for the DataWindow and a\nbackslash for the language:\ndw_1.Modify(\"emp_id.Color=\\\"16777215 \\t If (emp_status=~\\\"A~\\\",255,16777215)\\\"\");\n \ndw_1.Modify(\"emp_id.Color=\\\"16777215 \\t If (emp_status='A',255,16777215)\\\"\");\n \ndw_1.Modify(\"emp_id.Color='16777215 \\t If (emp_status=\\\"A\\\",255,16777215)'\");\nThe corresponding example in PowerBuilder is:\ndw_1.Modify(\"emp_id.Color = ~\"16777215 ~t If\n (emp_status=~~~\"A~~~\",255,16777215)~\"\")\nSpecial use of tilde\nA special case of specifying tildes involves the EditMask.SpinRange property, whose value is\ntwo numbers separated by a tilde (not an escape character, simply a tilde). In code, the value\nis in a nested string and needs a tilde escape character. The two tildes are interpreted as a\nsingle tilde when parsed by the DataWindow:\ndw_1.modify(\"benefits.EditMask.SpinRange='0~~10'\");\n5.2 PowerBuilder: Modify and Describe methods for properties\nThe following sections provide information about using Modify and Describe methods for\nDataWindow object properties:\n\u2022 Advantage and drawbacks of Modify and Describe methods in PowerBuilder\n\u2022 Handling errors from Modify and Describe methods in PowerBuilder\n5.2.1 Advantage and drawbacks of Modify and Describe methods in\nPowerBuilder\nIn PowerBuilder, using the Describe and Modify methods to access DataWindow object\nproperty values has an advantage and some drawbacks. The examples here use Modify as\nillustrations, but similar considerations apply to Describe.\n"}
{"page": 491, "text": "Accessing DataWindow Object Properties in Code\nPage 491\nAdvantage\nAllows you to specify column and property names dynamically\nIn your script, you can build a string that specifies the column and property names.\nFor example, the following code builds a string in which the default color value and the two\ncolor values in the If function are determined in the script. Notice how the single quotes\naround the expression are included in the first and last pieces of the string:\nred_amount = Integer(sle_1.Text)\nmodstring = \"emp_id.Color='\" + &\n      String(RGB(red_amount, 0, 0)) + &\n      \"~tIf(emp_status=~~'A~~',\" + &\n      String(RGB(255, 0, 0)) + &\n      \",\" + &\n      String(RGB(red_amount, 0, 0)) + &\n      \")'\"\nModify(modstring)\nThe resulting string when red_amount is set to 128 is:\nemp_id.Color='128~tIf(emp_status=~'A~',255,128)'\nThe following is a simpler example without the If function. You do not need quotes around\nthe value if you are not specifying an expression. Here the String and RGB functions result in\na constant value in the resulting modstring:\nModify(ls_columnname + \".Color=\" + &\n      String(RGB(red_amount, 255, 255)))\nDrawbacks\nSetting several properties at once is possible but hard to debug\nAlthough you can set several properties in a single method call, it is harder to understand and\ndebug scripts that do so.\nFor example, assume the following is entered on a single line in the script editor:\nrtn = dw_1.Modify(\"emp_id.Font.Italic=0\noval_1.Background.Mode=0\noval_1.Background.Color=255\")\nLess efficient than an expression\nUsing a DWObject variable in several property expressions is a little more efficient than\nsetting several properties in a single call to Describe or Modify. However, if you want to be\nable to name controls dynamically, you might still choose to use Describe or Modify.\nFor examples of using a DWObject variable, see Using the DWObject variable in\nPowerBuilder.\nCan require complex quoted strings\nWhen you specify an expression for a property value, it is difficult to specify nested quotes\ncorrectly -- the code is hard to understand and prone to error. For Describe, this is less of a\ndrawback -- strings do not become as complex because they do not include an expression.\nFor example, this string entered on a single line in a script assigns a DataWindow expression\nto the Color property:\n"}
{"page": 492, "text": "Accessing DataWindow Object Properties in Code\nPage 492\nModify(\"emp_id.Color=~\"16777215 ~t\nIf(emp_status=~~~\"A~~~\",255,16777215)~\"\")\nFor more information about quoted strings, see Nested strings and special characters for\nDataWindow object properties.\n5.2.2 Handling errors from Modify and Describe methods in PowerBuilder\nIn PowerBuilder, no runtime error occurs when Describe and Modify try to access invalid\ncontrols or properties in the DataWindow object. The validity of the argument string is\nevaluated before the controls are accessed.\nModify\nWhen the string that specifies the control and property to be accessed is invalid, Modify\nreturns an error string, instead of the expected value, such as:\nLine 1 Column 12: incorrect syntax.\nYou can use the error message to figure out what part of the string is incorrect. This is most\nuseful when you are testing your scripts. The error message, which names the line and\ncolumn number after which the string was not recognized, might not be helpful after your\napplication is deployed.\nDescribe\nWhen the string for Describe has an unrecognized property, Describe's return value ends with\nan exclamation point (!). Describe returns as many values as it recognizes up to the incorrect\none.\nWhen you specify a valid property but that property doesn't have a value (either because it\nhasn't been set or because its value is an expression that can't be evaluated), Describe returns\na question mark (?) for that property. The property's actual value is null.\nAlways check for errors\nYou should include error-checking code that checks for these return values. Other\nerrors can occur later if you depend on settings that failed to take effect.\nFor more information\nFor more information on syntax and usage, see Describe and Modify in Methods for the\nDataWindow Control\n5.3 PowerBuilder: DataWindow property expressions\nIn PowerBuilder, DataWindow property expressions use dot notation. These sections explain\nhow to use the expressions and what syntax to use to construct them:\n\u2022 Basic structure of DataWindows and property expressions in PowerBuilder\n\u2022 Datatypes of DataWindow property expressions in PowerBuilder\n\u2022 Using the DWObject variable in PowerBuilder\n\u2022 When a DataWindow property expression is evaluated in PowerBuilder\n"}
{"page": 493, "text": "Accessing DataWindow Object Properties in Code\nPage 493\n\u2022 Handling errors from DataWindow property expressions in PowerBuilder\n\u2022 PowerBuilder syntax for DataWindow property expressions\n5.3.1 Basic structure of DataWindows and property expressions in\nPowerBuilder\nControls in a DataWindow\nA DataWindow object is made up of many controls (such as Columns, Text, Pictures,\nand Reports). In PowerBuilder scripts, the datatype of these controls is DWObject. Each\nDWObject has a set of properties according to its type. The syntax of a property expression\nallows you to address any of these properties.\nObject property\nA DataWindow property expression uses the Object property of the DataWindow control to\naccess the DataWindow object. Following the Object property, you specify a control name\nand one or more properties.\nThe simple syntax is:\ndwcontrol.Object.dwcontrolname.property\nFor example:\ndw_1.Object.empname.Resizeable\nFor the full syntax, see PowerBuilder syntax for DataWindow property expressions.\nAbout DataWindow data expressions\nExpressions that access data in a DataWindow object using dot notation use the\nObject and Data properties. These expressions are called data expressions (in contrast\nto property expressions); because of the intricate syntax for data expressions, they are\ndescribed separately, in Accessing Data in Code.\n5.3.2 Datatypes of DataWindow property expressions in PowerBuilder\nDataWindow property values\nThe values of DataWindow object properties are strings. These strings can contain numeric or\nyes/no values, but the values you access are strings, not integers or boolean values.\nAlthough the property values are really strings, the PowerScript compiler allows you to\nassign numbers and boolean values to properties whose strings represent numeric values\nor contain yes/no strings. This does not mean the datatype is integer or boolean. It is just a\nconvenience when assigning a value to the property.\nFor example, both of these statements are correct:\ndw_1.Object.empname.Border = 1\ndw_1.Object.empname.Border = '1'\nDataWindow property expressions\nIn PowerBuilder, the datatype of a property expression is Any (not string), but the value of\nthe data in the Any variable is a string. This may sound like an unnecessary distinction, but\n"}
{"page": 494, "text": "Accessing DataWindow Object Properties in Code\nPage 494\nit does matter when you use a property expression as a method argument. If the method does\nnot accept an Any variable as an argument, you might need to use the String function to cast\nthe data to the correct datatype.\nFor example, because the MessageBox function accepts a string argument not an Any\ndatatype, the property expression is enclosed in a String conversion function:\nMessageBox(\"Border\", & String(dw_1.Object.empname.Border))\n5.3.3 Using the DWObject variable in PowerBuilder\nA PowerBuilder DWObject object is an object that exists within a DataWindow object. Each\ncolumn, computed field, text control, or drawing control is a DWObject.\nA DWObject reference allows you to refer directly to controls within a DataWindow.\nYou can use a DWObject variable to simplify DataWindow property and data expressions. A\nDWObject variable takes the place of several elements of the control's dot notation.\nThe following syntaxes and examples show how using a DWObject variable affects property\nand data expressions.\nProperty expressions\nThe simple syntax for a property expression is:\ndwcontrol.Object.dwcontrolname.property\nYou can use a DWObject variable to refer to dwcontrolname.\nIf the code declares a DWObject variable and assigns the control within the DataWindow to\nthe variable, using syntax like this:\nDWObject dwobjectvar\ndwobjectvar = dwcontrol.Object.dwcontrolname\nthe syntax of the expression itself becomes:\ndwobjectvar.property\nFor example, if the DataWindow had a column named empname, a text control named\nt_emplabel, and a computed field named cf_average, you could make the following\nassignments:\nDWObject dwo_column, dwo_text, dwo_compute\ndwo_column = dw_1.Object.empname\ndwo_text = dw_1.Object.t_emplabel\ndwo_compute = dw_1.Object.cf_average\nData expressions\nYou can use a DWObject variable to refer to a column in a data expression. For example, this\nsyntax gets data for a single row and column:\ndwcontrol.Object.columnname {.buffer } {.datasource } [ rownum ]\nIf the code declares a DWObject variable and assigns the control within the DataWindow to\nthe variable, using syntax like this:\nDWObject dwobjectvar\ndwobjectvar = dwcontrol.Object.columnname\n"}
{"page": 495, "text": "Accessing DataWindow Object Properties in Code\nPage 495\nThe syntax of the expression itself becomes:\ndwobjectvar. {.buffer } {.datasource } [ rownum ]\n5.3.3.1 DWObject variables in PowerBuilder\nIn PowerBuilder, you can get better performance by using a DWObject variable to resolve\nthe object reference in a DataWindow property or data expression. Evaluating the reference\nonce and reusing the resolved reference is more efficient than fully specifying the object\nreference again.\nThis technique yields the most benefit if your application uses compiled code or if you are\nusing a DataWindow expression in a loop.\nFor example, this code is not optimized for best performance, because the fully specified data\nexpression within the loop must be resolved during each pass:\ninteger li_data\nFOR li_cnt = 1 to 100\n      li_data = dw_1.Object.emp_salary[li_cnt]\n      .. // Code to process data value\nNEXT\nThis code has been optimized. The reference to the control within the DataWindow\n(emp_salary) is resolved once before the loop begins. The reference stored in the DWObject\nvariable is reused repeatedly in the loop:\ninteger li_data\nDWObject dwo_empsalary\ndwo_empsalary = dw_1.Object.emp_salary\nFOR li_cnt = 1 to 100\n      li_data = dwo_empsalary.Primary[li_cnt]\n      .. // Code to process data value\nNEXT\nPowerBuilder DWObject versus data\nIn a data expression for a column that refers to one item, the brackets for the row\nindex identify the expression as a data expression (for information, see Syntax for one\nor all data items in a named column). However, if you assign the column control to a\nDWObject variable, the brackets incorrectly signify an array of objects. Therefore you\nmust include a buffer name or data source to specify that you want data:\ndw_1.Object.emp_salary[1] //Single data item\nDWObject dwo_empsalary\ndwo_empsalary = dw_1.Object.emp_salary\ndwo_empsalary[1] // Incorrect: array of DWObject\ndwo_empsalary.Primary[1] // Single data item\n5.3.3.2 DWObject arguments for DataWindow events in PowerBuilder\nIn PowerBuilder, several DataWindow events pass a DWObject argument called dwo to the\nevent script. The value is a resolved reference to a control within the DataWindow having\nsomething to do with the user's action that triggered the event. Often it is the column the user\nis changing or the control the user clicked.\n"}
{"page": 496, "text": "Accessing DataWindow Object Properties in Code\nPage 496\nWhat type of DWObject?\nYou can use DataWindow properties to find out more about the control stored in dwo. The\nfirst step is to find out the control's type so that subsequent statements will use properties that\nare appropriate for the control type. If an expression uses a property that does not correspond\nto the control's type, it will trigger the Error event. This statement in an event script gets the\ntype:\nls_type = dwo.Type\nThe possible values that can be assigned to ls_type are:\nbitmap (for Picture)\nbutton\ncolumn\ncompute (for Computed Field)\ngraph\ngroupbox\nline\nole\nellipse (for Oval)\nrectangle\nroundrectangle\nreport\ntableblob\ntext\ndatawindow (when the user doesn't click a specific control)\nYou can write a CHOOSE CASE statement for the expected types.\nAfter you have determined the type, you can get more details about the specific control.\nExamples\nIf the control is a column, you can get the column name with this statement:\nls_name = dwo.Name\nIf the control is a column, you can get data from the whole column or from specific rows.\nYou must specify the buffer from which you want to retrieve data. In this statement, row is\nanother argument passed to the event so the value in ls_data is the data in the row and column\nthe user clicked. In this example, if the column value is not a string, an error occurs (check\nColType property to get the column datatype):\nls_data = dwo.Primary[row]\nThis statement assigns a new value to the row and column the user clicked. The assignment\ndoes not trigger the ItemChanged event and bypasses validation. If the column is not\nnumeric, an error occurs:\ndwo.Primary[row] = 41\nThis statement gets all the data in the column the user clicked. The data is stored as an array\nin the Any variable. An Any variable can hold all datatypes, so no error occurs:\nAny la_data\n"}
{"page": 497, "text": "Accessing DataWindow Object Properties in Code\nPage 497\nla_data = dwo\nThis statement gets data in the column from selected rows. The data is stored as an array in\nthe Any variable:\nAny la_data\nla_data = dwo.Selected\n5.3.4 When a DataWindow property expression is evaluated in PowerBuilder\nIn PowerBuilder, expressions that refer to DataWindow object properties and data are not\nverified until your application runs.\nNo compiler checking\nWhen your script is compiled, PowerBuilder does not verify the parameters of the expression\nthat follow the Object property. Your application can select the DataWindow object in a\nDataWindow control at runtime without invalidating the compiled script.\nPotential execution errors\nIf the datatype of the expression is not compatible with how the expression is used, or if the\nspecified rows or columns do not exist, then an error will occur at runtime.\nYou can handle the error by surrounding the expression in a try-catch block or by writing a\nscript for the DataWindow Error event.\n5.3.5 Handling errors from DataWindow property expressions in PowerBuilder\nWhat causes errors\nIn PowerBuilder, an invalid DataWindow property expression causes a runtime error in your\napplication. A runtime error causes the application to terminate unless you catch the error in a\nruntime error handler or unless there is a script for the Error event.\nTable 5.5: Conditions that invalidate DataWindow property expressions\nConditions that cause\nerrors\nPossible causes\nInvalid names of controls\nwithin the DataWindow\nobject\nMistyping, which the compiler does not catch because it does\nnot evaluate the expression.\nA different DataWindow object has been inserted in the\ncontrol and it has different columns and controls.\nA property is not valid for\nthe specified control\nMistyping.\nThe control is a different type than expected.\nYou can prevent the application from terminating by handling the error in the DataWindow\ncontrol's Error event or by catching the error in a try-catch block.\nResponding to errors in the Error event script\nThe Error event's arguments give you several options for responding to the error. You choose\na course of action and set the action argument to a value of the ExceptionAction enumerated\ndatatype.\n"}
{"page": 498, "text": "Accessing DataWindow Object Properties in Code\nPage 498\nExceptionAction enumerated datatype\nIf you give the action argument a value other than ExceptionIgnore!, you will prevent\nerror-handling code in try-catch blocks from executing. For more information on\nvalues for the ExceptionAction enumerated datatype, see the Error event description\nin the Section 2.3.47, \u201cError\u201d in PowerScript Reference.\nIf you are trying to find out a property value and you know the expression might cause an\nerror, you can include code that prepares for the error by storing a default value in an instance\nvariable. Then the Error event script can return that value in place of the failed expression.\nThere are three elements to this technique: the declaration of an instance variable, the script\nthat sets the variable's default value and then accesses a DataWindow property, and the Error\nevent script. These elements are shown in Example 2 below.\nResponding to errors in a try-catch block\nYou can prevent the application from terminating by handling the DataWindow runtime error\n(DWRuntimeError) in a try-catch block. If you are trying to find out a property value and you\nknow the expression might cause an error, you can include code that automatically assigns a\nvalid default value that can be substituted for the failed expression, as in Example 2 below.\nExamples\nExample 1\nThis code displays complete information about the error in a multilineedit mle_1.\nThe error event script:\nmle_1.text = &\n   \"error#: \" + string(errornumber) + \"~r~n\" + &\n   \"text: \" + errortext + \"~r~n\" + &\n   \"parent: \" + errorwindowmenu + \"~r~n\" + &\n   \"object: \" + errorobject + \"~r~n\" + &\n   \"line: \" + string(errorline) + \"~r~n\"\naction = ExceptionIgnore!\nThe try-catch block:\nTry   ... //DataWindow property expression\nCatch (DWRuntimeError myExc)\n   mle_1.text = &\n   \"error#: \" + string(myExc.number) + \"~r~n\" +&\n   \"text: \" + myExc.text + \"~r~n\" + &\n   \"script: \" + myExc.routinename + \"~r~n\" + &\n   \"object: \" + myExc.objectname + \"~r~n\" + &\n   \"line: \" + string(myExc.line) + \"~r~n\"\nEnd Try\nIf the correct evaluation of the expression is not critical to the application, the application\ncontinues without terminating.\nExample 2\nThis example provides a return value that will become the expression's value if evaluation of\nthe expression causes an error.\nThere are three elements to code in the error event script. The instance variable is a string:\nstring is_dwvalue\n"}
{"page": 499, "text": "Accessing DataWindow Object Properties in Code\nPage 499\nThis script for a button or other control stores a valid return value in an instance variable and\nthen accesses a DataWindow property:\nis_dwvalue = \"5\"\nls_border = dw_1.Object.id.Border\nThe Error event script uses the instance variable to provide a valid return value:\naction = ExceptionSubstituteReturnValue!\nreturnvalue = is_dwvalue\nThe try-catch block:\ntry ls_border = dw_1.Object.id.Border\ncatch (DWRuntimeError myDWError)\n   ls_border = \"5\"\nend try\nAt runtime, if the id column does not exist or some other error occurs, then the expression\nreturns a valid border value -- here the string \"5\". If you are using the Error event instead of a\ntry-catch block, you must first store the value in an instance variable.\n5.3.6 PowerBuilder syntax for DataWindow property expressions\nThe following sections describe syntax for property expressions:\n\u2022 Basic syntax for DataWindow property expressions in PowerBuilder\n\u2022 Syntax for nested objects in DataWindow property expressions in PowerBuilder\n5.3.6.1 Basic syntax for DataWindow property expressions in PowerBuilder\nDescription\nDataWindow property expressions in PowerBuilder use dot notation to specify the controls\nand properties that you want to access.\nSyntax\ndwcontrol.Object.dwcontrolname { .property } .property { = value }\nTable 5.6:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you want\nto get or set properties.\nObject\nObject indicates that subsequent elements refer to the DataWindow object\nwithin dwcontrol.\ndwcontrolname\na control within the DataWindow object. Possible values are DataWindow\n(for properties that apply to the whole DataWindow) or the name of a column,\ncomputed field, graph, line, oval, picture, rectangle, roundrectangle, report,\nTableBlob, or text control.\nNested DataWindow objects\nIf dwcontrolname is a column with the DropDownDataWindow style, a\nreport, or an OLE Object control, you can specify another Object keyword\nand dwcontrolname to refer to properties of controls within the nested\n"}
{"page": 500, "text": "Accessing DataWindow Object Properties in Code\nPage 500\nArgument\nDescription\nDataWindow object. You can specify Object.dwobjectname as many times as\nneeded to refer to a deeply nested report.\nFor nested syntax, see Syntax for nested objects in DataWindow property\nexpressions in PowerBuilder.\nproperty\nA property that applies to dwcontrolname. If the property requires additional\nqualifying properties, list the additional properties, separating them with a dot.\nFor lists of applicable properties, see the Property tables at the beginning of\nDataWindow Object Properties\nvalue\nA string whose value is to be assigned to the property.\nIf the property value is a number, value can either be a string whose value is a\nnumber or a numeric datatype. The value is stored as a string.\nIf the property value is a yes or no value, value can be either a string whose\nvalue is \"yes\" or \"no\" or a boolean value (true or false). The value is stored as\n\"yes\" or \"no\" strings.\nIf the property value can be an expression, then value can be a string that takes\nthe form:\ndefaultvalue~t DataWindowexpression\nwhere:\n\u2022 Defaultvalue is any value that is allowed for property.\n\u2022 DataWindowexpression is an expression that can include names of controls\nin the DataWindow and DataWindow expression functions.\n\u2022 Defaultvalue and DataWindowexpression are separated by a tab character\n(~t).\nFor examples of DataWindow expressions, see Using DataWindow\nexpressions as property values.\nDatatype\nAny. The datatype of the expression is Any, but actual data is a string.\nFor more information about the expression's datatype, see Datatypes of DataWindow\nproperty expressions in PowerBuilder.\nExamples\nExample 1 Boolean property values\nIn this statement, the boolean value false is stored as the string \"no\":\ndw_1.Object.DataWindow.ReadOnly = false\nThis statement displays the value of the ReadOnly property (either \"yes\" or \"no\") in the\nStaticText st_status:\nst_status.Text = dw_1.Object.DataWindow.ReadOnly\n"}
{"page": 501, "text": "Accessing DataWindow Object Properties in Code\nPage 501\nWhen you test the value of a property in a relational expression, you must compare your test\nvalue to the stored values. For ReadOnly, stored values are yes or no, not boolean true or\nfalse:\nIF dw_1.Object.DataWindow.Readonly = 'yes' THEN\nThis statement fails because the expression is not boolean:\nIF dw_1.Object.DataWindow.Readonly THEN // Not valid\nExample 2\nValid values for the Visible property are 0 and 1. You can set the property to numbers, yes\nand no, or true and false. Therefore, these three statements are equivalent:\ndw_1.Object.street.Visible = false\ndw_1.Object.street.Visible = \"NO\"\ndw_1.Object.street.Visible = 0\nExample 3\nThis example tests whether the X property contains a constant (which can be converted to a\nnumber) or a DataWindow expression. The code assigns a default value of 50 to the variable\nli_x, which remains the value if the property contains an expression the script cannot convert:\ninteger li_x\nIF IsNumber( dw_1.Object.id.X ) THEN\n      li_x = Integer( dw_1.Object.id.X )\nELSE\n      li_x = 50\nEND IF\nExample 4\nThis script sets the X property to a DataWindow expression. The expression causes IDs with\nvalues less than 10 to be indented:\nstring modstring, ls_x\nls_x = \"50\"\nmodstring = ls_x + \"~t\" + &\n      \"If(id > 10, \" + ls_x + \",\" + &\n      String(li_x + 20 ) + \")\"\ndw_1.Object.id.X = modstring\nExample 5\nThis example makes three columns updatable and reports the value of the Update property in\nthe StaticText st_status. The reported value is \"yes\", not true:\ndw_1.Object.id.Update = true\ndw_1.Object.street.Update = true\ndw_1.Object.last_name.Update = true\n \nst_status.Text = &\n      \"Updateable: id \" + dw_1.Object.id.Update + &\n      \", street \" + dw_1.Object.street.Update + &\n      \", last_name \" + dw_1.Object.last_name.Update\nExample 6\nThis example checks whether the id column is set up as a spin control. If so, it sets the spin\nrange to 0 through 10:\n"}
{"page": 502, "text": "Accessing DataWindow Object Properties in Code\nPage 502\nIF dw_1.Object.id.EditMask.Spin = \"yes\" THEN\n      dw_1.Object.id.EditMask.SpinRange = \"0~~~~10\"\nEND IF\n5.3.6.2 Syntax for nested objects in DataWindow property expressions in PowerBuilder\nDescription\nIn PowerBuilder, DataWindow property expressions use additional Object keywords to\nrefer to nested objects. Nested objects include composite or related nested reports and\nchild DataWindows associated with DropDownDataWindow columns. Related nested and\ncomposite reports can include their own nested objects. You can extend the dot notation to\nrefer to any level of nesting.\nSyntax\ndwcontrol.Object.nestedcontrolname { [row ] } .Object.dwcontrolname. \n   property { .property } { = value }\nTable 5.7:\nArgument Description\ndwcontrol\nThe name of the DataWindow control or child DataWindow in which you want\nto get or set properties.\nObject\nThe Object keyword indicates that subsequent elements refer to the\nDataWindow object within dwcontrol.\nnestedcontrolname\nThe name of a DropDownDataWindow column, nested report, or OLE Object\ncontrol within the DataWindow object in dwcontrol.\nAbout nested reports\nA nested report can be one of a group of reports in the Composite presentation\nstyle or a nested report included in a base report, which is associated with a\nspecific row.\nrow\nWhen nestedcontrolname is a nested report in a base report, the number of the\nrow the report is associated with\nIf the report is in a band other than the detail band, it is still associated with a\nrow (see Usage below).\ndwcontrolname\nThe name of a control within the nested DataWindow object. Possible values\nare DataWindow (for properties that apply to the whole DataWindow) or the\nname of a Button, Column, Computed field, Graph, GroupBox, Line, Oval,\nPicture, Rectangle, RoundRectangle, Report, TableBlob, or Text control.\nIf dwcontrolname is a column with the DropDownDataWindow style, a Report\ncontrol, or an OLE Object control, you can specify an additional Object\nkeyword and dwcontrolname to refer to properties of controls within the nested\nDataWindow object. You can specify Object.dwcontrolname as many times as\nneeded to refer to a control in a deeply nested DataWindow object.\nproperty\nA property that applies to dwcontrolname. If the property requires additional\nqualifying properties, list the additional properties, separating them with a dot.\nFor lists of applicable properties, see the Property tables in DataWindow Object\nProperties\n"}
{"page": 503, "text": "Accessing DataWindow Object Properties in Code\nPage 503\nArgument Description\nvalue\nA string whose value is to be assigned to the property\nFor more information, see Basic syntax for DataWindow property expressions\nin PowerBuilder.\nDatatype\nAny. The datatype of the expression is Any, but the actual data is a string.\nFor more information about the expression's datatype, see Datatypes of DataWindow\nproperty expressions in PowerBuilder.\nUsage\nA nested report within a base report is usually in the detail band, and each instance of the\nreport is associated with a row. The property expression must include a row number to\nidentify which report to access. If the nested report is in a band other than detail, there may be\nonly one or a few instances of the report, but it is still associated with a row. The expression\nmust include a row number that has an instance of the report.\nThe following table lists the band and the row that is associated with the report:\nTable 5.8:\nIf the report is in\nthis band\nThis row is associated with the report\ndetail\nThe specified row.\nheader\nThe first row on the page. On screen, this is the first row visible in the\nDataWindow body.\nfooter\nThe last row on the page. On screen, this is the last row visible in the\nDataWindow body.\nheader.n (group\nheader)\nThe first row of the group (where n is the group number).\ntrailer.n (group\ntrailer)\nThe last row of the group (where n is the group number).\nsummary\nThe last row in the report.\nExamples\nExample 1\nSuppose that a DataWindow has the Composite presentation style and includes a report called\nrpt_employee. The report includes a column emp_id. This expression gets the validation\nexpression for the column:\nstring ls_valid\nls_valid = dw_composite.Object.rpt_employee.&\n      Object.emp_id.Validation\nExample 2\nIn a Composite DataWindow, one of the reports rpt_1 has a graph gr_1. This example turns\non grid lines for the category axis of that graph. The example sets an instance variable\n"}
{"page": 504, "text": "Accessing DataWindow Object Properties in Code\nPage 504\nto a default value of \"not found\". If the expression fails and triggers the Error event, the\nExceptionSubstituteReturnValue! action causes the text \"not found\" to be returned so that the\nsecond assignment succeeds:\nis_dwvalue = \"not found\"\ndw_1.Object.rpt_1.Object.&\n      gr_1.Category.MajorGridline = 5\nst_status.Text = dw_1.Object.rpt_1.Object.&\n      gr_1.Category.MajorGridline\nThe script for the Error event includes these lines:\naction = ExceptionSubstituteReturnValue!\nreturnvalue = is_dwvalue\nExample 3\nSuppose that a DataWindow called dw_emp is a base report with employee information. The\ndetail band includes a nested report of salary history called rpt_salary. This means there is a\nseparate report with its own properties in each row.\nThe script checks whether the employee belongs to management (the value in the rank\ncolumn in the base report is M). If so, the script assigns a DataWindow expression to the\nColor property of the salary column in the rpt_salary nested report. The expression highlights\nsalaries that are over $60,000 in red.\nAnother statement sets the salary column's Mode property so the color change will be visible:\ninteger li_row\n \nFOR li_row = 1 to RowCount( )\n      IF dw_emp.Object.rank.Primary[li_row] = \"M\" THEN\n \n       dw_emp.Object.rpt_salary[li_row].Object.&\n         salary.Background.Color = &\n         '255 ~t If(salary > 60000, 255, 0)'\n \n       dw_emp.Object.rpt_salary[li_row].Object.&\n         salary.Background.Mode = 0\n \n      END IF\nNEXT\nExample 4\nIn this example there is a graph in the summary band of a base report called dw_emp. The\ngraph is a nested report called rpt_graph_salaries. Although the graph is not related to a\nparticular row, you still need to provide the row number associated with the summary band\nwhen you refer to its properties. This statement turns on autoscaling for the values axis:\ndw_emp.Object.rpt_graph_salaries.Object.&\n      gr_1.Values.AutoScale = 1\nExample 5\nIf a column has a DropDownDataWindow edit style, there are properties that affect the\ncolumn's appearance. Using nested object syntax, you can also change properties of the child\nDataWindow for the column. In this example, the DataWindow dw_gift allows a clerk at a\nnonprofit organization to record donations. The clerk can pick a standard donation amount\nfrom a drop-down DataWindow.\n"}
{"page": 505, "text": "Accessing DataWindow Object Properties in Code\nPage 505\nThis example makes the drop-down DataWindow column called amount a required value and\nchanges the display format for the dollars column in the child DataWindow:\ndw_gift.Object.amount.dddw.Required = \"Yes\"\ndw_gift.Object.amount.Object.dollars.Format = \"$#,##0\"\n5.4 JavaScript: Modify and Describe methods for properties\nIn JavaScript, you can get and set DataWindow properties with the Describe and Modify\nmethods. Property expressions and DWObject variables are not supported.\nThese sections describe how to use Modify and Describe in JavaScript:\n\u2022 Advantage and drawbacks of the Modify and Describe methods in JavaScript\n\u2022 Handling errors for Modify and Describe methods in JavaScript\n5.4.1 Advantage and drawbacks of the Modify and Describe methods in\nJavaScript\nIn JavaScript, using the Describe and Modify methods to access DataWindow property\nvalues has advantages and drawbacks. The examples here use Modify as illustrations, but\nsimilar considerations apply to Describe.\nAdvantage\nYou can specify column and property names dynamically\nIn your script, you can build a string that specifies the column and property names.\nFor example, the following code builds a string in which the default color value and the two\ncolor values in the If function are determined in the script. Notice how the single quotes\naround the expression are included in the first and last pieces of the string:\nred_amount = parseInt(text_1.value);\nif (red_amount >= 0 and red_amount < 256) {\n      modstring = \"emp_id.Color='\" \n      + text_1.value \n      + \"\\t If(emp_status=~'A~',\" \n      + 255 \n      + \",\" \n      + text_1.value \n      + \")'\";\ndw_1.Modify(modstring)\nThe resulting string when red_amount is set to 128 is:\nemp_id.Color='128\\tIf(emp_status=~'A~',255,128)'\nThe following is a simpler example without the If function. The Color property for the\ncolumn specified in ls_columnname is set to a constant value. You do not need quotes around\nthe value if you are not specifying an expression:\ndw_1.Modify(ls_columnname + \".Color=255\");\nDrawbacks\nSetting several properties at once is possible but hard to debug\n"}
{"page": 506, "text": "Accessing DataWindow Object Properties in Code\nPage 506\nAlthough you can set several properties in a single method call, it is harder to understand and\ndebug scripts that do so.\nFor example, the code for setting three properties is not too complex because there are no\nnested strings:\nrtn = dw_1.Modify(\"emp_id.Font.Italic=0\noval_1.Background.Mode=0\noval_1.Background.Color=255\");\nComplex quoted strings are sometimes required\nWhen you specify an expression for a property value, it is difficult to specify nested quotes\ncorrectly -- the code is hard to understand and prone to error. For Describe, this is less of a\ndrawback -- strings will not become as complex because they do not include an expression.\nFor example, this string entered on a single line in a script assigns a DataWindow expression\nto the Color property:\nModify(\"emp_id.Color=\\\"16777215 \\t\nIf(emp_status=~~\\\"A~~\\\",255,16777215)\\\"\");\nFor more information about quoted strings, see Section 1.2.1, \u201cStandard datatypes\u201d in\nPowerScript Reference.\n5.4.2 Handling errors for Modify and Describe methods in JavaScript\nIn all environments, including JavaScript, no runtime error occurs when Describe and Modify\ntry to access invalid controls or properties in the DataWindow object. The validity of the\nargument string is evaluated before the controls are accessed.\nModify\nWhen the string that specifies the control and property to be accessed is invalid, Modify\nreturns an error string, instead of the expected value, such as:\nLine 1 Column 12: incorrect syntax.\nYou can use the error message to figure out what part of the string is incorrect. This is most\nuseful when you are testing your scripts. The error message, which names the line and\ncolumn number after which the string was not recognized, may not be helpful after your\napplication is deployed.\nDescribe\nWhen the string for Describe has an unrecognized property, Describe's return value ends with\nan exclamation point (!). It will return as many values as it recognizes up to the incorrect one.\nWhen you specify a valid property but that property doesn't have a value (either because it\nhasn't been set or because its value is an expression that can't be evaluated), Describe returns\na question mark (?) for that property. The property's actual value is null.\nAlways check for errors\nYou should include error-checking code that checks for these return values. Other\nerrors can occur later if you depend on settings that failed to take effect.\nFor more information\n"}
{"page": 507, "text": "Accessing DataWindow Object Properties in Code\nPage 507\nFor more information on syntax and usage, see Describe and Modify in Methods for the\nDataWindow Control.\n"}
{"page": 508, "text": "DataWindow Constants\nPage 508\n6 DataWindow Constants\nAbout this chapter\nThis chapter lists the PowerBuilder enumerated datatypes that provide constants for setting\nDataWindow property values.\n6.1 About DataWindow constants\nAbout constants\nThis section lists the constants that are defined in the DataWindow control for values of\nproperties and arguments for methods. Constants have both a name and a numeric value.\nWhat values to use\nPowerBuilder\nIn PowerBuilder, constants are defined as sets of values associated with enumerated\ndatatypes. Values for enumerated datatypes always end with an exclamation point. When an\nenumerated datatype is specified as the datatype, you must use the enumerated value. You\ncannot use the numeric equivalent.\ndw1.BorderStyle = StyleRaised!\nJavaScript\nIn JavaScript, you must use the numeric value. The named values are not available.\nDataWindow object properties\nWhen setting DataWindow properties in PowerBuilder, you use the numeric value in quoted\nstrings.\nHow this section is organized\nThis section lists the values according to the PowerBuilder enumerated datatypes, so you\ncan see which values are available for setting a particular type of data. If you know a value's\nname but not the enumerated datatype it belongs to, you can find the value in the index of this\nbook.\n6.2 Alphabetical list of DataWindow constants\nThis section groups DataWindow constants according to enumerated datatype.\nTable 6.1:\nEnumerated datatype\nAccessibleRole\nAlignment\nBand\nBorder\nBorderStyle\nCharSet\nDWBuffer\n"}
{"page": 509, "text": "DataWindow Constants\nPage 509\nEnumerated datatype\nDWConflictResolution\nDWItemStatus\nFillPattern\ngrColorType\ngrDataType\ngrObjectType\ngrObjectType\nLineStyle\nMetaDataType\nRichTextToolbarActivation\nRowFocusInd\nSaveAsType\nSQLPreviewFunction\nSaveMetaData\nSQLPreviewType\nWebPagingMethod\n6.3 AccessibleRole\nDescription\nValues for specifying the AccessibleRole property for DataWindows and controls in\nDataWindows.\nValues\nUse the numeric values with the AccessibleRole DataWindow object property\nTable 6.2:\nPowerBuilder enumerated value\nNumeric value\nDefaultRole!\n0\nTitleBarRole!\n1\nMenuBarRole!\n2\nScrollBarRole!\n3\nGripRole!\n4\nSoundRole!\n5\nCursorRole!\n6\nCaretRole!\n7\nAlertRole!\n8\nWindowRole!\n9\nClientRole!\n10\n"}
{"page": 510, "text": "DataWindow Constants\nPage 510\nPowerBuilder enumerated value\nNumeric value\nMenuPopupRole!\n11\nMenuItemRole!\n12\nToolTipRole!\n13\nApplicationRole!\n14\nDocumentRole!\n15\nPaneRole!\n16\nChartRole!\n17\nDialogRole!\n18\nBorderRole!\n19\nGroupingRole!\n20\nSeparatorRole!\n21\nToolBarRole!\n22\nStatusBarRole!\n23\nTableRole!\n24\nColumnHeaderRole!\n25\nRowHeaderRole!\n26\nColumnRole!\n27\nRowRole!\n28\nCellRole!\n29\nLinkRole!\n30\nHelpBalloonRole!\n31\nCharacterRole!\n32\nListRole!\n33\nListItemRole!\n34\nOutlineRole!\n35\nOutlineItemRole!\n36\nPageTabRole!\n37\nPropertyPageRole!\n38\nIndicatorRole!\n39\nGraphicRole!\n40\nStaticTextRole!\n41\nTextRole!\n42\nPushButtonRole!\n43\nCheckButtonRole!\n44\nRadioButtonRole!\n45\n"}
{"page": 511, "text": "DataWindow Constants\nPage 511\nPowerBuilder enumerated value\nNumeric value\nComboBoxRole!\n46\nDropListRole!\n47\nProgressBarRole!\n48\nDialRole!\n49\nHotkeyFieldRole!\n50\nSliderRole!\n51\nSpinButtonRole!\n52\nDiagramRole!\n53\nAnimationRole!\n54\nEquationRole!\n55\nButtonDropDownRole!\n56\nButtonMenuRole!\n57\nButtonDropDownGridRole!\n58\nWhiteSpaceRole!\n59\nPageTabListRole!\n60\nClockRole!\n61\nSplitButtonRole!\n62\nIPAddressRole!\n63\nOutlineButtonRole!\n64\n6.4 Alignment\nDescription\nValues for specifying the alignment of text in DataWindow columns or text controls.\nValues\nUse the numeric values with the Alignment DataWindow object property.\nTable 6.3:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nLeft!\n0\nText is left aligned.\nRight!\n1\nText is right aligned.\nCenter!\n2\nText is centered.\nJustify!\n3\nWrapped text is justified. The last line of text is not stretched\nto fill the area. So for a single line of text, justified alignment\nwill appear to have no effect.\nSee also\nAlignment\n"}
{"page": 512, "text": "DataWindow Constants\nPage 512\n6.5 Band\nDescription\nValues identifying the band containing the insertion point in a DataWindow control.\nIn PowerBuilder, band values are returned by the Position method for a RichTextEdit\nDataWindow.\nValues\nTable 6.4:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nDetail!\n0\nThe detail band\nHeader!\n1\nThe header band\nFooter!\n2\nThe footer band\n6.6 Border\nDescription\nValues identifying the border style for a column in a DataWindow.\nUsed in the GetBorderStyle and SetBorderStyle methods and the Border property for\nDataWindow columns.\nValues\nTable 6.5:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nNoBorder!\n0\nNo border.\nShadowBox!\n1\nEach data value is in a box that has a drop shadow\nBox!\n2\nEach data value is surrounded by a rectangular border with\nno shading\nResizeBorder!\n3\nThe column is resizable; the user can grab the border around\nany data value and drag it\nUnderline!\n4\nEach data value in the column is underlined\nLowered!\n5\nEach data value has a 3D border with shading to make it look\nlowered\nRaised!\n6\nEach data value has a 3D border with shading to make it look\nraised\nSee also\nBorder\nGetBorderStyle\nSetBorderStyle\n"}
{"page": 513, "text": "DataWindow Constants\nPage 513\n6.7 BorderStyle\nDescription\nValues for specifying the border style of the DataWindow control.\nPowerBuilder only. Used for the Border property of the DataWindow control.\nValues\nTable 6.6:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nStyleBox!\n2\nThe DataWindow control is surrounded by a rectangular box\nwithout any shading\nStyleLowered!\n5\nThe control has a 3D border with shading to make it look\nlowered\nStyleRaised!\n6\nThe control has a 3D border with shading to make it look\nraised\nStyleShadowBox!\n1\nThe control has a rectangular border with a drop shadow\nSee also\nBorder\n6.8 CharSet\nDescription\nValues for specifying the character set used in the DataWindow.\nGenerally, the value for CharSet is derived from the font selected for controls within the\nDataWindow.\nValues are used with the Font.CharSet DataWindow object property. Use the numeric values,\nnot the enumerated values, for DataWindow object properties.\nValues\nTable 6.7:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\n \n1\nThe default character set for the specified font\nCharSetAnsi!\n0\nStandard ANSI\nCharSetUnicode!\n \nUnicode\nCharSetAnsiHebrew! \nRight-to-left Hebrew\nCharSetAnsiArabic!  \nRight-to-left Arabic\nCharSetDBCS-\nJapanese!\n \nDouble-byte Japanese\n \n2\nSymbol\n"}
{"page": 514, "text": "DataWindow Constants\nPage 514\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\n \n128\nShift-JIS\n \n255\nOEM\nSee also\nFont.property\n6.9 DWBuffer\nDescription\nValues for specifying the DataWindow buffer containing the rows you want to access.\nUsed in many DataWindow methods that access data.\nValues\nTable 6.8:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nPrimary!\n0\nThe data in the primary buffer, meaning data that has not\nbeen deleted or filtered out. (Default value when argument is\noptional.)\nDelete!\n1\nData in the delete buffer, meaning data that has been deleted\nfrom the DataWindow but has not been committed to the\ndatabase.\nFilter!\n2\nData in the filter buffer, meaning data that has been removed\nfrom view.\nSee also\nGetItemStatus\nSetItem\n6.10 DWConflictResolution\nDescription\nValues for specifying how to handle potential conflicts when synchronizing DataWindows in\na distributed application.\nValues\nTable 6.9:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nFailOnAnyConflict! 0\nPrevents changes from being synchronized if data in\nthe source DataWindow has changed since its state was\ncaptured. (Default value when argument is optional.)\n"}
{"page": 515, "text": "DataWindow Constants\nPage 515\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nAllowPartialChanges!1\nAllows changes that are not in conflict to be applied.\nSee also\nSetChanges explains how to test whether conflicts exist.\n6.11 DWItemStatus\nDescription\nValues for specifying how DataWindow data will be updated in the database.\nValues\nTable 6.10:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nNotModified!\n0\nThe information in the row or column is unchanged from\nwhat was retrieved.\nDataModified!\n1\nThe information in the column or one of the columns in the\nrow has changed since it was retrieved.\nNew!\n2\nThe row is new but no values have been specified for its\ncolumns. (Applies to rows only, not to individual columns.)\nNewModified!\n3\nThe row is new, and values have been assigned to its\ncolumns. In addition to changes caused by user entry or the\nSetItem method, a new row gets the status NewModified\nwhen one of its columns has a default value. (Apples to rows\nonly, not to individual columns.)\nSee also\nSetItemStatus describes how to change individual item statuses and how the status affects the\nSQL statements that update the database.\n6.12 FillPattern\nDescription\nValues for the fill pattern of shapes (for example, bars or pie slices) in a graph control.\nUsed in Get/SetSeriesStyle and Get/SetDataStyle methods for graph controls in a\nDataWindow or PowerBuilder graph controls.\nValues\nTable 6.11:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nSolid!\n0\nA solid color\n"}
{"page": 516, "text": "DataWindow Constants\nPage 516\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nHorizontal!\n1\nHorizontal lines\nVertical!\n2\nVertical lines\nFDiagonal!\n3\nLines from upper left to lower right\nBDiagonal!\n4\nLines from lower left to upper right\nSquare!\n5\nA pattern of squares\nDiamond!\n6\nA pattern of diamonds\nSee also\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n6.13 grColorType\nDescription\nValues for specifying the purpose of a color in a graph, for example, background or\nforeground.\nUsed in Get/SetSeriesStyle and Get/SetDataStyle methods for graph controls in a\nDataWindow or for PowerBuilder graph controls.\nValues\nTable 6.12:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nForeground!\n0\nText (fill color)\nBackground!\n1\nThe background color\nShade!\n2\nThe shaded area of three-dimensional graphics\nLineColor!\n3\nThe color of the line\nSee also\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n6.14 grDataType\nDescription\n"}
{"page": 517, "text": "DataWindow Constants\nPage 517\nValues for specifying X or Y value when getting information about a scatter graph.\nUsed in the GetData method for graph controls in a DataWindow or for PowerBuilder graph\ncontrols.\nValues\nTable 6.13:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nyValue!\n1\n(Default) The y value of the data point\nxValue!\n0\nThe x value of the data point\nSee also\nGetData\n6.15 grObjectType\nDescription\nValues that identify parts of a graph.\nUsed as the return value of the ObjectAtPointer method for graph controls in a DataWindow\nor for PowerBuilder graph controls.\nValues\nTable 6.14:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nTypeGraph!\n0\nAny place within the graph control that isn't another\ngrObjectType\nTypeTitle!\n4\nThe title of the graph\nTypeLegend!\n8\nWithin the legend box, but not on a series label\nTypeData!\n2\nA data point or other data marker\nTypeCategory!\n3\nA label for a category\nTypeCategoryAxis! 10\nThe category axis or between the category labels\nTypeCategoryLabel!6\nThe label of the category axis\nTypeSeries!\n1\nThe line that connects the data points of a series when the\ngraph's type is line or on the series label in the legend box\nTypeSeriesAxis!\n9\nThe series axis of a 3D graph\nTypeSeriesLabel!\n5\nThe label of the series axis of a 3D graph\nTypeValueAxis!\n11\nThe value axis, including on the value labels\nTypeValueLabel!\n7\nThe user clicked the label of the value axis\nSee also\n"}
{"page": 518, "text": "DataWindow Constants\nPage 518\nObjectAtPointer\n6.16 grSymbolType\nDescription\nValues for the symbols associated with data points in a graph.\nUsed in Get/SetSeriesStyle and Get/SetDataStyle methods for graph controls in a\nDataWindow or for PowerBuilder graph controls.\nValues\nTable 6.15:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nNoSymbol!\n0\nNone\nSymbolHollowBox! 1\nA hollow box\nSymbolX!\n2\nAn X\nSymbolStar!\n3\nA star\nSymbolHollowUpArrow!\n4\nAn outlined up arrow\nSymbolHollowDownArrow!\n5\nAn outlined down arrow\nSymbolHollowCircle!6\nAn outlined circle\nSymbolHollowDiamond!\n7\nAn outlined diamond\nSymbolSolidBox!\n8\nA filled box\nSymbolSolidDownArrow!\n9\nA filled down arrow\nSymbolSolidUpArrow!\n10\nA filled up arrow\nSymbolSolidDiamond!\n11\nA filled diamond\nSymbolSolidCircle! 12\nA filled circle\nSymbolPlus!\n13\nA plus sign\nSee also\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n6.17 LineStyle\nDescription\nValues for the pattern of lines in a graph.\nUsed in Get/SetSeriesStyle and Get/SetDataStyle methods for graph controls in a\nDataWindow or for PowerBuilder graph controls.\n"}
{"page": 519, "text": "DataWindow Constants\nPage 519\nValues\nTable 6.16:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nContinuous!\n0\nThe line style is a solid line\nDash!\n1\nThe line style is ----\nDashDot!\n2\nThe line style is -.-.-.\nDashDotDot!\n3\nThe line style is -..-..-..\nDot!\n4\nThe line style is .....\nTransparent!\n5\nThe line allows the background shapes to show through\nSee also\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n6.18 MetaDataType\nDescription\nValues that specify whether metadata is saved when XML is exported from a DataWindow\nobject.\nValues\nTable 6.17:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nXMLNone!\n0\nMetadata (XML Schema or DTD) is not generated when\nXML is exported\nXMLSchema!\n1\nXML Schema is generated when XML is exported\nXMLDTD!\n2\nDTD is generated when XML is exported\nSee also\nSaveMetaData\n6.19 RichTextToolbarActivation\nDescription\nValues for specifying when a font toolbar appears for a DataWindow.\nValues\n"}
{"page": 520, "text": "DataWindow Constants\nPage 520\nTable 6.18:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nRichTextToolbarActivationNever!\n0\nNever displays a rich text toolbar.\nRichTextToolbarActivationOnEdit!\n1\nDisplays a rich text toolbar whenever a column with the rich\ntext edit style has focus. This is the default setting.\nRichTextToolbarActivationAlways!\n2\nDisplays a rich text toolbar at all times when the\nDataWindow is visible.\n6.20 RowFocusInd\nDescription\nValues for specifying the indicator for the current row in a DataWindow.\nUsed in the SetRowFocusIndicator method for DataWindow controls.\nValues\nTable 6.19:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nOff!\n0\nThere is no indicator for the current row\nFocusRect!\n1\nThe row with focus has a dotted rectangle around it\nHand!\n2\nA pointing hand appears in the left margin of the\nDataWindow beside the row with focus\nSee also\nSetRowFocusIndicator\n6.21 SaveAsType\nDescription\nValues for specifying a format for data you want to save.\nUsed in the SaveAs method for saving the data of a DataWindow, a graph control in a\nDataWindow, or a PowerBuilder graph control.\nValues\nTable 6.20:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nExcel!\n0\nMicrosoft Excel format.\nText!\n1\n(Default) Tab-separated columns with a return at the end of\neach row\nCSV!\n2\nComma-separated values\n"}
{"page": 521, "text": "DataWindow Constants\nPage 521\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nSYLK!\n3\nMicrosoft Multiplan format\nWKS!\n4\nLotus 1-2-3 format\nWK1!\n5\nLotus 1-2-3 format\nDIF!\n6\nData Interchange Format\ndBASE2!\n7\ndBASE-II format\ndBASE3!\n8\ndBASE-III format\nSQLInsert!\n9\nSQL syntax\nClipboard!\n10\nSave an image of the graph to the clipboard\nPSReport!\n11\nPowersoft Report (PSR) format\nWMF!\n12\nWindows Metafile format\nHTMLTable!\n13\nHTML TABLE, TR, and TD elements\nExcel5!\n14\nMicrosoft Excel Version 5 format\nXML!\n15\nExtensible Markup Language (XML)\nXSLFO!\n16\nExtensible Stylesheet Language Formatting Objects (XSL-\nFO)\nPDF!\n17\nPortable Document Format (PDF)\nExcel8!\n18\nMicrosoft Excel Version 8 and higher format\nEMF!\n19\nEnhanced Metafile Format\nXLSX!\n24\nMicrosoft Excel format for XML data (requires .NET\nFramework 4.0 or later)\nXLSB!\n25\nMicrosoft Excel format for binary data (requires .NET\nFramework 4.0 or later)\nObsolete values\nThe following SaveAsType values are considered to be obsolete and will be removed\nin a future release: Excel!, WK1!, WKS!, SYLK!, dBase2!, WMF!. Use Excel8!,\nXLSB!, or XLSX! for current versions of Microsoft Excel!, and EMF! in place of\nWMF!.\nFormats supported on UNIX\nThe following formats are supported in PowerBuilder components deployed to the UNIX\nplatform: Text!, CSV!, SQLInsert!, HTMLTable!, XML!, XSLFO!, and PDF!.\nThe following formats are not supported on UNIX: PSReport!, Excel!, Excel5!, Excel8!,\nSYLK!, WKS!, WK1!, DIF!, dBase2!, dBase3!, Clipboard!, WMF!, EMF!, XLSB!,and\nXLSX!.\nPSR format changed\nThe format of PSR files created in PowerBuilder has changed in order to improve data\nintegrity for the SaveAsAscii function. As a result, PSR files created in newer builds of\n"}
{"page": 522, "text": "DataWindow Constants\nPage 522\nPowerBuilder cannot be opened in builds that predate this change. This change was made in\nPowerBuilder 8.0 build 7063 and PowerBuilder 7.0.3 build 10102.\nSee also\nSaveAs\n6.22 SQLPreviewFunction\nDescription\nValues passed to the SQLPreview DataWindow event to indicate what method triggered the\nevent.\nValues\nTable 6.21:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nPreviewFunctionRetrieve!\n1\nThe program called the DataWindow Retrieve method\nPreviewFunctionReselectRow!\n2\nThe program called the DataWindow ReselectRow method\nPreviewFunctionUpdate!\n3\nThe program called the DataWindow Update method\nSee also\nSQLPreview\n6.23 SaveMetaData\nDescription\nValues that specify how metadata is saved when it is generated with the XML exported from\na DataWindow object.\nValues\nTable 6.22:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nMetaDataInternal!\n0\nMetadata is saved into the generated XML document or\nstring. To save data using the .Data.XML expression syntax,\nyou must use this value.\nMetaDataExternal! 1\nMetadata is saved as an external .xsd or .dtd file (SaveAs\nmethod only).\nSee also\nMetaDataType\n6.24 SQLPreviewType\nDescription\n"}
{"page": 523, "text": "DataWindow Constants\nPage 523\nValues passed to the SQLPreview DataWindow event to indicate what SQL statement is\nbeing sent to the DBMS.\nValues\nTable 6.23:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nPreviewSelect!\n1\nA SELECT statement\nPreviewInsert!\n2\nAn INSERT statement\nPreviewDelete!\n3\nA DELETE statement\nPreviewUpdate!\n4\nAn UPDATE statement\nSee also\nSQLPreview\n6.25 WebPagingMethod\nDescription\nValues that specify how the Web DataWindow handles paging requests.\nObsolete constant\nWebPagingMethod is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nValues\nTable 6.24:\nPowerBuilder\nenumerated value\nNumeric\nvalue\nMeaning\nPostback!\n0\nPost back to server to perform paging operations\nCallback!\n1\nUse script callbacks to retrieve the next page of XML data\nXMLClientside!\n2\nRetrieve entire result set and use XSLT transformation of\ncached stylesheet to perform paging operations on the client\n"}
{"page": 524, "text": "Properties of the DataWindow Control and DataStore\nPage 524\n7 Properties of the DataWindow Control and\nDataStore\nAbout this chapter\nThe chapter lists the properties of the DataWindow control and DataStore. These\nproperties can be set in code to control the appearance and behavior of the container for the\nDataWindow object.\n7.1 Properties for PowerBuilder DataWindow\nThese properties are also documented in the Part I, \u201cObjects and Controls\u201d.\n7.1.1 Properties for DataStore objects\nYou can set properties of a DataStore object in code using dot notation.\nTable 7.1: Setting DataStore properties using dot notation\nDataStore\nproperty\nDatatype\nDescription\nDataObject\nString\nSpecifies the name of the DataWindow or Report object\nassociated with the control.\nClassDefinition\nPowerObject An object of type PowerObject containing information about the\nclass definition of the object or control.\nObject\nDWObject\nUsed for the direct manipulation of controls within a\nDataWindow object from a script. These controls could be, for\nexample, columns or text controls.\nFor information, see Accessing Data in Code and Accessing\nDataWindow Object Properties in Code.\n7.1.2 Properties for DataWindow controls\nYou can set properties of a DataWindow control in the window or user object painter or in\ncode.\nTable 7.2: Properties of DataWindow controls\nDataWindow\nproperty\nDatatype\nDescription\nBorder\nBoolean\nSpecifies whether the control has a border. Values are:\n\u2022 True -- Control has a border.\n\u2022 False -- Control does not have a border.\nBorderStyle BorderStyle\n(enumerated)\nSpecifies the border style of the control. Values are:\nStyleBox!\nStyleLowered!\nStyleRaised!\nStyleShadowBox!\n"}
{"page": 525, "text": "Properties of the DataWindow Control and DataStore\nPage 525\nDataWindow\nproperty\nDatatype\nDescription\nBringToTop Boolean\nSpecifies whether PowerBuilder moves the control to the top of\nthe front-to-back order.\nClassDefinition\nPowerObject An object of type PowerObject containing information about the\nclass definition of the object or control.\nControlMenuBoolean\nSpecifies whether the Control Menu box displays in the control\ntitle bar. Values are:\n\u2022 True -- Control Menu box displays in the control title bar.\n\u2022 False -- Control Menu box does not display in the control title\nbar.\nDataObject String\nSpecifies the name of the DataWindow object or Report object\nassociated with the control.\nDragAuto\nBoolean\nSpecifies whether PowerBuilder puts the control automatically\ninto Drag Mode. DragAuto has these boolean values:\n\u2022 True -- When the control is clicked, the control is\nautomatically in Drag Mode.\n\u2022 False -- When the control is clicked, the control is not\nautomatically in Drag Mode. You have to manually put the\ncontrol into Drag Mode by using the Drag function.\nDragIcon\nString\nSpecifies the name of the stock icon or the file containing the\nicon you want to display when the user drags the control (the\nICO file). The default icon is a box the size of the control.\nWhen the user drags the control, the icon displays when the\ncontrol is over an area in which the control can be dropped (a\nvalid drop area). When the control is over an area that is not a\nvalid drop area, the No-Drop icon displays.\nEnabled\nBoolean\nSpecifies whether the control is enabled (can be selected). Values\nare:\n\u2022 True -- Control is enabled.\n\u2022 False -- Control is not enabled.\nHeight\nInteger\nSpecifies the height of the DataWindow control, in PowerBuilder\nunits.\nHScrollBar Boolean\nSpecifies whether a horizontal scroll bar displays in the control\nwhen all the data cannot be displayed at one time. Values are:\n\u2022 True -- Horizontal scroll bar is displayed.\n\u2022 False -- Horizontal scroll bar is not displayed.\nHSplitScroll Boolean\nSpecifies whether the split bar displays in the control. Values are:\n"}
{"page": 526, "text": "Properties of the DataWindow Control and DataStore\nPage 526\nDataWindow\nproperty\nDatatype\nDescription\n\u2022 True -- Split bar is displayed.\n\u2022 False -- Split bar is not displayed.\nIcon\nString\nSpecifies the name of the ICO file that contains the icon that\ndisplays when the DataWindow control is minimized.\nLiveScroll\nBoolean\nScrolls the rows in the DataWindow control while the user is\nmoving the scroll box.\nMaxBox\nBoolean\nSpecifies whether a Maximize Box displays in the DataWindow\ncontrol title bar. Values are:\n\u2022 True -- Maximize Box displays.\n\u2022 False -- Maximize Box does not display.\nMinBox\nBoolean\nSpecifies whether a Minimize Box displays in the DataWindow\ncontrol title bar. Values are:\n\u2022 True -- Minimize Box displays.\n\u2022 False -- Minimize Box does not display.\nObject\nDWObject\nUsed for the direct manipulation of controls within a\nDataWindow object from a script. These controls could be, for\nexample, columns or text controls.\nFor information, see Accessing Data in Code and Accessing\nDataWindow Object Properties in Code.\nResizable\nBoolean\nSpecifies whether the DataWindow control is resizable. Values\nare:\n\u2022 True -- DataWindow is resizable.\n\u2022 False -- DataWindow is not resizable.\nRightToLeft Boolean\nSpecifies that characters should be displayed in right-to-left\norder. The application must be running on an operating system\nthat supports right-to-left display. Values are:\n\u2022 True -- Characters display in right-to-left order.\n\u2022 False -- Characters display in left-to-right order.\nTabOrder\nInteger\nSpecifies the tab value of the DataWindow control within the\nwindow or user object. (0 means the user cannot tab to the\ncontrol.)\nTag\nString\nSpecifies the tag value assigned to the DataWindow control.\nTitle\nString\nSpecifies the text that displays in the DataWindow control title\nbar.\n"}
{"page": 527, "text": "Properties of the DataWindow Control and DataStore\nPage 527\nDataWindow\nproperty\nDatatype\nDescription\nTitleBar\nBoolean\nSpecifies whether a title bar displays in the DataWindow control.\nThe user can move the DataWindow control only if it has a title\nbar. Values are:\n\u2022 True -- Title bar is displayed in control.\n\u2022 False -- No title bar is displayed in control.\nVisible\nBoolean\nSpecifies whether the DataWindow control is visible. Values are:\n\u2022 True -- Control is visible.\n\u2022 False -- Control is not visible.\nVScrollBar Boolean\nSpecifies whether a vertical scroll bar displays in the control\nwhen not all the data can be displayed at one time. Values are:\n\u2022 True -- Vertical scroll bar is displayed.\n\u2022 False -- Vertical scroll bar is not displayed.\nWidth\nInteger\nSpecifies the width of the DataWindow control, in PowerBuilder\nunits.\nX\nInteger\nSpecifies the X position (the distance from the left edge of the\nwindow), in PowerBuilder units.\nY\nInteger\nSpecifies the Y position (the distance from the top edge of the\nwindow), in PowerBuilder units.\n"}
{"page": 528, "text": "DataWindow Events\nPage 528\n8 DataWindow Events\nAbout this chapter\nThis chapter describes what DataWindow objects are and the ways you can use them in\nvarious programming environments.\n8.1 About return values for DataWindow events\nThe way to specify a return code in a DataWindow event is different in each of the\nDataWindow environments.\nPowerBuilder\nUse a RETURN statement as the last statement in the event script. The datatype of the value\nis long.\nFor example, in the ItemChanged event, set the return code to 2 to reject an empty string as a\ndata value:\nIF data = \"\" THEN RETURN 2\nJava\nUse the setReturnCode method of the event object passed to the event. The datatype of the\nvalue is int. The setReturnCode method is inherited from the parent EventData class.\nFor example, in the retrieveStart event, prevent the DataWindow from being reset, so that the\nnewly retrieved rows as appended to the rows already retrieved:\nevent.setReturnCode(2);\n8.2 Categories of DataWindow events\nThe reference entries are listed in alphabetical order. To help you find the event you need, the\nevents are organized here by the type of actions that trigger them.\nChanging data\nEditChanged\nItemChanged\nItemError\nDropDown for drop-down lists\nDatabase access\nDBError\nRetrieveStart\nRetrieveRow\nRetrieveEnd\nSQLPreview\nUpdateStart\nUpdateEnd\n"}
{"page": 529, "text": "DataWindow Events\nPage 529\nError handling\nDBError\nError\nItemError\nWSError\nFocus\nGetFocus\nLoseFocus\nItemFocusChanged\nRowFocusChanging\nRowFocusChanged\nKey presses\nKeyDown\nProcessEnter\nTabOut\nBackTabOut\nTabDownOut\nTabUpOut\nMouse actions\nButtonClicked\nButtonClicking\nClicked\nDoubleClicked\nDragDrop\nDragEnter\nDragLeave\nDragWithin\nMouseMove\nMouseUp\nRButtonDown\nPrinting\nPrintStart\nPrintPage\nPrintMarginChange\n"}
{"page": 530, "text": "DataWindow Events\nPage 530\nPrintend\nRich Text\nRichTextCurrentStyleChanged\nRichTextLoseFocus\nRichTextLimitError\nScrolling\nScrollHorizontal\nScrollVertical\nTreeView actions\nCollapsed\nCollapsing\nExpanded\nExpanding\nTreeNodeSelected\nTreeNodeSelecting\nMiscellaneous\nConstructor\nDestructor\nResize\nGraphCreate for Graph controls and presentation styles\nHTMLContextApplied (obsolete)\nMessageText for crosstab DataWindows\n8.3 DataWindow event cross-reference\nEvent names conform to the conventions of each environment. Events for PowerBuilder\nDataWindow objects and DataStores are listed in Part I, \u201cObjects and Controls\u201d. (In Help,\nlook up DataWindow control or DataStore object, and click the Events button to view these\nlists.)\n8.4 Alphabetical list of DataWindow events\nThe list of DataWindow events follows in alphabetical order.\n8.5 BackTabOut\nDescription\nOccurs when the user presses Shift+Tab or, in some edit styles, the left arrow, to move focus\nto the prior control in the Window or user object.\n"}
{"page": 531, "text": "DataWindow Events\nPage 531\nPowerBuilder event information\nEvent ID: pbm_dwnbacktabout\nBackTabOut is not a standard PowerBuilder DataWindow event. To write a script for this\nevent, you must first define a user-defined event for the event ID pbm_dwnbacktabout.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.6 ButtonClicked\nDescription\nOccurs when the user clicks a button inside a DataWindow object.\nPowerBuilder event information\nEvent ID: pbm_dwnbuttonclicked\nTable 8.1:\nArgument\nDescription\nrow\nLong by value. The number of the row the user clicked.\nactionreturncode\nLong by value. The value returned by the action performed by the button.\nFor information about return values, see the Action DataWindow object\nproperty.\ndwo\nDWObject by value. A reference to the control within the DataWindow under\nthe pointer when the user clicked.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nThe ButtonClicked event executes code after the action assigned to the button has occurred.\nThis event is fired only if you have not selected Suppress Event Processing for the button.\nIf Suppress Event Processing is on, only the Clicked event and the action assigned to the\nbutton are executed when the button is clicked.\nIf Suppress Event Processing is off, the Clicked event and the ButtonClicked event are\nfired. If the return code of the ButtonClicking event is 0, the action assigned to the button is\nexecuted and the ButtonClicked event is fired. If the return code of the ButtonClicking event\nis 1, neither the action nor the ButtonClicked event are executed.\nDo not use a message box in the Clicked event\nIf you call the MessageBox function in the Clicked event, the action assigned to the\nbutton is executed, but the ButtonClicking and ButtonClicked events are not executed.\n"}
{"page": 532, "text": "DataWindow Events\nPage 532\nReturning the row number\nWhen you place a button in the DataWindow and use the window's ButtonClicked\nevent to return the row number, you will get different results depending on where you\nplace the button. If the button is in the Detail band, it returns the number of the row.\nIf the button is in the Header band, it returns the number of the first row displayed in\nthe DataWindow control. If the button is in the Summary band, it returns the number\nof the final row in the list. If the button is in the Footer band, it returns the number of\nthe last row displayed in the DataWindow control.\nExamples\nThis statement in the ButtonClicked event displays the value returned by the button's action:\nMessageBox(\" \", actionreturncode)\nThis statement in the ButtonClicked event displays the value returned by the button's action:\nString         ls_Object\nString         ls_Win\nls_Object = String(dwo.name)\nIf ls_Object = \"cb_close\" Then\n   Close(Parent)\nElseIf ls_Object = \"cb_help\" Then\n   ls_win = parent.ClassName()\n   f_open_help(ls_win)\nEnd If\nSee also\nButtonClicking\n8.7 ButtonClicking\nDescription\nOccurs when the user clicks a button. This event occurs before the ButtonClicked event.\nPowerBuilder event information\nEvent ID: pbm_dwnbuttonclicking\nTable 8.2:\nArgument\nDescription\nrow\nLong by value. The number of the row the user clicked.\ndwo\nDWObject by value. A reference to the control within the DataWindow under\nthe pointer when the user clicked.\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Execute the action assigned to the button, then trigger the ButtonClicked event\n1 -- Prevent the action assigned to button from executing and the ButtonClicked event from\nfiring\n"}
{"page": 533, "text": "DataWindow Events\nPage 533\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nUse the ButtonClicking event to execute code before the action assigned to the button\noccurs. If the return code is 0, the action assigned to the button is then executed and the\nButtonClicked event is fired. If the return code is 1, the action and the ButtonClicked event\nare inhibited.\nThis event is fired only if you have not selected Suppress Event Processing for the button.\nThe Clicked event is fired before the ButtonClicking event.\nDo not use a message box in the Clicked event\nIf you call the MessageBox function in the Clicked event, the action assigned to the\nbutton is executed, but the ButtonClicking and ButtonClicked events are not executed.\nReturning the row number\nWhen you place a button in the DataWindow and use the window's ButtonClicking\nevent to return the row number, you will get different results depending on where you\nplace the button. If the button is in the Detail band, it returns the number of the row.\nIf the button is in the Header band, it returns the number of the first row displayed in\nthe DataWindow control. If the button is in the Summary band, it returns the number\nof the final row in the list. If the button is in the Footer band, it returns the number of\nthe last row displayed in the DataWindow control.\nExamples\nThis statement in the ButtonClicking event displays a message box before proceeding with\nthe action assigned to the button:\nMessageBox(\" \", \"Are you sure you want to proceed?\")\nSee also\nButtonClicked\n8.8 Clicked\nDescription\nOccurs when the user clicks anywhere in a DataWindow control.\nPowerBuilder event information\nEvent ID: pbm_dwnlbuttonclk\nTable 8.3:\nArgument\nDescription\nxpos\nInteger by value. The distance of the pointer from the left side of the\nDataWindow workspace. The distance is given in pixels.\n"}
{"page": 534, "text": "DataWindow Events\nPage 534\nArgument\nDescription\nypos\nInteger by value. The distance of the pointer from the top of the DataWindow\nworkspace. The distance is given in pixels.\nrow\nLong by value. The number of the row the user clicked.\nIf the user does not click on a row, the value of the row argument is 0. For\nexample, row is 0 when the user clicks outside the data area, or in the header,\nsummary, or footer area.\ndwo\nDWObject by value. A reference to the control within the DataWindow under\nthe pointer when the user clicked.\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Continue processing\n1 -- Prevent the focus from changing\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nThe DataWindow Clicked event occurs when the mouse button is pressed down.\nThe dwo, Name, or object argument provides easy access to the control the user clicks\nwithin the DataWindow. You do not need to know the coordinates of elements within the\nDataWindow to program control-specific responses to the user's clicks. For example, you can\nprevent editing of a column and use the Clicked script to set data or properties for the column\nand row the user clicks.\nA click can also trigger RowFocusChanged and ItemFocusChanged events. A double-click\ntriggers a Clicked event, then a DoubleClicked event.\nFor graphs in DataWindow controls, the ObjectAtPointer method provides similar\ninformation about objects within the graph control.\nPowerBuilder programming note\nThe xpos and ypos arguments provide the same values the functions PointerX and PointerY\nreturn when you call them for the DataWindow control.\nExamples\nThis code highlights the row the user clicked.\nThis.SelectRow(row, true)\nIf the user clicks on a column heading, this code changes the color of the label and sorts the\nassociated column. The column name is assumed to be the name of the heading text control\nwithout _t as a suffix.\nstring ls_name\n \nIF dwo.Type = \"text\" THEN\n      dwo.Color = RGB(255,0,0)\n \n"}
{"page": 535, "text": "DataWindow Events\nPage 535\n      ls_name = dwo.Name\n      ls_name = Left(ls_name, Len(ls_name) - 2)\n \n      This.SetSort(ls_name + \", A\")\n      This.Sort()\nEND IF\nSee also\nButtonClicked\nButtonClicking\nDoubleClicked\nItemFocusChanged\nRButtonDown\nRowFocusChanged\nRowFocusChanging\n8.9 Collapsed\nDescription\nOccurs when a node in a TreeView DataWindow has collapsed.\nPowerBuilder event information\nEvent ID: pbm_dwncollapsed\nTable 8.4:\nArgument\nDescription\nrow\nLong by value. The number of the first row in the group to be collapsed.\ngrouplevel\nLong by value. The TreeView level of the group to be collapsed.\nReturn Values\nThere are no return codes.\nUsage\nA TreeView node collapses when the user clicks the State icon (-) in the TreeView\nDataWindow or uses any of the Collapse methods.\nThe Collapsing event occurs before the Collapsed event.\nExamples\nThe following statements in the Collapsed event save the current row and level to instance\nvariables:\nii_level = grouplevel\nii_row = row\nSee also\nCollapsing\n"}
{"page": 536, "text": "DataWindow Events\nPage 536\nExpanded\n8.10 Collapsing\nDescription\nOccurs before a node in a TreeView DataWindow collapses.\nPowerBuilder event information\nEvent ID: pbm_dwncollapsing\nTable 8.5:\nArgument\nDescription\nrow\nLong by value. The number of the first row in the group to be collapsed.\ngrouplevel\nLong by value. The TreeView level of the group to be collapsed.\nReturn Values\nSet the return code to affect the outcome of the event. Return 0 to continue processing\n(collapse the selected node) or return any other value to cancel the collapse.\nUsage\nA TreeView node collapses when the user clicks the State icon (-) in the TreeView\nDataWindow or uses any of the Collapse methods.\nThe Collapsing event occurs before the Collapsed event.\nExamples\nThe following statements in the Collapsing event script display a message box that allows the\nuser to cancel the operation. The message box does not display if the Collapsing event was\ntriggered by the CollapseAll or CollapseLevel methods:\nInteger li_ret\nif row <>-1 then \n   li_ret = MessageBox(\"Collapsing node\",   &\n      \"Are you sure you want to collapse this node?\",  &\n      Exclamation!, OKCancel!)\n   IF li_ret = 1 then      return 0   \nELSE      RETURN 1   END IF\nEND IF\nSee also\nCollapsed\nExpanding\n8.11 Constructor\nDescription\nOccurs when the DataWindow control or DataStore object is created, just before the Open\nevent for the window that contains the control.\nPowerBuilder event information\n"}
{"page": 537, "text": "DataWindow Events\nPage 537\nEvent ID: pbm_constructor\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nYou can write code for the Constructor event to affect DataWindow properties before it is\ndisplayed.\nExamples\nThis example retrieves data for the DataWindow dw_1 before its window is displayed:\ndw_1.SetTransObject(SQLCA)\ndw_1.Retrieve( )\nSee also\nDestructor\n8.12 DBError\nDescription\nOccurs when a database error occurs in the DataWindow or DataStore.\nPowerBuilder event information\nEvent ID: pbm_dwndberror\nTable 8.6:\nArgument\nDescription\nsqldbcode\nLong by value. A database-specific error code.\nSee your DBMS documentation for information on the meaning of the code.\nWhen there is no error code from the DBMS, sqldbcode contains one of these\nvalues:\n-1 -- Cannot connect to the database because of missing values in the\ntransaction object.\n-2 -- Cannot connect to the database.\n-3 -- The key specified in an Update or Retrieve no longer matches an existing\nrow. This can happen when another user has changed the row after you\nretrieved it.\n-4 -- Writing a blob to the database failed.\nsqlerrtext\nString by value. A database-specific error message.\nsqlsyntax\nString by value. The full text of the SQL statement being sent to the DBMS\nwhen the error occurred.\nbuffer\nDWBuffer by value. The buffer containing the row involved in the database\nactivity that caused the error.\n"}
{"page": 538, "text": "DataWindow Events\nPage 538\nArgument\nDescription\nFor a list of valid values, see DWBuffer.\nrow\nLong by value.\nThe number of the row involved in the database activity that caused the error\n(the row being updated, selected, inserted, or deleted).\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Display the error message and trigger the Transaction object's DBError event if it is\ndefined.\n1 -- Do not display the error message, and trigger the Transaction object's DBError event if it\nis defined.\n2 -- Display the error message and ignore the Transaction object's DBError event whether it\nis defined or not.\n3 -- Do not display the error message and ignore the Transaction object's DBError event\nwhether it is defined or not.\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nBy default, when the DBError event occurs in a DataWindow control, it displays a system\nerror message. You can display your own message and suppress the system message by\nspecifying a return code of 1 in the DBError event.\nSince DataStores are nonvisual, a system message does not display when the DBError event\noccurs in a DataStore. You must add code to the DBError event to handle the error.\nIf the row that caused the error is in the Filter buffer, you must unfilter it if you want the user\nto correct the problem.\nReported row number\nThe row number stored in row is the number of the row in the buffer, not the number\nthe row had when it was retrieved into the DataWindow object.\nObsolete methods in PowerBuilder\nInformation formerly provided by the DBErrorCode and DBErrorMessage methods is\navailable in the arguments sqldbcode and sqlerrtext.\nExamples\nThis example illustrates how to display custom error messages for particular database error\ncodes:\nCHOOSE CASE sqldbcode\n \n      CASE -195 // Required value is NULL.\n      MessageBox(\"Database Problem\", &\n"}
{"page": 539, "text": "DataWindow Events\nPage 539\n         \"Error inserting row \" + string(row) &\n         + \". Please specify a value for Employee ID.\")\n      CASE ...\n      // Code to handle other errors\n \nEND CHOOSE\n \nRETURN 1 // Do not display system error message\nSee also\nError\nItemError\nWSError\n8.13 Destructor\nDescription\nOccurs when the DataWindow control or DataStore object is destroyed, immediately after the\nClose event of a window or form.\nPowerBuilder event information\nEvent ID: pbm_destructor\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nThe Destructor event destroys the DataWindow control or DataStore object and removes it\nfrom memory. After it has been destroyed, you can no longer refer to it in other event code.\n(If you do, a runtime error occurs.)\nRestriction on methods\nCalling a DataStore method that accesses the underlying DataStore internals within\nthis event is not a valid coding practice and can fail silently. Such methods include\nRowCount, DBCancel, and Modify.\nWhen you issue a DESTROY on a DataStore, the Destructor event is triggered\nand a Windows WM_DESTROY message is added to the object's message queue.\nWM_DESTROY invalidates the memory for the DataStore. If the WM_DESTROY message\nis handled before the method calls in the Destructor event, methods that attempt to access the\ndestroyed memory fail silently.\nSee also\nConstructor\n8.14 DoubleClicked\nDescription\n"}
{"page": 540, "text": "DataWindow Events\nPage 540\nOccurs when the user double-clicks in a DataWindow control.\nPowerBuilder event information\nEvent ID: pbm_dwnlbuttondblclk\nTable 8.7:\nArgument\nDescription\nxpos\nInteger by value. The distance of the pointer from the left side of the\nDataWindow's workspace. The distance is given in pixels.\nypos\nInteger by value. The distance of the pointer from the top of the\nDataWindow's workspace. The distance is given in pixels.\nrow\nLong by value. The number of the row the user double-clicked.\nIf the user did not double-click on a row, the value of the row argument is 0.\nFor example, row is 0 when the user double-clicks outside the data area, in\ntext or spaces between rows, or in the header, summary, or footer area.\ndwo\nDWObject by value. A reference to the control within the DataWindow the\nuser double-clicked.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nThe dwo, Name, or DWObject argument provides easy access to the control the user clicks.\nYou do not need to know the coordinates of elements within the DataWindow to program\ncontrol-specific responses to the user's clicks. For example, you can prevent editing of a\ncolumn and use the Clicked event to set data or properties for the column and row the user\nclicks.\nPowerBuilder programming note\nThe xpos and ypos arguments provide the same values the functions PointerX and PointerY\nreturn when you call them for the DataWindow control.\nExamples\nThis example displays a message box reporting the row and column clicked and the position\nof the pointer relative to the upper-left corner of the DataWindow control:\nstring ls_columnname\n \nIF dwo.Type = \"column\" THEN\n      ls_columnname = dwo.Name\nEND IF\n \nMessageBox(\"DoubleClicked Event\", &\n      \"Row number: \" + row &\n      + \"~rColumn name: \" + ls_columnname &\n      + \"~rDistance from top of dw: \" + ypos &\n      + \"~rDistance from left side of dw: \" + xpos)\nSee also\n"}
{"page": 541, "text": "DataWindow Events\nPage 541\nClicked\nItemFocusChanged\nRButtonDown\nRowFocusChanged\nRowFocusChanging\n8.15 DragDrop\nDescription\nPowerBuilder only\nOccurs when the user drags an object onto the control and releases the mouse button to drop\nthe object.\nPowerBuilder event information\nEvent ID: pbm_dwndragdrop\nTable 8.8:\nArgument\nDescription\nsource\nDragObject by value. A reference to the control being dragged.\nrow\nLong by value. The number of the row the pointer was over when the user\ndropped the object.\nIf the pointer was not over a row, the value of the row argument is 0. For\nexample, row is 0 when the pointer is outside the data area, in text or spaces\nbetween rows, or in the header, summary, or footer area.\ndwo\nDWObject by value. A reference to the control under the pointer within the\nDataWindow when the user dropped the object.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nObsolete methods in PowerBuilder\nYou no longer need to call the DraggedObject method in a drag event. Use the source\nargument instead.\nExamples\nThis example for the DragDrop event for a DataWindow checks whether the source object\nis a DataWindow control. If so, it finds out the current row in the source and moves it to the\ntarget:\nDataWindow ldw_Source\n \nIF source.TypeOf() = DataWindow! THEN\n      ldw_Source = source\n"}
{"page": 542, "text": "DataWindow Events\nPage 542\n      IF row > 0 THEN\n         ldw_Source.RowsMove(row, row, Primary!, &\n            This, 1, Primary!)\n      END IF\nEND IF\nSee also\nDragEnter\nDragLeave\nDragWithin\n8.16 DragEnter\nDescription\nPowerBuilder only\nOccurs when the user is dragging an object and enters the control.\nPowerBuilder event information\nEvent ID: pbm_dwndragenter\nTable 8.9:\nArgument\nDescription\nsource\nDragObject by value. A reference to the control being dragged.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nObsolete methods in PowerBuilder\nYou no longer need to call the DraggedObject method in a drag event. Use the source\nargument instead.\nSee also\nDragDrop\nDragLeave\nDragWithin\n8.17 DragLeave\nDescription\nPowerBuilder only\nOccurs when the user is dragging an object and leaves the control.\nPowerBuilder event information\n"}
{"page": 543, "text": "DataWindow Events\nPage 543\nEvent ID: pbm_dwndragleave\nTable 8.10:\nArgument\nDescription\nsource\nDragObject by value. A reference to the control being dragged.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nObsolete methods in PowerBuilder\nYou no longer need to call the DraggedObject method in a drag event. Use the source\nargument instead.\nExamples\nThis example checks the name of the control being dragged and if it is dw_1, it cancels the\ndrag operation:\nIF ClassName(source) = \"dw_1\" THEN\n      dw_1.Drag(Cancel!)\nEND If\nSee also\nDragDrop\nDragEnter\nDragWithin\n8.18 DragWithin\nDescription\nPowerBuilder only\nOccurs when the user is dragging an object within the control.\nPowerBuilder event information\nEvent ID: pbm_dwndragleave\nTable 8.11:\nArgument\nDescription\nsource\nDragObject by value. A reference to the control being dragged.\nrow\nLong by value. The number of the row the pointer is over.\nIf the pointer is not over a row, the value of the row argument is 0. For\nexample, row is 0 when the pointer is outside the data area, in text or spaces\nbetween rows, or in the header, summary, or footer area.\n"}
{"page": 544, "text": "DataWindow Events\nPage 544\nArgument\nDescription\ndwo\nDWObject by value. A reference to the control under the pointer within the\nDataWindow.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nThe DragWithin event occurs repeatedly as the mouse moves within the control.\nObsolete methods in PowerBuilder\nYou no longer need to call the DraggedObject method in a drag event. Use the source\nargument instead.\nSee also\nDragDrop\nDragEnter\nDragLeave\n8.19 DropDown\nDescription\nOccurs just before the list provided by a DropDownDataWindow is displayed. Use this event\nto retrieve new data for the child DataWindow.\nA DropDownDataWindow is a drop-down choice list whose data is provided by retrieving\ndata for another DataWindow. To create a DropDownDataWindow, you assign the\nDropDownDataWindow edit style to a column and associate it with another DataWindow\nthat retrieves the data for the choice list.\nPowerBuilder event information\nEvent ID: pbm_dwndropdown\nDropDown is not a standard PowerBuilder DataWindow event. To write a script for this\nevent, you must first define a user-defined event for the event ID pbm_dwndropdown.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.20 EditChanged\nDescription\nOccurs for each keystroke the user types in an edit control in the DataWindow.\nPowerBuilder event information\n"}
{"page": 545, "text": "DataWindow Events\nPage 545\nEvent ID: pbm_dwnchanging\nTable 8.12:\nArgument\nDescription\nrow\nLong by value. The number of the row containing the item whose value is\nbeing changed.\ndwo\nDWObject by value. A reference to the column containing the item whose\nvalue is being changed. Dwo is a reference to the column control, not the\nname of the column.\ndata\nString by value. The current contents of the DataWindow edit control.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nExamples\nThis example displays the row and column that the user is editing in a StaticText control:\nst_1.Text = \"Row \" + String(row) &\n      + \" in column \" + dwo.Name\nSee also\nItemChanged\n8.21 Error\nDescription\nPowerBuilder\nOccurs when an error is found in a data or property expression for an external object or a\nDataWindow object. Also occurs when a communications error is found in a distributed\napplication.\nPowerBuilder event information\nEvent ID: None\nTable 8.13:\nArgument\nDescription\nerrornumber Unsigned integer by value (PowerBuilder's error number).\nerrortext\nString, read-only (PowerBuilder's error message).\nerrorwindowmenu\nString, read-only. The name of the window or menu that is the parent of the\nobject whose script caused the error.\nerrorobject\nString, read-only. The name of the object whose script caused the error.\nerrorscript\nString, read-only. The full text of the script in which the error occurred.\nerrorline\nUnsigned integer by value. The line in the script where the error occurred.\naction\nExceptionAction by reference.\n"}
{"page": 546, "text": "DataWindow Events\nPage 546\nArgument\nDescription\nA value you specify to control the application's course of action as a result of\nthe error. Values are:\n\u2022 ExceptionFail! -- Fail as if this script were not implemented. This is the\ndefault action. The error condition triggers the SystemError event if you do\nnot handle the error in a Try-Catch block.\n\u2022 ExceptionIgnore! -- Ignore this error and return as if no error occurred. Use\nthis option with caution because the conditions that caused the error can\ncause another error.\n\u2022 ExceptionRetry! -- Execute the function or evaluate the expression\nagain in case the OLE server was not ready. This option is not valid for\nDataWindows.\n\u2022 ExceptionSubstituteReturnValue! -- Use the value specified in the\nreturnvalue argument instead of the value returned by the OLE server or\nDataWindow and cancel the error condition.\nreturnvalue\nAny by reference. A value whose datatype matches the expected value that the\nOLE server or DataWindow would have returned.\nThis value is used when the value of action is\nExceptionSubstituteReturnValue!.\nReturn Values\nNone. (Do not use a RETURN statement.)\nUsage\nDataWindow and OLE objects are dynamic. Expressions that use dot notation to refer to data\nand properties of these objects might be valid under some runtime conditions but not others.\nThe Error event allows you to respond to this dynamic situation with error recovery logic.\nThe Error event also allows you to respond to communications errors in the client component\nof a distributed application. In the Error event for a custom connection object, you can tell\nPowerBuilder what action to take when an error occurs during communications between the\nclient and the server.\nThe Error event gives you an opportunity to substitute a default value when the error is\nnot critical to your application. Its arguments also provide information that is helpful in\ndebugging. For example, the arguments can help you debug DataWindow data expressions\nthat cannot be checked by the compiler -- such expressions can only be evaluated at runtime.\nWhen to substitute a return value\nThe ExceptionSubstituteReturnValue! action allows you to substitute a return\nvalue when the last element of an expression causes an error. Do not use\nExceptionSubstituteReturnValue! to substitute a return value when an element in the\nmiddle of an expression causes an error. The substituted return value will not match\nthe datatype of the unresolved object reference and will cause a system error.\n"}
{"page": 547, "text": "DataWindow Events\nPage 547\nThe ExceptionSubstituteReturnValue! action is most useful for handling errors in data\nexpressions.\nFor DataWindows, if an error occurs while evaluating a data or property expression, error\nprocessing occurs like this:\n1. The Error event occurs.\nIf you use a Try-Catch block, it is best not to script the Error event.\n2. If the Error event has no script or its action argument is not changed from the default\naction (ExceptionFail!), either a catch statement is executed or the SystemError event\noccurs.\n3. If you do not handle the error in a Try-Catch block and the SystemError event has no\nscript, an application error occurs and the application is terminated.\nThe chapter on \"Using DataWindow Objects\" in the DataWindow Programmers Guide\ncontains a table of correspondences between Error event arguments and DWRuntimeError\nproperties. You can use the DWRuntimeError properties in a Try-Catch block to obtain the\nsame information about an error condition that you would otherwise obtain from Error event\narguments.\nThe error processing in the client component of a distributed application is the same as\nfor DataWindows. For information about handling communications errors in a distributed\napplication, see the discussion of distributed applications in Chapter 6, Developing\nDistributed Applications in Application Techniques.\nFor information about error processing in OLE controls, see the ExternalException event\ndescription in Section 2.3.50, \u201cExternalException\u201d in PowerScript Reference.\nFor information about using data and property expressions for DataWindow objects, see\nAccessing Data in Code and Accessing DataWindow Object Properties in Code\nExamples\nThis example displays information about the error that occurred and allows the script to\ncontinue:\nMessageBox(\"Error Number \" + string(errornumber)&\n      + \" Occurred\", \"Errortext: \" + String(errortext))\naction = ExceptionIgnore! \nSee also\nDBError\n8.22 Expanded\nDescription\nOccurs when a node in a TreeView DataWindow has expanded.\nPowerBuilder event information\nEvent ID: pbm_dwnexpanded\n"}
{"page": 548, "text": "DataWindow Events\nPage 548\nTable 8.14:\nArgument\nDescription\nrow\nLong by value. The number of the first row in the group that has been\nexpanded.\ngrouplevel\nLong by value. The TreeView level of the group that has been expanded.\nReturn Values\nThere are no return codes.\nUsage\nA TreeView node expands when the user clicks the State icon (+) in the TreeView\nDataWindow or uses any of the Expand methods.\nThe Expanding event occurs before the Expanded event.\nExamples\nThe following statement writes the TreeView level and row to a single-line edit box when a\nnode is expanded:\nsle_1.text = \"TreeView level: \" + string(grouplevel)\nsle_1.text += \" Row: \" + string(row)\nSee also\nCollapsed\nExpanding\n8.23 Expanding\nDescription\nOccurs before a node in a TreeView DataWindow expands.\nPowerBuilder event information\nEvent ID: pbm_dwnexpanding\nTable 8.15:\nArgument\nDescription\nrow\nLong by value. The number of the first row in the group to be expanded.\ngrouplevel\nLong by value. The TreeView level of the group to be expanded.\nReturn Values\nSet the return code to affect the outcome of the event. Return 0 to continue processing\n(expand the selected node) or return any other value to cancel the expansion.\nUsage\nA TreeView node expands when the user clicks the State icon (+) in the TreeView\nDataWindow or uses any of the Expand methods.\n"}
{"page": 549, "text": "DataWindow Events\nPage 549\nThe Expanding event occurs before the Expanded event.\nExamples\nThe following statements in the Expanding event script display a message box that allows the\nuser to cancel the operation:\nInteger li_ret\nli_ret = MessageBox(\"Expanding node\",   &\n   \"Are you sure you want to expand this node?\",  &\n   Exclamation!, OKCancel!)\nIF li_ret = 1 then   return 0ELSE   RETURN 1END IF\nSee also\nCollapsing\nExpanded\n8.24 GetFocus\nDescription\nOccurs just before the control receives focus (before it is selected and becomes active).\nPowerBuilder event information\nEvent ID: pbm_dwnsetfocus\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nSee also\nClicked\nLoseFocus\n8.25 GraphCreate\nDescription\nOccurs after the DataWindow control creates a graph and populates it with data, but before it\nhas displayed the graph. In this event, you can change the appearance of the data about to be\ndisplayed.\nPowerBuilder event information\nEvent ID: pbm_dwngraphcreate\nGraphCreate is not a standard PowerBuilder DataWindow event. To write a script for this\nevent, you must first define a user-defined event for the event ID pbm_dwngraphcreate.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n"}
{"page": 550, "text": "DataWindow Events\nPage 550\nExamples\nThe following statement sets to black the foreground (fill) color of the Q1 series in the graph\ngr_quarter, which is in the DataWindow control dw_report. The statement is in the user event\nGraphCreate, which is associated with the event ID pbm_dwngraphcreate:\ndw_report.SetSeriesStyle(\"gr_quarter\", \"Q1\",  &\n      foreground!, 0)\nSee also\nGetFocus\n8.26 HTMLContextApplied\nDescription\nOccurs when the SetHTMLAction method has been called to apply an action to a\nDataWindow control or DataStore. The event occurs after the context has been set but before\nthe action is applied.\nObsolete method\nHTMLContextApplied is obsolete and should not be used, because the Web\nDataWindow technology is obsolete. An obsolete feature is no longer eligible for\ntechnical support and will no longer be enhanced, although it is still available.\nPowerBuilder event information\nEvent ID: pbm_dwnhtmlcontextapplied\nTable 8.16:\nArgument\nDescription\naction\nString. A descriptor of the action about to be applied to the DataStore. Action\nstrings include:\nAppendRow\nDeleteRow\nInsertRow\nPageFirst\nPageLast\nPageNext\nPagePrior\nRetrieve\nSort\nUpdate\nThe list is subject to change and additional actions may be added in the future.\nCase is not relevant for action values.\n"}
{"page": 551, "text": "DataWindow Events\nPage 551\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Continue processing (execute the action)\n1 -- Prevent the action from being applied\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nActions include navigating from page to page, inserting and deleting rows, retrieving and\nupdating data. Typically the HTMLContextApplied event is used to call server-side methods\nfor validating data that is about to be updated.\nThe SetHTMLAction method triggers the HTMLContextApplied event. If the\nHTMLContextApplied event returns 1, then the SetHTMLAction method returns -4 to\nindicate that the action was canceled.\nSee also\nSetHTMLAction method\n8.27 ItemChanged\nDescription\nOccurs when a field in a DataWindow control has been modified and loses focus (for\nexample, the user presses Enter, the Tab key, or an arrow key or clicks the mouse on\nanother field within the DataWindow). It occurs before the change is applied to the item.\nItemChanged can also occur when the AcceptText or Update method is called for a\nDataWindow control or DataStore object.\nPowerBuilder event information\nEvent ID: pbm_dwnitemchange\nTable 8.17:\nArgument\nDescription\nrow\nLong by value. The number of the row containing the item whose value is\nbeing changed.\ndwo\nDWObject by value. A reference to the column containing the item whose\nvalue has been changed. Dwo is a reference to the column control, not the\nname of the column.\ndata\nString by value. The new data the user has specified for the item.\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- (Default) Accept the data value\n1 -- Reject the data value and do not allow focus to change\n2 -- Reject the data value but allow the focus to change\n"}
{"page": 552, "text": "DataWindow Events\nPage 552\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nThe ItemChanged event does not occur when the DataWindow control itself loses focus.\nIf the user clicks on an Update or Close button, you will need to write a script that calls\nAcceptText to see if a changed value should be accepted before the button's action occurs.\nFor information on the right way to do this, see AcceptText.\nObsolete techniques in PowerBuilder\nInformation formerly provided by the GetText method is available in the data\nargument.\nInstead of calling SetActionCode, use a RETURN statement with a return code.\nExamples\nThis example uses the ItemChanged event to provide additional validation; if the column is\nemp_name, it checks that only letters were entered in the column:\nIF Dwo.name = \"Emp_name\" THEN\n      IF NOT Match(Data, \"^[A-za-z]$\") THEN\n         RETURN 2\n      END IF\nEND IF\nSee also\nItemError\n8.28 ItemError\nDescription\nOccurs when a field has been modified, the field loses focus (for example, the user presses\nEnter, Tab, or an arrow key or clicks the mouse on another field in the DataWindow), and the\ndata in the field does not pass the validation rules for its column. ItemError can also occur\nwhen a value imported into a DataWindow control or DataStore does not pass the validation\nrules for its column.\nPowerBuilder event information\nEvent ID: pbm_dwnitemvalidationerror\nTable 8.18:\nArgument\nDescription\nrow\nLong by value. The number of the row containing the item whose new value\nhas failed validation.\ndwo\nDWObject by value. A reference to the column containing the item. Dwo is a\nreference to the column control, not the name of the column.\ndata\nString by value. The new data the user specified for the item.\nReturn Values\n"}
{"page": 553, "text": "DataWindow Events\nPage 553\nSet the return code to affect the outcome of the event:\n0 -- (Default) Reject the data value and show an error message box\n1 -- Reject the data value with no message box\n2 -- Accept the data value\n3 -- Reject the data value but allow focus to change\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nIf the return code is 0 or 1 (rejecting the data), the field with the incorrect data regains the\nfocus.\nThe ItemError event occurs instead of the ItemChanged event when the new data value fails\na validation rule. You can force the ItemError event to occur by rejecting the value in the\nItemChanged event.\nObsolete techniques in PowerBuilder\nInformation provided by the GetText and GetRow methods is now available in the\ndata and row arguments.\nInstead of calling GetColumnName, use the dwo argument and a reference to its Name\nproperty.\nInstead of calling SetActionCode, use a RETURN statement with the return codes listed\nabove.\nExamples\nThe following excerpt from an ItemError event script of a DataWindow control allows the\nuser to blank out a column and move to the next column. For columns with datatypes other\nthan string, the user cannot leave the value empty (the empty string does not match the\ndatatype). If the user tried to leave the value blank, this code sets the value of the column to a\nnull value of the appropriate datatype.\nstring ls_colname, ls_datatype\n \nls_colname = dwo.Name\nls_datatype = dwo.ColType\n// Reject the value if non-blank\nIF Trim(data) <> \"\" THEN\n      RETURN 0\nEND IF\n \n// Set value to null if blank\nCHOOSE CASE ls_datatype\n \n      CASE \"long\"\n      integer null_num\n      SetNull(null_num)\n      This.SetItem(row, ls_colname, null_num)\n      RETURN 3\n \n      CASE \"date\"\n      date null_date\n"}
{"page": 554, "text": "DataWindow Events\nPage 554\n      SetNull(null_date)\n      This.SetItem(row, ls_colname, null_date)\n      RETURN 3\n \n      // Additional cases for other datatypes\nEND CHOOSE\nSee also\nItemChanged\n8.29 ItemFocusChanged\nDescription\nOccurs when the current item in the control changes.\nPowerBuilder event information\nEvent ID: pbm_dwnitemchangefocus\nTable 8.19:\nArgument\nDescription\nrow\nLong by value. The number of the row containing the item that just gained\nfocus.\ndwo\nDWObject by value. A reference to the column containing the item.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nItemFocusChanged occurs when focus is set to another column in the DataWindow,\nincluding when the DataWindow is first displayed.\nThe row and column together uniquely identify an item in the DataWindow.\nPowerBuilder programming note\nIn the ItemFocusChanged event, dwo is always a column control. Therefore, you can get\nmore information about it by examining any properties that are appropriate for columns such\nas dwo.id and dwo.Name.\nExamples\nThis example reports the row and column that just gained focus and that just lost focus.\n(The first time the event occurs, there is no item that just lost focus; the script saves the row\nnumber and column name in two instance variables called ii_row and is_colname so that the\nold item is known the next time the event occurs.)\nIF ii_row > 0 THEN\n      sle_olditem.Text = \"Old row: \" + String(ii_row) &\n      + \" Old column: \" + is_colname\nEND IF\n \n"}
{"page": 555, "text": "DataWindow Events\nPage 555\nsle_newitem.Text = \"New row: \" + String(row) &\n      + \" New column: \" + dwo.Name\n \n// Replace values of instance variables\n// with info for next change in focus\nii_row = row\n \nis_colname = dwo.Name\nSee also\nRowFocusChanged\nRowFocusChanging\n8.30 KeyDown\nDescription\nOccurs for each keystroke when the user is editing in the DataWindow edit control.\nPowerBuilder event information\nEvent ID: pbm_dwnkey\nKeyDown is not a standard PowerBuilder DataWindow event. To write a script for this event,\nyou must first define a user-defined event for the event ID pbm_dwnkey.\nTable 8.20:\nArgument\nDescription\nkey\nInteger by value.\nkeyflags\nUnsignedLong by value. The modifier keys that are pressed. The keyflags\nvalue is the sum of the values for all the pressed keys.\nKey values are:\n\u2022 1 -- Shift key\n\u2022 2 -- Ctrl key\n\u2022 3 -- Shift + Ctrl keys\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- (Default) Accept the keystroke\n1 -- Reject the keystroke\n8.31 LoseFocus\nDescription\nOccurs just before a control loses focus (after it becomes inactive).\nPowerBuilder event information\n"}
{"page": 556, "text": "DataWindow Events\nPage 556\nEvent ID: pbm_dwnkillfocus\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nWrite code for a control's LoseFocus event if you want some processing to occur when the\nuser changes focus to another control.\nPowerBuilder programming note\nBecause the MessageBox function grabs focus, you should not use it when focus is changing,\nsuch as in a LoseFocus event. Instead, you might display a message in the window's title or a\nMultiLineEdit.\nWhen to call AcceptText\nYou should not call AcceptText in the LoseFocus event or from a user event posted from\nLoseFocus, unless the DataWindow control no longer has focus. For information about the\nright way to call AcceptText when the DataWindow control loses focus, see the AcceptText\nmethod.\nSee also\nGetFocus\nAcceptText method\n8.32 MessageText\nDescription\nOccurs when a crosstab DataWindow generates a message. Typical messages are Retrieving\ndata and Building crosstab.\nPowerBuilder event information\nEvent ID: pbm_dwnmessageText\nMessageText is not a standard PowerBuilder DataWindow event. To write a script for this\nevent, you must first define a user-defined event for the event ID pbm_dwnmessagetext.\nTable 8.21:\nArgument\nDescription\ntext\nString by value. The message text.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nExamples\nThe following line in the user event for pbm_dwnmessagetext displays informational\nmessages as MicroHelp in an MDI application (w_crosstab is an MDI frame window). The\n"}
{"page": 557, "text": "DataWindow Events\nPage 557\ninformational messages are displayed in the MDI application's MicroHelp as the crosstab is\nrebuilt:\nw_crosstab.SetMicroHelp(text) \nSee also\nGetFocus\n8.33 MouseMove\nDescription\nOccurs when the user moves the mouse pointer in a DataWindow control.\nPowerBuilder event information\nEvent ID: pbm_dwnmousemove\nMouseMove is not a standard PowerBuilder DataWindow event. To write a script for this\nevent, you must first define a user event for the event ID pbm_dwnmousemove.\nTable 8.22:\nArgument\nDescription\nxpos\nInteger by value. The distance of the pointer from the left side of the\nDataWindow's workspace. The distance is given in pixels.\nypos\nInteger by value. The distance of the pointer from the top of the\nDataWindow's workspace. The distance is given in pixels.\nrow\nLong by value. The number of the row under the pointer.\nIf the pointer is not over a row, the value of the row argument is 0. For\nexample, row is 0 when the user double-clicks outside the data area, in text or\nspaces between rows, or in the header, summary, or footer area.\ndwo\nDWObject by value. A reference to the control within the DataWindow that is\nunder the pointer.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nThe dwo, Name, or DWObject argument provides easy access to the control the user clicks.\nYou do not need to know the coordinates of elements within the DataWindow to program\ncontrol-specific responses to the user's clicks. For example, you can prevent editing of a\ncolumn and use the Clicked event to set data or properties for the column and row the user\nclicks.\nPowerBuilder programming note\nThe xpos and ypos arguments provide the same values the functions PointerX and PointerY\nreturn when you call them for the DataWindow control.\nSee also\n"}
{"page": 558, "text": "DataWindow Events\nPage 558\nClicked\nDoubleClicked\nMouseUp\nRButtonDown\n8.34 MouseUp\nDescription\nOccurs when the user releases a mouse button in a DataWindow control.\nPowerBuilder event information\nEvent ID: pbm_dwnlbuttonup\nMouseUp is not a standard PowerBuilder DataWindow event. To write a script for this event,\nyou must first define a user event for the event ID pbm_dwnlbuttonup.\nTable 8.23:\nArgument\nDescription\nxpos\nInteger by value. The distance of the pointer from the left side of the\nDataWindow's workspace. The distance is given in pixels.\nypos\nInteger by value. The distance of the pointer from the top of the\nDataWindow's workspace. The distance is given in pixels.\nrow\nLong by value. The number of the row under the pointer.\nIf the pointer is not over a row, the value of the row argument is 0. For\nexample, row is 0 when the user double-clicks outside the data area, in text or\nspaces between rows, or in the header, summary, or footer area.\ndwo\nDWObject by value. A reference to the control within the DataWindow that is\nunder the pointer.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nThe dwo, Name, or DWObject argument provides easy access to the control the user clicks.\nYou do not need to know the coordinates of elements within the DataWindow to program\ncontrol-specific responses to the user's clicks. For example, you can prevent editing of a\ncolumn and use the Clicked event to set data or properties for the column and row the user\nclicks.\nPowerBuilder programming note\nThe xpos and ypos arguments provide the same values the functions PointerX and PointerY\nreturn when you call them for the DataWindow control.\nSee also\nClicked\n"}
{"page": 559, "text": "DataWindow Events\nPage 559\nDoubleClicked\nMouseMove\n8.35 OnSubmit\nDescription\nThis event is triggered just before the Web DataWindow causes a submit.\nObsolete event\nOnSubmit is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nWeb DataWindow client control event information\nEvent name: OnSubmit\nReturn Values\nReturning 1 from this event will prevent the submit from occurring.\nUsage\nUse to host multiple DataWindows.\nExamples\nThe following client side script transfers the context and action from one DataWindow to the\nDataWindow being submitted.\n   <SCRIPT>\n   function dw_first_OnSubmit()\n   {\n      dw_first.submitForm.dw_second_context.value =\n         dw_second.GetFullContext();\n      dw_first.submitForm.dw_second_action.value = \"\";\n   }\n \n   function dw_second_OnSubmit()\n   {\n      dw_second.submitForm.dw_first_context.value =\n         dw_first.GetFullContext();\n      dw_second.submitForm.dw_first_action.value = \"\";\n   }\n   </SCRIPT>\nTo enable the second DataWindow to create the required fields on the submit form, each of\nthe DataWindows must have two arguments defined in the SelfLinkArgs property:\n\u2022 dw_first must have dw_second_context and dw_second_action defined\n\u2022 dw_second must have dw_first_context and dw_first_action defined\n8.36 Printend\nDescription\nOccurs when the printing of a DataWindow or DataStore ends.\n"}
{"page": 560, "text": "DataWindow Events\nPage 560\nPowerBuilder event information\nEvent ID: pbm_dwnprintend\nTable 8.24:\nArgument\nDescription\npagesprinted Long by value. The total number of pages that were printed.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nExamples\nThis statement displays the number of pages that were printed after the Print method was\ncalled to print the contents of the DataWindow control:\nst_1.Text = String(pagesprinted) &\n      + \" page(s) have been printed.\"\nSee also\nPrintMarginChange\nPrintPage\nPrintStart\n8.37 PrintMarginChange\nDescription\nOccurs when the print margins of the DataWindow change.\nPowerBuilder event information\nEvent ID: pbm_dwnprintmarginchange\nPrintMarginChange is not a standard PowerBuilder DataWindow event. To write\na script for this event, you must first define a user-defined event for the event ID\npbm_dwnprintmarginchange.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nSee also\nPrintend\nPrintPage\nPrintStart\n8.38 PrintPage\nDescription\n"}
{"page": 561, "text": "DataWindow Events\nPage 561\nOccurs before each page of the DataWindow or DataStore is formatted for printing.\nPowerBuilder event information\nEvent ID: pbm_dwnprintpage\nTable 8.25:\nArgument\nDescription\npagenumber Long by value. The number of the page about to be printed.\ncopy\nLong by value. The number of the copy being printed.\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Do not skip the page\n1 -- Skip the page\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nThe PrintPage event for a DataWindow control recalculates DataWindow pages before each\npage of a DataWindow object is formatted for printing. However, you cannot use this event\nto modify the page number of the current page or the remaining pages in the DataWindow.\nExamples\nAfter a script prints a DataWindow control, you can limit the number of pages to be printed\nby suppressing every page after page 50.\nThis statement in a CommandButton's Clicked event script prints the contents of the\nDataWindow control:\ndw_1.Print()\nThis code in the PrintPage event of dw_1 cancels printing after reaching page 50:\nIF pagenumber > 50 THEN This.PrintCancel()\nIf you know every fifth page of the DataWindow contains the summary information you\nwant, you can suppress the other pages with some arithmetic and a RETURN statement:\nIF Mod(pagenumber / 5) = 0 THEN\n      RETURN 0\nELSE\n      RETURN 1\nEND IF\nSee also\nPrintend\nPrintMarginChange\nPrintStart\n"}
{"page": 562, "text": "DataWindow Events\nPage 562\n8.39 PrintStart\nDescription\nOccurs when the printing of the DataWindow or DataStore starts.\nPowerBuilder event information\nEvent ID: pbm_dwnprintstart\nTable 8.26:\nArgument\nDescription\npagesmax\nLong by value. The total number of pages that will be printed, unless pages\nare skipped.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nTo skip printing some of the pages in the DataWindow or DataStore, write code for the\nPrintPage event.\nSee also\nPrintend\nPrintMarginChange\nPrintPage\n8.40 ProcessEnter\nDescription\nOccurs when the user presses the Enter key when focus is in the DataWindow or the\nDataWindow's edit control.\nPowerBuilder event information\nEvent ID: pbm_dwnprocessenter\nProcessEnter is not a standard PowerBuilder DataWindow event. To write a script for this\nevent, you must first define a user-defined event for the event ID pbm_dwnprocessenter.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.41 RButtonDown\nDescription\nOccurs when the right mouse button is pressed on the DataWindow control.\nPowerBuilder event information\n"}
{"page": 563, "text": "DataWindow Events\nPage 563\nEvent ID: pbm_dwnrbuttondown\nTable 8.27:\nArgument\nDescription\nflags\nUnsignedLong by value. The modifier keys and mouse buttons that are\npressed. The flags value is the sum of the values for all the pressed keys and\nbuttons.\nKey and button values are:\n\u2022 1 -- Left mouse button\n\u2022 2 -- Right mouse button\n\u2022 4 -- Shift key\n\u2022 8 -- Ctrl key\n\u2022 16 -- Middle mouse button\nIn the RButtonDown event, the right mouse button is always pressed, so 2 is\nalways summed in the value of flags.\nFor information on evaluating the flags value, see Syntax 2 of MouseMove in\nthe PowerScript Reference.\nxpos\nInteger by value. The distance of the pointer from the left edge of the\nwindow's workspace in pixels.\nypos\nInteger by value. The distance of the pointer from the top of the window's\nworkspace in pixels.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nSee also\nClicked\n8.42 Resize\nDescription\nOccurs when the user or a script opens or resizes the client area of a DataWindow control.\nPowerBuilder event information\nEvent ID: pbm_dwnresize\nTable 8.28:\nArgument\nDescription\nsizetype\nUnsignedLong by value.\n"}
{"page": 564, "text": "DataWindow Events\nPage 564\nArgument\nDescription\n\u2022 0 -- (SIZE_RESTORED) The DataWindow has been resized, but it was\nnot minimized or maximized. The user may have dragged the borders or a\nscript may have called the Resize method.\n\u2022 1 -- (SIZE_MINIMIZED) The DataWindow has been minimized.\n\u2022 2 -- (SIZE_MAXIMIZED) The DataWindow has been maximized.\nnewwidth\nInteger by value. The width of the client area of the DataWindow control in\npixels.\nnewheight\nInteger by value. The height of the client area of the DataWindow control in\npixels.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.43 RetrieveEnd\nDescription\nOccurs when the retrieval for the DataWindow or DataStore is complete.\nPowerBuilder event information\nEvent ID: pbm_dwnretrieveend\nTable 8.29:\nArgument\nDescription\nrowcount\nLong by value. The number of rows that were retrieved.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nThe number of rows retrieved in the rowcount argument is an unfiltered value.\nExamples\nThis message box displayed in the RetrieveEnd event script tells the user the number of rows\njust retrieved:\nMessageBox(\"Total rows retrieved\", String(rowcount))\nSee also\nRetrieveRow\nRetrieveStart\nSQLPreview\n"}
{"page": 565, "text": "DataWindow Events\nPage 565\nUpdateStart\n8.44 RetrieveRow\nDescription\nOccurs after a row has been retrieved.\nPowerBuilder event information\nEvent ID: pbm_dwnretrieverow\nTable 8.30:\nArgument\nDescription\nrow\nLong by value. The number of the row that was just retrieved\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Continue processing\n1 -- Stop the retrieval\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nIf you want to guard against potentially large queries, you can have code in the RetrieveRow\nevent check the row argument and decide whether the user has reached a maximum limit.\nWhen row exceeds the limit, you can return 1 to abort the retrieval (in which case the\nretrieval cannot be resumed).\nA script in the RetrieveRow event (even a comment) can significantly increase the time it\ntakes to complete a query.\nObsolete methods in PowerBuilder\nInstead of calling SetActionCode, use the RETURN statement with a return code instead.\nExamples\nThis code for the RetrieveRow event aborts the retrieval after 250 rows have been retrieved.\nIF ll_row > 250 THEN\n      MessageBox(\"Retrieval Halted\", &\n         \"You have retrieved 250 rows, the allowed & \n         maximum.\")\n      RETURN 1\nELSE\n      RETURN 0\nEND IF\nSee also\nRetrieveEnd\nRetrieveStart\nSQLPreview\n"}
{"page": 566, "text": "DataWindow Events\nPage 566\nUpdateStart\n8.45 RetrieveStart\nDescription\nOccurs when the retrieval for the DataWindow or DataStore is about to begin.\nPowerBuilder event information\nEvent ID: pbm_dwnretrievestart\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Continue processing\n1 -- Do not perform the retrieval\n2 -- Do not reset the rows and buffers before retrieving data\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nA return code of 2 prevents previously retrieved data from being cleared, allowing the current\nretrieval process to append new rows to the old data.\nObsolete methods in PowerBuilder\nInstead of calling SetActionCode, use the RETURN statement with a return code instead.\nExamples\nThis statement in the RetrieveStart event prevents a reset from taking place (rows will be\nadded to the end of the previously retrieved rows):\nRETURN 2\nThis statement in the RetrieveStart event aborts the retrieval:\nRETURN 1\nThis code allows rows to be retrieved only when a user has an ID between 101 and 200\ninclusive (the ID was stored in the instance variable il_id_number when the user started the\napplication); all other IDs cannot retrieve rows:\nCHOOSE CASE il_id_number\n      CASE IS < 100\n      RETURN 1\n \n      CASE 101 to 200\n      RETURN 0\n \n      CASE IS > 200\n      RETURN 1\nEND CHOOSE\nSee also\nRetrieveEnd\n"}
{"page": 567, "text": "DataWindow Events\nPage 567\nRetrieveRow\nSQLPreview\nUpdateStart\n8.46 RichTextCurrentStyleChanged\nDescription\nOccurs when a column with the RichText edit style has focus and the current style of the\nselection or cursor position has changed.\nPowerBuilder event information\nEvent ID: pbm_dwnrichtextcurrentstlechanged\nTable 8.31:\nArgument\nDescription\nrow\nLong by value. The number of the row the user clicked.\ndwo\nDWObject by value. A reference to the control within the DataWindow under\nthe pointer when the user clicked.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.47 RichTextLoseFocus\nDescription\nOccurs when a column with the RichText edit style loses focus.\nPowerBuilder event information\nEvent ID: pbm_dwnrichtextlosefocus\nTable 8.32:\nArgument\nDescription\nrow\nLong by value. The number of the row the user clicked.\ndwo\nDWObject by value. A reference to the control within the DataWindow under\nthe pointer when the user clicked.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.48 RichTextLimitError\nDescription\n"}
{"page": 568, "text": "DataWindow Events\nPage 568\nOccurs when data in a column with the RichText edit style exceeds column size.\nPowerBuilder event information\nEvent ID: pbm_dwnrichtextlimiterror\nTable 8.33:\nArgument\nDescription\nrow\nLong by value. The number of the row the user clicked.\ndwo\nDWObject by value. A reference to the control within the DataWindow under\nthe pointer when the user clicked.\ntext\nString by value. Plain text of column the user edited.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.49 RowFocusChanged\nDescription\nOccurs when the current row changes in the DataWindow.\nPowerBuilder event information\nEvent ID: pbm_dwnrowchange\nTable 8.34:\nArgument\nDescription\ncurrentrow\nLong by value. The number of the row that has just become current.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nUsage\nThe SetRow method, as well as user actions, can trigger the RowFocusChanged and\nItemFocusChanged events.\nIn a read-only DataWindow, when you click on any column that is not in the current row,\nthe RowFocusChanging and RowFocusChanged events fire, but the current column is not\nchanged -- the current column remains at 0, since no column can have focus. DataWindows\nare read-only if updates are not allowed, all tab orders are set to 0, or all tab columns are\nprotected.\nIf, however, focus is on an editable column in an updatable DataWindow (a DataWindow\nthat has one or more editable columns), the row focus events do not fire when you click on\na protected column or on a column whose tab order is 0. The focus remains on the current,\neditable column.\n"}
{"page": 569, "text": "DataWindow Events\nPage 569\nIf focus moves off an editable column in an updatable DataWindow, the DataWindow\nswitches to read-only mode. This can happen when the last row in the DataWindow does\nnot have an editable column. In this case, tabbing off the last editable column causes the row\nfocus to move to the row following the row with the last editable column. The DataWindow\nthen remains in read-only mode until focus is given to an editable column.\nWhen you use the ScrollToRow method to change focus, the RowFocusChanging event is\ntriggered before the scroll occurs, and the RowFocusChanged event is triggered after the\nscroll occurs.\nExamples\nThis example displays the current row number and the total number of rows in a\nSingleLineEdit:\nsle_1.Text = \"Row \" + String(currentrow) &\n      + \" of \" + String(This.RowCount())\nSee also\nItemFocusChanged\nRowFocusChanging\n8.50 RowFocusChanging\nDescription\nOccurs when the current row is about to change in the DataWindow. (The current row of the\nDataWindow is not necessarily the same as the current row in the database.)\nThe RowFocusChanging event occurs just before the RowFocusChanged event.\nPowerBuilder event information\nEvent ID: pbm_dwnrowchanging\nTable 8.35:\nArgument\nDescription\ncurrentrow\nLong by value. The number of the row that is current (before the row\nis deleted or its number changes). If the DataWindow object is empty,\ncurrentrow is 0 to indicate there is no current row.\nnewrow\nLong by value. The number of the row that is about to become current. If the\nnew row is going to be an inserted row, newrow is 0 to indicate that it does\nnot yet exist.\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Continue processing (setting the current row)\n1 -- Prevent the current row from changing\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\n"}
{"page": 570, "text": "DataWindow Events\nPage 570\nTypically the RowFocusChanging event is coded to respond to a mouse click or keyboard\naction that would change the current row in the DataWindow object. The following methods\ncan also trigger the RowFocusChanging event, as well as the RowFocusChanged and\nItemFocusChanged events, when the action changes the current row:\nSetRow\nRetrieve\nRowsCopy\nRowsMove\nDeleteRow\nRowsDiscard\nIn these cases, the RowFocusChanging event script can prevent the changing of the\nDataWindow object's current row only. The script cannot prevent the data from being\nchanged (for example, the rows still get moved).\nWhen you use the ScrollToRow method to change focus, the RowFocusChanging event is\ntriggered before the scroll occurs, and the RowFocusChanged event is triggered after the\nscroll occurs.\nIn a tabular DataWindow, if the user clicks to change rows, the row focus does not change,\nand the row and DataWindow do not scroll. You can still scroll programmatically or by using\nthe scroll bar.\nIn a read-only DataWindow, when you click on any column that is not in the current row,\nthe RowFocusChanging and RowFocusChanged events fire, but the current column is not\nchanged -- the current column remains at 0, since no column can have focus. DataWindows\nare read-only if updates are not allowed, all tab orders are set to 0, or all tab columns are\nprotected.\nHowever, if focus is on an editable column in an updatable DataWindow (a DataWindow\nthat has one or more editable columns), the row focus events do not fire when you click on\na protected column or on a column whose tab order is 0. The focus remains on the current,\neditable column.\nIf focus moves off an editable column in an updatable DataWindow, the DataWindow\nswitches to read-only mode. This can happen when the last row in the DataWindow does\nnot have an editable column. In this case, tabbing off the last editable column causes the row\nfocus to move to the row following the row with the last editable column. The DataWindow\nthen remains in read-only mode until focus is given to an editable column.\nExamples\nThis example displays a message alerting you that changes have been made in the window\ndw_detail which will be lost if the row focus is changed to the window dw_master.\nIF dw_detail.DeletedCount() > 0 OR & \n         dw_detail.ModifiedCount() > 0 THEN\n      MessageBox(\"dw_master\", \"Changes will be lost &\n         in Detail\")\nELSE \n      RETURN 0\nEND IF \nSee also\nItemFocusChanged\n"}
{"page": 571, "text": "DataWindow Events\nPage 571\nRowFocusChanged\n8.51 ScrollHorizontal\nDescription\nOccurs when user scrolls left or right in the DataWindow with the tab or arrow keys or the\nscroll bar.\nPowerBuilder event information\nEvent ID: pbm_dwnhscroll\nTable 8.36:\nArgument\nDescription\nscrollpos\nLong by value. The distance in PowerBuilder units of the scroll box from\nthe left end of the scroll bar (if the DataWindow is split, in the pane being\nscrolled).\npane\nInteger by value. The number of the pane being scrolled. (When the\nDataWindow is split with two scroll bars, there are two panes.) Values are:\n\u2022 1 -- The left pane (if the scroll bar is not split, the only pane).\n\u2022 2 -- The right pane.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nExamples\nThis example displays the customer ID of the current row (the cust_id column) in a\nSingleLineEdit control when the pane being scrolled is pane 1 and the position is greater than\n100:\nstring ls_id\nls_id = \"\"\nIF pane = 1 THEN\n   IF scrollpos > 100 THEN\n      ls_id =    String(dw_1.Object.Id[dw_1.GetRow()])\n   END If\nEND IF\nsle_message.Text = ls_id\nRETURN 0\nSee also\nScrollVertical\n8.52 ScrollVertical\nDescription\nOccurs when user scrolls up or down in the DataWindow with the Tab or arrow keys or the\nscroll bar.\n"}
{"page": 572, "text": "DataWindow Events\nPage 572\nPowerBuilder event information\nEvent ID: pbm_dwnvscroll\nTable 8.37:\nArgument\nDescription\nscrollpos\nLong by value. The distance in PowerBuilder units of the scroll box from the\ntop of the scroll bar.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nExamples\nAs the user scrolls vertically, this script displays the range of rows currently being displayed\nin the DataWindow:\nlong ll_numrows\nstring ls_firstrow, ls_lastrow\n \nll_numrows = dw_1.RowCount()\nls_firstrow = dw_1.Object.Datawindow.FirstRowOnPage\nls_lastrow = dw_1.Object.Datawindow.LastRowOnPage\n \nsle_message.Text = \"Rows \" + ls_firstrow &\n      + \" through \" + ls_lastrow + \" of \" &\n      + String(ll_numrows)\n \nRETURN 0\nSee also\nScrollHorizontal\n8.53 SQLPreview\nDescription\nOccurs immediately before a SQL statement is submitted to the DBMS. Methods that trigger\nDBMS activity are Retrieve, Update, and ReselectRow.\nPowerBuilder event information\nEvent ID: pbm_dwnsql\nTable 8.38:\nArgument\nDescription\nrequest\nSQLPreviewFunction by value. The function that initiated the database\nactivity.\nFor a list of valid values, see SQLPreviewFunction.\nsqltype\nSQLPreviewType by value. The type of SQL statement being sent to the\nDBMS.\nFor a list of valid values, see SQLPreviewType.\n"}
{"page": 573, "text": "DataWindow Events\nPage 573\nArgument\nDescription\nsqlsyntax\nString by value. The full text of the SQL statement.\nbuffer\nDWBuffer by value. The buffer containing the row involved in the database\nactivity.\nFor a list of valid values, see DWBuffer.\nrow\nLong by value. The number of the row involved in the database activity, that\nis, the row being updated, selected, inserted, or deleted.\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Continue processing\n1 -- Stop processing\n2 -- Skip this request and execute the next request\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nSome uses for the sqlsyntax argument are:\n\u2022 Changing the SQL to be executed (you can get the value of sqlsyntax, modify it, and call\nSetSQLPreview)\n\u2022 Keeping a record (you can write the SQL statement to a log file)\nReported row number\nThe row number stored in row is the number of the row in the buffer, not the number\nthe row had when it was retrieved into the DataWindow object.\nIf the row that caused the error is in the Filter buffer, you must unfilter it if you want\nthe user to correct the problem.\nGetSQLPreview and binding\nWhen binding is enabled for your database, the SQL returned in the GetSQLPreview\nmethod may not be complete -- the input arguments are not replaced with the actual\nvalues. For example, when binding is enabled, GetSQLPreview might return the\nfollowing SQL statement:\nINSERT INTO \"cust_order\" ( \"ordnum\", \"custnum\", \"duedate\", \"balance\" )\n VALUES ( ?, ?, ?, ? )\nWhen binding is disabled, it returns:\nINSERT INTO \"cust_order\" ( \"ordnum\", \"balance\", \"duedate\", \"custnum\" )\n VALUES ( '12345', 900, '3/1/94', '111' )\nIf you require the complete SQL statement for logging purposes, you should disable\nbinding in your DBMS.\n"}
{"page": 574, "text": "DataWindow Events\nPage 574\nFor more information about binding, see Connecting to Your Database.\nObsolete methods in PowerBuilder\nInformation formerly provided by GetSQLPreview and GetUpdateStatus is available in the\narguments sqlsyntax, row, and buffer.\nExamples\nThis statement in the SQLPreview event sets the current SQL string for the DataWindow\ndw_1:\ndw_1.SetSQLPreview( &\n      \"INSERT INTO billings VALUES(100, \" + &\n      String(Current_balance) + \")\")\nSee also\nRetrieveStart\nUpdateEnd\nUpdateStart\n8.54 TabDownOut\nDescription\nOccurs when the user presses Enter or the down arrow to change focus to the next control in a\nwindow or user object.\nPowerBuilder event information\nEvent ID: pbm_dwntabdownout\nTabDownOut is not a standard PowerBuilder DataWindow event. To write a script for this\nevent, you must first define a user-defined event for the event ID pbm_dwntabdownout.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.55 TabOut\nDescription\nOccurs when the user presses Tab or, in some edit styles, the right arrow, to move to the next\ncontrol in a window or user object.\nPowerBuilder event information\nEvent ID: pbm_dwntabout\nTabOut is not a standard PowerBuilder DataWindow event. To write a script for this event,\nyou must first define a user-defined event for the event ID pbm_dwntabout.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n"}
{"page": 575, "text": "DataWindow Events\nPage 575\n0 -- Continue processing\n8.56 TabUpOut\nDescription\nOccurs when the user presses Shift+Enter or the up arrow to move to the previous control in a\nwindow or user object.\nPowerBuilder event information\nEvent ID: pbm_dwntabupout\nTabUpOut is not a standard PowerBuilder DataWindow event. To write a script for this\nevent, you must first define a user-defined event for the event ID pbm_dwntabupout.\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\n8.57 TreeNodeSelected\nDescription\nOccurs after a node in a TreeView DataWindow is selected.\nPowerBuilder event information\nEvent ID: pbm_dwntreenodeselected\nTable 8.39:\nArgument\nDescription\nrow\nLong by value. The number of the first row in the group that has been\nselected.\ngrouplevel\nLong by value. The level of the group that has been selected.\nReturn Values\nThere are no return codes.\nUsage\nA TreeView node is selected when the user clicks the State icon (-) in the TreeView\nDataWindow or uses any of the Collapse methods.\nThe TreeNodeSelected event occurs after the selecting operation when the user selects a tree\nnode using the SelectTreeNode method.\nExamples\nThe following statements in the TreeNodeSelected event refresh the text box value with the\nnew node:\nsle_row.text = string(row)\nsle_level.text = string(grouplevel)\nreturn 0\nSee also\n"}
{"page": 576, "text": "DataWindow Events\nPage 576\nTreeNodeSelecting\n8.58 TreeNodeSelecting\nDescription\nOccurs before a node in a TreeView DataWindow is selected.\nPowerBuilder event information\nEvent ID: pbm_dwntreenodeselecting\nTable 8.40:\nArgument\nDescription\nrow\nLong by value. The number of the first row in the group to be selected.\ngrouplevel\nLong by value. The TreeView level of the group to be selected.\nReturn Values\nSet the return code to affect the outcome of the event. Return 0 to continue the selecting\noperation or return any other value to cancel the selecting operation.\nUsage\nThe TreeNodeSelecting event occurs before the user selects a TreeNode or uses the\nSelectTreeNode method.\nExamples\nThe following statements in the TreeNodeSelecting event refresh the text box value with the\nnew node:\nsle_row.text = string(row)\nsle_level.text = string(grouplevel)\nreturn 0\nSee also\nTreeNodeSelected\n8.59 UpdateEnd\nDescription\nOccurs when all the updates to the database from the DataWindow (or DataStore) are\ncomplete.\nPowerBuilder event information\nEvent ID: pbm_dwnupdateend\nTable 8.41:\nArgument\nDescription\nrowsinserted Long by value. The number of rows inserted.\nrowsupdated Long by value. The number of rows updated.\nrowsdeleted\nLong by value. The number of rows deleted.\n"}
{"page": 577, "text": "DataWindow Events\nPage 577\nReturn Values\nThere are no special outcomes for this event. The only code is:\n0 -- Continue processing\nSee also\nRetrieveStart\nSQLPreview\nUpdateStart\n8.60 UpdateStart\nDescription\nOccurs after a script calls the Update method and just before changes in the DataWindow or\nDataStore are sent to the database.\nPowerBuilder event information\nEvent ID: pbm_dwnupdatestart\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Continue processing\n1 -- Do not perform the update\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nSee also\nRetrieveStart\nSQLPreview\nUpdateEnd\n8.61 WSError (Obsolete)\nDescription\nOccurs when an error is returned for a DataWindow using a Web service data source. The\nerror can occur during any of the following operations: connect, retrieve, delete, insert,\nupdate, or disconnect.\nPowerBuilder event information\nEvent ID: pbm_dwnwserror\nTable 8.42:\nArgument\nDescription\noperation\nString for the type of operation (Retrieve, Update, Insert, Delete, Connect, or\nDisconnect)\n"}
{"page": 578, "text": "DataWindow Events\nPage 578\nArgument\nDescription\nrownum\nLong for the row number or 0 if not applicable, such as when an error occurs\nduring connection to the Web service\nbuffername\nString for the name of the buffer being accessed while the error occurred\n(Primary, Filter, or Delete)\nwsinfo\nString for the WSDL file, the URL that defines the Web service, or the\nassembly that is used access the Web service\nmethod\nString for the name of the Web service method invoked\nerrormessage String for the exception message returned from the method\nReturn Values\nSet the return code to affect the outcome of the event:\n0 -- Display the error message\n1 -- Do not display the error message\nFor information on setting the return code in a particular environment, see About return\nvalues for DataWindow events.\nUsage\nBecause you cannot use the DBError event with a Web Service DataWindow, you must use\nthe WSError event to obtain any error information.\nExamples\nThe following code in a WSError event script causes information about an error to display in\na message box:\nMessageBox(\"Error event\", \"Error in row \" &   \n   + string(rownum) + \", Occurred during \" + method &\n   + \"; the cause of the error is: \"+ errormessage)\nSee also\nDBError\n"}
{"page": 579, "text": "Methods for the DataWindow Control\nPage 579\n9 Methods for the DataWindow Control\nAbout this chapter\nThis chapter documents the methods of the DataWindow control in the PowerBuilder and\nWeb environments. You will find syntax, notes, and examples for all environments.\nMethods for graphs are in Methods for Graphs in the DataWindow Control.\nContents\nThe methods in this chapter are listed alphabetically.\nBefore you begin\nFor methods (or functions) in the PowerBuilder environment that apply to controls other than\nDataWindows and DataStores, see Part I, \u201cPowerScript Reference\u201d.\n9.1 AboutBox (obsolete)\nDescription\nDisplays a dialog identifying the DataWindow, including copyright and version information.\nObsolete method\nAboutBox is obsolete and should not be used, because the DataWindow Web Control\nfor ActiveX technology is obsolete. An obsolete feature is no longer eligible for\ntechnical support and will no longer be enhanced, although it is still available.\nApplies to\nTable 9.1:\nDataWindow type\nMethod applies to\nWeb ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nvoid dwcontrol.AboutBox ( )\nReturn value\nNone\n9.2 AcceptText\nDescription\nApplies the contents of the DataWindow's edit control to the current item in the buffer of a\nDataWindow control or DataStore. The data in the edit control must pass the validation rule\nfor the column before it can be stored in the item.\nApplies to\n"}
{"page": 580, "text": "Methods for the DataWindow Control\nPage 580\nTable 9.2:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.AcceptText ( )\nTable 9.3:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns 1 if it succeeds and -1 if it fails (for example, the data did not pass validation).\nIf there is no DataWindow object assigned to the DataWindow control or DataStore, this\nmethod returns 1.\nUsage\nWhen a user moves from item to item in a DataWindow control, the control validates and\naccepts data the user has edited.\nHow to call AcceptText\nWhen a user modifies a DataWindow item then immediately changes focus to another\ncontrol in the window, the DataWindow control does not accept the modified data -- the data\nremains in the edit control. Use the AcceptText method in this situation to ensure that the\nDataWindow object contains the data the user edited.\nHowever, you must not call AcceptText in the LoseFocus event or in a user event posted\nfrom LoseFocus if the DataWindow control still has focus. If you do, an infinite loop can\noccur.\nThe problem\nNormally, new data is validated and accepted when the user moves to a new cell in the\nDataWindow. If the new data causes an error, a message box displays, which causes the\nDataWindow to lose focus. If you have also coded the LoseFocus event or an event posted\nfrom LoseFocus to call AcceptText to validate data when the control loses focus, this\nAcceptText runs because of the message box and triggers an infinite loop of validation errors.\nThe solution\nIt is desirable to validate the last changed data when the control loses focus. You can\naccomplish this by making sure AcceptText gets called only when the DataWindow control\nreally has lost focus. The third PowerBuilder example illustrates how to use an instance\nvariable to keep track of whether the DataWindow control has focus. The posted event calls\nAcceptText only when the DataWindow control does not have focus.\n"}
{"page": 581, "text": "Methods for the DataWindow Control\nPage 581\nThis is a change from previous versions of PowerBuilder. Previously, the posted user event\nwould run while the message box for the validation error was displayed. Now, it runs after\nthe message box is dismissed, causing another validation error to occur and another message\nbox to be displayed, resulting in an infinite loop.\nEvents\nAcceptText can trigger an ItemChanged or an ItemError event.\nAcceptText in the ItemChanged event\nCalling AcceptText in the ItemChanged event has no effect.\nExamples\nIn this example, the user is expected to enter a key value (such as an employee number) in\na column of the DataWindow object, then click the OK button. This script for the Clicked\nevent for the button calls AcceptText to validate the entry and place it in the DataWindow\ncontrol. Then the script uses the item in the Retrieve method to retrieve the row for that key:\nIF dw_emp.AcceptText() = 1 THEN\n      dw_emp.Retrieve(dw_emp.GetItemNumber &\n         (dw_emp.GetRow(), dw_emp.GetColumn()))\nEND IF\nThis script for the Clicked event for a CommandButton accepts the text in the DataWindow\ndw_Emp and counts the rows in which the column named balance is greater than 0:\ninteger i, Count\ndw_employee.AcceptText()\nFOR i = 1 to dw_employee.RowCount()\n      IF dw_employee.GetItemNumber(i,'balance') &\n            > 0 THEN\n         Count = Count + 1\n      END IF\nNEXT\nThis example illustrates how to validate newly entered data when the DataWindow control\nloses focus. An instance variable keeps track of whether the DataWindow control has focus.\nIt is set in the GetFocus and LoseFocus events. The LoseFocus event posts the ue_acceptText\nevent, which calls the AcceptText method only if the DataWindow control does not have\nfocus.\nThe instance variable:\nboolean dw_has_focus\nThe GetFocus event:\ndw_has_focus = true\nThe LoseFocus event:\ndw_has_focus = false\ndw_1.event  post ue_acceptText( )\nThe ue_acceptText event:\nIF dw_has_focus = false THEN\n"}
{"page": 582, "text": "Methods for the DataWindow Control\nPage 582\n      dw_1.accepttext( )\nEND IF\nSee also\nUpdate\n9.3 CanUndo\nDescription\nTests whether Undo can reverse the most recent edit in the editable control over the current\nrow and column.\nApplies to\nTable 9.4:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nboolean dwcontrol.CanUndo ( )\nTable 9.5:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nReturn value\nReturns true if the last edit can be reversed (undone) using the Undo method and false if the\nlast edit cannot be reversed.\nIf dwcontrol is null, the method returns null.\nUsage\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.57, \u201cCanUndo\u201d in\nPowerScript Reference.\nExamples\nThese statements check to see if the last edit in the edit control of dw_contact can be\nreversed; if yes the statements reverse it, and if no they display a message:\nIF dw_contact.CanUndo() THEN\n      dw_contact.Undo()\nELSE\n      MessageBox(Parent.Title, \"Nothing to Undo\")\nEND IF\n"}
{"page": 583, "text": "Methods for the DataWindow Control\nPage 583\nSee also\nUndo\n9.4 ClassName\nDescription\nProvides the class (or name) of the specified object.\nApplies to\nTable 9.6:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nstring dwcontrol.ClassName ( )\nTable 9.7:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nReturn value\nReturns the class of dwcontrol, the name assigned to the control. Returns the empty string\n(\"\") if an error occurs.\nUsage\nMethod inherited from PowerObject. For use with variables in the PowerBuilder\nenvironment, see Section 2.4.68, \u201cClassName\u201d in PowerScript Reference.\n9.5 Clear\nDescription\nDeletes selected text in the edit control over the current row and column, but does not store it\nin the clipboard.\nApplies to\nTable 9.8:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\n"}
{"page": 584, "text": "Methods for the DataWindow Control\nPage 584\nlong dwcontrol.Clear ( )\nTable 9.9:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nReturn value\nReturns the number of characters that Clear removed from dwcontrol. If no text is selected,\nno characters are removed and Clear returns 0. If an error occurs, Clear returns -1.\nUsage\nTo select text for deleting, the user can use the mouse or keyboard. You can also call the\nSelectText method in a script.\nTo delete selected text and store it in the clipboard, use the Cut method.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.69, \u201cClear\u201d in PowerScript\nReference.\nExamples\nIf the user is editing the emp_name column in dw_emp and selects the text Wilson, this\nstatement clears Wilson from the edit control and returns 6:\nlong chars_returned\nchars_returned = dw_emp.Clear( )\nIf the text in the edit control in dw_emp is Wilson, the first statement selects the W and the\nsecond clears W from the edit control. The return value would be 1:\ndw_emp.SelectText(1,1)\ndw_emp.Clear( )\nSee also\nClear in Section 2.4.69, \u201cClear\u201d in PowerScript Reference\nCut\nPaste\nReplaceText\nSelectText\n9.6 ClearValues\nDescription\nDeletes all the items from a value list or code table associated with a DataWindow column.\n(A value list is called a code table when it has both display and data values.) ClearValues\ndoes not affect the data stored in the column.\nApplies to\n"}
{"page": 585, "text": "Methods for the DataWindow Control\nPage 585\nTable 9.10:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.ClearValues ( string column )\ninteger dwcontrol.ClearValues ( integer column )\nTable 9.11:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nDataStore.\ncolumn\nThe column whose value list you want to\ndelete. Column can be a column number\n(integer) or a column name (string).\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. The return value is usually not used.\nUsage\nThe edit style of the column can be DropDownListBox, Edit, or RadioButton. ClearValues\nhas no effect when column has the EditMask or DropDownDataWindow edit style.\nExamples\nThis statement clears all values from the drop-down list of dw_Employee's status column:\ndw_Employee.ClearValues(\"status\")\nSee also\nGetValue\nSetValue\n9.7 Collapse\nDescription\nCollapses a group in a TreeView DataWindow that has the specified TreeView level and\nincludes the specified row.\nApplies to\nTable 9.12:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\n"}
{"page": 586, "text": "Methods for the DataWindow Control\nPage 586\nSyntax\nPowerBuilder\nInteger dw_control.Collapse(long row, long groupLevel)\nTable 9.13:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\nrow\nThe number of the row that belongs to the\nTreeView level of the group to be collapsed\ngroupLevel\nThe TreeView level of the group to be\ncollapsed\nReturn value\nReturns 1 if the collapse operation succeeds and one of the following negative values if it\nfails:\n-1 -- DataWindow is null\n-5 -- One or more of the parameters are invalid\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\nA TreeView DataWindow has several TreeView level bands (groups) that can be expanded\nand collapsed. You can use the Collapse method to collapse a group in a TreeView\nDataWindow that includes a particular row in a particular TreeView level.\nThe Collapse method triggers the Collapsing and Collapsed events.\nExamples\nThe following example collapses the group at TreeView level 2 that includes row 3:\ninteger li_ret\nli_ret = dw_treeview.Collapse(3,2)\nSee also\nCollapseAll\nCollapseAllChildren\nCollapseLevel\nExpand\n9.8 CollapseAll\nDescription\nCollapses all groups in a TreeView DataWindow.\nApplies to\n"}
{"page": 587, "text": "Methods for the DataWindow Control\nPage 587\nTable 9.14:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger dw_control.CollapseAll( )\nTable 9.15:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\nReturn value\nReturns 1 if the CollapseAll operation succeeds and one of the following negative values if it\nfails:\n-1 -- DataWindow is null\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\nA TreeView DataWindow has several TreeView level bands (groups) that can be expanded\nand collapsed. You can use the CollapseAll method to collapse all groups in a TreeView\nDataWindow.\nThe CollapseAll method triggers the Collapsing and Collapsed events with row and level\narguments of -1.\nExamples\nThe following example collapses all groups:\ninteger li_ret\nli_ret = dw_treeview.CollapseAll()\nSee also\nCollapse\nCollapseAllChildren\nCollapseLevel\nExpandAll\n9.9 CollapseAllChildren\nDescription\nCollapses a group in a TreeView DataWindow that has the specified TreeView level and\nincludes the specified row; also collapses all the group's children.\nApplies to\n"}
{"page": 588, "text": "Methods for the DataWindow Control\nPage 588\nTable 9.16:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger dw_control.ExpandAllChildren(long row, long groupLevel)\nTable 9.17:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\nrow\nThe number of the row that belongs to the\ngroup to be collapsed\ngroupLevel\nThe TreeView level of the group to be\ncollapsed\nReturn value\nReturns 1 if the expand operation succeeds and one of the following negative values if it fails:\n-1 -- DataWindow is null\n-5 -- One or more of the parameters are invalid\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\nA TreeView DataWindow has several TreeView level bands (groups) that can be expanded\nand collapsed. You can use the CollapseAllChildren method to collapse a group with a\nspecified TreeView level in a TreeView DataWindow and all of its children.\nThe CollapseAllChildren method triggers the Collapsing and Collapsed events.\nExamples\nThe following example collapses the group in a TreeView DataWindow that has TreeView\nlevel 2 and includes row 3 and all the group's children:\ninteger li_ret\nli_ret = dw_treeview.CollapseAllChildren(3,2)\nSee also\nCollapse\nCollapseAll\nCollapseLevel\nExpandAllChildren\n9.10 CollapseLevel\nDescription\n"}
{"page": 589, "text": "Methods for the DataWindow Control\nPage 589\nCollapses all the groups in a TreeView DataWindow that have the specified TreeView level.\nApplies to\nTable 9.18:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger dw_control.CollapseLevel (long groupLevel)\nTable 9.19:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\ngroupLevel\nThe TreeView level of the group to be\ncollapsed\nReturn value\nReturns 1 if the CollapseLevel operation succeeds and one of the following negative values if\nit fails:\n-1 -- DataWindow is null\n-5 -- One or more of the parameters are invalid\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\nA TreeView DataWindow has several TreeView level bands (groups) that can be expanded\nand collapsed. You can use the CollapseLevel method to collapse all the groups in a\nTreeView DataWindow that have a particular TreeView level.\nThe CollapseLevel method triggers the Collapsing and Collapsed events with a row argument\nof -1.\nExamples\nThe following example collapses TreeView level 2:\ninteger li_ret\nli_ret = dw_treeview.CollapseLevel(2)\nSee also\nCollapse\nCollapseAll\nCollapseAllChildren\nExpandLevel\n"}
{"page": 590, "text": "Methods for the DataWindow Control\nPage 590\n9.11 Copy\nDescription\nPuts selected text from the current row and column of an edit control onto the clipboard.\nCopy does not change the source text.\nApplies to\nTable 9.20:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, OLE DWObject\nSyntax\nPowerBuilder\ninteger objectref.Copy ( ) \nTable 9.21:\nArgument\nDescription\nobjectref\nA reference to a DataWindow control\nor\nThe fully qualified name of a OLE\nDWObject within a DataWindow control that\ncontains the object you want to copy to the\nclipboard.\nThe fully qualified name for a DWObject has\nthis syntax:\ndwcontrol.Object.dwobjectname \nReturn value\nReturns the number of characters that were copied to the clipboard. If no text is selected in\nobjectref, no characters are copied and Copy returns 0. If an error occurs, Copy returns -1.\nFor OLE DWObjects, Copy returns 0 if it succeeds and one of the following negative values\nif an error occurs:\n-1 -- Container is empty\n-2 -- Copy Failed\n-9 -- Other error\nIf objectref is null, the method returns null.\nUsage\nTo select text for copying, the user can use the mouse or keyboard. You can also call the\nSelectText method in a script. For the RichTextEdit presentation style in PowerBuilder,\nthere are several additional methods for selecting text: SelectTextAll, SelectTextLine, and\nSelectTextWord.\n"}
{"page": 591, "text": "Methods for the DataWindow Control\nPage 591\nTo insert the contents of the clipboard into a control, use the Paste method.\nCopy does not delete the selected text or OLE object. To delete the data, use the Clear or Cut\nmethod.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.94, \u201cCopy\u201d in PowerScript\nReference.\nExamples\nAssuming the selected text in the edit control of dw_emp is Temporary Address, these\nstatements copy Temporary Address to the clipboard and store 17 in copy_amt:\ninteger copy_amt\ncopy_amt = dw_emp.Copy()\nSee also\nClear\nClipboard in Section 2.4.76, \u201cClipboard\u201d in PowerScript Reference\nCut\nPaste\nReplaceText\nSelectedText\n9.12 CopyRTF\nDescription\nReturns the selected text, pictures, and input fields in a RichText DataWindow as a string\nwith rich text formatting. Bitmaps and input fields are included in the string.\nApplies to\nTable 9.22:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.CopyRTF ( { boolean selected {, Band band } } ) \nTable 9.23:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore object. The DataWindow\nobject in the DataWindow control or DataStore must be a RichText\nDataWindow.\n"}
{"page": 592, "text": "Methods for the DataWindow Control\nPage 592\nArgument\nDescription\nselected\n(optional)\nA value indicating whether to copy selected text only. Values are:\n\u2022 true -- (Default) Copy selected text only.\n\u2022 false -- Copy the entire contents of the band.\nband\n(optional)\nA value specifying the band from which to copy text. For a list of valid\nvalues, see Band.\nThe default is the band that contains the insertion point.\nReturn value\nReturns the selected text as a string.\nCopyRTF returns an empty string (\"\") if:\n\u2022 There is no selection and selected is true\n\u2022 An error occurs\nUsage\nCopyRTF does not involve the clipboard. The copied information is stored in a string. If\nyou use the standard clipboard methods (Copy and Cut) the clipboard will contain the text\nwithout any formatting.\nTo incorporate the text with RTF formatting into another RichTextEdit control, use\nPasteRTF.\nPowerBuilder environment\nFor use with RichTextEdit controls, see Section 2.4.95, \u201cCopyRTF\u201d in PowerScript\nReference. For information about rich text format, see Section 4.5, \u201cImplementing\nRich Text\u201d in Application Techniques.\nExamples\nThis statement returns the text that is selected in the RichText DataWindow dw_letter and\nstores it in the string ls_richtext:\nstring ls_richtext\nls_richtext = dw_letter.CopyRTF()\nThis example copies the text in dw_1, saving it in ls_richtext, and pastes it into dw_2. The\nuser clicks the RadioButton rb_true to copy selected text and rb_false to copy all the text. The\nnumber of characters pasted is saved in ll_numchars reported in the StaticText st_status:\nstring ls_richtext\nboolean lb_selected\nlong ll_numchars\n \nIF rb_true.Checked = true THEN\n      lb_selected = true\nELSE\n"}
{"page": 593, "text": "Methods for the DataWindow Control\nPage 593\n      lb_selected = false\nEND IF\n \nls_richtext = dw_1.CopyRTF(lb_selected)\nll_numchars = dw_2.PasteRTF(ls_richtext)\nst_status.Text = String(ll_numchars)\nSee also\nCopy\nCopyRTF in the Section 2.4.95, \u201cCopyRTF\u201d in PowerScript Reference\nCut\nPasteRTF\n9.13 Create\nDescription\nCreates a DataWindow object using DataWindow source code and puts that object in the\nspecified DataWindow control or DataStore object. This dynamic DataWindow object does\nnot become a permanent part of the application source library.\nApplies to\nTable 9.24:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.Create ( string syntax {, string errorbuffer } ) \nTable 9.25:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control or DataStore in which PowerBuilder\nwill create the new DataWindow object.\nsyntax\nA string whose value is the DataWindow source code that will be used to\ncreate the DataWindow object.\nerrorbuffer\n(optional)\nThe name of a string that will hold any error messages that are generated.\nIf you do not specify an error buffer, a message box will display the error\nmessages.\nReturn value\nIn PowerBuilder, returns 1 if it succeeds and -1 if an error occurs.\nIf any argument's value is null, the method returns null.\nUsage\n"}
{"page": 594, "text": "Methods for the DataWindow Control\nPage 594\nThe Create method creates a DataWindow object using the source code in syntax. It\nsubstitutes the new DataWindow object for the DataWindow object currently associated with\ndwcontrol.\nDataWindow source code syntax is complex and is best produced by copying existing\nDataWindows. In a PowerBuilder application, you can use the Describe and LibraryExport\nmethods to obtain the source code of existing DataWindows to use as models. In the\nPowerBuilder development environment, you can export the syntax of a DataWindow object\nin the Library painter.\nAnother source of DataWindow code is the SyntaxFromSQL method, which creates\nDataWindow source code based on a SQL statement. Many values in the source code syntax\ncorrespond to properties of the DataWindow object, which are documented in DataWindow\nObject Properties.\nWhen you examine syntax for existing DataWindow objects, you will see that the order of\nthe syntax can vary. Release must be the first statement, and DataWindow should be the next\nstatement. If you change the order, use care; the order can affect the results.\nCalling SyntaxFromSQL as the syntax argument\nYou can call SyntaxFromSQL directly as the value for syntax. However, this does not\ngive you the chance to check whether errors have been reported in its error argument.\nBefore you use SyntaxFromSQL in Create, make sure the SQL syntax is valid.\nComments\nTo designate text in your DataWindow syntax as a comment, use either of the standard\nPowerBuilder methods:\n\u2022 Use double slashes (//) to indicate that the text after the slashes and on the same line is a\ncomment.\nWhen you use this method, the comment can be all or part of a line but cannot cover\nmultiple lines; the compiler ignores everything following the double slashes on the line.\n\u2022 Begin a comment with slash asterisk (/*) and end it with asterisk slash (*/) to indicate that\nall the text between the delimiters is a comment.\nWhen you use this method, the comment can be all or part of a line or occupy multiple\nlines; the compiler ignores everything between /* and */.\nFor DataWindows in group boxes\nIf a DataWindow object is in a group box, it is not automatically moved to the top when you\ncall Create, even if the BringToTop property is set to true in the DataWindow painter. You\nmust explicitly set the BringToTop property to true after you call Create. For example:\ndw_1.Create(ls_syntax, ls_errors)\ndw_1.BringToTop=true\nExamples\nThese statements create a new DataWindow in the control dw_new from the DataWindow\nsource code returned by the SyntaxFromSQL method. Errors from SyntaxFromSQL and\n"}
{"page": 595, "text": "Methods for the DataWindow Control\nPage 595\nCreate are displayed in the MultiLineEdits mle_sfs and mle_create. After creating the\nDataWindow, you must call SetTransObject for the new DataWindow object before you can\nretrieve data:\nstring error_syntaxfromSQL, error_create\nstring new_sql, new_syntax\n \nnew_sql = 'SELECT emp_data.emp_id, ' &\n      + 'emp_data.emp_name ' &\n      + 'from emp_data ' &\n      + 'WHERE emp_data.emp_salary>45000'\n \nnew_syntax = SQLCA.SyntaxFromSQL(new_sql, &\n      'Style(Type=Form)', error_syntaxfromSQL)\n \nIF Len(error_syntaxfromSQL) > 0 THEN\n      // Display errors\n      mle_sfs.Text = error_syntaxfromSQL\nELSE\n      // Generate new DataWindow\n      dw_new.Create(new_syntax, error_create)\n      IF Len(error_create) > 0 THEN\n         mle_create.Text = error_create\n      END IF\nEND IF\n \ndw_new.SetTransObject(SQLCA)\ndw_new.Retrieve()\nSee also\nSyntaxFromSQL in Section 2.4.833, \u201cSyntaxFromSQL\u201d in PowerScript Reference\nSetTrans\nSetTransObject\n9.14 CreateError (obsolete)\nDescription\nReturns the error messages that were generated during a previous call to Create.\nObsolete method\nCreateError is obsolete and should not be used, because the DataWindow Web\nControl for ActiveX technology is obsolete.\nApplies to\nTable 9.26:\nDataWindow type\nMethod applies to\nWeb ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nstring dwcontrol.CreateError ( ) \n"}
{"page": 596, "text": "Methods for the DataWindow Control\nPage 596\nTable 9.27:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control for\nwhich you just called the Create method\nReturn value\nReturns a string whose value is the error message text that was generated when attempting to\ncreate a DataWindow from source code. If no errors occur, returns an empty string.\nUsage\nCall CreateError immediately after the Create method to get error messages generated by\nCreate.\nSee also\nCreate\n9.15 CreateFrom\nDescription\nCreates a DataStore object from the passed ResultSet object.\nApplies to\nTable 9.28:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataStore object\nSyntax\nPowerBuilder\ninteger dsobject.CreateFrom ( ResultSet rssource )\nTable 9.29:\nArgument\nDescription\ndsobject\nThe name of the DataStore object into which\nyou want to place the data in the passed\nresult set\nrssource\nA ResultSet or ADOResultSet object that\ncontains meta data from which the DataStore\nobject is created\nReturn value\nInteger. Returns 1 if it succeeds or a negative number if an error occurs. If any argument is\nnull, in PowerBuilder the method returns null.\nUsage\n"}
{"page": 597, "text": "Methods for the DataWindow Control\nPage 597\nUse CreateFrom to create a DataStore from a passed result set. Typically, a PowerBuilder\nclient calls methods on a component running in a transaction server and converts results sets\nreturned from those methods to DataStore objects using CreateFrom.\nCreateFrom creates an external DataWindow definition with no visual component -- it has no\ncontrols and the height of all bands is zero. Since the data source for the DataStore object is\nexternal, Update methods on the DataStore object have no effect. The Print method will print\na blank page.\nClient applications can use the DataStore object directly or display the data in a DataWindow\ncontrol using the ShareData method.\nFor more information about result sets and methods for exchanging data between components\nand clients, see Usage for GenerateResultSet.\nExamples\nThis example creates an instance of the SVUBookstore component, calls the GetMajors\nmethod, and creates a DataStore object using the data definition in the returned ResultSet\nobject:\nSVUBookstore lcst_mybookstore\nresultset lrs_resultset\ndatastore ds_local\ninteger li_rc\n \nli_rc = myconnect.CreateInstance(lcst_mybookstore)\nIF li_rc <> 0 THEN\n      MessageBox(\"Create Instance\", string(li_rc) )\n      myconnect.DisConnectServer()\n      RETURN\nEND IF\n \nlrs_resultset = lcst_mybookstore.GetMajors()\n \nds_local = CREATE DataStore\nds_local.CreateFrom(lrs_resultset)\nThis example creates a DataStore object from an ADO Recordset returned from a method on\nan MTS component.\nOLEObject loo_mycomponent\nOLEObject loo_ADOrecordset\nADOresultset lrs_ADOresultset\ndatastore ds_local\ninteger li_rc\n \nloo_mycomponent = CREATE OLEObject\nli_rc = loo_mycomponent.ConnectToNewObject(\"PB.Test\")\nIF li_rc <> 0 THEN\n      MessageBox(\"Connect Failed\", string(li_rc) )\n      RETURN\nEND IF\n \n// Use an OLEObject to hold ADO Recordset\n// returned from method on MTS component\nloo_ADOrecordset = loo_mycomponent.GetTestResult()\n \n// Create an ADOResultSet and get its data\n// from OLEObject holding passed ADO Recordset\nlrs_ADOresultset = CREATE ADOResultSet\nlrs_ADOresultset.SetRecordSet(loo_ADOrecordset)\n"}
{"page": 598, "text": "Methods for the DataWindow Control\nPage 598\n \n// Use CreateFrom to populate DataStore \n// from ADOResultSet object\nds_local = CREATE DataStore\nds_local.CreateFrom(lrs_ADOresultset)\nSee also\nGenerateResultSet\nSetRecordSet in Section 2.4.765, \u201cSetRecordSet\u201d in PowerScript Reference\nSetResultSet in Section 2.4.770, \u201cSetResultSet\u201d in PowerScript Reference\n9.16 CrosstabDialog\nDescription\nDisplays the Crosstab Definition dialog box so the user can modify the definition of a\ncrosstab DataWindow at runtime. The dialog box is the one you use in the DataWindow\npainter to define the crosstab.\nApplies to\nTable 9.30:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.CrossTabDialog ( ) \nTable 9.31:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf dwcontrol is null, the method returns null.\nUsage\nIf the style of the DataWindow object in the DataWindow control is not crosstab,\nCrosstabDialog has no effect. You must connect to a database and set the DataWindow\ncontrol's transaction object before you call CrossTabDialog.\nExamples\nThis statement in the script for the CommandButton cb_define displays the Crosstab\nDefinition dialog so the user can modify the definition of the crosstab DataWindow object in\ndw_1:\ndw_1.CrosstabDialog()\n"}
{"page": 599, "text": "Methods for the DataWindow Control\nPage 599\n9.17 Cut\nDescription\nDeletes selected text in the current row and column of an edit control and stores it on the\nclipboard, replacing the clipboard contents with the deleted text.\nApplies to\nTable 9.32:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.Cut ( ) \nTable 9.33:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control. The text is cut from the edit control\nover the current row and column.\nReturn value\nReturns the number of characters that were cut from dwcontrol and stored in the clipboard. If\nno text is selected, no characters are cut and Cut returns 0. If an error occurs, Cut returns -1.\nIf dwcontrol is null, the method returns null.\nUsage\nTo select text for deleting, the user can use the mouse or keyboard. You can also call the\nSelectText method in a script. For the RichTextEdit presentation style in PowerBuilder,\nthere are several additional methods for selecting text: SelectTextAll, SelectTextLine, and\nSelectTextWord.\nTo insert the contents of the clipboard into a control, use the Paste method.\nTo delete selected text but not store it in the clipboard, use the Clear method.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.103, \u201cCut\u201d in PowerScript\nReference.\nExamples\nAssuming the selected text in the edit control of dw_emp is Temporary, this statement deletes\nTemporary from the edit control, stores it in the clipboard, and returns 9:\ndw_emp.Cut()\nSee also\n"}
{"page": 600, "text": "Methods for the DataWindow Control\nPage 600\nCopy\nClear\nClipboard in Section 2.4.76, \u201cClipboard\u201d in PowerScript Reference\nPaste\n9.18 DBCancel\nDescription\nCancels the retrieval in process in a DataWindow.\nApplies to\nTable 9.34:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.DBCancel ( ) \nTable 9.35:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control,\nDataStore, or child DataWindows\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nTo cancel a database retrieval, you need two pieces of code:\n\u2022 Code that calls DBCancel. To let the user cancel the retrieval, you could call DBCancel\n(or call a user function or member method that calls it) in code for a button or an item on a\nmenu. This code would generally set an instance variable or data member to indicate that\nthe user requested cancellation.\nIn PowerBuilder, this code might be:\nib_cancel = true\ndw_1.DBCancel()\n\u2022 Code for the RetrieveRow event that sets an action/return code of 1 to stop the retrieval.\nIn PowerBuilder, this code might be:\nIF ib_cancel = true THEN\n"}
{"page": 601, "text": "Methods for the DataWindow Control\nPage 601\n         RETURN 1\nEND IF\nCoding something in the RetrieveRow event's script (even just a comment) enables the\noperating system to process events while the DataWindow is being populated with rows from\nthe database. If the RetrieveRow event's script is empty, menus and command buttons can't\neven be clicked until the retrieval is completely finished. This can be frustrating if the user\ninadvertently starts a retrieval that is going to take a long time.\nIf the Async DBParm parameter is set to 1 (for asynchronous operation), a user or a\nscript can cancel a query either before the first row is returned or during the data retrieval\nprocess. If Async is set to 0 (for synchronous operation), the user cannot select the menu or\nCommandButton until the first row is retrieved. The asynchronous setting is useful when a\nquery might take a long time to retrieve its first row.\nFor a list of the DBMSs that support the Async DBParm parameter, see Section 1.1.4,\n\u201cAsync\u201d in Connection Reference.\nExamples\nIn this example, the menu bar for an MDI application has menu items for starting and\ncanceling a retrieval. When the user cancels the retrieval, a user function calls DBCancel\nand sets a boolean instance variable to Get/SetSeriesStyle and Get/SetDataStyle. The\nRetrieveStart and RetrieveRow events check this variable and return the appropriate value.\nIn this hypothetical application, the user starts a retrieval by selecting Retrieve from a menu.\nThe script for the Retrieve menu item calls a user function for the window:\nw_async1.wf_retrieve()\nThe wf_retrieve function sets the Async DBParm for asynchronous processing and starts the\nretrieval. Because Async is set to 1, the user can select the Cancel menu item at any time,\neven before the first row is retrieved. (In your own application, you would include error\nhandling to make sure Retrieve returned successfully.)\nlong rc\nib_cancel = false\nSQLCA.DBParm = 'Async = 1'\nrc = dw_1.Retrieve()\nThe user can stop the retrieval by selecting Cancel from the menu. The script for the Cancel\nmenu item reads:\nw_async1.wf_cancel()\nThe user function wf_cancel for the window w_async1 calls DBCancel and sets a flag\nindicating that the retrieval is canceled. Other events for the DataWindow will check this flag\nand abort the retrieval too. The variable ib_cancel is an instance variable for the window:\nib_cancel = true\ndw_1.DBCancel()\nScripts for the RetrieveStart and RetrieveRow events both check the ib_cancel instance\nvariable and, if it is true, stop the retrieval by returning a value of 1. In order to cancel the\nretrieval, some code or comment in the script for the RetrieveRow event is required:\nIF ib_cancel = true THEN\n"}
{"page": 602, "text": "Methods for the DataWindow Control\nPage 602\n      RETURN 1\nEND IF\nSee also\nRetrieve\n9.19 DBErrorCode (obsolete)\nDescription\nReports the database-specific error code that triggered the DBError event.\nObsolete method\nDBErrorCode is obsolete and will be discontinued in the future. You should replace\nall use of DBErrorCode as soon as possible. The database error code is available as an\nargument in the DBError event.\nApplies to\nTable 9.36:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\nlong dwcontrol.DBErrorCode ( ) \nTable 9.37:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nchild DataWindow\nReturn value\nReturns an error code when a database error occurs in dwcontrol. Error codes -1 through -4\nare PowerBuilder codes. Other codes are database-specific. Returns 0 if there is no error.\nIf dwcontrol is null, the method returns null.\nPowerBuilder error codes are:\n\u2022 -1 Can't connect to the database because of missing values in the transaction object.\n\u2022 -2 Can't connect to the database.\n\u2022 -3 The key specified in an Update or Retrieve no longer matches an existing row. (This can\nhappen when another user has changed the row after you retrieved it.)\n"}
{"page": 603, "text": "Methods for the DataWindow Control\nPage 603\n\u2022 -4 Writing a blob to the database failed.\nUsage\nWhen a database error occurs while a DataWindow control is interacting with the database,\nPowerBuilder triggers the DBError event. Since DBErrorCode is meaningful only if a\ndatabase error has occurred, you should call this method only in the DBError event.\nExamples\nThis statement returns the error code for dw_employee:\ndw_employee.DBErrorCode()\nSince this method is meaningful only in a DataWindow DBError event, you can use the\npronoun This instead of the DataWindow's name:\nThis.DBErrorCode()\nThese statements check the error code for dw_employee and if it is -4, perform some\nprocessing:\nlong ll_Error_Nbr\nll_Error_Nbr = This.DBErrorCode()\nIF ll_Error_Nbr =  - 4 THEN ...\nWhen an error occurs in dw_Emp, the following statements in the DBError event's script\nwill display the error number and message. A return code of 1 suppresses the default error\nmessage:\nlong ll_Error_Nbr\n \nll_Error_Nbr = This.DBErrorCode()\n \nIF ll_Error_Nbr <> 0 THEN\n      MessageBox(\"Database Error\", \"Number \" &\n      + string(ll_Error_Nbr) + \" \" &\n      + This.DBErrorMessage(), StopSign!)\n      // Stop PowerBuilder from displaying the error\n      RETURN 1\nEND IF\nSee also\nDBErrorMessage\n9.20 DBErrorMessage (obsolete)\nDescription\nReports the database-specific error message that triggered the DBError event.\nObsolete method\nDBErrorMessage is obsolete and will be discontinued in a future release. You should\nreplace all use of DBErrorMessage as soon as possible. The database error message is\navailable as an argument in the DBError event.\nApplies to\n"}
{"page": 604, "text": "Methods for the DataWindow Control\nPage 604\nTable 9.38:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\nstring dwcontrol.DBErrorMessage ( ) \nTable 9.39:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nchild DataWindow\nReturn value\nReturns a string whose value is a database-specific error message generated by a database\nerror in dwcontrol. Returns the empty string (\"\") if there is no error.\nIf dwcontrol is null, the method returns null.\nUsage\nWhen a database error occurs while a DataWindow control is interacting with the database,\nPowerBuilder triggers the DBError event. Since DBErrorMessage is meaningful only if a\ndatabase error has occurred, you should call this method only in the DBError event.\nExamples\nThis statement returns the error message generated by a database error in dw_employee:\ndw_employee.DBErrorMessage()\nSince this method is meaningful only in a DataWindow, you can use the pronoun This\ninstead of the DataWindow's name:\nThis.DBErrorMessage()\nIf data processing fails in dw_Emp and these statements are coded in the script for the\nDBError event, a message box containing the error number and the message displays:\nstring err_msg\n \nerr_msg = This.DBErrorMessage()\n \nIF err_msg <> \"\" THEN\n      MessageBox(\"DBError\", \"Number\" + &\n         String(This.DBErrorCode())+ \" \" + &\n         err_msg, StopSign!)\n      // Stop PowerBuilder from displaying the error\n      RETURN 1\nEND IF\nSee also\n"}
{"page": 605, "text": "Methods for the DataWindow Control\nPage 605\nDBErrorCode\n9.21 DeletedCount\nDescription\nReports the number of rows that have been marked for deletion in the database.\nApplies to\nTable 9.40:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.DeletedCount ( ) \nTable 9.41:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns the number of rows that have been deleted from dwcontrol but not updated in the\nassociated database table.\nReturns 0 if no rows have been deleted or if all the deleted rows have been updated in the\ndatabase table. DeletedCount returns -1 if it fails.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nAn updatable DataWindow control or DataStore has several buffers. The primary buffer\nstores the rows currently being displayed. The delete buffer stores rows that the application\nhas marked for deletion by calling the DeleteRow method. These rows are saved until the\ndatabase is updated. You can use DeletedCount to find out if there are any rows in the delete\nbuffer.\nIf a DataWindow is not updatable, rows that are deleted are discarded -- they are not stored in\nthe delete buffer. Therefore, DeletedCount returns 0 for a nonupdatable DataWindow unless a\nmethod, such as RowsCopy or RowsMove, has been used to populate the delete buffer.\nExamples\nAssuming two rows in dw_employee have been deleted but have not been updated in the\nassociated database table, these statements set ll_Del to 2:\nLong ll_Del\nll_Del = dw_employee.DeletedCount( )\n"}
{"page": 606, "text": "Methods for the DataWindow Control\nPage 606\nThis example tests whether there are rows in the delete buffer, and if so, updates the database\ntable associated with dw_employee:\nLong ll_Del\nll_Del = dw_employee.DeletedCount()\nIF ll_Del <> 0 THEN dw_employee.Update()\nSee also\nDeleteRow\nFilteredCount\nModifiedCount\nRowCount\n9.22 DeleteRow\nDescription\nDeletes a row from a DataWindow control, DataStore object, or child DataWindow.\nApplies to\nTable 9.42:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.DeleteRow ( long row ) \nTable 9.43:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow.\nrow\nA value identifying the row you want to\ndelete. To delete the current row, specify 0\nfor row.\nReturn value\nReturns 1 if the row is successfully deleted and -1 if an error occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nIf there is no DataWindow object assigned to the DataWindow control or DataStore, this\nmethod returns -1.\nUsage\nDeleteRow deletes the row from the DataWindow's primary buffer.\n"}
{"page": 607, "text": "Methods for the DataWindow Control\nPage 607\nIf the DataWindow is not updatable, all storage associated with the row is cleared. If the\nDataWindow is updatable, DeleteRow moves the row to the DataWindow's delete buffer;\nPowerBuilder uses the values in the delete buffer to build the SQL DELETE statement.\nThe row is not deleted from the database table until the application calls the Update method.\nAfter the Update method has updated the database and the update flags are reset, the storage\nassociated with the row is cleared.\nApply GetChanges after deleting rows in a distributed application\nIf a DataWindow or data store is populated using SetChanges or SetFullState, and an\nUpdate is done that includes deleted rows, the deleted rows remain in the delete buffer\nuntil a subsequent GetChanges is applied to the DataWindow or data store.\nExamples\nThis statement deletes the current row from dw_employee:\ndw_employee.DeleteRow(0)\nThese statements delete row 5 from dw_employee and then update the database with the\nchange:\ndw_employee.DeleteRow(5)\ndw_employee.Update()\nSee also\nDeletedCount\nInsertRow\n9.23 Describe\nDescription\nReports the values of properties of a DataWindow object and controls within the\nDataWindow object. Each column and graphic control in the DataWindow has a set of\nproperties (listed in DataWindow Object Properties). You specify one or more properties as a\nstring, and Describe returns the values of the properties.\nDescribe can also evaluate expressions involving values of a particular row and column.\nWhen you include Describe's Evaluate function in the property list, the value of the evaluated\nexpression is included in the reported information.\nApplies to\nTable 9.44:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\n"}
{"page": 608, "text": "Methods for the DataWindow Control\nPage 608\nstring dwcontrol.Describe ( string propertylist ) \nTable 9.45:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow.\npropertylist\nA string whose value is a blank-separated list\nof properties or Evaluate functions.\nFor a list of valid properties, see\nDataWindow Object Properties\nReturn value\nReturns a string that includes a value for each property or Evaluate function. A newline\ncharacter (~n or \\n) separates the value of each item in propertylist.\nIf the property list contains an invalid item, Describe returns an exclamation point (!) for that\nitem and ignores the rest of the property list. Describe returns a question mark (?) if there is\nno value for a property.\nWhen the value of a property contains an exclamation point or a question mark, the value is\nreturned in quotes so that you can distinguish between the returned value and an invalid item\nor a property with no value.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nUse Describe to understand the structure of a DataWindow. For example, you can find out\nwhich bands the DataWindow uses and what the datatypes of the columns are. You can also\nuse Describe to find out the current value of a property and use that value to make further\nmodifications.\nDescribe is often used to obtain the DataWindow's SELECT statement in order to modify it\n(for example, by adding a WHERE clause).\nWhen you can obtain the DataWindow's SQL statement\nWhen you use the Select painter to graphically create a SELECT statement,\nPowerBuilder saves its own SELECT statement (called a PBSELECT statement), and\nnot a SQL SELECT statement, with the DataWindow definition.\nWhen you call Describe with the property Table.Select, it returns a SQL SELECT\nstatement only if you are connected to the database. If you are not connected to the\ndatabase, Describe returns a PBSELECT statement.\nProperty syntax\nThe syntax for a property in the property list is:\ncontrolname.property\nFor the types of controls in a DataWindow and their properties with examples, see\nDataWindow Object Properties\n"}
{"page": 609, "text": "Methods for the DataWindow Control\nPage 609\nProperties whose value is a list\nWhen a property returns a list, the tab character separates the values in the list. For example,\nthe Bands property reports all the bands in use in the DataWindow as a list.\nheader[tab]detail[tab]summary[tab]footer[tab]header.1[tab]trailer.1\nIf the first character in a property's returned value list is a quotation mark, it means the whole\nlist is quoted and any quotation marks within the list are single quotation marks.\nFor example, the following is a single property value.\n\" Student[tab]'Andrew'or'[newline]Andy' \"\nSpecifying special characters\nThere are different ways of specifying special characters in a string in each environment:\nTable 9.46: Specifying special characters in different environments\nCharacter\nPowerBuilder\nJavaScript\ntab\n~t\n\\t\nnewline\n~n\n\\n\nsingle quote\n~'\n\\'\ndouble quote\n~\"\n\\\"\nQuoted property values\nDescribe returns a property's value enclosed in quotes when the text would otherwise be\nambiguous. For example, if the property's value includes a question mark, then the text is\nreturned in quotes. A question mark without quotes means that the property has no value.\nColumn name or number\nWhen the control is a column, you can specify the column name or a pound sign (#) followed\nby the column number. For example, if salary is column 5, then \"salary.coltype\" is equivalent\nto \"#5.coltype\".\nControl names\nThe DataWindow painter automatically gives names to all controls. (In previous versions of\nPowerBuilder, the painter only named columns and column labels.)\nEvaluating an expression\nDescribe's Evaluate function allows you to evaluate DataWindow painter expressions within\na script using data in the DataWindow. Evaluate has the following syntax, which you specify\nfor propertylist.\nEvaluate ( 'expression', rownumber )\nExpression is the expression you want to evaluate and rownumber is the number of the row\nfor which you want to evaluate the expression. The expression usually includes DataWindow\npainter functions. For example, in the following statement, Describe reports either 255 or 0\ndepending on the value of the salary column in row 3:\nls_ret = dw_1.Describe( &\n\"Evaluate('If(salary > 100000, 255, 0)', 3)\")\n"}
{"page": 610, "text": "Methods for the DataWindow Control\nPage 610\nYou can call DataWindow control functions in a script to get data from the DataWindow,\nbut some painter functions (such as LookUpDisplay) cannot be called in a script. Using\nEvaluate is the only way to call them. (See the example Evaluating the display value of a\nDropDownDataWindow.)\nSample property values\nTo illustrate the types of values that Describe reports, consider a DataWindow called\ndw_emp with one group level. Its columns are named emp and empname, and its headers\nare named emp_h and empname_h. The following table shows several properties and the\nreturned value. In the first example below, a sample command shows how you might specify\nthese properties for Describe and what it reports.\nTable 9.47: Examples of return values for Describe method\nProperty\nReported value\ndatawindow.Bands\nheader[tab]detail[tab]summary[tab]footer[tab]header.1[tab]tra\ndatawindow.Objects\nemp[tab]empname[tab]emp_h[tab]empname_h\nemp.Type\ncolumn\nempname.Type\ncolumn\nempname_h.Type\ntext\nemp.Coltype\nchar(20)\nstate.Type\n! (! indicates an invalid item -- there is no\ncolumn named state)\nempname_h.Visible\n \nExamples\nPowerBuilder examples\nThis example calls Describe with some of the properties shown in the previous table. The\nreported values (formatted with tabs and newlines) follow. Note that because state is not a\ncolumn in the DataWindow, state.type returns an exclamation point (!):\nstring ls_request, ls_report\n \nls_request = \"DataWindow.Bands DataWindow.Objects \"&\n      + \"empname_h.Text \" &\n      + \"empname_h.Type emp.Type emp.Coltype \" &\n      + \"state.Type empname.Type empname_h.Visible\"\n \nls_report = dw_1.Describe(ls_request)\nDescribe sets the value of ls_report to the following string:\nheader~tdetail~tsummary~tfooter~theader.1~ttrailer.1~N\n emp~tempname~temp_h~tempname_h~N \"Employee~R~NName\"~N text~N column~Nchar(20)~N!\nThese statements check the datatype of the column named salary before using\nGetItemNumber to obtain the salary value:\nstring ls_data_type\ninteger li_rate\n \n"}
{"page": 611, "text": "Methods for the DataWindow Control\nPage 611\nls_data_type = dw_1.Describe(\"salary.ColType\")\nIF ls_data_type = \"number\" THEN\nli_rate = dw_1.GetItemNumber(5, \"salary\")\nELSE\n    . . . // Some processing\nEND IF\nColumn name or number\nThis statement finds out the column type of the current column, using the column name:\ns = This.Describe(This.GetColumnName()+ \".ColType\")\nFor comparison, this statement finds out the same thing, using the current column's number:\ns = This.Describe(\"#\" + String(This.GetColumn()) &\n      + \".ColType\")\nScrolling and the current row\nThis example, as part of the DataWindow control's ScrollVertical event, makes the first\nvisible row the current row as the user scrolls through the DataWindow:\ns = This.Describe(\"DataWindow.FirstRowOnPage\")\nIF IsNumber(s) THEN This.SetRow(Integer(s))\nEvaluating the display value of a DropDownDataWindow\nThis example uses Describe's Evaluate function to find the display value in a\nDropDownDataWindow column called state_code. You must execute the code after the\nItemChanged event, so that the value the user selected has become the item value in the\nbuffer. This code is the script of a custom user event called getdisplayvalue:\nstring rownumber, displayvalue\n \nrownumber = String(dw_1.GetRow())\ndisplayvalue = dw_1.Describe( &\n      \"Evaluate('LookUpDisplay(state_code) ', \" &\n      + rownumber + \")\")\nThis code, as part of the ItemChanged event's script, posts the getdisplayvalue event:\ndw_1.PostEvent(\"getdisplayvalue\")\nAssigning null values based on the column's datatype\nThe following excerpt from the ItemError event script of a DataWindow control allows the\nuser to blank out a column and move to the next column. For columns with datatypes other\nthan string, the user cannot leave the value empty (which is an empty string and does not\nmatch the datatype) without the return code. Data and row are arguments of the ItemError\nevent:\nstring s\ns = This.Describe(This.GetColumnName() &\n      + \".Coltype\")\n \nCHOOSE CASE s\n      CASE \"number\"\n      IF Trim(data) = \"\" THEN\n         integer null_num\n         SetNull(null_num)\n         This.SetItem(row, &\n"}
{"page": 612, "text": "Methods for the DataWindow Control\nPage 612\n            This.GetColumn(), null_num)\n         RETURN 3\n      END IF\n \nCASE \"date\"\n      IF Trim(data) = \"\" THEN\n      date null_date\n      SetNull(null_date)\n      This.SetItem(row, &\n      This.GetColumn(), null_date)\n      RETURN 3\n      END IF\n \n      . . . // Additional cases for other datatypes\n \nEND CHOOSE\nSee also\nCreate\nModify\n9.24 Drag\nDescription\nStarts or ends the dragging of a control.\nApplies to\nTable 9.48:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\ninteger dwcontrol.Drag ( DragMode dragvalue ) \nTable 9.49:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or child DataWindow.\ndragvalue\nA value indicating the action you want to take on a control:\n\u2022 Begin! -- Put dwcontrol in drag mode.\n\u2022 Cancel! -- Stop dragging dwcontrol but do not cause a DragDrop event.\n\u2022 End! -- Stop dragging dwcontrol and if dwcontrol is over a target object,\ncause a DragDrop event.\nUsage\n"}
{"page": 613, "text": "Methods for the DataWindow Control\nPage 613\nInherited from DragObject. For information, see Section 2.4.149, \u201cDrag\u201d in PowerScript\nReference.\n9.25 Expand\nDescription\nExpands a group in a TreeView DataWindow that has the specified TreeView level and\nincludes the specified row.\nApplies to\nTable 9.50:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger dw_control.Expand(long row, long groupLevel)\nTable 9.51:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\nrow\nThe number of the row that belongs to the\nTreeView level of the group to be expanded\ngroupLevel\nThe TreeView level of the group to be\nexpanded\nReturn value\nReturns 1 if the expand operation succeeds and one of the following negative values if it fails:\n-1 -- DataWindow is null\n-5 -- One or more of the parameters are invalid\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\nA TreeView DataWindow has several TreeView level bands (groups) that can be\nexpanded and collapsed. You can use the Expand method to expand a group in a TreeView\nDataWindow that includes a particular row in a particular TreeView level.\nThe Expand method triggers the Expanding and Expanded events.\nExamples\nThe following example expands the group at TreeView level 2 that includes row 3:\ninteger li_ret\n"}
{"page": 614, "text": "Methods for the DataWindow Control\nPage 614\nli_ret = dw_treeview.Expand(3,2)\nSee also\nCollapse\nExpandAll\nExpandAllChildren\nExpandLevel\nIsExpanded\n9.26 ExpandAll\nDescription\nExpands all groups in a TreeView DataWindow.\nApplies to\nTable 9.52:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger dw_control.ExpandAll( )\nTable 9.53:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\nReturn value\nReturns 1 if the ExpandAll operation succeeds and one of the following negative values if it\nfails:\n-1 -- DataWindow is null\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\nA TreeView DataWindow has several TreeView level bands (groups) that can be expanded\nand collapsed. You can use the ExpandAll method to expand all groups in a TreeView\nDataWindow.\nThe ExpandAll method triggers the Expanding and Expanded events with row and level\narguments of -1.\nExamples\n"}
{"page": 615, "text": "Methods for the DataWindow Control\nPage 615\nThe following example expands all groups:\ninteger li_ret\nli_ret = dw_treeview.ExpandAll()\nSee also\nCollapse\nExpand\nExpandAllChildren\nExpandLevel\nIsExpanded\n9.27 ExpandAllChildren\nDescription\nExpands a group in a TreeView DataWindow that has the specified TreeView level and\nincludes the specified row; also expands all the group's children.\nApplies to\nTable 9.54:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger dw_control.ExpandAllChildren(long row, long groupLevel)\nTable 9.55:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\nrow\nThe number of the row that belongs to the\ngroup to be expanded\ngroupLevel\nThe TreeView level of the group to be\nexpanded\nReturn value\nReturns 1 if the expand operation succeeds and one of the following negative values if it fails:\n-1 -- DataWindow is null\n-5 -- One or more of the parameters are invalid\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\n"}
{"page": 616, "text": "Methods for the DataWindow Control\nPage 616\nA TreeView DataWindow has several TreeView level bands (groups) that can be expanded\nand collapsed. You can use the ExpandAllChildren method to expand a group with a\nspecified TreeView level in a TreeView DataWindow and all of its children.\nThe ExpandAllChildren method triggers the Expanding and Expanded events.\nExamples\nThe following example expands the group in a TreeView DataWindow that has TreeView\nlevel 2 and includes row 3; it also expands all the group's children:\ninteger li_ret\nli_ret = dw_treeview.ExpandAllChildren(3,2)\nSee also\nCollapseAllChildren\nExpand\nExpandAll\nExpandLevel\nIsExpanded\n9.28 ExpandLevel\nDescription\nExpands all the groups in a TreeView DataWindow that have the specified TreeView level.\nApplies to\nTable 9.56:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger dw_control.ExpandLevel (long groupLevel)\nTable 9.57:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\ngroupLevel\nThe TreeView level of the group to be\nexpanded\nReturn value\nReturns 1 if the ExpandLevel operation succeeds and one of the following negative values if\nit fails:\n"}
{"page": 617, "text": "Methods for the DataWindow Control\nPage 617\n-1 -- DataWindow is null\n-5 -- One or more of the parameters are invalid\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\nA TreeView DataWindow has several TreeView level bands (groups) that can be expanded\nand collapsed. You can use the ExpandLevel method to expand all the groups in a TreeView\nDataWindow that have a particular TreeView level.\nThe ExpandLevel method triggers the Expanding and Expanded events with a row argument\nof -1.\nExamples\nThe following example expands all the groups at TreeView level 2:\ninteger li_ret\nli_ret = dw_treeview.ExpandLevel(2)\nSee also\nCollapseLevel\nExpand\nExpandAll\nExpandAllChildren\nIsExpanded\n9.29 ExportJson\nExports data from the DataWindow control, DataStore object, or DataWindowChild object\nto the JSON string. The exported JSON string will be a two-level plain JSON string or\nDataWindow JSON string. For more about the JSON formats, see Section 4.7.1, \u201cSupported\nJSON formats\u201d in Application Techniques.\n9.29.1 Syntax 1\nDescription\nExports data from the DataWindow primary buffer to a plain JSON string or DataWindow\nJSON string.\nApplies to\nTable 9.58:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, and DataStore object, except for those\nwith the Composite, Crosstab, OLE 2.0, or\nRichText presentation styles.\nSyntax\n"}
{"page": 618, "text": "Methods for the DataWindow Control\nPage 618\nPowerBuilder\nstring dwcontrol.ExportJson( {boolean format} )\nTable 9.59:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or\nDataWindowChild.\nformat (optional)\nA boolean specifying the JSON format.\n\u2022 True indicates the DataWindow JSON\n\u2022 False (default) indicates the plain JSON.\nSee Section 4.7.1, \u201cSupported JSON formats\u201d in Application\nTechniques for details about the JSON format.\nReturn value\nString. Returns the JSON string if it succeeds. Returns the empty string (\"\") if an error\noccurs.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\n\u2022 the DataWindow presentation style is unsupported, such as Composite, Crosstab, OLE 2.0,\nor RichText\nUsage\nThe Number data type is handled as Double data type; 15 digits of precision is supported; and\nit will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{0} data type is handled as Double data type; it has no fractional part, and the\ndigits in the fractional part (if any) will be rounded to the integral part; 15 digits of precision\nis supported; and it will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{n} data type is handled as Double data type; it can have n digits in the\nfractional part, and the following digits (if any) will be rounded; 15 digits of precision is\nsupported; and it will be written in scientific notation if it exceeds 15 digits.\nExamples\nThis example exports data from the primary buffer of the DataWindow to a plain JSON\nstring:\nstring ls_PlainJson \nls_PlainJson = dw_1.ExportJson()\nThis example exports data from the primary buffer of the DataWindow to a DataWindow\nJSON string:\n"}
{"page": 619, "text": "Methods for the DataWindow Control\nPage 619\nstring ls_DWJson \nls_DWJson = dw_1.ExportJson(true)\nSee also\nImportJson\nImportJsonByKey\n9.29.2 Syntax 2\nDescription\nExports all rows or only the changed rows from all or specified buffers to a plain JSON string\nor DataWindow JSON string.\nApplies to\nTable 9.60:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, and DataStore object, except for those\nwith the Composite, Crosstab, OLE 2.0, or\nRichText presentation styles.\nSyntax\nPowerBuilder\nstring dwcontrol.ExportJson( {DWBuffer dwbuffer,} boolean changedonly, boolean\n format )\nTable 9.61:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or\nDataWindowChild.\ndwbuffer (optional) A value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to export the data. For a list\nof valid values, see DWBuffer.\nIf not specified, all of the DataWindow buffers will be exported,\nhowever, the data for DataWindowChild will not be exported (even if\nchangedonly is false).\nchangedonly\nA boolean specifying the changing flag.\n\u2022 True -- to export the changed rows only (and all rows of the Delete\nbuffer).\n\u2022 False -- to export all rows. The default is false.\nformat\nA boolean specifying the JSON format.\n\u2022 True indicates the DataWindow JSON\n"}
{"page": 620, "text": "Methods for the DataWindow Control\nPage 620\nArgument\nDescription\n\u2022 False indicates the plain JSON. The default is false.\nSee Section 4.7.1, \u201cSupported JSON formats\u201d in Application\nTechniques for details about the JSON format.\nReturn value\nString. Returns the JSON string if it succeeds. Returns the empty string (\"\") if an error\noccurs.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\n\u2022 the DataWindow presentation style is unsupported, such as Composite, Crosstab, OLE 2.0,\nor RichText\nUsage\nThe Number data type is handled as Double data type; 15 digits of precision is supported; and\nit will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{0} data type is handled as Double data type; it has no fractional part, and the\ndigits in the fractional part (if any) will be rounded to the integral part; 15 digits of precision\nis supported; and it will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{n} data type is handled as Double data type; it can have n digits in the\nfractional part, and the following digits (if any) will be rounded; 15 digits of precision is\nsupported; and it will be written in scientific notation if it exceeds 15 digits.\nExamples\nThis example exports the changed rows from all buffers of the DataWindow to a\nDataWindow JSON string:\nstring ls_DWJson \nls_DWJson = dw_1.ExportJson(true, true)\nThis example exports the changed rows from the primary buffer of the DataWindow to a\nplain JSON string:\nstring ls_PlainJson \nls_PlainJson = dw_1.ExportJson(Primary!, true, false)\nSee also\nImportJson\nImportJsonByKey\n9.29.3 Syntax 3\nDescription\n"}
{"page": 621, "text": "Methods for the DataWindow Control\nPage 621\nExports data from the specified buffer(s) and/or DataWindowChild to a plain JSON string or\nDataWindow JSON string.\nApplies to\nTable 9.62:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, and DataStore object, except for those\nwith the Composite, Crosstab, OLE 2.0, or\nRichText presentation styles.\nSyntax\nPowerBuilder\nstring dwcontrol.ExportJson( boolean primarydata, boolean filterdata, boolean\n deletedata, boolean dwcdata {, boolean format} )\nTable 9.63:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or\nDataWindowChild.\nprimarydata\nA boolean specifying whether to export the data from the primary\nbuffer.\n\u2022 True -- to export\n\u2022 False -- not to export\nfilterdata\nA boolean specifying whether to export the data from the filter buffer.\n\u2022 True -- to export\n\u2022 False -- not to export\ndeletedata\nA boolean specifying whether to export the data from the delete buffer.\n\u2022 True -- to export\n\u2022 False -- not to export\ndwcdata\nA boolean specifying whether to export the DataWindowChild data.\n\u2022 True -- to export. If it is to export the DataWindowChild data, data\nfrom all buffers will be exported to a plain JSON, regardless of the\nvalue of the other arguments.\n\u2022 False -- not to export\nformat (optional)\nA boolean specifying the JSON format.\n\u2022 True indicates the DataWindow JSON\n"}
{"page": 622, "text": "Methods for the DataWindow Control\nPage 622\nArgument\nDescription\n\u2022 False indicates the plain JSON. The default is false.\nSee Section 4.7.1, \u201cSupported JSON formats\u201d in Application\nTechniques for details about the JSON format.\nReturn value\nString. Returns the JSON string if it succeeds. Returns the empty string (\"\") if an error\noccurs.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\n\u2022 the DataWindow presentation style is unsupported, such as Composite, Crosstab, OLE 2.0,\nor RichText\nUsage\nThe Number data type is handled as Double data type; 15 digits of precision is supported; and\nit will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{0} data type is handled as Double data type; it has no fractional part, and the\ndigits in the fractional part (if any) will be rounded to the integral part; 15 digits of precision\nis supported; and it will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{n} data type is handled as Double data type; it can have n digits in the\nfractional part, and the following digits (if any) will be rounded; 15 digits of precision is\nsupported; and it will be written in scientific notation if it exceeds 15 digits.\nExamples\nThis example exports the data from the primary buffer and the filter buffer of the\nDataWindow to a plain JSON string:\nstring ls_PlainJson \nls_PlainJson = dw_1.ExportJson(true, true, false, false)\nThis example exports the data from every buffer of the DataWindow and the\nDataWindowChild to a DataWindow JSON string:\nstring ls_DWJson\nls_DWJson = dw_1.ExportJson(true, true, true, true, true)\nSee also\nImportJson\nImportJsonByKey\n9.29.4 Syntax 4\nDescription\n"}
{"page": 623, "text": "Methods for the DataWindow Control\nPage 623\nExports all data or the specified rows and/or columns from the specified buffer to a plain\nJSON string or DataWindow JSON string.\nApplies to\nTable 9.64:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, and DataStore object, except for those\nwith the Composite, Crosstab, OLE 2.0, or\nRichText presentation styles.\nSyntax\nPowerBuilder\nstring dwcontrol.ExportJson( DWBuffer dwbuffer {, long startrow {, long endrow {,\n long startcolumn {, long endcolumn } } } } {, boolean format } )\nTable 9.65:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or\nDataWindowChild.\ndwbuffer\nA value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to export the data. For a list\nof valid values, see DWBuffer.\nIf not specified, all of the DataWindow buffers will be exported,\nhowever, the data for DataWindowChild will not be exported (even if\nchangedonly is false).\nstartrow (optional)\nThe number of the first detail row in the buffer that you want to export.\nThe default is 1. If it is 0 or negative, 1 is used.\nendrow (optional)\nThe number of the last detail row in the buffer that you want to export.\nThe default is the rest of the rows. If it is 0 or negative, it indicates the\nrest of rows.\nstartcolumn\n(optional)\nThe number of the first column in the buffer that you want to export.\nThe default is 1. If it is 0 or negative, 1 is used.\nendcolumn\n(optional)\nThe number of the last column in the buffer that you want to export.\nThe default is the rest of the columns. If it is 0 or negative, it indicates\nthe rest of columns.\nformat (optional)\nA boolean specifying the JSON format.\n\u2022 True indicates the DataWindow JSON\n\u2022 False indicates the plain JSON. The default is false.\nSee Section 4.7.1, \u201cSupported JSON formats\u201d in Application\nTechniques for details about the JSON format.\n"}
{"page": 624, "text": "Methods for the DataWindow Control\nPage 624\nReturn value\nString. Returns the JSON string if it succeeds. Returns the empty string (\"\") if an error\noccurs.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\n\u2022 the DataWindow presentation style is unsupported, such as Composite, Crosstab, OLE 2.0,\nor RichText\nUsage\nThe Number data type is handled as Double data type; 15 digits of precision is supported; and\nit will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{0} data type is handled as Double data type; it has no fractional part, and the\ndigits in the fractional part (if any) will be rounded to the integral part; 15 digits of precision\nis supported; and it will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{n} data type is handled as Double data type; it can have n digits in the\nfractional part, and the following digits (if any) will be rounded; 15 digits of precision is\nsupported; and it will be written in scientific notation if it exceeds 15 digits.\nExamples\nThis example exports data from the delete buffer of the DataWindow to a plain JSON string:\nstring ls_PlainJson \nls_PlainJson = dw_1.ExportJson(Delete!)\nThis example exports data from the filter buffer of the DataWindow to a DataWindow JSON\nstring:\nstring ls_DWJson \nls_DWJson = dw_1.ExportJson(Filter!, true)\nThis example exports data in rows 2 through the end from the primary buffer of the\nDataWindow to a plain JSON string:\nstring ls_PlainJson \nls_PlainJson = dw_1.ExportJson(Primary!, 2)\nThis example exports data in rows 2 through the end from the primary buffer of the\nDataWindow to a DataWindow JSON string:\nstring ls_DWJson\nls_DWJson = dw_1.ExportJson(Primary!, 2, true)\nThis example exports data in rows 1 through 10 from the primary buffer of the DataWindow\nto a plain JSON string:\nstring ls_PlainJson \nls_PlainJson = dw_1.ExportJson(Primary!, 1, 10)\nThis example exports data in rows 1 through 10 from the primary buffer of the DataWindow\nto a DataWindow JSON string:\n"}
{"page": 625, "text": "Methods for the DataWindow Control\nPage 625\nstring ls_DWJson \nls_DWJson = dw_1.ExportJson(Primary!, 1, 10, true)\nThis example exports data in rows 1 through 10 and columns 2 through the end from the\nprimary buffer of the DataWindow to a plain JSON string:\nstring ls_PlainJson \nls_PlainJson = dw_1.ExportJson(Primary!, 1, 10, 2)\nThis example exports data in rows 1 through 10 and columns 2 through the end from the\nprimary buffer of the DataWindow to a DataWindow JSON string:\nstring ls_DWJson\nls_DWJson = dw_1.ExportJson(Primary!, 1, 10, 2, true)\nThis example exports data in rows 1 through 10 and columns 2 through 5 from the primary\nbuffer of the DataWindow to a plain JSON string:\nstring ls_PlainJson \nls_PlainJson = dw_1.ExportJson(Primary!, 1, 10, 2, 5)\nThis example exports data in rows 1 through 10 and columns 2 through 5 from the primary\nbuffer of the DataWindow to a DataWindow JSON string:\nstring ls_DWJson\nls_DWJson = dw_1.ExportJson(Primary!, 1, 10, 2, 5, true)\nSee also\nImportJson\nImportJsonByKey\n9.30 ExportRowAsJson\nDescription\nExports a data row from the specified buffer of a DataWindow control, DataStore object,\nor DataWindowChild object to the JSON string. The exported JSON string will be a one-\nlevel plain JSON string. For details, see Plain JSON: one-level structure in Application\nTechniques.\nApplies to\nTable 9.66:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, and DataStore object, except for those\nwith the Composite, Crosstab, OLE 2.0, or\nRichText presentation styles.\nSyntax\nPowerBuilder\nstring dwcontrol.ExportRowAsJson (long row {, DWBuffer dwbuffer})\n"}
{"page": 626, "text": "Methods for the DataWindow Control\nPage 626\nTable 9.67:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or\nDataWindowChild.\nrow\nA long value identifying the row of data to be exported. 1 indicates the\nfirst row. The following number is invalid: 0, a negative value, or a\nvalue greater than the row count.\ndwbuffer (optional) A value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to export the data. For a list\nof valid values, see DWBuffer. If not specified, exports the data from\nthe Primary! buffer. If specified, exports the data from the specified\nbuffer.\nReturn value\nString. Returns the JSON string if the data row was exported successfully. Returns the empty\nstring (\"\") if an error occurs or illegal row number (0, a negative value, or a value greater than\nthe DataWindow row count) is specified.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\n\u2022 the DataWindow presentation style is unsupported, such as Composite, Crosstab, OLE 2.0,\nor RichText\nUsage\nThe Number data type is handled as Double data type; 15 digits of precision is supported; and\nit will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{0} data type is handled as Double data type; it has no fractional part, and the\ndigits in the fractional part (if any) will be rounded to the integral part; 15 digits of precision\nis supported; and it will be written in scientific notation if it exceeds 15 digits.\nThe Decimal{n} data type is handled as Double data type; it can have n digits in the\nfractional part, and the following digits (if any) will be rounded; 15 digits of precision is\nsupported; and it will be written in scientific notation if it exceeds 15 digits.\nExample\nThe following example exports the last row of data from the delete buffer.\nString ls_ExportRowAsJson\nIf dw_Data.GetRow() > 0 Then\n ls_ExportRowAsJson = dw_Data.ExportRowAsJson(dw_Data.GetRow())\n \n // Exports the last row in delete buffer\n dw_Data.DeleteRow(dw_Data.GetRow())\n ls_ExportRowAsJson = dw_Data.ExportRowAsJson ( dw_Data.DeletedCount( ), Delete! )\nEnd If\nSee also\n"}
{"page": 627, "text": "Methods for the DataWindow Control\nPage 627\nImportRowFromJson\n9.31 Filter\nDescription\nDisplays rows in a DataWindow that pass the current filter criteria. Rows that do not meet the\nfilter criteria are moved to the filter buffer.\nApplies to\nTable 9.68:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.Filter ( ) \nTable 9.69:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. The return value is usually not used.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nFilter uses the current filter criteria for the DataWindow. To change the filter criteria, use\nthe SetFilter method. The SetFilter method is equivalent to using the Filter command on\nthe Rows menu of the DataWindow painter. If you do not call SetFilter to assign or change\ncriteria before calling the Filter method, the DataWindow will default to use the criteria in the\nobject definition.\nWhen the Retrieve method retrieves data for the DataWindow, PowerBuilder applies the\nfilter that was defined for the DataWindow object, if any. You only need to call Filter after\nyou change the filter criteria with SetFilter or if the data has changed because of processing\nor user input.\nThe Filter function filters the rows in the datawindow. If the Retrieve As Needed option is\nset, the Filter method will retrieve all rows before applying the filter.\nFilter has no effect on the DataWindows in a composite report.\nFiltering and groups\nWhen you filter a DataWindow with groups, you might need to call GroupCalc after\nyou call Filter.\n"}
{"page": 628, "text": "Methods for the DataWindow Control\nPage 628\nFor information on removing the filter or letting the user specify a filter expression,\nsee SetFilter.\nExamples\nThis statement displays rows in dw_Employee based on its current filter criteria:\ndw_Employee.SetRedraw(false)\ndw_Employee.Filter()\ndw_Employee.SetRedraw(true)\nSee also\nFilteredCount\nRowCount\nSetFilter\n9.32 FilteredCount\nDescription\nReports the number of rows that are not displayed in the DataWindow because of the current\nfilter criteria.\nApplies to\nTable 9.70:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.FilteredCount ( ) \nTable 9.71:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns the number of rows in dwcontrol that are not displayed because they do not meet the\ncurrent filter criteria. Returns 0 if all rows are displayed and -1 if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nA DataWindow object can have a filter as part of its definition. After the DataWindow\nretrieves data, the filter is applied and rows that do not meet the filter criteria are moved to\nthe filter buffer. You can change the filter criteria by calling the SetFilter method, and you\ncan apply the new criteria with the Filter method.\n"}
{"page": 629, "text": "Methods for the DataWindow Control\nPage 629\nExamples\nThese statements retrieve data in dw_Employee, display employees with area code 617,\nand then test to see if any other data was retrieved. If the filter criteria specifying the area\ncode was part of the DataWindow definition, it would be applied automatically after calling\nRetrieve and you would not need to call SetFilter and Filter:\ndw_Employee.Retrieve()\ndw_Employee.SetFilter(\"AreaCode=617\")\ndw_Employee.SetRedraw(false)\ndw_Employee.Filter()\ndw_Employee.SetRedraw(true)\n \n// Did any rows get filtered out\nIF dw_Employee.FilteredCount() > 0 THEN\n      ... // Process rows not in area code 617\nEND IF\nThese statements retrieve data in dw_Employee and display the number of employees whose\nnames do not begin with B:\ndw_Employee.Retrieve()\n \ndw_Employee.SetFilter(\"Left(emp_lname, 1)=~\"B~\"\")\ndw_Employee.SetRedraw(false)\ndw_Employee.Filter()\ndw_Employee.SetRedraw(true)\n \nIF dw_Employee.FilteredCount() > 0 THEN\n      MessageBox(\"Employee Count\", &\n         String(dw_Employee.FilteredCount()) + &\n         \"Employee names do not begin with B.\")\nEND IF\nSee also\nFilter\nModifiedCount\nRowCount\nSetFilter\n9.33 Find\nDescription\nFinds the next row in a DataWindow or DataStore in which data meets a specified condition.\nApplies to\nTable 9.72:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\n"}
{"page": 630, "text": "Methods for the DataWindow Control\nPage 630\nlong dwcontrol.Find ( string expression, long start, long end{, DWBuffer buffer} ) \nTable 9.73:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control, DataStore, or child DataWindow in\nwhich you want to search the detail band.\nexpression\nA string whose value is a boolean expression that you want to use as the\nsearch criterion. The expression includes column names.\nstart\nA value identifying the row location at which to begin the search. Start can\nbe greater than the number of rows.\nend\nA value identifying the row location at which to end the search. End can be\ngreater than the number of rows. To search backward, make end less than\nstart.\nbuffer\n(optional)\nThe name of the buffer from which you want to find data.\nValues are:\n\u2022 Primary -- (Default) The data in the primary buffer (the data that has not\nbeen deleted or filtered out).\n\u2022 Delete -- The data in the delete buffer (data deleted from the DataWindow\ncontrol).\n\u2022 Filter -- The data in the filter buffer (data that was filtered out).\nReturn value\nReturns the number of the first row that meets the search criteria within the search range.\nReturns 0 if no rows are found and one of these negative numbers if an error occurs:\n-1 -- General error\n-5 -- Bad argument\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nPowerBuilder environment\nFor use with a RichTextEdit control or presentation style, see Section 2.4.186, \u201cFind\u201d\nin PowerScript Reference.\nThe search is case-sensitive. When you compare text to a value in a column, the case\nmust match.\nWhen the Find expression includes quotes\nIf the text you want to find includes quotes, you must treat the nested quote as doubly nested,\nbecause the DataWindow parses the string twice before the Find method uses it. Therefore,\nyou cannot simply alternate double and single quotes, as you can in most strings.\nFor example, to find the name O'Connor, the Find expression can be:\n"}
{"page": 631, "text": "Methods for the DataWindow Control\nPage 631\n\"O~~~'Connor\" (3 tildes and single quote) or\n\"O~~~~~\"Connor\" (5 tildes and double quote)\nbut not:\n\"O'Connor\" or \"O~\"OConnor\"\nWhen the last row satisfies the search criteria\nIf you use Find in a loop that searches through all rows, you may end up with an endless loop\nif the last row satisfies the search criteria. When the start value becomes greater than end, the\nsearch reverses direction and Find would always succeed, resulting in an endless loop.\nTo solve this problem, you could make the end value 1 greater than the number of rows (see\nthe examples). Another approach, shown below, would be to test within the loop whether the\ncurrent row is greater than the row count and, if so, exit. This PowerBuilder code illustrates\nhow:\nlong ll_find = 1, ll_end\nll_end = dw_main.RowCount()\nll_find = dw_main.Find(searchstr, ll_find, ll_end)\nDO WHILE ll_find > 0\n      ... // Collect found row\n      ll_find++\n      // Prevent endless loop\n      IF ll_find > ll_end THEN EXIT\n      ll_find = dw_main.Find(searchstr, ll_find, ll_end)\nLOOP\nExamples\nThis statement searches for the first row in dw_status in which the value of the emp_salary\ncolumn is greater than 100,000. The search begins in row 3 and continues until it reaches the\nlast row in dw_status:\nlong ll_found\nll_found = dw_status.Find(\"emp_salary > 100000\", &\n      3, dw_status.RowCount())\nTo test values in more than one column, use boolean operators to join conditional\nexpressions. The following statement searches for the employee named Smith whose salary\nexceeds 100,000:\nlong ll_found\nll_found = dw_status.Find( &\n      \"emp_lname = 'Smith' and emp_salary > 100000\", &\n      1, dw_status.RowCount())\nThese statements search for the first row in dw_emp that matches the value that a user\nentered in the SingleLineEdit called Name (note the single quotes embedded in the search\nexpression around the name):\nstring ls_lname_emp\nlong ll_nbr, ll_foundrow\n \nll_nbr = dw_emp.RowCount()\n \n// Remove leading and trailing blanks.\nls_lname_emp = Trim(sle_Name.Text)\n \n"}
{"page": 632, "text": "Methods for the DataWindow Control\nPage 632\nll_foundrow = dw_emp.Find( &\n      \"emp_lname = '\" + ls_lname_emp + \"'\", 1, ll_nbr)\nThis script excerpt finds the first row that has a null value in emp_id. If no null is found, the\nscript updates the DataWindow object. If a null is found, it displays a message:\nIF dw_status.AcceptText() = 1 THEN\n      IF dw_status.Find(\"IsNull(emp_id)\", &\n            1, dw_status.RowCount()) > 0 THEN\n         MessageBox(\"Caution\", \"Cannot Update\")\n      ELSE\n         dw_status.Update()\n      END IF\nEND IF\nThe following script attached to a Find Next command button searches for the next row\nthat meets the specified criteria and scrolls to that row. Each time the button is clicked, the\nnumber of the found row is stored in the instance variable il_found. The next time the user\nclicks Find Next, the search continues from the following row. When the search reaches the\nend, a message tells the user that no row was found. The next search begins again at the first\nrow.\nNote that although the search criteria are hard-coded here, a more realistic scenario would\ninclude a Find button that prompts the user for search criteria. You could store the criteria in\nan instance variable, which Find Next could use:\nlong ll_row\n \n// Get the row num. for the beginning of the search\n// from the instance variable, il_found\nll_row = il_found\n \n// Search using predefined criteria\nll_row = dw_main.Find( &\n      \"item_id = 3 or item_desc = 'Nails'\", &\n      ll_row, dw_main.RowCount())\nIF ll_row > 0 THEN\n      // Row found, scroll to it and make it current\n      dw_main.ScrollToRow(ll_row)\nELSE\n      // No row was found\n      MessageBox(\"Not Found\", \"No row found.\")\nEND IF\n \n// Save the number of the next row for the start\n// of the next search. If no row was found,\n// ll_row is 0, making il_found 1, so that\n// the next search begins again at the beginning\nil_found = ll_row + 1\nThis example searches all the rows in dw_main and builds a list of the names that include a\nlowercase a. Note that the end value of the search is one greater than the row count, avoiding\nan infinite loop if the name in the last row satisfies the search:\nlong ll_find, ll_end\nstring ll_list\n \n// The end value is one greater than the row count\nll_end = dw_main.RowCount() + 1\nll_find = 1\n \n"}
{"page": 633, "text": "Methods for the DataWindow Control\nPage 633\nll_find = dw_main.Find(\"Pos(last_name,'a') > 0\", &\n      ll_find, ll_end)\nDO WHILE ll_find > 0\n      //collect names\n      ll_list = ll_list + '~r' &\n         + dw_main.GetItemString(ll_find,'last_name')\n \n      // Search again\n      ll_find++\n      ll_find = dw_main.Find(\"Pos(last_name,'a') & \n         > 0\", ll_find, ll_end )\nLOOP\nSee also\nFindGroupChange\nFindRequired\n9.34 FindGroupChange\nDescription\nSearches for the next break for the specified group. A group break occurs when the value in\nthe column for the group changes. FindGroupChange reports the row that begins the next\nsection.\nApplies to\nTable 9.74:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.FindGroupChange ( long row, integer level ) \nTable 9.75:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or the DataStore.\nrow\nA value identifying the row at which you want to begin searching for the\ngroup break.\nlevel\nThe number of the group for which you are searching. Groups are numbered\nin the order in which you defined them.\nReturn value\nReturns the number of the row whose group column has a new value, meaning that it begins a\nnew group. Returns 0 if the value in the group column did not change and a negative number\nif an error occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\n"}
{"page": 634, "text": "Methods for the DataWindow Control\nPage 634\nThe return value observes these rules based on the value of row. If the starting row is:\n\u2022 The first row in a group, then FindGroupChange returns the starting row number\n\u2022 A row within a group, other than the last group, then FindGroupChange returns the row\nnumber of the first row of the next group\n\u2022 A row in the last group, other than the first row of the last group, then FindGroupChange\nreturns 0\nUsage\nIf the starting row begins a new section at the specified level, then that row is the one\nreturned. To continue searching for subsequent breaks, increment the starting row so that the\nsearch resumes with the second row in the group.\nExamples\nThis statement searches for the first break in group 2 in dw_regions. The search begins in row\n5:\ndw_regions.FindGroupChange(5, 2)\nThis code finds the number of the row at which a break occurs in group 1. It then checks\nwhether the department number is 121. The search begins at row 0:\nboolean lb_found\nlong ll_breakrow\n \nlb_found = false\nll_breakrow = 0\n \nDO WHILE NOT (lb_found)\n   ll_breakrow = dw_1.FindGroupChange(ll_breakrow, 1)\n \n   // If no breaks are found, exit.\n   IF ll_breakrow <= 0 THEN EXIT\n \n   // Have we found the section for Dept 121?\n   IF dw_1.GetItemNumber(ll_breakrow, &\n      \"dept_id\") = 121 THEN\n         lb_found = true\n   END IF\n \n   // Increment starting row to find next break\n   ll_breakrow = ll_breakrow + 1\nLOOP\n \nIF lb_found = false THEN\n   MessageBox( &\n      \"Not Found\", &\n      \"The Department was not found.\")\nELSE\n      ... // Processing for Dept 121\nEND IF\nSee also\nFind\nFindRequired\n"}
{"page": 635, "text": "Methods for the DataWindow Control\nPage 635\n9.35 FindNext\nDescription\nFinds the next occurrence of text in a RichTextEdit DataWindow control and highlights it,\nusing criteria set up in a previous call of the Find method.\nApplies to\nTable 9.76:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.FindNext ( ) \nTable 9.77:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control containing a DataWindow with the\nRichTextEdit presentation style\nReturn value\nReturns the number of characters found. FindNext returns 0 if no matching text is found and\n-1 if the DataWindow's presentation style is not RichTextEdit or an error occurs.\nUsage\nPowerBuilder environment\nFor use with PowerBuilder RichTextEdit controls, see Section 2.4.192, \u201cFindNext\u201d in\nPowerScript Reference.\nExamples\nThis example searches the DataWindow control dw_1 for text the user specifies in the\nSingleLineEdit sle_search. The search proceeds forward from the cursor position, is case-\ninsensitive, and is not limited to whole words:\ninteger li_charsfound\nli_charsfound = dw_1.Find(sle_search.Text, &\n      true, true, false, true)\nA second button labeled Find Next would have a script like this:\ndw_1.FindNext()\nSee also\nFind\n9.36 FindRequired\nDescription\n"}
{"page": 636, "text": "Methods for the DataWindow Control\nPage 636\nReports the next row and column that is required and contains a null value. The method\narguments that specify where to start searching also store the results of the search. You can\nspeed up the search by specifying that FindRequired check only inserted and modified rows.\nApplies to\nTable 9.78:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.FindRequired ( DWBuffer dwbuffer, long row, integer colnbr,\n string colname, boolean updateonly ) \nTable 9.79:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control or DataStore in which you want to\nfind required columns that have null values.\ndwbuffer\nA value indicating the DataWindow buffer you want to search for required\ncolumns. Valid buffers are:\n\u2022 Primary!\n\u2022 Filter!\nrow\nA value identifying the first row to be searched. Row also stores the number of\nthe found row. FindRequired increments the row number automatically after\nit validates each row's columns. When it finds a row with a required column\nthat contains a null value, the row number is stored in row. After FindRequired\nvalidates the last column in the last row, it sets row to 0.\nPowerBuilder\nThe row argument must be a variable so it can return a value for the found\nrow.\ncolnbr\nA value identifying the first column to be searched. Colnbr also stores the\nnumber of the found column. After validating the last column, FindRequired\nsets colnbr to 1 and increments row. When it finds a required column that\ncontains a null value, the column number is stored in colnbr.\nPowerBuilder\nThe colnbr argument must be a variable so it can return a value for the found\ncolumn.\ncolname\nA string in which you want to store the name of the required column that\ncontains a null value (the name of colnbr).\nPowerBuilder\nThe colname argument must be a variable so it can hold a value for the name\nof the found column.\n"}
{"page": 637, "text": "Methods for the DataWindow Control\nPage 637\nArgument\nDescription\nupdateonly\nA value indicating whether you want to validate all rows and columns or only\nrows that have been inserted or modified:\n\u2022 true -- Validate only those rows that have changed. Setting updateonly to\ntrue enhances performance in large DataWindows.\n\u2022 false -- Validate all rows and columns.\nReturn value\nReturns 1 if FindRequired successfully checked the rows and -1 if an error occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nFor FindRequired to report an empty required column, the column's value must actually be\nnull, not an empty string.\nTo make a column required, set the Required property to true in a script or check the\nRequired check box for the column in the DataWindow painter.\nNew rows have null values in their columns, unless the columns have default values. If\nupdateonly is false, FindRequired reports empty required columns in new rows. If updateonly\nis true, FindRequired does not check new rows because new, empty rows are not updated in\nthe database.\nWhen the user modifies a row and leaves a column empty, the new value is an empty string,\nunless the column's edit style has the Empty String Is null check box checked. FindRequired\ndoes not report empty required columns in modified rows unless this property is set.\nExamples\nThe following code makes a list of all the row numbers and column names in dw_1 in which\nrequired columns are missing values. The list is displayed in the MultiLineEdit mle_required:\nlong ll_row = 1\ninteger colnbr = 0\nstring colname\n \nmle_required.Text = \"\"\nDO WHILE ll_row <> 0\n      colnbr++ // Continue searching at next column\n      // If there's an error, exit\n      IF dw_1.FindRequired(Primary!, &\n         ll_row, colnbr, &\n         colname, false) < 0 THEN EXIT\n \n      // If a row was found, save the row and column\n      IF ll_row <> 0 THEN\n         mle_required.Text = mle_required.Text &\n            + String(ll_row) + \"~t\" &\n            + colname + \"~r~n\"\nEND IF\n \n      // When FindRequired returns 0 (meaning\n      // no more rows found), drop out of loop\nLOOP\n"}
{"page": 638, "text": "Methods for the DataWindow Control\nPage 638\nThis example is a function that ensures that no required column in a DataWindow control is\nempty (contains null). It takes one argument -- the DataWindow control, which is declared in\nthe function declaration like this:\nDataWindow adw_control\nThe function returns -2 if the user's last entry cannot be accepted or if FindRequired returns\nan error. It returns -1 if an empty required column is found. It returns 1 if all required\ncolumns have data:\ninteger li_colnbr = 1\nlong ll_row = 1\nstring ls_colname, ls_textname\n \n// Make sure the last entry is accepted\nIF adw_control.AcceptText() = -1 THEN\n      adw_control.SetFocus()\n      RETURN -2\nEND IF\n \n// Find the first empty row and column, if any\nIF adw_control.FindRequired(Primary!, ll_row, &\n         li_colnbr, ls_colname, true) < 1 THEN\n      //If search fails due to error, then return\n      RETURN -2\nEND IF\n \n// Was any row found?\nIF ll_row <> 0 THEN\n      // Get the text of that column's label.\n      ls_textname = ls_colname + \"_t.Text\"\n      ls_colname = adw_control.Describe(ls_textname)\n \n      // Tell the user which column to fill in\n      MessageBox(\"Required Value Missing\", &\n         \"Please enter a value for '\" &\n         + ls_colname + \"', row \" &\n         + String(ll_row) + \".\", &\n         StopSign! )\n \n      // Make the problem column current.\n      adw_control.SetColumn(li_colnbr)\n      adw_control.ScrollToRow(ll_row)\n      adw_control.SetFocus()\n      RETURN -1\nEND IF\n \n// Return success code if all required\n// rows and columns have data\nRETURN 1\nSee also\nFind\nFindGroupChange\nFindRequiredColumn\nFindRequiredColumnName\nFindRequiredRow\nScrollToRow\n"}
{"page": 639, "text": "Methods for the DataWindow Control\nPage 639\nSetColumn\nSetTransObject\n9.37 FindRequiredColumn (obsolete)\nDescription\nReturns the column number that the FindRequired method found. The column is\nbeing reported because it is a required column but contains a null value. You must call\nFindRequired first to search for the required but missing information.\nObsolete method\nFindRequiredColumn is obsolete and should not be used, because the DataWindow\nWeb Control for ActiveX technology is obsolete.\nApplies to\nTable 9.80:\nDataWindow type\nMethod applies to\nWeb ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.FindRequiredColumn ( ) \nTable 9.81:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control for\nwhich you just called FindRequired\nReturn value\nReturns the number of a column in the DataWindow.\nUsage\nFindRequiredColumn, FindRequiredColumnName, and FindRequiredRow can all be\ncalled after FindRequired to identify rows and columns with missing data. For details, see\nFindRequired.\nSee also\nFindRequired\nFindRequiredColumnName\nFindRequiredRow\n9.38 FindRequiredColumnName (obsolete)\nDescription\n"}
{"page": 640, "text": "Methods for the DataWindow Control\nPage 640\nReturns the column name that the FindRequired method found. The column is being reported\nbecause it is a required column but contains a null value. You must call FindRequired first to\nsearch for the required but missing information.\nObsolete method\nFindRequiredColumnName is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nTable 9.82:\nDataWindow type\nMethod applies to\nWeb ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nstring dwcontrol.FindRequiredColumnName ( ) \nTable 9.83:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control for\nwhich you just called FindRequired\nReturn value\nReturns the name of a column in the DataWindow.\nUsage\nFindRequiredColumn, FindRequiredColumnName, and FindRequiredRow can all be\ncalled after FindRequired to identify rows and columns with missing data. For details, see\nFindRequired.\nSee also\nFindRequired\nFindRequiredColumn\nFindRequiredRow\n9.39 FindRequiredRow (obsolete)\nDescription\nReturns the row number that the FindRequired method found. The row is being reported\nbecause it contains a required column that has a null value. You must call FindRequired first\nto search for the required but missing information.\nObsolete method\nFindRequiredRow is obsolete and should not be used, because the DataWindow Web\nControl for ActiveX technology is obsolete.\n"}
{"page": 641, "text": "Methods for the DataWindow Control\nPage 641\nApplies to\nTable 9.84:\nDataWindow type\nMethod applies to\nWeb ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.FindRequiredRow ( ) \nTable 9.85:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control for\nwhich you just called FindRequired\nReturn value\nReturns the number of a row in the DataWindow.\nUsage\nFindRequiredColumn, FindRequiredColumnName, and FindRequiredRow can all be\ncalled after FindRequired to identify rows and columns with missing data. For details, see\nFindRequired.\nSee also\nFindRequired\nFindRequiredColumn\nFindRequiredColumnName\n9.40 Generate (obsolete)\nDescription\nCreates HTML syntax for the Web DataWindow.\nObsolete method\nGenerate is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.86:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcontrol.Generate ( )\n"}
{"page": 642, "text": "Methods for the DataWindow Control\nPage 642\nReturn value\nReturns an HTML rendering of the current page of the DataWindow if the method succeeds\nand an empty string if an error occurs.\nUsage\nCall this method to create HTML syntax from the DataWindow defined for the server\ncomponent. The Generate method is usually called by a server-side script running on a page\nserver. The page server creates the complete Web page by combining the return value with\nother appropriate HTML elements.\nThe contents of the page of data can be affected by user actions in the client control. The\npage server calls the SetAction method before calling Generate to apply the user's actions.\nThe Generate method causes DataWindow columns to be rendered as HTML INPUT\nelements with the following exceptions:\n\u2022 A column to which you assign a hyperlink. The hyperlink is valid only if the column tab\norder is set to 0, its Protect property is set to 1, or if it has an Edit.DisplayOnly property\nthat is set to \"yes\". A column with a valid hyperlink is rendered in an <A HREF> tag.\n\u2022 A column for which the ValueIsHTML property is set to true. The column value can be\nplain text or some combination of HTML tags and plain text. The column value is included\nunchanged within the generated HTML page.\n\u2022 A column with a DropDownListBox or DropDownDW edit style. Columns with these edit\nstyles are always be rendered in <SELECT> tags.\n\u2022 Computed fields that are not dynamically calculated on the client. Computed fields are\nrendered as HTML INPUT elements only if the ClientComputedFields property for the\nDataWindow is set to \"yes\". Otherwise they are rendered as text.\nIf the column has a validation rule, it is translated to JavaScript if possible. Parts of the\nDataWindow object included in the generated HTML are:\n\u2022 Columns, computed fields, text controls\n\u2022 Pictures (picture format should be GIF or JPEG)\n\u2022 Buttons\n\u2022 Page headers and footers\n\u2022 Group headers and trailers\n\u2022 Summary bands\n\u2022 Display formats, validation rules, edit styles (EditMasks are converted to display formats)\nDataWindow features that will not be rendered into HTML include:\n\u2022 Graph, OLE, and RichText presentation styles and controls\n\u2022 Drawing controls (lines, circles, rectangles)\n"}
{"page": 643, "text": "Methods for the DataWindow Control\nPage 643\n\u2022 Client-side expressions that include aggregate functions. Such expressions will be\ncomputed on the server\n\u2022 Resizable and movable controls\n\u2022 Sliding of controls to fill empty space\n\u2022 Autosizing of height or width\nExamples\nThe following example generates a DataWindow object in HTML:\ndwGen.Generate();\nSee also\nGenerateXHTML\nGenerateXMLWeb\nSetAction\nSetBrowser\nSetColumnLink\nSetDWObject\nSetHTMLObjectName\nSetPageSize\nSetSelfLink\nSetServerSideState\nSetTrans\nSetWeight\n9.41 GenerateHTMLForm (obsolete)\nDescription\nCreates an HTML Form element containing columns for one or more rows in a DataWindow\ncontrol or DataStore. This method also returns an HTML Style element containing style sheet\ninformation.\nObsolete method\nGenerateHTMLForm is obsolete and should not be used, because the Web\nDataWindow technology is obsolete.\nApplies to\nTable 9.87:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\n"}
{"page": 644, "text": "Methods for the DataWindow Control\nPage 644\nSyntax\nPowerBuilder\ninteger dwcontrol.GenerateHTMLForm ( string syntax, string style, string action { ,\n long startrow, long endrow, integer startcolumn, integer endcolumn {, DWBuffer\n buffer } } )\nReturn value\nReturns 1 if the method succeeds and -1 if an error occurs.\nIf any argument is null, the method returns null.\n9.42 GenerateResultSet\nDescription\nGenerates a result set from data in a DataStore or DataWindow control.\nIn PowerBuilder, when the result set is generated in a component on a transaction server, the\nformat of the result set is ADO Recordset on MTS.\nApplies to\nTable 9.88:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataStore object\nSyntax\nPowerBuilder\ninteger dsobject.GenerateResultSet (REF ResultSet rsdest { ,dwBuffer dwbuffer } )\nTable 9.89:\nArgument\nDescription\ndsobject\nThe name of the DataStore object that contains the data to be returned in\nthe result set.\nrsdest\nThe ResultSet object into which the data in the DataStore is written. This\nvalue is passed by reference.\ndwbuffer\n(optional)\nA value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer containing the data for the result set. The default is\nthe primary buffer.\nFor a list of valid values, see DWBuffer.\nReturn value\nReturns 1 if it succeeds and -1 if it fails. If any argument is null, it returns null.\nUsage\nHow to use it\nResult sets are intended for exchanging data between a DataStore and some data-aware\napplication that does not use DataWindow technology. With result sets, the receiving end\ndoes not support updating of the data.\n"}
{"page": 645, "text": "Methods for the DataWindow Control\nPage 645\nThe GenerateResultSet method is typically used in a PowerBuilder custom class user object\nthat has been packaged as a component on an MTS server. A function in the user object\ngenerates a result set from information that has been retrieved into a DataStore. The function\nthen returns the result set or passes it to another method.\nFor example, a function for PowerBuilder custom class user object running in a transaction\nserver can retrieve data into a DataStore object, create a result set object, and return the result\nset. A client application calls the function to get the data. The client application must be able\nto handle result sets, but it does not need to have support for DataWindow technology.\nLikewise, a client application can generate a result set from a DataStore and pass the result\nset to the server.\nThe CreateFrom method can convert a result set back to a DataStore.\nResult set format\nThe result set is returned to a client in a format that is standard for the server. In MTS,\nreturning a result set created by GenerateResultSet causes an ADO Recordset to be marshaled\nto the client.\nThe GenerateResultSet method can also be called in a client application. Since the format of\nthe result set depends on the server on which it is used, the format is fixed when that result set\nis passed to a server. For MTS, the format is an ADO Recordset.\nDestroying or modifying the DataStore\nThe generated ResultSet object maintains a reference to the DataStore from which\nit was generated, so changes made to the DataStore object after the result set is\ngenerated will be reflected in the generated ResultSet object. If you destroy the\nDataStore object before returning the result set, the result set becomes invalid. You\ncan rely on garbage collection to destroy the DataStore object or destroy it explicitly\nin the component's deactivate event.\nExamples\nIn this example, a DataStore object is created and data is retrieved into it, and then the\nGenerateResultSet method is used to create a result set that can be returned to a client.\ndatastore ds_datastore\nresultset lrs_resultset\ninteger li_rc\n \nds_datastore = CREATE DataStore\nds_datastore.SetTransObject (SQLCA)\nIF ds_datastore.Retrieve() = -1 THEN\n      ... // report error and return\nEND IF\n \nli_rc = ds_datastore.GenerateResultSet(lrs_resultset)\nIF li_rc <> 1 THEN\n      ... // report error and return\nEND IF\nreturn lrs_resultset\nSee also\nCreateFrom\n"}
{"page": 646, "text": "Methods for the DataWindow Control\nPage 646\nSetRecordSet in Section 2.4.765, \u201cSetRecordSet\u201d in PowerScript Reference\n9.43 GenerateXHTML (obsolete)\nDescription\nGenerates the inline content of the Web DataWindow in XHTML.\nObsolete method\nGenerateXHTML is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.90:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcontrol.GenerateXHTML ({page[ ] variables})\nTable 9.91:\nArgument\nDescription\ndwcontrol\nThe name of the server-side DataWindow\ncontrol you want to generate in XHTML.\npage\nAn array for passing page variables. The\npage variables must be defined as String\ndatatypes.\nReturn value\nInteger. 1 indicates success, and -1 indicates failure.\nUsage\nAt runtime, GenerateXHTML performs the tasks required to generate the dynamic XHTML,\nincluding retrieving the action context and generating the XHTML inline. Connection errors,\nincluding database error messages, are also generated inline.\nFor information about the advantages and limitations of each rendering format, see Part I,\n\u201cDataWindow Programmers Guide\u201d.\nThe GenerateXHTML method delivers the DataWindow in XHTML to the client browser\nand it generates a CSS style sheet and JS files that are cached on the client side and\nreferenced in the XHTML source.\nExamples\nThe following JSP example specifies subdirectories of the current application directory to\npublish the CSS and JS components of the Web DataWindow and generates the DataWindow\nin XHTML:\n"}
{"page": 647, "text": "Methods for the DataWindow Control\nPage 647\nString resourceBase = request.getScheme() + \"://\" +\n   request.getServerName() + \":\" +\n   request.getServerPort() + request.getContextPath();\nString publishPath = application.getRealPath(\"/\");\ndwGen.Modify(\"DataWindow.CSSGen.ResourceBase = '\" +\n   resourceBase + \"/css'\");\ndwGen.Modify(\"DataWindow.CSSGen.PublishPath = '\" +\n   publishPath + \"css'\");\ndwGen.Modify(\"DataWindow.JSGen.ResourceBase = '\" +\n   resourceBase + \"/js'\");\ndwGen.Modify(\"DataWindow.JSGen.PublishPath = '\" +\n   publishPath + \"js'\");\nString dwXHTML = dwGen.GenerateXHTML();\nout.print (dwXHTML);\nSee also\nGenerate\nGenerateXMLWeb\n9.44 GenerateXMLWeb (obsolete)\nDescription\nGenerates the XML content and the XSLT and CSS style sheets for a Web DataWindow,\nwhich is transformed to XHTML on the client side.\nObsolete method\nGenerateXMLWeb is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.92:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcontrol.GenerateXMLWeb ({page[ ] variables})\nTable 9.93:\nArgument\nDescription\ndwcontrol\nThe name of the server-side DataWindow\ncontrol\npage\nAn array for passing page variables. The\npage variables must be defined as String\ndatatypes.\nReturn value\nInteger. 1 indicates success, and -1 indicates failure.\n"}
{"page": 648, "text": "Methods for the DataWindow Control\nPage 648\nUsage\nThe GenerateXMLWeb function uses the resource base and publish paths for a DataWindow\nobject to determine where it generates XML, XSLT, CSS, and JS files. If a resource base\nor a publish path is not specified for a DataWindow object, the GenerateXMLWeb function\ncreates a TEMP directory on the server where the XML, XSLT, CSS, and JS files are stored.\nAt design time, you can override the resource base and publish paths by making Modify\ncalls on the DataWindow object in the Source view before you call GenerateXMLWeb. The\nfollowing example creates separate subdirectories for XML, XSLT, CSS, and JS files:\nString resourceBase = request.getScheme() + \"://\" +\n   request.getServerName() + \":\" +\n   request.getServerPort() + request.getContextPath();\nString publishPath = application.getRealPath(\"/\");\ndwGen.Modify(\"DataWindow.XMLGen.ResourceBase = '\" +\n   resourceBase + \"/xml'\");\ndwGen.Modify(\"DataWindow.XMLGen.PublishPath = '\" +\n   publishPath + \"xml'\");\ndwGen.Modify(\"DataWindow.XSLTGen.ResourceBase = '\" +\n   resourceBase + \"/xsl'\");\ndwGen.Modify(\"DataWindow.XSLTGen.PublishPath = '\" +\n   publishPath + \"xsl'\");\ndwGen.Modify(\"DataWindow.CSSGen.ResourceBase = '\" +\n   resourceBase + \"/css'\");\ndwGen.Modify(\"DataWindow.CSSGen.PublishPath = '\" +\n   publishPath + \"css'\");\ndwGen.Modify(\"DataWindow.JSGen.ResourceBase = '\" +\n   resourceBase + \"/js'\");\ndwGen.Modify(\"DataWindow.JSGen.PublishPath = '\" +\n   publishPath + \"js'\");\nAt runtime, the client browser displays an XHTML page that it transforms from XML using\nXSLT applied with CSS and JS files that it gets initially from the server. However, in most\ncases, after the initial loading of the page, the client does not need to go back to the server to\nobtain layout (XSLT) or styling (CSS) information, as these remain in the browser's cache.\nThis provides greater efficiency and scalability for your Web applications.\nExamples\nIn the following example, the Web DataWindow component generates the XML document,\nXSLT and CSS style sheets, and JS files for the content, structure, styling, and client-side\nfunctionality of the Web DataWindow:\ndwGen.GenerateXMLWeb();\nSee also\nGenerate\nGenerateXHTML\n9.45 GetBandAtPointer\nDescription\nReports the band in which the pointer is currently located, as well as the row number\nassociated with the band. The bands are the headers, trailers, and detail areas of the\nDataWindow and correspond to the horizontal areas of the DataWindow painter.\n"}
{"page": 649, "text": "Methods for the DataWindow Control\nPage 649\nApplies to\nTable 9.94:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nstring dwcontrol.GetBandAtPointer ( )\nTable 9.95:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control.\nReturn value\nReturns a string that names the band in which the pointer is located, followed by a tab\ncharacter and the number of the row associated with the band (see the table in Usage).\nReturns the empty string (\" \") if an error occurs.\nIf dwcontrol is null, the method returns null.\nUsage\nThe following table lists the band names, where the pointer is when a given band is reported,\nand the row that is associated with the band.\nTable 9.96:\nBand\nLocation of pointer\nAssociated row\ndetail\nIn the body of the\nDataWindow object\nThe row at the pointer. If rows do not fill the body of\nthe DataWindow object because of a group with a page\nbreak, then the first row of the next group. If the body\nis not filled because there are no more rows, then the\nlast row.\nheader\nIn the header of the\nDataWindow object\nThe first row visible in the DataWindow body.\nheader.n In the header of group\nlevel n\nThe first row of the group.\ntrailer.n In the trailer of group\nlevel n\nThe last row of the group.\nfooter\nIn the footer of the\nDataWindow object\nThe last row visible in the DataWindow body.\nsummaryIn the summary of the\nDataWindow object\nThe last row before the summary.\nYou can parse the return value by searching for the tab character (ASCII 09). In\nPowerBuilder, search for ~t. For an example that parses a string that includes a tab, see\nGetValue.\n"}
{"page": 650, "text": "Methods for the DataWindow Control\nPage 650\nExamples\nThese statements set the string named band to the location of the pointer in DataWindow\ndw_rpt:\nString band\nband = dw_rpt.GetBandAtPointer()\nSome possible return values are:\nTable 9.97: Example return values for the GetBandAtPointer method\nReturn value\nMeaning\ndetail[tab]8\nIn row 8 of the detail band of dw_rpt\nheader[tab]10\nIn the header of dw_rpt; row 10 is the first\nvisible row\nheader.2[tab]1\nIn the header of group level 2 for row 1\ntrailer.1[tab]5\nIn the trailer of group level 1 for row 5\nfooter[tab]111\nIn the footer of dw_rpt; the last visible row is\n111\nsummary[tab]23\nIn the summary of dw_rpt; the last row is 23\nSee also\nGetObjectAtPointer\n9.46 GetBorderStyle\nDescription\nReports the border style of a column in a DataWindow control or DataStore object.\nApplies to\nTable 9.98:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nborder dwcontrol.GetBorderStyle ( integer column )\nborder dwcontrol.GetBorderStyle ( string column ) \nTable 9.99:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\ncolumn\nThe column for which you want to obtain the border style. Column can be a\ncolumn number or a column name.\n"}
{"page": 651, "text": "Methods for the DataWindow Control\nPage 651\nReturn value\nReturns the border style of column in dwcontrol as a value of the Border enumerated\ndatatype. For a list of possible values, see Border.\nReturns null if it fails. If any argument is null, the method returns null.\nExamples\nThis code gets the border style for the current column:\nborder B2\nB2 = dw_emp.GetBorderStyle(dw_emp.GetColumn())\nThis code tests the border of column 2 in dw_emp and, if there is no border, displays a\nshadow box border:\nborder B2\nB2 = dw_emp.GetBorderStyle(2)\nIF B2 = NoBorder! THEN\n      dw_emp.SetBorderStyle(2, ShadowBox!)\nEND IF\nSee also\nSetBorderStyle\n9.47 GetChanges\nDescription\nRetrieves changes made to a DataWindow or DataStore as a blob. This method is used\nprimarily in distributed applications.\nApplies to\nTable 9.100:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.GetChanges ( REF blob changeblob {, blob cookie } ) \nTable 9.101:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore.\nchangeblob\nA variable into which the returned DataWindow changes will be placed.\ncookie\n(obsolete)\nA read-only blob created by GetStateStatus that is compared with the\nchangeblob to determine the likely success of a subsequent call to\nSetChanges.\nThis argument is obsolete and will be disabled in a future release.\nReturn value\n"}
{"page": 652, "text": "Methods for the DataWindow Control\nPage 652\nReturns the number of rows in the DataWindow change blob if it succeeds and one of the\nfollowing values if it fails:\n\u2022 -1 -- An internal error occurred.\n\u2022 -2 -- There is a conflict between the state of the DataWindow change blob and the state\nof the DataWindow from which the cookie was created; an attempt to use this blob in a\nSetChanges call against the DataWindow will fail.\n\u2022 -3 -- There is a conflict between the state of the DataWindow change blob and the state of\nthe DataWindow from which the cookie was created; but partial changes from the change\nblob can be applied.\nIf any argument is null, the method returns null.\nUsage\nGetChanges is used in conjunction with SetChanges to synchronize two or more\nDataWindows or DataStores. GetChanges retrieves data buffers and status flags for changed\nrows in a DataWindow or DataStore and places this information in a blob. SetChanges then\napplies the contents of this blob to another DataWindow or DataStore.\nReapplying changes from one DataWindow (or DataStore) to another\nIf you call GetChanges on a DataWindow and apply the data passed in the changeblob\nargument to another DataWindow using SetChanges, you must call GetChanges on\nthe second DataWindow before you reapply changes to it from the first DataWindow.\nThe GetChanges call on the second DataWindow updates the original timestamp\non that DataWindow so that it matches the current timestamp. (You cannot use the\nReset, ResetUpdate, or AcceptText calls to update the original timestamp.) If you try\nto reapply changes without first calling GetChanges on the second DataWindow, you\nwill get an error due to the conflict between the state of the DataWindow changeblob\nand the state of the second DataWindow.\nThe change blob created by GetChanges includes only those rows that have a status of New!,\nNewModified!, or DataModified!.\nFor information about status values, see DWItemStatus.\nExamples\nThese statements use GetChanges to capture changes to a DataWindow control on a client. If\nGetChanges succeeds, the client calls a remote object function that applies the changes to a\nDataStore on the server and updates the database:\nblob lblb_changes\nlong ll_rv\n \nll_rv = dw_employee.GetChanges(lblb_changes)\n \nIF ll_rv = -1 THEN\n      MessageBox(\"Error\", \"GetChanges call failed!\")\nELSE\n      iuo_employee.UpdateData(lblb_changes)\nEND IF\n"}
{"page": 653, "text": "Methods for the DataWindow Control\nPage 653\nSee also\nGetFullState\nGetStateStatus\nSetChanges\nSetFullState\n9.48 GetChangesBlob (obsolete)\nDescription\nReturns changes made to a DataWindow or DataStore. You must call GetChanges first to set\nup the change information. This method is used primarily in distributed applications.\nObsolete method\nGetChangesBlob is obsolete and should not be used, because the DataWindow Web\nControl for ActiveX technology is obsolete.\nApplies to\nTable 9.102:\nDataWindow type\nMethod applies to\nWeb ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nstring dwcontrol.GetChangesBlob ( ) \nTable 9.103:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control for\nwhich you just called GetChanges\nReturn value\nReturns a string whose value is the DataWindow change blob set up by GetChanges.\nIf dwcontrol is null, the method returns null.\nUsage\nGetChanges and GetChangesBlob are used in conjunction with SetChanges to synchronize\ntwo or more DataWindows or DataStores. For details, see GetChanges.\nExamples\nThese statements use GetChanges to capture changes to a DataWindow control on a client. If\nGetChanges succeeds, the client calls a remote object function that applies the changes to a\nDataStore on the server and updates the database:\nblob lblb_changes\nlong ll_rv\n"}
{"page": 654, "text": "Methods for the DataWindow Control\nPage 654\n \nll_rv = dw_employee.GetChanges(lblb_changes)\n \nIF ll_rv = -1 THEN\n      MessageBox(\"Error\", \"GetChanges call failed!\")\nELSE\n      iuo_employee.UpdateData(lblb_changes)\nEND IF\nSee also\nGetFullState\nGetStateStatus\nSetChanges\nSetFullState\n9.49 GetChild\nDescription\nProvides a reference to a child DataWindow or to a report in a composite DataWindow,\nwhich you can use in DataWindow functions to manipulate that DataWindow or report.\nApplies to\nTable 9.104:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.GetChild (string name, REF DataWindowChild dwchildvariable ) \nTable 9.105:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control or DataStore that contains the\nchild DataWindow or report.\nname\nA string that names the column containing the child DataWindow or that\nnames the report in the composite DataWindow.\ndwchildvariable\nA variable in which you want to store the reference to the child\nDataWindow or report.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs -- for example, if the child object does not\nexist.\nIf any argument is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nA child DataWindow is a DropDownDataWindow in a DataWindow object.\n"}
{"page": 655, "text": "Methods for the DataWindow Control\nPage 655\nA report is a DataWindow that is part of a composite DataWindow. A report is read-only.\nWhen you define the composite DataWindow in the DataWindow painter, each report is\ngiven a name. You can see the name in the Name option of the Properties view. You must use\nthe report name (not the name of the DataWindow object in which the report has been placed)\nwhen calling GetChild.\nUse GetChild when you need to explicitly retrieve data for a child DataWindow or report.\nAlthough PowerBuilder automatically retrieves data for the child or report when the main\nDataWindow is displayed, you need to explicitly retrieve data when there are retrieval\narguments or when conditions change and you want to retrieve new rows.\nWhen you insert a row or retrieve data in the main DataWindow, PowerBuilder automatically\nretrieves data for the child DataWindow. If the child DataWindow has retrieval arguments,\nPowerBuilder displays a dialog box asking the user for values for those arguments. To\nsuppress the dialog box, you can explicitly retrieve data for the child before changing the\nmain DataWindow (see the example).\nNested reports\nYou cannot use GetChild to get a reference to a report in a composite DataWindow\nwhen the report itself is a composite or nested DataWindow.\nChanging property values with the Modify method can cause the reference returned by\nGetChild to become invalid. After setting such a property, call GetChild again. If a property\ncauses this behavior, this is noted in its description in DataWindow Object Properties\nExamples\nThis example retrieves data for the child DataWindow associated with the column emp_state\nbefore retrieving data in the main DataWindow. The child DataWindow expects a region\nvalue as a retrieval argument. Because you populate the child DataWindow first, specifying\na value for its retrieval argument, there is no need for PowerBuilder to display the retrieval\nargument dialog box:\nDataWindowChild state_child\ninteger rtncode\n \nrtncode = dw_1.GetChild('emp_state', state_child)\nIF rtncode = -1 THEN MessageBox( &\n      \"Error\", \"Not a DataWindowChild\")\n \n// Establish the connection\nCONNECT USING SQLCA;\n \n// Set the transaction object for the child\nstate_child.SetTransObject(SQLCA)\n \n// Populate with values for eastern states\nstate_child.Retrieve(\"East\")\n \n// Set transaction object for main DW and retrieve\ndw_1.SetTransObject(SQLCA)\ndw_1.Retrieve()\nIn a composite DataWindow there are two reports: orders and current inventory. The orders\nreport has a retrieval argument for selecting the order status. This report displays open orders.\nThe composite DataWindow is displayed in a DataWindow control called dw_news and the\n"}
{"page": 656, "text": "Methods for the DataWindow Control\nPage 656\nreports are named open_orders and current_inv. The following code in the Open event of the\nwindow that contains dw_news provides a retrieval argument for open_orders:\nDataWindowChild dwc_orders\ndw_news.GetChild(\"open_orders\", dwc_orders)\ndwc_orders.SetTransObject(SQLCA)\ndwc_orders.Retrieve(\"open\")\nSee also\nGetChildObject\nSetTransObject\n9.50 GetChildObject (obsolete)\nDescription\nGets the reference to a child object for a Web ActiveX DataWindow.\nObsolete method\nGetChildObject is obsolete and should not be used, because the DataWindow Web\nControl for ActiveX technology is obsolete.\nApplies to\nTable 9.106:\nDataWindow type\nMethod applies to\nWeb ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nOleObject dwcontrol.GetChildObject ( ) \nTable 9.107:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\nor DataStore that contains the child\nDataWindow or report\nReturn value\nReturns an object that is the DataWindowChild or report. If no object is found, a null object\nreference is returned.\nUsage\nYou must call GetChild before you call GetChildObject.\nExamples\nThe following example displays the reference to the child object in a message box:\nvar ls ;\nvar ldwc;\n"}
{"page": 657, "text": "Methods for the DataWindow Control\nPage 657\nwindow.dw_1.GetChild (\"dept_id\"); \nldwc = window.dw_1.GetChildObject();\nls = ldwc.Describe (\"Datawindow.Table.Select\");\nwindow.alert(ls);\nSee also\nGetChild\n9.51 GetClickedColumn\nDescription\nObtains the number of the column the user clicked or double-clicked in a DataWindow\ncontrol or DataStore object.\nApplies to\nTable 9.108:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.GetClickedColumn ( )\nTable 9.109:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore object, or child DataWindow\nReturn value\nReturns the number of the column that the user clicked or double-clicked in dwcontrol.\nReturns 0 if the user did not click or double-click a column (for example, the user double-\nclicked outside the data area, in text or spaces between columns, or in the header, summary,\nor footer area).\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nCall GetClickedColumn in the Clicked or DoubleClicked event for a DataWindow control.\nWhen the user clicks on the column, that column becomes the current column after\nthe Clicked or DoubleClicked event is finished. During those events, GetColumn and\nGetClickedColumn can return different values.\nIf the user arrived at a column by another means, such as tabbing, GetClickedColumn cannot\nidentify that column. Use GetColumn instead to identify the current column.\nExamples\nThese statements return the number of the column the user clicked or double-clicked in\ndw_employee:\n"}
{"page": 658, "text": "Methods for the DataWindow Control\nPage 658\ninteger li_ColNbr\nli_ColNbr = dw_employee.GetClickedColumn()\nSee also\nGetClickedRow\nGetColumn\n9.52 GetClickedRow\nDescription\nObtains the number of the row the user clicked or double-clicked in a DataWindow control or\nDataStore object.\nApplies to\nTable 9.110:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.GetClickedRow ( )\nTable 9.111:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nDataStore object\nReturn value\nReturns the number of the row that the user clicked or double-clicked in dwcontrol. Returns\n0 if the user did not click or double-click a row (for example, the user double-clicked outside\nthe data area, in text or spaces between rows, or in the header, summary, or footer area).\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nCall GetClickedRow in the Clicked or DoubleClicked event for a DataWindow control.\nWhen the user clicks on the row, that row becomes the current row after the Clicked or\nDoubleClicked event is finished. During those events, GetRow and GetClickedRow can\nreturn different values.\nIf the user arrived at a row by another means, such as tabbing, GetClickedRow cannot\nidentify that row. Use GetRow instead to identify the current row.\nNot on child DataWindows\nThe GetClickedRow method does not work on child DataWindows.\nExamples\n"}
{"page": 659, "text": "Methods for the DataWindow Control\nPage 659\nThese statements return the number of the row the user clicked or double-clicked in\ndw_Employee:\nlong li_RowNbr\nli_RowNbr = dw_employee.GetClickedRow()\nSee also\nGetClickedColumn\nGetRow\n9.53 GetColumn\nDescription\nObtains the number of the current column. The current column is the column that has focus.\nApplies to\nTable 9.112:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.GetColumn ( )\nTable 9.113:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nDataStore, or child DataWindow\nReturn value\nReturns the number of the current column in dwcontrol. Returns 0 if no column is current\n(because all the columns have a tab value of 0, making all of them uneditable), and -1 if an\nerror occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nGetColumn and GetClickedColumn, when called in the Clicked or DoubleClicked event, can\nreturn different values. The column the user clicked does not become current until after the\nevent.\nUse GetColumnName (instead of GetColumn) when you need the column's name. Use\nSetColumn to change the current column.\nPowerBuilder environment\nFor use with PowerBuilder ListView controls, see Section 2.4.225, \u201cGetColumn\u201d in\nPowerScript Reference.\n"}
{"page": 660, "text": "Methods for the DataWindow Control\nPage 660\nThe current column\nA column becomes the current column after the user tabs to it or clicks it or if a script\ncalls the SetColumn method. A column cannot be current if it cannot be edited (if it\nhas a tab value of 0).\nA DataWindow always has a current column, even when the control is not active, as\nlong as there is at least one editable column.\nExamples\nThese statements return the number of the current column in dw_Employee:\ninteger li_ColNum\nli_ColNum = dw_employee.GetColumn()\nSee also\nGetClickedColumn\nGetColumnName\nGetRow\nSetColumn\nSetRow\n9.54 GetColumnName\nDescription\nObtains the name of the current column. The current column is the column that has the focus.\nApplies to\nTable 9.114:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.GetColumnName ( )\nTable 9.115:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nDataStore, or child DataWindow\nReturn value\nReturns the name of the current column in dwcontrol. Returns the empty string (\"\") if no\ncolumn is current or if an error occurs.\n"}
{"page": 661, "text": "Methods for the DataWindow Control\nPage 661\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nFor information on the current column, see GetColumn.\nExamples\nThese statements return the name of the current column in dw_Employee:\nstring ls_ColName\nls_ColName = dw_employee.GetColumnName()\nSee also\nGetColumn\nGetRow\nSetColumn\nSetRow\n9.55 GetContextService\nDescription\nReturns a reference to a context-specific instance of the specified service.\nApplies to\nTable 9.116:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger objectname.GetContextService ( string servicename, PowerObject\n servicereference )\nTable 9.117:\nArgument\nDescription\nobjectname\nA reference to an object or control for which you want a service.\nservicename\nString specifying the service object. Valid values include:\n\u2022 ContextInformation -- Context information service\n\u2022 Internet -- Internet service\n\u2022 ContextKeyword -- Context keyword service\nservicereferencePowerObject into which the method places a reference to the service object\nspecified by servicename. This argument is passed by reference.\nReturn value\n"}
{"page": 662, "text": "Methods for the DataWindow Control\nPage 662\nReturns 1 if the method succeeds and -1 if an error occurs.\nUsage\nInherited from PowerObject. For information, see Section 2.4.232, \u201cGetContextService\u201d in\nPowerScript Reference.\n9.56 GetFormat\nDescription\nObtains the display format assigned to a column in a DataWindow control or DataStore\nobject.\nApplies to\nTable 9.118:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.GetFormat ( string column )\nstring dwcontrol.GetFormat ( integer column )\nTable 9.119:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\ncolumn\nThe column for which you want the display format. Column can be a column\nnumber (integer) or a column name (string).\nReturn value\nReturns the display format specification for column in dwcontrol. If an error occurs,\nGetFormat returns the empty string (\" \").\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nIf you want to change the display format of a column temporarily, you can use GetFormat to\nsave the current format.\nExamples\nThese statements save the format of column salary of dw_employee before changing it to a\nnew format:\nstring OldFormat, NewFormat = \"$##,###.00\"\nOldFormat = dw_employee.GetFormat(\"salary\")\ndw_employee.SetFormat(\"salary\", NewFormat)\nSee also\n"}
{"page": 663, "text": "Methods for the DataWindow Control\nPage 663\nSetFormat\n9.57 GetFullContext (obsolete)\nDescription\nThis method returns a string representing the context of the client-side control to be passed on\na form submit.\nObsolete method\nGetFullContext is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.120:\nDataWindow type\nMethod applies to\nWeb\nClient control\nSyntax\nWeb DataWindow client control\nstring dwcontrol.GetFullContext ( )\nTable 9.121:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nReturn value\nString\nUsage\nUse to host multiple DataWindows.\nExamples\nThe following client side script transfers the context and action from one DataWindow to the\nDataWindow being submitted.\n   <SCRIPT>\n   function dw_first_OnSubmit()\n   {\n      dw_first.submitForm.dw_second_context.value =\n         dw_second.GetFullContext();\n      dw_first.submitForm.dw_second_action.value = \"\";\n   }\n \n   function dw_second_OnSubmit()\n   {\n      dw_second.submitForm.dw_first_context.value =\n         dw_first.GetFullContext();\n      dw_second.submitForm.dw_first_action.value = \"\";\n"}
{"page": 664, "text": "Methods for the DataWindow Control\nPage 664\n   }\n   </SCRIPT>\nTo enable the second DataWindow to create the required fields on the submit form, each of\nthe DataWindows must have two arguments defined in the SelfLinkArgs property:\ndw_first must have dw_second_context and dw_second_action defined\ndw_second must have dw_first_context and dw_first_action defined\n9.58 GetFullState\nDescription\nRetrieves the complete state of a DataWindow or DataStore as a blob.\nThis method is used primarily in distributed applications.\nApplies to\nTable 9.122:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.GetFullState ( blob dwasblob )\nTable 9.123:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nDataStore.\ndwasblob\nA variable into which the returned\nDataWindow will be placed.\nReturn value\nReturns the number of rows in the DataWindow blob if it succeeds and -1 if an error\noccurs. GetFullState will return -1 if the DataWindow control or DataStore does not have a\nDataWindow object associated with it.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nGetFullState retrieves the entire state of a DataWindow or DataStore, including the\nDataWindow object specification, the data buffers, and the status flags. When you call\nSetFullState to apply the blob created by GetFullState to another DataWindow, the target\nDataWindow has enough information to recreate the source DataWindow.\nBecause the blob created by GetFullState contains the DataWindow object specification,\na subsequent call to SetFullState will overwrite the DataWindow object for the target\nDataWindow control or DataStore. If the target of SetFullState does not have a DataWindow\n"}
{"page": 665, "text": "Methods for the DataWindow Control\nPage 665\nobject associated with it, the blob will assign one. In this case, SetFullState has the effect of\nsetting the DataObject property for the target.\nWhen you use GetFullState and SetFullState to synchronize a DataWindow control on a\nclient with a DataStore on a server, you need to make sure that the DataWindow object for\nthe DataStore contains the presentation style you want to display on the client.\nExamples\nThese statements retrieve data into a DataStore and use GetFullState to retrieve the complete\nstate of the DataStore into a blob:\n// Instance variables:\n// datastore ids_datastore\n// blob blb_data\nlong ll_rv\n \nids_datastore = create datastore\nids_datastore.dataobject = \"d_emplist\"\nids_datastore.SetTransObject (SQLCA)\nids_datastore.Retrieve()\nll_rv = ids_datastore.GetFullState(blb_data)\nSee also\nGetChanges\nGetFullStateBlob\nGetStateStatus\nSetChanges\nSetFullState\n9.59 GetFullStateBlob (obsolete)\nDescription\nReturns the state of a DataWindow or DataStore. You must call GetFullState first to set up\nthe state information. This method is used primarily in distributed applications.\nObsolete method\nGetFullStateBlob is obsolete and should not be used, because the DataWindow Web\nControl for ActiveX technology is obsolete.\nApplies to\nTable 9.124:\nDataWindow type\nMethod applies to\nWeb ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nstring dwcontrol.GetFullStateBlob ( ) \n"}
{"page": 666, "text": "Methods for the DataWindow Control\nPage 666\nTable 9.125:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control for\nwhich you just called GetFullState\nReturn value\nReturns a string whose value is the DataWindow state blob set up by GetFullState.\nIf dwcontrol is null, the method returns null.\nUsage\nGetFullState and GetFullStateBlob are used in conjunction with SetFullState to synchronize\ntwo or more DataWindows or DataStores. For details, see GetFullState.\nExamples\nThese statements use GetChanges to capture changes to a DataWindow control on a client. If\nGetChanges succeeds, the client calls a remote object function that applies the changes to a\nDataStore on the server and updates the database:\nblob lblb_changes\nlong ll_rv\n \nll_rv = dw_employee.GetChanges(lblb_changes)\n \nIF ll_rv = -1 THEN\n      MessageBox(\"Error\", \"GetChanges call failed!\")\nELSE\n      iuo_employee.UpdateData(lblb_changes)\nEND IF\nSee also\nGetFullState\nGetStateStatus\nSetChanges\nSetFullState\n9.60 GetItem (obsolete)\nDescription\nGets the value of an item for the specified row and column in a Web DataWindow client\ncontrol. Use one of the datatype-specific methods such as GetItemString for other types of\nDataWindow control. GetItem returns the value available in the data available to the client.\nThis is equivalent to the primary buffer in other environments.\nObsolete method\nGetItem is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\n"}
{"page": 667, "text": "Methods for the DataWindow Control\nPage 667\nTable 9.126:\nDataWindow type\nMethod applies to\nWeb\nClient control\nSyntax\nWeb DataWindow client control\nreturnvalue dwcontrol.GetItem (number row, number column )\nreturnvalue dwcontrol.GetItem (number row, string column )\nTable 9.127:\nArgument Description\ndwcontrol\nA reference to a DataWindow control.\nrow\nA value identifying the row location of the data.\ncolumn\nThe column location of the data. Column can be a column number or a column\nname. The column number is the number of the column as it is listed in the\nColumn Specification view of the DataWindow painter -- not necessarily the\nnumber of the column in the Design view.\nTo get the contents of a computed field, specify the name of the computed field\nfor column. Computed fields do not have numbers.\nReturn value\nReturns the value in the specified row and column. The datatype of the returned data\ncorresponds to the datatype of the column. Returns null if the column value is null. Returns\nthe empty string (\"\") if an error occurs.\nIf any argument value is null, the method returns null.\nUsage\nUse GetItem to get data that has been accepted by the DataWindow. In a script for the\nItemChanged or ItemError event, you can use the newValue argument to find out what the\nuser entered before the data is accepted.\nExamples\nThis statement sets LName to the value for row 3 of the emp_name column in the\nDataWindow dw_employee:\nvar LName = dw_employee.GetItem(3, \"emp_name\");\nSee also\nSetItem\n9.61 GetItemDate\nDescription\nGets data whose type is Date from the specified buffer of a DataWindow control or DataStore\nobject. You can obtain the data that was originally retrieved and stored in the database from\nthe original buffer, as well as the current value in the primary, delete, or filter buffers.\n"}
{"page": 668, "text": "Methods for the DataWindow Control\nPage 668\nApplies to\nTable 9.128:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ndate dwcontrol.GetItemDate ( long row, string column \n   {, DWBuffer dwbuffer , boolean originalvalue } )\ndate dwcontrol.GetItemDate ( long row, integer column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nTable 9.129:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row location of the data.\ncolumn\nThe column location of the data. The datatype of the column must be date.\nColumn can be a column number or a column name. The column number is\nthe number of the column as it is listed in the Column Specification view of\nthe DataWindow painter -- not necessarily the number of the column in the\nDesign view.\nTo get the contents of a computed field, specify the name of the computed\nfield for column. Computed fields do not have numbers.\ndwbuffer\n(optional)\nA value identifying the DataWindow buffer from which you want to get the\ndata.\nFor a list of valid values, see DWBuffer.\noriginalvalue\n(optional)\nA boolean indicating whether you want the original or current values for\nrow and column:\n\u2022 True -- Returns the original values (the values initially retrieved from the\ndatabase).\n\u2022 False -- (Default) Returns the current values.\nIf you specify dwbuffer, you must also specify originalvalue.\nReturn value\nReturns the date value in the specified row and column. Returns null if the column value is\nnull or if there is no DataWindow object assigned to the DataWindow control or DataStore.\nReturns 1900-01-01 if any other error occurs.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\n"}
{"page": 669, "text": "Methods for the DataWindow Control\nPage 669\nUse GetItemDate when you want to get information from the DataWindow's buffers. To find\nout what the user entered in the current column before that data is accepted, use GetText. In\nthe ItemChanged or ItemError events, use the data argument.\nTo access a row in the original buffer, specify the buffer that the row currently occupies\n(primary, delete, or filter) and the number of the row in that buffer. When you specify true for\noriginalvalue, the method gets the original data for that row from the original buffer.\nAn execution error occurs when the datatype of the DataWindow column does not match the\ndatatype of the method; in this case, date.\nDatatypes of columns and computed fields\nThere is a difference in datatypes between columns and computed columns retrieved\nfrom the database and computed fields defined in the DataWindow painter. Computed\ncolumns from the database can have a datatype of date, but a date computed\nfield always has a datatype of DateTime, not date. In PowerBuilder, use the\nGetItemDateTime method instead.\nPowerBuilder only: using GetItemDate in a String function\nWhen you call GetItemDate as an argument for the String function and do not specify\na display format, the value is formatted as a DateTime value. This statement returns a\nstring like \"2/26/96 00:00:00\":\nString(dw_1.GetItemDate(1, \"start_date\"))\nTo get a simple date string, you can specify a display format:\nString(dw_1.GetItemDate(1,\"start_date\"), \"m/d/yy\")\nor you can assign the date to a date variable before calling the String function:\ndate ld_date\nstring ls_date\nld_date = dw_1.GetItemDate(1, \"start_date\")\nls_date = String(ld_date)\nExamples\nThese statements set hiredate to the current Date data in the third row of the primary buffer in\nthe column named first_day of dw_employee:\nDate hiredate\nhiredate = dw_employee.GetItemDate(3, \"first_day\")\nThese statements set hiredate to the current Date data in the third row of the filter buffer in\nthe column named first_day of dw_employee:\nDate hiredate\nhiredate = dw_employee.GetItemDate(3, &\n      \"first_day\", Filter!, false)\nThese statements set hiredate to original Date data in the third row of the primary buffer in\nthe column named hdate of dw_employee:\nDate hiredate\nhiredate = dw_employee.GetItemDate(3, &\n"}
{"page": 670, "text": "Methods for the DataWindow Control\nPage 670\n      \"hdate\", Primary!, true)\nSee also\nGetItemDateTime\nGetItemDecimal\nGetItemNumber\nGetItemString\nGetItemTime\nGetText\nSetItem\nSetText\n9.62 GetItemDateTime\nDescription\nGets data whose type is DateTime from the specified buffer of a DataWindow control or\nDataStore object. You can obtain the data that was originally retrieved and stored in the\ndatabase from the original buffer, as well as the current value in the primary, delete, or filter\nbuffers.\nApplies to\nTable 9.130:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nDateTime dwcontrol.GetItemDateTime ( long row, string column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nDateTime dwcontrol.GetItemDateTime ( long row, integer column\n   {, DWBuffer dwbuffer, boolean originalvalue } )\nTable 9.131:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control, DataStore, or child DataWindow in\nwhich you want to obtain the DateTime data contained in a specific row and\ncolumn.\nrow\nA value identifying the row location of the data.\ncolumn\nThe column location of the data. The datatype of the column must be\nDateTime. Column can be a column number or a column name. The\ncolumn number is the number of the column as it is listed in the Column\nSpecification view of the DataWindow painter -- not necessarily the number\nof the column in the Design view.\n"}
{"page": 671, "text": "Methods for the DataWindow Control\nPage 671\nArgument\nDescription\nTo get the contents of a computed field, specify the name of the computed\nfield for column. Computed fields do not have numbers.\ndwbuffer\n(optional)\nA value identifying the DataWindow buffer from which you want to get the\ndata.\nFor a list of valid values, see DWBuffer.\noriginalvalue\n(optional)\nA boolean indicating whether you want the original or current values for\nrow and column:\n\u2022 True -- Returns the original values, that is, the values initially retrieved\nfrom the database.\n\u2022 False -- (Default) Returns the current values.\nIf you specify dwbuffer, you must also specify originalvalue.\nReturn value\nReturns the DateTime or Timestamp value in the specified row and column. Returns null if\nthe column value is null or if there is no DataWindow object assigned to the DataWindow\ncontrol or DataStore. Returns 1900-01-01 00:00:00.000000 if any other error occurs.\nIf any argument value is null, in PowerBuilder the method returns null.\nUsage\nUse GetItemDateTime when you want to get information from the DataWindow's buffers. To\nfind out what the user entered in the current column before that data is accepted, use GetText.\nIn the ItemChanged or ItemError events, use the data argument.\nTo access a row in the original buffer, specify the buffer that the row currently occupies\n(primary, delete, or filter) and the number of the row in that buffer. When you specify true for\noriginalvalue, the method gets the original data for that row from the original buffer.\nDatatype mismatch\nAn execution error occurs when the datatype of the DataWindow column does not\nmatch the datatype of the method -- in this case, DateTime.\nComputed fields displaying date or time values have a datatype of DateTime, not date or\ntime. Always use GetItemDateTime to get their value, not GetItemDate or GetItemTime.\nExamples\nThese statements set as_of to the current DateTime data in the primary buffer for row 3 of the\ncolumn named start_dt in the DataWindow dw_emp:\nDateTime as_of\nas_of = dw_emp.GetItemDateTime(3, \"start_dt\")\nThese statements set as_of to the current DateTime data in the delete buffer for row 3 of the\nend_dt column of dw_emp:\nDateTime as_of\n"}
{"page": 672, "text": "Methods for the DataWindow Control\nPage 672\nas_of = dw_emp.GetItemDateTime(3, \"end_dt\", &\n      Delete!, false)\nThese statements set AsOf to the original DateTime data in the primary buffer for row 3 of\nthe end_dt column of dw_emp:\nDateTime as_of\nas_of = dw_emp.GetItemDateTime(3, \"end_dt\", &\n      Primary!, true)\nSee also\nGetItemDate\nGetItemDecimal\nGetItemNumber\nGetItemString\nGetItemTime\nSetItem\n9.63 GetItemDecimal\nDescription\nGets data whose type is decimal from the specified buffer of a DataWindow control or\nDataStore object. You can obtain the data that was originally retrieved and stored in the\ndatabase from the original buffer, as well as the current value in the primary, delete, or filter\nbuffers.\nApplies to\nTable 9.132:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ndecimal dwcontrol.GetItemDecimal ( long row, integer column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\ndecimal dwcontrol.GetItemDecimal ( long row, string column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nTable 9.133:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore.\nrow\nA value identifying the row location of the decimal data.\ncolumn\nThe column location of the data. The datatype of the column must be one\nof type decimal. Column can be a column number or a column name. The\ncolumn number is the number of the column as it is listed in the Column\n"}
{"page": 673, "text": "Methods for the DataWindow Control\nPage 673\nArgument\nDescription\nSpecification view of the DataWindow painter -- not necessarily the number of\nthe column in the Design view.\nTo get the contents of a computed field, specify the name of the computed\nfield for column. Computed fields do not have numbers.\ndwbuffer\n(optional)\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer from which you want to get the data. For a list of valid values, see\nDWBuffer.\noriginalvalue\n(optional)\nA boolean indicating whether you want the original or current values for row\nand column:\n\u2022 True -- Returns the original values, that is, the values initially retrieved from\nthe database.\n\u2022 False -- (Default) Returns the current values.\nIf you specify dwbuffer, you must also specify originalvalue.\nReturn value\nReturns the decimal value in the specified row and column. Returns null if the column value\nis null or if there is no DataWindow object assigned to the DataWindow control or DataStore.\nTriggers the SystemError event and returns -1 if any other error occurs (see Handling errors).\nIf any argument value is null, the method returns null.\nUsage\nUse GetItemDecimal when you want to get information from the DataWindow's buffers. To\nfind out what the user entered in the current column before that data is accepted, use GetText.\nIn the ItemChanged or ItemError events, use the data argument.\nTo access a row in the original buffer, specify the buffer that the row currently occupies\n(primary, delete, or filter) and the number of the row in that buffer. When you specify true for\noriginalvalue, the method gets the original data for that row from the original buffer.\nHandling errors\nThe return value is a valid value from the database unless the SystemError event is triggered.\nWhen the value cannot be converted because the column's datatype does not match the\nmethod's datatype, an execution error occurs, which triggers the SystemError event. The\ndefault error processing halts the application.\nIf you write a script for the SystemError event, it should also halt the application. Therefore,\nthe error return value is seldom used.\nExamples\nThese statements set salary_amt to the current decimal data in the primary buffer for row 4 of\nthe column named emp_salary of dw_employee:\ndecimal salary_amt\nsalary_amt = &\n      dw_employee.GetItemDecimal(4, \"emp_salary\")\n"}
{"page": 674, "text": "Methods for the DataWindow Control\nPage 674\nThese statements set salary_amt to the current decimal data in the filter buffer for row 4 of\nthe column named emp_salary of dw_employee:\ndecimal salary_amt\nsalary_amt = dw_employee.GetItemDecimal(4, &\n      \"emp_salary\", Filter!, false)\nThese statements set salary_amt to the original decimal data in the primary buffer for row 4\nof the column named emp_salary of dw_employee:\ndecimal salary_amt\nsalary_amt = dw_employee.GetItemDecimal(4, &\n      \"emp_salary\", Primary!, true)\nSee also\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemString\nGetItemTime\nSetItem\n9.64 GetItemFormattedString\nDescription\nGets and formats data whose type is String from the specified buffer of a DataWindow\ncontrol or DataStore object.\nApplies to\nTable 9.134:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.GetItemFormattedString ( long row, integer column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nstring dwcontrol.GetItemFormattedString ( long row, string column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nTable 9.135:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row location of the string data.\ncolumn\nThe column location of the data. The datatype of the column must be String.\nColumn can be a column number or a column name. The column number is\nthe number of the column as it is listed in the Column Specification view of\n"}
{"page": 675, "text": "Methods for the DataWindow Control\nPage 675\nArgument\nDescription\nthe DataWindow painter -- not necessarily the number of the column in the\nDesign view.\nTo get the contents of a computed field, specify the name of the computed\nfield for column. Computed fields do not have numbers.\ndwbuffer\n(optional)\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer from which you want to get the data. For a list of valid values, see\nDWBuffer.\noriginalvalue\n(optional)\nA boolean indicating whether you want the original or current values for\nrow and column:\n\u2022 True -- Returns the original values (the values initially retrieved from the\ndatabase).\n\u2022 False -- (Default) Returns the current values.\nIf you specify dwbuffer, you must also specify originalvalue.\nUsage\nUse GetItemFormattedString in place of GetItemString when you want to return the value\nfrom a column in its current display format. This is especially useful if the column in\nquestion is not a computed column.\nExamples\nThese statements set LName to the current string in the primary buffer for row 3 of in\nthe column named emp_name in the DataWindow dw_employee. The retrieved value is\nformatted with the display format of the column:\nString LName\nLName = dw_employee.GetItemFormattedString(3, \"emp_name\")\nSee also\nGetItemString\nGetItemUnformattedString\n9.65 GetItemNumber\nDescription\nGets numeric data from the specified buffer of a DataWindow control or DataStore object.\nYou can obtain the data that was originally retrieved and stored in the database from the\noriginal buffer, as well as the current value in the primary, delete, or filter buffers.\nApplies to\nTable 9.136:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\n"}
{"page": 676, "text": "Methods for the DataWindow Control\nPage 676\nSyntax\nPowerBuilder\nnumeric dwcontrol.GetItemNumber ( long row, string column\n    {, DWBuffer dwbuffer, boolean originalvalue } )\nnumeric dwcontrol.GetItemNumber ( long row, integer column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nTable 9.137:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row location of the numeric data.\ncolumn\nThe column location of the numeric data. The datatype of the column must\nbe one of a numeric datatype. Column can be a column number or a column\nname. The column number is the number of the column as it is listed in the\nColumn Specification view of the DataWindow painter -- not necessarily the\nnumber of the column in the Design view.\nTo get the contents of a computed field, specify the name of the computed\nfield for column. Computed fields do not have numbers.\ndwbuffer\n(optional)\nA value identifying the DataWindow buffer from which you want to get the\ndata. For a list of valid values, see DWBuffer.\noriginalvalue\n(optional)\nA boolean indicating whether you want the original or current values for row\nand column:\n\u2022 True -- Return the original values (the values initially retrieved from the\ndatabase).\n\u2022 False -- (Default) Return the current values.\nIf you specify dwbuffer, you must also specify originalvalue.\nReturn value\nReturns the numeric value in the specified row and column (decimal, double, integer, long, or\nreal). Returns null if the column value is null or if there is no DataWindow object assigned to\nthe DataWindow control or DataStore. Triggers the SystemError event and returns -1 if any\nother error occurs (see Handling errors).\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nUse GetItemNumber to get information from the DataWindow's buffers. To find out what\nthe user entered in the current column before that data is accepted, use GetText. In the\nItemChanged or ItemError events, use the data argument.\nTo access a row in the original buffer, specify the buffer that the row currently occupies\n(primary, delete, or filter) and the number of the row in that buffer. When you specify true for\noriginalvalue, the method gets the original data for that row from the original buffer.\nHandling errors\n"}
{"page": 677, "text": "Methods for the DataWindow Control\nPage 677\nThe return value is a valid value from the database unless the SystemError event is triggered.\nWhen the value cannot be converted because the column's datatype does not match the\nmethod's datatype, an execution error occurs, which triggers the SystemError event. The\ndefault error processing halts the application. If you write a script for the SystemError event,\nit should also halt the application. Therefore, the error return value is seldom used.\nExamples\nThese statements set EmpNbr to the current numeric data in the primary buffer for row 4 of\nthe column named emp_nbr in dw_employee:\ninteger EmpNbr\nEmpNbr = dw_employee.GetItemNumber(4, \"emp_nbr\")\nThese statements set EmpNbr to the current numeric data in the filter buffer for row 4 of the\ncolumn named salary of dw_employee:\ninteger EmpNbr\nEmpNbr = dw_employee.GetItemNumber(4, &\n      \"salary\", Filter!, false)\nThese statements set EmpNbr to the original numeric data in the primary buffer for row 4 of\nthe column named salary of dw_Employee:\ninteger EmpNbr\nEmpNbr = dw_Employee.GetItemNumber(4, &\n      \"salary\", Primary!, true)\nSee also\nGetItemDate\nGetItemDateTime\nGetItemDecimal\nGetItemString\nGetItemTime\nSetItem\n9.66 GetItemStatus\nDescription\nReports the modification status of a row or a column within a row. The modification status\ndetermines the type of SQL statement the Update method will generate for the row or\ncolumn.\nApplies to\nTable 9.138:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\n"}
{"page": 678, "text": "Methods for the DataWindow Control\nPage 678\nPowerBuilder\nDWItemStatus dwcontrol.GetItemStatus ( long row, integer column, DWBuffer\n dwbuffer )\nDWItemStatus dwcontrol.GetItemStatus ( long row, string column, DWBuffer dwbuffer )\nTable 9.139:\nArgument Description\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row for which you want the status.\ncolumn\nThe column for which you want the status. Column can be a column number or\na column name. The column number is the number of the column as it is listed\nin the Column Specification view of the DataWindow painter -- not necessarily\nthe number of the column in the Design view.\nSpecify 0 to get the status of the whole row.\ndwbuffer\nA value identifying the DataWindow buffer containing the row for which you\nwant status. For a list of valid values, see DWBuffer.\nReturn value\nA value of the dwItemStatus enumerated datatype. The return value identifies the status\nof the item at row, column of dwcontrol in dwbuffer. For a list of status values, see\nDWItemStatus.\nIf column is 0, GetItemStatus returns the status of row. If there is no DataWindow object\nassigned to the DataWindow control or DataStore, GetItemStatus returns null.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nUse GetItemStatus to understand what SQL statements will be generated for new and\nchanged information when you update the database.\nFor rows in the primary and filter buffers, Update generates an INSERT statement for rows\nwith NewModified! status. It generates an UPDATE statement for rows with DataModified!\nstatus and references the columns that have been affected.\nFor rows in the delete buffer, Update does not generate a DELETE statement for rows whose\nstatus was New! or NewModified! before being moved to the delete buffer.\nExamples\nThese statements store in the variable l_status the status of the column named emp_status in\nrow 5 in the filter buffer of dw_1:\ndwItemStatus l_status\nl_status = dw_1.GetItemStatus(5, \"emp_status\", &\n      Filter!)\nThese statements store in the variable l_status the status of the column named Salary in the\ncurrent row in the primary buffer of dw_emp:\ndwItemStatus l_status\nl_status = dw_emp.GetItemStatus( &\n"}
{"page": 679, "text": "Methods for the DataWindow Control\nPage 679\n      dw_emp.GetRow(), \"Salary\", Primary!)\nSee also\nSetItemStatus\n9.67 GetItemString\nDescription\nGets data whose type is String from the specified buffer of a DataWindow control or\nDataStore object. You can obtain the data that was originally retrieved and stored in the\ndatabase from the original buffer, as well as the current value in the primary, delete, or filter\nbuffers.\nApplies to\nTable 9.140:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.GetItemString ( long row, integer column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nstring dwcontrol.GetItemString ( long row, string column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nTable 9.141:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row location of the string data.\ncolumn\nThe column location of the data. The datatype of the column must be String.\nColumn can be a column number or a column name. The column number is\nthe number of the column as it is listed in the Column Specification view of\nthe DataWindow painter -- not necessarily the number of the column in the\nDesign view.\nTo get the contents of a computed field, specify the name of the computed\nfield for column. Computed fields do not have numbers.\ndwbuffer\n(optional)\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer from which you want to get the data. For a list of valid values, see\nDWBuffer.\noriginalvalue\n(optional)\nA boolean indicating whether you want the original or current values for row\nand column:\n\u2022 True -- Returns the original values (the values initially retrieved from the\ndatabase).\n"}
{"page": 680, "text": "Methods for the DataWindow Control\nPage 680\nArgument\nDescription\n\u2022 False -- (Default) Returns the current values.\nIf you specify dwbuffer, you must also specify originalvalue.\nReturn value\nReturns the string value in the specified row and column. Returns the empty string (\" \") if\nthere is no DataWindow object assigned to the DataWindow control or DataStore or if any\nother error occurs.\nIf any argument value is null, in PowerBuilder the method returns null.\nUsage\nUse GetItemString to get information from the DataWindow's buffers. To find out what\nthe user entered in the current column before that data is accepted, use GetText. In the\nItemChanged or ItemError events, use the data argument.\nTo access a row in the original buffer, specify the buffer that the row currently occupies\n(primary, delete, or filter) and the number of the row in that buffer. When you specify true for\noriginalvalue, the method gets the original data for that row from the original buffer.\nGetItemString returns a formatted value in the case of a computed column, and an\nunformatted value in the case of a noncomputed column. For PowerBuilder DataWindows,\nyou can use the GetItemFormattedString method to return a formatted value, or the\nGetItemUnformattedString method to return an unformatted value, for any type of column.\nMismatched datatypes\nAn execution error occurs when the datatype of the DataWindow column does not\nmatch the datatype of the method -- in this case, String.\nExamples\nThese statements set LName to the current string in the primary buffer for row 3 of the\ncolumn named emp_name in the DataWindow dw_employee:\nString LName\nLName = dw_employee.GetItemString(3, \"emp_name\")\nThese statements set LName to the current string in the delete buffer for row 3 of the column\nnamed emp_name of dw_employee:\nString LName\nLName = dw_employee.GetItemString(3, &\n      \"emp_name\", Delete!, false)\nThe following statements set LName to the original string in the delete buffer for row 3 of the\ncolumn named emp_name of dw_employee:\nString LName\nLName = dw_employee.GetItemString(3, &\n      \"emp_name\", Delete!, true)\nSee also\nGetItemDate\n"}
{"page": 681, "text": "Methods for the DataWindow Control\nPage 681\nGetItemDateTime\nGetItemDecimal\nGetItemFormattedString\nGetItemNumber\nGetItemTime\nGetItemUnformattedString\nGetText\nSetItem\nSetText\n9.68 GetItemTime\nDescription\nGets data whose type is Time from the specified buffer of a DataWindow control or\nDataStore object. You can obtain the data that was originally retrieved and stored in the\ndatabase from the original buffer, as well as the current value in the primary, delete, or filter\nbuffers.\nApplies to\nTable 9.142:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ntime dwcontrol.GetItemTime ( long row, string column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\ntime dwcontrol.GetItemTime ( long row, integer column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\nTable 9.143:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row location of the data.\ncolumn\nThe column location of the data. The datatype of the column must be time.\nColumn can be a column number or a column name. The column number is\nthe number of the column as it is listed in the Column Specification view of\nthe DataWindow painter -- not necessarily the number of the column in the\nDesign view.\nTo get the contents of a computed field, specify the name of the computed\nfield for column. Computed fields do not have numbers.\n"}
{"page": 682, "text": "Methods for the DataWindow Control\nPage 682\nArgument\nDescription\ndwbuffer\n(optional)\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer from which you want to get the data. For a list of valid values, see\nDWBuffer.\noriginalvalue\n(optional)\nA boolean indicating whether you want the original or current values for row\nand column:\n\u2022 True -- Return the original values (the values initially retrieved from the\ndatabase).\n\u2022 False -- (Default) Return the current values.\nIf you specify dwbuffer, you must also specify originalvalue.\nReturn value\nReturns the time value in the specified row and column. Returns null if the column value is\nnull or if there is no DataWindow object assigned to the DataWindow control or DataStore.\nReturns 00:00:00.000000 if an error occurs.\nIf any argument value is null, in PowerBuilder the method returns null.\nUsage\nUse GetItemTime to get information from the DataWindow's buffers. To find out what\nthe user entered in the current column before that data is accepted, use GetText. In the\nItemChanged or ItemError events, use the data argument.\nTo access a row in the original buffer, specify the buffer that the row currently occupies\n(primary, delete, or filter) and the number of the row in that buffer. When you specify true for\noriginalvalue, the method gets the original data for that row from the original buffer.\nDatatypes of columns and computed fields\nAn execution error occurs when the datatype of the DataWindow column does not\nmatch the datatype of the method -- in this case, time.\nThere is a difference in datatypes between computed columns retrieved from the\ndatabase and computed fields defined in the DataWindow painter. Computed columns\nfrom the database can have a datatype of time, but a time computed field always has a\ndatatype of DateTime, not time. Use the GetItemDateTime method instead.\nPowerBuilder only: using GetItemTime in a String function\nWhen you call GetItemTime as an argument for the String function and do not specify\na display format, the value is formatted as a DateTime value. This statement returns a\nstring like \"2/26/06 00:00:00\":\nString(dw_1.GetItemTime(1, \"start_date\"))\nTo get a simple time string, you can specify a display format for the String function\nor you can assign the value to a time variable before calling the String function (see\nGetItemDate for examples).\n"}
{"page": 683, "text": "Methods for the DataWindow Control\nPage 683\nExamples\nThese statements set Start to the current Time data in the primary buffer for row 3 of the\ncolumn named title in dw_employee:\nTime Start\nStart = dw_employee.GetItemTime(3, \"title\")\nThese statements set Start to the current Time data in the filter buffer for row 3 of the column\nnamed start_time of dw_employee:\nTime Start\nStart = dw_employee.GetItemTime(3, &\n      \"start_time\", Filter!, false)\nThese statements set Start to the original Time data in the primary buffer for row 3 of the\ncolumn named start_time of dw_employee:\nTime Start\nStart = dw_employee.GetItemTime(3, &\n      \"start_time\", Primary!, true)\nSee also\nGetItemDate\nGetItemDateTime\nGetItemDecimal\nGetItemNumber\nGetItemString\nGetText\nSetItem\nSetText\n9.69 GetItemUnformattedString\nDescription\nGets raw (unformatted) data whose type is String from the specified buffer of a DataWindow\ncontrol or DataStore object.\nApplies to\nTable 9.144:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.GetItemUnformattedString ( long row, \n   integer column {, DWBuffer dwbuffer, boolean originalvalue } )\nstring dwcontrol.GetItemUnformattedString ( long row, string column \n   {, DWBuffer dwbuffer, boolean originalvalue } )\n"}
{"page": 684, "text": "Methods for the DataWindow Control\nPage 684\nTable 9.145:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row location of the string data.\ncolumn\nThe column location of the data. The datatype of the column must be String.\nColumn can be a column number or a column name. The column number is\nthe number of the column as it is listed in the Column Specification view of\nthe DataWindow painter -- not necessarily the number of the column in the\nDesign view.\nTo get the contents of a computed field, specify the name of the computed\nfield for column. Computed fields do not have numbers.\ndwbuffer\n(optional)\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer from which you want to get the data. For a list of valid values, see\nDWBuffer.\noriginalvalue\n(optional)\nA boolean indicating whether you want the original or current values for row\nand column:\n\u2022 True -- Returns the original values (the values initially retrieved from the\ndatabase).\n\u2022 False -- (Default) Returns the current values.\nIf you specify dwbuffer, you must also specify originalvalue.\nUsage\nUse GetItemUnformattedString in place of GetItemString when you want to return the value\nfrom a column without its display format. This is especially useful if the column in question\nis a computed column.\nExamples\nThese statements set LName to the current string in the primary buffer for row 3 of in\nthe column named emp_name in the DataWindow dw_employee. The retrieved value is\nunformatted:\nString LName\nLName = dw_employee.GetItemUnformattedString(3, \"emp_name\")\nSee also\nGetItemFormattedString\nGetItemString\n9.70 GetLastError (obsolete)\nDescription\nReturns the error code of the last database error that occurred in the Web DataWindow server\ncomponent.\n"}
{"page": 685, "text": "Methods for the DataWindow Control\nPage 685\nObsolete method\nGetLastError is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.146:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nlong dwcontrol.GetLastError ( ) \nTable 9.147:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow server\ncomponent\nReturn value\nReturns a numeric error code for the last database error that occurred.\nIf dwcontrol is null, the method returns null.\nUsage\nCall GetLastError and GetLastErrorString to get information about database errors that\ncaused SetAction, Update, Retrieve, and RetrieveEx to return -1.\nExamples\nThis code in a page server script calls Retrieve for the Web DataWindow server component\ncalled dwComponent and gets information about the database error if Retrieve fails:\nretVal = dwComponent.Retrieve( );\nif (retVal < 0) {\n      Response.Write(\"Retrieval error: \" \n         + dwComponent.GetLastError( ) \n         + \"<BR>\"\n         + dwComponent.GetLastErrorString( )\n         + \"<BR>\");\n}\nSee also\nGetLastErrorString\nRetrieve\nUpdate\n9.71 GetLastErrorString (obsolete)\nDescription\n"}
{"page": 686, "text": "Methods for the DataWindow Control\nPage 686\nReturns the text of the error message for the last database error that occurred in the Web\nDataWindow server component.\nObsolete method\nGetLastErrorString is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.148:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcontrol.GetLastErrorString ( ) \nTable 9.149:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow server\ncomponent\nReturn value\nReturns a string containing an error message for the last database error that occurred.\nIf dwcontrol is null, the method returns null.\nUsage\nCall GetLastError and GetLastErrorString to get information about database errors that\ncaused SetAction, Update, Retrieve, and RetrieveEx to return -1.\nExamples\nThis code in a page server script calls Retrieve for the Web DataWindow server component\ncalled dwComponent and gets information about the database error if Retrieve fails:\nretVal = dwComponent.Retrieve( );\nif (retVal < 0) {\n      Response.Write(\"Retrieval error: \" \n         + dwComponent.GetLastError( ) \n         + \"<BR>\"\n         + dwComponent.GetLastErrorString( )\n         + \"<BR>\");\n}\nSee also\nGetLastError\nRetrieve\nUpdate\n"}
{"page": 687, "text": "Methods for the DataWindow Control\nPage 687\n9.72 GetMessageText (obsolete)\nDescription\nObtains the message text generated by a crosstab DataWindow object in a DataWindow\ncontrol. Only crosstab DataWindows generate messages.\nObsolete method\nGetMessageText is obsolete and will be discontinued in a future release. You should\nreplace all use of GetMessageText as soon as possible. The message text is available\nas an argument in a user event defined for pbm_dwnmessagetext in a DataWindow\ncontrol.\nApplies to\nTable 9.150:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nstring dwcontrol.GetMessageText ( )\nTable 9.151:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control for\nwhich you want the message text\nReturn value\nReturns the text of the message generated by dwcontrol. If there is no text or an error occurs,\nGetMessageText returns the empty string (\"\").\nIf dwcontrol is null, the method returns null.\nUsage\nTo use GetMessageText, you must first define a user-defined event for the event ID\npbm_dwnmessagetext; then you call this method in the script for that event.\nTypical messages are Retrieving data and Building crosstab.\nExamples\nThis statement is part of a script for a user-defined event with the ID pbm_dwmessagetext.\nThe style of the DataWindow object in the DataWindow control is crosstab. The statement\nsets the MicroHelp of the MDI frame window w_crosstab:\nw_crosstab.SetMicroHelp(This.GetMessageText())\n9.73 GetNextModified\nDescription\n"}
{"page": 688, "text": "Methods for the DataWindow Control\nPage 688\nReports the next row that has been modified in the specified buffer.\nApplies to\nTable 9.152:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.GetNextModified (long row, DWBuffer dwbuffer )\nTable 9.153:\nArgument Description\ndwcontrol\nA name of the DataWindow control, DataStore, or child DataWindow in which\nyou want to locate the modified row.\nrow\nA value identifying the row location after which you want to locate the\nmodified row. To search from the beginning, specify 0.\ndwbuffer\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer in which you want to locate the modified row. For a list of valid values,\nsee DWBuffer.\nReturn value\nReturns the number of the first row that was modified after row in dwbuffer in dwcontrol.\nReturns 0 if there are no modified rows after the specified row.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nPowerBuilder stores the update status of rows and columns in the DataWindow. The status\nsettings indicate whether a row or column is new or has been modified. GetNextModified\nreports rows with the status NewModified! and DataModified!.\nFor more information on the status of rows and columns, see GetItemStatus and\nSetItemStatus.\nUsing GetNextModified on the delete buffer will return rows that have been modified and\nthen deleted. The DeletedCount method will report the total number of deleted rows.\nGetNextModified begins searching in the row after the value you specify in row. This is\ndifferent from the behavior of Find, FindGroupChange, and FindRequired, which begin\nsearching in the row you specify.\nTotal number of modified rows\nYou can use the ModifiedCount method to find out the total number of modified rows\nin the primary and filter buffers.\n"}
{"page": 689, "text": "Methods for the DataWindow Control\nPage 689\nExamples\nThese statements count the number or rows that were modified in the primary buffer for\ndw_status and then display a message reporting the number modified:\ninteger rc\nlong NbrRows, ll_row = 0, count = 0\n \ndw_status.AcceptText()\nNbrRows = dw_status.RowCount()\nDO WHILE ll_row <= NbrRows\n      ll_row = dw_status.GetNextModified(ll_row, Primary!)\n      IF ll_row > 0 THEN\n         count = count + 1\n      ELSE\n         ll_row = NbrRows + 1\n      END IF\nLOOP\nMessageBox(\"Modified Count\", &\n      String(count) &\n      + \" rows were modified.\")\nSee also\nDeletedCount\nFindRequired\nGetNextModified\nModifiedCount\nSetItemStatus\n9.74 GetObjectAtPointer\nDescription\nReports the control within the DataWindow object and row number under the pointer.\nControls include columns, labels, and other graphic controls, such as lines and pictures.\nApplies to\nTable 9.154:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nstring dwcontrol.GetObjectAtPointer ( )\nTable 9.155:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nReturn value\n"}
{"page": 690, "text": "Methods for the DataWindow Control\nPage 690\nReturns the string whose value is the name of the control under the pointer, followed by a tab\ncharacter and the row number. Returns the empty string (\"\") if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nIf the object doesn't have a name, neither a name nor a row is reported. Since PowerBuilder\n7, the painter gives names to all controls. In earlier versions, only columns and column labels\ngot default names in the DataWindow painter and you could name other controls yourself.\nYou can parse the return value by searching for the tab character (ASCII 09). In\nPowerBuilder, search for ~t. For an example that parses a string that includes a tab, see\nGetValue.\nFor information on the rows associated with bands and therefore with controls in those bands,\nsee GetBandAtPointer.\nExamples\nThese statements obtain the name of the control under the pointer in the DataWindow\ndw_emp:\nString dwobjectname\ndwobjectname = dw_emp.GetObjectAtPointer()\nSome possible return values are:\nTable 9.156: Example return values for the GetObjectAtPointer method\nReturn value\nMeaning\nsalary~t23\nThe control named salary in row 23.\nsalary_h~t15\nThe control named salary_h, which is in the header. Row 15 is the first\nvisible row below the header.\nSee also\nGetBandAtPointer\n9.75 GetParent\nDescription\nObtains the parent of the specified object.\nApplies to\nTable 9.157:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nPowerObject objectname.GetParent ( )\n"}
{"page": 691, "text": "Methods for the DataWindow Control\nPage 691\nTable 9.158:\nArgument\nDescription\nobjectname\nA control in a window or user object or\nan item on a menu for which you want the\nparent object\nReturn value\nReturns a reference to the parent of objectname.\nUsage\nInherited from PowerObject. For information, see Section 2.4.313, \u201cGetParent\u201d in\nPowerScript Reference.\n9.76 GetRichTextAlign\nDescription\nGets the current alignment setting for editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.GetRichTextAlign ( REF alignment align )\nTable 9.159:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\nalign\nCurrent alignment setting of the selected text\nReturn value\nReturns an integer to indicate whether the column that you selected has the RichText edit\nstyle and whether the content has one or more alignment types applied.\n0 -- Success\n-1 -- No RichText column is being edited\n-2 -- The selected text is a mix of alignment types\nUsage\nYou can call this method from a button in a custom toolbar that you use to obtain current font\nsettings for columns with the RichText edit style.\nExamples\nThis example obtains the current alignment setting to be used for editing columns with the\nRichText edit style:\nInteger li_integer\nAlignment l_align\nli_integer = dw_1.GetRichTextAlign(l_align)\n"}
{"page": 692, "text": "Methods for the DataWindow Control\nPage 692\nSee also\nGetRichTextColor\nGetRichTextFaceName\nGetRichTextSize\nGetRichTextStyle\nSetRichTextAlign\n9.77 GetRichTextColor\nDescription\nGets the current color setting for editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.GetRichTextColor ( REF long color )\nTable 9.160:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncolor\nA long used to define the color\nReturn value\nReturns an integer to indicate whether the column that you selected has the RichText edit\nstyle and whether the content has one or more colors applied.\n0 -- Success\n-1 -- No RichText column is being edited\n-2 -- The selected text is a mix of colors\nUsage\nIf the color for columns with the RichText edit style is white, background transparency and\ngradient and text transparency will not work properly.\nYou can call this method from a button in a custom toolbar that you use to obtain current font\nsettings for columns with the RichText edit style.\nExamples\nThis example obtains the current color setting of the font to be used for editing columns with\na RichText edit style:\nInteger li_integer\nLong l_long\nli_integer = dw_1.GetRichTextColor(l_long)\nSee also\n"}
{"page": 693, "text": "Methods for the DataWindow Control\nPage 693\nGetRichTextAlign\nGetRichTextFaceName\nGetRichTextSize\nGetRichTextStyle\nSetRichTextColor\n9.78 GetRichTextFaceName\nDescription\nGets the current typeface setting for editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.GetRichTextFaceName ( REF string typeface )\nTable 9.161:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ntypeface\nA string used to define the type\nReturn value\nReturns an integer to indicate whether the column that you selected has the RichText edit\nstyle and whether the content has one or more fonts applied.\n0 -- Success\n-1 -- No RichText column is being edited\n-2 -- The selected text is a mix of fonts\nUsage\nYou can call this method from a button in a custom toolbar that you use to obtain current font\nsettings for columns with the RichText edit style.\nExamples\nThis example obtains the typeface of the font to be used for editing columns with a RichText\nedit style:\nInteger li_integer\nString ls_string\nli_integer = dw_1.GetRichTextFaceName(ls_string)\nIf Tahoma font is selected when the above script is called, ls_string is Tahoma and the\nmethod returns 0. If a mix of fonts is selected, ls_string is blank and the method returns -2.\nSee also\nGetRichTextAlign\nGetRichTextColor\n"}
{"page": 694, "text": "Methods for the DataWindow Control\nPage 694\nGetRichTextSize\nGetRichTextStyle\nSetRichTextFaceName\n9.79 GetRichTextSize\nDescription\nGets the current font size setting for editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.GetRichTextSize ( REF integer size )\nTable 9.162:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\nsize\nValue indicating the point size of the font; if\nthe selected text is a mix of sizes, the value is\n0\nReturn value\nReturns an integer to indicate whether the column that you selected has the RichText edit\nstyle and whether the content has one or more sizes applied.\n0 -- Success\n-1 -- No RichText column is being edited\n-2 -- The selected text is a mix of sizes\nUsage\nYou can call this method from a button in a custom toolbar that you use to obtain current font\nsettings for columns with the RichText edit style.\nExamples\nThis example obtains the current size setting of the font to be used for editing columns with a\nRichText edit style:\nInteger li_integer\nInteger li_textsize\nli_integer = dw_1.GetRichTextSize(li_textsize)\nIf 10 point text is selected when the above script is called, li_textsize is 10 and the method\nreturns 0. If a mix of sizes is selected, li_textsize is 0 and the method returns -2.\nSee also\nGetRichTextAlign\nGetRichTextColor\n"}
{"page": 695, "text": "Methods for the DataWindow Control\nPage 695\nGetRichTextFaceName\nGetRichTextStyle\nSetRichTextSize\n9.80 GetRichTextStyle\nDescription\nDetermines whether selected text or text at the cursor in a RichText column has a specified\nformatting.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.GetRichTextStyle ( TextStyle style, REF boolean state )\nTable 9.163:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\nstyle\nValue for specifying a text style. Allowable\nvalues are:\nbold!\nitalic!\nstrikeout!\nsubscript!\nsuperscript!\nunderlined!\nstate\nIndicates whether the selected text or text at\nthe cursor position has a style applied to it\nReturn value\nReturns an integer to indicate whether the column that you selected has the RichText edit\nstyle and whether the content has one or more styles applied.\n0 -- Success\n-1 -- No RichText column is being edited\n-2 -- The selected text is a mix of styles\nUsage\nYou can call this method from a button in a custom toolbar that you use to obtain the current\nfont settings for columns with the RichText edit style.\nExamples\nThis example determines whether a bold font is the current style setting for editing columns\nwith a RichText edit style.\nInteger li_style\n"}
{"page": 696, "text": "Methods for the DataWindow Control\nPage 696\nBoolean lb_state\nli_style = dw_1.GetRichTextStyle(bold!, lb_state)\nIf bold text is selected when the above script is called, the lb_state argument is true, and the\nmethod returns 0. If mixed text is selected, such as bold and italic, lb_state is true, and the\nmethod returns -2.\nSee also\nGetRichTextAlign\nGetRichTextColor\nGetRichTextFaceName\nGetRichTextSize\nSetRichTextStyle\n9.81 GetRow\nDescription\nReports the number of the current row in a DataWindow control or DataStore object.\nApplies to\nTable 9.164:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.GetRow ( )\nTable 9.165:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or the child DataWindow\nReturn value\nReturns the number of the current row in dwcontrol. Returns 0 if no row is current and -1 if\nan error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nCurrent row not always displayed\nThe current row is not always a row displayed on the screen. For example, if the\ncursor is on row 7 column 2 and the user uses the scroll bar to scroll to row 50, the\ncurrent row remains row 7 unless the user clicks row 50.\nExamples\n"}
{"page": 697, "text": "Methods for the DataWindow Control\nPage 697\nThis statement returns the number of the current row in dw_Employee:\ndw_employee.GetRow()\nSee also\nGetColumn\nSetColumn\nSetRow\n9.82 GetRowFromRowId\nDescription\nGets the row number of a row in a DataWindow control or DataStore object from the unique\nrow identifier associated with that row.\nApplies to\nTable 9.166:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.GetRowFromRowId (long rowid {, DWBuffer buffer } )\nTable 9.167:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrowid\nA number specifying the row identifier for which you want the associated\nrow number.\nbuffer\n(optional)\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer that contains the row.\nFor a list of valid values, see DWBuffer.\nReturn value\nReturns the row number in buffer. Returns 0 if the row number is not in the current buffer\nand -1 if an error occurs.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nThis method allows you to use a unique row identifier to retrieve the associated DataWindow\nor DataStore row number. The row identifier is not affected by operations (such as Insert,\nDelete, or Filter) that might change the original order (and consequently the row numbers) of\nthe rows in the DataWindow or DataStore.\n"}
{"page": 698, "text": "Methods for the DataWindow Control\nPage 698\nRow identifiers\nThe row identifier is relative to the DataWindow that currently owns the row.\nExamples\nThis example uses the row identifier previously obtained using the GetRowIdFromRow\nmethod to retrieve the row's number after the original order of the rows in the DataWindow\nhas changed.\nlong ll_rowid\nlong ll_rownumber\n \nll_rowid = dw_1.GetRowIdFromRow(dw_1.GetRow())\n// suppose original order of rows changes...\nll_rownumber = dw_1.GetRowFromRowId(ll_rowid)\nSee also\nGetRow\nGetRowIdFromRow\n9.83 GetRowIdFromRow\nDescription\nGets the unique row identifier of a row in a DataWindow control or DataStore object from\nthe row number associated with that row.\nApplies to\nTable 9.168:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.GetRowIdFromRow (long rownumber {, DWBuffer buffer } )\nTable 9.169:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or the child\nDataWindow.\nrownumber\nA number specifying the row number for which you want the associated\nrow identifier.\nbuffer (optional)\nA value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer that contains the row. For a list of valid values, see\nDWBuffer.\nReturn value\n"}
{"page": 699, "text": "Methods for the DataWindow Control\nPage 699\nReturns the row identifier in buffer. Returns 0 if the row identifier is not in the current buffer\nand -1 if an error occurs.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nThe row identifier value is not the same as the row number value used in many\nDataWindow and DataStore function calls and should not be used for the row number value.\nInstead you should first convert the unique row identifier into a row number by calling\nGetRowFromRowId.\nRow identifiers\nThe row identifier is relative to the DataWindow that currently owns the row.\nExamples\nThis example retrieves the current row's unique identifier:\nlong ll_rowid\nll_rowid = dw_emp.GetRowIDFromRow(dw_emp.GetRow())\nSee also\nGetRow\nGetRowFromRowId\n9.84 GetSelectedRow\nDescription\nReports the number of the next highlighted row after a specified row in a DataWindow\ncontrol or DataStore object.\nApplies to\nTable 9.170:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.GetSelectedRow ( long row )\nTable 9.171:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow.\nrow\nA value identifying the location of the row\nafter which you want to search for the next\n"}
{"page": 700, "text": "Methods for the DataWindow Control\nPage 700\nArgument\nDescription\nselected row. Specify 0 to begin searching at\nthe first row.\nReturn value\nReturns the number of the first row that is selected after row in dwcontrol. Returns 0 if no\nrow is selected after the specified row.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nRows are not automatically selected -- that is, highlighted -- when they become current. You\ncan select a row by calling the SelectRow method.\nGetSelectedRow begins its search after the specified row. It does not matter whether row\nitself is selected.\nExamples\nThis statement returns the number of the first row that is selected in dw_Employee:\ndw_employee.GetSelectedRow(0)\nThis statement returns the number of the first row that is selected beginning with row 25 in\ndw_Employee:\ndw_employee.GetSelectedRow(25)\nSee also\nSelectRow\n9.85 GetSQLPreview (obsolete)\nDescription\nReports the SQL statement that the DataWindow control is currently submitting to the\ndatabase.\nObsolete method\nGetSQLPreview is obsolete and will be discontinued in a future release. You should\nreplace all references to GetSQLPreview as soon as possible. The SQL syntax is\navailable as an argument in the DBError and SQLPreview events.\nApplies to\nTable 9.172:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\n"}
{"page": 701, "text": "Methods for the DataWindow Control\nPage 701\nPowerBuilder\nstring dwcontrol.GetSQLPreview ( )\nTable 9.173:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nchild DataWindow\nReturn value\nReturns the current SQL statement for dwcontrol. Returns the empty string (\"\") if an error\noccurs.\nIf dwcontrol is null, the method returns null.\nSee also\nSetSQLPreview\n9.86 GetSQLSelect\nDescription\nReports the SQL SELECT statement associated with a DataWindow if its data source is one\nthat accesses a SQL database (such as SQL Select, Quick Select, or Query).\nApplies to\nTable 9.174:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.GetSQLSelect ( )\nTable 9.175:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns the current SQL SELECT statement for dwcontrol. GetSQLSelect returns the empty\nstring (\"\") if it cannot return the statement.\nIf dwcontrol is null, the method returns null.\nUsage\n"}
{"page": 702, "text": "Methods for the DataWindow Control\nPage 702\nWhen you want to change the SQL SELECT statement for a DataWindow or DataStore at\nruntime, you can use GetSQLSelect to save the current SELECT statement before making the\nchange.\nWhen you define a DataWindow, PowerBuilder stores a PowerBuilder SELECT statement\n(PBSELECT) with the DataWindow. If a database is connected and SetTransObject has\nbeen called for the DataWindow, then GetSQLSelect returns the SQL SELECT statement.\nOtherwise, GetSQLSelect returns the PBSELECT statement.\nYou can also use Describe to obtain the SQL SELECT statement. The DataWindow object's\nTable.Select property holds the information.\nExamples\nThe code saves the SELECT statement for dw_emp in the variable old_select. Then it adds a\nWHERE clause. The example assumes the old SELECT statement did not have one already:\nstring old_select, new_select, where_clause\n// Get old SELECT statement\nold_select = dw_emp.GetSQLSelect()\n \n// Specify new WHERE clause\nwhere_clause = \"WHERE ...\"\n// Add the new where clause to old_select\nnew_select = old_select + where_clause\n \n// Set the SELECT statement for the DW\ndw_emp.SetSQLSelect(new_select)\nSee also\nSetSQLSelect\n9.87 GetStateStatus (obsolete)\nDescription\nRetrieves the current status of the internal state flags for a DataWindow and places this\ninformation in a blob.\nThis method is used primarily in distributed applications.\nObsolete method\nGetStateStatus is obsolete and will be discontinued in a future release. You should\nremove all use of GetStateStatus as soon as possible. This method was originally\nadded to PowerScript to allow you to synchronize a source DataWindow with\nmultiple target DataWindows. This technique is no longer supported.\nApplies to\nTable 9.176:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\n"}
{"page": 703, "text": "Methods for the DataWindow Control\nPage 703\nPowerBuilder\nlong dwcontrol.GetStateStatus ( blob cookie )\nTable 9.177:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control or\nDataStore for which you want to get state\nstatus\ncookie\nA variable in which you want to store a\ncookie that contains state information for the\nDataWindow\nReturn value\nReturns 1 if it succeeds and -1 if it fails.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nIn situations where a single DataStore on a server acts as the source for multiple target\nDataWindows (or DataStores) on different clients, you can use GetChanges in conjunction\nwith GetStateStatus to determine the likely success of SetChanges. This allows you to avoid\nshipping a change blob across the wire when SetChanges will fail anyway (because changes\nin the blob conflict with changes made previously by another client).\nTo determine the likely success of SetChanges, you need to:\n1. Call the GetStateStatus method on the DataStore on which you want to do a SetChanges.\nGetStateStatus checks the state of the DataStore and makes the state information available\nin a reference argument called a cookie. The cookie is generally much smaller than a\nDataWindow change blob.\n2. Send the cookie back to the client.\n3. Call the GetChanges method on the DataWindow that contains the changes you want to\napply, passing the cookie retrieved from GetStateStatus as a parameter. The return value\nfrom GetChanges indicates whether there are currently any potential conflicts between the\nstate of the DataWindow blob and the state of the DataStore on which you want to execute\nSetChanges.\nIf the return value from GetChanges indicates that there are potential conflicts, you can then\nbe certain that a subsequent call to SetChanges will fail if the FailOnAnyConflict! argument\nis specified. On the other hand, if the return value from GetChanges indicates no conflicts,\nthe call to SetChanges may still fail, because the state of the Datastore may have changed\nsince you called GetStateStatus and GetChanges.\nFor example, if another client session has called SetChanges or some other processing has\nbeen executed that altered the state of the DataStore since you retrieved the cookie, then\nSetChanges will fail.\nExamples\n"}
{"page": 704, "text": "Methods for the DataWindow Control\nPage 704\nThe following example is a script for a remote object function. The script uses GetStateStatus\nto capture the state of a DataStore on the server into a cookie. Once the cookie has been\ncreated, it is returned to the client:\nblob lblb_cookie\nlong ll_rv\nll_rv = ids_datastore.GetStateStatus(lblb_cookie)\nreturn lblb_cookie\nSee also\nGetChanges\nGetFullState\nSetChanges\nSetFullState\n9.88 GetText\nDescription\nObtains the value in the edit control over the current row and column. When the user changes\na value in a DataWindow, it is available in the edit control before it is accepted into the\ncolumn.\nApplies to\nTable 9.178:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.GetText ( )\nTable 9.179:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns the value in the edit control over the current row and column in dwcontrol. The value\nmight or might not have been accepted into the row and column. Returns the empty string (\"\n\") if no column is currently selected in dwcontrol.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nThe values in the rows and columns of a DataWindow are items in the DataWindow's buffer.\nWhen a user edits a value in a row and column, the item value is transferred as text to an edit\n"}
{"page": 705, "text": "Methods for the DataWindow Control\nPage 705\ncontrol in which the user can change the value. When the user leaves the column or when a\nscript calls AcceptText, the text in the edit control is accepted into the column and becomes\nthe value of the item in the buffer.\nYou do not need to call GetText in the script for the ItemChanged or ItemError event. To\ncheck the value entered in the edit control over the current row and column before allowing it\nto be accepted into the column, use the data argument.\nTo obtain the value stored in the DataWindow's buffer for the row and column, use the\nGetItem method that corresponds with the datatype of the column.\nExamples\nThis statement returns the text held in the edit control for the currently selected cell in\ndwEmp to the string variable selectedCell. The text might be a name or address for a column\nwith the Edit edit style, Y or N for a column with the CheckBox edit style, or A, T, or L for a\ncolumn with the RadioButtons edit style that represents the employment status:\nstring selectedCell\nselectedCell = dwEmp.GetText()\nSee also\nSetText\n9.89 GetTrans\nDescription\nGets the values for the DataWindow control or DataStore object's internal transaction object\nand stores these values in the programmer-specified transaction object.\nApplies to\nTable 9.180:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.GetTrans ( transaction transaction )\nTable 9.181:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\ntransaction\nThe name of the transaction object into\nwhich you want to put the values\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. The return value is usually not used.\n"}
{"page": 706, "text": "Methods for the DataWindow Control\nPage 706\nIf any argument value is null, the method returns null.\nUsage\nThe SetTrans method (not the SetTransObject method) sets the internal transaction object. If\nyou have not called SetTrans, GetTrans will fail.\nUse GetTrans when you want to get the values for the transaction object in order to modify\nthem, as shown in the last example.\nIf you are using SetTransObject, which specifies transaction information using a\nprogrammer-specified transaction object, GetTrans will not report information about\nthe programmer-specified transaction object currently in effect. (SetTransObject is the\nrecommended connection method because it gives better application performance. See\nSetTrans and SetTransObject for more information.)\nExamples\nThis example puts the values in the internal transaction object for dw_employee into the\nprogrammer-specified transaction object named object1:\ntransaction object1\nobject1 = CREATE transaction\ndw_employee.GetTrans(object1)\nThe following statement puts the values in the internal transaction object for dw_employee\ninto the default transaction object (SQLCA):\ndw_employee.GetTrans(SQLCA)\nThe following statements change the database type and password of dw_employee. The first\ntwo statements create the transaction object emp_TransObj. The next two statements use the\nSetTrans method to set the values of SQLCA, and then use the GetTrans method to store the\nvalues of the current transaction object for dw_employee in emp_TransObj. The last two\nstatements change the database type and password, and then the SetTrans method puts the\nrevised values in the transaction object for dw_employee:\n// Name the transaction object.\ntransaction emp_TransObj\n \n// Create the transaction object.\nemp_TransObj = CREATE transaction\n \n// Set the internal transaction object.\ndw_employee.SetTrans(SQLCA)\n \n// Fill the new transaction object with original\n// values from SQLCA.\ndw_employee.GetTrans(emp_TransObj)\n \n// Put revised values into the new transaction\n// object.\n// Change the database type.\nemp_TransObj.DBMS = \"Sybase\"\n \n// Change the password.\nemp_TransObj.LogPass = \"cam2\"\n \n// Associate the new transaction object with\n// dw_employee, replacing SQLCA.\ndw_employee.SetTrans(emp_TransObj)\n"}
{"page": 707, "text": "Methods for the DataWindow Control\nPage 707\nSee also\nSetTrans\n9.90 GetUpdateStatus (obsolete)\nDescription\nReports the row number and buffer of the row that is currently being updated in the database.\nWhen called because of an error, GetUpdateStatus reports the row that caused the error.\nObsolete method\nGetUpdateStatus is obsolete and will be discontinued in a future release. You should\nreplace all references to GetUpdateStatus as soon as possible. The update status is\navailable as an argument in the DBError and SQLPreview events.\nApplies to\nTable 9.182:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\ninteger dwcontrol.GetUpdateStatus (long row, DWBuffer dwbuffer )\nTable 9.183:\nArgument Description\ndwcontrol\nA reference to a DataWindow control or child DataWindow.\nrow\nA variable that will store the number of the row that will be updated or for\nwhich an update was attempted.\ndwbuffer\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer that contains the row being updated. For a list of valid values, see\nDWBuffer.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. The number and buffer of the row currently\nbeing updated are stored in row and dwbuffer.\nIf any argument value is null, the method returns null.\nExamples\nThese statements in the script for the DBError event for a DataWindow control obtain the\ntext of the error message, display a message box with the number of the row in which the\nerror occurred and the error message, and then make the row with the error the current row.\nAdditional code in the IF statement considers the case of the bad row being in the filter or\ndelete buffer. If the row is in the filter buffer, the script changes the filter so that the user can\n"}
{"page": 708, "text": "Methods for the DataWindow Control\nPage 708\nedit the row in the primary buffer. If the row is in the delete buffer, the message box displays\na slightly different title:\nlong row_number, row_key\ndwBuffer buffer_type\nstring message_text, message_title, old_filter\n \n// Get the error message text and set the title\nmessage_text = DBErrorMessage()\nmessage_title = \"Database Error Updating Row\"\n \n// Get the row in which the error occurred\nThis.GetUpdateStatus(row_number, buffer_type)\n \nIF buffer_type = Filter! THEN\n      old_filter = This.Describe(\"DataWindow.Filter\")\n      row_key = This.GetItemNumber(row_number, &\n         \"emp_id\", Filter!, false)\n \n      This.SetFilter(\"(\" + old_filter + \")\" + &\n         \"OR emp_id = \" + String(row_key))\n      This.Filter()\n \n      // Error row is now last row in primary buffer\n      row_number = This.RowCount()\n \nELSEIF buffer_type = Delete! THEN\n      message_title = \"Database Error Deleting Row\"\n \nEND IF\n// Display the location of the error and the error\n// message.\nMessageBox(message_title + &\n      String(row_number), message_text)\n \nIF buffer_type <> Delete! THEN\n      // Make the row with the error the current row.\n      This.ScrollToRow(row_number)\nEND IF\n// Return 1 from the DBError event\n// (do not display error message) because we've\n// already displayed a message\nRETURN 1\nSee also\nGetItemStatus\n9.91 GetValidate\nDescription\nObtains the validation rule for a column in a DataWindow.\nApplies to\nTable 9.184:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\n"}
{"page": 709, "text": "Methods for the DataWindow Control\nPage 709\nSyntax\nPowerBuilder\nstring dwcontrol.GetValidate ( string column )\nstring dwcontrol.GetValidate ( integer column )\nTable 9.185:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\ncolumn\nThe column for which you want the validation rule. Column can be a column\nnumber or a column name. The column number is the number of the column as\nit is listed in the Column Specification view of the DataWindow painter -- not\nnecessarily the number of the column in the Design view.\nReturn value\nReturns the validation rule for column in dwcontrol. Returns the empty string (\"\") if no\nvalidation criteria are defined for the column.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nYou can use GetValidate to save the current validation rule before calling SetValidate to\nchange the rule temporarily.\nExamples\nThese statements change the validation rule for column 7 in the DataWindow control\ndw_Employee to Rule2:\nstring Rule1, Rule2 = \"Long(GetText()) > 15000\"\nRule1 = dw_Employee.GetValidate(7)\ndw_Employee.SetValidate(7, Rule2)\nSee also\nSetValidate\n9.92 GetValue\nDescription\nObtains the value of an item in a value list or code table associated with a column in a\nDataWindow.\nApplies to\nTable 9.186:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\n"}
{"page": 710, "text": "Methods for the DataWindow Control\nPage 710\nPowerBuilder\nstring dwcontrol.GetValue ( string column, integer index )\nstring dwcontrol.GetValue ( integer column, integer index )\nTable 9.187:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\ncolumn\nThe column for which you want the item. Column can be a column number\n(integer) or a column name (string).\nindex\nThe number of the item in the value list or the code table for the edit style.\nReturn value\nReturns the item identified by index in the value list or the code table associated with column\nof dwcontrol. If the item has a display value that is not the actual value, GetValue returns a\ntab-separated string consisting of:\ndisplayvalue[tab]codevalue \nReturns the empty string (\" \") if the index is not valid or the column does not have a value list\nor code table.\nIf any argument value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nYou can use GetValue to find out the values associated with the following edit styles:\nCheckBox, RadioButton, DropDownListBox, Edit Mask, and Edit. If the edit style has a code\ntable in which each value in the list has a display value and a data value, GetValue reports\nboth values.\nGetValue does not get values from a DropDownDataWindow code table.\nYou can parse the return value by searching for the tab character (ASCII 09). In\nPowerBuilder, search for ~t.\nExamples\nIf the value list for column 7 of dw_employee contains Full Time, Part Time, Retired, and\nTerminated, these statements return the value of item 3 (Retired):\nstring Status\nStatus = dw_employee.GetValue(7,3)\nIf the value list for the column named product of dw_employee is Widget[tab]1,\nGadget[tab]2, the following code returns Gadget[tab]2 and saves the display value in a string\nvariable:\nstring ls_prodinfo, ls_prodname, ls_prodnum\ninteger li_tab\n \nls_prodinfo = dw_employee.GetValue(\"product\", 2)\n \nli_tab = Pos(ls_prodinfo, \"~t\", 1)\nls_prodname = Left(ls_prodinfo, li_tab - 1)\nls_prodnum = Mid(ls_prodinfo, li_tab + 1)\n"}
{"page": 711, "text": "Methods for the DataWindow Control\nPage 711\nSee also\nClearValues\nSetValue\n9.93 GroupCalc\nDescription\nRecalculates the breaks in the grouping levels in a DataWindow.\nApplies to\nTable 9.188:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.GroupCalc ( )\nTable 9.189:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nUse GroupCalc to force the DataWindow object to recalculate the breaks in the grouping\nlevels after you have added or modified rows in a DataWindow.\nGroupCalc does not sort the data before it recalculates the breaks. Therefore, unless you\npopulated the DataWindow in a sorted order, call the Sort method to sort the data before you\ncall GroupCalc.\nExamples\nThis code imports new rows from a file into the DataWindow dw_emp and then recalculates\nthe group breaks for dw_emp:\ndw_emp.ImportFile(\"d:\\employee.txt\")\ndw_emp.SetRedraw(false)\ndw_emp.SetSort(\"1A\")\ndw_emp.Sort()\ndw_emp.GroupCalc()\ndw_emp.SetRedraw(true)\n"}
{"page": 712, "text": "Methods for the DataWindow Control\nPage 712\nSee also\nSort\n9.94 Hide\nDescription\nMakes an object or control invisible. Users cannot interact with an invisible object. It does\nnot respond to any events, so the object is also, in effect, disabled.\nApplies to\nTable 9.190:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger objectname.Hide ( )\nTable 9.191:\nArgument\nDescription\nobjectname\nThe name of the object or control you want\nto make invisible\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If objectname is null, Hide returns null.\nUsage\nInherited from GraphicObject. For information, see Section 2.4.373, \u201cHide\u201d in PowerScript\nReference.\n9.95 ImportClipboard\nDescription\nInserts data into a DataWindow control or DataStore object from tab-separated, comma-\nseparated, or XML data on the clipboard.\nApplies to\nTable 9.192:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\n"}
{"page": 713, "text": "Methods for the DataWindow Control\nPage 713\nPowerBuilder\nlong dwcontrol.ImportClipboard ( {saveastype importtype} {, long startrow {, long\n endrow {, long startcolumn {, long endcolumn {, long dwstartcolumn } } } } } )\nTable 9.193:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child\nDataWindow.\nimporttype\n(optional for\nPowerBuilder)\nAn enumerated value of the SaveAsType DataWindow constant or a\nnumber representing that value (see SaveAsType). Valid import type\narguments for ImportClipboard are:\nText!\nCSV!\nXML!\nIf you want to generate an XML trace file, the XML! argument is\nrequired.\nstartrow (optional\nfor PowerBuilder)\nThe number of the first detail row in the clipboard that you want to\ncopy. The default is 1.\nFor default XML import, if startrow is supplied, the first N (startrow\n-1) elements are skipped, where N is the DataWindow row size.\nFor template XML import, if startrow is supplied, the first (startrow -1)\noccurrences of the repetitive row mapping defined in the template are\nskipped.\nendrow (optional\nfor PowerBuilder)\nThe number of the last detail row in the clipboard that you want to\ncopy. The default is the rest of the rows.\nFor default XML import, if endrow is supplied, import stops when N\n* endrow elements have been imported, where N is the DataWindow\nrow size.\nFor template XML import, if endrow is supplied, import stops after\nendrow occurrences of the repetitive row mapping defined in the\ntemplate have been imported.\nstartcolumn\n(optional for\nPowerBuilder)\nThe number of the first column in the clipboard that you want to copy.\nThe default is 1.\nFor default XML import, if startcolumn is supplied, import skips the\nfirst (startcolumn - 1) elements in each row.\nThis argument has no effect on template XML import.\nendcolumn\n(optional for\nPowerBuilder)\nThe number of the last column in the clipboard that you want to copy.\nThe default is the rest of the columns.\nFor default XML import, if endcolumn is supplied and is smaller than\nN, where N is the DataWindow row size, import skips the last (N -\nendcolumn) elements in each row.\nThis argument has no effect on template XML import.\n"}
{"page": 714, "text": "Methods for the DataWindow Control\nPage 714\nArgument\nDescription\ndwstartcolumn\n(optional for\nPowerBuilder)\nThe number of the first column in the DataWindow control or\nDataStore that should receive data. The default is 1. This argument is\nsupported for default and template XML import.\nReturn value\nReturns the number of rows that were imported if it succeeds and one of the following\nnegative integers if an error occurs:\n-1 -- No row is supplied or the startrow value supplied is greater than the number of rows in\nthe string\n-3 -- Invalid argument\n-4 -- Invalid input\n-11 -- XML Parsing Error; XML parser libraries not found or XML not well formed\n-12 -- XML Template does not exist or does not match the DataWindow\n-13 -- Unsupported DataWindow style for import\n-14 -- Error resolving DataWindow nesting\nUsage\nThe clipboard data must be formatted in tab-separated or comma-separated columns or in\nXML. The datatypes and order of the DataWindow object's columns must match the data on\nthe clipboard.\nIf an XML or CSV column contains a leading double quote, it is assumed to be part of the\ncolumn value. A leading double quote has to be closed to mark the end of an item.\nAll the arguments of this function are optional. You do not need to specify the importtype\nargument. The startcolumn and endcolumn arguments control the number of imported\ncolumns and the number of columns in the DataWindow that are affected. The dwstartcolumn\nargument specifies the first DataWindow column to be affected. The following formula\ncalculates the last column to be affected.\ndwstartcolumn + (endcolumn - startcolumn)\nImportClipboard does not support Crosstab DataWindow objects.\nExamples\nThis statement copies all data in the clipboard to the DataWindow dw_employee starting at\nthe first column:\ndw_employee.ImportClipboard()\nThis statement copies all data in the clipboard to the DataWindow dw_employee starting at\nthe first column and specifies that the data is in XML format:\ndw_employee.ImportClipboard(XML!)\nThis statement imports rows 1 to 200 of the XML data on the clipboard, ignoring any\ntemplate mappings before column 5:\ndw_employee.ImportClipboard(XML!, 1, 200, 0, 0, 5)\n"}
{"page": 715, "text": "Methods for the DataWindow Control\nPage 715\nThis statement inserts data from the clipboard into the DataWindow dw_employee. It copies\nrows 2 through 30 and columns 3 through 8 on the clipboard to the DataWindow beginning\nin column 5. It adds 29 rows to the DataWindow with data in columns 5 through 10:\ndw_employee.ImportClipboard(2,30,3,8,5)\nSee also\nImportFile\nImportString\n9.96 ImportFile\nDescription\nInserts data into a DataWindow control or DataStore from a file. The data can be tab-\nseparated text, comma-separated text, XML, or dBase format 2 or 3.\nApplies to\nTable 9.194:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.ImportFile ( {saveastype importtype}, string filename {,\n long startrow {, long endrow {, long startcolumn {, long endcolumn {, long\n dwstartcolumn } } } } } )\nTable 9.195:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore\nimporttype\n(optional for\nPowerBuilder)\nAn enumerated value of the SaveAsType DataWindow constant or a\nnumber representing that value (see SaveAsType). If this argument is\nspecified, the filename argument can be specified without an extension.\nValid type arguments for ImportFile are:\nText!\nCSV!\nXML!\nDBase2!\nDBase3!\nfilename\nA string whose value is the name of the file from which you want\nto copy data. The file must be an ASCII, tab-separated file (TXT)\nor a comma-separated file (CSV), Extensible Markup Language file\n(XML), or dBase format 2 or 3 file (DBF). Specify the file's full name.\nIf the optional importtype is not specified, the name must end in the\nappropriate extension.\n"}
{"page": 716, "text": "Methods for the DataWindow Control\nPage 716\nArgument\nDescription\nIf filename is an empty string, or if it is null, ImportFile displays the\nFile Open dialog box and allows the user to select a file. The remaining\narguments are ignored.\nstartrow (optional\nfor PowerBuilder)\nThe number of the first detail row in the file that you want to copy. The\ndefault is 1.\nFor default XML import, if startrow is supplied, the first N (startrow\n-1) elements are skipped, where N is the DataWindow row size.\nFor template XML import, if startrow is supplied, the first (startrow -1)\noccurrences of the repetitive row mapping defined in the template are\nskipped.\nendrow (optional\nfor PowerBuilder)\nThe number of the last detail row in the file that you want to copy. The\ndefault is the rest of the rows.\nFor default XML import, if endrow is supplied, import stops when N *\nendrow elements have been imported, where N is the DataWindow row\nsize.\nFor template XML import, if endrow is supplied, import stops after\nendrow occurrences of the repetitive row mapping defined in the\ntemplate have been imported.\nstartcolumn\n(optional for\nPowerBuilder)\nThe number of the first column in the file that you want to copy. The\ndefault is 1.\nFor default XML import, if startcolumn is supplied, import skips the\nfirst (startcolumn - 1) elements in each row.\nThis argument has no effect on template XML import.\nendcolumn\n(optional for\nPowerBuilder)\nThe number of the last column in the file that you want to copy. The\ndefault is the rest of the columns.\nFor default XML import, if endcolumn is supplied and is smaller than\nN, where N is the DataWindow row size, import skips the last (N -\nendcolumn) elements in each row.\nThis argument has no effect on template XML import.\ndwstartcolumn\n(optional for\nPowerBuilder)\nThe number of the first column in the DataWindow control or\nDataStore that should receive data. The default is 1. This argument is\nsupported for default and template XML import.\nEvents\nImportFile may trigger an ItemError event.\nReturn value\nLong. Returns the number of rows that were imported if it succeeds and one of the following\nnegative integers if an error occurs:\n-1 -- No rows or startrow value supplied is greater than the number of rows in the file\n-2 -- Empty file\n"}
{"page": 717, "text": "Methods for the DataWindow Control\nPage 717\n-3 -- Invalid argument\n-4 -- Invalid input\n-5 -- Could not open the file\n-6 -- Could not close the file\n-7 -- Error reading the text\n-8 -- Unsupported file name suffix (must be *.txt, *.csv, *.dbf or *.xml)\n-10 -- Unsupported dBase file format (not version 2 or 3)\n-11 -- XML Parsing Error; XML parser libraries not found or XML not well formed\n-12 -- XML Template does not exist or does not match the DataWindow\n-13 -- Unsupported DataWindow style for import\n-14 -- Error resolving DataWindow nesting\n-15 -- File size exceeds limit\nUsage\nThe format of the file can be indicated by specifying the optional importtype parameter, or by\nincluding the appropriate file extension.\nThe file should consist of rows of data. If the file includes column headings or row labels,\nset the startrow and startcolumn arguments to skip them. The datatypes and order of the\nDataWindow object's columns must match the columns of data in the file.\nThe startcolumn and endcolumn arguments control the number of columns imported from\nthe file and the number of columns in the DataWindow that are affected. The dwstartcolumn\nargument specifies the first DataWindow column to be affected. The following formula\ncalculates the last DataWindow to be affected.\ndwstartcolumn + (endcolumn - startcolumn)\nTo let users select the file to import, specify a null string for filename. PowerBuilder displays\nthe Select Import File dialog box. A drop-down list lets the user select the type of file to\nimport.\nSpecifying a null string for filename\nIf you specify a null string for filename, the remaining arguments are ignored. All the\nrows and columns in the file are imported.\nDouble quotes\nThe location and number of double quote marks in a field in a tab-separated file affect how\nthey are handled when the file is imported. If a string is enclosed in one pair of double quotes,\nthe quotes are discarded. If it is enclosed in three pairs of double quotes, one pair is retained\nwhen the string is imported. If the string is enclosed in two pairs of double quotes, the first\npair is considered to enclose a null string, and the rest of the string is discarded.\nWhen there is a double quote at the beginning of a string, any characters after the second\ndouble quote are discarded. If there is no second double quote, the tab or comma character\ndelimiting the fields is not recognized as a field separator and all characters up to the next\n"}
{"page": 718, "text": "Methods for the DataWindow Control\nPage 718\noccurrence of a double quote, including a carriage return, are considered to be part of the\nstring. A validation error is generated if the combined strings exceed the length of the first\nstring.\nDouble quotes after the first character in the string are rendered literally. Here are some\nexamples of how tab-separated strings are imported into a two-column DataWindow:\nTable 9.196: Examples of strings imported into a two-column DataWindow\nText in file\nResult\n\"Joe\" TAB \"Donaldson\"\nJoe Donaldson\nBernice TAB \"\"\"Ramakrishnan\"\"\"\nBernice \"Ramakrishnan\"\n\"\"Mary\"\" TAB \"\"Li\"\"\nEmpty cells\n\"Mich\"ael TAB \"\"\"Mariam\"\"\"\nMich \"Mariam\"\n\"Amy TAB Doherty\"\nAmy<TAB>Doherty in first cell, second cell\nempty\n3\"\"\" TAB 4\"\n3\"\"\" 4\"\nIf an XML or CSV column contains a leading double quote, it is assumed to be part of the\ncolumn value. A leading double quote has to be closed to mark the end of an item.\nImportFile does not support Crosstab DataWindow objects.\nExamples\nThis statement inserts all the data in the file D:\\TMP\\EMPLOYEE.CSV into dw_employee\nstarting at the first column:\ndw_employee.ImportFile(\"D:\\TMP\\EMPLOYEE.CSV\")\nThis statement inserts all the data in the file D:\\TMP\\EMPLOYEE.XML into dw_employee\nstarting at the first column:\ndw_employee.ImportFile(XML!,\"D:\\TMP\\EMPLOYEE\")\nThe following statements are equivalent. Both import the contents of the XML file named\nmyxmldata:\ndw_control.ImportFile(\"myxmldata.xml\")\ndw_control.ImportFile(XML!, \"myxmldata\")\nThis statement imports rows 1 to 200 of employee.xml, ignoring any template mappings\nbefore column 5:\ndw_employee.ImportFile(XML!,\"D:\\TMP\\EMPLOYEE.XML\", 1, 200, 0, 0, 5)\nThis statement inserts the data from the file D:\\TMP\\EMPLOYEE.TXT into the\nDataWindow dw_employee. It copies rows 2 through 30 and columns 3 through 8 in the file\nto the DataWindow beginning in column 5. The result is 29 rows added to the DataWindow\nwith data in columns 5 through 10:\ndw_employee.ImportFile(\"D:\\TMP\\EMPLOYEE.TXT\", &\n   2, 30, 3, 8, 5)\nSee also\n"}
{"page": 719, "text": "Methods for the DataWindow Control\nPage 719\nImportClipboard\nImportString\n9.97 ImportJson\nDescription\nInserts data from a JSON string into a DataWindow control, DataStore object, or\nDataWindowChild object according to the index of the JSON item.\nThe JSON string must be in the format described in Section 4.7.1, \u201cSupported JSON formats\u201d\nin Application Techniques.\nImportJson function will fail to import data properly, if the DataWindow is in query mode.\nApplies to\nTable 9.197:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, and DataStore object, except for those\nwith the Composite, Crosstab, OLE 2.0, or\nRichText presentation styles.\nSyntax\nPowerBuilder\nlong dwcontrol.ImportJson( string json {, string error} {, DWBuffer dwbuffer\n {, long startrow {, long endrow {, long startcolumn {, long endcolumn {, long\n dwstartcolumn } } } } } } )\nTable 9.198:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or\nDataWindowChild.\njson\nA string specifying the JSON data. The JSON string must comply\nwith the Section 4.7.1, \u201cSupported JSON formats\u201d in Application\nTechniques.\nerror (optional)\nA variable into which the returned warning or error message will be\nplaced.\nWhen there are a large amount of error messages, the error information\nwill only display the total number of errors, and the detailed message of\nthe first 10 errors.\nThe import warning caused by data type mismatch will not affect\nthe return value of ImportJson; although the data of the mismatched\ncolumns will not be imported, the rest columns (even only one column)\nthat are matched will be imported successfully; and that row will be\nregarded as a successful import and counted into the return value.\n"}
{"page": 720, "text": "Methods for the DataWindow Control\nPage 720\nArgument\nDescription\nThe import error caused by DW presentation style mismatch, invalid\narguments, startrow value greater than the number of rows, etc. will\nbe regarded as a failure, and represented by a negative return value of\nImportJson, instead of being placed into this variable. See the Return\nValue section for more.\nMost of the messages placed into this variable are warnings (such as\ndata type mismatch) rather than errors. Developers can adjust the JSON\ndata according to the message or simply ignore the message if the\nproblematic column is not critical and the corresponding DataWindow\ncolumn can be left blank.\ndwbuffer (optional) A value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to import the data. For a list\nof valid values, see DWBuffer.\nFor plain JSON: If not specified, imports the JSON data to the Primary!\nbuffer. If specified, imports the JSON data to the specified buffer.\nFor DataWindow JSON: If not specified, imports data from all of the\nbuffers from the JSON string to the corresponding buffers and, if any,\nimports the data for DataWindowChild. If specified, imports data from\nthe specified buffer from the JSON string to the corresponding buffer.\nstartrow (optional)\nThe number of the first detail object in the JSON array that you want to\nimport. The default is 1. If it is 0 or negative, 1 is used.\nendrow (optional)\nThe number of the last detail object in the JSON array that you want\nto import. The default is the rest of the objects. If it is 0 or negative, it\nindicates the rest of rows.\nstartcolumn\n(optional)\nThe number of the first key value in the JSON object that you want to\nimport. The default is 1. If it is 0 or negative, 1 is used.\nendcolumn\n(optional)\nThe number of the last key value in the JSON object that you want to\nimport. The default is the rest of the key values. If it is 0 or negative, it\nindicates the rest of columns.\ndwstartcolumn\n(optional)\nThe number of the first column in the DataWindow control, DataStore\nor DataWindowChild that should receive data. The default is 1. If it is 0\nor negative, 1 is used.\nReturn value\nLong. Returns the number of rows that were imported if it succeeds and one of the following\nnegative integers if an error occurs. The return value will count the rows imported into the\nprimary, filter, and delete buffers, but not the rows imported into DataWindowChild.\n0 -- When all of the data in the JSON string is null or the JSON string only contains data for\nDataWindowChild.\n-1 -- General error.\n-2 -- No row is supplied or the startrow value supplied is greater than the number of rows in\nthe JSON data.\n"}
{"page": 721, "text": "Methods for the DataWindow Control\nPage 721\n-3 -- Invalid argument.\n-4 -- Invalid JSON.\n-5 -- JSON format error.\n-6 -- Unsupported DataWindow presentation style for import.\n-7 -- Error resolving DataWindow nesting.\n-8 -- Unsupported mapping-method value.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\nUsage\nThe ImportJson function imports data according to the index of the JSON item when the data\ntype of the JSON value matches with that of the DataWindow column.\nThere is no forced conversion between strings and numbers. For example, the number 123\nin JSON string will not be imported into the DataWindow column of char(10) type. For such\ncase, a data type mismatch warning will be recorded in the error argument.\nA boolean value (true or false) will be converted to 0 or 1 when imported from the JSON\nstring to the DataWindow; however, 0 or 1 will not be converted to a boolean value (true or\nfalse) when exported from the DataWindow to the JSON string.\nIf the string length in JSON is larger than the string length in DataWindow, the string\nwill be truncated when imported into the DataWindow. For example, JSON string\n[{\"name\":\"TestForTrancate\"}] is imported as \"Test\" when the data type of DataWindow\ncolumn \"name\" is char(4).\nWhen the number value is imported from the JSON string to the DataWindow column of\nnumber data type (with uncertain precision), the value will have uncertain decimals, for\nexample, 6.78 becomes 6.78000020980835 after imported from the JSON string to the\nDataWindow.\nExamples\nThis example gets data at plain JSON format from the server and imports into the primary\nbuffer of the DataWindow:\nint li_rc\nlong ll_RowCount\nstring ls_PlainJson\nHttpClient lnv_HttpClient\nlnv_HttpClient = create HttpClient\n// send request using GET method\nli_rc=lnv_HttpClient.SendRequest(\"GET\",\"https://demo.appeon.com/PB/webapi_client/\nemployee/102\")\n// obtain the response data\nif li_rc = 1 and lnv_HttpClient.GetResponseStatusCode() = 200 then\n  lnv_HttpClient.GetResponseBody(ls_PlainJson)\n  ll_RowCount = dw_1.ImportJson(ls_PlainJson)\n"}
{"page": 722, "text": "Methods for the DataWindow Control\nPage 722\nend if\nThis example imports data (and state) from a DataWindow JSON string into the\nDataWindowChild and all of the buffers of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson, ls_Error\n//DataWindow JSON\nls_DWJson = \u2026 \nll_RowCount = dw_1.ImportJson(ls_DWJson, ls_Error)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data (and state) from a DataWindow JSON string into the primary\nbuffer of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson\n//DataWindow JSON\nls_DWJson = \u2026\nll_RowCount = dw_1.ImportJson(ls_DWJson, Primary!)\nThis example imports data from a plain JSON string in rows 2 through the end into the\nprimary buffer of the DataWindow:\nlong ll_RowCount\nstring ls_PlainJson\n//Plain JSON\nls_PlainJson = '[{\"department_id\":100,\"department_name\":\"Sales\"}, &\n {\"department_id\":200,\"department_name\":\"Finance\"},\n{\"department_id\":300,\"department_name\":\"Marketing\"}]'\nll_RowCount = dw_1.ImportJson(ls_PlainJson, Primary!, 2)\nThis example imports data from a plain JSON string in rows 1 through 3 into the filter buffer\nof the DataWindow:\nlong ll_RowCount\nstring ls_PlainJson\n//Plain JSON\nls_PlainJson = '[{\"emp_id\":1,\"emp_fname\":\"Fran\",\"emp_lname\":\"Whitney\"}, &\n"}
{"page": 723, "text": "Methods for the DataWindow Control\nPage 723\n          {\"emp_id\":2,\"emp_fname\":\"Matthew\",\"emp_lname\":\"Cobb\"}, &\n          {\"emp_id\":3,\"emp_fname\":\"Philip\",\"emp_lname\":\"Chin\"}, &\n          {\"emp_id\":4,\"emp_fname\":\"Julie\",\"emp_lname\":\"Jordan\"}, &\n          {\"emp_id\":5,\"emp_fname\":\"Robert\",\"emp_lname\":\"Breault\"}]'       \nll_RowCount = dw_1.ImportJson(ls_PlainJson, Filter!, 1, 3)\nThis example imports data from a plain JSON string in rows 1 through 3 and in columns 2\nthrough the end into the primary buffer of the DataWindow:\nlong ll_RowCount\nstring ls_PlainJson\n//Plain JSON\nls_PlainJson = '[{\"emp_id\":1,\"emp_fname\":\"Fran\",\"emp_lname\":\"Whitney\"}, &\n          {\"emp_id\":2,\"emp_fname\":\"Matthew\",\"emp_lname\":\"Cobb\"}, &\n          {\"emp_id\":3,\"emp_fname\":\"Philip\",\"emp_lname\":\"Chin\"}, &\n          {\"emp_id\":4,\"emp_fname\":\"Julie\",\"emp_lname\":\"Jordan\"}, &\n          {\"emp_id\":5,\"emp_fname\":\"Robert\",\"emp_lname\":\"Breault\"}]' \nll_RowCount = dw_1.ImportJson(ls_PlainJson, Primary!, 1, 3, 2)\nThis example imports data (and state) from a DataWindow JSON string in rows 1 through 10\nand in columns 1 through 5 into the primary buffer of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson\n//DataWindow JSON\nls_DWJson = \u2026 \nll_RowCount = dw_1.ImportJson(ls_DWJson, Primary!, 1, 10, 1, 5)\nThis example imports data from a plain JSON string in rows 1 through 3 and in columns 2\nthrough 5 into the primary buffer of the DataWindow beginning in column 3:\nlong ll_RowCount\nstring ls_PlainJson\n//Plain JSON\nls_PlainJson = '[{\"emp_id\":1,\"emp_fname\":\"Fran\",\"emp_lname\":\"Whitney\", &\n       \"street\":\"9 East Washington Street\",\"city\":\"Cornwall\"}, &\n     {\"emp_id\":2,\"emp_fname\":\"Matthew\",\"emp_lname\":\"Cobb\", &\n       \"street\":\"7 Pleasant Street\",\"city\":\"Grimsby\"}, &\n     {\"emp_id\":3,\"emp_fname\":\"Philip\",\"emp_lname\":\"Chin\", &\n       \"street\":\"539 Pond Street\",\"city\":\"Oakville\"}, &\n     {\"emp_id\":4,\"emp_fname\":\"Julie\",\"emp_lname\":\"Jordan\", &\n       \"street\":\"1244 Great Plain Avenue\",\"city\":\"Woodbridge\"}, &\n     {\"emp_id\":5,\"emp_fname\":\"Robert\",\"emp_lname\":\"Breault\", &\n       \"street\":\"358 Cherry Street\",\"city\":\"Milton\"}]'\nll_RowCount = dw_1.ImportJson(ls_PlainJson, Primary!, 1, 3, 2, 5, 3)\nThis example imports data (and state) from a DataWindow JSON string into the primary\nbuffer of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson, ls_Error\n//DataWindow JSON\nls_DWJson = \u2026\nll_RowCount = dw_1.ImportJson(ls_DWJson, ls_Error, Primary!)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n"}
{"page": 724, "text": "Methods for the DataWindow Control\nPage 724\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data from a plain JSON string in rows 2 through the end into the delete\nbuffer of the DataWindow:\nlong ll_RowCount\nstring ls_PlainJson, ls_Error\n//Plain JSON\nls_PlainJson = '[{\"emp_id\":1,\"emp_fname\":\"Fran\",\"emp_lname\":\"Whitney\"}, &\n          {\"emp_id\":2,\"emp_fname\":\"Matthew\",\"emp_lname\":\"Cobb\"}, &\n          {\"emp_id\":3,\"emp_fname\":\"Philip\",\"emp_lname\":\"Chin\"}, &\n          {\"emp_id\":4,\"emp_fname\":\"Julie\",\"emp_lname\":\"Jordan\"}, &\n          {\"emp_id\":5,\"emp_fname\":\"Robert\",\"emp_lname\":\"Breault\"}]'  \nll_RowCount = dw_1.ImportJson(ls_PlainJson, ls_Error, Delete!, 2)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data (and state) from a DataWindow JSON string in rows 1 through 10\ninto the primary buffer of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson, ls_Error\n//DataWindow JSON\nls_DWJson = \u2026 \nll_RowCount = dw_1.ImportJson(ls_DWJson, ls_Error, Primary!, 1, 10)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n"}
{"page": 725, "text": "Methods for the DataWindow Control\nPage 725\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data (and state) from the DataWindow JSON string in rows 1 through\n10 and in columns 2 through the end into the primary buffer of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson, ls_Error\n//DataWindow JSON\nls_DWJson = \u2026\nll_RowCount = dw_1.ImportJson(ls_DWJson, ls_Error, Primary!, 1, 10, 2)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data (and state) from a DataWindow JSON string in rows 1 through 10\nand in columns 2 through 5 into the primary buffer of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson, ls_Error\n//DataWindow JSON\nls_DWJson = \u2026 \nll_RowCount = dw_1.ImportJson(ls_DWJson, ls_Error, Primary!, 1, 10, 2, 5)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n"}
{"page": 726, "text": "Methods for the DataWindow Control\nPage 726\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data (and state) from a DataWindow JSON string in rows 1 through 10\nand in columns 2 through 5 into the primary buffer of the DataWindow beginning in column\n2:\nlong ll_RowCount\nstring ls_DWJson, ls_Error\n//DataWindow JSON\nls_DWJson = \u2026 \nll_RowCount = dw_1.ImportJson(ls_DWJson, ls_Error, Primary!, 1, 10, 2, 5, 2)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nSee also\nImportJsonByKey\nExportJson\n9.98 ImportJsonByKey\nDescription\nInserts data from a JSON string into a DataWindow control, DataStore object, or\nDataWindowChild object according to the key name of the JSON item.\nThe JSON string must be in the format described in Section 4.7.1, \u201cSupported JSON formats\u201d\nin Application Techniques.\nThis function will fail to import data properly, if the DataWindow is in query mode.\nApplies to\nTable 9.199:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, and DataStore object, except for those\n"}
{"page": 727, "text": "Methods for the DataWindow Control\nPage 727\nDataWindow type\nMethod applies to\nwith the Composite, Crosstab, OLE 2.0, or\nRichText presentation styles.\nSyntax\nPowerBuilder\nlong dwcontrol.ImportJsonByKey( string json {, string error} {, DWBuffer dwbuffer\n {, long startrow {, long endrow } } } )\nTable 9.200:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or\nDataWindowChild.\njson\nA string specifying the JSON data. The JSON string must comply\nwith the Section 4.7.1, \u201cSupported JSON formats\u201d in Application\nTechniques. If it is DataWindow JSON, this function will ignore the\nmapping-method element of the JSON data.\nerror (optional)\nA variable into which the returned warning or error message will be\nplaced.\nWhen there are a large amount of error messages, the error information\nwill only display the total number of errors, and the detailed message of\nthe first 10 errors.\nThe import warning caused by data type mismatch will not affect the\nreturn value of ImportJsonByKey; although the data of the mismatched\ncolumns will not be imported, the rest columns (even only one column)\nthat are matched will be imported successfully; and that row will be\nregarded as a successful import and counted into the return value.\nThe import error caused by DW presentation style mismatch, invalid\narguments, startrow value greater than the number of rows,etc. will\nbe regarded as a failure, and represented by a negative return value of\nImportJsonByKey, instead of being placed into this variable. See the\nReturn Value section for more.\nMost of the messages placed into this variable are warnings (such as\ndata type mismatch) rather than errors. Developers can adjust the JSON\ndata according to the message or simply ignore the message if the\nproblematic column is not critical and the corresponding DataWindow\ncolumn can be left blank.\ndwbuffer (optional) A value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to import the data. For a list\nof valid values, see DWBuffer.\nFor plain JSON: If not specified, imports the JSON data to the Primary!\nbuffer. If specified, imports the JSON data to the specified buffer.\nFor DataWindow JSON: If not specified, imports data of all of the\nbuffers from the JSON string to the corresponding buffers and, if any,\n"}
{"page": 728, "text": "Methods for the DataWindow Control\nPage 728\nArgument\nDescription\nimports the data for DataWindowChild. If specified, imports data of the\nspecified buffer from the JSON string to the corresponding buffer.\nstartrow (optional)\nThe number of the first detail object in the JSON Array that you want\nto import. The default is 1. If it is 0 or negative, 1 is used.\nendrow (optional)\nThe number of the last detail object in the JSON Array that you want\nto import. The default is the rest of the objects. If it is 0 or negative, it\nindicates the rest of rows.\nReturn value\nLong. Returns the number of rows that were imported if it succeeds and one of the following\nnegative integers if an error occurs. The return value will count the rows imported into the\nprimary, filter, and delete buffers, but not the rows imported into DataWindowChild.\n0 -- When all of the data in the JSON string is null, or the JSON string only contains data for\nDataWindowChild, or no JSON key matches with the DataWindow column.\n-1 -- General error.\n-2 -- No rows or startrow value supplied is greater than the number of rows in the JSON.\n-3 -- Invalid argument.\n-4 -- Invalid JSON.\n-5 -- JSON format error.\n-6 -- Unsupported DataWindow presentation style for import.\n-7 -- Error resolving DataWindow nesting.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\nUsage\nThere is no forced conversion between strings and numbers. For example, the number 123\nin JSON string will not be imported into the DataWindow column of char(10) type. For such\ncase, a data type mismatch warning will be recorded in the error argument.\nA boolean value (true or false) will be converted to 0 or 1 when imported from the JSON\nstring to the DataWindow; however, 0 or 1 will not be converted to a boolean value (true or\nfalse) when exported from the DataWindow to the JSON string.\nIf the string length in JSON is larger than the string length in DataWindow, the string\nwill be truncated when imported into the DataWindow. For example, JSON string\n[{\"name\":\"TestForTrancate\"}] is imported as \"Test\" when the data type of DataWindow\ncolumn \"name\" is char(4).\nWhen the number value is imported from the JSON string to the DataWindow column of\nnumber data type (with uncertain precision), the value will have uncertain decimals, for\n"}
{"page": 729, "text": "Methods for the DataWindow Control\nPage 729\nexample, 6.78 becomes 6.78000020980835 after imported from the JSON string to the\nDataWindow.\nExamples\nThis example imports data from a plain JSON string into the corresponding column of\nDataWindowChild:\nlong ll_RowCount\nstring ls_PlainJson\ndatawindowchild ldwc_Dept\ndw_1.GetChild(\"dept_id\", ldwc_Dept)\nls_PlainJson = '[{\"dept_id\":100,\"dept_name\":\"R & D\"},\n{\"dept_id\":200,\"dept_name\":\"Sales\"}, &\n                  {\"dept_id\":300,\"dept_name\":\"Finance\"},\n{\"dept_id\":400,\"dept_name\":\"Marketing\"}]' \nll_RowCount = ldwc_Dept.ImportJsonByKey(ls_PlainJson)\nThis example imports data from a plain JSON string into the corresponding column of\nDataWindowChild:\nlong ll_RowCount\nstring ls_PlainJson, ls_Error\ndatawindowchild ldwc_Dept\ndw_1.GetChild(\"dept_id\", ldwc_Dept)\nls_PlainJson = '[{\"dept_id\":100,\"dept_name\":\"R & D\"},\n{\"dept_id\":200,\"dept_name\":\"Sales\"}, &\n                  {\"dept_id\":300,\"dept_name\":\"Finance\"},\n{\"dept_id\":400,\"dept_name\":\"Marketing\"}]'\nll_RowCount = ldwc_Dept.ImportJsonByKey(ls_PlainJson , ls_Error)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data from a plain JSON string into the primary buffer of the\nDataWindow:\nlong ll_RowCount\nstring ls_PlainJson\nls_PlainJson = '[{\"dept_id\":100,\"dept_name\":\"R & D\",\"dept_head_id\":501}, &\n                  {\"dept_id\":200,\"dept_name\":\"Sales\",\"dept_head_id\":902}]'\nll_RowCount = dw_Dept.ImportJsonByKey(ls_PlainJson, Primary!)\n"}
{"page": 730, "text": "Methods for the DataWindow Control\nPage 730\nThis example imports data from dw_1 into a DataWindow JSON string, and then imports\ndata in rows 2 through the end from the JSON string into dw_2 (suppose dw_1 and dw_2\nhave the same column names):\nlong ll_RowCount\nstring ls_DWJson\nls_DWJson = dw_1.ExportJson(true)\nll_RowCount = dw_2.ImportJsonByKey(ls_DWJson, Primary!, 2)\nThis example imports data (and state) in rows 1 through 10 from the primary buffer of a\nDataWindow JSON string into the primary buffer of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson\n//DataWindow JSON\nls_DWJson = \u2026\nll_RowCount = dw_1.ImportJsonByKey(ls_DWJson, Primary!, 1, 10)\nThis example imports data from a plain JSON string into the primary buffer of the\nDataWindow:\nlong ll_RowCount\nstring ls_PlainJson, ls_Error\nls_PlainJson = '[{\"dept_id\":100,\"dept_name\":\"R & D\",\"dept_head_id\":501}, &\n                  {\"dept_id\":200,\"dept_name\":\"Sales\",\"dept_head_id\":902}]'\nll_RowCount = dw_Dept.ImportJsonByKey(ls_PlainJson, ls_Error, Primary!)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data from dw_1 into a DataWindow JSON string, and then imports\ndata in rows 2 through the end from the JSON string into dw_2 (suppose dw_1 and dw_2\nhave the same column names):\nlong ll_RowCount\nstring ls_DWJson, ls_Error\nls_DWJson = dw_1.ExportJson(true)\nll_RowCount = dw_2.ImportJsonByKey(ls_DWJson, ls_Error, Primary!, 2)\n//Checks if any error\n"}
{"page": 731, "text": "Methods for the DataWindow Control\nPage 731\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nThis example imports data (and state) in rows 1 through 10 from the primary buffer of a\nDataWindow JSON string into the primary buffer of the DataWindow:\nlong ll_RowCount\nstring ls_DWJson, ls_Error\n//DataWindow JSON\nls_DWJson =\u2026\nll_RowCount = dw_1.ImportJsonByKey(ls_DWJson, ls_Error, Primary!, 1, 10)\n//Checks if any error\nIF isnull(ll_RowCount) Then\n Messagebox(\"Error\", \"The method returns null\")\nElseIf ll_RowCount < 0 Then\n If len(ls_Error) > 0 Then\n  Messagebox(\"Failed\",\"Return Value: \" + String(ll_RowCount) &\n      + \"~r~nWith error information:~r~n\" + ls_Error)\n Else\n  Messagebox(\"Failed\",\"Return Value: \"+String(ll_RowCount))\n End If\nElse\n //Checks if any warning\n If len(ls_Error) > 0 Then\n  MessageBox(\"Warning\", \"With warning information:~r~n\" + ls_Error)\n Else\n  MessageBox(\"Succeed\", \"Return Value: \" + String(ll_RowCount) )\n End If\nEnd If\nSee also\nImportJson\nExportJson\n9.99 ImportRowFromJson\nDescription\nInserts a data row from a JSON string into a DataWindow control, DataStore object, or\nDataWindowChild object. The status of the inserted data row is NotModified!.\nThe JSON string that can be imported by this function must be a one-level plain JSON string.\nFor details, see Plain JSON: one-level structure in Application Techniques.\n"}
{"page": 732, "text": "Methods for the DataWindow Control\nPage 732\nThis function will fail to import data properly, if the DataWindow is in query mode.\nApplies to\nTable 9.201:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, and DataStore object, except for those\nwith the Composite, Crosstab, OLE 2.0, or\nRichText presentation styles.\nSyntax\nPowerBuilder\nlong dwcontrol.ImportRowFromJson( string json, long row {, ref string error} {,\n DWBuffer dwbuffer})\nTable 9.202:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or\nDataWindowChild.\njson\nA string specifying the JSON data. The JSON string must be in the\nplain format which must have only one level (cannot be two or more)\nand must be an object (cannot be an array).\nrow\nA long value identifying the row before which you want to insert a row.\nTo insert a row at the end, specify 0, or a negative value, or a value\ngreater than the row count in the DataWindow buffer.\nerror (optional)\nA variable into which the returned warning or error message will be\nplaced.\nWhen there are a large amount of error messages, the error information\nwill only display the total number of errors, and the detailed message of\nthe first 10 errors.\nThe import warning caused by data type mismatch will not affect the\nreturn value of this function; although the data of the mismatched\ncolumns will not be imported, the rest columns (even only one column)\nthat are matched will be imported successfully; and that row will be\nregarded as a successful import and counted into the return value.\nThe import error caused by DW presentation style mismatch, invalid\narguments etc. will be regarded as a failure, and represented by a\nnegative return value of this function, instead of being placed into this\nvariable. See the Return Value section for more.\nMost of the messages placed into this variable are warnings (such as\ndata type mismatch) rather than errors. Developers can adjust the JSON\ndata according to the message or simply ignore the message if the\nproblematic column is not critical and the corresponding DataWindow\ncolumn can be left blank.\n"}
{"page": 733, "text": "Methods for the DataWindow Control\nPage 733\nArgument\nDescription\ndwbuffer (optional) A value of the dwBuffer enumerated datatype identifying the\nDataWindow buffer from which you want to import the data. For a\nlist of valid values, see DWBuffer. If not specified, imports the JSON\ndata to the Primary! buffer. If specified, imports the JSON data to the\nspecified buffer.\nReturn value\nLong. Returns 1 if the data row was added successfully and one of the following negative\nintegers if an error occurs.\n-1 -- General error.\n-3 -- Invalid argument.\n-4 -- Invalid JSON.\n-5 -- JSON format error.\n-6 -- Unsupported DataWindow presentation style for import.\n-7 -- Error resolving DataWindow nesting.\nThe method returns null if any of the following:\n\u2022 any argument's value is null\n\u2022 the DataWindow object (dataobject) is invalid\nUsage\nThere is no forced conversion between strings and numbers. For example, the number 123\nin JSON string will not be imported into the DataWindow column of char(10) type. For such\ncase, a data type mismatch warning will be recorded in the error argument.\nA boolean value (true or false) will be converted to 0 or 1 when imported from the JSON\nstring to the DataWindow; however, 0 or 1 will not be converted to a boolean value (true or\nfalse) when exported from the DataWindow to the JSON string.\nIf the string length in JSON is larger than the string length in DataWindow, the string\nwill be truncated when imported into the DataWindow. For example, JSON string\n[{\"name\":\"TestForTrancate\"}] is imported as \"Test\" if the data type of DataWindow column\n\"name\" is char(4).\nWhen the number value is imported from the JSON string to the DataWindow column of\nnumber data type (with uncertain precision), the value will have uncertain decimals, for\nexample, 6.78 becomes 6.78000020980835 after imported from the JSON string to the\nDataWindow.\nExample\nThe following example imports two rows, one before the first row and the other before the\nlast row.\nString ls_Json = '{\"dept_id\":1900,\"dept_name\":\"Test send patch\n request42\",\"dept_head_id\":\"test\"}'\n"}
{"page": 734, "text": "Methods for the DataWindow Control\nPage 734\nString ls_Error\nInteger li_ImportJsonReturn\n//Inserts a row before the first row\n//Note that the column name and data type between JSON string and DataWindow must\n match\nli_ImportJsonReturn = dw_Data.ImportRowFromJson( ls_Json, 1, ls_Error)\nIf Trim(ls_Error) <> \"\" Then\n //Prints the value of ls_Error. \n //The data type of the last column between JSON string and DataWindow does not\n match\n //so there will be an error message here.\nEnd If\nls_Json = '{\"dept_id\":1900,\"dept_name\":\"Test send patch\n request42\",\"dept_head_id\":1}'\n//Inserts a row before the last row\n//Note that the column name and data type between JSON string and DataWindow must\n match\nli_ImportJsonReturn = dw_Data.ImportRowFromJson( ls_Json, 0, ls_Error, Primary!)\nIf Trim(ls_Error) <> \"\" Then\n //Prints the value of ls_Error\nEnd If\nSee also\nExportRowAsJson\n9.100 ImportString\nDescription\nInserts data into a DataWindow control or DataStore from tab-separated, comma-separated,\nor XML data in a string.\nApplies to\nTable 9.203:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.ImportString ( {saveastype importtype}, string string {,\n long startrow {, long endrow {,long startcolumn {, long endcolumn {, long\n dwstartcolumn } } } } } )\nTable 9.204:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore.\nimporttype (optional\nfor PowerBuilder)\nAn enumerated value of the SaveAsType DataWindow constant or\na string or number representing that value (see SaveAsType). Valid\ntype arguments are:\n"}
{"page": 735, "text": "Methods for the DataWindow Control\nPage 735\nArgument\nDescription\nText!\nCSV!\nXML!\nIf you want to generate an XML trace file, the XML! argument is\nrequired.\nstring\nA string from which you want to copy the data. The string should\ncontain tab-separated or comma-separated columns or XML with one\nrow per line (see Usage).\nstartrow (optional\nfor PowerBuilder)\nThe number of the first detail row in the string that you want to copy.\nThe default is 1.\nFor default XML import, if startrow is supplied, the first N (startrow\n-1) elements are skipped, where N is the DataWindow row size.\nFor template XML import, if startrow is supplied, the first (startrow\n-1) occurrences of the repetitive row mapping defined in the template\nare skipped.\nendrow (optional for\nPowerBuilder)\nThe number of the last detail row in the string that you want to copy.\nThe default is the rest of the rows.\nFor default XML import, if endrow is supplied, import stops when N\n* endrow elements have been imported, where N is the DataWindow\nrow size.\nFor template XML import, if endrow is supplied, import stops after\nendrow occurrences of the repetitive row mapping defined in the\ntemplate have been imported.\nstartcolumn\n(optional for\nPowerBuilder)\nThe number of the first column in the string that you want to copy.\nThe default is 1.\nFor default XML import, if startcolumn is supplied, import skips the\nfirst (startcolumn - 1) elements in each row.\nThis argument has no effect on template XML import.\nendcolumn (optional\nfor PowerBuilder)\nThe number of the last column in the string that you want to copy.\nThe default is the rest of the columns.\nFor default XML import, if endcolumn is supplied and is smaller than\nN, where N is the DataWindow row size, import skips the last (N -\nendcolumn) elements in each row.\nThis argument has no effect on template XML import.\ndwstartcolumn\n(optional for\nPowerBuilder)\nThe number of the first column in the DataWindow control or\nDataStore that should receive data. The default is 1. This argument is\nsupported for default and template XML import.\nEvents\nImportString may trigger an ItemError event.\nReturn value\n"}
{"page": 736, "text": "Methods for the DataWindow Control\nPage 736\nReturns the number of rows that were imported if it succeeds and one of the following\nnegative integers if an error occurs:\n-1 -- No rows or startrow value supplied is greater than the number of rows in the string\n-3 -- Invalid argument\n-4 -- Invalid input\n-11 -- XML Parsing Error; XML parser libraries not found or XML not well formed\n-12 -- XML Template does not exist or does not match the DataWindow\n-13 -- Unsupported DataWindow style for import\n-14 -- Error resolving DataWindow nesting\nUsage\nAll the arguments of this function except string are optional. You do not need to specify the\nimporttype argument.\nThe string must be formatted in tab-separated or comma-separated columns or in XML. For\nTXT and CSV files, the format of the string is the same as if the data came from an ASCII\nfile, and each line must end with a carriage return and a newline character (~r~n). If the string\nhas four tab-separated columns, one line might look like for a tab-separated string:\ncol1_data~t col2_data~t col3_data~t col4_data~r~n\nFor a DataWindow control or DataStore, the string should consist of rows of data. If the data\nincludes column headings or row labels, set the startrow and startcolumn arguments to skip\nthem. The datatypes and order of the DataWindow object's columns must match the columns\nof data in the string.\nThe startcolumn and endcolumn arguments control the number of columns imported from the\nstring and the number of columns in the DataWindow that are affected. The dwstartcolumn\nargument specifies the first DataWindow column to be affected. The following formula\ncalculates the last DataWindow to be affected.\ndwstartcolumn + ( endcolumn - startcolumn )\nIf string data to be assigned to a single row and column has multiple lines (indicated by line-\nending characters in the import string), you must quote the string data using ~\". Do not use\nsingle quotes.\nThis example of a valid tab-separated import string assigns multiline values to each row in\ncolumn 2:\nls_s = &\n      \"1~t~\"Mickey~r~nMinnie~r~nGoofy~\" ~r~n\" + &\n      \"2~t~\"Susan~r~nMary~r~nMarie~\" ~r~n\" + &\n      \"3~t~\"Chris~r~nBen~r~nMike~\" ~r~n\" + &\n      \"4~t~\"Mott~r~nBarber~r~nPicard~\" \"\nIf an XML or CSV column contains a leading double quote, it is assumed to be part of the\ncolumn value. A leading double quote has to be closed to mark the end of an item.\nImportString does not support Crosstab DataWindow objects.\nExamples\n"}
{"page": 737, "text": "Methods for the DataWindow Control\nPage 737\nThese statements copy all data in the string ls_Emp_Data to the DataWindow control\ndw_employee starting at the first column:\nstring ls_Emp_Data\nls_Emp_Data = . . .\ndw_employee.ImportString(ls_Emp_Data)\nThis statement stores data in the string ls_Text and imports it into the DataWindow\ndw_employee. The DataWindow is a report of department 100 and start and end dates of\npersonnel. The string includes the department number and other information, which is not\nimported. ImportString imports rows 2 through 10 and columns 2 through 5 in the string to\nthe DataWindow beginning in column 2. The result is 9 rows added to the DataWindow with\ndata in columns 5 through 8:\nstring ls_text\n \nls_text = \"Dept~tLName~tFName~tStart\" & \n      + \"~tEnd~tAmount~tOutcome ~r~n\"\nls_text = ls_text + &\n      \"100~tJones~tMary~tApr88~tJul94~t40~tG~r~n\"\nls_text = ls_text + &\n      \"100~tMarsh~tMarsha~tApr89~tJan92~t35~tG~r~n\"\nls_text = ls_text + &\n      \"100~tJames~tHarry~tAug88~tMar93~t22~tM~r~n\"\n...\nls_text = ls_text + &\n      \"100~tWorth~tFrank~tSep87~tJun94~t55~tE~r~n\"\n \ndw_employee.ImportString(ls_text, 2, 10, 2, 5, 5)\nThis statement imports rows 1 to 200 of the data in the XML string ls_emp, ignoring any\ntemplate mappings before column 5:\ndw_employee.ImportString(ls_emp, 1, 200, 0, 0, 5)\nSee also\nImportClipboard\nImportFile\n9.101 InsertDocument\nDescription\nInserts a rich text format or plain text file into a DataWindow control or DataStore object.\nThe new content is added in one of two ways:\n\u2022 The new content can be inserted at the insertion point.\n\u2022 The new content can replace all existing content.\nApplies to\nTable 9.205:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\n"}
{"page": 738, "text": "Methods for the DataWindow Control\nPage 738\nSyntax\nPowerBuilder\ninteger dwcontrol.InsertDocument ( string filename, boolean clearflag, FileType\n filetype)\nTable 9.206:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore object. The DataWindow\nobject in the DataWindow control or DataStore must be a RichTextEdit\nDataWindow.\nfilename\nA string whose value is the name of the file you want to display in the\nRichTextEdit control. Filename can include the file's path.\nclearflag\nA boolean value specifying whether the new file will replace the current\ncontents of the control. Values are:\n\u2022 True -- Replace the current contents with the file.\n\u2022 false -- Insert the file into the existing contents at the insertion point.\nfiletype\nA value of the FileType enumerated datatype specifying the type of file being\nopened. Values are:\n\u2022 FileTypeRichText! -- (Default) The file being opened is in rich text format\n(RTF).\n\u2022 FileTypeText! -- The file being opened is plain ASCII text (TXT).\n\u2022 FileTypeHTML! -- The file being opened is in HTML format (HTM or\nHTML)\n\u2022 FileTypeDoc! -- The file being opened is in Microsoft Word format (DOC)\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nInsertDocument returns null.\nUsage\nWhen the control supports headers and footer (the HeaderFooter property is set to true),\ninserting a document can replace, but not add to, existing header and footer text. You must\nset clearflag to true to replace the existing header and footer text with header and footer text\nfrom the inserted document.\nNot all RTF formatting is supported. PowerBuilder supports version 1.6 of the RTF standard,\nexcept for the following:\n\u2022 No support for formatted tables\n\u2022 No drawing controls\n"}
{"page": 739, "text": "Methods for the DataWindow Control\nPage 739\nAny unsupported formatting is ignored.\nPowerBuilder environment\nFor use with other PowerBuilder RichTextEdit controls, see Section 2.4.406,\n\u201cInsertDocument\u201d in PowerScript Reference.\nExamples\nThis example inserts a document into a RichTextEdit DataWindow:\ninteger rtn\nrtn = dw_1.InsertDocument(\"c:\\pb\\test.rtf\", &\n      false, FileTypeRichText!)\nSee also\nDataSource in Section 2.4.105, \u201cDataSource\u201d in PowerScript Reference\nInputFieldInsert in Section 2.4.392, \u201cInputFieldInsert\u201d in PowerScript Reference\nInsertPicture in Section 2.4.425, \u201cInsertPicture\u201d in PowerScript Reference\n9.102 InsertRow\nDescription\nInserts a row in a DataWindow or DataStore. If any columns have default values, the row is\ninitialized with these values before it is displayed.\nApplies to\nTable 9.207:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.InsertRow ( long row ) \nTable 9.208:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row before which you want to insert a row. To insert\na row at the end, specify 0.\nReturn value\nReturns the number of the row that was added if it succeeds and -1 if an error occurs.\n"}
{"page": 740, "text": "Methods for the DataWindow Control\nPage 740\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nIf there is no DataWindow object assigned to the DataWindow control or DataStore, this\nmethod returns -1.\nUsage\nInsertRow simply inserts the row without changing the display or the current row. To scroll\nto the row and make it the current row, call ScrollToRow. To simply make it the current row,\ncall SetRow.\nA newly inserted row (with a status flag of New!) is not included in the modified count until\ndata is entered in the row (its status flag becomes NewModified!).\nExamples\nThis statement inserts an initialized row before row 7 in dw_Employee:\ndw_Employee.InsertRow(7)\nThis example inserts an initialized row after the last row in dw_employee, then scrolls to the\nrow, which makes it current:\nlong ll_newrow\nll_newrow = dw_employee.InsertRow(0)\ndw_employee.ScrollToRow(ll_newrow)\nSee also\nDeleteRow\nUpdate\n9.103 IsExpanded\nDescription\nPerforms a test to see whether a group in a TreeView DataWindow with the specified\nTreeView level is expanded, and whether the group includes the specified row.\nApplies to\nTable 9.209:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nBoolean dw_control.IsExpanded(long row, long groupLevel)\nTable 9.210:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\n"}
{"page": 741, "text": "Methods for the DataWindow Control\nPage 741\nArgument\nDescription\nrow\nThe number of the row that belongs to the\ngroup\ngroupLevel\nThe TreeView level of the group\nReturn value\nReturns true if the group is expanded and false if the group is not expanded. IsExpanded also\nreturns false if the DataWindow is not a TreeView DataWindow or the row or groupLevel is\ninvalid.\nUsage\nA TreeView DataWindow has several TreeView level bands (groups) that can be expanded\nand collapsed. You can use the IsExpanded method to test whether or not a group in a\nTreeView DataWindow is expanded.\nExamples\nThe following example performs a test to determine whether the group that contains row 3 at\nTreeView level 2 is expanded:\nboolean lb_expanded\nlb_expanded = dw_treeview.IsExpanded(3,2)\nSee also\nExpand\nExpandAll\nExpandAllChildren\nExpandLevel\n9.104 IsRowSelected (obsolete)\nDescription\nDetermines whether a row is selected in a DataWindow. A selected row is highlighted using\nreverse video.\nObsolete method\nIsRowSelected is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.211:\nDataWindow type\nMethod applies to\nWeb\nClient control\nSyntax\n"}
{"page": 742, "text": "Methods for the DataWindow Control\nPage 742\nWeb DataWindow client control\nboolean dwcontrol.IsSelected ( number row ) \nTable 9.212:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nrow\nA value identifying the row you want to test\nto see if it is selected\nReturn value\nReturns true if row in dwcontrol is selected and false if it is not selected. If row is greater than\nthe number of rows in dwcontrol or is 0 or negative, IsRowSelected also returns false.\nUsage\nYou can call IsRowSelected in a script for the Clicked event to determine whether the row\nthe user clicked was selected. With IsRowSelected and SelectRow, you can highlight a row\non the client without causing a postback.\nExamples\nThis code calls IsRowSelected to test whether the clicked row is selected. If the row is\nselected, SelectRow deselects it; if it is not selected, SelectRow selects it:\nif (rowNumber > 0)\n{\n   if (dw_1.IsRowSelected(rowNumber))\n      dw_1.SelectRow(rowNumber, false);\n   else      dw_1.SelectRow(rowNumber, true);\n}\nSee also\nSelectRow\n9.105 IsSelected\nDescription\nDetermines whether a row is selected in a DataWindow or DataStore. A selected row is\nhighlighted using reverse video.\nApplies to\nTable 9.213:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\n"}
{"page": 743, "text": "Methods for the DataWindow Control\nPage 743\nboolean dwcontrol.IsSelected ( long row ) \nTable 9.214:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nrow\nA value identifying the row you want to test\nto see if it is selected\nReturn value\nReturns true if row in dwcontrol is selected and false if it is not selected. If row is greater than\nthe number of rows in dwcontrol or is 0 or negative, IsSelected also returns false.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nYou can call IsSelected in a script for the Clicked event to determine whether the row the\nuser clicked was selected.\nExamples\nThis code calls IsSelected to test whether the current row in dw_employee is selected. If the\nrow is selected, SelectRow deselects it; if it is not selected, SelectRow selects it:\nlong CurRow\nboolean result\n \nCurRow = dw_employee.GetRow()\nresult = dw_employee.IsSelected(CurRow)\n \nIF result THEN\n      dw_employee.SelectRow(CurRow, false)\nELSE\n      dw_employee.SelectRow(CurRow, true)\nEND IF\nThis code uses the NOT operator on the return value of IsSelected to accomplish the same\nresult as the IF/THEN/ELSE statement above:\ninteger CurRow\nboolean result\nCurRow = dw_employee.GetRow()\ndw_employee.SelectRow(CurRow, &\n      NOT dw_employee.IsSelected(CurRow))\nSee also\nSelectRow\n9.106 LineCount\nDescription\nDetermines the number of lines in an edit control that allows multiple lines.\nApplies to\n"}
{"page": 744, "text": "Methods for the DataWindow Control\nPage 744\nTable 9.215:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.LineCount ( ) \nTable 9.216:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nReturn value\nReturns the number of lines in dwcontrol if it succeeds and -1 if an error occurs. If dwcontrol\nis null, LineCount returns null.\nUsage\nLineCount counts each visible line, whether it was the result of wrapping or carriage returns.\nWhen you call LineCount for a DataWindow, it reports the number of lines in the edit control\nover the current row and column. A user can enter multiple lines in a DataWindow column\nonly if it has a text datatype and its box is large enough to display those lines.\nThe size of the column's box determines the number of lines allowed in the column. When\nthe user is typing, lines do not wrap automatically; the user must press Enter to type\nadditional lines.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.485, \u201cLineCount\u201d in\nPowerScript Reference.\nExamples\nIf the MultiLineEdit mle_Instructions has 9 lines, this example sets li_Count to 9:\ninteger li_Count\nli_Count = mle_Instructions.LineCount()\nThese statements display a MessageBox if fewer than two lines have been entered in the\nMultiLineEdit mle_Address:\ninteger li_Lines\nli_Lines = mle_Address.LineCount()\nIF li_Lines < 2 THEN\n      MessageBox(\"Warning\", \"2 lines are required.\")\nEND IF\n9.107 ModifiedCount\nDescription\n"}
{"page": 745, "text": "Methods for the DataWindow Control\nPage 745\nReports the number of rows that have been modified but not updated in a DataWindow or\nDataStore.\nApplies to\nTable 9.217:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.ModifiedCount ( ) \nTable 9.218:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns the number of rows that have been modified in the primary and filter buffers. Returns\n0 if no rows have been modified or if all modified rows have been updated in the database\ntable. Returns -1 if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nModifiedCount reports the number of rows that are scheduled to be added or updated in the\ndatabase table associated with a DataWindow or DataStore. This includes rows in the primary\nand filter buffers.\nA newly inserted row (with a status flag of New!) is not included in the modified count until\ndata is entered in the row (its status flag becomes NewModified!).\nThe DeletedCount method counts the number of rows in the deleted buffer. The RowCount\nmethod counts the total number of rows in the primary buffer.\nExamples\nIf five rows in dw_Employee have been modified but not updated in the associated database\ntable or filtered out of the primary buffer, the following code sets ll_Rows equal to 5:\nlong ll_Rows\nll_Rows = dw_Employee.ModifiedCount()\nIf any rows in dw_Employee have been modified but not updated in the associated\ndatabase table, this statement updates the database table associated with the dw_employee\nDataWindow control:\nIF dw_employee.ModifiedCount() > 0 THEN &\n      dw_employee.Update()\n"}
{"page": 746, "text": "Methods for the DataWindow Control\nPage 746\nSee also\nDeleteRow\nDeletedCount\nFilteredCount\nRetrieve\nRowCount\nUpdate\n9.108 Modify\nDescription\nModifies a DataWindow object by applying specifications, given as a list of instructions, that\nchange the DataWindow object's definition.\nYou can change appearance, behavior, and database information for the DataWindow\nobject by changing the values of properties. You can add and remove controls from the\nDataWindow object by providing specifications for the controls.\nApplies to\nTable 9.219:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nstring dwcontrol.Modify  ( string modstring ) \nTable 9.220:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow.\nmodstring\nA string whose value is the specifications for\nthe modification. See Usage for appropriate\nformats.\nReturn value\nReturns the empty string (\"\") if it succeeds and an error message if an error occurs. The error\nmessage takes the form \"Line n Column n incorrect syntax\". The character columns are\ncounted from the beginning of the compiled text of modstring.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\n"}
{"page": 747, "text": "Methods for the DataWindow Control\nPage 747\nModify lets you make many of the same settings in a script that you would make in the\nDataWindow painter. Typical uses for Modify are:\n\u2022 Changing colors, text settings, and other appearance settings of controls\n\u2022 Changing the update status of different tables in the DataWindow so that you can update\nmore than one table\n\u2022 Modifying the WHERE clause of the DataWindow object's SQL SELECT statement\n\u2022 Turning on Query mode or Prompt For Criteria so users can specify the data they want\n\u2022 Changing the status of Retrieve Only As Needed\n\u2022 Changing the data source of the DataWindow object\n\u2022 Controlling the Print Preview display\n\u2022 Deleting and adding controls (such as lines or bitmaps) in the DataWindow object\nEach of these uses is illustrated in the Examples for this method.\nYou can use three types of statements in modstring to modify a DataWindow object.\nTable 9.221:\nStatement type\nWhat it does\nCREATE control\n(settings)\nAdds control to the DataWindow object (such as text, computed fields,\nand bitmaps). Settings is a list of properties and values using the format\nyou see in exported DataWindow syntax. To create a control, you must\nsupply enough information to define it.\nControl cannot be an OLE Object control. You cannot add an OLE\nobject to a DataWindow using the Modify method.\nDESTROY\n[COLUMN]\ncontrol\nRemoves control from the DataWindow object. When control is a\ncolumn, specify the keyword COLUMN to remove both the column and\nthe column's data from the buffer.\ncontrolname.property=value\nChanges the value of property to value. Properties control the location,\ncolor, size, font, and other settings for controlname. When controlname\nis DataWindow, you can also set properties for database access.\nDepending on the specific property, value can be:\n\u2022 A constant.\n\u2022 A quoted constant.\n\u2022 An expression that consists of a default value followed by a valid\nDataWindow expression that returns the appropriate datatype for the\nproperty. Expressions are described below.\nObject names\n"}
{"page": 748, "text": "Methods for the DataWindow Control\nPage 748\nThe DataWindow painter automatically gives names to all controls. In previous versions,\nit named only columns and column labels, and to describe and modify properties of other\ncontrols easily, you had to name them.\nExpressions for Modify\nWhen you specify an expression for a DataWindow property, the expression has the format:\ndefaultvalue~tDataWindowpainterexpression\nDefaultvalue is a value that can be converted to the appropriate datatype for the property. It is\nfollowed by a tab (~t).\nDataWindowpainterexpression is an expression that can use any DataWindow painter\nfunction. The expression must also evaluate to the appropriate datatype for the property.\nWhen you are setting a column's property, the expression is evaluated for each row in the\nDataWindow, which allows you to vary the display based on the data.\nA typical expression uses the If function:\n'16777215 ~t If(emp_status=~~'A~~',255,16777215)'\nTo use that expression in a modstring, specify the following (entered as a single line):\nmodstring = \"emp_id.Color='16777215 ~t\nIf(emp_status=~~'A~~',255,16777215)'\"\nNot all properties accept expressions. For details on each property, see DataWindow Object\nProperties.\nQuotes and tildes\nBecause Modify's argument is a string, which can include other strings, you need to use\nspecial syntax to specify quotation marks. To specify that a quotation mark be used within\nthe string rather than match and end a previously opened quote, you can either specify the\nother style of quote (single quotes nested with double quotes) or precede the quotation mark\nwith a tilde (~).\nFor another level of nesting, the string itself must specify ~\", so you must include ~~ (which\nspecifies a tilde) followed by ~\" (which specifies a quote). For example, another way to type\nthe modstring shown above (entered as a single line) is:\nmodstring = \"emp_id.Color=~\"16777215 ~t\nIf(emp_status=~~~\"A~~~\",255,16777215)~\"\"\nFor more information about quotes and tildes, see Section 1.2.1, \u201cStandard datatypes\u201d in\nPowerScript Reference.\nBuilding a modstring with variables\nTo use variable data in modstring, you can build the string using variables in your program.\nAs you concatenate sections of modstring, make sure quotes are included in the string where\nnecessary. For example, the following code builds a modstring similar to the one above, but\nthe default color value and the two color values in the If function are calculated in the script.\nNotice how the single quotes around the expression are included in the first and last pieces of\nthe string:\nred_amount = Integer(sle_1.Text)\nmodstring = \"emp_id.Color='\" + &\n      String(RGB(red_amount, 255, 255)) + &\n"}
{"page": 749, "text": "Methods for the DataWindow Control\nPage 749\n      \"~tIf(emp_status=~~'A~~',\" + &\n      String(RGB(255, 0, 0)) + &\n      \",\" + &\n      String(RGB(red_amount, 255, 255)) + &\n      \")'\"\nThe following is a simpler example without the If function. You do not need quotes around\nthe value if you are not specifying an expression. Here the String and RGB functions produce\nin a constant value in the resulting modstring:\nmodstring = \"emp_id.Color=\" + &\n      String(RGB(red_amount, 255, 255))\nYou can set several properties with a single call to Modify by including each property setting\nin modstring separated by spaces. For example, assume the following is entered on a single\nline in the script editor:\nrtn = dw_1.Modify(\"emp_id.Font.Italic=0\noval_1.Background.Mode=0\noval_1.Background.Color=255\")\nHowever, it is easier to understand and debug a script in which each call to Modify sets one\nproperty.\nDebugging tip\nIf you build your modstring and store it in a variable that is the argument for Modify,\nyou can look at the value of the variable in Debug mode. When Modify's error\nmessage reports a column number, you can count the characters as you look at the\ncompiled modstring.\nModifying a WHERE clause\nFor efficiency, use Modify instead of SetSQLSelect to modify a WHERE clause.\nModify is faster because it does not verify the syntax and does not change the update\nstatus of the DataWindow object. However, Modify is more susceptible to user error.\nSetSQLSelect modifies the syntax twice (when the syntax is modified and when the\nretrieve executes) and affects the update status of the DataWindow object.\nPowerBuilder already includes many functions for modifying a DataWindow. Before using\nModify, check the list of DataWindow functions in Part I, \u201cObjects and Controls\u201d to see if\na function exists for making the change. Many of these functions are listed in the See also\nsection.\nModify is for modifying the properties of a DataWindow object and its internal controls.\nYou can set properties of the DataWindow control that contains the object using standard dot\nnotation. For example, to put a border on the control, specify:\ndw_1.Border = true\nExamples\nThese examples illustrate the typical uses listed in the Usage section. The examples use\nPowerScript. For a discussion of Modify and nested quotation marks in JavaScript, see\nAccessing DataWindow Object Properties in Code\nChanging colors\n"}
{"page": 750, "text": "Methods for the DataWindow Control\nPage 750\nThe effect of setting the Color property depends on the control you are modifying. To set the\nbackground color of the whole DataWindow object, use the following syntax:\ndwcontrolname.Modify ( \"DataWindow.Color='long'\" )\nTo set the text color of a column or a text control, use similar syntax:\ndwcontrolname.Modify ( \"controlname.Color='long'\" )\nTo set the background color of a column or other control, use the following syntax to set the\nmode and color. Make sure the mode is opaque:\ndwcontrolname.Modify ( \"controlname.Background.Mode= & \n   '<0 - Opaque, 1 - Transparent>'\")\ndwcontrolname.Modify ( \"controlname.Background.Color='long'\" )\nThe following examples use the syntaxes shown above to set the colors of various parts of the\nDataWindow object.\nThis statement changes the background color of the DataWindow dw_cust to red:\ndw_cust.Modify(\"DataWindow.Color = 255\")\nThis statement causes the DataWindow dw_cust to display the text of values in the salary\ncolumn in red if they exceed 90,000 and in green if they do not:\ndw_cust.Modify( &\n      \"salary.Color='0~tIf(salary>90000,255,65280)'\")\nThis statement nests one If function within another to provide three possible colors. The\nsetting causes the DataWindow dw_cust to display the department ID in green if the ID is\n200, in red if it is 100, and in black if it is neither:\ndw_cust.Modify(\"dept_id.Color='0~t \" &\n    + \"If(dept_id=200,65380,If(dept_id=100,255,0))'\")\nThe following example uses a complex expression with nested If functions to set the\nbackground color of the salary column according to the salary values. Each portion of the\nconcatenated string is shown on a separate line. See the pseudocode in the comments for an\nexplanation of what the nested If functions do. The example also sets the background mode to\nopaque so that the color settings are visible.\nThe example includes error checking, which displays Modify's error message, if any:\nstring mod_string, err\nlong color1, color2, color3, default_color\n \nerr = dw_emp.Modify(\"salary.Background.Mode=0\")\nIF err <> \"\" THEN\n      MessageBox(\"Status\", &\n         \"Change to Background Mode Failed \" + err)\n      RETURN\nEND IF\n \n/* Pseudocode for mod_string:\nIf salary less than 10000, set the background to red.\nIf salary greater than or equal to 10000 but less than 20000, set the background to\n blue.\nIf salary greater than or equal to 20000 but less than 30000, set the background\n color to green.\nOtherwise, set the background color to white, which is also the default. */\n"}
{"page": 751, "text": "Methods for the DataWindow Control\nPage 751\ncolor1 = 255 //red\ncolor2 = 16711680 //blue\ncolor3 = 65280 //green\ndefault_color = 16777215//white\n \nmod_string = &\n      \"salary.Background.Color = '\" &\n         + String(default_color) &\n         + \"~tIf(salary < 10000,\" &\n         + String(color1) &\n         + \",If(salary < 20000,\" &\n         + String(color2) &\n         + \",If(salary < 30000,\" &\n         + String(color3) &\n         + \",\" &\n         + String(default_color) &\n         + \")))'\"\n \nerr = dw_emp.Modify(mod_string)\nIF err <> \"\" THEN\n      MessageBox(\"Status\", &\n         \"Change to Background Color Failed \" + err)\n      RETURN\nEND IF\nThis example sets the text color of a RadioButton column to the value of color1 (red) if\nthe column's value is Y; otherwise, the text is set to black. As above, each portion of the\nconcatenated string is shown on a separate line:\ninteger color1, default_color\nstring mod_string, err\n \ncolor1 = 255 //red\ndefault_color = 0 //black\n \nmod_string = \"yes_or_no.Color ='\" &\n      + String(default_color) &\n      + \"~tif(yes_or_no=~~'Y~~',\" &\n      + String(color1) &\n      + \",\" &\n      + String(default_color) &\n      + \")'\"\nerr = dw_emp.Modify(mod_string)\nIF err <> \"\" THEN\n      MessageBox(\"Status\", &\n         \"Modify to Text Color \" &\n         + \"of yes_or_no Failed \" + err)\n      RETURN\nEND IF\nChanging displayed text\nTo set the text of a text control, the next two examples use this syntax:\ndwcontrolname.Modify ( \"textcontrolname.Text='string'\" )\nThis statement changes the text in the text control Dept_t in the DataWindow dw_cust to\nDept:\ndw_cust.Modify(\"Dept_t.Text='Dept'\")\nThis statement sets the displayed text of dept_t in the DataWindow dw_cust to Marketing if\nthe department ID is greater than 201; otherwise it sets the text to Finance:\n"}
{"page": 752, "text": "Methods for the DataWindow Control\nPage 752\ndw_cust.Modify(\"dept_t.Text='none~t \" + &\n      \"If(dept_id > 201,~'Marketing~',~'Finance~')'\")\nUpdating more than one table\nAn important use of Modify is to make it possible to update more than one table from one\nDataWindow object. The following script updates the table that was specified as updatable in\nthe DataWindow painter; then it uses Modify to make the other joined table updatable and to\nspecify the key column and which columns to update. This technique eliminates the need to\ncreate multiple DataWindow objects or to use embedded SQL statements to update more than\none table.\nIn this example, the DataWindow object joins two tables: department and employee. First\ndepartment is updated, with status flags not reset. Then employee is made updatable and is\nupdated. If all succeeds, the Update command resets the flags and COMMIT commits the\nchanges. Note that to make the script repeatable in the user's session, you must add code to\nmake department the updatable table again:\ninteger rc\nstring err\n \n/* The SELECT statement for the DataWindow is:\nSELECT department.dept_id, department.dept_name,\nemployee.emp_id, employee.emp_fname,\nemployee.emp_lname FROM department, employee ;\n*/\n \n// Update department, as set up in the DW painter\nrc = dw_1.Update(true, false)\n \nIF rc = 1 THEN\n      //Turn off update for department columns.\n      dw_1.Modify(\"department_dept_name.Update = No\")\n      dw_1.Modify(\"department_dept_id.Update = No\")\n      dw_1.Modify(\"department_dept_id.Key = No\")\n \n      // Make employee table updatable.\n      dw_1.Modify( &\n       \"DataWindow.Table.UpdateTable = ~\"employee~\"\")\n \n      //Turn on update for desired employee columns.\n      dw_1.Modify(\"employee_emp_id.Update = Yes\")\n      dw_1.Modify(\"employee_emp_fname.Update = Yes\")\n      dw_1.Modify(\"employee_emp_lname.Update = Yes\")\n      dw_1.Modify(\"employee_emp_id.Key = Yes\")\n \n      //Then update the employee table.\n      rc = dw_1.Update()\n      IF rc = 1 THEN\n         COMMIT USING SQLCA;\n      ELSE\n      ROLLBACK USING SQLCA;\n      MessageBox(\"Status\", &\n         + \"Update of employee table failed. \" &\n         + \"Rolling back all changes.\")\n      END IF\nELSE\n      ROLLBACK USING SQLCA;\n      MessageBox(\"Status\", &\n         + \"Update of department table failed. \" &\n         + \"Rolling back changes to department.\")\nEND IF\n"}
{"page": 753, "text": "Methods for the DataWindow Control\nPage 753\nAdding a WHERE clause\nThe following scripts dynamically add a WHERE clause to a DataWindow object that was\ncreated with a SELECT statement that did not include a WHERE clause. (Since this example\nappends a WHERE clause to the original SELECT statement, additional code would be\nneeded to remove a where clause from the original SELECT statement if it had one.) This\ntechnique is useful when the arguments in the WHERE clause might change at execution\ntime.\nThe original SELECT statement might be:\nSELECT employee.emp_id, employee.l_name FROM employee\nPresumably, the application builds a WHERE clause based on the user's choices. The\nWHERE clause might be:\nWHERE emp_id > 40000\nThe script for the window's Open event stores the original SELECT statement in\noriginal_select, an instance variable:\ndw_emp.SetTransObject(SQLCA)\noriginal_select = &\n      dw_emp.Describe(\"DataWindow.Table.Select\")\nThe script for a CommandButton's Clicked event attaches a WHERE clause stored in\nthe instance variable where_clause to original_select and assigns it to the DataWindow's\nTable.Select property:\nstring rc, mod_string\n \nmod_string = \"DataWindow.Table.Select='\" &\n      + original_select + where_clause + \"'\"\nrc = dw_emp.Modify(mod_string)\nIF rc = \"\" THEN\n      dw_emp.Retrieve( )\nELSE\n      MessageBox(\"Status\", \"Modify Failed\" + rc)\nEND IF\nQuotes inserted in the DataWindow painter\nFor SQL Anywhere and Oracle, the DataWindow painter puts double quotes around\nthe table and column name (for example, SELECT \"EMPLOYEE\".\"EMP_LNAME\").\nUnless you have removed the quotes, the sample WHERE clause must also use these\nquotes. For example:\nwhere_clause = &\n   \n   \n\" where ~~~\"EMPLOYEE~~~\".~~~\"SALARY~~~\" > 40000\"\nQuery mode\nQuery mode provides an alternate view of a DataWindow in which the user specifies\nconditions for selecting data. PowerBuilder builds the WHERE clause based on the\nspecifications. When the user exits query mode, you can retrieve data based on the modified\nSELECT statement.\n"}
{"page": 754, "text": "Methods for the DataWindow Control\nPage 754\nIn this example, a window that displays a DataWindow control has a menu that includes a\nselection called Select Data. When the user chooses it, its script displays the DataWindow\ncontrol in query mode and checks the menu item. When the user chooses it again, the script\nturns query mode off and retrieves data based on the new WHERE clause specified by the\nuser through query mode. The script also makes a CheckBox labeled Sort data visible, which\nturns query sort mode on and off.\nThe script for the Select Data menu item is:\nstring rtn\n \nIF m_selectdata.Checked = false THEN\n      // Turn on query mode so user can specify data\n      rtn = dw_1.Modify(\"DataWindow.QueryMode=YES\")\n \n      IF rtn = \"\" THEN\n         // If Modify succeeds, check menu to show\n         // Query mode is on and display sort CheckBox\n         This.Check()\n         ParentWindow.cbx_sort.Show()\n      ELSE\n         MessageBox(\"Error\", &\n            \"Can't access query mode to select data.\")\n      END IF\nELSE\n      // Turn off Query mode and retrieve data\n      // based on user's choices\n      rtn = dw_1.Modify(\"DataWindow.QueryMode=NO\")\n \n      IF rtn = \"\" THEN\n         // If Modify succeeds, uncheck menu to show\n         // Query mode is off, hide the sort\n         // CheckBox, and retrieve data\n         This.UnCheck()\n         ParentWindow.cbx_sort.Hide()\n         dw_1.AcceptText()\n         dw_1.Retrieve()\n      ELSE\n         MessageBox(\"Error\", &\n            \"Failure exiting query mode.\")\n      END IF\nEND IF\nA simple version of the script for Clicked event of the Sort data CheckBox follows. You\ncould add code as shown in the Menu script above to check whether Modify succeeded:\nIF This.Checked = true THEN\n      dw_1.Modify(\"DataWindow.QuerySort=YES\")\nELSE\n      dw_1.Modify(\"DataWindow.QuerySort=NO\")\nEND IF\nFor details on how you or the user specifies information in query mode, see Section 1.3.4,\n\u201cProviding query ability to users\u201d in DataWindow Programmers Guide.\nDataWindow presentation styles\nYou cannot use QueryMode and QuerySort with DataWindow objects that use any of\nthe following presentation styles: N-Up, Label, Crosstab, RichText, and Graph.\nPrompt for criteria\n"}
{"page": 755, "text": "Methods for the DataWindow Control\nPage 755\nis another way of letting the user specify retrieval criteria. You set it on a column-by-column\nbasis. When a script retrieves data, PowerBuilder displays the Specify Retrieval Criteria\nwindow, which gives the user a chance to specify criteria for all columns that have been set.\nIn a script that is run before you retrieve data, for example, in the Open event of the window\nthat displays the DataWindow control, the following settings would make the columns\nemp_name, emp_salary, and dept_id available in the Specify Retrieval Criteria dialog when\nthe Retrieve method is called:\ndw_1.Modify(\"emp_name.Criteria.Dialog=YES\")\ndw_1.Modify(\"emp_salary.Criteria.Dialog=YES\")\ndw_1.Modify(\"dept_id.Criteria.Dialog=YES\")\nThere are other Criteria properties that affect both query mode and prompt for criteria. For\ndetails, see the Criteria DataWindow object property in DataWindow Object Properties\nRetrieve as needed\nIn this example, the DataWindow object has been set up with Retrieve Only As Needed\nselected. When this is on, PowerBuilder retrieves enough rows to fill the DataWindow,\ndisplays them quickly, then waits for the user to try to display additional rows before\nretrieving more rows. If you want the fast initial display but do not want to leave the cursor\nopen on the server, you can turn off Retrieve Only As Needed with Modify.\nAfter you have determined that enough rows have been retrieved, the following code in the\nRetrieveRow event script changes the Retrieve.AsNeeded property, which forces the rest of\nthe rows to be retrieved:\ndw_1.Modify(\"DataWindow.Retrieve.AsNeeded=NO\")\nChanging the data source\nThis example changes the data source of a DataWindow object from a SQL SELECT\nstatement to a stored procedure. This technique works only if the result set does not change\n(that is, the number, type, and order of columns is the same for both sources).\nWhen you define the DataWindow object, you must define all possible DataWindow\nretrieval arguments. In this example, the SELECT statement defined in the painter has\nthree arguments, one of type string, one of type number, and one of type date. The stored\nprocedure has two arguments, both of type string. So, in the painter, you need to define four\nDataWindow arguments, two of type string, one of type number, and one of type date. (Note\nthat you do not have to use all the arguments you define.)\nstring rc, mod_string, name_str = \"Watson\"\ninteger dept_num = 100\n \n// Remove the DataWindow's SELECT statement\nDw_1.Modify(\"DataWindow.Table.Select = ''\")\n \n// Set the Procedure property to your procedure\nmod_string = \"DataWindow.Table.Procedure = &\n      '1 execute dbo.emp_arg2;1 @dept_id_arg &\n      = :num_arg1, @lname_arg = :str_arg1'\"\nrc = dw_1.Modify(mod_string)\n \n// If change is accepted, retrieve data\nIF rc = \"\" THEN\n      dw_1.Retrieve(dept_num, name_str)\nELSE\n"}
{"page": 756, "text": "Methods for the DataWindow Control\nPage 756\n      MessageBox(\"Status\", &\n         \"Change to DW Source Failed \" + rc)\nEND IF\nReplacing a DropDownDataWindow object\nSuppose you use Modify to replace one DropDownDataWindow object with another;\nfor example:\ndw_parent.Modify(dept_id.dddw.name= &\n   \n   \nd_dddw_empsal_by_dept )\nPowerBuilder compares the two DataWindow objects and reuses the original result set if the\nnumber of columns and their datatypes match. The display and data value column names\nmust exist in the data object SQL statements for both objects. If there are any differences,\nPowerBuilder will re-retrieve the data.\nDeleting and adding controls in the DataWindow object\nThis statement deletes a bitmap control called logo from the DataWindow dw_cust:\ndw_cust.Modify(\"destroy logo\")\nThis statement deletes the column named salary from the DataWindow dw_cust. Note that\nthis example includes the keyword column, so the column in the DataWindow and the data\nare both deleted:\ndw_cust.Modify(\"destroy column salary\")\nThis example adds a rectangle named rect1 to the header area of the DataWindow dw_cust\n(with the value of modstring entered as a single line):\nstring modstring\n \nmodstring = 'create rectangle(Band=background X=\"206\" Y=\"6\" height=\"69\"\n width=\"1363\" brush.hatch=\"6\" brush.color=\"12632256\" pen.style=\"0\" pen.width=\"14\"\n pen.color=\"268435584\" background.mode=\"2\" background.color=\"-1879048064\"\n name=rect1 )'\n \ndw_cust.Modify(modstring)\nThese statements add a bitmap named logo to the header area for grouping level 1 in the\nDataWindow dw_cust (with the value of modstring entered as a single line):\nstring modstring\n \nmodstring = 'create bitmap(band=footer x=\"37\" y=\"12\" height=\"101\" width=\"1509\"\n filename=\"C:\\PB\\BEACH.BMP\" border=\"0\" name=bmp1 )'\n \ndw_cust.Modify(modstring)\nSyntax for creating controls\nTo create a control, you must provide DataWindow syntax. The easiest way to\nget correct syntax for all the necessary properties is to paint the control in the\nDataWindow painter and export the syntax to a file. Then you make any desired\n"}
{"page": 757, "text": "Methods for the DataWindow Control\nPage 757\nchanges and put the syntax in your script, as shown above. This is the only way to get\naccurate syntax for complex controls like graphs.\nSee also\nDescribe\nReset\nSetBorderStyle\nSetDataStyle\nSetFilter\nSetFormat\nSetPosition\nSetRowFocusIndicator\nSetSeriesStyle\nSetSQLPreview\nSetSQLSelect\nSetTabOrder\nSetValidate\n9.109 Move\nDescription\nMoves a control or object to another position relative to its parent window, or for some\nwindow objects, relative to the screen.\nApplies to\nTable 9.222:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nintegerobjectname.Move  ( integer x, integer y ) \nTable 9.223:\nArgument\nDescription\nobjectname\nA reference to an object or control you want\nto move\nx\nThe x coordinate of the new location in\nPowerBuilder units\n"}
{"page": 758, "text": "Methods for the DataWindow Control\nPage 758\nArgument\nDescription\ny\nThe y coordinate of the new location in\nPowerBuilder units\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs or if objectname is a maximized window.\nIf any argument's value is null, Move returns null.\nUsage\nInherited from system window object. For information, see Section 2.4.530, \u201cMove\u201d in\nPowerScript Reference.\n9.110 OLEActivate\nDescription\nActivates Object Linking and Embedding (OLE) for the specified object and sends the\nspecified command verb to the OLE server application.\nApplies to\nTable 9.224:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\ninteger dwcontrol.OLEActivate ( long row, integer column, integer verb )\ninteger dwcontrol.OLEActivate ( long row, string column, integer verb )\nTable 9.225:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or child DataWindow.\nrow\nA long identifying the row location of the Database Blob control in the\nDataWindow object.\ncolumn\nThe column location of the Database Blob. Column can be a column number\n(integer) or a column name (string).\nverb\nUsually 0, but the verb is dependent on the OLE server.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nOLEActivate returns null.\nUsage\n"}
{"page": 759, "text": "Methods for the DataWindow Control\nPage 759\nThe user can activate OLE by double-clicking an OLE blob column in a DataWindow. Use\nOLEActivate when you want to activate OLE in response to some other event or action -- for\nexample, when the user clicks a button.\nThe verb you specify determines what action occurs when the OLE server application\nis invoked. The default verb (0) generally means you want to edit the document. Each\nOLE application has its own particular set of supported verbs. To find out what verbs\nthe application supports, consult the documentation for the application, or look for the\napplication name in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes section of the\nWindows registry and find its Protocol\\ StdFileEditing\\Verb key. For example, the AVIFile\nclass has three verbs, 0, 1, and 2, for Play, Edit, and Open.\nData for an OLE application is stored in the database as a Binary/Text Large Object (blob).\nIn SQL Anywhere, the datatype of the database column is long binary. To make the blob\naccessible to users, use the DataWindow painter to set up the blob column. In the painter, you\nadd an OLE Database Blob object (called TableBlob in the DataWindow object properties) to\nthe DataWindow object and specify the OLE server application in the Database Binary/Text\nLarge Object window.\nFor setup details, see Section 5.3, \u201cUsing OLE in an Application\u201d in Application Techniques.\nExamples\nThis statement activates OLE for the Database Blob control in row 5 of the salary column in\nDataWindow dw_emp_data. The verb is 0:\ndw_emp_data.OLEActivate(5, \"salary\", 0)\nSee also\nActivate in Section 2.4.4, \u201cActivate\u201d in PowerScript Reference\n9.111 OneTrip (obsolete)\nDescription\nGenerates HTML syntax for the Web DataWindow after setting values that refresh the state\nof the server component so that it is in sync with user actions.\nObsolete method\nOneTrip is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.226:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcomponent.OneTrip ( string htmlobjectname, string browser,\n   string selflink, string selflinkargs, string action, string context )\n"}
{"page": 760, "text": "Methods for the DataWindow Control\nPage 760\nstring dwcomponent.OneTripEx ( string htmlobjectname, \n   string retrievalargs, string browser, string selflink, \n   string selflinkargs, string action, string context )\n \nTable 9.227:\nArgument\nDescription\ndwcomponent A reference to a Web DataWindow server component\nhtmlobjectnameA string specifying a name used in generated code for the Web DataWindow\nclient control, page parameters, and client side events. You must specify a\nunique object name when there is more than one Web DataWindow on a Web\npage.\nretrievalargs\nA string that contains the values of the retrieval arguments expected by the\nDataWindow object associated with the server component (see Usage note).\nbrowser\nA string identifying the browser and version. The value should match the\nbrowser information passed to the Web server in the HTTP header. The\ncorresponding server variable is HTTP_USER_AGENT.\nSets the value of the HTMLGen.Browser property for the DataWindow object\nassociated with the server component.\nFor information on recognized browsers, see HTMLGen.property.\nselflink\nThe URL for the current page. It cannot include parameters. Parameters from\nselflinkargs may be added when HTML is generated.\nThe server component uses SelfLink to generate URLs for navigation buttons\nthat obtain additional rows from the result set.\nSets the value of the HTMLGen.SelfLink property for the DataWindow\nobject associated with the server component.\nselflinkargs\nA string in the form:\nargname='exp'{ | argname = 'exp' } ... \nArgname is an argument passed to the server.\nExp is a DataWindow expression whose value is a string. The DataWindow\nin the server component evaluates it, converts it using URL encoding, and\nincludes in the selflinkargs string.\nSets the value of the HTMLGen.SelfLinkArgs property for the DataWindow\nobject associated with the server component.\naction\nA string describing an action associated with a button click or method call\nin a Web DataWindow client control on a Web page. The value of action is\nstored in a page parameter called htmlobjectname_action.\ncontext\nA string describing the context of action in the Web DataWindow client\ncontrol. The string is generated by a Web DataWindow script and the value is\nstored in a page parameter called htmlobjectname_context.\nThe format is not documented and subject to change.\nReturn value\n"}
{"page": 761, "text": "Methods for the DataWindow Control\nPage 761\nReturns the generated HTML if it succeeds and an error message if any of the requested\nsettings fails.\nUsage\nOneTrip and OneTripEx perform the tasks of SetSelfLink, SetBrowser, Retrieve, SetAction,\nand Generate in a single method. They are meant to be used with a server component that has\nbeen previously configured with a DataWindow definition and transaction information. Using\nOneTrip produces maximum performance for the Web DataWindow client while allowing\nthe server component to remain stateless.\nUse OneTripEx instead of OneTrip if you need to specify retrieval arguments. The\nretrievalargs string in the OneTripEx syntax has the format:\nvalue1 \\n value2 \\n value3... \\n value16\nThe values of the retrieval arguments must be separated by newline characters (\\n)\nand individual values cannot contain newline characters as part of the value. The Web\nDataWindow supports up to 16 retrieval arguments.dd\nYou can specify an array for the value of a retrieval argument by separating the array values\nwith a tab character (\\t). For example, if the DataWindow expected an array for the second\nretrieval argument, the syntax would be:\nvalue1 \\n value2a\\t value2b \\t value2c \\n value3... \nIf the script gets the values for the retrieval arguments from page parameters, you must also\nspecify the retrieval arguments as selflinkargs expressions, so that the values will be available\nas page parameters when the page is reloaded.\nThe evaluated selflinkargs expressions are included in the generated HTML as hidden fields\nand are available to server-side scripts as page parameters. You can use the arguments to\nsupply information that the server component needs to render additional pages of the result\nset, such as retrieval arguments. Selflinkargs can also be used to keep login information or\nother data available that was passed in the original call to the page.\nFor information on quotation marks and other formatting for the expression, see the\nSetSelfLink method.\nExamples\nThis Web Target server-side script uses OneTripEx to get generated HTML. The\nDataWindow object expects two retrieval arguments, an employee ID and a salary:\nfunction GetParam( envparam ) {\n      if( exists(document.value[envparam] ) )  {\n         return document.value[envparam];\n      }\n      return \"\";\n};\n \n// Create component on server\ndwMine = java.CreateComponent(\"DataWindow/MyVersion\",\n      \"iiop://testMachine:9000\", \"jagadmin\", \"\",\n      \"DataWindow/HTMLGenerator110\");\n \n// Get information about user's latest button click\nvar action = psDocument.GetParam(\"dwMine_action\");\nvar context = psDocument.GetParam(\"dwMine_context\");\n"}
{"page": 762, "text": "Methods for the DataWindow Control\nPage 762\n \n// Get browser and hyperlinking information\nvar browser = psDocument.GetEnv(\"HTTP_USER_AGENT\");\nvar selfLink = psDocument.GetEnv(\"SCRIPT_NAME\");\n \n// Get retrieval arguments from page parameters\nvar args = \"\" + psDocument.GetParam(\"arg_empid\") + \"\\n\" +\n psDocument.GetParam(\"arg_salary\");\n \n// Set up page parameters for reloaded page\nlinkargs = \"arg_empid ='\\\"\" +\n         psDocument.GetParam(\"arg_empid\") + \"\\\"'\"\n      + \"|arg_salary= '\\\"\" +\n         psDocument.GetParam(\"arg_salary\") + \"\\\"'\";\n \n// Include the generated HTML in the Web page\npsDocument.Write(dwMine.OneTripEx(\"dwMine\", args, browser, selfLink, linkargs,\n action, context) );\nSee also\nGenerate\nRetrieve\nSetAction\nSetBrowser\nSetSelfLink\n9.112 Paste\nDescription\nInserts (pastes) the contents of the clipboard into the specified control. If no text is selected in\nthe control, the text on the clipboard is pasted at the insertion point. If text is selected, Paste\nreplaces the selected text with the text on the clipboard.\nApplies to\nTable 9.228:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.Paste ( ) \nTable 9.229:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control. Text is pasted into the edit control over\nthe current row and column.\nReturn value\n"}
{"page": 763, "text": "Methods for the DataWindow Control\nPage 763\nReturns the number of characters that were pasted into the edit control for dwcontrol. If\nnothing has been cut or copied (the clipboard is empty), Paste does not change the contents of\nthe edit control and returns 0. If the clipboard contains nontext data (for example, a bitmap or\nOLE object) and the control cannot accept that data, Paste does not change the contents and\nreturns 0.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nThe text is pasted into the edit control over the current row and column. If the clipboard\ncontains more text that is allowed for that column, the text is truncated. If the clipboard text\ndoes not match the column's datatype, all the text is truncated, so that any selected text is\nreplaced with an empty string.\nTo insert a specific string in dwcontrol or to replace selected text with a specific string, use\nthe ReplaceText method.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.559, \u201cPaste\u201d in\nPowerScript Reference.\nExamples\nIf the clipboard contains \"Proposal good for 90 days\" and no text is selected in the edit\ncontrol of dw_rpt, this statement pastes \"Proposal good for 90 days\" at the insertion point in\nthe edit control and returns 25:\ndw_rpt.Paste()\nIf the clipboard contains the string \"Final Edition\", the edit control in dw_rpt contains \"This\nis a Preliminary Draft\", and the text in edit control is selected, this statement deletes \"This is\na Preliminary Draft\", replaces it with \"Final Edition\", and returns 13:\ndw_rpt.Paste()\nSee also\nCopy\nCut\nReplaceText\n9.113 PasteRTF\nDescription\nPastes rich text data from a string into a DataWindow control or DataStore object.\nApplies to\nTable 9.230:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\n"}
{"page": 764, "text": "Methods for the DataWindow Control\nPage 764\nSyntax\nPowerBuilder\nlong rtename.PasteRTF ( string richtextstring {, Band band } )\nTable 9.231:\nArgument\nDescription\nrtename\nA reference to a DataWindow control or DataStore object. The DataWindow\nobject in the DataWindow control or DataStore must be a RichTextEdit\nDataWindow.\nrichtextstring A string whose value is data with rich text formatting.\nband\n(optional)\nA value specifying the band into which the rich text data is pasted. For a list\nof valid values, see Band.\nThe default is the band that contains the insertion point.\nReturn value\nReturns -1 if an error occurs. If richtextstring is null, PasteRTF returns null.\nUsage\nA DataWindow in the RTE presentation style has only three bands. There are no summary or\ntrailer bands and there are no group headers and footers.\nPowerBuilder RichText Edit control\nYou can use the same syntax with any PowerBuilder RichTextEdit control. See\nSection 2.4.561, \u201cPasteRTF\u201d in PowerScript Reference.\nExamples\nThis statement pastes rich text in the string ls_richtext into the header of the RichTextEdit\nrte_message:\nstring ls_richtext\nrte_message.PasteRTF(ls_richtext, Header!)\nSee also\nCopyRTF\n9.114 PointerX\nDescription\nDetermines the distance of the pointer from the left edge of the specified object.\nApplies to\nTable 9.232:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\n"}
{"page": 765, "text": "Methods for the DataWindow Control\nPage 765\nSyntax\nPowerBuilder\ninteger objectname.PointerX  ( ) \nTable 9.233:\nArgument\nDescription\nobjectname\nThe name of the control or window for which you want the pointer's distance\nfrom the left edge. If you do not specify objectname, PointerX reports the\ndistance from the left edge of the current sheet or window.\nReturn value\nReturns the pointer's distance from the left edge of objectname in PowerBuilder units if it\nsucceeds and -1 if an error occurs.\nUsage\nInherited from DragObject. For information, see Section 2.4.570, \u201cPointerX\u201d in PowerScript\nReference.\n9.115 PointerY\nDescription\nDetermines the distance of the pointer from the top of the specified object.\nApplies to\nTable 9.234:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger objectname.PointerY  ( ) \nTable 9.235:\nArgument\nDescription\nobjectname\nThe name of the control or window for which you want the pointer's distance\nfrom the top. If you do not specify objectname, PointerY reports the distance\nfrom the top of the current sheet or window.\nReturn value\nReturns the pointer's distance from the top of objectname in PowerBuilder units if it succeeds\nand -1 if an error occurs.\nIf objectname is null, PointerY returns null.\n"}
{"page": 766, "text": "Methods for the DataWindow Control\nPage 766\nUsage\nInherited from DragObject. For information, see Section 2.4.571, \u201cPointerY\u201d in PowerScript\nReference.\n9.116 Position\nReports the position of the insertion point in a DataWindow.\nTable 9.236:\nTo report\nUse\nThe position of the insertion point in a DataWindow that does not\nhave a RichTextEdit presentation style\nSyntax 1\nThe position of the insertion point or the start and end of selected\ntext in a DataWindow whose object has the RichTextEdit\npresentation style\nSyntax 2\n9.116.1 Syntax 1 For DataWindows with standard presentation styles\nDescription\nDetermines the position of the insertion point in an edit control.\nApplies to\nTable 9.237:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong editname.Position ( ) \nTable 9.238:\nArgument\nDescription\neditname\nA reference to a DataWindow control in\nwhich you want to find the location of the\ninsertion point\nReturn value\nReturns the location of the insertion point in editname if it succeeds and -1 if an error occurs.\nIf editname is null, Position returns null.\nUsage\nPosition reports the position number of the character immediately following the insertion\npoint. For example, Position returns 1 if the cursor is at the beginning of editname. If text is\nselected in editname, Position reports the number of the first character of the selected text.\n"}
{"page": 767, "text": "Methods for the DataWindow Control\nPage 767\nPosition reports the insertion point's position in the edit control over the current row and\ncolumn.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.577, \u201cPosition\u201d in\nPowerScript Reference.\nExamples\nIf mle_EmpAddress contains Boston Street, the cursor is immediately after the n in Boston,\nand no text is selected, this statement returns 7:\nmle_EmpAddress.Position()\nIf mle_EmpAddress contains Boston Street and Street is selected, this statement returns 8\n(the position of the S in Street):\nmle_EmpAddress.Position()\nSee also\nSelectedLine\nSelectedStart\n9.116.2 Syntax 2 For DataWindows with RichTextEdit presentation styles\nDescription\nDetermines the line and column position of the insertion point or the start and end of selected\ntext in a RichTextEdit control.\nApplies to\nTable 9.239:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nband rtename.Position ( long fromline, long fromchar {, long toline, long\n tochar } )\nTable 9.240:\nArgument Description\nrtename\nA reference to a DataWindow control. The DataWindow object in the\nDataWindow control must be a RichTextEdit DataWindow.\nfromline\nA variable in which you want to save the number of the line where the insertion\npoint or the start of the selection is.\n"}
{"page": 768, "text": "Methods for the DataWindow Control\nPage 768\nArgument Description\nfromchar\nA variable in which you want to save the number in the line of the first\ncharacter in the selection or after the insertion point.\ntoline\n(optional)\nA variable in which you want to save the number of the line where the selection\nends.\ntochar\n(optional)\nA variable in which you want to save the number in the line of the character\nbefore which the selection ends.\nReturn value\nReturns the band containing the selection or insertion point. The returned value is a value of\nthe Band enumerated datatype (Detail!, Header!, or Footer!).\nUsage\nPosition reports the position of the insertion point if you omit the toline and tochar\narguments. If text is selected, the insertion point can be at the beginning or the end of the\nselection. For example, if the user dragged down to select text, the insertion point is at the\nend.\nIf there is a selection, a character argument can be set to 0 to indicate that the selection begins\nor ends at the start of a line, with nothing else selected on that line. When the user drags up,\nthe selection can begin at the start of a line and fromchar is set to 0. When the user drags\ndown, the selection can end at the beginning of a line and tochar is set to 0.\nSelection or insertion point\nTo find out whether there is a selection or just an insertion point, specify all four arguments.\nIf toline and tochar are set to 0, then there is no selection, only an insertion point. If there is a\nselection and you want the position of the insertion point, you will have to call Position again\nwith only two arguments. This difference is described next.\nThe position of the insertion point and end of selection can differ\nWhen reporting the position of selected text, the positions are inclusive -- Position reports the\nfirst line and character and the last line and character that are selected. When reporting the\nposition of the insertion point, Position identifies the character just after the insertion point.\nTherefore, if text is selected and the insertion point is at the end, the values for the insertion\npoint and the end of the selection differ.\nTo illustrate, suppose the first four characters in line 1 are selected and the insertion point is\nat the end. If you request the position of the insertion point:\nrte_1.Position(ll_line, ll_char)\nThen:\n\u2022 ll_line is set to 1\n\u2022 ll_char is set to 5, the character following the insertion point\nIf you request the position of the selection:\nrte_1.Position(ll_startline, ll_startchar, &\n"}
{"page": 769, "text": "Methods for the DataWindow Control\nPage 769\n      ll_endline, ll_endchar)\n\u2022 ll_startline and ll_startchar are both set to 1\n\u2022 ll_endline is 1 and ll_endchar is set to 4, the last character in the selection\nPassing values to SelectText\nBecause values obtained with Position provide more information than simply a selection\nrange, you cannot pass the values directly to SelectText. In particular, 0 is not a valid\ncharacter position when selecting text, although it is meaningful in describing the selection.\nExamples\nThis example calls Position to get the band and the line and column values for the beginning\nand end of the selection. The values are converted to strings and displayed in the StaticText\nst_status:\ninteger li_rtn\nlong ll_startline, ll_startchar\nlong ll_endline, ll_endchar\nstring ls_s, ls_band\nband l_band\n \n// Get the band and start and end of the selection\nl_band = rte_1.Position(ll_startline,ll_startchar,&\n      ll_endline, ll_endchar)\n \n// Convert position values to strings\nls_s = \"Start line/char: \" + String(ll_startline) &\n      + \", \" + String(ll_startchar)\nls_s = ls_s + \" End line/char: \" &\n      + String(ll_endline) + \", \" + String(ll_endchar)\n \n// Convert Band datatype to string\nCHOOSE CASE l_band\n      CASE Detail!\n         ls_band = \" Detail\"\n      CASE Header!\n         ls_band = \" Header\"\n      CASE Footer!\n         ls_band = \" Footer\"\n      CASE ELSE\n         ls_band = \" No band\"\nEND CHOOSE\nls_s = ls_s + ls_band\n \n// Display the information\nst_status.Text = ls_s\nThis example extends the current selection down 1 line. It takes into account whether there is\nan insertion point or a selection, whether the insertion point is at the beginning or end of the\nselection, and whether the selection ends at the beginning of a line:\ninteger rtn\nlong l1, c1, l2, c2, linsert, cinsert\nlong l1select, c1select, l2select, c2select\n \n// Get selection start and end\nrte_1.Position(l1, c1, l2, c2)\n// Get insertion point\nrte_1.Position(linsert, cinsert)\n"}
{"page": 770, "text": "Methods for the DataWindow Control\nPage 770\n \nIF l2 = 0 and c2 = 0 THEN //insertion point\n      l1select = linsert\n      c1select = cinsert\n      l2select = l1select + 1 // Add 1 to end line\n      c2select = c1select\n \nELSEIF l2 > l1 THEN // Selection, ins pt at end\n      IF c2 = 0 THEN // End of selection (ins pt)\n         // at beginning of a line (char 0)\n         c2 = 999 // Change to end of prev line\n         l2 = l2 - 1\n      END IF\n \n      l1select = l1\n      c1select = c1\n      l2select = l2 + 1 // Add 1 to end line\n      c2select = c2\n \nELSEIF l2 < l1 THEN // selection, ins pt at start\n      IF c1 = 0 THEN // End of selection (not ins pt)\n         // at beginning of a line\n         c1 = 999 // Change to end of prev line\n         l1 = l1 - 1\n      END IF\n      l1select = l2\n      c1select = c2\n      l2select = l1 + 1 // Add 1 to end line\n      // (start of selection)\n      c2select = c1\n \nELSE // l1 = l2, selection on one line\n      l1select = l1\n      l2select = l2 + 1 // Add 1 to line\n      IF c1 < c2 THEN // ins pt at end\n         c1select = c1\n         c2select = c2\n      ELSE // c1 > c2, ins pt at start\n         c1select = c2\n         c2select = c1\n      END IF\nEND IF\n \n// Select the extended selection\nrtn = rte_1.SelectText( l1select, c1select, &\n      l2select, c2select )\nFor an example of selecting each word in a RichTextEdit control, see SelectTextWord.\nSee also\nSelectedLine\nSelectedStart\nSelectText\n9.117 PostEvent\nDescription\nAdds an event to the end of the event queue of an object.\nApplies to\n"}
{"page": 771, "text": "Methods for the DataWindow Control\nPage 771\nTable 9.241:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nboolean objectname.PostEvent ( TrigEvent event {, long word, long long } ) \nboolean objectname.PostEvent ( TrigEvent event {, long word, string long } ) \nTable 9.242:\nArgument Description\nobjectname The name of any PowerBuilder object or control (except an application) that has\nevents associated with it.\nevent\nA value of the TrigEvent enumerated datatype that identifies a PowerBuilder\nevent (for example, Clicked!, Modified!, or DoubleClicked!) or a string whose\nvalue is the name of an event. The event must be a valid event for objectname\nand a script must exist for the event in objectname.\nword\n(optional)\nA value to be stored in the WordParm property of the system's Message object.\nIf you want to specify a value for long, but not for word, enter 0. (For cross-\nplatform compatibility, WordParm and LongParm are both longs.)\nlong\n(optional)\nA value that you want to store in the LongParm property of the system's\nMessage object. When you specify a string, a pointer to the string is stored in\nthe LongParm property, which you can access with the String function (see\nUsage).\nReturn value\nReturns true if it is successful and false if the event is not a valid event for objectname or no\nscript exists for the event in objectname.\nIf any argument's value is null, PostEvent returns null.\nUsage\nInherited from PowerObject. For information, see Section 2.4.582, \u201cPostEvent\u201d in\nPowerScript Reference.\n9.118 Print\nSends data to the current printer (or spooler, if the user has a spooler set up). There are two\nsyntaxes that you can use with DataWindows:\nTable 9.243:\nTo\nUse\nSend the contents of a DataWindow control or DataStore to the\nprinter as a print job.\nSyntax 1\nInclude a visual object, such as a window or a graph control, in a\nprint job. For the PowerBuilder environment only.\nSyntax 2\n"}
{"page": 772, "text": "Methods for the DataWindow Control\nPage 772\nTo\nUse\nFor a description of PowerBuilder system print commands, see\nPart I, \u201cPowerScript Reference\u201d.\n9.118.1 Syntax 1 For printing a single DataWindow or DataStore\nDescription\nSends the contents of a DataWindow control or DataStore object to the printer as a print job.\nApplies to\nTable 9.244:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.Print ( { boolean canceldialog {, showprintdialog } } )\nTable 9.245:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control, DataStore, or child DataWindow\nthat contains the information to be printed.\ncanceldialog\n(optional)\nA boolean value indicating whether you want to display a nonmodal\ndialog that allows the user to cancel printing. Values are:\n\u2022 True -- (Default) Display the dialog.\n\u2022 false -- Do not display the dialog.\nWorking with DataStore objects\nWhen working with DataStores, the canceldialog argument must always\nbe set to false.\nshowprintdialog\n(optional)\nA boolean value indicating whether you want to display the system Print\ndialog box. Values are:\nTrue -- Display the dialog box\nfalse -- (default) Do not display the dialog box\nWorking with DataStore objects\nWhen working with DataStores, the showprintdialog argument must\nalways be set to false.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Print returns\nnull.\n"}
{"page": 773, "text": "Methods for the DataWindow Control\nPage 773\nUsage\nPrinted output uses the same fonts and layout that appear on screen for the DataWindow\nobject.\nWhen the DataWindow object's presentation style is RichTextEdit, each row begins a new\npage in the printed output.\nPowerBuilder environment\nPowerBuilder manages print jobs by opening the job, sending data, and closing the\njob. When you use Syntax 1, print job management happens automatically. You do\nnot need to use the PrintOpen and PrintClose functions.\nUse Syntax 1 to print the contents of a DataWindow object. The Print method prints\nall the rows that have been retrieved. To print several DataWindows as a single job,\ndo not use Print. Instead, open the print job with PrintOpen, call the PowerScript\nsystem function PrintDataWindow for each DataWindow, and close the job.\nEvents for DataWindow printing\nWhen you use Print for DataWindow controls or DataStores, it triggers a PrintStart\nevent just before any data is sent to the printer (or spooler), a PrintPage event for each\npage break, and a PrintEnd event when printing is complete.\nThe PrintPage event has return codes that let you control whether the page about to be\nformatted is printed. You can skip the upcoming page by returning a value of 1 in the\nPrintPage event.\nExamples\nThe following statements are equivalent. Each sends the contents of dw_employee to the\ncurrent printer. The Cancel dialog box displays, allowing the user to cancel the printing, but\nthe Print dialog box does not:\ndw_employee.Print()\ndw_employee.Print(true)\ndw_employee.Print(true, false)\nThis statement sends the contents of dw_employee to the current printer. The Print dialog box\ndisplays but the Cancel dialog box does not:\ndw_employee.Print(false, true)\nSee also\nPrintDataWindow in Section 2.4.590, \u201cPrintDataWindow\u201d in PowerScript Reference\n9.118.2 Syntax 2 For printing a visual object in a print job\nDescription\nIncludes a visual object, such as a window or a graph control, in a print job that you have\nstarted with the PrintOpen function.\nApplies to\n"}
{"page": 774, "text": "Methods for the DataWindow Control\nPage 774\nTable 9.246:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger objectname.Print ( long printjobnumber, integer x, integer y {, integer\n width, integer height } ) \nTable 9.247:\nArgument\nDescription\nobjectname\nThe name of the object that you want to print. The object must either be a\nwindow or an object whose ancestor type is DragObject, which includes all\nthe controls that you can place in a window.\nprintjobnumberThe number the PrintOpen function assigns to the print job\nx\nAn integer whose value is the x coordinate on the page of the left corner of\nthe object, in thousandths of an inch.\ny\nAn integer whose value is the y coordinate on the page of the left corner of\nthe object, in thousandths of an inch.\nwidth\n(optional)\nAn integer specifying the printed width of the object in thousandths of an\ninch. If omitted, PowerBuilder uses the object's original width.\nheight\n(optional)\nAn integer specifying the printed height of the object in thousandths of an\ninch. If omitted, PowerBuilder uses the object's original height.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Print returns\nnull.\nUsage\nPowerBuilder manages print jobs by opening the job, sending data, and closing the job. When\nyou use Syntax 2, you must call the PrintOpen function and the PrintClose or PrintCancel\nfunctions yourself to manage the process. For more information, see Part I, \u201cPowerScript\nReference\u201d.\nPrint area and margins\nThe print area is the physical page size minus any margins in the printer itself.\nDepending on the printer, you may be able to change margins using PrintSend and\nprinter-defined escape sequences.\nExamples\nThis example prints the CommandButton cb_close in its original size at location 500, 1000:\nlong Job\nJob = PrintOpen( )\ncb_close.Print(Job, 500,1000)\n"}
{"page": 775, "text": "Methods for the DataWindow Control\nPage 775\nPrintClose(Job)\nThis example opens a print job, which defines a new page, then prints a title using the third\nsyntax of Print. Then it uses this syntax of Print to print a graph on the first page and a\nwindow on the second page:\nlong Job\nJob = PrintOpen( )\nPrint(Job, \"Report of Year-to-Date Sales\")\ngr_sales1.Print(Job, 1000,PrintY(Job)+500, &\n      6000,4500)\nPrintPage(Job)\nw_sales.Print(Job, 1000,500, 6000, 4500)\nPrintClose(Job)\nSee also\nPrint in Section 2.4.585, \u201cPrint\u201d in PowerScript Reference\nPrintCancel\nPrintClose in Section 2.4.589, \u201cPrintClose\u201d in PowerScript Reference\nPrintOpen in Section 2.4.596, \u201cPrintOpen\u201d in PowerScript Reference\nPrintScreen in Section 2.4.601, \u201cPrintScreen\u201d in PowerScript Reference\n9.119 PrintCancel\nCancels printing and deletes the spool file, if any. There are two syntaxes.\nTable 9.248:\nTo\nUse\nCancel printing of a DataWindow or DataStore printed with the Print\nfunction.\nSyntax 1\nCancel a print job that you began with the PrintOpen function. For the\nPowerBuilder environment only.\nFor a description of PowerBuilder system print commands, see Part I,\n\u201cPowerScript Reference\u201d.\nSyntax 2\n9.119.1 Syntax 1 For DataWindows and DataStores\nDescription\nCancels the printing of a DataWindow or DataStore that was printed using Syntax 1 of Print.\nApplies to\nTable 9.249:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\n"}
{"page": 776, "text": "Methods for the DataWindow Control\nPage 776\ninteger dwcontrol.PrintCancel ( )\nTable 9.250:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore object, or child DataWindow.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If dwcontrol is null, PrintCancel returns\nnull.\nUsage\nPrintCancel cancels the printing of the specified DataWindow or DataStore by deleting the\nspool file, if any, and closing the job.\nPowerBuilder environment\nWhen you use the Print method to print the DataWindow or DataStore, without using\nPrintOpen, use Syntax 1 to cancel printing. When you use the PowerScript system\nfunction PrintDataWindow to print a DataWindow as part of a print job, use Syntax 2\nto cancel printing.\nWhen you use Print for DataWindow controls or DataStores, it triggers a PrintStart\nevent just before any data is sent to the printer (or spooler), a PrintPage event for each\npage break, and a PrintEnd event when printing is complete. You can use PrintCancel\nin the PrintStart or PrintPage event to cancel printing.\nExamples\nThis statement sends the contents of the DataWindow dw_employee to the current printer\nwithout displaying the Cancel dialog:\ndw_Employee.Print(FALSE)\nThis statement in the PrintStart event cancels printing:\ndw_employee.PrintCancel()\nSee also\nPrint\n9.119.2 Syntax 2 For canceling a print job\nDescription\nCancels printing of a print job that you opened with the PrintOpen function. The print job is\nidentified by the number returned by PrintOpen.\nApplies to\nTable 9.251:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\n"}
{"page": 777, "text": "Methods for the DataWindow Control\nPage 777\nSyntax\nPowerBuilder\ninteger PrintCancel ( long printjobnumber ) \nTable 9.252:\nArgument\nDescription\nprintjobnumber\nThe number the PrintOpen function assigned\nto the print job.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If printjobnumber is null, PrintCancel\nreturns null.\nUsage\nPrintCancel cancels the specified print job by deleting the spool file, if any, and closing the\njob. Because PrintCancel closes the print job, do not call the PrintClose function after you\ncall PrintCancel.\nExamples\nIn this example, a script for a Print button opens a print job and then opens a window with\na cancel button. If the user clicks on the cancel button, its script sets a global variable that\nindicates that the user wants to cancel the job. After each printing command in the Print\nbutton's script, the code checks the global variable and cancels the job if its value is true.\nThe definition of the global variable is:\nboolean gb_printcancel\nThe script for the Print button is:\nlong job, li\n \ngb_printcancel = false\njob = PrintOpen(\"Test Page Breaks\")\nIF job < 1 THEN\n      MessageBox(\"Error\", \"Can't open a print job.\")\n      RETURN\nEND IF\n \nOpen(w_printcancel)\n \nPrintBitmap(Job, \"d:\\PB\\bitmap1.bmp\", 5, 10, 0, 0)\nIF gb_printcancel = true THEN\n      PrintCancel(job)\n      RETURN\nEND IF\n \n... // Additional printing commands,\n... // including checking gb_printcancel\n \nPrintClose(job)\nClose(w_printcancel)\nThe script for the cancel button in the second window is:\n"}
{"page": 778, "text": "Methods for the DataWindow Control\nPage 778\ngb_printcancel = true\nClose(w_printcancel)\nSee also\nPrint\nPrintCancel in Section 2.4.588, \u201cPrintCancel\u201d in PowerScript Reference\nPrintClose in Section 2.4.589, \u201cPrintClose\u201d in PowerScript Reference\nPrintOpen in Section 2.4.596, \u201cPrintOpen\u201d in PowerScript Reference\n9.120 ReplaceText\nDescription\nReplaces selected text in the edit control for the current row and column with a specified\nstring.\nApplies to\nTable 9.253:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong editname.ReplaceText ( string string ) \nTable 9.254:\nArgument\nDescription\neditname\nA reference to a DataWindow control\nstring\nThe string that replaces the selected text\nReturn value\nReturns the number of characters in string and -1 if an error occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nIf there is no selection, ReplaceText inserts the replacement text at the cursor position.\nTo use the contents of the clipboard as the replacement text, call the Paste method instead of\nReplaceText.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.638, \u201cReplaceText\u201d in\nPowerScript Reference.\n"}
{"page": 779, "text": "Methods for the DataWindow Control\nPage 779\nExamples\nIf the DataWindow edit control contains \"Offer Good for 3 Months\" and the selected text is\n\"3 Months\", this statement replaces \"3 Months\" with \"60 Days\" and returns 7. The resulting\ntext in the edit control is \"Offer Good for 60 Days\":\ndw_salesoffer.ReplaceText(\"60 Days\")\nIf there is no selected text, this statement inserts \"New product\" at the cursor position in the\nedit control for dw_products:\ndw_products.ReplaceText(\"New product\")\nSee also\nCopy\nCut\nPaste\nReplaceText in the Section 2.4.638, \u201cReplaceText\u201d in PowerScript Reference\n9.121 ReselectRow\nDescription\nAccesses the database to retrieve values for all columns that can be updated and refreshes\nall timestamp columns in a row in a DataWindow control or DataStore. The values from the\ndatabase are redisplayed in the row.\nApplies to\nTable 9.255:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.ReselectRow ( long row ) \nTable 9.256:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control, DataStore, or child DataWindow in\nwhich you want to reselect a row\nrow\nA value identifying the row to reselect\nReturn value\nReturns 1 if it is successful and -1 if the row cannot be reselected (for example, the\nDataWindow object cannot be updated or the row was deleted by another user).\n"}
{"page": 780, "text": "Methods for the DataWindow Control\nPage 780\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nReselectRow is supported for SQLSelect DataWindows. Use ReselectRow to discard values\nthe user changed and replace them with values from the database after an update fails (due to\na concurrent access error, for example).\nAbout timestamp support\nTimestamp support is not available in all DBMSs. For information on timestamp\ncolumns, see the documentation for your DBMS.\nNote If you are using ShareData and then use ReselectRow on the primary DataWindow, the\nsecondary DataWindow resets back to row 1, column 1.\nExamples\nThis statement reselects row 5 in the DataWindow control dw_emp:\ndw_emp.ReselectRow(5)\nThis statement reselects the clicked row if the update is not successful:\nIF dw_emp.Update( ) < 0 THEN\n      dw_emp.ReselectRow(dw_emp.GetClickedRow())\nEND IF\nSee also\nGetClickedRow\nSelectRow\nUpdate\n9.122 Reset\nDescription\nClears all the data from a DataWindow control or DataStore object.\nFor the syntax to use for deleting graphs within a DataWindow object that have an\nexternal data source, see Reset. For the syntax to use with other PowerBuilder controls, see\nSection 2.4.640, \u201cReset\u201d in PowerScript Reference.\nApplies to\nTable 9.257:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.Reset ( ) \n"}
{"page": 781, "text": "Methods for the DataWindow Control\nPage 781\nTable 9.258:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. The return value is usually not used.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nReset is not the same as deleting rows from the DataWindow object or child DataWindow.\nReset affects the application only, not the database. If you delete rows and then call\nthe Update method, the rows are deleted from the database table associated with the\nDataWindow object. If you call Reset and then call Update, no changes are made to the table.\nPowerBuilder environment\nIf you call Reset when the Retrieve As Needed option is set, Reset will clear the\nrows that have been retrieved. However, because Retrieve As Needed is on, the\nDataWindow immediately retrieves the next set of rows.\nTo prevent the rows from being retrieved, call DBCancel before calling Reset. If all\nthe rows have been retrieved (the cursor has been closed and the RetrieveEnd event\nhas occurred), then when Reset clears the DataWindow, it stays empty.\nExamples\nThis statement completely clears the contents of dw_employee:\ndw_employee.Reset()\nIn a DataWindow whose Retrieve As Needed option is on, this example cancels the retrieval\nbefore resetting the DataWindow:\ndw_employee.DBCancel()\ndw_employee.Reset()\nSee also\nDeleteRow\n9.123 ResetInk\nDescription\nClears ink from an InkPicture control in a DataWindow.\nApplies to\nTable 9.259:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\n"}
{"page": 782, "text": "Methods for the DataWindow Control\nPage 782\nSyntax\nPowerBuilder\ninteger dwcontrol.ResetInk ( string name, long rownumber )\nTable 9.260:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control.\nname\nThe name of the InkPicture control from\nwhich you want to clear the picture.\nrownumber\nThe number of the row that contains the\npicture to be cleared. To clear all rows, set\nrownumber to 0.\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\nUse the ResetInk function to clear the ink from an InkPicture control.\nExamples\nThe following example clears the ink in an InkPicture control in row 3 of a DataWindow\nobject:\nint li_return\nli_return = dw_1.ResetInk(inkpic_1, 3)\nSee also\nSaveInk\nSaveInkPic\n9.124 ResetTransObject\nDescription\nStops a DataWindow control or DataStore from using the programmer-specified transaction\nobject that is currently in effect through a call to the SetTransObject method. After you\ncall the ResetTransObject method, the DataWindow control or DataStore uses its internal\ntransaction object.\nApplies to\nTable 9.261:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\n"}
{"page": 783, "text": "Methods for the DataWindow Control\nPage 783\nPowerBuilder\ninteger dwcontrol.ResetTransObject ( ) \nTable 9.262:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. The return value is usually not used.\nIf dwcontrol is null, the method returns null.\nUsage\nIf you reset the transaction object and SetTrans has never been called to set the values in the\ninternal transaction object, call SetTrans to set them or SetTransObject to establish a new\nprogrammer-specified transaction object.\nResetTransObject is almost never used because programmer-specified and internal\ntransaction objects in one application are generally not used together. Programmer-specified\ntransaction objects, specified with SetTransObject, provide better application performance.\nTo change the programmer-specified transaction object, simply call SetTransObject again.\nExamples\nThis statement stops dw_employee from using programmer-specified transaction objects:\ndw_employee.ResetTransObject()\nSee also\nGetTrans\nSetTrans\nSetTransObject\n9.125 ResetUpdate\nDescription\nClears the update flags in the primary and filter buffers and empties the delete buffer of a\nDataWindow or DataStore.\nApplies to\nTable 9.263:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\n"}
{"page": 784, "text": "Methods for the DataWindow Control\nPage 784\nPowerBuilder\ninteger dwcontrol.ResetUpdate ( ) \nTable 9.264:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control,\nDataStore, or child DataWindow in which\nyou want to reset the update flags\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nWhen a row is changed, inserted, or deleted, its update flag is set, making it marked for\nupdate. By default the Update method turns these flags off. If you want to coordinate updates\nof more than one DataWindow or DataStore, however, you can prevent Update from clearing\nthe flags. Then, after you verify that all the updates succeeded, you can call ResetUpdate for\neach DataWindow to clear the flags. If one of the updates failed, you can keep the update\nflags, prompt the user to fix the problem, and try the updates again.\nYou can find out which rows are marked for update with the GetItemStatus method. If a\nrow is in the delete buffer or if it is in the primary or filter buffer and has NewModified! or\nDataModified! status, its update flag is set. After update flags are cleared, all rows have the\nstatus NotModified! or New! and the delete buffer is empty.\nExamples\nThese statements coordinate the update of two DataWindow objects:\nint rtncode\nCONNECT USING SQLCA;\ndw_cust.SetTransObject(SQLCA)\ndw_sales.SetTransObject(SQLCA)\n \nrtncode = dw_cust.Update(true, false)\nIF rtncode = 1 THEN\n      rtncode = dw_sales.Update(true, false)\n      IF rtncode = 1 THEN\n         dw_cust.ResetUpdate() // Both updates are OK\n         dw_sales.ResetUpdate()// Clear update flags\n         COMMIT USING SQLCA;   // Commit them\n      ELSE\n         ROLLBACK USING SQLCA; // 2nd update failed\n      END IF\nEND IF\nSee also\nUpdate\n9.126 Resize\nDescription\n"}
{"page": 785, "text": "Methods for the DataWindow Control\nPage 785\nResizes an object or control by setting its Width and Height properties and then redraws the\nobject.\nApplies to\nTable 9.265:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\ninteger objectname.Resize (integer width, integer height ) \nTable 9.266:\nArgument\nDescription\nobjectname\nA reference to the object or control you want\nto resize\nwidth\nThe new width in PowerBuilder units\nheight\nThe new height in PowerBuilder units\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs or if objectname is a minimized or\nmaximized window.\nUsage\nYou cannot use Resize for a child DataWindow.\nUse with other PowerBuilder objects and controls\nResize does not resize a minimized or maximized sheet or window. If the window is\nminimized or maximized, Resize returns -1.\nFor use with other PowerBuilder controls, see Section 2.4.645, \u201cResize\u201d in\nPowerScript Reference.\nExamples\nThis statement changes the Width and Height properties of gb_box1 and redraws gb_box1\nwith the new properties:\ngb_box1.Resize(100, 150)\nThis statement doubles the width and height of the picture control p_1:\np_1.Resize(p_1.Width*2, p_1.Height*2)\n9.127 Retrieve\nDescription\n"}
{"page": 786, "text": "Methods for the DataWindow Control\nPage 786\nRetrieves rows from the database for a DataWindow control or DataStore. If arguments\nare included, the argument values are used for the retrieval arguments in the SQL SELECT\nstatement for the DataWindow object or child DataWindow.\nApplies to\nTable 9.267:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.Retrieve ( { any argument, any argument . . . } ) \nTable 9.268:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child\nDataWindow.\nargument (optional with\nRetrieve, required with\nRetrieveEx)\nOne or more values that you want to use as retrieval arguments\nin the SQL SELECT statement defined in dwcontrol.\nReturn value\nReturns the number of rows displayed (that is, rows in the primary buffer) if it succeeds\nand -1 if it fails. If there is no DataWindow object assigned to the DataWindow control or\nDataStore, this method returns -1.\nThis method always returns -1 if the data source is external. Use a method such as ImportFile\nto populate the DataWindow.\nUsage\nAfter rows are retrieved, the DataWindow object's filter is applied. Therefore, any retrieved\nrows that do not meet the filter criteria are immediately moved to the filter buffer and are not\nincluded in the return count.\nBefore you can retrieve rows for a DataWindow control or DataStore, you must specify a\ntransaction object with SetTransObject or SetTrans. If you use SetTransObject, you must also\nuse a SQL CONNECT statement to establish a database connection.\nNormally, when you call Retrieve, any rows that are already in the DataWindow control or\nDataStore are discarded and replaced with the retrieved rows. You can return the code 2 in\nthe RetrieveStart event to prevent this. In this case, Retrieve adds any retrieved rows to the\nones that already exist in the buffers.\nAfter the Retrieve method retrieves data for the DataWindow, PowerBuilder applies the sort\ncriteria that were defined for the DataWindow object, if any.\nRetrieval arguments\n"}
{"page": 787, "text": "Methods for the DataWindow Control\nPage 787\nIf arguments are expected but not specified, the user is prompted for the retrieval arguments.\nA retrieval argument can be null if the SELECT statement is designed to handle null values.\nFor example, if a two-part WHERE clause is separated by OR, then either part can be null\nwhile the other matches values in the database.\nEvents\nRetrieve may trigger these events:\nDBError\nRetrieveEnd\nRetrieveRow\nRetrieveStart\nNone of these events is triggered if the data source is external, because Retrieve always fails.\nYou must use one of the import methods to populate the DataWindow.\nExamples\nThis statement causes dw_emp1 to retrieve rows from the database.\ndw_emp1.Retrieve()\nThis example illustrates how to set up a connection and then retrieve rows in the\nDataWindow control. A typical scenario is to establish the connection in the application's\nOpen event and to retrieve rows in the Open event for the window that contains the\nDataWindow control.\nThe following is a script for the application open event. SQLCA is the default transaction\nobject. The ProfileString function is getting information about the database connection from\nan initialization file:\n// Set up Transaction object from the INI file\nSQLCA.DBMS = ProfileString(\"myapp.ini\", &\n      \"Database\", \"DBMS\", \" \")\nSQLCA.DbParm = ProfileString(\"myapp.ini\", &\n      \"Database\", \"DbParm\", \" \")\n// Connect to database\nCONNECT USING SQLCA;\n// Test whether the connect succeeded\nIF SQLCA.SQLCode <> 0 THEN\n      MessageBox(\"Connect Failed\", &\n         \"Cannot connect to database.\" &\n         + SQLCA.SQLErrText)\n      RETURN\nEND IF\nOpen(w_main)\nTo continue the example, the open event for w_main sets the transaction object for the\nDataWindow control dw_main to SQLCA and retrieves rows from the database.\nIf no rows were retrieved or if there is an error (that is, the return value is negative), the script\ndisplays a message to the user:\nlong ll_rows\ndw_main.SetTransObject(SQLCA)\nll_rows = dw_main.Retrieve()\nIF ll_rows < 1 THEN MessageBox( &\n      \"Database Error\", &\n      \"No rows retrieved.\")\n"}
{"page": 788, "text": "Methods for the DataWindow Control\nPage 788\nThis example illustrates the use of retrieval arguments. Assume that :Salary and :Region\nare declared as arguments in the DataWindow painter and dw_emp has this SQL SELECT\nstatement:\nSELECT Name, emp.sal, sales.rgn From Employee, Sales\n      WHERE emp.sal > :Salary and sales.rgn = :Region\nThen this statement causes dw_emp1 to retrieve employees from the database who have a\nsalary greater than $50,000 and are in the northwest region:\ndw_1.Retrieve(50000, \"NW\")\nThis example also illustrates retrieval arguments. Assume dw_EmpHist contains this SQL\nSELECT statement and emps is defined as a number array:\nSELECT EmpNbr, Sal, Rgn From Employee WHERE EmpNbr IN (:emps)\nThese statements cause dw_EmpHist to retrieve Employees from the database whose\nemployee numbers are values in the array emps:\nDouble emps[3]\nemps[1] = 100\nemps[2] = 200\nemps[3] = 300\ndw_EmpHist.Retrieve(emps)\nThe following example illustrates how to use Retrieve twice to get data meeting different\ncriteria. Assume the SELECT statement for the DataWindow object requires one argument,\nthe department number. Then these statements retrieve all rows in the database in which\ndepartment number is 100 or 200.\nThe script for the RetrieveStart event in the DataWindow control sets the return code to 2 so\nthat the rows and buffers of the DataWindow control are not cleared before each retrieval:\nRETURN 2\nThe script for the Clicked event for a Retrieve CommandButton retrieves the data with two\nfunction calls. The Reset method clears any previously retrieved rows, normally done by\nRetrieve.\nHere, Retrieve is prevented from doing it by the return code in the RetrieveStart event:\ndw_1.Reset( )\ndw_1.Retrieve(100)\ndw_1.Retrieve(200)\nSee also\nDeleteRow\nGetLastError\nGetLastErrorString\nInsertRow\nSetTrans\nSetTransObject\nUpdate\n"}
{"page": 789, "text": "Methods for the DataWindow Control\nPage 789\n9.128 RowCount\nDescription\nObtains the number of rows that are currently available in a DataWindow control or\nDataStore. To determine the number of rows available, the RowCount method checks the\nprimary buffer.\nApplies to\nTable 9.269:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.RowCount ( ) \nTable 9.270:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns the number of rows that are currently available in dwcontrol, 0 if no rows are\ncurrently available, and -1 if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nThe primary buffer for a DataWindow control or DataStore contains the rows that are\ncurrently available for display or printing. These are the rows counted by RowCount. The\nnumber of currently available rows equals the total number of rows retrieved minus any\ndeleted or filtered rows plus any inserted rows. The deleted and filtered rows are stored in the\nDataWindow's delete and filter buffers.\nExamples\nThis statement returns the number of rows currently available in dw_Employee:\nlong NbrRows\nNbrRows = dw_Employee.RowCount()\nThis example determines when the user has scrolled to the end of a DataWindow control. It\ncompares the row count with the DataWindow property LastRowOnPage:\ndw_1.ScrollNextPage()\nIF dw_1.RowCount() = Integer(dw_1.Describe( &\n         \"DataWindow.LastRowOnPage\")) THEN\n      ... // Appropriate processing\nEND IF\n"}
{"page": 790, "text": "Methods for the DataWindow Control\nPage 790\nSee also\nDeleteRow\nDeletedCount\nFilter\nFilteredCount\nInsertRow\nModifiedCount\nSetFilter\nUpdate\n9.129 RowsCopy\nDescription\nCopies a range of rows from one DataWindow control (or DataStore object) to another, or\nfrom one buffer to another within a single DataWindow control (or DataStore).\nApplies to\nTable 9.271:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.RowsCopy ( long startrow, long endrow, \n   DWBuffer copybuffer, datawindow targetdw, long beforerow,\n   DWBuffer targetbuffer)\ninteger dwcontrol.RowsCopy ( long startrow, long endrow, \n   DWBuffer copybuffer, datastore targetdw, long beforerow, \n   DWBuffer targetbuffer )\ninteger dwcontrol.RowsCopy ( long startrow, long endrow, \n   DWBuffer copybuffer, datawindowchild targetdw, long beforerow,\n   DWBuffer targetbuffer )\nTable 9.272:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control, DataStore, or child DataWindow from\nwhich you want to copy rows.\nstartrow\nThe number of the first row you want to copy.\nendrow\nThe number of the last row you want to copy.\ncopybuffer\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer from which you want to copy rows.\nFor a list of valid values, see DWBuffer.\n"}
{"page": 791, "text": "Methods for the DataWindow Control\nPage 791\nArgument\nDescription\ntargetdw\nA reference to the DataWindow control or DataStore object to which you\nwant to copy the rows. Targetdw can be the same DataWindow (or DataStore)\nor another DataWindow (or DataStore).\nbeforerow\nThe number of the row before which you want to insert the copied rows.\nTo insert after the last row, use any value that is greater than the number of\nexisting rows.\ntargetbuffer\nA value of the dwBuffer enumerated datatype identifying the target\nDataWindow buffer for the copied rows.\nFor a list of valid values, see DWBuffer.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nWhen you use the RowsCopy method, the status of the rows that are copied to the primary\nbuffer is NewModified!. If you issue an update request, PowerBuilder sends SQL INSERT\nstatements to the DBMS for the new rows.\nWhen you use RowsCopy, data is not automatically retrieved for drop-down DataWindows\nin the target DataWindow or DataStore, as it is when you call InsertRow. You must explicitly\ncall Retrieve for child DataWindows in the target.\nWhen you use RowsCopy or RowsMove to populate another DataWindow, the copied data is\nnot automatically processed by filters or sort criteria in effect on the target DataWindow. You\nmight be required to call the Filter, GroupCalc, or Sort methods to properly process the data.\nUses for RowsCopy include:\n\u2022 Making copies of one or more rows so that the users can create new rows based on existing\ndata\n\u2022 Printing a range of rows by copying selected rows to another DataWindow and printing the\nsecond DataWindow\nBuffer manipulation and query mode\nA DataWindow cannot be in query mode when you call the RowsCopy method.\nExamples\nThis statement copies all the rows starting with the current row in dw_1 to the beginning of\nthe primary buffer in dw_2:\ndw_1.RowsCopy(dw_1.GetRow(), &\n      dw_1.RowCount(), Primary!, dw_2, 1, Primary!)\nThis example copies all the rows starting with the current row in dw_1 to the beginning of the\nprimary buffer in the drop-down DataWindow state_id in dw_3:\ndatawindowchild dwc\n"}
{"page": 792, "text": "Methods for the DataWindow Control\nPage 792\ndw_3.GetChild(\"state_id\", dwc)\ndw_1.RowsCopy(dw_1.GetRow(), &\n      dw_1.RowCount(), Primary!, dwc, 1, Primary!)\nThis example copies all the rows starting with the current row in dw_1 to the beginning of the\nprimary buffer in the nested report d_employee:\ndatawindowchild dwc\ndw_composite.GetChild(\"d_employee\", dwc)\ndw_1.RowsCopy(dw_1.GetRow(), &\n      dw_1.RowCount(), Primary!, dwc, 1, Primary!)\nSee also\nRowsDiscard\nRowsMove\n9.130 RowsDiscard\nDescription\nDiscards a range of rows in a DataWindow control. Once a row has been discarded using\nRowsDiscard, you cannot restore the row. You have to retrieve it again from the database.\nApplies to\nTable 9.273:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.RowsDiscard (long startrow, long endrow, DWBuffer buffer ) \nTable 9.274:\nArgument\nDescription\ndwcontrol\nThe reference to a DataWindow control or child DataWindow.\nstartrow\nThe number of the first row you want to discard.\nendrow\nThe number of the last row you want to discard.\nbuffer\nA value of the dwBuffer enumerated datatype specifying the DataWindow\nbuffer containing the rows to be discarded.\nFor a list of valid values, see DWBuffer.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\n"}
{"page": 793, "text": "Methods for the DataWindow Control\nPage 793\nUse RowsDiscard when your application is finished with some of the rows in a DataWindow\ncontrol and you do not want an update to affect the rows in the database. For example, you\ncan discard rows in the delete buffer, which prevents the rows from being deleted when you\ncall Update.\nUse Reset to clear all the rows from a DataWindow control.\nThe RowsDiscard method triggers the RowFocusChanging and RowFocusChanged events\nonly when the row number of the current row is changed. The current row is simply a number\nthat indicates which row is the current row. A change in the content of the row does not\ntrigger the events if the number of the current row remains the same.\nSuppose you have a DataWindow with two rows. If the current row is row 1 and\nRowsDiscard discards row 1, row 2 becomes the current row, but its row number also\nchanges from 2 to 1. The events are not fired because the current row number is still row 1.\nIf the current row is row 2 and RowsDiscard discards row 1, the events are fired because the\ncurrent row number has changed from row 2 to row 1.\nExamples\nThis statement discards all the rows in the delete buffer for dw_1. As a result if the\napplication later calls dw_1.Update(), the DataWindow will not submit SQL DELETE\nstatements to the DBMS for these rows:\ndw_1.RowsDiscard(1, dw_1.DeletedCount(), Delete!)\nSee also\nReset\nRowsCopy\nRowsMove\n9.131 RowsMove\nDescription\nClears a range of rows from one DataWindow control (or DataStore) and inserts them in\nanother. Alternatively, RowsMove moves rows from one buffer to another within a single\nDataWindow control (or DataStore).\nApplies to\nTable 9.275:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.RowsMove ( long startrow, long endrow, \n   DWBuffer movebuffer, datawindow targetdw, long beforerow,\n   DWBuffer targetbuffer )\ninteger dwcontrol.RowsMove ( long startrow, long endrow,\n   DWBuffer movebuffer, datastore targetdw, long beforerow,\n"}
{"page": 794, "text": "Methods for the DataWindow Control\nPage 794\n   DWBuffer targetbuffer )\ninteger dwcontrol.RowsMove ( long startrow, long endrow, \n   DWBuffer movebuffer, datawindowchild targetdw, \n   long beforerow, DWBuffer targetbuffer )\nTable 9.276:\nArgument\nDescription\ndwcontrol\nThe name of a DataWindow control, DataStore, or child DataWindow from\nwhich you want to move rows.\nstartrow\nThe number of the first row you want to move.\nendrow\nThe number of the last row you want to move.\nmovebuffer\nA value of the dwBuffer enumerated datatype identifying the DataWindow\nbuffer from which you want to move the rows.\nFor a list of valid values, see DWBuffer.\ntargetdw\nThe name of the DataWindow control or DataStore to which you want to\nmove the rows. Targetdw can be the same DataWindow control (or DataStore)\nor a different DataWindow control (or DataStore), but it cannot be a child\nDataWindow.\nbeforerow\nThe number of the row before which you want to insert the moved rows.\nTo insert after the last row, use any value that is greater than the number of\nexisting rows.\ntargetbuffer\nA value of the dwBuffer enumerated datatype identifying the target buffer for\nthe rows.\nFor a list of valid values, see DWBuffer.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nWhen you use RowsMove, the rows have the status NewModified! in the target\nDataWindow.\nIf you move rows between buffers in a single DataWindow control or DataStore,\nPowerBuilder retains knowledge of where the rows came from, and their status is changed\naccordingly. For example, if you move unmodified rows from the primary buffer to the delete\nbuffer, they are marked for deletion. If you move the rows back to the primary buffer, their\nstatus returns to NotModified!. Note, however, that if you move rows from one DataWindow\ncontrol (or DataStore) to another and back again, the rows' status is NewModified! because\nthey came from a different DataWindow.\nThe RowsMove method triggers the RowFocusChanging and RowFocusChanged events only\nwhen the row number of the current row is changed. The current row is simply a number that\nindicates which row is the current row. A change in the content of the row does not trigger\nthe events if the number of the current row remains the same.\nSuppose you have a DataWindow with two rows. If the current row is row 1 and RowsMove\nmoves row 1, row 2 becomes the current row, but its row number also changes from 2 to 1.\n"}
{"page": 795, "text": "Methods for the DataWindow Control\nPage 795\nThe events are not fired because the current row number is still row 1. If the current row is\nrow 2 and RowsMove moves row 1, the events are fired because the current row number has\nchanged from row 2 to row 1.\nWhen you use RowsMove, data is not automatically retrieved for drop-down DataWindows\nin the target DataWindow, as it is when you call InsertRow. You must explicitly call Retrieve\nfor child DataWindows in the target.\nWhen you use RowsCopy or RowsMove to populate another DataWindow, the copied data is\nnot automatically processed by filters or sort criteria in effect on the target DataWindow. You\nmight be required to call the Filter, GroupCalc, or Sort methods to properly process the data.\nUses for RowsMove include:\n\u2022 Moving several rows from the primary buffer to the delete buffer, instead of deleting them\none at a time\n\u2022 Moving rows from the delete buffer to the primary buffer, to implement an Undo\ncapability in your application\nBuffer manipulation and query mode\nA DataWindow cannot be in query mode when you call the RowsMove method.\nExamples\nThis statement moves all the rows starting with the first row in the delete buffer for dw_1 to\nthe primary buffer for dw_1, thereby undeleting these rows:\ndw_1.RowsMove(1, dw_1.DeletedCount(), Delete!, &\n      dw_1, 1, Primary!)\nSee also\nRowsCopy\nRowsDiscard\n9.132 SaveAs\nDescription\nSaves the contents of a DataWindow or DataStore in the format you specify.\nFor syntax to save the contents of graphs in DataWindows and DataStores, see SaveAs.\nFor syntax to save objects in OLE controls and OLE storage, see SaveAs in PowerScript\nReference.\nApplies to\nTable 9.277:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\n"}
{"page": 796, "text": "Methods for the DataWindow Control\nPage 796\nPowerBuilder\ninteger dwcontrol.SaveAs ( { string filename, saveastype saveastype, boolean\n colheading { , encoding encoding } } )\nTable 9.278:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child\nDataWindow.\nfilename (optional\nfor PowerBuilder)\nA string whose value is the name of the file in which to save the\ncontents. If you omit this argument, or specify an empty string (\"\") for\nfilename but include valid values for the saveastype and colheading\narguments, the DataWindow prompts end users for a file name.\nWorking with DataStore objects\nIf you are working with a DataStore, you must supply the filename\nargument.\nsaveastype\n(optional for\nPowerBuilder)\nA value of the SaveAsType enumerated datatype specifying the format\nin which to save the contents of the DataWindow object.\nFor a list of values, see SaveAsType.\ncolheading\n(optional for\nPowerBuilder)\nA boolean value indicating whether you want to include the\nDataWindow's column headings at the beginning of the file. The\ndefault value is true. This argument is used for the following formats:\nClipboard, CSV, Excel, and Text. For most other formats, column\nheadings are always saved.\nencoding (optional\nfor PowerBuilder)\nCharacter encoding of the file to which the data is saved. This\nparameter applies only to the following formats: TEXT, CSV, SQL,\nHTML, and DIF. If you do not specify an encoding parameter, the file\nis saved in ANSI format. Values are:\n\u2022 EncodingANSI! (default)\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE!\n\u2022 EncodingUTF16BE!\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SaveAs\nreturns null.\nUsage\nIf you do not specify any arguments for SaveAs, PowerBuilder displays the Save As dialog\nbox. A drop-down list lets the user specify the format of the saved data.\nReport format (PSReport! value of SaveAsType) is the best choice if the DataWindow is\na composite report. Choosing PSReport! has no effect if the DataWindow object has the\nRichText presentation style.\n"}
{"page": 797, "text": "Methods for the DataWindow Control\nPage 797\nFor XML!, the XML logical structure used is based on the current XML export template\nfor the DataWindow object. You can change the export template by setting the value of the\nExport.XML.UseTemplate property. If no export template is specified, the default template is\nused.\nIf you use date formats in your report, you must verify that yyyy is the Short Date Style\nfor year in the Regional Settings of the user's Control Panel. Your program can check this\nwith the RegistryGet function. If the setting is not correct, you can ask the user to change it\nmanually or to have the application change it (by calling the RegistrySet function). The user\nmight need to reboot after the setting is changed.\nWhen you save the contents of a DataWindow to a text file, double quotes are handled in\na way that enables the ImportFile method to produce the same DataWindow when the text\nfile is imported back into PowerBuilder. Any field that is enclosed in a pair of double quotes\nis wrapped with three pairs of double quotes in the saved text file. Double quotes at the\nbeginning of a text field that have no matching double quotes at the end of the field are also\nreplaced by three double quotes in the saved text file. However, a double quote elsewhere in\nthe field is saved as one double quote.\nThe behavior of the SaveAs method with the EncodingANSI! parameter or with no encoding\nparameter is platform dependent. On the Windows and Solaris platforms, the file is always\nsaved with ANSI encoding whether you are connected to an ANSI or Unicode database. On\nthe Linux platform with an ANSI database connection, SaveAs saves the file with ANSI\nencoding. On the Linux platform with a Unicode database connection, if the data contains\nmultilanguage characters, SaveAs converts the characters to UTF-8 and saves the file with\nUTF-8 encoding.\nExamples\nThis statement saves the contents of dw_History to the file G:\\INVENTORY\n\\EMPLOYEE.HIS. The saved file is in CSV format without column headings:\ndw_History.SaveAs(\"G:\\INVENTORY\\EMPLOYEE.HIS\", &\n   CSV!, false)\nThe following statements set the template used by the DataWindow dw_1 to t_report,\nspecify that metadata in the XMLSchema! format should be generated in a separate file, and\ngenerate the files c:\\myxml.xml containing the DataWindow row data in XML format, and c:\n\\myxml.xsd containing the XML schema used in c:\\myxml.xml:\ndw_1.Modify(\"DataWindow.Export.XML.UseTemplate = 't_report'\")\ndw_1.Modify(\"DataWindow.Export.XML.MetaDataType = XMLSchema!\")\ndw_1.Modify(\"DataWindow.Export.XML.SaveMetaData = MetaDataExternal!\")\ndw_1.SaveAs(\"c:\\myxml.xml\", XML!, false)\nThe following statements generate the files c:\\dw_one.fo containing the DataWindow\npresentation and data in XSL-FO format, and c:\\dw_one.pdf containing the DataWindow\npresentation and data in PDF format:\ndw_1.SaveAs(\"c:\\dw_one.fo\", XSLFO!, false)\ndw_1.SaveAs(\"c:\\dw_one.pdf\", PDF!, false)\nSee also\nImportFile\nPrint\n"}
{"page": 798, "text": "Methods for the DataWindow Control\nPage 798\nSaveAsFormattedText\nUpdate\n9.133 SaveAsAscii\nDescription\nSaves the contents of a DataWindow or DataStore into a standard ANSI text file.\nApplies to\nTable 9.279:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.SaveAsAscii ( string filename {, string separatorcharacter {,string\n quotecharacter {, string lineending {, boolean retainnewlinechar } } } } )\nTable 9.280:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore.\nfilename\nA string whose value is the name of the file in which to save the contents.\nseparatorcharacter\n(optional)\nA string whose value is the character to be used to delimit values. If you\nomit separatorcharacter, the default is a tab character.\nquotecharacter\n(optional)\nA string whose value is the character to be used to wrap values. If you\nomit quotecharacter, the default is double quote.\nlineending\n(optional)\nA string whose value is placed at the end of each line. If you omit\nlineending, the default is a carriage return plus a newline character (~r~n).\nretainnewlinechar\n(optional)\nA boolean value that determines whether line feed and carriage return\ncharacters contained within the row are converted to white space. Values\nare:\nTrue -- line feed and carriage return characters within the row are not\nconverted to white space\nFalse (default) -- line feed and carriage return characters within the row are\nconverted to white space\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nSaveAsAscii always saves the file with ANSI encoding. To save to a file with a different\nencoding, use SaveAsFormattedText.\n"}
{"page": 799, "text": "Methods for the DataWindow Control\nPage 799\nSaveAsAscii is like SaveAs with the Text SaveAsType. However, unlike SaveAs,\nSaveAsAscii formats the text and saves column headers in the form in which they are\ndisplayed in the DataWindow instead of as the column name. For example, if the heading for\nthe cust_id column is Customer ID, SaveAsAscii saves Customer ID to the text file, whereas\nSaveAs saves cust_id. SaveAsAscii also saves computed fields allows you to customize\nformats in the file.\nIf you do not specify custom settings, values are wrapped in double quotes and separated\nby tabs. A newline character (~r~n) is placed at the end of each line. Line feed and carriage\nreturn characters within each row are converted to white space.\nPowerBuilder assigns a cell for each DataWindow object (which can include computed\ncolumns and group totals). If a cell is empty, PowerBuilder puts the quotecharacter between\nthe separatorcharacter in the output file.\nExamples\nThis statement saves the contents of dw_Quarter to the file H:\\Q2\\RESULTS.TXT. The\nsaved file uses ANSI encoding with the ampersand (&) as the separator character, and single\nquotes (') as the characters used to wrap values. A new line (~r~n) is automatically inserted at\neach line ending. Computed columns are included with the saved information:\ndw_Quarter.SaveAsAscii(\"H:\\Q2\\RESULTS.TXT\",\"&\",\"'\")\nSee also\nSaveAs\nSaveAsFormattedText\n9.134 SaveAsFormattedText\nDescription\nSaves the contents of a DataWindow or DataStore into a standard text file with custom\nformatting.\nApplies to\nTable 9.281:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.SaveAsFormattedText ( string filename {, string encoding {, string\n separatorcharacter {,string quotecharacter {, string lineending {, boolean\n retainnewlinechar } } } } )\nTable 9.282:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore.\nfilename\nA string whose value is the name of the file in which to save the contents.\n"}
{"page": 800, "text": "Methods for the DataWindow Control\nPage 800\nArgument\nDescription\nencoding\n(optional)\nCharacter encoding of the file to which the data is saved. If you do not\nspecify an encoding parameter, the file is saved in ANSI format. Values\nare:\n\u2022 EncodingANSI! (default)\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE!\n\u2022 EncodingUTF16BE!\nseparatorcharacter\n(optional)\nA string whose value is the character to be used to delimit values. If you\nomit separatorcharacter, the default is a tab character.\nquotecharacter\n(optional)\nA string whose value is the character to be used to wrap values. If you\nomit quotecharacter, the default is double quote.\nlineending\n(optional)\nA string whose value is placed at the end of each line. If you omit\nlineending, the default is a carriage return plus a newline character (~r~n).\nretainnewlinechar\n(optional)\nA boolean value that determines whether line feed and carriage return\ncharacters contained within the row are converted to white space. Values\nare:\nTrue -- line feed and carriage return characters within the row are not\nconverted to white space\nFalse (default) -- line feed and carriage return characters within the row\nare converted to white space\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nSaveAsFormattedText is like SaveAs with the Text SaveAsType. However, unlike SaveAs,\nSaveAsFormattedText formats the text and saves column headers in the form in which they\nare displayed in the DataWindow instead of as the column name. For example, if the heading\nfor the cust_id column is Customer ID, SaveAsFormattedText saves Customer ID to the text\nfile, whereas SaveAs saves cust_id. SaveAsFormattedText also saves computed fields allows\nyou to customize formats in the file.\nIf you do not specify custom settings, values are wrapped in double quotes and separated\nby tabs. A newline character (~r~n) is placed at the end of each line. Line feed and carriage\nreturn characters within each row are converted to white space.\nPowerBuilder assigns a cell for each DataWindow object (which can include computed\ncolumns and group totals). If a cell is empty, PowerBuilder puts the quotecharacter between\nthe separatorcharacter in the output file.\nExamples\nThis statement saves the contents of dw_Quarter to the file H:\\Q2\\RESULTS.TXT. The\nsaved file uses UTF-16LE encoding with the ampersand (&) as the separator character, single\n"}
{"page": 801, "text": "Methods for the DataWindow Control\nPage 801\nquote (') as the character used to wrap values and the default line ending (~r~n). Computed\ncolumns are included with the saved information:\ndw_Quarter.SaveAsFormattedText(\"H:\\Q2\\RESULTS.TXT\", EncodingUTF16LE!, \"&\", \"'\")\nSee also\nSaveAs\n9.135 SaveInk\nDescription\nSaves overlay ink to a file or blob from an InkPicture control.\nApplies to\nTable 9.283:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SaveInk ( string name, long rownumber, blob blob )\ninteger dwcontrol.SaveInk ( string name, long rownumber, \n   string filename {, inkpersistenceformat format {,\n   inkcompressionmode mode } } ) \nTable 9.284:\nArgument Description\ndwcontrol A reference to a DataWindow control.\nname\nThe name of the InkPicture control from which you want to save the ink.\nrownumber The number of the row that contains the ink to be saved.\nblob\nThe name of a blob passed by reference that will hold the ink in the control.\nfilename\nA string containing the name and location of a file that will hold the ink in the\ncontrol.\nformat\n(optional)\nA value of the InkPersistenceFormat enumerated variable that specifies the\nformat in which you want to save the ink. Values are:\n\u2022 Base64GIFFormat!\n\u2022 Base64InkSerializedFormat!\n\u2022 GIFFormat!\n\u2022 InkSerializedFormat! (default)\nmode\n(optional)\nA value of the InkCompressionMode enumerated variable that specifies the\ncompression mode in which you want to save the ink. Values are:\n\u2022 DefaultCompression! (default)\n"}
{"page": 802, "text": "Methods for the DataWindow Control\nPage 802\nArgument Description\n\u2022 MaximumCompression!\n\u2022 NoCompression!\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\nUse the SaveInk method to save annotations made to an image in an InkPicture control in a\nDataWindow to a separate file or blob.\nWhen you save ink to a blob, it is saved in Ink Serialized Format (ISF). Saving ink to a blob\nprovides the best performance because the ink is read directly from the ink data cache.\nInkSerializedFormat! provides the most compact persistent ink representation. This\nformat can be embedded inside a binary document format or added to the clipboard.\nBase64InkSerializedFormat! encodes the ISF format as a base64 stream, which allows the ink\nto be encoded in an XML or HTML file.\nGIFFormat! saves the image in a Graphics Interchange Format (GIF) file in which ISF is\nembedded as metadata. This format can be viewed in applications that are not ink enabled.\nBase64GIFFormat! is persisted by using a base64 encoded fortified GIF. Use this format\nif the ink is to be encoded directly in an XML or XHTML file and will be converted to an\nimage at a later time. It supports XSLT transformations to HTML.\nExamples\nThe following example saves the ink in an InkPicture control in row 3 of a DataWindow\nobject into an ISF file with default compression:\nint li_return\nstring ls_pathname, ls_filename\nGetFileSaveName(\"Save As\", ls_pathname, & \n   ls_filename, \"ISF\")\nli_return = dw_1.SaveInk(\"inkpic_1\", 3, ls_pathname)\nThe following example saves the ink in an InkPicture control in row 5 of a DataWindow\nobject into a GIF file with maximum compression:\nint li_return\nstring ls_pathname, ls_filename\nGetFileSaveName(\"Save As\", ls_pathname, & \n   ls_filename, \"GIF\")\nli_return = dw_1.SaveInk(\"inkpic_1\", 5, & \n   ls_pathname, GIFFormat!, MaximumCompression!)\nThe following example saves the ink in an InkPicture control in the current row of a\nDataWindow object into a blob:\nint li_return\nblob lb_blob\nli_return = dw_1.SaveInk(\"inkpic_1\", &\n   dw_1.GetRow(), lb_blob)\nSee also\n"}
{"page": 803, "text": "Methods for the DataWindow Control\nPage 803\nResetInk\nSaveInkPic\n9.136 SaveInkPic\nDescription\nSaves a picture and optionally overlay ink to a file from an InkPicture control.\nApplies to\nTable 9.285:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SaveInkPic ( string name, long rownumber, string filename ,\n integer format  {, boolean withink } )\nTable 9.286:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control.\nname\nThe name of the InkPicture control from which you want to save the picture.\nrownumber\nThe number of the row that contains the picture to be saved.\nfilename\nA string containing the name and location of a file that will hold the picture in\nthe control.\nformat\nAn integer specifying the format in which the picture is to be saved. Values\nare:\n0 -- BMP (bitmap)\n1 -- JPEG (Joint Photographic Experts Group)\n2 -- GIF (Graphics Interchange Format)\n3 -- TIFF (Tagged Image File Format)\n4 -- PNG (Portable Network Graphics)\nwithink\n(optional)\nA boolean specifying whether overlay ink should be saved with the picture.\nValues are:\nTrue -- overlay ink is saved with the picture (default)\nFalse -- overlay ink is not saved with the picture\nReturn value\nInteger.\nReturns 1 for success and -1 for failure.\nUsage\n"}
{"page": 804, "text": "Methods for the DataWindow Control\nPage 804\nUse the SavInkPic method to save the image in an InkPicture control in a DataWindow to a\nfile with or without any ink annotations that have been made to it. By default, the ink is saved\nwith the image.\nExamples\nThe following example saves the image in an InkPicture control in row 3 of a DataWindow\nobject into a GIF file without any ink annotations:\nint li_return\nstring ls_pathname, ls_filename\nGetFileSaveName(\"Save As\", ls_pathname, & \n   ls_filename, \"GIF\")\nli_return = dw_1.SaveInk(inkpic_1, 3, & \n   ls_pathname, 2, false)\nSee also\nResetInk\nSaveInkPic\n9.137 SaveNativePDFToBlob\nDescription\nSaves the PDF file into a blob variable when you use the PDFlib method to save data from a\nDataWindow object to a PDF file.\nApplies to\nTable 9.287:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SaveNativePDFToBlob ( blob data )\nTable 9.288:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataWindowChild object, or DataStore\nobject.\ndata\nA blob variable into which the PDF file will be saved.\nReturn value\nInteger.\nReturns values as follows. If any argument's value is null, the method returns null.\n\u2022 1 Success\n\u2022 -1 General error\n"}
{"page": 805, "text": "Methods for the DataWindow Control\nPage 805\n\u2022 -2 Insufficient memory. Failed to create the PDF file.\n\u2022 -3 Insufficient disk space. Failed to create the PDF file.\n\u2022 -4 MasterPassword cannot be the same as UserPassword.\nExamples\nblob lblb_data\nif dw_1.SaveNativePDFToBlob (lblb_data) = 1 then\nMessageBox(\"Success\", \"Saved the native PDF file as blob successfully!\")\nend if\n9.138 Scroll\nDescription\nScrolls the edit control of a DataWindow a specified number of lines up or down.\nApplies to\nTable 9.289:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.Scroll ( long number )\nTable 9.290:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control. Scroll affects the edit control of the\nDataWindow.\nnumber\nA value specifying the direction and number of lines you want to scroll. To\nscroll down, use a positive value. To scroll up, use a negative value.\nReturn value\nScroll returns the line number of the first visible line in dwcontrol if it succeeds. Scroll\nreturns -1 if an error occurs. If any argument's value is null, Scroll returns null.\nUsage\nIf the number of lines left in the list is less than the number of lines that you want to scroll,\nthen Scroll will scroll to the beginning or end, depending on the direction specified.\nExamples\nThis statement scrolls mle_Employee down 4 lines:\nmle_Employee.Scroll(4)\nThis statement scrolls mle_Employee up 4 lines:\nmle_Employee.Scroll(-4)\n"}
{"page": 806, "text": "Methods for the DataWindow Control\nPage 806\nSee also\nThe following related methods implement scrolling in a DataWindow or a PowerBuilder\nRichTextEdit control:\nScrollNextPage\nScrollNextRow\nScrollPriorPage\nScrollPriorRow\nScrollToRow\n9.139 ScrollFirstPage (obsolete)\nDescription\nScrolls a Web DataWindow control to the first page, displaying the result set's first group of\nrows in the Web page. (A page is the number of rows that are displayed in the DataWindow\ncontrol at one time.) ScrollFirstPage changes the current row, but not the current column.\nObsolete method\nScrollFirstPage is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.291:\nDataWindow type\nMethod applies to\nWeb\nClient control\nSyntax\nWeb DataWindow client control\nnumber dwcontrol.ScrollFirstPage ( ) \nTable 9.292:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf dwcontrol is null, the method returns null.\nUsage\nCalling ScrollFirstPage causes the page to be reloaded with another set of rows from the\nresult set.\nIf the DataWindow object has retrieval arguments, they must be specified in the\nHTMLGen.SelfLinkArgs property. For more information, see the HTMLGen.property and\nthe Retrieve method.\n"}
{"page": 807, "text": "Methods for the DataWindow Control\nPage 807\nAll methods that reload the page perform an AcceptText before sending data back to the\nserver. If the method fails (returns -1), this means that pending data changes were not\naccepted and nothing was sent back to the server. In this situation the ItemError event occurs.\nEvents\nScrollNextPage may trigger these events:\nItemChanged\nItemError\nItemFocusChanged\nRowFocusChanged\nRowFocusChanging\nExamples\nThis statement scrolls dw_employee to the first page:\ndw_employee.ScrollFirstPage();\nSee also\nScrollLastPage\nScrollNextPage\nScrollPriorPage\n9.140 ScrollLastPage (obsolete)\nDescription\nScrolls a Web DataWindow control to the last page, displaying the result set's last group of\nrows in the Web page. (A page is the number of rows that are displayed in the DataWindow\ncontrol at one time.) ScrollLastPage changes the current row, but not the current column.\nObsolete method\nScrollLastPage is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.293:\nDataWindow type\nMethod applies to\nWeb\nClient control\nSyntax\nWeb DataWindow client control\nnumber dwcontrol.ScrollLastPage ( ) \nTable 9.294:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\n"}
{"page": 808, "text": "Methods for the DataWindow Control\nPage 808\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If dwcontrol is null, the method returns null.\nUsage\nCalling ScrollLastPage causes the page to be reloaded with another set of rows from the\nresult set.\nIf the DataWindow object has retrieval arguments, they must be specified in the\nHTMLGen.SelfLinkArgs property. For more information, see the HTMLGen.property and\nthe Retrieve method.\nAll methods that reload the page perform an AcceptText before sending data back to the\nserver. If the method fails (returns -1), this means that pending data changes were not\naccepted and nothing was sent back to the server. In this situation the ItemError event occurs.\nEvents\nScrollNextPage may trigger these events:\nItemChanged\nItemError\nItemFocusChanged\nRowFocusChanged\nRowFocusChanging\nExamples\nThis statement scrolls dw_employee to the last page:\ndw_employee.ScrollLastPage();\nSee also\nScrollFirstPage\nScrollNextPage\nScrollPriorPage\n9.141 ScrollNextPage\nScrolls to the next page in a DataWindow.\nTable 9.295:\nTo scroll\nUse\nTo the next group of rows in a DataWindow (when the DataWindow\ndoes not have the RichTextEdit presentation style)\nSyntax 1\nA RichTextEdit DataWindow to view the next page within the\ndocument (PowerBuilder only)\nSyntax 2\n9.141.1 Syntax 1 For DataWindow controls and child DataWindows\nDescription\nScrolls a DataWindow control forward one page, displaying the next group of rows in the\nDataWindow's display area. (A page is the number of rows that can be displayed in the\n"}
{"page": 809, "text": "Methods for the DataWindow Control\nPage 809\nDataWindow control at one time.) ScrollNextPage changes the current row, but not the\ncurrent column.\nApplies to\nTable 9.296:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\nlong dwcontrol.ScrollNextPage ( )\nTable 9.297:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nchild DataWindow\nReturn value\nReturns the number of the row displayed at the top of the DataWindow control when the\nscroll finishes or tries to scroll past the last row. ScrollNextPage returns 1 with nested or\ncomposite reports and child DataWindows since, in these cases, the current row cannot be\nchanged. ScrollNextPage returns -1 if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nScrollNextPage does not highlight the current row. Use SelectRow to let the user know what\nrow is current.\nFor an example that uses RowCount and Describe to check whether the user has scrolled to\nthe last page, see RowCount.\nEvents\nScrollNextPage can trigger these events:\nItemChanged\nItemError\nItemFocusChanged\nRowFocusChanged\nRowFocusChanging\nExamples\nThis statement scrolls dw_employee forward one page:\ndw_employee.ScrollNextPage()\nSee also\nScroll\n"}
{"page": 810, "text": "Methods for the DataWindow Control\nPage 810\nScrollFirstPage\nScrollLastPage\nScrollNextRow\nScrollPriorPage\nScrollPriorRow\nScrollToRow\nSelectRow\n9.141.2 Syntax 2 For RichTextEdit DataWindows\nDescription\nScrolls to the next page of the document in a RichTextEdit DataWindow.\nApplies to\nTable 9.298:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger rtedwname.ScrollNextPage ( )\nTable 9.299:\nArgument\nDescription\nrtedwname\nA reference to a DataWindow control. The DataWindow object in the\nDataWindow control must be a RichTextEdit DataWindow.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If rtedwname is null, in PowerBuilder and\nJavaScript the method returns null.\nUsage\nA RichText DataWindow contains multiple instances of the document, one instance for\neach row. When the last page of the document for one row is visible, calling ScrollNextPage\nadvances to the first page for the next row.\nPowerBuilder RichTextEdit control\nYou can use the same syntax with a PowerBuilder RichTextEdit control. See\nSection 2.4.672, \u201cScrollNextPage\u201d in PowerScript Reference.\nExamples\n"}
{"page": 811, "text": "Methods for the DataWindow Control\nPage 811\nThis statement scrolls to the next page of the RichText document in the DataWindow control\ndw_rpt. If there are multiple instances of the document, it can scroll to the next instance:\ndw_rpt.ScrollNextPage()\nSee also\nScroll\nScrollNextRow\nScrollPriorPage\nScrollPriorRow\n9.142 ScrollNextRow\nScrolls to the next row in a DataWindow control.\nTable 9.300:\nTo scroll\nUse\nTo the next row in a DataWindow, making the row current (when the\nDataWindow does not have the RichTextEdit presentation style)\nSyntax 1\nTo the next instance of a document associated with a row in a\nRichTextEdit DataWindow (PowerBuilder only)\nSyntax 2\n9.142.1 Syntax 1 For DataWindow controls and child DataWindows\nDescription\nScrolls a DataWindow control to the next row (forward one row). ScrollNextRow changes\nthe current row, but not the current column.\nApplies to\nTable 9.301:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\nlong dwcontrol.ScrollNextRow ( )\nTable 9.302:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nchild DataWindow\nReturn value\nReturns the number of the row displayed at the top of the DataWindow control when the\nscroll finishes or tries to scroll past the last row. ScrollNextRow returns -1 if an error occurs.\n"}
{"page": 812, "text": "Methods for the DataWindow Control\nPage 812\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nAfter you call ScrollNextRow, the row after the current row becomes the new current row. If\nthat row is already visible, the displayed rows do not change. If it is not visible, the displayed\nrows move up to display the row.\nScrollNextRow does not highlight the row. Use SelectRow to let the user know what row is\ncurrent.\nEvents\nScrollNextRow triggers these events in the order shown:\nRowFocusChanging\nRowFocusChanged\nItemFocusChanged\nScrollVertical\nYou should not use ScrollNextRow in the ScrollVertical event. Doing so causes this series of\nevents to be triggered repeatedly until the last row in the DataWindow is reached.\nExamples\nThis statement scrolls dw_employee to the next row:\ndw_employee.ScrollNextRow()\nSee also\nScroll\nScrollNextPage\nScrollPriorPage\nScrollPriorRow\nScrollToRow\nSelectRow\n9.142.2 Syntax 2 For RichTextEdit DataWindows\nDescription\nScrolls to the next instance of the document in a RichTextEdit DataWindow.\nApplies to\nTable 9.303:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\n"}
{"page": 813, "text": "Methods for the DataWindow Control\nPage 813\ninteger rtename.ScrollNextRow ( )\nTable 9.304:\nArgument\nDescription\nrtename\nA reference to a DataWindow control in which you want to scroll to the next\ndocument instance. Each instance is associated with a DataWindow row.\nThe DataWindow object in the DataWindow control must be a RichTextEdit\nDataWindow.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nA DataWindow control with a RichText DataWindow object has multiple instances of the\nRichText document, where each instance is associated with one row of retrieved data.\nScrollNextRow advances to the next instance of the RichTextEdit document. In contrast,\nrepeated calls to ScrollNextPage advance through all the pages of the document instance and\nthen on to the pages for the next row.\nPowerBuilder RichTextEdit control\nYou can use the same syntax with any PowerBuilder RichTextEdit control. See\nSection 2.4.673, \u201cScrollNextRow\u201d in PowerScript Reference.\nExamples\nThis statement scrolls to the next instance of the RichText document in the DataWindow\ncontrol dw_rpt. (Each document instance is associated with a row of data):\ndw_rpt.ScrollNextRow()\nSee also\nScroll\nScrollNextPage\nScrollPriorPage\nScrollPriorRow\n9.143 ScrollPriorPage\nScrolls to the prior page in a DataWindow control.\nTable 9.305:\nTo scroll\nUse\nTo the prior group of rows in a DataWindow (when the DataWindow\ndoes not have the RichTextEdit presentation style)\nSyntax 1\nA RichTextEdit DataWindow to view the prior page within the\ndocument (PowerBuilder only)\nSyntax 2\n"}
{"page": 814, "text": "Methods for the DataWindow Control\nPage 814\n9.143.1 Syntax 1 For DataWindow controls and child DataWindows\nDescription\nScrolls a DataWindow control backward one page, displaying another group of rows in\nthe DataWindow's display area. (A page is the number of rows that can be displayed in\nthe DataWindow control at one time.) ScrollPriorPage changes the current row but not the\ncurrent column.\nApplies to\nTable 9.306:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\nlong dwcontrol.ScrollPriorPage ( )\nTable 9.307:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control or child DataWindow you want to\npage (scroll) to the prior page\nReturn value\nReturns the number of the row displayed at the top of the DataWindow control when the\nscroll finishes or tries to scroll past the first row. ScrollPriorPage returns -1 if an error occurs.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nScrollPriorPage does not highlight the current row. Use SelectRow to let the user know what\nrow is current.\nEvents\nScrollPriorPage can trigger these events:\nItemChanged\nItemError\nItemFocusChanged\nRowFocusChanged\nRowFocusChanging\nExamples\nThis statement scrolls dw_employee backward one page:\ndw_employee.ScrollPriorPage()\nSee also\nScroll\n"}
{"page": 815, "text": "Methods for the DataWindow Control\nPage 815\nScrollFirstPage\nScrollLastPage\nScrollNextPage\nScrollNextRow\nScrollPriorRow\nScrollToRow\nSelectRow\n9.143.2 Syntax 2 For RichTextEdit DataWindows\nDescription\nScrolls to the prior page of the document in a RichTextEdit DataWindow.\nApplies to\nTable 9.308:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger rtename.ScrollPriorPage ( )\nTable 9.309:\nArgument\nDescription\nrtename\nThe name of the DataWindow control in which you want to scroll to the prior\npage.\nThe DataWindow object in the DataWindow control must be a RichTextEdit\nDataWindow.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nA RichText DataWindow contains multiple instances of the document, one instance for each\nrow. When the first page of the document for one row is visible, calling ScrollPriorPage goes\nto the last page for the prior row.\nPowerBuilder RichTextEdit control\nYou can use the same syntax with any PowerBuilder RichTextEdit control. See\nSection 2.4.674, \u201cScrollPriorPage\u201d in PowerScript Reference.\nExamples\n"}
{"page": 816, "text": "Methods for the DataWindow Control\nPage 816\nThis statement scrolls to the prior page of the RichText document in the DataWindow control\ndw_rpt. If there are multiple instances of the document, it can scroll to the prior instance:\ndw_rpt.ScrollPriorPage()\nSee also\nScroll\nScrollNextPage\nScrollNextRow\nScrollPriorRow\n9.144 ScrollPriorRow\nScrolls to the prior row in a DataWindow control.\nTable 9.310:\nTo scroll\nUse\nTo the prior row in a DataWindow, making the row current (when the\nDataWindow does not have the RichTextEdit presentation style)\nSyntax 1\nTo the prior instance of a document associated with a row in a\nRichTextEdit control or RichTextEdit DataWindow\nSyntax 2\n9.144.1 Syntax 1 For DataWindow controls and child DataWindows\nDescription\nScrolls a DataWindow control backward one row. ScrollPriorRow changes the current row\nbut not the current column.\nApplies to\nTable 9.311:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\nlong dwcontrol.ScrollPriorRow ( )\nTable 9.312:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow or child\nDataWindow\nReturn value\nReturns the number of the row displayed at the top of the DataWindow control when the\nscroll finishes or tries to scroll past the first row. ScrollPriorRow returns -1 if an error occurs.\n"}
{"page": 817, "text": "Methods for the DataWindow Control\nPage 817\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nAfter you call ScrollPriorRow, the row before the current row becomes the new current\nrow. If that row is already visible, the displayed rows do not change. If it is not visible, the\ndisplayed rows move down to display the row.\nScrollPriorRow does not highlight the row. Use SelectRow to let the user know what row is\ncurrent.\nEvents\nScrollPriorRow triggers these events in the order shown:\nRowFocusChanging\nRowFocusChanged\nItemFocusChanged\nScrollVertical\nYou should not use ScrollPriorRow in the ScrollVertical event. Doing so causes this series of\nevents to be triggered repeatedly until the first row in the DataWindow is reached.\nExamples\nThis statement scrolls dw_employee to the prior row:\ndw_employee.ScrollPriorRow()\nSee also\nScroll\nScrollNextPage\nScrollNextRow\nScrollPriorPage\nScrollToRow\nSelectRow\n9.144.2 Syntax 2 For RichTextEdit DataWindows\nDescription\nScrolls to the prior instance of the document in a RichTextEdit DataWindow.\nApplies to\nTable 9.313:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger rtename.ScrollPriorRow ( )\n"}
{"page": 818, "text": "Methods for the DataWindow Control\nPage 818\nTable 9.314:\nArgument\nDescription\nrtename\nThe name of the DataWindow control in which you want to scroll to the prior\ndocument instance. Each instance is associated with a DataWindow row.\nThe DataWindow object in the DataWindow control must be a RichTextEdit\nDataWindow\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nA DataWindow control with a RichText DataWindow object has multiple instances of the\nRichText document, where each instance is associated with one row of retrieved data.\nScrollPriorRow goes to the prior instance of the RichTextEdit document. In contrast, repeated\ncalls to ScrollPriorPage pages back through all the pages of the document instance and then\nback to the pages for the prior row.\nPowerBuilder RichTextEdit control\nYou can use the same syntax with any PowerBuilder RichTextEdit control. See\nSection 2.4.675, \u201cScrollPriorRow\u201d in PowerScript Reference.\nExamples\nThis statement scrolls to the prior instance of the RichText document in the DataWindow\ncontrol dw_1. (Each document instance is associated with a row of data):\ndw_rpt.ScrollPriorRow()\nSee also\nScroll\nScrollNextPage\nScrollNextRow\nScrollPriorPage\n9.145 ScrollToRow\nDescription\nScrolls a DataWindow control to the specified row. ScrollToRow changes the current row but\nnot the current column.\nApplies to\nTable 9.315:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\n"}
{"page": 819, "text": "Methods for the DataWindow Control\nPage 819\nSyntax\nPowerBuilder\ninteger dwcontrol.ScrollToRow ( long row )\nTable 9.316:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or child DataWindow.\nrow\nA value identifying the row to which you want to scroll. If row is 0,\nScrollToRow scrolls to the first row. If row is greater than the last row\nnumber, it scrolls to the last row. If row is visible without scrolling, the\nDataWindow does not scroll.\nReturn value\nReturns the number of the row to which the DataWindow scrolls if it succeeds and -1 if an\nerror occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nAfter you call ScrollToRow, the specified row becomes the new current row. If that row is\nalready visible, the displayed rows do not change. If the row is not visible, the displayed rows\nchange to display the row.\nScrollToRow does not highlight the row. Use SelectRow to let the user know what row is\ncurrent.\nEvents\nScrollToRow can trigger these events:\nItemChanged\nItemError\nItemFocusChanged\nRowFocusChanged\nExamples\nThis statement scrolls to row 10 and makes it current in the DataWindow control\ndw_employee:\ndw_employee.ScrollToRow(10)\nSee also\nScroll\nScrollNextPage\nScrollNextRow\nScrollPriorPage\nScrollPriorRow\nSelectRow\n"}
{"page": 820, "text": "Methods for the DataWindow Control\nPage 820\n9.146 SelectedLength\nDescription\nDetermines the total number of characters in the selected text in an edit control, including\nspaces and line endings.\nApplies to\nTable 9.317:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.SelectedLength ( )\nTable 9.318:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control. SelectedLength reports the length of\nthe selected text in the edit control over the current row and column.\nReturn value\nReturns the length of the selected text in dwcontrol. If no text is selected, SelectedLength\nreturns 0. If an error occurs, it returns -1.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nThe characters that make up a line ending, produced by typing Ctrl+Enter or Enter, are\ndifferent on different platforms. On Windows, they are a carriage return plus a line feed and\nequal two characters when calculating the length. On other platforms, a line ending can be a\nsingle character. A line that wraps has no line-ending character.\nRichText DataWindows\nFor rich text controls, a carriage return plus a line feed always count as a single\ncharacter when calculating the text length.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.683, \u201cSelectedLength\u201d in\nPowerScript Reference.\nExamples\nIf the selected text in the DataWindow dw_Contact is John Smith, then this example sets the\nvariable to 10, the number of selected characters:\ninteger li_length\nli_length = dw_Contact.SelectedLength()\n"}
{"page": 821, "text": "Methods for the DataWindow Control\nPage 821\nSee also\nSelectedLine\nSelectedStart\nTextLine\n9.147 SelectedLine\nDescription\nObtains the number of the line that contains the insertion point in an editable control.\nApplies to\nTable 9.319:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.SelectedLine ( )\nTable 9.320:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control. It\nreports the line number in the edit control\nover the current row and column.\nReturn value\nReturns the number of the line containing the insertion point in dwcontrol. If an error occurs,\nSelectedLine returns -1. If dwcontrol is null, SelectedLine returns null.\nUsage\nThe insertion point can be at the beginning or end of the selection. Therefore, SelectedLine\ncan return the first or last selected line, depending on the position of the insertion point.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.684, \u201cSelectedLine\u201d in\nPowerScript Reference.\nExamples\nIf the insertion point is positioned anywhere in line 5 of the MultiLineEdit mle_Contact, the\nfollowing example sets li_SL to 5:\ninteger li_SL\nli_SL = mle_Contact.SelectedLine()\nIn this example, the line the user selects in the MultiLineEdit mle_winselect determines\nwhich window to open:\n"}
{"page": 822, "text": "Methods for the DataWindow Control\nPage 822\ninteger li_SL\n \nli_SL = mle_winselect.SelectedLine()\nIF li_SL = 1 THEN\n      Open(w_emp_data)\nELSEIF li_SL = 2 THEN\n      Open(w_dept_data)\nEND IF\nSee also\nPosition\nSelectedText\nTextLine\n9.148 SelectedStart\nDescription\nReports the position of the first selected character in the edit control.\nApplies to\nTable 9.321:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.SelectedStart ( )\nTable 9.322:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control. It reports the starting position in the edit\ncontrol over the current row and column.\nReturn value\nReturns the starting position of the selected text in dwcontrol. If no text is selected,\nSelectedStart returns the position of the character immediately following the insertion point.\nIf an error occurs, SelectedStart returns -1.\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nSelectedStart counts from the start of the text and includes spaces and line endings.\nPowerBuilder environment\nFor use with RichTextEdit and other PowerBuilder controls, see Section 2.4.686,\n\u201cSelectedStart\u201d in PowerScript Reference.\nExamples\n"}
{"page": 823, "text": "Methods for the DataWindow Control\nPage 823\nIf the edit control for the DataWindow control dw_rpt contains Closed for Vacation July 3 to\nJuly 10, and Vacation is selected, then this example sets the variable to 12 (the position of the\nfirst character in Vacation):\ninteger li_Start\nli_Start = dw_rpt.SelectedStart()\nSee also\nPosition\nSelectedLength\nSelectedLine\n9.149 SelectedText\nDescription\nObtains the selected text in the edit control of a DataWindow control.\nApplies to\nTable 9.323:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nstring dwcontrol.SelectedText ( )\nTable 9.324:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control. The method reports the selected text in\nthe edit control over the current row and column.\nReturn value\nReturns the selected text in dwcontrol. If there is no selected text or if an error occurs,\nSelectedText returns the empty string (\"\").\nIf dwcontrol is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nPowerBuilder environment\nFor use with RichTextEdit and other PowerBuilder controls, see Section 2.4.687,\n\u201cSelectedText\u201d in PowerScript Reference.\nExamples\nIf the text in the edit control of the DataWindow dw_rpt is James B. Smith and James B. is\nselected, these statements set the value of the string variable to James B:\n"}
{"page": 824, "text": "Methods for the DataWindow Control\nPage 824\nstring ls_emp_fname\nls_emp_fname = dw_rpt.SelectedText()\nSee also\nSelectText\n9.150 SelectRow\nDescription\nHighlights or removes highlights from rows in a DataWindow control or DataStore. You can\nselect all rows or a single row. SelectRow does not affect which row is current. It does not\nselect rows in the database.\nApplies to\nTable 9.325:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SelectRow ( long row, boolean select )\nTable 9.326:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nA value identifying the row you want to select or deselect. Specify 0 to select\nor deselect all rows.\nselect\nA boolean value that determines whether the row is selected or not selected:\n\u2022 True -- Select the row(s) so that they are highlighted.\n\u2022 False -- Deselect the row(s) so that they are not highlighted.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null. If there is no DataWindow object\nassigned to the DataWindow control or DataStore, the method returns 1.\nUsage\nIf a row is already selected and you specify that it be selected (boolean is true), it remains\nselected. If a row is not selected and you specify that it not be selected (boolean is false), it\nremains unselected.\nExamples\nThis statement selects the fifteenth row in dw_employee:\n"}
{"page": 825, "text": "Methods for the DataWindow Control\nPage 825\ndw_employee.SelectRow(15, true)\nAs the script for a DataWindow's Clicked event, this example removes highlighting from all\nrows and then highlights the row the user clicked. Row is an argument passed to the event\nscript:\nThis.SelectRow(0, false)\nThis.SelectRow(row, true)\nSee also\nIsSelected\n9.151 SelectText\nSelects text in an edit control.\nTable 9.327:\nTo select text in\nUse\nA DataWindow when the DataWindow does not have the RichTextEdit\npresentation style, or a RichText edit-style column in such a\nDataWindow\nSyntax 1\nA DataWindow whose object has the RichTextEdit presentation style\n(PowerBuilder only)\nSyntax 2\n9.151.1 Syntax 1 For DataWindows with standard edit styles\nDescription\nSelects text in an editable control. You specify where the selection begins and how many\ncharacters to select.\nThis method works for DataWindows with standard edit styles (non-RichTextEdit style), or\ncolumns which have the RichText edit style in such DataWindows.\nApplies to\nTable 9.328:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.SelectText ( long start, long length )\nTable 9.329:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control.\nstart\nA numeric value specifying the position at which you want to start the\nselection.\n"}
{"page": 826, "text": "Methods for the DataWindow Control\nPage 826\nArgument\nDescription\nlength\nA numeric value specifying the number of characters you want to select. If\nlength is 0, no text is selected but SelectText moves the insertion point to the\nlocation specified in start.\nReturn value\nReturns the number of characters selected. If an error occurs, SelectText returns -1.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nIf the control does not have the focus when you call SelectText, then the text is not\nhighlighted until the control has focus. To set focus on the control so that the selected text is\nhighlighted, call the SetFocus function.\nTo select text in a DataWindow with the RichTextEdit presentation style, use Syntax 2.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.692, \u201cSelectText\u201d in\nPowerScript Reference.\nBackward selection in a RichText edit-style column\nBoth the new control and the old control cannot correctly handle the backward\nselection in a RichText edit-style column via the SelectText (although forward\nselection is well supported).\nWhen backward selecting a string (which means length is a negative number) in\na RichText edit-style column, the old control will only select the character before\nthe last one and return 1. The new control will select two more extra characters and\nreturns the number of the actual selected characters. For example, in the following\nstatement, the old control selects the 9th characters and returns 1; while the new\ncontrol will select 7 characters from 4th to 10th, and returns 7.\ndw_1.selectText(10,-5)\nExamples\nThis statement sets the insertion point at the end of the text in the DataWindow edit control:\ndw_1.SelectText(dw_1.GetText(), 0)\nThis statement selects the entire contents of the DataWindow edit control:\ndw_1.SelectText(1, Len(dw_1.GetText()))\nThe rest of these examples assume the DataWindow edit control contains Boston Street.\nThe following statement selects the string ost and returns 3:\ndw_1.SelectText(2, 3)\nThe next statement selects the string oston Street and returns 12:\n"}
{"page": 827, "text": "Methods for the DataWindow Control\nPage 827\ndw_1.SelectText(2, Len(dw_1.GetText()))\nThese statements select the string Bos, returns 3, and sets the focus to the DataWindow\ncontrol so that Bos is highlighted:\ndw_1.SelectText(1, 3)\ndw_1.SetFocus()\nSee also\nPosition\nSelectedText\nTextLine\n9.151.2 Syntax 2 For RichTextEdit DataWindows\nDescription\nSelects text beginning and ending at a line and character position in a RichText DataWindow.\nApplies to\nTable 9.330:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nlong rtedwcontrol.SelectText ( long fromline, long fromchar, long toline, long\n tochar { band band } )\nTable 9.331:\nArgument\nDescription\nrtedwcontrol\nA reference to the DataWindow control in which you want to select\ntext. The DataWindow object in the DataWindow control must have the\nRichText presentation style.\nfromline\nA value specifying the line number where the selection starts.\nfromchar\nA value specifying the number in the line of the first character in the\nselection.\ntoline\nA value specifying the line number where the selection ends. To specify an\ninsertion point, set toline and tochar to 0.\ntochar\nA value specifying the number in the line of the character before which the\nselection ends.\nband\n(optional)\nA value of the Band enumerated datatype specifying the band in which to\nmake the selection. Values are:\n\u2022 Detail!\n"}
{"page": 828, "text": "Methods for the DataWindow Control\nPage 828\nArgument\nDescription\n\u2022 Header!\n\u2022 Footer!\nThe default is the band that contains the insertion point.\nReturn value\nReturns the number of characters selected. A carriage return with a line feed counts as a\nsingle character. If an error occurs SelectText returns -1. If any argument's value is null, it\nreturns null.\nUsage\nThe insertion point is at the \"to\" end of the selection -- that is, the position specified by toline\nand tochar. If toline and tochar are before fromline and fromchar, then the insertion point is at\nthe beginning of the selection.\nYou cannot specify 0 for a character position when making a selection.\nYou cannot always use the values returned by Position to make a selection. Position can\nreturn a character position of 0 when the insertion point is at the beginning of a line.\nTo select an entire line, set the insertion point and call SelectTextLine. To select the rest of a\nline, set the insertion point and call SelectText with a character position greater than the line\nlength.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.692, \u201cSelectText\u201d in\nPowerScript Reference.\nExamples\nSelectText is used in the same way for RichTextEdit controls and RichText DataWindow\ncontrols. For sample code, see the examples for the RichTextEdit control in the Part I,\n\u201cPowerScript Reference\u201d.\nSee also\nSelectedText\nSelectTextAll\nSelectTextLine\nSelectTextWord\n9.152 SelectTextAll\nDescription\nSelects all the contents of a RichTextEdit control including any special characters such as\ncarriage return and end-of-file markers.\nApplies to\n"}
{"page": 829, "text": "Methods for the DataWindow Control\nPage 829\nTable 9.332:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger rtename.SelectTextAll ( band band )\nTable 9.333:\nArgumentDescription\nrtename\nA reference to a DataWindow control in which you want to select all the\ncontents. The DataWindow object in the DataWindow control must be a\nRichTextEdit DataWindow.\nband\n(optional)\nA value of the Band enumerated datatype specifying the band in which you want\nto select all the text. Values are:\n\u2022 Detail!\n\u2022 Header!\n\u2022 Footer!\nThe default is the band that contains the insertion point.\nReturn value\nReturns the number of characters selected. A carriage return with a line feed counts as a\nsingle character. If an error occurs, SelectTextAll returns -1.\nUsage\nPowerBuilder RichTextEdit control\nYou can use the same syntax with a PowerBuilder RichTextEdit control. See\nSection 2.4.693, \u201cSelectTextAll\u201d in PowerScript Reference.\nExamples\nThis statement selects all the text in the detail band:\ndw_1.SelectTextAll()\nThis statement selects all the text in the header band:\ndw_1.SelectTextAll(Header!)\nSee also\nSelectedText\nSelectText\nSelectTextLine\n"}
{"page": 830, "text": "Methods for the DataWindow Control\nPage 830\nSelectTextWord\n9.153 SelectTextLine\nDescription\nSelects the line containing the insertion point in a RichTextEdit control.\nApplies to\nTable 9.334:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger rtename.SelectTextLine ( )\nTable 9.335:\nArgument\nDescription\nrtename\nA reference to a DataWindow control. The DataWindow object in the\nDataWindow control must be a RichTextEdit DataWindow.\nReturn value\nReturns the number of characters selected if it succeeds and -1 if an error occurs.\nUsage\nIf the RichTextEdit control contains a selection, the insertion point can be at the beginning or\nend of the selection. The way the text was selected determines the location.\nIf the user made the selection by dragging toward the end, then calling SelectTextLine selects\nthe line at the end of the selection. If the user dragged back, then SelectTextLine selects the\nline at the beginning of the selection.\nSelectTextLine does not select the line-ending characters (carriage return and linefeed).\nPowerBuilder RichTextEdit control\nYou can use the same syntax with a PowerBuilder RichText Edit control. See\nSection 2.4.694, \u201cSelectTextLine\u201d in PowerScript Reference.\nExamples\nThis statement selects the current line:\ndw_1.SelectTextLine()\nSee also\nSelectedText\nSelectText\n"}
{"page": 831, "text": "Methods for the DataWindow Control\nPage 831\nSelectTextAll\nSelectTextWord\n9.154 SelectTextWord\nDescription\nSelects the word containing the insertion point in a RichTextEdit control.\nApplies to\nTable 9.336:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger rtename.SelectTextWord ( )\nTable 9.337:\nArgument\nDescription\nrtename\nA reference to a DataWindow control in which you want to select a word.\nThe DataWindow object in the DataWindow control must be a RichTextEdit\nDataWindow.\nReturn value\nReturns the number of characters selected if it succeeds and -1 if a word cannot be selected or\nan error occurs.\nUsage\nA word is any group of alphanumeric characters. A word can include underscores and single\nquotes but doesn't include punctuation and special characters such as $ or #.\nIf punctuation or special characters follow the selected word, they are not selected. If the\ncharacter after the insertion point is a space, punctuation, special character, or end-of-line\nmark, SelectTextWord does not select anything and returns -1.\nPowerBuilder RichTextEdit control\nYou can use the same syntax with a PowerBuilder RichText Edit control. See\nSection 2.4.695, \u201cSelectTextWord\u201d in PowerScript Reference.\nExamples\nThe following statement selects the word containing the insertion point:\ndw_1.SelectTextWord()\nFor more examples, see examples for the RichTextEdit control in Part I, \u201cPowerScript\nReference\u201d.\n"}
{"page": 832, "text": "Methods for the DataWindow Control\nPage 832\nSee also\nSelectedText\nSelectText\nSelectTextAll\nSelectTextLine\n9.155 SelectTreeNode\nDescription\nSelects or deselects a TreeView node in a TreeView DataWindow.\nApplies to\nTable 9.338:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nInteger dw_control.SelectTreeNode(long row, long groupLevel, boolean bSelect)\nTable 9.339:\nArgument\nDescription\ndw_control\nA reference to a TreeView-style\nDataWindow control\nrow\nThe number of the row that belongs to the\ngroup\ngroupLevel\nThe TreeView level of the group\nbSelect\nIndicates whether the TreeView node is\nselected or not\nReturn value\nReturns 1 if the SelectTreeNode operation succeeds and one of the following negative values\nif it fails:\n-1 -- DataWindow is null\n-5 -- One or more of the parameters are invalid\n-16 -- DataWindow is not a TreeView DataWindow\nUsage\nA TreeView DataWindow has several TreeView nodes that can be selected or deselected.\nYou can use the SelectTreeNode method to select or deselect a TreeView node in a TreeView\nDataWindow that has a particular TreeView level.\n"}
{"page": 833, "text": "Methods for the DataWindow Control\nPage 833\nThe SelectTreeNode method triggers the TreeNodeSelecting and TreeNodeSelected events\nwith a row argument of -1.\nExamples\nThe following example selects the node specified by the text box values:\nlong row\nlong level\nrow=long(sle_row.text)\nlevel=long(sle_level.text)\ndw_1.SelectTreeNode(row,level,true)\n9.156 SetAction (obsolete)\nDescription\nAccepts action and context information about user interaction with the Web DataWindow\nclient control in a Web browser so that generated HTML reflects any requested changes.\nObsolete method\nSetAction is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.340:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\ninteger dwcomponent.SetAction ( string action, string context )\nTable 9.341:\nArgument\nDescription\ndwcomponentA reference to a Web DataWindow server component.\naction\nA string describing an action associated with a button click or method call in a\nWeb DataWindow client control on a Web page. The value of action is stored\nin a page parameter called HTMLGenObjectName_action.\ncontext\nA string describing the context of action in the Web DataWindow client\ncontrol. The string is generated by a Web DataWindow script and the value is\nstored in a page parameter called HTMLGenObjectName_context.\nThe format is not documented and subject to change.\nReturn value\nReturns 1 if it succeeds and one of these negative values if an error occurs:\n-1 -- Reloading the current context failed\n"}
{"page": 834, "text": "Methods for the DataWindow Control\nPage 834\n-2 -- The action was attempted but it failed\n-3 -- The action could not be performed (for example, the action was InsertRow but the\nDataWindow has no editable fields for entering new data)\n-4 -- The action was aborted by the HTMLContextApplied event\nUsage\nWhen the user clicks a button in the Web DataWindow client control, the JavaScript for\nthe control stores the action in a page parameter called HTMLGenObjectName_action,\nand it stores the context in a page parameter called HTMLGenObjectName_context. These\nparameters are passed to the page server which uses them to call the SetAction method for the\nserver component.\nThe SetAction method uses the SetHTMLAction method of the DataWindow.\nCall GetLastError and GetLastErrorString to get information about database errors that cause\nSetAction, Update, Retrieve, and RetrieveEx to return -1.\nExamples\nThis JSP example calls SetAction for the server component called dwGen:\nint retVal;\nString dw_1_action = (String)request.GetParameter     (\"dw_1_action\");\nString dw_1_context = (String)request.GetParameter     (\"dw_1_context\");\nif (dw_1_context == null){\n   dw_1_context = \" \";\n}\n// Check if we need to perform the action\nif (dw_1_action!=null){\n  retVal = dwGen.SetAction(dw_1_action, dw_1_context);\n  if (retVal < 0 ) {\n   out.print(\"Error on SetAction: \"         + retVal + \"<BR>\");\n   out.print(dwGen.GetLastErrorString()+ \"<BR>\");\n  }\n}\nSee also\nGetLastError\nGetLastErrorString\nSetHTMLAction\n9.157 SetActionCode (obsolete)\nDescription\nSets the action code for an event in a DataWindow control. The action code determines the\naction that PowerBuilder takes following the event. The default action code is 0.\nWhere to use SetActionCode\nSetActionCode is obsolete in PowerBuilder. To return a value, include a RETURN\nstatement in the event script using the return codes documented for that event.\nApplies to\n"}
{"page": 835, "text": "Methods for the DataWindow Control\nPage 835\nTable 9.342:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\ninteger dwcontrol.SetActionCode ( long code )\nTable 9.343:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or child DataWindow.\ncode\nA value specifying the action you want to take in the DataWindow control.\nThe meaning of the action code depends on the event.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetActionCode returns null.\nUsage\nUse SetActionCode to change the action that occurs following a DataWindow event. Not all\nDataWindow events have action codes, only those events that can have different outcomes.\nSetActionCode last statement in script\nAlthough SetActionCode is not required to be the last statement in a script, it may not\nperform as expected if other statements follow it.\nExamples\nIn the ItemChanged event script for dw_Employee, these statements set the action code in\ndw_Employee to reject data that is less than the employee's age:\ninteger a, age\nage = Integer(sle_Age.Text)\na = Integer(dw_Employee.GetText())\nIF a < age THEN dw_Employee.SetActionCode(1)\nThis example shows a script for the DBError event script that displays a version of the\nerror message to the user. Because PowerBuilder also displays a message to the user after\nthe event, the script calls SetActionCode to set the action code to 1, which suppresses the\nPowerBuilder error message:\ninteger errnum\nerrnum = dw_emp.DBErrorCode()\n \n// Show error code and message to the user\nMessageBox(\"Database Error\", &\n      \"Number \" + String(errnum) + \" \" + &\n      dw_emp.DBErrorMessage(), StopSign!)\n \n// Stop PowerBuilder from displaying its message\n"}
{"page": 836, "text": "Methods for the DataWindow Control\nPage 836\ndw_emp.SetActionCode(1)\n9.158 SetBorderStyle\nDescription\nSets the border style of a column in a DataWindow control or DataStore.\nApplies to\nTable 9.344:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetBorderStyle ( integer column, border borderstyle )\ninteger dwcontrol.SetBorderStyle ( string column, border borderstyle )\nTable 9.345:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\ncolumn\nThe column in which you want to change the border style. Column can be a\ncolumn number or a column name.\nborderstyle\nA value of the Border enumerated datatype identifying the border style you\nwant to use for the column.\nFor a list of valid values, see Border.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nExamples\nThis example checks the border of column 2 in dw_emp and, if there is no border, gives it a\nshadow box border:\nBorder B3\nB3 = dw_emp.GetBorderStyle(2)\nIF B3 = NoBorder! THEN &\n      dw_emp.SetBorderStyle(2, ShadowBox!)\nSee also\nGetBorderStyle\n9.159 SetBrowser (obsolete)\nDescription\nSpecifies the Web browser for which you want to generate optimized HTML.\n"}
{"page": 837, "text": "Methods for the DataWindow Control\nPage 837\nObsolete method\nSetBrowser is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.346:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcomponent.SetBrowser ( string browsername )\nTable 9.347:\nArgument\nDescription\ndwcomponentA reference to a Web DataWindow server component.\nbrowsernameA string identifying the browser and version. The value should match the\nstring passed to the Web server in the HTTP header. The corresponding server\nvariable is HTTP_USER_AGENT.\nSets the value of the HTMLGen.Browser property for the DataWindow object\nassociated with the server component.\nFor information on recognized browsers, see HTMLGen.property.\nReturn value\nReturns an empty string if successful and the syntax error message from the Modify method\nif it fails.\nUsage\nIf the DataWindow recognizes the browser identifier, it will generate HTML optimized for\nthat browser. A server-side script can get the browser identifier from the server variable\nHTTP_USER_AGENT.\nThis method calls the Modify method of the server component's DataStore to set the property.\nExamples\nThis JSP example identifies the current browser for the component called dwGen:\nString browser = (String)request.getHeader  (\"User-Agent\");\ndwGen.SetBrowser(browser);\nIn ASP, you can use the ServerVariables method of the Request object to get the\nHTTP_USER_AGENT value:\nvar clientbrowser = Request.ServerVariables(\"HTTP_USER_AGENT\");\ndwGen.SetBrowser(clientbrowser);\nSee also\n"}
{"page": 838, "text": "Methods for the DataWindow Control\nPage 838\nGenerate\nModify\nSetAction\nHTMLGen.property\n9.160 SetChanges\nDescription\nApplies changes captured with GetChanges to a DataWindow or DataStore. This method is\nused primarily in distributed applications.\nApplies to\nTable 9.348:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\nlong dwcontrol.SetChanges ( blob changeblob {, dwConflictResolution resolution } )\nTable 9.349:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore.\nchangeblob\nA read-only change blob created with GetChanges from which you want to\napply changes.\nresolution\n(obsolete)\nA value of the dwConflictResolution enumerated datatype indicating how\nconflicts should be resolved:\n\u2022 FailOnAnyConflict! (default)\n\u2022 AllowPartialChanges!\nThis argument is obsolete and will be disabled in a future release.\nReturn value\nReturns one of the following values:\n1 -- All changes were applied\n2 -- A partial update was successful; conflicting changes were discarded\n-1 -- Method failed\n-2 -- There is a conflict between the state of the DataWindow changeblob and the state of the\nDataWindow\n-3 -- Column specifications do not match\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\n"}
{"page": 839, "text": "Methods for the DataWindow Control\nPage 839\nUsage\nUse this method in conjunction with GetChanges to synchronize two or more DataWindows\nor DataStores. GetChanges retrieves data buffers and status flags for changed rows in a\nDataWindow or DataStore and places this information in a blob. SetChanges then applies the\ncontents of this blob to another DataWindow or DataStore.\nCalling SetChanges when no changes are pending\nGetChanges returns 0 if no changes are pending. This can happen if AcceptText is not\ncalled after rows are modified. In this case, calling SetChanges will fail, with a return\ncode of -1.\nIf you call GetChanges on a DataWindow and apply the data passed in the changeblob\nargument to another DataWindow using SetChanges, you must call GetChanges on\nthe second DataWindow before you reapply changes to it from the first DataWindow.\nThe GetChanges call on the second DataWindow updates the original timestamp on\nthat DataWindow so that it matches the current timestamp. (You cannot use the Reset,\nResetUpdate, or AcceptText calls to update the original timestamp.) If you try to reapply\nchanges without first calling GetChanges on the second DataWindow, you will get an error\ndue to the conflict between the state of the DataWindow changeblob and the state of the\nsecond DataWindow.\nExamples\nThe following example is a script for a remote object function. The script uses SetChanges\nto apply changes made to a DataWindow control on a client to a DataStore on a server. The\nchanges made on the client are contained in a change blob that is passed as an argument to\nthe function. After applying changes to the DataStore, the server updates the database:\n// Instance variable:datastore ids_datastore\n// Function argument: blob ablb_data\nlong ll_rv\n \nids_datastore.SetChanges(ablb_data)\nll_rv = ids_datastore.Update()\n \nIF ll_rv > 0 THEN\n      COMMIT;\nELSE\n      ROLLBACK;\nEND IF \nRETURN ll_rv\nSee also\nGetChanges\nGetFullState\nGetStateStatus\nSetFullState\n9.161 SetColumn\nDescription\n"}
{"page": 840, "text": "Methods for the DataWindow Control\nPage 840\nSets the current column in a DataWindow control or DataStore.\nApplies to\nTable 9.350:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetColumn ( string column)\ninteger dwcontrol.SetColumn ( integer column)\nTable 9.351:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow.\ncolumn\nThe column you want to make current.\nColumn can be a column number or a column\nname.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If column is less than 1 or greater than the\nnumber of columns, SetColumn fails.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nSetColumn moves the cursor to the current column but does not scroll the DataWindow\ncontrol.\nOnly a visible editable column can be current. (A column is editable when its tab order\nvalue is greater than 0 and its Protect property is not set to 1.) Do not try to set a noneditable\ncolumn as the current column. If you try to set an invisible editable column as the current\ncolumn, then the focus will automatically switch to the next visible editable column.\nPowerBuilder environment\nFor use with PowerBuilder ListView controls, see Section 2.4.721, \u201cSetColumn\u201d in\nPowerScript Reference.\nEvents\nSetColumn can trigger these events:\nItemChanged\nItemError\nItemFocusChanged\n"}
{"page": 841, "text": "Methods for the DataWindow Control\nPage 841\nAvoiding infinite loops\nNever call SetColumn in the ItemChanged, ItemError, or ItemFocusChanged event.\nBecause SetColumn can trigger these events, such a recursive call can cause a stack\nfault.\nExamples\nThis statement makes the 15th column in dw_Employee the current column:\ndw_Employee.SetColumn(15)\nSee also\nGetColumn\nGetRow\nSetRow\n9.162 SetColumnLink (obsolete)\nDescription\nSpecifies information used for constructing hyperlinks for data in a column in generated\nHTML.\nObsolete method\nSetColumnLink is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.352:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcomponent.SetColumnLink ( string columnname, string link, string linkargs,\n string linktarget )\nTable 9.353:\nArgument\nDescription\ndwcomponentA reference to a Web DataWindow server component.\ncolumnname The name of a column in the DataWindow object associated with the server\ncomponent whose values you want formatted as hyperlinks in the generated\nHTML.\nlink\nA URL that is the target of a link (HTML A element) generated for each data\nitem in the column.\n"}
{"page": 842, "text": "Methods for the DataWindow Control\nPage 842\nArgument\nDescription\nThe URL can include parameters. Additional parameters from linkargs may be\nadded when the HTML is generated.\nSets the value of the HTML.Link property.\nlinkargs\nA string in the form:\nargname='exp'{ | argname = 'exp' } ... \nArgname is an page parameter to be passed to the server.\nExp is a DataWindow expression that is evaluated, and whose value is\nconverted using URL encoding and included in the string.\nThe evaluated linkargs string is appended to URL in link when HTML is\ngenerated to produce a hyperlink for each data item.\nFor information on constants and quotation marks in linkargs expressions, see\nSetSelfLink.\nSets the value of the HTML.LinkArgs property.\nlinktarget\nThe name of a target frame or window for the hyperlink specified in the\nLink property. The target is included in the HTML element using the HTML\nTARGET attribute.\nYou can use linktarget to implement a master/detail page design by directing\nthe detail page for a data item to a different window or frame.\nIf linktarget is null or an empty string (\"\"), then no TARGET attribute is\ngenerated.\nSets the value of the HTML.LinkTarget property.\nReturn value\nReturns an empty string if successful and the syntax error message from the Modify method\nif it fails.\nUsage\nThis method calls the Modify method of the server component's DataStore to set the property.\nExamples\nThis JavaScript example for a server-side script sets up hyperlinks for data in the empid\ncolumn. The data links to a detailed employee report in an HTML template called\nempdetail.stm.\nThe employee id is passed as a page parameter so the empdetail scripts can use it as a\nretrieval argument. The column name is specified as the expression. Empid is a numeric\ncolumn so its value has to be converted to a string for the page parameter value. When the\nserver component generates the HTML, it evaluates empid for each row and includes the data\nvalue as the link argument:\ndwMine.SetColumnLink (\"empid\", \"empdetail.stm\", \"pagearg_empid='String(empid)'\",\n \"\");\nSee also\n"}
{"page": 843, "text": "Methods for the DataWindow Control\nPage 843\nGenerate\nModify\nSetAction\nHTML.property\n9.163 SetCultureFormat\nDescription\nThe culture format set by this function does not affect the DataWindow display. It is used\nonly for rendering HTML, XHTML, and XML for the DataWindow control.\nApplies to\nSyntax\nPowerBuilder\ninteger dwcontrol.SetCultureFormat( string cultureStr )\nTable 9.354:\nArgument Description\ndwcontrol\nA reference to a DataWindow control for which you want to set the culture\nformat.\ncultureStr\nA string that defines the formats for displaying information. For example:\nsDecimal=,   sTime=:   sThousand=    sShortDate=dd/MM/yyyy   iDate=1 \n  sDate=/   sLongDate=dddd d MMMM yyyy   sCurrency='   iCurrDigits=2  \n iNegCurr=8   iCurrency=3   iMeasure=0   iTime=1\nsDecimal is the symbol used to indicate the decimal place.\nsTime is the symbol used to separate the hours and minutes in time displays.\nsThousand is\nEach definition is delimited by a tab.\nReturn value\nReturns 1 if successful and -1 if it fails. Does not work for .NET targets, and will always\nreturn -1 if used in a target of that type.\n9.164 SetDetailHeight\nDescription\nSets the height of each row in the specified range to the specified value.\nApplies to\nTable 9.355:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\n"}
{"page": 844, "text": "Methods for the DataWindow Control\nPage 844\nSyntax\nPowerBuilder\ninteger dwcontrol.SetDetailHeight ( long startrow, long endrow , long height )\nTable 9.356:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore for which you want to\nset the height of one or more rows in the detail area\nstartrow\nThe first row in the range of rows for which you want to set the height\nendrow\nThe last row in the range of rows for which you want to set the height\nheight\nThe height of the detail area for the specified rows in the units specified\nfor the DataWindow object\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nCall SetDetailHeight in a script to vary the amount of space assigned to rows in a\nDataWindow control or DataStore. You cannot specifically set the height for different rows\nwhen you define a DataWindow object in the DataWindow painter, although you can turn on\nthe Autosize Height property for the detail band so that the height of each row is determined\nby the data.\nYou can set the detail height of one or more rows to zero, which hides them from view.\nExamples\nThis statement sets the height of rows 2 and 3 to 500:\ndw_1.SetDetailHeight(2, 3, 500)\nThis script retrieves rows for a DropDownDataWindow associated with the Company_Name\ncolumn. It then hides rows 2 and 3 of the DropDownDataWindow by setting their detail\nheight to 0:\nDataWindowChild dwc;\ninteger rtncode;\n \nrtncode = dw_1.GetChild(\"company_name\", dwc)\nIF rtncode < 0 THEN HALT\n \ndwc.SetTransObject(SQLCA)\ndwc.Retrieve( )\ndwc.SetDetailHeight(2, 3, 0)\n9.165 SetDWObject (obsolete)\nDescription\nSpecifies the DataWindow library and object that the Web DataWindow server component\nwill use for generating HTML.\n"}
{"page": 845, "text": "Methods for the DataWindow Control\nPage 845\nObsolete method\nSetDWObject is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.357:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nint dwcomponent.SetDWObject ( string sourcefile, string dwobjectname )\nint dwcomponent.SetDWObjectEx ( string dwobjectname )\nTable 9.358:\nArgument\nDescription\ndwcomponent\nA reference to a Web DataWindow server component.\nsourcefile\nThe name of a PowerBuilder library (PBL) or dynamic library (PBD)\ncontaining DataWindow object definitions\nor\nA source definition file (SRD)\nor\nA Powersoft report (PSR) containing a DataWindow object definition and\ndata.\nThe file must be located in the file system of the machine hosting the server\ncomponent.\ndwobjectname\nWhen sourcefile is a PBL or PBD, the name of a DataWindow object in the\nlibrary.\nWhen sourcefile is a PSR or SRD, dwobjectname should be an empty\nstring (\"\").\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nExamples\nThis example identifies the library and DataWindow object for the server component called\ndwGen:\nint retVal = dwGen.SetDWObject(\"htgenex.pbl\", \"d_tabular_dept\")\nSee also\nGenerate\nSetAction\n"}
{"page": 846, "text": "Methods for the DataWindow Control\nPage 846\n9.166 SetFilter\nDescription\nSpecifies filter criteria for a DataWindow control or DataStore.\nApplies to\nTable 9.359:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetFilter ( string format )\nTable 9.360:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control, DataStore, or child DataWindow in\nwhich you want to define the filter.\nformat\nA string whose value is a boolean expression that you want to use as\nthe filter criteria. The expression includes column names or numbers. A\ncolumn number must be preceded by a pound sign (#). If format is null,\nPowerBuilder prompts you to enter a filter.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If no DataWindow object has been assigned\nto the DataWindow or DataStore, SetFilter returns -1. The return value is usually not used.\nUsage\nA DataWindow object can have filter criteria specified as part of its definition. After data\nis retrieved, rows that do not meet the criteria are immediately transferred from the primary\nbuffer to the filter buffer.\nThe SetFilter method replaces the existing filter criteria -- if any are defined for the\nDataWindow object -- with a new set of criteria. Call the Filter method to apply the filter\ncriteria and transfer rows that do not meet the filter criteria to the filter buffer.\nThe filter expression consists of columns, relational operators, and values against which\ncolumn values are compared. Boolean expressions can be connected with logical operators\nAND and OR. You can also use NOT, the negation operator. Use parentheses to control the\norder of evaluation.\nSample expressions are:\nitem_id > 5\nNOT item_id = 5\n(NOT item_id = 5) AND customer > \"Mabson\"\nitem_id > 5 AND customer = \"Smith\"\n#1 > 5 AND #2 = \"Smith\"\n"}
{"page": 847, "text": "Methods for the DataWindow Control\nPage 847\nThe filter expression is a string and does not contain variables. However, you can build\nthe string in your script using the values of script variables. Within the filter string, string\nconstants must be enclosed in quotation marks (see the examples).\nDictionary or ASCII order\nBy default, PowerBuilder performs comparisons in dictionary order. For example, the\nfollowing expression shows all the rows in which column 2 begins with A, a, B or b:\n#2 >= 'a' and #2 < 'c'\nTo perform comparisons in ASCII order, append \"\\s\" to the format string. For example, the\nfollowing expression shows only rows in which column 2 begins with a or b, because the\nASCII values of uppercase letters are lower than the ASCII values of lowercase letters:\n#2 >= 'a' and #2 < 'c' \\s\nNumber format\nThe formatting that you enter for numbers and currency in filter expressions display the same\nway in any country. Changing the regional settings of the operating system does not modify\nthe formatting displayed for numbers and currency at runtime.\nEscape keyword\nIf you need to use the % or _ characters as part of the string, you can use the escape keyword\nto indicate that the character is part of the string. For example, the _ character in the\nfollowing filter string is part of the string to be searched for, but is treated as a wildcard:\ncomment LIKE ~'%o_a15progress%~'\nThe escape keyword designates any character as an escape character (do not use a character\nthat is part of the string you want to match). In the following example, the asterisk (*)\ncharacter is inserted before the _ character and designated as an escape character, so that the\n_ character is treated as part of the string to be matched:\ncomment like ~'%o*_a15progress%~' escape ~'*~'\nUser-specified filters\nTo let users specify their own filter expression for a DataWindow control, you can pass a\nnull string to the SetFilter method. PowerBuilder displays its Specify Filter dialog box with\nthe filter expression blank. Then you can call Filter to apply the user's filter expression to the\nDataWindow. You cannot pass a null string to the SetFilter method for a DataStore object.\nRemoving a filter\nTo remove a filter, call SetFilter with the empty string (\"\") for format and then call Filter. The\nrows in the filter buffer will be restored to the primary buffer and positioned after the rows\nthat already exist in the primary buffer.\nExamples\nThis statement defines the filter expression for dw_Employee as the value of format1:\ndw_Employee.SetFilter(format1)\nThe following statements define a filter expression and set it as the filter for dw_Employee.\nWith this filter, only those rows in which the cust_qty column exceeds 100 and the cust_code\ncolumn exceeds 30 are displayed. The final statement calls Filter to apply the filter:\n"}
{"page": 848, "text": "Methods for the DataWindow Control\nPage 848\nstring DWfilter2\nDWfilter2 = \"cust_qty > 100 and cust_code >30\"\ndw_Employee.SetFilter(DWfilter2)\ndw_Employee.Filter( )\nThe following statements define a filter so that emp_state of dw_Employee displays only if\nit is equal to the value of var1 (in this case ME for Maine). The filter expression passed to\nSetFilter is emp_state = ME:\nstring Var1\nVar1 = \"ME\"\ndw_Employee.SetFilter(\"emp_state = '\"+ var1 +\" '\")\nThe following statements define a filter so that column 1 must equal the value in min_qty and\ncolumn 2 must equal the value in max_qty to pass the filter. The resulting filter expression is:\n#1=100 and #2=1000\nThe sample code is:\ninteger max_qty, min_qty\nmin_qty = 100\nmax_qty = 1000\ndw_inv.SetFilter(\"#1=\"+ String( min_qty) &\n      + \" and #2=\" + String(max_qty))\nThe following example sets the filter expression to null, which causes PowerBuilder to\ndisplay the Specify Filter dialog box. Then it calls Filter, which applies the filter expression\nthe user specified:\nstring null_str\nSetNull(null_str)\ndw_main.SetFilter(null_str)\ndw_main.Filter()\nSee also\nFilter\n9.167 SetFormat\nDescription\nSpecifies a display format for a column in a DataWindow control or DataStore.\nApplies to\nTable 9.361:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetFormat ( string column, string format )\ninteger dwcontrol.SetFormat ( integer column, string format )\n"}
{"page": 849, "text": "Methods for the DataWindow Control\nPage 849\nTable 9.362:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\ncolumn\nThe column for which you are specifying the display format. Column can\nbe a column number or a column name.\nformat\nA string whose value is the display format for the DataWindow column.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. The return value is usually not used.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nFor information on valid display formats for different datatypes, see Section 6.5.4, \u201cDefining\ndisplay formats\u201d in Users Guide.\nIf you are specifying the display format for a number, the format must use U.S. notation. For\nexample, comma (,) represents the thousands delimiter and period (.) represents the decimal\nplace. At runtime, the locally correct symbols will be displayed.\nAn EditMask edit style supersedes any display format applied to the column. When the\ncolumn has an EditMask edit style, calling SetFormat has no effect.\nExamples\nThese statements define the display format for column 15 of dw_employee to the contents of\nformat1:\nstring format1\nformat1 = \"$#,##0.00\"\ndw_employee.SetFormat(15, format1)\nSee also\nGetFormat\n9.168 SetFullState\nDescription\nApplies the contents of a DataWindow blob retrieved by GetFullState to a DataWindow or\nDataStore.\nThis method is used primarily in distributed applications.\nApplies to\nTable 9.363:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\n"}
{"page": 850, "text": "Methods for the DataWindow Control\nPage 850\nlong dwcontrol.SetFullState ( blob dwasblob )\nTable 9.364:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or\nDataStore\ndwasblob\nA blob that contains the state information\nyou want to apply to the DataWindow\ncontrol or DataStore\nReturn value\nReturns -1 if an error occurs and one of the following values if it succeeds:\n1 -- DataWindow objects match; old data and state overwritten.\n2 -- DataWindow objects do not match; old object, data, and state replaced.\n3 -- No DataWindow object associated with DataWindow control or DataStore; the\nDataWindow object associated with the blob is used. The value of the DataObject property\nremains an empty string.\nNull\nIf any argument's value is null in PowerBuilder or JavaScript, the method returns null.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nGetFullState retrieves the entire state of a DataWindow or DataStore into a blob, including\nthe DataWindow object specification, the data buffers, and the status flags. When you use\nSetFullState to apply the blob created by GetFullState to another DataWindow, the target\nDataWindow has enough information to recreate the source DataWindow.\nBecause the blob created by GetFullState contains the DataWindow object specification,\na subsequent call to SetFullState will overwrite the DataWindow object for the target\nDataWindow control or DataStore. If the target of SetFullState does not have a DataWindow\nobject associated with it, the DataWindow object associated with the blob is used. The value\nof the DataObject property remains null.\nWhen you use GetFullState and SetFullState to synchronize a DataWindow control on a\nclient with a DataStore on a server, you need to make sure that the DataWindow object for\nthe DataStore contains the presentation style you want to display on the client.\nLimitation on calling SetFullState from the current DataWindow\nSetFullState destroys the referenced DataWindow and creates a new one using the\ncontents of the DataWindow blob that you specify as an argument to SetFullState.\nIf you call SetFullState from an event in the current DataWindow, the DataWindow\nis destroyed before the event code can be completed and you might cause the\napplication to crash. Therefore you should never use the \"this\" pronoun when calling\nSetFullState.\nExamples\n"}
{"page": 851, "text": "Methods for the DataWindow Control\nPage 851\nThese statements in a distributed client application call a remote object function that retrieves\ndatabase information into a DataStore and puts the contents of the DataStore into a blob\nby using GetFullState. After the server passes the blob back to the client, the client uses\nSetFullState to apply the blob to a DataWindow control:\n// Global variable:connection myconnect\n// Instance variable: uo_employee iuo_employee\n \nblob lblb_data\nlong ll_rv\n \nmyconnect.CreateInstance(iuo_employee)\niuo_employee.RetrieveData(lblb_data)\n \nll_rv = dw_empdata.SetFullState(lblb_data)\n \nIF ll_rv = -1 THEN\n      MessageBox(\"Error\", \"SetFullState failed!\")\nEND IF\nSee also\nGetChanges\nGetFullState\nGetStateStatus\nSetChanges\n9.169 SetHTMLAction (obsolete)\nDescription\nAccepts action and context information about user interaction with the Web DataWindow\nclient control in a Web browser so that newly generated HTML can reflect any requested\nchanges.\nObsolete method\nSetHTMLAction is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.365:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetHTMLAction ( string action, string context )\nTable 9.366:\nArgument Description\ndwcontrol\nA reference to a DataWindow control or DataStore.\n"}
{"page": 852, "text": "Methods for the DataWindow Control\nPage 852\nArgument Description\naction\nA string describing an action associated with a button click or method call in a\nWeb DataWindow client control on a Web page. The value is stored in a page\nparameter called HTMLGenObjectName_action. action must be a valid action\nand cannot be an empty string or the value none.\ncontext\nA string describing the context of action in the Web DataWindow client\ncontrol. The string is generated by a Web DataWindow script and the value is\nstored in a page parameter called HTMLGenObjectName_context.\nThe format is not documented and subject to change.\nReturn value\nReturns 1 if it succeeds and one of these negative values if an error occurs:\n-1 -- Reloading the current context failed.\n-2 -- The action was attempted but it failed.\n-3 -- The action could not be performed (for example, the action was InsertRow but the\nDataWindow has no editable fields for entering new data).\n-4 -- The action was aborted by the HTMLContextApplied event.\n-5 -- The action is invalid.\nUsage\nSetHTMLAction triggers the HTMLContextApplied event after restraining the context but\nbefore performing the action. You can use the event to perform data validation using methods\nof a server component.\nIf you write your own server component in PowerBuilder instead of using the generic Web\nDataWindow server component, you use this method to update the generated HTML to\nreflect user actions.\nSee also\nSetAction\n9.170 SetHTMLObjectName (obsolete)\nDescription\nSpecifies a name for the Web DataWindow client control.\nObsolete method\nSetHTMLObjectName is obsolete and should not be used, because the Web\nDataWindow technology is obsolete.\nApplies to\nTable 9.367:\nDataWindow type\nMethod applies to\nWeb\nServer component\n"}
{"page": 853, "text": "Methods for the DataWindow Control\nPage 853\nSyntax\nWeb DataWindow server component\nstring dwcomponent.SetHTMLObjectName ( string objectname )\nTable 9.368:\nArgument\nDescription\ndwcomponent A reference to a Web DataWindow server component.\nobjectname\nA string specifying a name used in generated code for the Web DataWindow\nclient control, page parameters, and client side events.\nSets the value of the HTMLGen.ObjectName property for the DataWindow\nobject associated with the server component.\nReturn value\nReturns an empty string if successful and the syntax error message from the Modify method\nif it fails.\nUsage\nYou must specify a unique object name when there will be more than one Web DataWindow\non a Web page so names will not conflict.\nThis method calls the Modify method of the server component's DataStore to set the property.\nExamples\nThis example specifies a name to be used in generated HTML for the server component\ncalled webDW:\nwebDW.SetHTMLObjectName (\"dwMine\");\nSee also\nGenerate\nModify\nOneTrip\nHTMLGen.property\n9.171 SetItem\nDescription\nSets the value of a row and column in a DataWindow control or DataStore to the specified\nvalue.\nApplies to\nTable 9.369:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\n"}
{"page": 854, "text": "Methods for the DataWindow Control\nPage 854\nPowerBuilder\ninteger dwcontrol.SetItem ( long row, integer column, any value )\ninteger dwcontrol.SetItem ( long row, string column, any value )\nTable 9.370:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control, DataStore, or child DataWindow in\nwhich you want to set a specific row and column to a value.\nrow\nThe row location of the data.\ncolumn\nThe column location of the data. Column can be a column number or a column\nname. The column number is the number of the column as it is listed in the\nColumn Specification view of the DataWindow painter -- not necessarily the\nnumber of the column in the Design view.\nvalue\nThe value to which you want to set the data at the row and column location.\nThe datatype of the value must be the same datatype as the column.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nUsage\nSetItem sets a value in a DataWindow buffer. It does not affect the value currently in the edit\ncontrol over the current row and column, which is the data the user has changed or might\nchange. The value in the edit control does not become the value of the DataWindow item\nuntil it is validated and accepted (see AcceptText). In a script, you can change the value in\nthe edit control with the SetText method.\nYou can use SetItem when you want to set the value of an item in a DataWindow control or\nDataStore that has script as the source.\nDisplaying data in character columns\nWhen you use SetItem (or dot notation) to assign a value to a character column that is\ndefined to have 512 characters or less, the actual size of the column in the DataWindow\ndefinition is ignored. If the assigned value has more than 512 characters, the value displayed\nin the DataWindow is truncated at 512 characters. If the DataWindow column is defined\nto have more than 512 characters, its size is respected. For example, if the DataWindow\ncolumn is defined to have 1, 10, or 100 characters, up to 512 characters of the assigned value\nare displayed. If the DataWindow column is defined to have 1000 characters, up to 1000\ncharacters are displayed.\nGroup and TreeView DataWindows\nIn Group and TreeView DataWindow objects, you must call GroupCalc after you call\nSetItem to display data correctly.\nUsing SetItem in the ItemChanged and ItemError events\nIn the ItemChanged and ItemError events, you can call SetItem to set the value of an item\nwhen the data the user entered is not valid. If you want the user to have an opportunity to\nenter a different value, after calling SetItem you can call SetText to put that same value in the\n"}
{"page": 855, "text": "Methods for the DataWindow Control\nPage 855\nedit control so that the user sees the value too. In the script, use a return code that rejects the\nvalue in the edit control, avoiding further processing, but does not allow the focus to change.\nTo retain focus and display an error message, return 1 for ItemChanged or 0 for ItemError.\nWhen you use a return code that rejects the data the user entered but allows the focus to\nchange (a return code of 2 in the script for the ItemChanged event or 3 in the ItemError\nevent), you do not need to call SetText because the value set with SetItem displays.\nIf PowerBuilder cannot properly convert the string the user entered, you must include\nstatements in the script for the ItemChanged or ItemError event to convert the data and use\nSetItem with the converted data. For example, if the user enters a number with commas and\na dollar sign (for example, $1,000), PowerBuilder is unable to convert the string to a number\nand you must convert it in the script.\nPowerBuilder environment\nFor use with PowerBuilder ListView and TreeView controls, see Section 2.4.740,\n\u201cSetItem\u201d in PowerScript Reference.\nExamples\nThis statement sets the value of row 3 of the column named hire_date of the DataWindow\ncontrol dw_order to 2003-06-07:\ndw_order.SetItem(3, \"hire_date\", 2003-06-07)\nWhen a user starts to edit a numeric column and leaves it without entering any data,\nPowerBuilder tries to assign an empty string to the column. This fails the datatype validation\ntest. In this example, code in the ItemError event sets the column's value to null and allows\nthe focus to change.\nThis example assumes that the datatype of column 2 is numeric. If it is date, time, or\ndatetime, replace the first line (integer null_num) with a declaration of the appropriate\ndatatype:\ninteger null_num //to contain null value\n \nSetNull(null_num)\n \n// Special processing for column 2\nIF dwo.ID = 2 THEN\n      // If user entered nothing (\"\"), set to null\n      IF data = \"\" THEN\n         This.SetItem(row, dwo.ID, null_num)\n         RETURN 2\n      END IF\nEND IF\nThe following example is a script for a DataWindow's ItemError event. If the user specifies\ncharacters other than digits for a numeric column, the data will fail the datatype validation\ntest. You can include code to strip out characters such as commas and dollar signs and use\nSetItem to assign the now valid numeric value to the column. The return code of 3 causes the\ndata in the edit control to be rejected because the script has provided a valid value:\nstring snum, c\ninteger cnt\n \n// Extract the digits from the user's data\n"}
{"page": 856, "text": "Methods for the DataWindow Control\nPage 856\nFOR cnt = 1 to Len(data)\n      c = Mid(data, cnt, 1) // Get character\n      IF IsNumber(c) THEN snum = snum + c\nNEXT\nThis.SetItem(row, dwo.ID, Long(snum))\nRETURN 3\nSee also\nGetItemDate\nGetItemDateTime\nGetItemNumber\nGetItemString\nGetItemTime\nGetText\nSetText\n9.172 SetItemDate (obsolete)\nDescription\nSets the value of a row and column in a DataWindow control to the specified value.\nObsolete method\nSetItemDate is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.371:\nDataWindow type\nMethod applies to\nWeb\nServer component (see SetItem for\nequivalent client control method)\nSyntax\nWeb DataWindow server component\nshort dwcontrol.SetItemDate ( long row, string column, string value )\nshort dwcontrol.SetItemDateByColNum ( long row, short column, string value )\nTable 9.372:\nArgument\nDescription\ndwcontrol\nThe name of the Web DataWindow control in which you want to set a\nspecific row and column to a value.\nrow\nThe row location of the data.\ncolumn\nThe column location of the data. Column can be a column number or a\ncolumn name.\nvalue\nThe value to which you want to set the data at the row and column location.\n"}
{"page": 857, "text": "Methods for the DataWindow Control\nPage 857\nUsage\nAlthough JavaScript does not distinguish between the Date, DateTime, and Time\ndatatypes, the DataStore will give an error if the wrong type is passed. You can use the\nSetItemDateTime and SetItemTime methods to set values in columns with the DateTime and\nTime datatypes.\nBecause the Web DataWindow server component does not support overloading, you must use\nthe SetItemDateByColNum variant instead of the standard SetItemDate method when you\nwant to refer to the column by number.\nSee also\nSetItem\nSetItemDateTime\nSetItemTime\n9.173 SetItemDateTime (obsolete)\nDescription\nSets the value of a row and column in a DataWindow control to the specified value.\nObsolete method\nSetItemDateTime is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.373:\nDataWindow type\nMethod applies to\nWeb\nServer component (see SetItem for\nequivalent client control method)\nSyntax\nWeb DataWindow server component\nshort dwcontrol.SetItemDateTime ( long row, string column, \n   string value )\nshort dwcontrol.SetItemDateTimeByColNum ( long row, short column,\n   string value )\nTable 9.374:\nArgument\nDescription\ndwcontrol\nThe name of the Web DataWindow control in which you want to set a\nspecific row and column to a value.\nrow\nThe row location of the data.\ncolumn\nThe column location of the data. Column can be a column number or a\ncolumn name.\nvalue\nThe value to which you want to set the data at the row and column location.\n"}
{"page": 858, "text": "Methods for the DataWindow Control\nPage 858\nUsage\nAlthough JavaScript does not distinguish between the Date, DateTime, and Time datatypes,\nthe DataStore will give an error if the wrong type is passed. You can use the SetItemDate and\nSetItemTime methods to set values in columns with the Date and Time datatypes.\nBecause the Web DataWindow server component does not support overloading, you must use\nthe SetItemDateTimeByColNum variant instead of the standard SetItemDateTime method\nwhen you want to refer to the column by number.\nSee also\nSetItem\nSetItemDate\nSetItemTime\n9.174 SetItemNumber (obsolete)\nDescription\nSets the value of a row and column in a DataWindow control to the specified value.\nObsolete method\nSetItemNumber is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.375:\nDataWindow type\nMethod applies to\nWeb\nServer component (see SetItem for\nequivalent client control method)\nSyntax\nWeb DataWindow server component\nshort dwcontrol.SetItemNumber ( long row, string column, double value )\nshort dwcontrol.SetItemNumberByColNum ( long row, short column, double value )\nTable 9.376:\nArgument\nDescription\ndwcontrol\nThe name of the Web DataWindow control in which you want to set a\nspecific row and column to a value.\nrow\nThe row location of the data.\ncolumn\nThe column location of the data. Column can be a column number or a\ncolumn name.\nvalue\nThe value to which you want to set the data at the row and column location.\nUsage\n"}
{"page": 859, "text": "Methods for the DataWindow Control\nPage 859\nBecause the Web DataWindow server component does not support overloading, you must use\nthe SetItemNumberByColNum variant instead of the standard SetItemNumber method when\nyou want to refer to the column by number.\nSee also\nSetItem\n9.175 SetItemStatus\nDescription\nChanges the modification status of a row or a column within a row. The modification status\ndetermines the type of SQL statement the Update method will generate for the row.\nApplies to\nTable 9.377:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetItemStatus ( long row, integer column, \n   dwbuffer dwbuffer, dwitemstatus status )\ninteger dwcontrol.SetItemStatus ( long row, string column, \n   dwbuffer dwbuffer, dwitemstatus status )\nTable 9.378:\nArgument Description\ndwcontrol A reference to a DataWindow control, DataStore, or child DataWindow.\nrow\nThe row location in which you want to set the status.\ncolumn\nThe column location in which you want to set the status. Column can be a\ncolumn number or a column name. To set the status for the row, enter 0 for\ncolumn.\ndwbuffer\nA value identifying the DataWindow buffer that contains the row.\nFor a list of valid values, see DWBuffer.\nstatus\nA value of the dwItemStatus enumerated datatype specifying the new status.\nFor a list of valid values, see DWItemStatus.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nUsage\nHow statuses are set\nThere are four DataWindow item statuses, two of which apply only to rows:\n"}
{"page": 860, "text": "Methods for the DataWindow Control\nPage 860\nTable 9.379: Possible statuses for DataWindow items\nStatus\nApplies to\nNew!\nRows\nNewModified!\nRows\nNotModified!\nRows and columns\nDataModified!\nRows and columns\nWhen data is retrieved\nWhen data is retrieved into a DataWindow, all rows and columns initially have a status of\nNotModified!.\nAfter data has changed in a column in a particular row, either because the user changed the\ndata or the data was changed programmatically, such as through the SetItem method, the\ncolumn status for that column changes to DataModified!. Once the status for any column in a\nretrieved row changes to DataModified!, the row status also changes to DataModified!.\nWhen rows are inserted\nWhen a row is inserted into a DataWindow, it initially has a row status of New!, and all\ncolumns in that row initially have a column status of NotModified!. After data has changed\nin a column in the row, either because the user changed the data or the data was changed\nprogrammatically, such as through the SetItem method, the column status changes to\nDataModified!. Once the status for any column in the inserted row changes to DataModified!,\nthe row status changes to NewModified!.\nWhen a DataWindow column has a default value, the column's status does not change to\nDataModified! until the user makes at least one actual change to a column in that row.\nWhen Update is called\nA row's status flag determines what SQL command the Update method uses to update the\ndatabase. INSERT or UPDATE is called, depending upon the following row statuses:\nTable 9.380: Effect of row status on SQL command called by Update method\nRow status\nSQL statement generated\nNewModified!\nINSERT\nDataModified!\nUPDATE\nA column is included in an UPDATE statement only if the following two conditions are met:\n\u2022 The column is on the updatable column list maintained by the DataWindow object\nFor more information about setting the update characteristics of the DataWindow object,\nsee Section 6.4, \u201cControlling Updates in DataWindow objects\u201d in Users Guide.\n\u2022 The column has a column status of DataModified!\nThe DataWindow control includes all columns in INSERT statements it generates. If a\ncolumn has no value, the DataWindow attempts to insert a null. This causes a database\nerror if the database does not allow nulls in that column.\nChanging statuses using SetItemStatus\n"}
{"page": 861, "text": "Methods for the DataWindow Control\nPage 861\nUse SetItemStatus when you want to change the way a row will be updated. Typically, you\ndo this to prevent the default behavior from taking place. For example, you might copy a\nrow from one DataWindow to another. After the user modifies the row, you want to issue an\nUPDATE statement instead of an INSERT statement.\nChanging column status\nYou use SetItemStatus to change the column status from DataModified! to NotModified!, or\nthe converse.\nChange column status when you change row status\nChanging the row status changes the status of all columns in that row to\nNotModified!, so if the Update method is called, no SQL update is produced. You\nmust change the status of columns to be updated after you change the row status.\nChanging row status\nChanging row status is a little more complicated. The following table illustrates the effect of\nchanging from one row status to another:\nTable 9.381: Effect of changing from one row status to another\nOriginal status\nSpecified status\nNew!\nNew Modified!\nData Modified!\nNot Modified!\nNew!\n-\nYes\nYes\nNo\nNewModified!\nNo\n-\nYes\nNew!\nDataModified!\nNewModified!\nYes\n-\nYes\nNotModified!\nYes\nYes\nYes\n-\nIn the table, Yes means the change is valid. For example, issuing SetItemStatus on a row that\nhas the status NotModified! to change the status to New! does change the status to New!. No\nmeans that the change is not valid and the status is not changed.\nIssuing SetItemStatus to change a row status from NewModified! to NotModified! actually\nchanges the status to New!. Issuing SetItemStatus to change a row status from DataModified!\nto New! actually changes the status to NewModified!.\nChanging a row's status to NotModified! or New! causes all columns in that row to be\nassigned a column status of NotModified!. Change the column's status to DataModified! to\nensure that an update results in a SQL UPDATE.\nChanging the status of a retrieved row from NotModified! to New!\nIf you change the status of a retrieved row to New! and then make a change to data in\na column, all the columns in that row change status to DataModified! All the columns\nchange status because the Update method generates a SQL INSERT command that\nincludes the changed data as well as the data that already existed in the other columns.\nChanging status indirectly\nWhen you cannot change to the desired status directly, you can usually do it indirectly. For\nexample, change New! to DataModified! to NotModified!.\n"}
{"page": 862, "text": "Methods for the DataWindow Control\nPage 862\nResetting status for the whole DataWindow object\nTo reset the update status of the entire DataWindow object, use the ResetUpdate method.\nThis sets all status flags to NotModified! except for New! status flags, which remain\nunchanged.\nExamples\nThis statement sets the status of row 5 in the Salary column of the primary buffer of\ndw_history to NotModified!:\ndw_history.SetItemStatus(5, \"Salary\", &\n      Primary!, NotModified!)\nThis statement sets the status of row 5 in the emp_status column of the primary buffer of\ndw_new_hire to DataModified!:\ndw_new_hire.SetItemStatus(5, \"emp_status\", &\n      Primary!, DataModified!)\nThis code sets the status of row 5 in the primary buffer of dw_rpt to DataModified! if its\nstatus is currently NewModified!:\ndwItemStatus l_status\nl_status = dw_rpt.GetItemStatus(5, 0, Primary!)\nIF l_status = NewModified! THEN\n      dw_rpt.SetItemStatus(5, 0, \n         Primary!, DataModified!)\nEND IF\nSee also\nGetItemStatus\nResetUpdate\n9.176 SetItemString (obsolete)\nDescription\nSets the value of a row and column in a DataWindow control to the specified value.\nObsolete method\nSetItemString is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.382:\nDataWindow type\nMethod applies to\nWeb\nServer component (see SetItem for\nequivalent client control method)\nSyntax\nWeb DataWindow server component\nshort dwcontrol.SetItemString ( long row, string column, string value )\n"}
{"page": 863, "text": "Methods for the DataWindow Control\nPage 863\nshort dwcontrol.SetItemStringByColNum ( long row, short column, string value )\nTable 9.383:\nArgument\nDescription\ndwcontrol\nThe name of the Web DataWindow control in which you want to set a specific\nrow and column to a value.\nrow\nThe row location of the data.\ncolumn\nThe column location of the data. Column can be a column number or a column\nname.\nvalue\nThe value to which you want to set the data at the row and column location.\nUsage\nBecause the Web DataWindow server component does not support overloading, you must use\nthe SetItemStringByColNum variant instead of the standard SetItemString method when you\nwant to refer to the column by number.\nSee also\nSetItem\n9.177 SetItemTime (obsolete)\nDescription\nSets the value of a row and column in a DataWindow control to the specified value.\nObsolete method\nSetItemTime is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.384:\nDataWindow type\nMethod applies to\nWeb\nServer component (see SetItem for\nequivalent client control method)\nSyntax\nWeb DataWindow server component\nshort dwcontrol.SetItemTime ( long row, string column, string value )\nshort dwcontrol.SetItemTimeByColNum ( long row, short column, string value )\nTable 9.385:\nArgument\nDescription\ndwcontrol\nThe name of the Web DataWindow control in which you want to set a specific\nrow and column to a value.\nrow\nThe row location of the data.\n"}
{"page": 864, "text": "Methods for the DataWindow Control\nPage 864\nArgument\nDescription\ncolumn\nThe column location of the data. Column can be a column number or a column\nname.\nvalue\nThe value to which you want to set the data at the row and column location.\nUsage\nAlthough JavaScript does not distinguish between the Date, DateTime, and Time datatypes,\nthe DataStore will give an error if the wrong type is passed. You can use the SetItemDate and\nSetItemDateTime methods to set values in columns with the Date and DateTime datatypes.\nBecause the Web DataWindow server component does not support overloading, you must use\nthe SetItemTimeByColNum variant instead of the standard SetItemTime method when you\nwant to refer to the column by number.\nSee also\nSetItem\nSetItemDate\nSetItemDateTime\n9.178 SetPageSize (obsolete)\nDescription\nSpecifies the number of rows to include in a generated Web page for the Web DataWindow.\nObsolete method\nSetPageSize is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.386:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcomponent.SetPageSize ( long pagesize )\nTable 9.387:\nArgument\nDescription\ndwcomponent\nA reference to a Web DataWindow server component.\npagesize\nThe number of rows of data to include in a generated Web page. If the Web\npage does not include all available rows, you can include Button controls in\nthe DataWindow object for navigating other subsets of rows. To include all\navailable rows in the page, specify 0 for PageSize.\n"}
{"page": 865, "text": "Methods for the DataWindow Control\nPage 865\nArgument\nDescription\nSets the value of the HTMLGen.PageSize property for the DataWindow\nobject associated with the server component.\nReturn value\nReturns an empty string if successful and the syntax error message from the Modify method\nif it fails.\nUsage\nThis method calls the Modify method of the server component's DataStore to set the property.\nIt is particularly useful for the XML Web DataWindow where you typically want to limit the\nnumber of rows per page.\nExamples\nThis example specifies that the HTML generated by the webDW component will have 20\nrows of data:\nwebDW.SetPageSize(20);\nSee also\nGenerate\nModify\nHTMLGen.property\n9.179 SetPosition\nDescription\nMoves a control within the DataWindow to another band or changes the front-to-back order\nof controls within a band.\nApplies to\nTable 9.388:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetPosition ( string controlname, string band, boolean\n bringtofront )\nTable 9.389:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore.\ncontrolname\nThe name of the control within the DataWindow that you want to move. You\nassign names to the controls in the DataWindow painter.\n"}
{"page": 866, "text": "Methods for the DataWindow Control\nPage 866\nArgument\nDescription\nband\nA string whose value is the name of the band or layer in which you want to\nposition controlname. Layer names are background and foreground.\nBand names are detail, header, footer, summary, header.#, and trailer.#,\nwhere # is the group level number. Enter the empty string (\"\") if you do not\nwant to change the band.\nbringtofront\nA boolean indicating whether you want to bring controlname to the front\nwithin the band:\n\u2022 True -- Bring it to the front.\n\u2022 False -- Do not bring it to the front.\nReturn value\nReturns 1 when it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nUsage\nPowerBuilder environment\nFor setting the position of controls in the front-to-back order of a PowerBuilder\nwindow, see Section 2.4.760, \u201cSetPosition\u201d in PowerScript Reference.\nExamples\nThis statement moves oval_red in dw_rpt to the header and brings it to the front:\ndw_rpt.SetPosition(\"oval_red\", \"header\", true)\nThis statement does not change the position of oval_red , but does bring it to the front:\ndw_rpt.SetPosition(\"oval_red\", \"\", true)\nThis statement moves oval_red to the footer, but does not bring it to the front:\ndw_rpt.SetPosition(\"oval_red\", \"footer\", false)\n9.180 SetRedraw\nDescription\nControls the automatic redrawing of an object or control after each change to its properties.\nApplies to\nTable 9.390:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\n"}
{"page": 867, "text": "Methods for the DataWindow Control\nPage 867\ninteger objectname.SetRedraw ( boolean redraw )\nTable 9.391:\nArgument\nDescription\nobjectname\nThe name of the object or control for which you want to change the redraw\nsetting.\nredraw\nA boolean value that controls whether PowerBuilder redraws an object\nautomatically after a change. Values are:\n\u2022 True -- Automatically redraw the object or control after each change to its\nproperties.\n\u2022 False -- Do not redraw after each change.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If redraw is null, SetRedraw returns null.\nUsage\nBy default, PowerBuilder redraws a control after each change to properties that affect\nappearance. Use SetRedraw to turn off redrawing temporarily in order to avoid flicker and\nreduce redrawing time when you are making several changes to the properties of an object or\ncontrol. If the window is not visible, SetRedraw fails.\nPowerBuilder environment\nInherited from DragObject. For more details on use with PowerBuilder objects, see\nSection 2.4.766, \u201cSetRedraw\u201d in PowerScript Reference.\n9.181 SetRichTextAlign\nDescription\nSets the alignment value to use while editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.SetRichTextAlign ( Alignment sAlign )\nTable 9.392:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\nsAlign\nValue for specifying the alignment that you want to set for columns with the\nRichText edit style. Allowable values are:\nLeft!\nRight!\nCenter!\n"}
{"page": 868, "text": "Methods for the DataWindow Control\nPage 868\nArgument\nDescription\nJustified!\nReturn value\nReturns 0 if it succeeds and -1 if an error occurs. If the argument's value is null,\nSetRichTextAlign returns null.\n0 -- Success\n-1 -- No RichText column is being edited\nUsage\nYou can call this method from a button in a custom toolbar that you use to set display\ncharacteristics of columns with the RichText edit style.\nExamples\nThis example sets the alignment value for editing columns that have a RichText edit style:\nInteger ll_temp\nAlignment l_align\nl_align = Right!\nll_temp = dw_1.SetRichTextAlign(l_align)\nSee also\nGetRichTextAlign\nGetRichTextColor\nGetRichTextFaceName\nGetRichTextSize\nGetRichTextStyle\n9.182 SetRichTextColor\nDescription\nSets the color to use while editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.SetRichTextColor ( long color )\nTable 9.393:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncolor\nA long value specifying the color that you\nwant to set for editing columns with the\nRichText edit style\nReturn value\n"}
{"page": 869, "text": "Methods for the DataWindow Control\nPage 869\nReturns 0 if it succeeds and -1 if an error occurs. If the argument's value is null,\nSetRichTextColor returns null.\n0 -- Success\n-1 -- No RichText column is being edited\nUsage\nIf the color for columns with the RichText edit style is white, background transparency and\ngradient and text transparency will not work properly.\nYou can call this method from a button in a custom toolbar that you use to set display\ncharacteristics of columns with the RichText edit style.\nExamples\nThis example sets green as the current color to use for editing columns that have a RichText\nedit style:\nInteger l_rtn\nLong l_color\nl_color = RGB(0, 255, 0)\nl_rtn = dw_1.SetRichTextColor(l_color)\nSee also\nGetRichTextColor\nGetRichTextAlign\nGetRichTextFaceName\nGetRichTextSize\nGetRichTextStyle\n9.183 SetRichTextFaceName\nDescription\nSets the typeface to use while editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.SetRichTextFaceName ( string typeface )\nTable 9.394:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ntypeface\nA string value for the typeface that you want\nto set for editing columns with the RichText\nedit style\nReturn value\n"}
{"page": 870, "text": "Methods for the DataWindow Control\nPage 870\nReturns 0 if it succeeds and -1 if an error occurs. If the argument's value is null,\nSetRichTextFaceName returns null.\n0 -- Success\n-1 -- No RichText column is being edited\nUsage\nYou can call this method from a button in a custom toolbar that you use to set display\ncharacteristics of columns with the RichText edit style.\nExamples\nThis example sets Arial as the current typeface to use for editing columns that have a\nRichText edit style:\nInteger li_rtn\nli_rtn = dw_1.SetRichTextFaceName(\"Arial\")\nSee also\nGetRichTextFaceName\nGetRichTextAlign\nGetRichTextColor\nGetRichTextSize\nGetRichTextStyle\n9.184 SetRichTextSize\nDescription\nSets the size of the font to use while editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.SetRichTextSize ( long size )\nTable 9.395:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\nsize\nA long value for the point size of the font that you want to set for editing\ncolumns with the RichText edit style\nReturn value\nReturns 0 if it succeeds and -1 if an error occurs. If the argument's value is null,\nSetRichTextSize returns null.\n0 -- Success\n-1 -- No RichText column is being edited\nUsage\n"}
{"page": 871, "text": "Methods for the DataWindow Control\nPage 871\nYou can call this method from a button in a custom toolbar that you use to set display\ncharacteristics of columns with the RichText edit style.\nExamples\nThis example sets 16 as the current point size to use for editing columns that have a RichText\nedit style:\nInteger li_rtn\nli_rtn = dw_1.SetRichTextSize(16)\nSee also\nGetRichTextSize\nGetRichTextAlign\nGetRichTextColor\nGetRichTextFaceName\nGetRichTextStyle\n9.185 SetRichTextStyle\nDescription\nSets the style of the font to use while editing columns with the RichText edit style.\nApplies to\nDataWindow control\nSyntax\nInteger dwcontrol.SetRichTextStyle ( boolean bold, boolean underline, boolean\n italic, boolean strikeout, )\nTable 9.396:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\nbold\nA boolean for the bold style\nunderline\nA boolean for the underlined style\nitalic\nA boolean for the italic style\nstrikeout\nA boolean for the strikeout style\nReturn value\nReturns 0 if it succeeds and -1 if an error occurs. If the argument's value is null,\nSetRichTextStyle returns null.\n0 -- Success\n-1 -- No RichText column is being edited\nUsage\nYou can call this method from a button in a custom toolbar that you use to set display\ncharacteristics of columns with the RichText edit style.\n"}
{"page": 872, "text": "Methods for the DataWindow Control\nPage 872\nExamples\nThis example sets an underlined, bolded font as the current font for editing columns with a\nRichText edit style:\nInteger li_rtn\nli_rtn = dw_1.SetRichTextStyle(true, false, false, &\n     false)\nSee also\nGetRichTextStyle\nGetRichTextAlign\nGetRichTextColor\nGetRichTextFaceName\nGetRichTextSize\n9.186 SetRow\nDescription\nSets the current row in a DataWindow control or DataStore.\nApplies to\nTable 9.397:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetRow ( long row )\nTable 9.398:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow in\nwhich you want to set the current row\nrow\nThe row you want to make current\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If row is less than 1 or greater than the\nnumber of rows, SetRow fails.\nIf any argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nSetRow moves the cursor to the current row but does not scroll the DataWindow control or\nDataStore.\n"}
{"page": 873, "text": "Methods for the DataWindow Control\nPage 873\nEvents\nSetRow can trigger these events:\nItemChanged\nItemError\nItemFocusChanged\nRowFocusChanged\nAvoiding infinite loops\nNever call SetRow in the ItemChanged event or any of the other events listed above.\nBecause SetRow can trigger these events, such a recursive call can cause a stack fault.\nExamples\nThis statement sets the current row in dw_employee to 15:\ndw_employee.SetRow(15)\nThis example unhighlights all highlighted rows, if any. It then sets the current row to 15 and\nhighlights it. If row 15 is not visible, you can use ScrollToRow instead of SetRow:\ndw_employee.SelectRow(0, false)\ndw_employee.SetRow(15)\ndw_employee.SelectRow(15, true)\nSee also\nGetColumn\nGetRow\nSetColumn\nSetRowFocusIndicator\n9.187 SetRowFocusIndicator\nDescription\nSpecifies the visual indicator that identifies the current row in the DataWindow control. You\ncan use the standard dotted-line rectangle of Windows, PowerBuilder's pointing hand, or an\nimage stored in a PowerBuilder Picture control.\nApplies to\nTable 9.399:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\ninteger dwcontrol.SetRowFocusIndicator ( RowFocusInd focusindicator \n   {, integer xlocation {, integer ylocation } } )\ninteger dwcontrol.SetRowFocusIndicator ( Picture picturename  \n"}
{"page": 874, "text": "Methods for the DataWindow Control\nPage 874\n   {, integer xlocation {, integer ylocation } } )\nTable 9.400:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or child DataWindow in which\nyou want to set the row focus indicator.\nfocusindicator or\npicturename\nThe visual indicator for the current row. In PowerBuilder, a value of\nthe RowFocusInd enumerated datatype or the name of a PowerBuilder\nPicture control whose image you want to use.\nFor a list of valid enumerated datatype values, see RowFocusInd.\nxlocation\n(optional)\nThe x coordinate in PowerBuilder units of the position of the hand or\nbitmap relative to the upper-left corner of the row.\nylocation\n(optional)\nThe y coordinate in PowerBuilder units of the position of the hand or\nbitmap relative to the upper-left corner of the row.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetRowFocusIndicator returns null.\nUsage\nSets the current row indicator in dwcontrol to focusindicator. If you select Hand or a Picture\ncontrol as the indicator, PowerBuilder displays the indicator at the left side of the body of\nthe DataWindow unless you specify location coordinates (xlocation, ylocation). The default\nlocation is 0,0 (the left side of the body of the DataWindow control).\nYou must assign a DataWindow object to the DataWindow control before you call\nSetRowFocusIndicator. If you change the DataWindow object at runtime, you must call\nSetRowFocusIndicator again to reset the indicator.\nPictures as row focus indicators\nTo use a picture as the row focus indicator, set up the Picture control in the Window\npainter. Place the Picture control in the window that contains the DataWindow control\nand then reference it in the SetRowFocusIndicator method. You can hide the picture\nor place it under the DataWindow control so the user does not see the control itself.\nExamples\nThis statement sets the row focus indicator in dw_employee to the pointing hand:\ndw_employee.SetRowFocusIndicator(Hand!)\nIf p_arrow is a Picture control in the window, the following statement sets the row focus\nindicator in dw_employee to p_arrow:\ndw_employee.SetRowFocusIndicator(p_arrow)\nSee also\nGetRow\nSetRow\n"}
{"page": 875, "text": "Methods for the DataWindow Control\nPage 875\n9.188 SetSelfLink (obsolete)\nDescription\nSpecifies the URL and page parameters for the current page of the Web DataWindow.\nObsolete method\nSetSelfLink is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.401:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcomponent.SetSelfLink ( string selflink, string selflinkargs )\nTable 9.402:\nArgument\nDescription\ndwcomponent A reference to an Web DataWindow server component.\nselflink\nThe URL for the current page. It cannot include parameters. Parameters may\nbe added when HTML is generated.\nSelflink is used to generate URLs for navigation buttons that obtain\nadditional rows from the result set and for other buttons that reload the page,\nsuch as Update and Retrieve.\nSets the value of the HTMLGen.SelfLink property for the DataWindow\nobject associated with the server component.\nselflinkargs\nA string in the form:\nargname='exp'{ | argname = 'exp' } ... \nArgname is a page parameter to be passed to the server.\nExp is a DataWindow string expression that is evaluated, converted using\nURL encoding, and used as the value of argname in generated HTML.\nThe evaluated selflinkargs expressions are included in the generated HTML\nas hidden fields. The arguments supply information, such as retrieval\narguments, that the server needs to render additional pages of the result set.\nReturn value\nReturns an empty string if successful and the syntax error message from the Modify method\nif it fails.\nUsage\nThis method calls the Modify method of the server component's DataStore to set the property.\n"}
{"page": 876, "text": "Methods for the DataWindow Control\nPage 876\nReason for self-link information\nThe first time the client browser requests the page template, it can pass page specific\ninformation using GET or POST and the page can use those values in the server-side scripts.\nHowever, when the page is reloaded because of user interactions with the Web DataWindow,\nthat information will not be passed to the page automatically.\nTo make the information available, you specify a selflinkargs string that becomes page\nparameters in the reloaded page. Typically, you would use self-link parameters to provide:\n\u2022 Login information from another page\n\u2022 DataWindow object name\n\u2022 Retrieval arguments for the DataWindow object\nGetting the URL for the page\nTo correctly reload the page in response to user actions, the server component needs to know\nthe URL of the page template. You can get this information from the name property of the\ndocument object header or the SCRIPT_NAME server variable.\nIn a JSP page, you must parse the return value from a request.getRequestURI call:\nString URI = request.getRequestURI();\nString [] myArray = URI.split (\"/\");\nString pageName = myArray [myArray.length-1];\nIn ASP, use the ServerVariables method of the Request object:\nvar pageName =Request.ServerVariables( \"SCRIPT_NAME\" );\nSelf-link arguments for SetSelfLink\nThe syntax for specifying self-link arguments is:\npageparam='expression'|pageparam='expression'\nThe expression is a DataWindow expression that is evaluates to a string. Usually, you will be\npassing constant string values that have already been passed to the page as page parameters.\nThe expression is enclosed in quotes, and if the value is a constant, it must also be enclosed\nin quotes. For example, if a page parameter has the value Johnson, the value of the expression\nmust be enclosed in two sets of quote marks: '\"Johnson\"'.\nTo get the value from the current Logname parameter, which is already defined for the page,\nyou build the expression using the Logname page parameter. The single quotes and inner\ndouble quotes are embedded in the expression. The current value is inserted between the\nquotes:\nString logname = (String)    request.getParameter(\"Logname\");\nString linkargs = \"logname='\\\"\" + logname + \"\\\"'\";\nIf the DataWindow object requires retrieval arguments, they must be provided to the reloaded\npage in selflinkargs. For an example of using SetSelfLink for setting up retrieval arguments\nas page parameters, see Retrieve.\nExamples\n"}
{"page": 877, "text": "Methods for the DataWindow Control\nPage 877\nThis server-side script specifies hyperlink information for the page. The value of the empid\ncolumn is stored in the page parameter EMPID:\nwebDW.SetSelfLink(\"mydwpage.html\", \"EMPID = 'String(empid)'\");\nThis hyperlink information refers to the JSP page by name. The page is regenerated by\ncalling the template again. There are no link arguments:\nwebDW.SetSelfLink(\"salesrpt.jsp\", \"\");\nThis ASP example uses the ServerVariables method of the Request object to get the\nSCRIPT_NAME variable:\nvar pageName = Request.ServerVariables( \"SCRIPT_NAME\" );\nwebDW.SetSelfLink(pageName,\"\");\nIn JSP you must parse the return value from a request.getRequestURI call. This example also\nsets up a page parameter for the reloaded page using the page parameter Logname:\nString URI = request.getRequestURI();\nString [] myArray = URI.split (\"/\");\nString pageName = myArray [myArray.length-1];\nString logname = (String)    request.getParameter(\"Logname\");\nString linkargs = \"Logname='\\\"\" + logname + \"\\\"'\";\nwebDW.SetSelfLink( pageName, linkargs);\nSee also\nGenerate\nModify\nSetAction\nHTMLGen.property\n9.189 SetServerServiceClasses (obsolete)\nDescription\nTells the server component to trigger custom events defined in user objects for data\nvalidation. These user objects, referred to as service classes, must be defined in the PBL or\nPBD containing the DataWindow object for the server component.\nObsolete method\nSetServerServiceClasses is obsolete and should not be used, because the Web\nDataWindow technology is obsolete.\nApplies to\nTable 9.403:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\n"}
{"page": 878, "text": "Methods for the DataWindow Control\nPage 878\nshort dwcomponent.SetServerServiceClasses ( string serviceclassnames )\nTable 9.404:\nArgument\nDescription\ndwcomponent A reference to a Web DataWindow server component.\nserviceclassnames\nA string whose value is a list of PowerBuilder custom class user objects. The\nuser objects must be in the PBL or PBD containing the DataWindow for the\nserver component. Separate user object names with a semicolon.\nReturn value\nReturns 1 if it succeeds and -1 if a specified service class does not exist.\nUsage\nThe main use of service classes is to provide data validation using server-side business logic.\nService classes implement one or more user-defined events with these names and signatures:\nlong dberror ( long sqldbcode,  string sqlerrtext,  string sqlsyntax,  dwbuffer\n buffer,  long row,  datastore ds )\nlong retrievestart ( datastore ds )\nlong retrieveend ( long rowcount,  datastore ds )\nlong sqlpreview ( sqlpreviewfunction request,  sqlpreviewtype sqltype,  string\n sqlsyntax,  dwbuffer buffer,  long row,  datastore ds )\nlong updatestart ( datastore ds )\nlong updateend ( long rowsinserted,  long rowsupdated,  long rowsdeleted, \n datastore ds )\nlong htmlcontextapplied ( string action,  datastore ds )\nThe custom events can use the same return codes as the corresponding standard DataWindow\nevents documented in DataWindow Events By setting a return code, a custom event can\ncause the event action to be canceled in the server component.\nWhen the standard DataWindow event occurs in the server component, the component\ntriggers the custom event in each of the listed service classes. One or more of the components\ncan implement the event. A service class only needs to implement the events whose outcome\nit wants to influence. Any of the service classes can set an event return code that cancels the\nevent action in the server component.\nRuntime errors\nInstantiated service objects run in the same objects space as the server component. If a\nruntime error occurs in the service object, it could cause HTML generation to fail.\nExamples\nThis JavaScript example for a server-side script specifies a list of service classes that\nimplement events:\ndwMine.SetServerServiceClasses ( \"uo_update;uo_retrieve;uo_dberror\" );\nSee also\nEvents:\nHTMLContextApplied\nDBError\n"}
{"page": 879, "text": "Methods for the DataWindow Control\nPage 879\nRetrieveStart\nRetrieveEnd\nSQLPreview\nUpdateStart\nUpdateEnd\n9.190 SetServerSideState (obsolete)\nDescription\nTells the server component whether to attempt to maintain its state by saving the retrieved\ndata and leaving the transaction open. Keeping the retrieved data means that the component\ndoes not need to reconnect and retrieve data every time a method is called.\nObsolete method\nSetServerSideState is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.405:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\nstring dwcomponent.SetServerSideState ( boolean maintainstate )\nTable 9.406:\nArgument\nDescription\ndwcomponent\nA reference to a Web DataWindow server component\nmaintainstate\nSpecifies whether the server will attempt to maintain its state between\nmethod calls. Values are:\n\u2022 True -- The server component will keep the result set and keep the\ntransaction open if possible.\n\u2022 False -- (Default) The result set is not saved and the server component\nuses information passed back from the client to retrieve the result set\nagain and remember any uncommitted changes.\nReturn value\nReturns an empty string if it succeeds and an error message from server if it fails.\nUsage\nHow state is maintained for a stateless component\n"}
{"page": 880, "text": "Methods for the DataWindow Control\nPage 880\nThe Web DataWindow can run in a fully stateless server environment. Variables in the\nWeb page keep information about the rows being viewed and changes the user makes and\nthis information is communicated to the server component as needed so the component can\nrestore its state each time it is called. Restoring its state includes retrieving data from the\ndatabase each time the page is reloaded, including each time the user navigates to another\npage.\nPerformance impact of a stateless component\nOperating in a stateless mode minimizes use of server resources but can decrease\nperformance. The client maintains the state of the server component in string form and the\ninformation is sent back and forth with every request. Also, when state is not maintained\non the server, the component must connect to the database and retrieve data each time it is\ncalled. If the component server does not do connection caching, response time for the client\ncould be very slow.\nMaintaining state on the server\nYou can increase performance by maintaining state on the server. To maintain state, the page\nserver's session object keeps a reference to the server component.\nMaintaining state on the server will provide faster response time if the same component\nis accessed again. However, it also increases the server resources used for each client\nconnection.\nTo minimize impact on server resources, a short timeout on a session lets the server get rid of\na component that might not be requested again. If the component is called again, its state can\nbe restored from the client state information.\nYou can also increase performance by calling Update frequently.\nExamples\nThis example specifies that the server component should maintain state:\nwebDW.SetServerSideState( true );\nSee also\nUpdate\n9.191 SetSort\nDescription\nSpecifies sort criteria for a DataWindow control or DataStore.\nApplies to\nTable 9.407:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\n"}
{"page": 881, "text": "Methods for the DataWindow Control\nPage 881\ninteger dwcontrol.SetSort ( string format )\nTable 9.408:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\nformat\nA string whose value is valid sort criteria for the DataWindow (see Usage).\nThe expression includes column names or numbers.\nA column number must be preceded by a pound sign (#). If format is null,\nPowerBuilder prompts you to enter the sort criteria.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nA DataWindow object can have sort criteria specified as part of its definition. SetSort\noverrides the definition, providing new sort criteria for the DataWindow. However, it does\nnot actually sort the rows. Call the Sort method to perform the actual sorting.\nWhen the Retrieve method retrieves data for the DataWindow, PowerBuilder applies the sort\ncriteria that were defined for the DataWindow object, if any.\nThe sort criteria for a column have one of the forms shown in the following table, depending\non whether you specify the column by name or number.\nTable 9.409: Examples for specifying sort order\nSyntax for sort order\nExamples\ncolumnname order\n\"emp_lname A\"\n\"emp_lname asc, dept_id desc\"\n# columnnumber order\n\"#3 A\"\nThe following table shows the recognized values for order. These values are case insensitive.\nFor example, as, s, AS, or S all specify a case-sensitive sort in ascending order.\nTable 9.410: Recognized values for sort order\nOrder value\nResulting sort order\na, asc, ascending, ai, i\nCase-insensitive ascending\nd, desc, descending, di\nCase-insensitive descending\nas, s\nCase-sensitive ascending\nds\nCase-sensitive descending\nIf you omit order or specify an unrecognized string, the sort is performed in ascending order\nand is case insensitive. You can specify secondary sorting by specifying criteria for additional\ncolumns in the format string. Separate each column specification with a comma.\nIf you omit order or specify an unrecognized string, the Describe function may obtain the\nincorrect sort criteria. It is recommended that you set the order value to \"A\" or \"D\" (asc,\nascending, desc, or descending are not recommended) if you want the Describe function\n"}
{"page": 882, "text": "Methods for the DataWindow Control\nPage 882\nto return the correct sort criteria. For example use setsort(\"id A,name A\") instead of\nsetsort(\"id,name\").\nTo let the user specify the sort criteria for a DataWindow control, you can pass a null string\nto the SetSort method. PowerBuilder displays the Specify Sort Columns dialog with the sort\nspecifications blank. Then you can call Sort to apply the user's criteria. You cannot pass a\nnull string to the SetSort method for a DataStore object.\nExamples\nThis statement sets the sort criteria for dw_employee so emp_status is sorted in ascending\norder and within each employee status, emp_salary is sorted in descending order:\ndw_employee.SetSort(\"emp_status asc, emp_salary desc\")\nIf emp_status is column 1 and emp_salary is column 5 in dw_employee, then the following\nstatement is equivalent to the sort specification above:\ndw_employee.SetSort(\"#1 A, #5 D\")\nThis example defines sort criteria to sort the status column in ascending order and the salary\ncolumn in descending order within status. Both sorts are case-sensitive. After assigning the\nsort criteria to the DataWindow control dw_emp, it sorts dw_emp:\nstring newsort\nnewsort = \"emp_status as, emp_salary ds\"\ndw_emp.SetSort(newsort)\ndw_emp.Sort( )\nThe following example sets the sort criteria for dw_main to null, causing PowerBuilder to\ndisplay the Specify Sort Columns dialog so that the user can specify sort criteria. The Sort\nmethod applies the criteria the user specifies:\nstring null_str\nSetNull(null_str)\ndw_main.SetSort(null_str)\ndw_main.Sort( )\nSee also\nSort\n9.192 SetSQLPreview\nDescription\nSpecifies the SQL statement for a DataWindow control or DataStore that PowerBuilder is\nabout to send to the database.\nApplies to\nTable 9.411:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\n"}
{"page": 883, "text": "Methods for the DataWindow Control\nPage 883\ninteger dwcontrol.SetSQLPreview ( string sqlsyntax )\nTable 9.412:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow\nsqlsyntax\nA string whose value is valid SQL syntax for the SQL statement that will be\nsubmitted to the database server\nReturn value\nReturns 1 if it succeeds and 0 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nUsage\nUse SetSQLPreview to modify syntax before you update the database with changes in the\nDataWindow object.\nTo obtain the current SQL statement in the SQLPreview event, look at the sqlsyntax\nargument.\nWhen to call SetSQLPreview\nCall this method only in the script for the SQLPreview event.\nExamples\nThis statement sets the current SQL string for the DataWindow dw_1:\ndw_1.SetSQLPreview( &\n      \"INSERT INTO billings VALUES(100, \" + &\n      String(Current_balance) + \")\")\nSee also\nGetSQLPreview\nGetUpdateStatus\n9.193 SetSQLSelect\nDescription\nSpecifies the SQL SELECT statement for a DataWindow control or DataStore.\nApplies to\nTable 9.413:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetSQLSelect ( string statement )\n"}
{"page": 884, "text": "Methods for the DataWindow Control\nPage 884\nTable 9.414:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control, DataStore, or child DataWindow\nfor which you want to change the SELECT statement.\nstatement\nA string whose value is the SELECT statement for the DataWindow\nobject. The statement must structurally match the current SELECT\nstatement (that is, it must return the same number of columns, the\ncolumns must be the same datatype, and the columns must be in the same\norder).\nReturn value\nSetSQLSelect returns 1 if it succeeds and -1 if the SELECT statement cannot be changed. If\nany argument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nUse SetSQLSelect to dynamically change the SQL SELECT statement for a DataWindow\nobject in a script.\nIf the DataWindow is updatable, PowerBuilder validates the SELECT statement against the\ndatabase and DataWindow column specifications when you call the SetSQLSelect method.\nEach column in the SQL SELECT statement must match the column type in the DataWindow\nobject. The statement is validated only if the DataWindow object is updatable.\nYou must use the SetTrans or SetTransObject method to set the transaction object before the\nSetSQLSelect method will execute.\nIf the new SELECT statement has a different table name in the FROM clause and the\nDataWindow object is updatable, then PowerBuilder must change the update information for\nthe DataWindow object. PowerBuilder assumes the key columns are in the same positions\nas in the original definition. The following conditions would make the DataWindow not\nupdatable:\n\u2022 There is more than one table in the FROM clause\n\u2022 A DataWindow update column is a computed column in the SELECT statement\nIf changing the SELECT statement makes the DataWindow object not updatable, the\nDataWindow control cannot execute an Update method call for the DataWindow object in the\nfuture.\nLimitations to using SetSQLSelect\nUse SetSQLSelect only if the data source for the DataWindow object is a SQL\nSELECT statement without retrieval arguments and you want PowerBuilder to\nmodify the update information for the DataWindow object:\ndw_1.Modify(\"DataWindow.Table.Select='select...'\")\nModify does not verify the SELECT statement or change the update information, so\nit is faster but more susceptible to user error. Although you can use Modify when\narguments are involved, this is not recommended because of the lack of verification.\n"}
{"page": 885, "text": "Methods for the DataWindow Control\nPage 885\nExamples\nIf the current SELECT statement for dw_emp retrieves no rows, the following statements\nreplace it with the syntax in NewSyn:\nstring OldSyn, NewSyn\nOldSyn = &\n      'SELECT employee.EMP_Name FROM employee' &\n         + 'WHERE salary < 70000'\nNewSyn = 'SELECT employee.EMP_Name FROM employee' &\n      + 'WHERE salary < 100000'\n \nIF dw_emp.Retrieve( ) = 0 THEN\n      dw_emp.SetSQLSelect(NewSyn)\n      dw_emp.Retrieve()\nEND IF\nSee also\nModify\nRetrieve\nSetTrans\nSetTransObject\nUpdate\n9.194 SetTabOrder\nDescription\nChanges the tab sequence number of a column in a DataWindow control to the specified\nvalue.\nApplies to\nTable 9.415:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject\nSyntax\nPowerBuilder\ninteger dwcontrol.SetTabOrder ( integer column, integer tabnumber )\ninteger dwcontrol.SetTabOrder ( string column, integer tabnumber )\nTable 9.416:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or child DataWindow in which you\nwant to define the tab order.\ncolumn\nThe column to which you are assigning a tab value. Column can be a\ncolumn number or a column name. The column number is the number of the\ncolumn as it is listed in the Column Specification view of the DataWindow\npainter -- not necessarily the number of the column in the Design view.\n"}
{"page": 886, "text": "Methods for the DataWindow Control\nPage 886\nArgument\nDescription\ntabnumber\nThe tab sequence number (0 - 9999) you want to assign to the DataWindow\ncolumn. 0 removes the column from the tab order, which makes it read-only.\nReturn value\nReturns the previous tab value of the column if it succeeds and -1 if an error occurs. If any\nargument's value is null, in PowerBuilder and JavaScript the method returns null.\nUsage\nYou can change a column in a DataWindow object to read-only by changing the tab sequence\nnumber of the column to 0.\nExamples\nThis statement changes column 4 of dw_Employee to read-only:\ndw_Employee.SetTabOrder(4, 0)\nThese statements change column 4 of dw_employee to read-only and later restore the column\nto its original tab value with read/write status:\ninteger OldTabNum\n// Set OldTabNum to the previous tab order value\nOldTabNum = dw_employee.SetTabOrder(4, 0)\n... // Some processing\n// Return column 4 to its previous tab value.\ndw_employee.SetTabOrder(4, OldTabNum)\n9.195 SetText\nDescription\nReplaces the text in the edit control over the current row and column in a DataWindow\ncontrol or DataStore.\nApplies to\nTable 9.417:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetText ( string text )\nTable 9.418:\nArgument\nDescription\ndwcontrol\nThe name of the DataWindow control or DataStore in which you want to\nspecify the text in the current row and column.\ntext\nA string whose value you want to put in the current row and column. The\nvalue must be compatible with the datatype of the column.\n"}
{"page": 887, "text": "Methods for the DataWindow Control\nPage 887\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nUsage\nSetText only sets the value in the edit control. When the user changes focus to another row\nand column, PowerBuilder accepts the text as the item in the row and column.\nUsing SetText in the ItemChanged and ItemError events\nIn the ItemChanged or ItemError event, PowerBuilder or your own script might determine\nthat the value in the edit control is invalid or that it needs further processing. You can call\nSetItem to specify a new item value for the row and column.\nIf you want the user to have an opportunity to enter a different value, after calling SetItem\nyou can call SetText to put that same value in the edit control so that the user sees the value\ntoo. You can also call SetText without calling SetItem. In the script, use a return code that\nrejects the value in the edit control, avoiding further processing, but does not allow the focus\nto change. To retain focus and display an error message, return 1 for ItemChanged or 0 for\nItemError.\nWhen you use a return code that rejects the data the user entered but allows the focus to\nchange (a return code of 2 in the script for the ItemChanged event or 3 in the ItemError\nevent), you do not need to call SetText because the value set with SetItem displays when the\nfocus changes.\nExamples\nThese statements replace the value of the current row and column in dw_employee with Tex\nand then call AcceptText to accept and move Tex into the current column. (Do not use this\ncode in the ItemChanged or ItemError event because it calls AcceptText.)\ndw_employee.SetText(\"Tex\")\ndw_employee.AcceptText()\nThis example converts a number that the user enters in the column called credit to a negative\nvalue and sets both the item and the edit control's text to the negative number. This code is\nthe script for the ItemChanged event. The data argument holds the newly entered value:\ninteger negative\n \nIF dwo.Name = \"credit\" THEN\n      IF Integer(data) > 0 THEN\n         // Convert to negative if it's positive\n         negative = Integer(data) * -1\n \n         // Change the primary buffer value.\n         This.SetItem(row, \"credit\", negative)\n \n         // Change the value in the edit control\n         This.SetText(String(negative))\n         RETURN 1\n      END IF\nEND IF\nSee also\nAcceptText\n"}
{"page": 888, "text": "Methods for the DataWindow Control\nPage 888\nGetText\nSetItem\n9.196 SetTrans\nDescription\nSets the values in the internal transaction object for a DataWindow control or DataStore to\nthe values from the specified transaction object. The transaction object supplies connection\nsettings, such as the database name.\nApplies to\nTable 9.419:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetTrans ( transaction transaction )\nTable 9.420:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow in\nwhich you want to set the values of the internal transaction object\ntransaction\nThe name of the transaction object from which you want dwcontrol to get\nvalues\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, the method\nreturns null.\nUsage\nIn most cases, use the SetTransObject method to specify the transaction object. It is more\nefficient and allows you to control when changes get committed to the database.\nSetTrans copies the values from a specified transaction object to the internal transaction\nobject for the DataWindow control or DataStore. When you use SetTrans in a script, the\nDataWindow uses its internal transaction object and automatically connects and disconnects\nas needed; any errors that occur cause an automatic rollback. With SetTrans, you do\nnot specify SQL statements, such as CONNECT, COMMIT, and DISCONNECT. The\nDataWindow control connects and disconnects after each Retrieve or Update function.\nUse SetTransObject with composite DataWindows\nYou must use SetTransObject with DataWindow objects that use the Composite\npresentation style. Composite DataWindows are containers for other DataWindow\nobjects and do not have any internal transaction information of their own.\n"}
{"page": 889, "text": "Methods for the DataWindow Control\nPage 889\nIf you use SetTrans with each nested DataWindow in a composite DataWindow,\ndisconnect does not occur until the PowerBuilder session ends.\nUse SetTrans when you want PowerBuilder to manage the database connections\nautomatically because you have a limited number of available connections or expect\nto use the application from a remote location. SetTrans is appropriate when you are\nonly retrieving data and do not need to hold database locks on records the user is\nmodifying. For better performance, however, you should use SetTransObject.\nDBMS connection settings\nYou must set the parameters required to connect to your DBMS in the transaction object\nbefore you can use the transaction object to set the DataWindow's internal transaction object\nand connect to the database.\nUpdating more than one table\nWhen you use SetTrans to specify the transaction object, you cannot update multiple\nDataWindow objects or multiple tables within one object.\nExamples\nThis statement sets the values in the internal transaction object for dw_employee to the values\nin the default transaction object SQLCA:\ndw_employee.SetTrans(SQLCA)\nThe following statements change the database type and password of dw_employee. The\nfirst two statements create the transaction object emp_TransObj. The next statement uses\nthe GetTrans method to store the values of the internal transaction object for dw_employee\nin emp_TransObj. The next two statements change the database type and password. The\nSetTrans method assigns the revised values to dw_employee:\n// Name the transaction object.\ntransaction emp_TransObj\n \n// Create the transaction object.\nemp_TransObj = CREATE transaction\n \n// Fill the new object with the original values.\ndw_employee.GetTrans(emp_TransObj)\n// Change the database type.\nemp_TransObj.DBMS =\"Sybase\"\n// Change the password.\nemp_TransObj.LogPass = \"cam2\"\n \n// Put the revised values into the\n// DataWindow transaction object.\ndw_employee.SetTrans(emp_TransObj)\nSee also\nGetTrans\nSetTransObject\n9.197 SetTransObject\nDescription\n"}
{"page": 890, "text": "Methods for the DataWindow Control\nPage 890\nCauses a DataWindow control or DataStore to use a programmer-specified transaction\nobject. The transaction object provides the information necessary for communicating with the\ndatabase.\nApplies to\nTable 9.421:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetTransObject ( transaction transaction )\nTable 9.422:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow in\nwhich you want to use a programmer-specified transaction object rather\nthan the DataWindow control's internal transaction object\ntransaction\nThe name of the transaction object you want to use in the dwcontrol\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nUsage\nTransaction objects in PowerBuilder\nA programmer-specified transaction object gives you more control over the database\ntransactions and provides efficient application performance. You control the database\nconnection by using SQL statements such as CONNECT, COMMIT, and ROLLBACK.\nSince the DataWindow control does not have to connect to the database for every\nRETRIEVE and UPDATE statement, these statements run faster. You are responsible for\ncommitting and rolling back transactions after you call the Update method, using code like\nthe following:\nIF dw_Employee.Update()>0 THEN\n      COMMIT USING emp_transobject;\nELSE\n      ROLLBACK USING emp_transobject;\nEND IF\nYou must set the parameters required to connect to your DBMS in the transaction object\nbefore you can use the transaction object to connect to the database. PowerBuilder provides\na global transaction object called SQLCA, which is all you need if you are connecting to one\ndatabase. You can also create additional transaction objects, as shown in the examples.\nTo use SetTransObject, write code that does the following tasks:\n"}
{"page": 891, "text": "Methods for the DataWindow Control\nPage 891\n1. Set up the transaction object by assigning values to its fields (usually in the application's\nOpen event).\n2. Connect to the database using the SQL CONNECT statement and the transaction object\n(in the Open event for the application or window).\n3. Call SetTransObject to associate the transaction object with the DataWindow control or\nDataStore (usually in the window's Open event).\n4. Check the return value from the Update method and follow it with a SQL COMMIT or\nROLLBACK statement, as appropriate.\nIf you change the DataWindow object associated with the DataWindow control (or\nDataStore) or if you disconnect and reconnect to a database, the connection between the\nDataWindow control (or DataStore) and the transaction object is severed. You must call\nSetTransObject again to reestablish the connect.\nSetTransObject versus SetTrans\nIn most cases, use the SetTransObject method to specify the transaction object\nbecause it is efficient and gives you control over when transactions are committed.\nThe SetTrans method provides another way of managing the database connection.\nSetTrans, which sets transaction information in the internal transaction object for the\nDataWindow control or DataStore, manages the connection automatically. You do not\nexplicitly connect to the database; the DataWindow connects and disconnects for each\ndatabase transaction, which is less efficient but necessary in some situations.\nFor more information, see SetTrans.\nExamples\nThis statement causes dw_employee to use the default transaction object SQLCA:\ndw_employee.SetTransObject(SQLCA)\nThis statement causes dw_employee to use the programmer-defined transaction object\nemp_TransObj. In this example, emp_TransObj is an instance variable, but your script must\nallocate memory for it with the CREATE statement before you use it:\nemp_TransObj = CREATE transaction\n... // Assign values to the transaction object\ndw_employee.SetTransObject(emp_TransObj)\nThis example has two parts. The first script, for the application's Open event, reads database\nparameters from an initialization file called MYAPP.INI and stores the values in the default\ntransaction object (SQLCA). The Database section of MYAPP.INI has the same keywords\nas PowerBuilder's own PB.INI file. The parameters shown are for a SQL Server or Oracle\ndatabase. The second script, for the window's Open event, establishes a connection and\nretrieves data from the database.\nThe application's Open event script populates SQLCA:\nSQLCA.DBMS = ProfileString(\"myapp.ini\", &\n      \"database\", \"DBMS\", \" \")\nSQLCA.Database = ProfileString(\"myapp.ini\", &\n"}
{"page": 892, "text": "Methods for the DataWindow Control\nPage 892\n      \"database\", \"Database\", \" \")\nSQLCA.LogId = ProfileString(\"myapp.ini\", &\n      \"database\", \"LogId\", \" \")\nSQLCA.LogPass = ProfileString(\"myapp.ini\", &\n      \"database\", \"LogPassword\", \" \")\nSQLCA.ServerName = ProfileString(\"myapp.ini\", &\n      \"database\", \"ServerName\", \" \")\nSQLCA.UserId = ProfileString(\"myapp.ini\", &\n      \"database\", \"UserId\", \" \")\nSQLCA.DBPass = ProfileString(\"myapp.ini\", &\n      \"database\", \"DatabasePassword\", \" \")\nSQLCA.lock = ProfileString(\"myapp.ini\", &\n      \"database\", \"lock\", \" \")\nThe Open event script for the window that contains the DataWindow control connects to the\ndatabase, assigns the transaction object to the DataWindow, and retrieves data:\nlong RowsRetrieved\nstring LastName\n \n// Connect to the database.\nCONNECT USING SQLCA;\n \n// Test whether the connect succeeded.\nIF SQLCA.SQLCode <> 0 THEN\n      MessageBox(\"Connect Failed\", &\n         \"Cannot connect to database \" &\n         + SQLCA.SQLErrText)\n      RETURN\nEND IF\n \n// Set the transaction object to SQLCA.\ndw_employee.SetTransObject(SQLCA)\n \n// Retrieve the rows.\nLastName = ...\nRowsRetrieved = dw_employee.Retrieve(LastName)\n// Test whether the retrieve succeeded.\nIF RowsRetrieved < 0 THEN\n      MessageBox(\"Retrieve Failed\", &\n         \"Cannot retrieve data from the database.\")\nEND IF\nSee also\nGetTrans\nSetTrans\n9.198 SetValidate\nDescription\nSets the input validation rule for a column in a DataWindow control or DataStore.\nApplies to\nTable 9.423:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\n"}
{"page": 893, "text": "Methods for the DataWindow Control\nPage 893\nSyntax\nPowerBuilder\ninteger dwcontrol.SetValidate ( string column, string rule )\ninteger dwcontrol.SetValidate ( integer column, string rule )\nTable 9.424:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\ncolumn\nThe column for which you want to set the input validation rule. Column can\nbe a column number or a column name.\nrule\nA string whose value is the validation rule for validating the data.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nUsage\nValidation rules are boolean expressions that usually compare the value in the column's edit\ncontrol to some other value. When data the user enters fails to meet the criteria established in\nthe validation rule, an ItemError event occurs.\nYou can specify validation rules in the Database painter or the DataWindow painter,\nand you can change the rules in scripts using SetValidate. A validation rule can include\nany DataWindow painter function. For more information, see Section 6.5.11, \u201cDefining\nvalidation rules\u201d in Users Guide.\nIf you want to change a column's validation rule temporarily, you can use GetValidate to get\nand save the current rule. To include the value the user entered in the validation rule, use the\nGetText method. You can compare its return value to the validation criteria.\nIf the validation rule contains numbers, the DataWindow expects the numbers in U.S. format.\nIn PowerBuilder, be aware that the String function formats numbers using the current system\nsettings. If you use it to build the rule, specify a display format that produces U.S. notation.\nExamples\nThe following assigns a validation rule to the current column in dw_employee. The rule\nensures that the data entered is greater than zero:\ndw_employee.SetValidate(dw_employee.GetColumn(), &\n      \"Number(GetText( )) > 0\")\nThe following assigns a validation rule to the current column in dw_employee. The rule\nchecks that the value entered is less than the value in the Full_Price column:\ndw_employee.SetValidate(dw_employee.GetColumn(), &\n      \"Number(GetText( )) < Full_Price\")\nThis example defines a new validation rule for the column emp_state in the DataWindow\ncontrol dw_employee. The new rule is [A-Z]+ , meaning the data in emp_state must be\nall uppercase characters. The text pattern must be enclosed in quotes within the quoted\nvalidation rule. The embedded quotes are specified with ~\". The script saves the old rule,\n"}
{"page": 894, "text": "Methods for the DataWindow Control\nPage 894\nassigns the new rule, performs some processing, and then sets the validation rule back to the\nold rule:\nstring OldRule, NewRule\n \nNewRule = \"Match(GetText(), ~\"[A-Z]+~\")\"\n \nOldRule = dw_employee.GetValidate(\"emp_state\")\n \ndw_employee.SetValidate(\"emp_state\", NewRule)\n... //Process data using the new rule.\n \n// Set the validation rule back to the old rule.\ndw_employee.SetValidate(\"emp_state\", OldRule)\nSee also\nGetValidate\n9.199 SetValue\nDescription\nSets the value of an item in a value list or code table for a column in a DataWindow control\nor DataStore. (A value list is called a code table when it has both display and data values.)\nSetValue does not affect the data stored in the column.\nApplies to\nTable 9.425:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetValue ( string column, integer index, string value )\ninteger dwcontrol.SetValue ( integer column, integer index, string value )\nTable 9.426:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control or DataStore.\ncolumn\nThe column that contains the value list or code table. Column can be a column\nnumber or a column name.\nThe edit style of the column can be DropDownListBox, Edit, or\nRadioButton. SetValue has no effect when column has the EditMask or\nDropDownDataWindow edit style.\nindex\nThe number of the item in the value list or code table for which you want to set\nthe value.\nvalue\nA string whose value is the new value for the item. For a code table, use a\ntab (~t in PowerBuilder) to separate the display value from the data value\n"}
{"page": 895, "text": "Methods for the DataWindow Control\nPage 895\nArgument\nDescription\n(\"Texas~tTX\"). The data value must be a string that can be converted to the\ndatatype of the column.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, in\nPowerBuilder and JavaScript the method returns null.\nExamples\nThis statement sets the value of item 3 in the value list for the column emp_state of\ndw_employee to Texas:\ndw_employee.SetValue(\"emp_state\", 3, \"Texas\")\nThis statement sets the display value of item 3 in the code table for the column named\nemp_state of dw_employee to Texas and the data value to TX:\ndw_employee.SetValue(\"emp_state\", 3, \"Texas~tTX\")\nThe following statements use a SQL cursor and FETCH statement to populate the ListBox\nportion of a DropDownListBox style column called product_col of a DataWindow object\nwith code table values:\ninteger prod_code, i = 1\nstring prod_name\n \nDECLARE prodcur CURSOR FOR\n      SELECT product.name, product.code\n      FROM product USING SQLCA;\n \nCONNECT USING SQLCA;\nIF SQLCA.SQLCode <> 0 THEN\n      MessageBox(\"Status\",\"Connect Failed \" &\n         + SQLCA.SQLErrText)\n      RETURN\nEND IF\n \nOPEN prodcur;\nIF SQLCA.SQLCode <> 0 THEN\n      MessageBox(\"Status\",\"Cursor Open Failed \" &\n         + SQLCA.SQLErrText)\n      RETURN\nEND IF\n \nFETCH prodcur INTO :prod_name, :prod_code;\n \nDO WHILE SQLCA.SQLCode = 0\n      dw_products.SetValue(\"product_col\", i, &\n         prod_name + \"~t\" + String(prod_code))\n      i = i + 1\n      FETCH prodcur INTO :prod_name, :prod_code;\nLOOP\n \nCLOSE prodcur;\nDISCONNECT USING SQLCA;\nSee also\nGetValue\n"}
{"page": 896, "text": "Methods for the DataWindow Control\nPage 896\n9.200 SetWeight (obsolete)\nDescription\nSpecifies the types of JavaScript code that will be included in the generated HTML or\nXHTML.\nObsolete method\nSetWeight is obsolete and should not be used, because the Web DataWindow\ntechnology is obsolete.\nApplies to\nTable 9.427:\nDataWindow type\nMethod applies to\nWeb\nServer component\nSyntax\nWeb DataWindow server component\ninteger dwcomponent.SetWeight ( boolean allowupdate, boolean validation, boolean\n events, boolean clientscriptable, boolean clientformatting )\nTable 9.428:\nArgument\nDescription\ndwcomponent\nA reference to a Web DataWindow server component.\nallowupdate\nSpecifies whether the generated HTML will be a form with INPUT\nelements so that the user can change the data. Values are:\n\u2022 True -- The generated HTML is a form. The user can change the data.\n\u2022 False -- The generated HTML is a table. The user cannot change the data.\nWhen allowupdate is false, validation and clientformatting are ignored and\nno validation or formatting scripts are generated.\nvalidation\nSpecifies whether the generated HTML will include scripts for validating\ndata the user enters. The scripts implement validation rules defined in the\nDataWindow object. Values are:\n\u2022 True -- The generated HTML has scripts that implement validation rules.\n\u2022 False -- The generated HTML does not validate user-entered data.\nSets the value of the HTMLGen.ClientValidation property for the\nDataWindow object associated with the server component.\nevents\nSpecifies whether the generated HTML will include code for triggering\nevents. Values are:\n\u2022 True -- The generated HTML has scripts that trigger events.\n"}
{"page": 897, "text": "Methods for the DataWindow Control\nPage 897\nArgument\nDescription\n\u2022 False -- The generated HTML does not trigger events.\nSets the value of the HTMLGen.ClientEvents property for the DataWindow\nobject associated with the server component.\nThe available events are listed in the DataWindow event cross-reference.\nclientscriptable Specifies whether the generated HTML allows client-side scripts to call\nmethods of the client control. Values are:\n\u2022 True -- The generated HTML includes methods that the client scripts can\ncall.\n\u2022 False -- The generated HTML does not include methods.\nThis option adds approximately 100K to the generated HTML.\nSets the value of the HTMLGen.ClientScriptable property for the\nDataWindow object associated with the server component.\nclientformatting Specifies whether the generated HTML will include scripts for formatting\ndata the user enters. The scripts implement display formats defined in the\nDataWindow object. Values are:\n\u2022 True -- The generated HTML has scripts that format user-entered data.\n\u2022 False -- The generated HTML does not format user-entered data.\nSets the value of the HTMLGen.ClientFormatting property for the\nDataWindow object associated with the server component.\nReturn value\nReturns an empty string if successful and the syntax error message from the Modify method\nif it fails.\nUsage\nWhen code for more features is included, the Web DataWindow becomes a more robust tool\nfor data entry and manipulation, allowing data validation, formatting, and client-side scripts\nthat react to user actions. However, if your application does not use some of these features,\nyou can decrease the size of the generated code by setting the appropriate options to false.\nThis method calls the Modify method of the server component's DataStore to set the\nproperties.\nThese properties can also be set in the DataWindow painter so that the settings are part of the\nDataWindow object definition.\nExamples\nThis example specifies updating of data is not supported in the server component webDW,\nbut events are supported so client-side scripts can respond to user actions:\nwebDW.SetWeight( false, false, true, true, false );\n"}
{"page": 898, "text": "Methods for the DataWindow Control\nPage 898\nThis example specifies that all features are supported except client-side scripting. Scripts in\nthe Web page will not be able to call Web DataWindow client methods:\nwebDW.SetWeight( true, true, true, false, true );\nThis example specifies that all features are supported:\nwebDW.SetWeight( true, true, true, true, true );\nSee also\nGenerate\nModify\nSetAction\nHTMLGen.property\n9.201 SetWSObject (Obsolete)\nDescription\nCauses a DataWindow control or DataStore to use a programmer-specified Web service\nconnection object. The connection object provides the information necessary for\ncommunicating with a Web service data source.\nApplies to\nTable 9.429:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.SetWSObject ( wsconnection wsobject )\nTable 9.430:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow\nin which you want to use a programmer-specified Web service connection\nobject\nwsobject\nThe name of the connection object you want to use in the dwcontrol\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If the WSConnection object is null, in\nPowerBuilder the method returns null.\nUsage\nYou call the SetWSObject method to pass an instance of the WSConnection object and\nconnect to a Web service data source, when the Web service requires user-related, session-\n"}
{"page": 899, "text": "Methods for the DataWindow Control\nPage 899\nrelated, or authentication information. If the Web service does not require this information,\nyou do not need to use the WSConnection object (or call SetWSObject) to access Web\nservice data.\nExamples\nThe following code instantiates a WSConnection object, then sets the object as the\nconnection object for a Web service data source:\nint ii_return\nwsconnection ws_1\nws_1 = create wsconnection\nws_1.username = \"johndoe\"\nws_1.password = \"mypassword\"\nws_1.endpoint = \"myendpoint\"\nws_1.authenticationmode = \"basic\"\nws_1.usewindowsintegratedauthentication = true\nii_return = dw_1.setwsobject (ws_1)\nSee also\nSetTransObject\n9.202 ShareData\nDescription\nShares data retrieved by one DataWindow control (or DataStore), which is referred to as the\nprimary DataWindow, with another DataWindow control (or DataStore), referred to as the\nsecondary DataWindow.\nThe controls do not share formatting; only the data is shared, including data in the primary\nbuffer, the delete buffer, the filter buffer, and the sort order.\nNote If you are using ShareData and then use ReselectRow on the primary DataWindow, the\nsecondary DataWindow resets back to row 1, column 1.\nApplies to\nTable 9.431:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwprimary.ShareData ( datawindow dwsecondary )\ninteger dwprimary.ShareData ( datastore dwsecondary )\ninteger dwprimary.ShareData ( datawindowchild dwsecondary )\nTable 9.432:\nArgument\nDescription\ndwprimary\nThe name of the primary DataWindow. The primary DataWindow is the\nowner of the data. When you destroy this DataWindow, the data disappears.\n"}
{"page": 900, "text": "Methods for the DataWindow Control\nPage 900\nArgument\nDescription\nDwprimary can be a child DataWindow but it cannot be a report in a\ncomposite DataWindow object or a Crosstab DataWindow object.\ndwsecondary The name of the secondary DataWindow with which the control dwprimary\nwill share the data. The secondary DataWindow can be a child DataWindow\nor a report in a composite DataWindow object but it cannot be a Crosstab\nDataWindow object.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nThe columns must be the same for the DataWindow objects in the primary and secondary\nDataWindow controls, but the SELECT statements may be different. For example, you could\nshare data between DataWindow objects with these SELECT statements:\nSELECT dept_id from dept\nSELECT dept_id from dept where dept_id = 200\nSELECT dept_id from employee\nWHERE clause in secondary has no effect\nThe WHERE clause in the DataWindow object in the secondary DataWindow\ncontrol has no effect on the number of rows returned. The number of rows returned\nto both DataWindow controls is determined by the WHERE clause in the primary\nDataWindow object.\nYou could also share data with a DataWindow object that has an external data source and\ncolumns defined to be like the columns in the primary. To share data between a primary\nDataWindow and more than one secondary DataWindow control, call ShareData for each\nsecondary DataWindow control.\nShareData shares only the primary buffer of the primary DataWindow with the primary\nbuffer of the secondary DataWindow. A DropDownDataWindow in the secondary\nDataWindow will not display any data unless you explicitly populate it. You can do this by\ngetting a handle to the DropDownDataWindow (by calling the GetChild method) and either\nretrieving the DropDownDataWindow or using ShareData to share data from an appropriate\ndata source with the DropDownDataWindow.\nTo turn off sharing in a primary or secondary DataWindow, call the ShareDataOff method.\nWhen sharing is turned off for the primary DataWindow, the secondary DataWindows\nare disconnected and the data disappears. However, turning off sharing for a secondary\nDataWindow does not affect the data in the primary DataWindow or other secondary\nDataWindows.\nWhen you call methods in either the primary or secondary DataWindow that change the\ndata, PowerBuilder applies them to the primary DataWindow control and all secondary\nDataWindow controls are affected.\nFor example, when you call any of the following methods for a secondary DataWindow\ncontrol, PowerBuilder applies it to the primary DataWindow. Therefore, all messages\n"}
{"page": 901, "text": "Methods for the DataWindow Control\nPage 901\nnormally associated with the method go to the primary DataWindow control. Such methods\ninclude:\nDeleteRow\nFilter\nGetSQLSelect\nImportFile\nImportString\nImportClipboard\nInsertRow\nReselectRow\nReset\nRetrieve\nSetFilter\nSetSort\nSetSQLSelect\nSort\nUpdate\nThere are some restrictions on the use of ShareData:\n\u2022 Computed fields in secondary DataWindow controls\nA secondary DataWindow control can have only data that is in the primary DataWindow\ncontrol. If you add a computed field to a secondary control, it will not display when you\nrun the application unless you also add it to the primary control.\n\u2022 Query mode and secondary DataWindows\nWhen you are sharing data, you cannot turn on query mode for a secondary DataWindow.\nTrying to set the QueryMode or QuerySort DataWindow object properties results in an\nerror.\n\u2022 Crosstab DataWindows\nYou cannot use ShareData with a Crosstab DataWindow as the primary or secondary\nDataWindow.\n\u2022 Composite and child DataWindows\nYou can use a report in a Composite DataWindow as the secondary DataWindow, but not\nthe primary DataWindow. You can use ShareData with a child DataWindow as the primary\nor secondary DataWindow.\n\u2022 Distributed applications\nYou cannot share data between a DataWindow control in a client application and a\nDataStore in a server application.\nUse DataSource with RichTextEdit controls\nTo share data between a DataStore or DataWindow and a RichTextEdit control, use\nthe DataSource method.\n"}
{"page": 902, "text": "Methods for the DataWindow Control\nPage 902\nExamples\nIn this example, the programmer wants to allow the user to view two portions of the same\ndata retrieved from the database and uses the ShareData method to accomplish this in the\nscript for the Open event for the window.\nThe SELECT statement for both DataWindow objects is the same, but the DataWindow\nobject in dw_dept displays only two of the five columns displayed in dw_employee:\nCONNECT USING SQLCA;\ndw_employee.SetTransObject(SQLCA)\ndw_employee.Retrieve()\ndw_employee.ShareData(dw_dept)\nThese statements share data between two DataWindow controls in different sheets within an\nMDI frame window:\nCONNECT USING SQLCA;\nmdi_sheet_1.dw_dept.SetTransObject(SQLCA)\nmdi_sheet_1.dw_dept.Retrieve()\nmdi_sheet_1.dw_dept.ShareData(mdi_sheet_2.dw_dept)\nThis example shares data in a tabular DataWindow with a report in a Composite\nDataWindow. The name of the report in the Composite DataWindow is dw_1:\nDataWindowChild dwreport\n// Get a reference to the nested report\ndw_composite.GetChild(\"dw_1\", dwreport)\ndw_tabular.ShareData(dwreport)\nSee also\nShareDataOff\n9.203 ShareDataOff\nDescription\nTurns off the sharing of data buffers for a DataWindow control or DataStore.\nApplies to\nTable 9.433:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.ShareDataOff ( )\nTable 9.434:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\n"}
{"page": 903, "text": "Methods for the DataWindow Control\nPage 903\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If dwcontrol is null, ShareDataOff returns\nnull.\nUsage\nTwo or more DataWindow controls (or DataStores) can share data. See ShareData for more\ninformation about shared data buffers and primary and secondary DataWindows.\nWhen you call ShareDataOff for a secondary DataWindow, that control no longer contains\ndata, but the primary DataWindow and other secondary controls are not affected. When\nyou call ShareDataOff for the primary DataWindow, all secondary DataWindows are\ndisconnected and no longer contain data.\nExamples\nThese statements establish the sharing of data among three DataWindow controls and then\nturn off sharing for one of the secondary DataWindow controls:\nCONNECT USING SQLCA;\ndw_corp.SetTransObject(SQLCA)\ndw_corp.Retrieve()\ndw_corp.ShareData(dw_emp)\ndw_corp.ShareData(dw_dept)\n... // Some processing\ndw_emp.ShareDataOff()\nSee also\nShareData\n9.204 Show\nDescription\nMakes an object or control visible, if it is hidden. If the object is already visible, Show brings\nit to the top.\nApplies to\nTable 9.435:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\ninteger objectname.Show ( )\nTable 9.436:\nArgument\nDescription\nobjectname\nThe name of the object or control you want\nto make visible (show)\nReturn value\n"}
{"page": 904, "text": "Methods for the DataWindow Control\nPage 904\nReturns 1 if it succeeds and -1 if an error occurs. If objectname is null, Show returns null.\nUsage\nPowerBuilder environment\nInherited from GraphicObject. For more details on use with PowerBuilder objects, see\nSection 2.4.805, \u201cShow\u201d in PowerScript Reference.\nSee also\nHide\n9.205 ShowHeadFoot\nDescription\nDisplays the panels for editing the header and footer in a RichTextEdit control or hides the\npanels and returns to editing the main text.\nApplies to\nTable 9.437:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control with RichTextEdit\npresentation style\nSyntax\nPowerBuilder\ninteger rtename.ShowHeadFoot ( boolean editheadfoot {, headerfooter} )\nTable 9.438:\nArgument\nDescription\nrtename\nA reference to the DataWindow control for which you want to edit header\nand footer information. The DataWindow must have a RichTextEdit\npresentation style.\neditheadfoot\nA boolean value specifying the editing panel to display. Values are:\n\u2022 True -- Display the header and footer editing panels.\n\u2022 False -- Display the detail editing panel for the document body.\nheaderfooter\n(optional)\nA boolean value specifying whether the insertion point (caret) for editing\nthe header/footer panel is in the header or the footer section. Values are:\n\u2022 True\nCaret is in the header section.\n\u2022 False\nCaret is in the footer section.\n"}
{"page": 905, "text": "Methods for the DataWindow Control\nPage 905\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs.\nUsage\nShowHeadFoot takes effect when the control is in preview mode or when it is in edit mode\nfor the main text. If the control is in preview mode, calling ShowHeadFoot returns to edit\nmode. The value of editheadfoot determines whether the main text or the header and footer\npanels display.\nThe headerfooter argument is ignored if the editheadfoot argument is false. The headerfooter\nargument defaults to \"true\" if a value is not provided. The header and footer can include input\nfields for page numbers and dates.\nPowerBuilder RichTextEdit control\nYou can use the same syntax with any RichTextEdit control. See Section 2.4.806,\n\u201cShowHeadFoot\u201d in PowerScript Reference.\nSee also\nPreview for RichTextEdit controls in Section 2.4.584, \u201cPreview\u201d in PowerScript Reference\n9.206 Sort\nDescription\nSorts the rows in a DataWindow control or DataStore using the DataWindow's current sort\ncriteria.\nApplies to\nTable 9.439:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.Sort ( )\nTable 9.440:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control,\nDataStore, or child DataWindow\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If dwcontrol is null, Sort returns null.\nUsage\n"}
{"page": 906, "text": "Methods for the DataWindow Control\nPage 906\nSort uses the current sort criteria for the DataWindow. To change the sort criteria, use the\nSetSort method. The SetSort method is equivalent to using the Sort command on the Rows\nmenu of the DataWindow painter. If you do not call SetSort to set the sort criteria before you\ncall Sort, Sort uses the sort criteria specified in the DataWindow object definition.\nWhen the Retrieve method retrieves data for the DataWindow, PowerBuilder applies the sort\ncriteria that were defined for the DataWindow object, if any. You need to call Sort only after\nyou change the sort criteria with SetSort or if the data has changed because of processing or\nuser input.\nFor information on letting the user specify sort criteria using the built-in dialog box, see\nSetSort.\nWhen you sort a DataWindow on a specified column, rows with null data remain at the top,\nregardless of whether you choose ascending or descending order for your sort criteria. The\nsort order is performed on a result set returned from a database, but is not necessarily the\nsame sort order used by the database (to return the result set) when an ORDER BY clause is\nused in a SQL query.\nThe Sort method uses a typical lexical sort, with symbols, such as a hyphen or underline,\nranked higher than alphanumeric characters. It compares characters in the same manner as\ndoes a dictionary.\nWhen the Retrieve As Needed option is set, the Sort method cancels its effect. Sort causes\nall rows to be retrieved so that they are sorted correctly. It also changes the current row to 1\nwithout causing the RowFocusChanged or RowFocusChanging events to fire. These events\nshould be triggered programmatically after the Sort method is called.\nSort has no effect on the DataWindows in a composite report.\nSorting and groups\nTo sort a DataWindow object with groups or TreeView levels, call GroupCalc after\nyou call Sort.\nPowerBuilder environment\nFor use with PowerBuilder ListView and TreeView controls, see Section 2.4.813,\n\u201cSort\u201d in PowerScript Reference.\nExamples\nThis example sets dw_employee to be sorted by column 1 ascending and then by column 2\ndescending. Then it sorts the rows:\ndw_employee.SetRedraw(false)\ndw_employee.SetSort(\"#1 A, #2 D\")\ndw_employee.Sort()\ndw_employee.SetRedraw(true)\nIn this example, the rows in the DataWindow dw_depts are grouped based on department\nand the rows are sorted based on employee name. If the user has changed the department of\nseveral employees, then the following commands apply the sort criteria so that each group is\nin alphabetical order and then regroup the rows:\ndw_depts.SetRedraw(false)\n"}
{"page": 907, "text": "Methods for the DataWindow Control\nPage 907\ndw_depts.Sort()\ndw_depts.GroupCalc()\ndw_depts.SetRedraw(true)\nSee also\nGroupCalc\nSetSort\n9.207 TextLine\nDescription\nObtains the text of the line that contains the insertion point. TextLine works for controls that\ncan contain multiple lines.\nApplies to\nTable 9.441:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\nSyntax\nPowerBuilder\nstring editname.TextLine ( )\nTable 9.442:\nArgument\nDescription\neditname\nA reference to a DataWindow control\nReturn value\nReturns the text on the line with the insertion point in editname. If an error occurs, TextLine\nreturns the empty string (\"\"). If editname is null, TextLine returns null.\nUsage\nTextLine reports information about the edit control over the current row and column.\nPowerBuilder environment\nFor use with other PowerBuilder controls, see Section 2.4.839, \u201cTextLine\u201d in\nPowerScript Reference.\nExamples\nIn the DataWindow control dw_letter, if the insertion point is on line 4 in the edit control and\nthe text on the line is North Carolina, then this example sets linetext to North Carolina:\nstring linetext\nlinetext = dw_letter.TextLine()\nSee also\n"}
{"page": 908, "text": "Methods for the DataWindow Control\nPage 908\nSelectTextLine\n9.208 TriggerEvent\nDescription\nTriggers an event associated with the specified object, which executes the script for that event\nimmediately.\nApplies to\nTable 9.443:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger objectname.TriggerEvent ( trigevent event {, long word, long long } )\ninteger objectname.TriggerEvent ( trigevent event {, long word, string long } )\nTable 9.444:\nArgument Description\nobjectname The name of any PowerBuilder object or control that has events associated with\nit.\nevent\nA value of the TrigEvent enumerated datatype that identifies a PowerBuilder\nevent (for example, Clicked!, Modified!, or DoubleClicked!) or a string whose\nvalue is the name of an event. The event must be a valid event for objectname\nand a script must exist for the event in objectname.\nword\n(optional)\nA value to be stored in the WordParm property of the system's Message object.\nIf you want to specify a value for long, but not word, enter 0. (For cross-\nplatform compatibility, WordParm and LongParm are both longs.)\nlong\n(optional)\nA value or a string that you want to store in the LongParm property of the\nsystem's Message object. When you specify a string, a pointer to the string is\nstored in the LongParm property, which you can access with the String function\n(see Usage).\nReturn value\nReturns 1 if it is successful and the event script runs and -1 if the event is not a valid event for\nobjectname, or no script exists for the event in objectname. If any argument's value is null,\nTriggerEvent returns null.\nUsage\nInherited from PowerObject. For information, see Section 2.4.857, \u201cTriggerEvent\u201d in\nPowerScript Reference.\nSee also\nPost in Section 2.4.578, \u201cPost\u201d in PowerScript Reference\n"}
{"page": 909, "text": "Methods for the DataWindow Control\nPage 909\nPostEvent in Section 2.4.582, \u201cPostEvent\u201d in PowerScript Reference\nSend in Section 2.4.696, \u201cSend\u201d in PowerScript Reference\n9.209 TypeOf\nDescription\nDetermines the type of an object or control, reported as a value of the Object enumerated\ndatatype.\nApplies to\nTable 9.445:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\nobject objectname.TypeOf ( )\nTable 9.446:\nArgument\nDescription\nobjectname\nThe name of the object or control for which\nyou want the type\nReturn value\nObject enumerated datatype. Returns the type of objectname. If objectname is null, TypeOf\nreturns null.\nUsage\nInherited from PowerObject. For information, see Section 2.4.863, \u201cTypeOf\u201d in PowerScript\nReference.\nSee also\nClassName\n9.210 Undo\nDescription\nCancels the last edit in an edit control, restoring the text to the content before the last change.\nApplies to\nTable 9.447:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control\n"}
{"page": 910, "text": "Methods for the DataWindow Control\nPage 910\nSyntax\nPowerBuilder\ninteger editname.Undo ( )\nTable 9.448:\nArgument\nDescription\neditname\nA reference to a DataWindow control.\nReverses the last edit in the edit control over\nthe current row and column.\nReturn value\nReturns 1 when it succeeds and -1 if an error occurs. If editname is null, Undo returns null.\nUsage\nTo determine whether the last action can be canceled, call the CanUndo method.\nPowerBuilder environment\nFor examples and for use with other PowerBuilder controls, see Section 2.4.865,\n\u201cUndo\u201d in PowerScript Reference.\nSee also\nCanUndo\n9.211 Update\nDescription\nUpdates the database with the changes made in a DataWindow control or DataStore. Update\ncan also call AcceptText for the current row and column before it updates the database.\nApplies to\nTable 9.449:\nDataWindow type\nMethod applies to\nPowerBuilder\nDataWindow control, DataWindowChild\nobject, DataStore object\nSyntax\nPowerBuilder\ninteger dwcontrol.Update ( { boolean accept {, boolean resetflag } } )\nTable 9.450:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control, DataStore, or child DataWindow.\n"}
{"page": 911, "text": "Methods for the DataWindow Control\nPage 911\nArgument\nDescription\naccept\n(optional)\nA boolean value specifying whether the DataWindow control or DataStore\nshould automatically perform an AcceptText prior to performing the\nupdate:\n\u2022 True -- (Default) Perform AcceptText. The update is canceled if the data\nfails validation.\n\u2022 False -- Do not perform AcceptText.\nresetflag\n(optional)\nA boolean value specifying whether dwcontrol should automatically reset\nthe update flags:\n\u2022 True -- (Default) Reset the flags.\n\u2022 False -- Do not reset the flags.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Update\nreturns null. If there is no DataWindow object assigned to the DataWindow control or\nDataStore, this method returns 1.\nUsage\nIn PowerBuilder, you must use the SetTrans or the SetTransObject method to specify the\ndatabase connection before the Update method will execute. When you use SetTransObject,\nthe more efficient of the two, you must do your own transaction management, which includes\nissuing the SQL COMMIT or ROLLBACK statement to finalize the update.\nTest success/failure code\nIt is good practice to test the success/failure code after calling Update. You can also\nverify the number of rows inserted, updated, and deleted by a DataWindow update by\nexamining the values of the arguments of the UpdateEnd event.\nBy default, Update resets the update flags after successfully completing the update. However,\nyou can prevent the flags from being reset until you perform other validations and commit the\nchanges. When you are satisfied with the update, call ResetUpdate to clear the flags so that\nitems are no longer marked as modified.\nUse SetTransObject when resetflag is False\nYou would typically use SetTransObject, not SetTrans, to specify the transaction\nobject for the DataWindow control or DataStore when you plan to update with the\nresetflag argument set to false. Only SetTransObject allows you to control when\nchanges are committed.\nIf you want to update several tables in one DataWindow control or DataStore, you can use\nModify to change the Update property of columns in each table. To preserve the status flags\nof the rows and columns, set the resetflag argument to false. Because the updates all occur in\nthe same DataWindow control or DataStore, you cannot allow the flags to be cleared until all\n"}
{"page": 912, "text": "Methods for the DataWindow Control\nPage 912\nthe tables have used them. When all the updates are successfully completed and committed,\nyou can call ResetUpdate to clear the changed flags in the DataWindow. For an example of\nthis technique, see Modify.\nIf you are updating multiple DataWindow controls or DataStores as part of one transaction,\nset the resetflag argument to false. This will prevent the DataWindow from \"forgetting\"\nwhich rows to update in case one of the updates fails. You can roll back, try to correct the\nsituation, and update again. Once all of the DataWindows have been updated successfully,\nuse COMMIT to finalize the transaction and use ResetUpdate to reset the DataWindow's\nstatus flags.\nIf you call Update with the resetflag argument set to false and do not call ResetUpdate, the\nDataWindow will attempt to issue the same SQL statements again the next time you call\nUpdate.\nCaution\nIf you call Update in an ItemChanged event, be sure to set the accept argument to\nfalse to avoid an endless loop and a stack fault. Because AcceptText triggers an\nItemChanged event, you cannot call it in that event (see AcceptText).\nIf you call Update in the ItemChanged event, then the item's old value is updated in the\ndatabase, not the newly entered value. The newly entered value in the edit control is\nstill being validated and does not become the item value until the ItemChanged event\nis successfully completed. If you want to include the new value in an update in the\nItemChanged event, use the appropriate SetItem method first.\nApply GetChanges after deleting rows in a distributed application\nIf a DataWindow or data store is populated using SetChanges or SetFullState, and an\nUpdate is done that includes deleted rows, the deleted rows remain in the delete buffer\nuntil a subsequent GetChanges is applied to the DataWindow or data store.\nEvents\nUpdate can trigger these events:\nDBError\nSQLPreview\nUpdateEnd\nUpdateStart\nIf AcceptText is performed, it can trigger these events:\nItemChanged\nItemError\nExamples\nThis example connects to the database, specifies a transaction object for the DataWindow\ncontrol with SetTransObject, and then updates the database with the changes made in\ndw_employee. By default, AcceptText is performed on the data in the edit control for the\ncurrent row and column and the status flags are reset:\nCONNECT USING SQLCA;\n"}
{"page": 913, "text": "Methods for the DataWindow Control\nPage 913\ndw_employee.SetTransObject(SQLCA)\n... // Some processing\ndw_employee.Update()\nThis example connects to the database, specifies a transaction object for the DataWindow\ncontrol with SetTransObject, and then updates the database with the changes made in\ndw_employee. The update resets the status flags but does not perform AcceptText before\nupdating the database:\nCONNECT USING SQLCA;\ndw_employee.SetTransObject(SQLCA)\n... // Some processing\ndw_Employee.Update(false, true)\nAs before, this example connects to the database, specifies a transaction object for the\nDataWindow control with SetTransObject, and then updates the database with the changes\nmade in dw_employee. After Update is executed, the example checks the return code and,\ndepending on the success of the update, executes a COMMIT or ROLLBACK:\ninteger rtn\n \nCONNECT USING SQLCA;\ndw_employee.SetTransObject(SQLCA)\nrtn = dw_employee.Update()\n \nIF rtn = 1 THEN\n      COMMIT USING SQLCA;\nELSE\n      ROLLBACK USING SQLCA;\nEND IF\nSee also\nAcceptText\nModify\nResetUpdate\nPrint\nSaveAs\nSetTrans\nSetTransObject\n"}
{"page": 914, "text": "Methods for Graphs in the DataWindow Control\nPage 914\n10 Methods for Graphs in the DataWindow\nControl\nAbout this chapter\nThis chapter documents the methods that you can use to manipulate DataWindow graphs in\nthe PowerBuilder and Web environments. You will find syntax, notes, and examples for both\nenvironments.\nOther methods for DataWindows and DataStores are in a separate chapter.\nContents\nThe graph methods are in alphabetical order.\n10.1 CategoryCount\nDescription\nCounts the number of categories on the category axis of a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.CategoryCount ( string graphcontrol  )\nTable 10.1:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control containing the graph\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow for\nwhich you want the number of categories\nReturn value\nReturns the count if it succeeds and -1 if an error occurs. If any argument's value is null,\nCategoryCount returns null.\nExamples\nThese statements get the number of categories in the graph gr_revenues in the DataWindow\ncontrol dw_findata:\ninteger li_count\nli_count = &\n      dw_findata.CategoryCount(\"gr_revenues\")\nSee also\nDataCount\nSeriesCount\n"}
{"page": 915, "text": "Methods for Graphs in the DataWindow Control\nPage 915\n10.2 CategoryName\nDescription\nObtains the category name associated with the specified category number.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\nstring dwcontrol.CategoryName ( string graphcontrol, integer categorynumber )\nTable 10.2:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow for\nwhich you want the name of a specific category\ncategorynumberThe number of the category for which you want the name\nReturn value\nReturns the name of categorynumber in the graph named in graphcontrol. If an error occurs,\nit returns the empty string (\"\"). If any argument's value is null, CategoryName returns null.\nUsage\nCategories are numbered consecutively, from 1 to the value returned by CategoryCount.\nWhen you delete a category, the categories are renumbered to keep the numbering\nconsecutive. You can use CategoryName to find out the named category associated with a\ncategory number.\nExamples\nThese statements obtain the name of category 5 in the graph gr_revenues in the DataWindow\ncontrol dw_findata:\nstring ls_name\nls_name = &\n      dw_findata.CategoryName(\"gr_revenues\", 5)\nSee also\nCategoryCount\nSeriesName\n10.3 Clipboard\nDescription\nReplaces the contents of the system clipboard with a bitmap image of a graph. You can paste\nthe image into other applications.\n"}
{"page": 916, "text": "Methods for Graphs in the DataWindow Control\nPage 916\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.Clipboard ( string graphcontrol )\nTable 10.3:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow object\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Clipboard\nreturns null.\nExamples\nThis statement copies the graph gr_employees in the DataWindow control dw_emp_data to\nthe clipboard:\ndw_emp_data.Clipboard(\"gr_employees\")\nSee also\nClipboard in the Section 2.4.76, \u201cClipboard\u201d in PowerScript Reference\nCopy\n10.4 DataCount\nDescription\nReports the number of data points in the specified series in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\nlong dwcontrol.DataCount ( string graphcontrol, string seriesname )\nTable 10.4:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph\n"}
{"page": 917, "text": "Methods for Graphs in the DataWindow Control\nPage 917\nArgument\nDescription\ngraphcontrol\nThe name of the graph in the DataWindow\ncontrol\nseriesname\nA string whose value is the name of the\nseries for which you want the number of data\npoints\nReturn value\nReturns the number of data points in the specified series if it succeeds and -1 if an error\noccurs. If any argument's value is null, DataCount returns null.\nExamples\nThese statements store in ll_count the number of data points in the series named Salary in the\ngraph gr_dept in the DataWindow control dw_employees:\nlong ll_count\nll_count = &\n      dw_employees.DataCount(\"gr_dept\", \"Salary\")\nSee also\nSeriesCount\n10.5 FindCategory\nDescription\nObtains the number of a category in a graph when you know the category's label. The\ncategory values label the category axis.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.FindCategory ( string graphcontrol, date categoryvalue )\ninteger dwcontrol.FindCategory ( string graphcontrol, datetime categoryvalue )\ninteger dwcontrol.FindCategory ( string graphcontrol, double categoryvalue )\ninteger dwcontrol.FindCategory ( string graphcontrol, string categoryvalue )\ninteger dwcontrol.FindCategory ( string graphcontrol, time categoryvalue )\nTable 10.5:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\ncategoryvalue A value that is the category for which you want the number. The value you\nspecify must be the same datatype as the datatype of the category axis.\nReturn value\n"}
{"page": 918, "text": "Methods for Graphs in the DataWindow Control\nPage 918\nReturns the number of the category named in categoryvalue in the graph. If an error occurs,\nFindCategory returns -1. If any argument's value is null, FindCategory returns null.\nUsage\nMost of the category manipulation functions require a category number, rather than a name.\nHowever, when you delete and insert categories, existing categories are renumbered to keep\nthe numbering consecutive. Use FindCategory when you know only a category's label or\nwhen the numbering might have changed.\nExamples\nThese statements obtain the number of the category named Qty in the graph gr_computers in\nthe DataWindow control dw_equipment:\ninteger CategoryNbr\nCategoryNbr = &\n      dw_equipment.FindCategory(\"gr_computers\", \"Qty\")\nSee also\nFindSeries\n10.6 FindSeries\nDescription\nObtains the number of a series in a graph when you know the series' name.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.FindSeries ( string graphcontrol, string seriesname )\nTable 10.6:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control\nseriesname\nA string whose value is the name of the\nseries for which you want the number\nReturn value\nReturns the number of the series named in seriesname in the graph. If an error occurs,\nFindSeries returns -1. If any argument's value is null, FindSeries returns null.\nUsage\nMost of the series manipulation functions require a series number, rather than a name. Use\nFindSeries when you know only a series' name or when the numbering might have changed.\n"}
{"page": 919, "text": "Methods for Graphs in the DataWindow Control\nPage 919\nExamples\nThese statements obtain the number of the series named PCs in the graph gr_computers in the\nDataWindow control dw_equipment and store it in SeriesNbr:\ninteger SeriesNbr\nSeriesNbr = &\n      dw_equipment.FindSeries(\"gr_computers\", \"PCs\")\nSee also\nFindCategory\n10.7 GetData\nDescription\nGets the value of a data point in a series in a graph when the values axis has numeric values.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ndouble dwcontrol.GetData ( string graphcontrol, integer seriesnumber, long\n datapoint {, grDataType datatype } )\nTable 10.7:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow\ncontrol.\nseriesnumber\nThe number that identifies the series from which you want data.\ndatapoint\nThe number of the data point for which you want the value.\ndatatype (scatter\ngraph only)\n(optional)\nA value of the grDataType enumerated datatype (in PowerBuilder)\nspecifying whether you want the x or y value of the data point in a scatter\ngraph.\nValues are:\n\u2022 xValue! -- The x value of the data point.\n\u2022 yValue! -- (Default) The y value of the data point.\nFor more information, see grDataType.\nReturn value\nReturns the value of the data in datapoint if it succeeds, 0 if the series does not exist, and -1 if\nan error occurs. If any argument's value is null, GetData returns null.\n"}
{"page": 920, "text": "Methods for Graphs in the DataWindow Control\nPage 920\nUsage\nYou can use GetData only for graphs whose values axis is numeric. For graphs with other\ntypes of values axes, use the GetDataValue method instead.\nExamples\nThese statements obtain the data value of data point 3 in the series named Costs in the graph\ngr_computers in the DataWindow control dw_equipment:\ninteger SeriesNbr\ndouble data_value\n \n// Get the number of the series.\nSeriesNbr = &\n      dw_equipment.FindSeries(\"gr_computers\", \"Costs\")\ndata_value = dw_equipment.GetData( &\n      \"gr_computers\" , SeriesNbr, 3)\nThese statements obtain the x value of the data point in the scatter graph gr_sales_yr in the\nDataWindow dw_sales and store it in data_value:\ninteger SeriesNbr, ItemNbr\ndouble data_value\n \ndw_sales.ObjectAtPointer(\"gr_sales_yr\", SeriesNbr, &\n      ItemNbr)\ndata_value = dw_sales.GetData(\"gr_sales_yr\", &\n      SeriesNbr, ItemNbr, xValue!)\nSee also\nFindSeries\nGetDataValue\nObjectAtPointer\n10.8 GetDataDateVariable\nDescription\nReturns the value associated with a data point in a graph in a DataWindow object when the\nvalues axis has the date datatype. You must call GetDataDate first to retrieve the line style\ninformation. (GetDataDate is based on GetDataValue and is documented in that entry.)\nObsolete method\nGetDataDateVariable is obsolete and should not be used, because the DataWindow\nWeb Control for ActiveX technology is obsolete. An obsolete feature is no longer\neligible for technical support and will no longer be enhanced, although it is still\navailable.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\n"}
{"page": 921, "text": "Methods for Graphs in the DataWindow Control\nPage 921\nWeb ActiveX\nDate dwcontrol.GetDataDateVariable ( )\nTable 10.8:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns a date value associated with a data point in a graph.\nUsage\nTo find out the value of a data point, call one of the GetData methods to retrieve the\ninformation, then immediately afterward, call one of the GetDataVariable methods and\nexamine the return value.\nTable 10.9:\nFor a values axis of type\nCall this method to set up\nthe value\nThen call this method to\nreturn the value\nDate, DateTime, or time\nGetDataDate\nGetDataDateVariable\nNumber or double\nGetDataNumber\nGetDataNumberVariable\nString\nGetDataString\nGetDataStringVariable\nFor information on the GetData methods, see GetDataValue.\nSee also\nGetDataValue\n10.9 GetDataLabelling\nDescription\nDetermines whether the data at a given data point is labeled in a DirectX 3D graph.\nApplies to\nDataWindow control\nSyntax\ninteger dwcontrol.GetDataLabelling (string graphcontrol, string series, int datapoint, REF\nboolean value)\nTable 10.10:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph.\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control.\n"}
{"page": 922, "text": "Methods for Graphs in the DataWindow Control\nPage 922\nArgument\nDescription\nseries\nThe string that identifies the series in which\nyou want the data labelling value.\ndatapoint\nThe data point for which you want to obtain a\nlabel.\nvalue\nBoolean passed by reference to indicate\nwhether the data point has a label.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetDataLabelling returns null.\nUsage\nGetDataLabelling determines whether a data label is set for data points from DirectX 3D\nArea, Bar, Col, or Line graphs. You cannot use this method with DirectX 3D Pie graphs.\nExamples\nIn a DataWindow Clicked event, these statements obtain the number of the series and data\npoint clicked by the user and determine whether the label is set for that data point.\ninteger SeriesNbr, ItemNbr\nboolean refB\ngrObjectType clickedtype\n \n// Get the number of the series and data point\nclickedtype = this.ObjectAtPointer(\"gr_1\", &\n   SeriesNbr, ItemNbr)\n \n// Get data label\nthis.GetDataLabelling(\"gr_1\", SeriesNbr, & \n      ItemNbr, refB)\nSee also\nGetSeriesLabelling\nSetDataLabelling\nSetSeriesLabelling\n10.10 GetDataNumberVariable\nDescription\nReturns the value associated with a data point in a graph in a DataWindow object when the\nvalues axis has a numeric datatype. You must call GetDataNumber first to retrieve the line\nstyle information. (GetDataNumber is based on GetDataValue and is documented in that\nentry.)\nObsolete method\nGetDataNumberVariable is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\n"}
{"page": 923, "text": "Methods for Graphs in the DataWindow Control\nPage 923\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetDataNumberVariable ( )\nTable 10.11:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns a number value associated with a data point in a graph.\nUsage\nTo find out the value of a data point, call one of the GetData methods to retrieve the\ninformation, then immediately afterward, call one of the GetDataVariable methods and\nexamine the return value.\nTable 10.12:\nFor a values axis of type\nCall this method to set up\nthe value\nThen call this method to\nreturn the value\nDate, DateTime, or time\nGetDataDate\nGetDataDateVariable\nNumber or double\nGetDataNumber\nGetDataNumberVariable\nString\nGetDataString\nGetDataStringVariable\nFor information on the GetData methods, see GetDataValue.\nSee also\nGetDataValue\n10.11 GetDataPieExplode\nDescription\nReports the percentage of the pie graph's radius that a pie slice is moved away from the center\nof the pie graph. An exploded slice is moved away from the center of the pie in order to draw\nattention to the data.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\n"}
{"page": 924, "text": "Methods for Graphs in the DataWindow Control\nPage 924\ninteger dwcontrol.GetDataPieExplode ( string graphcontrol, integer series, integer\n datapoint, REF integer percentage )\nTable 10.13:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control\nseries\nThe number that identifies the series\ndatapoint\nThe number of the exploded data point (that\nis, the pie slice)\npercentage\nAn integer variable in which you want to\nstore the percentage that the pie slice is\nexploded\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetDataPieExplode returns null.\nExamples\nThis example reports the percentage that a pie slice is exploded when the user clicks on that\nslice. The code checks whether the graph is a pie graph using the property GraphType. It then\nfinds out whether the user clicked on a pie slice by checking the series and data point values\nset by ObjectAtPointer. The script is for the DoubleClicked event of a graph control:\ninteger series, datapoint\ngrObjectType clickedtype\ninteger percentage\n \npercentage = 50\nIF (This.GraphType <> PieGraph! and &\n      This.GraphType <> Pie3D!) THEN RETURN\nclickedtype = This.ObjectAtPointer(series, &\n      datapoint)\n \nIF (series > 0 and datapoint > 0) THEN\n      This.GetDataPieExplode(\"gr_sales_yr\", series, &\n         datapoint, percentage)\n      MessageBox(\"Explosion Percentage\", &\n         \"Data point \" + This.CategoryName(datapoint) &\n         + \" in series \" + This.SeriesName(series) &\n         + \" is exploded \" + String(percentage) + \"%\")\nEND IF\nSee also\nGetDataPieExplodePercentage\nSetDataPieExplode\n10.12 GetDataPieExplodePercentage\nDescription\n"}
{"page": 925, "text": "Methods for Graphs in the DataWindow Control\nPage 925\nReturns the percentage value that a slice is exploded in a pie graph in a DataWindow object.\nYou must call GetDataPieExplode first to retrieve the information and then call this method\nto get the value.\nObsolete method\nGetDataPieExplodePercentage is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetDataPieExplodePercentage ( )\nTable 10.14:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns a number specifying how much the pie slice is exploded.\nUsage\nTo find out the percentage of the pie graphs's radius that a pie slice is moved away from the\ncenter of the pie graph, call GetDataPieExplode to retrieve the information, then immediately\nafterward, call GetDataPieExplodePercentage and examine the return value.\nSee also\nGetDataPieExplode\nSetDataPieExplode\n10.13 GetDataStringVariable\nDescription\nReturns the value associated with a data point in a graph in a DataWindow object when the\nvalues axis has the string datatype. You must call GetDataString first to retrieve the line style\ninformation. (GetDataString is based on GetDataValue and is documented in that entry.)\nObsolete method\nGetDataStringVariable is obsolete and should not be used, because the DataWindow\nWeb Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\n"}
{"page": 926, "text": "Methods for Graphs in the DataWindow Control\nPage 926\nDataWindow control\nSyntax\nWeb ActiveX\nstring dwcontrol.GetDataStringVariable ( )\nTable 10.15:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nString. Returns a string value associated with a data point in a graph.\nUsage\nTo find out the value of a data point, call one of the GetData methods to retrieve the\ninformation, then immediately afterward, call one of the GetDataVariable methods and\nexamine the return value.\nTable 10.16:\nFor a values axis of type\nCall this method to set up\nthe value\nThen call this method to\nreturn the value\nDate, DateTime, or time\nGetDataDate\nGetDataDateVariable\nNumber or double\nGetDataNumber\nGetDataNumberVariable\nString\nGetDataString\nGetDataStringVariable\nFor information on the GetData methods, see GetDataValue.\nSee also\nGetDataValue\n10.14 GetDataStyle\nFinds out the appearance of a data point in a graph. Each data point in a series can have\nindividual appearance settings. There are different syntaxes, depending on what settings you\nwant to check.\nTable 10.17:\nTo get the\nUse\nData point's colors (called GetDataStyleColor in JavaScript)\nSyntax 1\nLine style and width used by the data point (called\nGetDataStyleLine in JavaScript)\nSyntax 2\nFill pattern for the data point (called GetDataStyleFill in\nJavaScript)\nSyntax 3\nSymbol for the data point (called GetDataStyleSymbol in\nJavaScript)\nSyntax 4\n"}
{"page": 927, "text": "Methods for Graphs in the DataWindow Control\nPage 927\nGetDataStyle provides information about a single data point. The series to which the data\npoint belongs has its own style settings. In general, the style values for the data point are the\nsame as its series' settings. Use SetDataStyle to change the style values for individual data\npoints. Use GetSeriesStyle and SetSeriesStyle to get and set style information for the series.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can find out the fill pattern for a data point or a series in a 2-dimensional\nline graph, but that fill pattern will not be visible.\n10.14.1 Syntax 1 For the colors of a data point\nDescription\nObtains the colors associated with a data point in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetDataStyle ( string graphcontrol, integer seriesnumber, integer\n datapointnumber, grColorType colortype, REF long colorvariable )\nTable 10.18:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nThe number of the series in which you want the color of a data point.\ndatapointnumberThe number of the data point for which you want the color.\ncolortype\nA value of the grColorType enumerated datatype (in PowerBuilder) or an\ninteger (in JavaScript) specifying the aspect of the data point for which you\nwant the color.\nFor a list of values, see grColorType.\ncolorvariable\nIn PowerBuilder, a long variable in which you want to store the color.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. In PowerBuilder, GetDataStyle stores an\nRGB color value in colorvariable. If any argument's value is null, GetDataStyle returns null.\nExamples\nThis example gets the background color used for data point 6 in the series entered in the\nSingleLineEdit sle_series in the DataWindow graph gr_emp_data. It stores the color value in\nthe variable color_nbr:\nlong color_nbr\ninteger SeriesNbr\n \n// Get the number of the series\n"}
{"page": 928, "text": "Methods for Graphs in the DataWindow Control\nPage 928\nSeriesNbr = &\n      FindSeries(\"gr_emp_data\", sle_series.Text)\n \n// Get the color\ndw_emp_data.GetDataStyle(\"gr_emp_data\", &\n      SeriesNbr, 6, Background!, color_nbr)\nSee also\nFindSeries\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n10.14.2 Syntax 2 For the line style and width used by a data point\nDescription\nObtains the line style and width for a data point in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetDataStyle ( string graphcontrol, integer seriesnumber, integer\n datapointnumber, REF LineStyle linestyle, REF integer linewidth )\nTable 10.19:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nThe number of the series in which you want the line style and width of a\ndata point.\ndatapointnumberThe number of the data point for which you want the line style and width.\nlinestyle\nIn PowerBuilder, a variable of type LineStyle in which you want to store\nthe line style.\nFor a list of line style values, see LineStyle.\nlinewidth\nIn PowerBuilder, an integer variable in which you want to store the width\nof the line. The width is measured in pixels.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. In PowerBuilder, for the specified series and\ndata point, GetDataStyle stores its line style in linestyle and the line's width in linewidth. If\nany argument's value is null, GetDataStyle returns null.\nExamples\n"}
{"page": 929, "text": "Methods for Graphs in the DataWindow Control\nPage 929\nThis example gets the line style and width for data point 6 in the series entered in the\nSingleLineEdit sle_series in the graph gr_depts in the DataWindow control dw_employees.\nThe information is stored in the variables line_style and line_width:\ninteger SeriesNbr, line_width\nLineStyle line_style\n \n// Get the number of the series\nSeriesNbr = dw_employees.FindSeries( &\n      \"gr_depts\", sle_series.Text)\n \n// Get the line style and width\ndw_employees.GetDataStyle(\"gr_depts\", SeriesNbr, &\n      6, line_style, line_width)\nSee also\nFindSeries\nGetDataStyleLineStyle\nGetDataStyleLineWidth\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n10.14.3 Syntax 3 For the fill pattern of a data point\nDescription\nObtains the fill pattern of a data point in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetDataStyle ( string graphcontrol, integer seriesnumber, integer\n datapointnumber, REF FillPattern fillvariable )\nTable 10.20:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nThe number of the series in which you want the fill pattern of a data point.\ndatapointnumber The number of the data point for which you want the fill pattern.\nfillvariable\nIn PowerBuilder, a variable of type FillPattern in which you want to store\nthe fill pattern value.\nFor a list of values, see FillPattern.\n"}
{"page": 930, "text": "Methods for Graphs in the DataWindow Control\nPage 930\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. In PowerBuilder, GetDataStyle stores\na value of the FillPattern enumerated datatype representing the fill pattern used for the\nspecified data point. If any argument's value is null, GetDataStyle returns null.\nExamples\nThis example gets the pattern used to fill data point 6 in the series entered in the\nSingleLineEdit sle_series in the graph gr_depts in the DataWindow control dw_employees.\nThe information is assigned to the variable data_pattern:\ninteger SeriesNbr\nFillPattern data_pattern\n \n// Get the number of the series\nSeriesNbr = dw_employees.FindSeries(\"gr_depts\", &\n      sle_series.Text)\n \n// Get the pattern\ndw_employees.GetDataStyle(\"gr_depts\", SeriesNbr, &\n      6, data_pattern)\nSee also\nFindSeries\nGetDataStyleFillPattern\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n10.14.4 Syntax 4 For the symbol of a data point\nDescription\nObtains the symbol of a data point in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetDataStyle ( string graphcontrol, integer seriesnumber, integer\n datapointnumber, REF grSymbolType symbolvariable )\nTable 10.21:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nThe number of the series in which you want the symbol type of a data point.\ndatapointnumberThe number of the data point for which you want the symbol type.\n"}
{"page": 931, "text": "Methods for Graphs in the DataWindow Control\nPage 931\nArgument\nDescription\nsymbolvariable In PowerBuilder, a variable of type grSymbolType in which you want to\nstore the symbol type.\nFor a list of values, see grSymbolType.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. Stores, according to the type of\nsymbolvariable, a value of that enumerated datatype representing the symbol used for the\nspecified data point. If any argument's value is null, GetDataStyle returns null.\nExamples\nThese statements store the symbol for a data point in the variable symbol_type. The data\npoint is the sixth point in the series named in the SingleLineEdit sle_series in the graph\ngr_depts in the DataWindow control dw_employees:\ninteger SeriesNbr\ngrSymbolType symbol_type\n \n// Get the number of the series\nSeriesNbr = dw_employees.FindSeries(\"gr_depts\", &\n      sle_series.Text)\n \n// Get the symbol\ndw_employees.GetDataStyle(\"gr_depts\", SeriesNbr, &\n      6, symbol_type)\nSee also\nFindSeries\nGetDataStyleSymbolValue\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n10.15 GetDataStyleColorValue\nDescription\nReturns the color value associated with a data point in a graph in a DataWindow object. You\nmust call GetDataStyleColor first to retrieve the color information. (See GetDataStyle for\ninformation about this method.)\nObsolete method\nGetDataStyleColorValue is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\n"}
{"page": 932, "text": "Methods for Graphs in the DataWindow Control\nPage 932\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetDataStyleColorValue ( )\nTable 10.22:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns an RGB color value.\nUsage\nTo find out the color associated with a data point, call GetDataStyleColor to retrieve the\ninformation, then immediately afterward, call GetDataStyleColorValue and examine the\nreturn value.\nThe color for a data point overrides the color setting for the series.\nSee also\nGetDataStyle\n10.16 GetDataStyleFillPattern\nDescription\nReturns the fill pattern associated with a data point in a graph in a DataWindow object.\nYou must call GetDataStyleFill first to retrieve the fill information. (See GetDataStyle for\ninformation about this method.)\nObsolete method\nGetDataStyleFillPattern is obsolete and should not be used, because the DataWindow\nWeb Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetDataStyleFillPattern ( )\nTable 10.23:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\n"}
{"page": 933, "text": "Methods for Graphs in the DataWindow Control\nPage 933\nReturns an integer representing the fill pattern.\nFor a list of values and their meanings, see FillPattern.\nUsage\nTo find out the fill pattern associated with a data point, call GetDataStyleFill to retrieve the\ninformation, then immediately afterward, call GetDataStyleFillPattern and examine the return\nvalue.\nThe fill pattern for a data point overrides the fill pattern setting for the series.\nSee also\nGetDataStyle\n10.17 GetDataStyleLineStyle\nDescription\nReturns the line style associated with a data point in a graph in a DataWindow object. You\nmust call GetDataStyleLine first to retrieve the line style information. (See GetDataStyle for\ninformation about this method.)\nObsolete method\nGetDataStyleLineStyle is obsolete and should not be used, because the DataWindow\nWeb Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetDataStyleLineStyle ( )\nTable 10.24:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns an integer representing the line style.\nFor a list of values and their meanings, see LineStyle.\nUsage\nTo find out the line width or line style associated with a data point, call GetDataStyleLine\nto retrieve the information, then immediately afterward, call GetDataStyleLineWidth and\nGetDataStyleLineStyle and examine the return values.\nThe line style for a data point overrides the setting for the series.\n"}
{"page": 934, "text": "Methods for Graphs in the DataWindow Control\nPage 934\nSee also\nGetDataStyle\n10.18 GetDataStyleLineWidth\nDescription\nReturns the line width associated with a data point in a graph in a DataWindow object. You\nmust call GetDataStyleLine first to retrieve the line style information. (See GetDataStyle for\ninformation about this method.)\nObsolete method\nGetDataStyleLineWidth is obsolete and should not be used, because the DataWindow\nWeb Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetDataStyleLineWidth ( )\nTable 10.25:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns the width of the line in pixels.\nUsage\nTo find out the line width or line style associated with a data point, call GetDataStyleLine\nto retrieve the information, then immediately afterward, call GetDataStyleLineWidth and\nGetDataStyleLineStyle and examine the return values.\nThe line width for a data point overrides the setting for the series.\nSee also\nGetDataStyle\n10.19 GetDataStyleSymbolValue\nDescription\nReturns the symbol associated with a data point in a graph in a DataWindow object. You\nmust call GetDataStyleSymbol first to retrieve the symbol information. (See GetDataStyle for\ninformation about this method.)\n"}
{"page": 935, "text": "Methods for Graphs in the DataWindow Control\nPage 935\nObsolete method\nGetDataStyleSymbolValue is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetDataStyleSymbolValue ( )\nTable 10.26:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns an integer representing data point's symbol. For a list of values and their meanings,\nsee grSymbolType.\nUsage\nTo find out the symbol associated with a data point, call GetDataStyleSymbol to retrieve the\ninformation, then immediately afterward, call GetDataStyleSymbolValue and examine the\nreturn value.\nThe symbol for a data point overrides the setting for the series.\nSee also\nGetDataStyle\n10.20 GetDataTransparency\nDescription\nObtains the transparency percentage of a data point in a DirectX 3D graph (those with 3D\nrendering).\nApplies to\nDataWindow control\nSyntax\ninteger dwcontrol.GetDataTransparency ( string graphcontrol, integer seriesnumber,\n int datapoint, REF int transparency)\nTable 10.27:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\n"}
{"page": 936, "text": "Methods for Graphs in the DataWindow Control\nPage 936\nArgument\nDescription\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow\ncontrol.\nseriesnumber\nThe number that identifies the series from which you want data.\ndatapoint\nThe number of the data point for which you want the transparency value.\ntransparency\nInteger value for percent transparency. A value of 0 means that the\ndata point is opaque and a value of 100 means that it is completely\ntransparent.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetDataTransparency returns null.\nUsage\nGetDataTransparency retrieves data from any DirectX 3D graph (those with 3D rendering).\nExamples\nThese statements obtain the transparency percentage of data point 3 in the series named Costs\nin the graph gr_computers in the DataWindow control dw_equipment:\ninteger SeriesNbr, rtn, transp_value\n \n// Get the number of the series.\nSeriesNbr = dw_equipment.FindSeries( &\n      \"gr_computers\", \"Costs\")\nrtn = dw_equipment.GetDataTransparency( &\n      \"gr_computers\" , SeriesNbr, 3, transp_value)\nSee also\nFindSeries\nGetSeriesTransparency\nSetSeriesTransparency\nSetDataTransparency\n10.21 GetDataValue\nDescription\nObtains the value of a data point in a series in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetDataValue ( string graphcontrol, \n   integer seriesnumber, long datapoint, REF date datavariable \n   {, grDataType XorY } )\n"}
{"page": 937, "text": "Methods for Graphs in the DataWindow Control\nPage 937\ninteger dwcontrol.GetDataValue ( string graphcontrol, \n   integer seriesnumber, long datapoint, REF datetime datavariable \n   {, grDataType XorY } )\ninteger dwcontrol.GetDataValue ( string graphcontrol, \n   integer seriesnumber, long datapoint, REF double datavariable \n   {, grDataType XorY } )\ninteger dwcontrol.GetDataValue ( string graphcontrol, \n   integer seriesnumber, long datapoint, REF string datavariable \n   {, grDataType XorY } )\ninteger dwcontrol.GetDataValue ( string graphcontrol, \n   integer seriesnumber, long datapoint, REF time datavariable \n   {, grDataType XorY } )\nTable 10.28:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol A string whose value is the name of the graph in the DataWindow control.\nseriesnumber The number that identifies the series from which you want data.\ndatapoint\nThe number of the data point for which you want the value.\ndatavariable\nThe name of a variable that will hold the data value. The variable's datatype\ncan be date, DateTime, double, string, or time. The variable must have the\nsame datatype as the values axis of the graph.\nxory (scatter\ngraph only)\n(optional)\nA value of the grDataType enumerated datatype (in PowerBuilder) specifying\nwhether you want the x or y value of the data point in a scatter graph.\nFor values, see grDataType.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetDataValue returns null.\nUsage\nGetDataValue retrieves data from any graph. The data is stored in datavariable, whose\ndatatype must match the datatype of the graph's values axis, or returned by a method that\ncorresponds to the axis datatype. If the values axis is numeric, you can also use the GetData\nfunction.\nCalling GetDataValue when the datatype of datavariable is not the same as the datatype of\nthe data produces undefined results.\nIf a variable's datatype is non-numeric and the datatype of datavariable is double,\nGetDataValue returns the number of the datapoint in datavariable.\nIf a variable's datatype is date, time, or DateTime, GetDataValue returns 1 when the datatype\nof datavariable is any of those datatypes. However, if the variable's datatype is time and the\ndatatype of datavariable is date, GetDataValue returns 00/00/00 in datavariable, and if the\nvariable's datatype is date and the datatype of datavariable is time, GetDataValue returns\n00:00:00 in datavariable.\nExamples\nThese statements obtain the data value of data point 3 in the series named Costs in the graph\ngr_computers in the DataWindow control dw_equipment:\n"}
{"page": 938, "text": "Methods for Graphs in the DataWindow Control\nPage 938\ninteger SeriesNbr, rtn\ndouble data_value\n \n// Get the number of the series.\nSeriesNbr = dw_equipment.FindSeries( &\n      \"gr_computers\", \"Costs\")\nrtn = dw_equipment.GetDataValue( &\n      \"gr_computers\" , SeriesNbr, 3, data_value)\nSee also\nFindSeries\nObjectAtPointer\n10.22 GetSeriesLabelling\nDescription\nDetermines whether the data for a given series is labeled in a DirectX 3D graph.\nApplies to\nDataWindow control\nSyntax\ninteger dwcontrol.GetSeriesLabelling (string graphcontrol, string series, REF\n boolean value)\nTable 10.29:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph.\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control.\nseries\nThe string that names the series in which you\nwant the series label setting.\nvalue\nA boolean passed by reference to indicate\nwhether the series has labels.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetSeriesLabelling returns null.\nUsage\nGetSeriesLabelling retrieves the data from DirectX 3D Area, Bar, Col, or Line graphs. You\ncannot use this method with DirectX 3D Pie graphs.\nExamples\nThese statements obtain the number of the series and data point for the graph gr_1 in the\nDataWindow control dw_employee and then get the series label setting.\ninteger SeriesNbr, ItemNbr\nboolean refB\n"}
{"page": 939, "text": "Methods for Graphs in the DataWindow Control\nPage 939\nstring ls_SeriesName\ngrObjectType clickedtype\n \n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", & \n      SeriesNbr, ItemNbr)\n \n//Get the name of series\nls_SeriesName = dw_employee.SeriesName(\"gr_1\", & \n      SeriesNbr)\n \n// Get Series label\ndw_employee.GetSeriesLabelling(\"gr_1\", & \n      ls_SeriesName, refB)\nSee also\nGetDataLabelling\nSetDataLabelling\nSetSeriesLabelling\n10.23 GetSeriesStyle\nFinds out the appearance of a series in a graph. The appearance settings for individual data\npoints can override the series settings, so the values obtained from GetSeriesStyle might not\nreflect the current state of the graph. There are several syntaxes, depending on what settings\nyou want.\nTable 10.30:\nTo\nUse\nGet the series' colors\nSyntax 1\nGet the line style and width used by the series\nSyntax 2\nGet the fill pattern for the series\nSyntax 3\nGet the symbol for data points in the series\nSyntax 4\nFind out if the series is an overlay (a series shown as a line on top of\nanother graph type)\nSyntax 5\nGetSeriesStyle provides information about a series. The data points in the series can have\ntheir own style settings. Use SetSeriesStyle to change the style values for a series. Use\nGetDataStyle to get style information for a data point and SetDataStyle to override series\nsettings and set style information for individual data points.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can find out the fill pattern for a data point or a series in a two-dimensional\nline graph, but that fill pattern will not be visible.\n10.23.1 Syntax 1 For the colors of a series\nDescription\nObtains the colors associated with a series in a graph.\nApplies to\n"}
{"page": 940, "text": "Methods for Graphs in the DataWindow Control\nPage 940\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetSeriesStyle ( string graphcontrol, string seriesname,\n grColorType colortype, REF long colorvariable )\nTable 10.31:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesname\nA string whose value is the name of the series for which you want the color.\ncolortype\nA value of the grColorType enumerated datatype (in PowerBuilder)\nspecifying the aspect of the series for which you want the color.\nFor a list of values, see grColorType.\ncolorvariable\nIn PowerBuilder, a long variable in which you want to store the color's RGB\nvalue.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. In PowerBuilder, stores in colorvariable the\nRGB value of the specified series and item. If any argument's value is null, GetSeriesStyle\nreturns null.\nExamples\nThese statements store in the variable color_nbr the background color used for the series PCs\nin the graph gr_computers in the DataWindow control dw_equipment:\nlong color_nbr\n// Get the color.\ndw_equipment.GetSeriesStyle(\"gr_computers\", &\n      \"PCs\", Background!, color_nbr)\nSee also\nGetDataStyle\nGetSeriesStyleColorValue\nFindSeries\nSetDataStyle\nSetSeriesStyle\n10.23.2 Syntax 2 For the line style and width used by a series\nDescription\nObtains the line style and width for a series in a graph.\nApplies to\n"}
{"page": 941, "text": "Methods for Graphs in the DataWindow Control\nPage 941\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetSeriesStyle ( string graphcontrol, string seriesname, REF\n LineStyle linestyle {, REF integer linewidth } )\nTable 10.32:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol A string whose value is the name of the graph in the DataWindow control.\nseriesname\nA string whose value is the name of the series for which you want the line\nstyle information.\nlinestyle\nIn PowerBuilder, a variable of type LineStyle in which you want to store the\nline style of seriesname. For a list of values, see LineStyle.\nlinewidth\n(optional)\nIn PowerBuilder, an integer variable in which you want to store the line width\nfor seriesname. The width is measured in pixels.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. In PowerBuilder, stores in linestyle a value\nof the LineStyle enumerated datatype and in linewidth the width of the line used for the\nspecified series. If any argument's value is null, GetSeriesStyle returns null.\nExamples\nThese statements store in the variables line_style and line_width the line style and width for\nthe series under the mouse pointer in the graph gr_product_data:\nstring SeriesName\ninteger SeriesNbr, Data_Point, line_width\nLineStyle line_style\ngrObjectType MouseHit\n \nMouseHit = dw_equipment.ObjectAtPointer &\n   (\"gr_product_data\", SeriesNbr, Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n    SeriesName = &\n         dw_equipment.SeriesName(\"gr_product_data\", &\n            SeriesNbr)\n \n    dw_equipment.GetSeriesStyle (\"gr_product_data\", &\n         SeriesName, line_style, line_width)\nEND IF\nSee also\nGetDataStyle\nGetDataStyleLineStyle\nGetSeriesStyleLineWidth\nFindSeries\n"}
{"page": 942, "text": "Methods for Graphs in the DataWindow Control\nPage 942\nSetDataStyle\nSetSeriesStyle\n10.23.3 Syntax 3 For the fill pattern of a series\nDescription\nObtains the fill pattern of a series in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetSeriesStyle ( string graphcontrol, string seriesname, REF\n FillPattern fillvariable )\nTable 10.33:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesname\nA string whose value is the name of the series for which you want the style\ninformation.\nfillvariable\nIn PowerBuilder, a variable of type FillPattern in which you want to store\nthe fill pattern value. For a list of values, see FillPattern.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. In PowerBuilder, stores in fillvariable\nidentifying the fill pattern for the specified series. If any argument's value is null,\nGetSeriesStyle returns null.\nExamples\nThis example stores in the variable data_pattern the fill pattern for the series under the pointer\nin the graph gr_depts in the DataWindow control dw_employees. It then sets the fill pattern\nfor the series Total Salary in the graph gr_dept_data to that pattern:\nstring SeriesName\ninteger SeriesNbr, Data_Point\nFillPattern data_pattern\ngrObjectType MouseHit\n \nMouseHit = dw_employees.ObjectAtPointer(\"gr_depts\" , &\n      SeriesNbr, Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n      SeriesName = &\n         dw_employees.SeriesName(\"gr_depts\" , SeriesNbr)\n \n      dw_employees.GetSeriesStyle(\"gr_depts\" , &\n         SeriesName, data_pattern)\n \n"}
{"page": 943, "text": "Methods for Graphs in the DataWindow Control\nPage 943\n      gr_dept_data.SetSeriesStyle(\"Total Salary\", &\n         data_pattern)\nEND IF\nSee also\nGetDataStyle\nGetSeriesStyleFillPattern\nFindSeries\nSetDataStyle\nSetSeriesStyle\n10.23.4 Syntax 4 For the symbol of a series\nDescription\nObtains the symbol used for data points in a series in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetSeriesStyle ( string graphcontrol, string seriesname, REF\n grSymbolType symbolvariable )\nTable 10.34:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesname\nA string whose value is the name of the series for which you want the style\ninformation.\nsymbolvariable In PowerBuilder, the variable of type grSymbolType in which you want to\nstore the symbol value.\nFor a list of values, see grSymbolType.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. In PowerBuilder, stores in symbolvariable a\nvalue of the grSymbolType enumerated datatype for the symbol used for the specified series.\nIf any argument's value is null, GetSeriesStyle returns null.\nExamples\nThis example stores in the variable data_pattern the fill pattern for the series under the pointer\nin the graph gr_depts in the DataWindow control dw_employees. It then sets the fill pattern\nfor the series Total Salary in the graph gr_dept_data to that pattern:\nstring SeriesName\n"}
{"page": 944, "text": "Methods for Graphs in the DataWindow Control\nPage 944\ninteger SeriesNbr, Data_Point\ngrSymbolType symbol\ngrObjectType MouseHit\n \nMouseHit = dw_employees.ObjectAtPointer(\"gr_depts\" , &\n   SeriesNbr, Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n   SeriesName = &\n      dw_employees.SeriesName(\"gr_depts\" , SeriesNbr)\n      dw_employees.GetSeriesStyle(\"gr_depts\" , &\n         SeriesName, symbol\n      gr_dept_data.SetSeriesStyle(\"Total Salary\", &\n         symbol)\nEND IF\nSee also\nGetDataStyle\nGetSeriesStyleSymbolValue\nFindSeries\nSetDataStyle\nSetSeriesStyle\n10.23.5 Syntax 5 For determining whether a series is an overlay\nDescription\nReports whether a series in a graph is an overlay -- whether it is shown as a line on top of\nanother graph type.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.GetSeriesStyle ( string  graphcontrol, string seriesname, REF\n boolean overlayindicator )\nTable 10.35:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesname\nA string whose value is the name of the series for which you want the\noverlay status.\noverlayindicator In PowerBuilder, a boolean variable in which you want to store a\nvalue indicating whether the series is an overlay. GetSeriesStyle sets\noverlayindicator to true if the series is an overlay and false if it is not.\nReturn value\n"}
{"page": 945, "text": "Methods for Graphs in the DataWindow Control\nPage 945\nReturns 1 if it succeeds and -1 if an error occurs. In PowerBuilder, stores in overlayindicator\ntrue if the specified series is an overlay and false if it is not. If any argument's value is null,\nGetSeriesStyle returns null.\nSee also\nGetSeriesStyleOverlayValue\n10.24 GetSeriesStyleColorValue\nDescription\nReturns the color value associated with a series in a graph in a DataWindow object. You\nmust call GetSeriesStyleColor first to retrieve the color information. (See GetSeriesStyle for\ninformation about this method.)\nObsolete method\nGetSeriesStyleColorValue is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetSeriesStyleColorValue ( )\nTable 10.36:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns an RGB color value.\nUsage\nTo find out the color associated with a series, call GetSeriesStyleColor to retrieve the\ninformation, then immediately afterward, call GetSeriesStyleColorValue and examine the\nreturn value.\nSince data points in a series can have their own style settings, the color setting for a series\nmight not match the color for a specific data point within that series.\nSee also\nGetSeriesStyle\n10.25 GetSeriesStyleFillPattern\nDescription\n"}
{"page": 946, "text": "Methods for Graphs in the DataWindow Control\nPage 946\nReturns the fill pattern associated with a series in a graph in a DataWindow object. You\nmust call GetSeriesStyleFill first to retrieve the fill information. (See GetSeriesStyle for\ninformation about this method.)\nObsolete method\nGetSeriesStyleFillPattern is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetSeriesStyleFillPattern ( )\nTable 10.37:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns an integer representing the fill pattern.\nFor a list of values and their meanings, see FillPattern.\nUsage\nTo find out the fill pattern associated with a series, call GetSeriesStyleFill to retrieve the\ninformation, then immediately afterward, call GetSeriesStyleFillPattern and examine the\nreturn value.\nSince data points in a series can have their own style settings, the fill pattern for a series\nmight not match the fill pattern for a specific data point within that series.\nSee also\nGetSeriesStyle\n10.26 GetSeriesStyleLineStyle\nDescription\nReturns the line style associated with a series in a graph in a DataWindow object. You must\ncall GetSeriesStyleLine first to retrieve the line style information. (See GetSeriesStyle for\ninformation about this method.)\nObsolete method\nGetSeriesStyleLineStyle is obsolete and should not be used, because the DataWindow\nWeb Control for ActiveX technology is obsolete.\n"}
{"page": 947, "text": "Methods for Graphs in the DataWindow Control\nPage 947\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetSeriesStyleLineStyle ( )\nTable 10.38:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns an integer representing the line style.\nFor a list of possible values and their meanings, see LineStyle.\nUsage\nTo find out the line width or line style associated with a series, call GetSeriesStyleLine to\nretrieve the information, then immediately afterward, call GetSeriesStyleLineWidth and\nGetSeriesStyleLineStyle and examine the return values.\nSince data points in a series can have their own style settings, the line style for a series might\nnot match the line style for a specific data point within that series.\nSee also\nGetSeriesStyle\nGetDataStyleLineWidth\n10.27 GetSeriesStyleLineWidth\nDescription\nReturns the line width associated with a series in a graph in a DataWindow object. You must\ncall GetSeriesStyleLine first to retrieve the line style information. (See GetSeriesStyle for\ninformation about this method.)\nObsolete method\nGetSeriesStyleLineWidth is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\n"}
{"page": 948, "text": "Methods for Graphs in the DataWindow Control\nPage 948\nnumber dwcontrol.GetSeriesStyleLineWidth ( )\nTable 10.39:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns the width of the line in pixels.\nUsage\nTo find out the line width or line style associated with a series, call GetSeriesStyleLine to\nretrieve the information, then immediately afterward, call GetSeriesStyleLineWidth and\nGetSeriesStyleLineStyle and examine the return values.\nSince data points in a series can have their own style settings, the line width for a series might\nnot match the line width for a specific data point within that series.\nSee also\nGetSeriesStyle\nGetSeriesStyleLineStyle\n10.28 GetSeriesStyleOverlayValue\nDescription\nReturns a value indicating whether a series is an overlay, that is, whether it is shown on top\nof another graph type. You must call GetSeriesStyleOverlay first to retrieve the overlay\ninformation. (See GetSeriesStyle for information about this method.)\nObsolete method\nGetSeriesStyleOverlayValue is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nboolean dwcontrol.GetSeriesStyleOverlayValue ( )\nTable 10.40:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\n"}
{"page": 949, "text": "Methods for Graphs in the DataWindow Control\nPage 949\nReturns true if the series is an overlay and false if it is not.\nUsage\nTo find out whether a series is an overlay, call GetSeriesStyleOverlay to retrieve the\ninformation, then immediately afterward, call GetSeriesStyleOverlayValue and examine the\nreturn value.\nSee also\nGetSeriesStyle\n10.29 GetSeriesStyleSymbolValue\nDescription\nReturns the symbol associated with a series in a graph in a DataWindow object. You must\ncall GetSeriesStyleLine first to retrieve the line style information. (See GetSeriesStyle for\ninformation about this method.)\nObsolete method\nGetSeriesStyleSymbolValue is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.GetSeriesStyleSymbolValue ( )\nTable 10.41:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns an integer representing a data point's symbol.\nFor a list of values and their meanings, see grSymbolType.\nUsage\nTo find out the symbol associated with a series, call GetSeriesStyleSymbol to retrieve the\ninformation, then immediately afterward, call GetSeriesStyleSymbolValue and examine the\nreturn value.\nSince data points in a series can have their own style settings, the symbol for a series might\nnot match the symbol for a specific data point within that series.\nSee also\n"}
{"page": 950, "text": "Methods for Graphs in the DataWindow Control\nPage 950\nGetSeriesStyle\n10.30 GetSeriesTransparency\nDescription\nObtains the transparency percentage of a series in a DirectX 3D graph (those with 3D\nrendering).\nApplies to\nDataWindow control\nSyntax\ninteger dwcontrol.GetSeriesTransparency ( string graphcontrol, string series, REF\n int transparency)\nTable 10.42:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseries\nThe string that identifies the series from which you want the transparency\nvalue.\ntransparency\nInteger value for percent transparency. A value of 0 means that the series is\nopaque and a value of 100 means that it is completely transparent.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nGetSeriesTransparency returns null.\nUsage\nGetSeriesTransparency retrieves data from any DirectX 3D graph (those with 3D rendering).\nExamples\nThese statements obtain the transparency percentage of the series named Costs in the graph\ngr_computers in the DataWindow control dw_equipment:\ninteger SeriesNbr, rtn, ser_transp_value\n \n// Get the number of the series.\nSeriesNbr = dw_equipment.FindSeries( &\n      \"gr_computers\", \"Costs\")\nrtn = dw_equipment.GetSeriesTransparency( &\n      \"gr_computers\" , SeriesNbr, ser_transp_value)\nSee also\nFindSeries\nGetDataTransparency\nSetDataTransparency\nSetSeriesTransparency\n"}
{"page": 951, "text": "Methods for Graphs in the DataWindow Control\nPage 951\n10.31 ObjectAtPointer\nDescription\nFinds out where the user clicked in a graph. ObjectAtPointer reports the region of the graph\nunder the pointer and stores the associated series and data point numbers in the designated\nvariables.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ngrObjectType dwcontrol.ObjectAtPointer ( string graphcontrol, REF integer\n seriesnumber, REF integer datapoint )\nTable 10.43:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nIn PowerBuilder, an integer variable in which you want to store the number\nof the series under the pointer.\ndatapoint\nIn PowerBuilder, an integer variable in which you want to store the number\nof the data point under the pointer.\nReturn value\nReturns a value of the grObjectType enumerated datatype identifying the type of object under\nthe pointer if the user clicks anywhere in the graph (including an empty area) and a null value\nif the user clicks outside the graph.\nFor a list of type values, see grObjectType.\nUsage\nThe ObjectAtPointer function allows you to find out how the user is interacting with the\ngraph. The function returns a value of the grObjectType enumerated datatype identifying the\npart of the graph. When the user clicks in a series, data point, or category, ObjectAtPointer\nstores the series and/or data point numbers in designated variables.\nWhen the user clicks a data point (or other data mark, such as line or bar), or on the series\nlabels in the legend, ObjectAtPointer stores the series number in the designated variable.\nWhen the user clicks on a data point or category tickmark label, ObjectAtPointer stores the\ndata point number in the designated variable.\nWhen the user clicks in a series, but not on the actual data point, ObjectAtPointer stores 0 in\ndatapoint and when the user clicks in a category, ObjectAtPointer stores 0 in seriesnumber.\nWhen the user clicks other parts of the graph, ObjectAtPointer stores 0 in both variables.\nExamples\nPowerBuilder\n"}
{"page": 952, "text": "Methods for Graphs in the DataWindow Control\nPage 952\nThese statements store the series number and data point number at the pointer location in\nthe graph named gr_computers in the DataWindow control dw_equipment in SeriesNbr and\nItemNbr:\ninteger SeriesNbr, ItemNbr\ndw_equipment.ObjectAtPointer(\"gr_computers\", &\n      SeriesNbr, ItemNbr)\n10.32 ObjectAtPointerDataPoint\nDescription\nReturns the number of the data point under the pointer. You must call ObjectAtPointer first to\nretrieve the pointer position information.\nObsolete method\nObjectAtPointerDataPoint is obsolete and should not be used, because the\nDataWindow Web Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.ObjectAtPointerDataPoint ( )\nTable 10.44:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns the number of the data point.\nUsage\nTo find out the data point and series under the pointer, call ObjectAtPointer to retrieve\nthe information, then immediately afterward, call ObjectAtPointerDataPoint and\nObjectAtPointerSeries and examine the return values.\nSee also\nObjectAtPointer\nObjectAtPointerSeries\n10.33 ObjectAtPointerSeries\nDescription\n"}
{"page": 953, "text": "Methods for Graphs in the DataWindow Control\nPage 953\nReturns the number of the series under the pointer. You must call ObjectAtPointer first to\nretrieve the pointer position information.\nObsolete method\nObjectAtPointerSeries is obsolete and should not be used, because the DataWindow\nWeb Control for ActiveX technology is obsolete.\nApplies to\nDataWindow Web ActiveX\nDataWindow control\nSyntax\nWeb ActiveX\nnumber dwcontrol.ObjectAtPointerSeries ( )\nTable 10.45:\nArgument\nDescription\ndwcontrol\nA reference to a DataWindow control\ncontaining the graph\nReturn value\nReturns the number of the series.\nUsage\nTo find out the data point and series under the pointer, call ObjectAtPointer to retrieve\nthe information, then immediately afterward, call ObjectAtPointerDataPoint and\nObjectAtPointerSeries and examine the return values.\nSee also\nObjectAtPointer\nObjectAtPointerDataPoint\n10.34 Reset\nDescription\nDeletes the data, the categories, or the series from a graph.\nReset is for graphs within a DataWindow object with an external data source. It does not\napply to other graphs in DataWindow objects because their data comes directly from the\nDataWindow.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\n"}
{"page": 954, "text": "Methods for Graphs in the DataWindow Control\nPage 954\ninteger dwcontrol.Reset ( grResetType graphresettype )\nTable 10.46:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphresettype\nA value of the grResetType enumerated datatype specifying whether you\nwant to delete only data values or all series and all data values:\n\u2022 All! -- Delete all series, categories, and data in dwcontrol.\n\u2022 Category! -- Delete categories and data in dwcontrol.\n\u2022 Data! -- Delete data in dwcontrol.\n\u2022 Series! -- Delete the series and data in dwcontrol.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, Reset returns\nnull. The return value is usually not used.\nUsage\nUse Reset to clear the data in a graph before you add new data.\nExamples\nPowerBuilder\nThis statement deletes the series and data, but leaves the categories, in the graph\ngr_product_data in the DataWindow dw_prod. The DataWindow object has an external data\nsource:\ndw_prod.Reset(\"gr_product_data\", Series!)\n10.35 ResetDataColors\nDescription\nRestores the color of a data point to the default color for its series.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.ResetDataColors ( string graphcontrol, integer seriesnumber, long\n datapointnumber )\nTable 10.47:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph\n"}
{"page": 955, "text": "Methods for Graphs in the DataWindow Control\nPage 955\nArgument\nDescription\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control\nseriesnumber\nThe number of the series in which you want\nto reset the color of a data point\ndatapointnumber\nThe number of the data point for which you\nwant to reset the color\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nResetDataColors returns null.\nDefault color for data points\nTo set the color for a series, use SetSeriesStyle. The color you set for the series is the\ndefault color for all data points in the series.\nExamples\nPowerBuilder\nThese statements change the color of data point 10 in the series named Costs in the graph\ngr_computers in the DataWindow control dw_equipment to the color for the series:\nSeriesNbr = dw_equipment.FindSeries(\"gr_computers\", &\n      \"Costs\")\ndw_equipment.ResetDataColors(\"gr_computers\", &\n      SeriesNbr, 10)\nSee also\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\nSetSeriesStyle\n10.36 SaveAs\nDescription\nSaves the data in a graph in the format you specify.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SaveAs ( string graphcontrol {, string filename, SaveAsType\n saveastype, boolean colheading { , encoding } } )\n"}
{"page": 956, "text": "Methods for Graphs in the DataWindow Control\nPage 956\nTable 10.48:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nfilename\n(optional)\nA string whose value is the name of the file in which you want to save the\ndata in the graph. If you omit filename or specify an empty string (\"\"), the\nuser is prompted for a file name.\nsaveastype\n(optional)\nA value of the SaveAsType enumerated datatype (in PowerBuilder)\nspecifying the format in which to save the data represented in the graph.\nFor a list of values, see SaveAsType.\ncolheading\n(optional)\nA boolean value indicating whether you want column headings with\nthe saved data. The default value is true. This argument is used for the\nfollowing formats: Clipboard, CSV, Excel, and Text. For most other\nformats, column headings are always saved.\nencoding\n(optional)\nCharacter encoding of the file to which the data is saved. This parameter\napplies only to the following formats: TEXT, CSV, SQL, HTML, and DIF.\nIf you do not specify an encoding parameter, the file is saved in ANSI\nformat. Values are:\n\u2022 EncodingANSI! (default)\n\u2022 EncodingUTF8!\n\u2022 EncodingUTF16LE!\n\u2022 EncodingUTF16BE!\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SaveAs\nreturns null.\nIf you do not specify any arguments, PowerBuilder saves the DataWindow data rather than\nthe data in the graph control. In this case, or in the case where you specify only the graph\ncontrol name as an argument, PowerBuilder displays the Save As dialog box, letting the user\nspecify the format of the saved data.\nExamples\nPowerBuilder\nThis statement saves the contents of gr_computers in the DataWindow control dw_equipmt\nto the file G:\\INVENTORY\\SALES.XLS. The format is comma-separated values with\ncolumn headings:\ndw_equipmt.SaveAs(\"gr_computers\", &\n      \"G:\\INVENTORY\\SALES.XLS\", CSV!, true)\nSee also\nPrint\n"}
{"page": 957, "text": "Methods for Graphs in the DataWindow Control\nPage 957\nSaveAs\n10.37 SeriesCount\nDescription\nCounts the number of series in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SeriesCount ( string graphcontrol )\nTable 10.49:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control\nReturn value\nReturns the number of series in the graph if it succeeds and -1 if an error occurs. If any\nargument's value is null, SeriesCount returns null.\nExamples\nPowerBuilder\nThese statements store in the variable li_series_count the number of series in the graph\ngr_computers in the DataWindow control dw_equipment:\ninteger li_series_count\nli_series_count = &\n      dw_equipment.SeriesCount(\"gr_computers\")\nSee also\nCategoryCount\nDataCount\n10.38 SeriesName\nDescription\nObtains the series name associated with the specified series number.\nApplies to\nPowerBuilder DataWindow\n"}
{"page": 958, "text": "Methods for Graphs in the DataWindow Control\nPage 958\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SeriesName ( string graphcontrol, integer seriesnumber )\nTable 10.50:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control\nseriesnumber\nThe number of the series for which you want\nto obtain the name\nReturn value\nReturns the name assigned to the series. If an error occurs, it returns the empty string (\"\"). If\nany argument's value is null, SeriesName returns null.\nUsage\nSeries are numbered consecutively, from 1 to the value returned by SeriesCount. When you\ndelete a series, the series are renumbered to keep the numbering consecutive. You can use\nSeriesName to find out the name of the series associated with a series number.\nExamples\nPowerBuilder\nThese statements store in the variable ls_SeriesName the name of series 5 in the graph\ngr_computers in the DataWindow control dw_equipment:\nstring ls_SeriesName\nls_SeriesName = &\n      dw_equipment.SeriesName(\"gr_computers\", 5)\nSee also\nCategoryName\nGetData\n10.39 SetDataLabelling\nDescription\nSet the data label for a DirectX 3D graph.\nApplies to\nDataWindow control\nSyntax\ninteger dwcontrol.SetDataLabelling (string graphcontrol, int seriesnumber, int\n datapoint, boolean value)\n"}
{"page": 959, "text": "Methods for Graphs in the DataWindow Control\nPage 959\nTable 10.51:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph.\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control.\nseriesnumber\nThe number that identifies the series in which\nyou want to set the data labelling value.\ndatapoint\nThe datapoint.\nvalue\nIndicates whether to label the data with its\nvalue.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetDataLabelling returns null.\nUsage\nSetDataLabelling\nis used to indicate whether or not to label the data with the numbers for data in DirectX 3D\nArea, Bar, Col, or Line graphs. You cannot use this method with DirectX 3D Pie graphs.\nExamples\nThese statements obtain the series and datapoint for the graph gr_1 in the DataWindow\ncontrol dw_employee.\ninteger SeriesNbr, ItemNbr\ngrObjectType clickedtype\n \n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", & \n      SeriesNbr, ItemNbr)\n \n// Set data label\ndw_employee.SetDataLabelling(\"gr_1\", & \n      SeriesNbr, ItemNbr, true)\nSee also\nGetDataLabelling\nGetSeriesLabelling\nSetSeriesLabelling\n10.40 SetDataPieExplode\nDescription\nExplodes a pie slice in a pie graph. The exploded slice is moved away from the center of the\npie, which draws attention to the data. You can explode any number of slices of the pie.\nApplies to\n"}
{"page": 960, "text": "Methods for Graphs in the DataWindow Control\nPage 960\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetDataPieExplode ( string graphcontrol, integer seriesnumber,\n integer datapoint, integer percentage )\nTable 10.52:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nThe number that identifies the series.\ndatapoint\nThe number of the data point (that is, the pie slice) to be exploded.\npercentage\nA number between 0 and 100 that is the percentage of the radius that the pie\nslice is moved away from the center. When percentage is 100, the tip of the\nslice is even with the circumference of the pie's circle.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetDataPieExplode returns null.\nUsage\nIf the graph is not a pie graph, SetDataPieExplode has no effect.\nExamples\nPowerBuilder\nThis example explodes the pie slice under the pointer to 50% when the user double-clicks\nwithin the graph. The code checks the property GraphType to make sure the graph is a pie\ngraph. It then finds out whether the user clicked on a pie slice by checking the series and\ndata point values set by ObjectAtPointer. The script is for the DoubleClicked event of the\nDataWindow control:\ninteger series, datapoint\ngrObjectType clickedtype\ninteger percentage\n \npercentage = 50\nIF (This.GraphType <> PieGraph! AND &\n      This.GraphType <> Pie3D!) THEN RETURN\n \nclickedtype = This.ObjectAtPointer( \"gr_equipment\", &\n      series, datapoint)\n \nIF (series > 0 and datapoint > 0) THEN\n      This.SetDataPieExplode(\"gr_equipment\", series, &\n         datapoint, percentage)\nEND IF\nSee also\nGetDataPieExplode\n"}
{"page": 961, "text": "Methods for Graphs in the DataWindow Control\nPage 961\n10.41 SetDataStyle\nSpecifies the appearance of a data point in a graph. The data point's series has appearance\nsettings that you can override with SetDataStyle.\nTable 10.53:\nTo\nUse\nSet the data point's colors\nSyntax 1\nSet the line style and width for the data point\nSyntax 2\nSet the fill pattern for the data point\nSyntax 3\nSet the symbol for the data point\nSyntax 4\n10.41.1 Syntax 1 For setting a data point's colors\nDescription\nSpecifies the colors of a data point in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetDataStyle ( string graphcontrol, integer seriesnumber, integer\n datapointnumber, grColorType colortype, long color )\nTable 10.54:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nThe number of the series in which you want to set the color of a data point.\ndatapointnumberThe number of the data point for which you want to set the color.\ncolortype\nA value of the grColorType enumerated datatype (in PowerBuilder)\nspecifying the aspect of the data point for which you want to set the color.\nFor a list of values, see grColorType.\ncolor\nA long whose value is the new color for colortype.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetDataStyle\nreturns null.\nUsage\nTo change the appearance of a series, use SetSeriesStyle. The settings you make for the series\nare the defaults for all data points in the series.\n"}
{"page": 962, "text": "Methods for Graphs in the DataWindow Control\nPage 962\nTo reset the color of individual points back to the series color, call ResetDataColors.\nYou can specify the appearance of a data point in the graph before the application draws\nthe graph. To do so, define a user event for pbm_dwngraphcreate and call SetDataStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nUsing SetDataStyle with DirectX 3D Graphs\nYou can only set the color for the foreground. Background, line color, and shade are\nnot supported.\nExamples\nPowerBuilder\nThese statements set the text (foreground) color to black for data point 6 in the series named\nSalary in the graph gr_depts in the DataWindow control dw_employees:\ninteger SeriesNbr\n \n// Get the number of the series\nSeriesNbr = &\n      dw_employees.FindSeries(\"gr_depts\" , \"Salary\")\n \n// Set the background color\ndw_employees.SetDataStyle(\"gr_depts\" , SeriesNbr, &\n      6, Background!, 0)\nSee also\nGetDataStyle\nGetSeriesStyle\nResetDataColors\nSetSeriesStyle\n10.41.2 Syntax 2 For the line associated with a data point\nDescription\nSpecifies the style and width of a data point's line in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetDataStyle ( string graphcontrol, integer seriesnumber, integer\n datapointnumber, LineStyle linestyle {, integer linewidth } )\nTable 10.55:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\n"}
{"page": 963, "text": "Methods for Graphs in the DataWindow Control\nPage 963\nArgument\nDescription\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow\ncontrol.\nseriesnumber\nThe number of the series in which you want to set the line style and\nwidth of a data point.\ndatapointnumber\nThe number of the data point for which you want to set the line style\nand width.\nlinestyle\nA value of the LineStyle enumerated datatype (in PowerBuilder)\nspecifying a line style pattern of dots, dashes, and solid lines. For a list\nof line style values, see LineStyle.\nlinewidth (optional\nfor PowerBuilder)\nAn integer whose value is the width of the line in pixels.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetDataStyle\nreturns null.\nUsage\nTo change the appearance of a series, use SetSeriesStyle. The settings you make for the series\nare the defaults for all data points in the series.\nYou can specify the appearance of a data point in the graph before the application draws\nthe graph. To do so, define a user event for pbm_dwngraphcreate and call SetDataStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nExamples\nPowerBuilder\nThis example checks the line style used for data point 10 in the series named Costs in\nthe graph gr_computers in the DataWindow control dw_equipment. If it is dash-dot, the\nSetDataStyle sets it to continuous. The line width stays the same:\ninteger SeriesNbr, line_width\nLineStyle line_style\n \n// Get the number of the series\nSeriesNbr = dw_equipment.FindSeries( &\n      \"gr_computers\", \"Costs\")\n \n// Get the current line style\ndw_equipment.GetDataStyle(\"gr_computers\", &\n      SeriesNbr, 10, line_style, line_width)\n \n// If the pattern is dash-dot, change to continuous\nIF line_style = DashDot! THEN &\n      dw_equipment.SetDataStyle(\"gr_computers\", &\n      SeriesNbr, 10, Continuous!, line_width)\nSee also\nGetDataStyle\nGetSeriesStyle\n"}
{"page": 964, "text": "Methods for Graphs in the DataWindow Control\nPage 964\nSetSeriesStyle\n10.41.3 Syntax 3 For the fill pattern of a data point\nDescription\nSpecifies the fill pattern for a data point in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetDataStyle ( string graphcontrol, integer seriesnumber, integer\n datapointnumber, FillPattern fillvalue )\nTable 10.56:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol A string whose value is the name of the graph in the DataWindow control.\nseriesnumber The number of the series in which you want to set the appearance of a data\npoint.\ndatapointnumber\nThe number of the data point for which you want to set the appearance.\nfillvalue\nA value of the FillPattern enumerated datatype (in PowerBuilder) specifying\nthe fill pattern for the data point.\nFor a list of values, see FillPattern.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetDataStyle\nreturns null.\nUsage\nTo change the appearance of a series, use SetSeriesStyle. The settings you make for the series\nare the defaults for all data points in the series.\nYou can specify the appearance of a data point in the graph before the application draws\nthe graph. To do so, define a user event for pbm_dwngraphcreate and call SetDataStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nUsing SetDataStyle with DirectX 3D Graphs\nYou cannot use a fill pattern for a data point.\nSee also\nGetDataStyle\n"}
{"page": 965, "text": "Methods for Graphs in the DataWindow Control\nPage 965\nGetSeriesStyle\nSetSeriesStyle\n10.41.4 Syntax 4 For the symbol of a data point\nDescription\nSpecifies the symbol for a data point in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetDataStyle ( string graphcontrol, integer seriesnumber, integer\n datapointnumber, grSymbolType symbolvalue )\nTable 10.57:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nThe number of the series in which you want to set the appearance of a data\npoint.\ndatapointnumberThe number of the data point for which you want to set the appearance.\nsymbolvalue\nA value of the grSymbolType enumerated datatype (in PowerBuilder)\nspecifying the symbol for the data point.\nFor a list of values, see grSymbolType.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null, SetDataStyle\nreturns null.\nUsage\nTo change the appearance of a series, use SetSeriesStyle. The settings you make for the series\nare the defaults for all data points in the series.\nYou can specify the appearance of a data point in the graph before the application draws\nthe graph. To do so, define a user event for pbm_dwngraphcreate and call SetDataStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nUsing SetDataStyle with DirectX 3D Graphs\nYou cannot specify specific symbols for the data point.\nSee also\n"}
{"page": 966, "text": "Methods for Graphs in the DataWindow Control\nPage 966\nGetDataStyle\nGetSeriesStyle\nSetSeriesStyle\n10.42 SetDataTransparency\nDescription\nSets the transparency percentage for a data point in a series in a DirectX 3D graph.\nApplies to\nDataWindow control\nSyntax\ninteger dwcontrol.SetDataTransparency ( string graphcontrol, integer seriesnumber,\n int datapoint, int transparency)\nTable 10.58:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\nseriesnumber\nThe number that identifies the series in which you want to set the\ntransparency value of a data point.\ndatapoint\nThe number of the data point for which you want to set a transparency\nvalue.\ntransparency\nInteger value for percent transparency. A value of 0 means that the data\npoint is opaque and a value of 100 means that it is completely transparent.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetDataTransparency returns null.\nUsage\nSetDataTransparency sets the transparency value of a data point in any DirectX 3D graph\n(those with 3D rendering).\nExamples\nThese statements set the transparency percentage to 50% for data point 3 in the series named\nCosts in the graph gr_1 in the DataWindow control dw_employee:\ninteger SeriesNbr, ItemNbr, TransNbr\ngrObjectType clickedtype\n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", &\n      SeriesNbr, ItemNbr)\n//The following statement sets Transparency to 50%\nTransNbr = 50\n      \ndw_employee.SetDataTransparency(\"gr_1\", &\n      SeriesNbr, ItemNbr, TransNbr)\n"}
{"page": 967, "text": "Methods for Graphs in the DataWindow Control\nPage 967\nSee also\nFindSeries\nGetDataTransparency\nGetSeriesTransparency\nSetSeriesTransparency\n10.43 SetSeriesLabelling\nDescription\nSet the series label for a DirectX 3D graph.\nApplies to\nDataWindow control\nSyntax\ninteger dwcontrol.SetSeriesLabelling (string graphcontrol, string series, boolean\n value)\nTable 10.59:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph.\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control.\nseries\nThe string that names the series in which you\nwant to change the series label setting.\nvalue\nIndicates whether to label the series with its\nvalues.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesLabelling returns null.\nUsage\nSetDataLabelling is used to indicate whether or not to label the series with the data numbers\nfor data in DirectX 3D Area, Bar, Col, or Line graphs. You cannot use this method with\nDirectX 3D Pie graphs.\nExamples\nThese statements obtain the series and datapoint of graph gr_1 and the DataWindow control\ndw_employee.\ninteger SeriesNbr, ItemNbr\nstring ls_SeriesName\ngrObjectType clickedtype\n \n// Get the number of the series and datapoint\n"}
{"page": 968, "text": "Methods for Graphs in the DataWindow Control\nPage 968\nclickedtype = this.ObjectAtPointer(\"gr_1\", & \n      SeriesNbr, ItemNbr)\n \n//Get the name of series\nls_SeriesName = dw_employee.SeriesName(\"gr_1\", & \n      SeriesNbr)\n \n// Set Series label\ndw_employee.SetSeriesLabelling(\"gr_1\", & \n      ls_SeriesName, true)\nSee also\nGetDataLabelling\nGetSeriesLabelling\nSetDataLabelling\n10.44 SetSeriesStyle\nSpecifies the appearance of a series in a graph. There are several syntaxes, depending on\nwhat settings you want to change.\nTable 10.60:\nTo\nUse\nSet the series' colors\nSyntax 1\nSet the line style and width\nSyntax 2\nSet the fill pattern for the series\nSyntax 3\nSet the symbol for the series\nSyntax 4\nSpecify that the series is an overlay\nSyntax 5\n10.44.1 Syntax 1 For setting a series' colors\nDescription\nSpecifies the colors of a series in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetSeriesStyle ( string graphcontrol, string seriesname,\n grColorType colortype, long color )\nTable 10.61:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow control.\n"}
{"page": 969, "text": "Methods for Graphs in the DataWindow Control\nPage 969\nArgument\nDescription\nseriesname\nA string whose value is the name of the series for which you want to set\nthe color.\ncolortype\nA value of the grColorType enumerated datatype specifying the item for\nwhich you want to set the color.\nFor a list of values, see grColorType.\ncolor\nA long specifying an RGB value for the new color.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\nData points in a series can have their own style settings. Settings made with SetDataStyle set\nthe style of individual data points and override series settings.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can set the fill pattern in a two-dimensional line graph or the line style in a\nbar graph, but that fill pattern or line style will not be visible.\nYou can specify the appearance of a series in the graph before the application draws the\ngraph. To do so, define a user event for pbm_dwngraphcreate and call SetSeriesStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nUsing SetSeriesStyle with DirectX 3D Graphs\nYou can only set the color for the foreground. Background, line color, and shade are\nnot supported.\nExamples\nPowerBuilder\nThis statement sets the background color of the series named Salary in the graph gr_depts in\nthe DataWindow control dw_employees to black:\ndw_employees.SetSeriesStyle(\"gr_depts\", &\n      \"Salary\", Background!, 0)\nThese statements in the Clicked event of the graph control gr_product_data coordinate\nline color between it and the graph gr_sales_data. The script stores the line color for the\nseries under the mouse pointer in the graph gr_product_data in the variable line_color.\nThen it sets the line color for the series Northeast in the graph gr_sales_data within the\nDataWindowcontrol dw_sales to that color:\nstring SeriesName\ninteger SeriesNbr, Series_Point\nlong line_color\ngrObjectType MouseHit\nMouseHit = This.ObjectAtPointer( &\n      SeriesNbr,Series_Point)\n \n"}
{"page": 970, "text": "Methods for Graphs in the DataWindow Control\nPage 970\nIF MouseHit = TypeSeries! THEN\n      SeriesName = &\n         gr_product_data.SeriesName(SeriesNbr)\n \n      gr_product_data.GetSeriesStyle(SeriesName, &\n         LineColor!, line_color)\n \n      dw_sales.SetSeriesStyle(\"gr_sales_data\", &\n         \"Northeast\", LineColor!, line_color)\nEND IF\nSee also\nGetDataStyle\nGetSeriesStyle\nSetSeriesStyle\n10.44.2 Syntax 2 For lines in a graph\nDescription\nSpecifies the style and width of a series' lines in a graph.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetSeriesStyle ( string graphcontrol, string seriesname,\n LineStyle linestyle {, integer linewidth } )\nTable 10.62:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow\ncontrol.\nseriesname\nA string whose value is the name of the series for which you want\nto set the line style and width.\nlinestyle\nA value of the LineStyle enumerated datatype (in PowerBuilder)\nspecifying the line style.\nFor a list of values, see LineStyle.\nlinewidth (optional for\nPowerBuilder)\nAn integer specifying the width of the line in pixels.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\n"}
{"page": 971, "text": "Methods for Graphs in the DataWindow Control\nPage 971\nData points in a series can have their own style settings. Settings made with SetDataStyle set\nthe style of individual data points and override series settings.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can set the fill pattern in a two-dimensional line graph or the line style in a\nbar graph, but that fill pattern or line style will not be visible.\nYou can specify the appearance of a series in the graph before the application draws the\ngraph. To do so, define a user event for pbm_dwngraphcreate and call SetSeriesStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nExamples\nPowerBuilder\nThis statement sets the line style and width for the series named Costs in the graph\ngr_product_data in the DataWindow dw_prod:\ndw_prod.SetSeriesStyle(\"gr_product_data\", \"Costs\", &\n      Dot!, 5)\nSee also\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\n10.44.3 Syntax 3 For the fill pattern in a graph\nDescription\nSpecifies the fill pattern for data markers in a series.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetSeriesStyle ( string graphcontrol, string seriesname,\n FillPattern fillvalue )\nTable 10.63:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph.\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control.\nseriesname\nA string whose value is the name of\nthe series in which you want to set the\nappearance.\n"}
{"page": 972, "text": "Methods for Graphs in the DataWindow Control\nPage 972\nArgument\nDescription\nfillvalue\nA value of the FillPattern enumerated\ndatatype specifying the fill pattern for the\nseries.\nFor a list of values, see FillPattern.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\nData points in a series can have their own style settings. Settings made with SetDataStyle set\nthe style of individual data points and override series settings.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can set the fill pattern in a two-dimensional line graph or the line style in a\nbar graph, but that fill pattern or line style will not be visible.\nYou can specify the appearance of a series in the graph before the application draws the\ngraph. To do so, define a user event for pbm_dwngraphcreate and call SetSeriesStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nUsing SetSeriesStyle with DirectX 3D Graphs\nYou cannot use a fill pattern for a series.\nExamples\nPowerBuilder\nThis statement sets the fill pattern used for the series named Costs in the graph gr_computers\nin the DataWindow control dw_equipment to Horizontal:\ndw_equipment.SetSeriesStyle(\"gr_computers\", &\n      \"Costs\", Horizontal!)\nSee also\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\n10.44.4 Syntax 4 For the symbols in a graph\nDescription\nSpecifies the symbol for data markers in a series.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\n"}
{"page": 973, "text": "Methods for Graphs in the DataWindow Control\nPage 973\nSyntax\nPowerBuilder\ninteger dwcontrol.SetSeriesStyle ( string graphcontrol, string seriesname,\n grSymbolType symbolvalue )\nTable 10.64:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph.\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control.\nseriesname\nA string whose value is the name of\nthe series in which you want to set the\nappearance.\nsymbolvalue\nA value of the grSymbolType enumerated\ndatatype specifying the symbol for the series.\nFor a list of values, see grSymbolType.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\nData points in a series can have their own style settings. Settings made with SetDataStyle set\nthe style of individual data points and override series settings.\nThe graph stores style information for properties that do not apply to the current graph type.\nFor example, you can set the fill pattern in a two-dimensional line graph or the line style in a\nbar graph, but that fill pattern or line style will not be visible.\nYou can specify the appearance of a series in the graph before the application draws the\ngraph. To do so, define a user event for pbm_dwngraphcreate and call SetSeriesStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nUsing SetSeriesStyle with DirectX 3D Graphs\nYou cannot specify specific symbols for the data markers in a series.\nExamples\nPowerBuilder\nThis statement sets the symbol for the series named Costs in the graph gr_computers in the\nDataWindow control dw_equipment to X:\ndw_equipment.SetSeriesStyle(\"gr_computers\", &\n      \"Costs\", SymbolX!)\nSee also\n"}
{"page": 974, "text": "Methods for Graphs in the DataWindow Control\nPage 974\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\n10.44.5 Syntax 5 For creating an overlay in a graph\nDescription\nSpecifies whether a series is an overlay, meaning that the series is represented by a line on\ntop of another graph type.\nApplies to\nPowerBuilder DataWindow\nDataWindow control\nSyntax\nPowerBuilder\ninteger dwcontrol.SetSeriesStyle ( string graphcontrol, string series, boolean\n overlaystyle )\nTable 10.65:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control containing the graph.\ngraphcontrol\nA string whose value is the name of the graph in the DataWindow\ncontrol.\nseries\nA string whose value is the name of the series whose overlay status you\nwant to change.\noverlaystyle\nA boolean value indicating whether you want the series to be an overlay,\nmeaning that the series is shown in front as a line. Set overlaystyle to\ntrue to make the specified series an overlay. Set it to false to remove the\noverlay setting.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesStyle returns null.\nUsage\nYou can specify the appearance of a series in the graph before the application draws the\ngraph. To do so, define a user event for pbm_dwngraphcreate and call SetSeriesStyle in\nthe script for that event. The event pbm_dwngraphcreate is triggered just before a graph is\ncreated in a DataWindow object.\nUsing SetSeriesStyle with DirectX 3D Graphs\nYou cannot use the overlay style for a series.\nExamples\n"}
{"page": 975, "text": "Methods for Graphs in the DataWindow Control\nPage 975\nPowerBuilder\nThese statements in the Clicked event of the DataWindow control dw_employees store the\nstyle of the series under the pointer in the graph gr_depts in the variable style_type. If the\nstyle of the series is overlay (true), the script changes the style to normal (false):\nstring SeriesName\ninteger SeriesNbr, Data_Point\nboolean overlay_style\ngrObjectType MouseHit\n \nMouseHit = dw_employees.ObjectAtPointer( &\n      \"gr_depts\", SeriesNbr, Data_Point)\n \nIF MouseHit = TypeSeries! THEN\n      SeriesName = &\n       dw_employees.SeriesName(\"gr_depts\",SeriesNbr)\n \n      dw_employees.GetSeriesStyle(\"gr_depts\", &\n         SeriesName, overlay_style)\n \n      IF overlay_style THEN &\n         dw_employees.SetSeriesStyle(\"gr_depts\", &\n         SeriesName, false)\nEND IF\nSee also\nGetDataStyle\nGetSeriesStyle\nSetDataStyle\n10.45 SetSeriesTransparency\nDescription\nSets the transparency percentage of a series in a DirectX 3D type graph.\nApplies to\nDataWindow control\nSyntax\ninteger dwcontrol.SetSeriesTransparency ( string graphcontrol, stringseries, int\n transparency)\nTable 10.66:\nArgument\nDescription\ndwcontrol\nA reference to the DataWindow control\ncontaining the graph.\ngraphcontrol\nA string whose value is the name of the\ngraph in the DataWindow control.\nseries\nThe string that identifies the series in which\nyou want to set the transparency value.\ntransparency\nInteger value for percentage transparency. A\nvalue of 0 means that the series is opaque and\n"}
{"page": 976, "text": "Methods for Graphs in the DataWindow Control\nPage 976\nArgument\nDescription\na value of 100 means that it is completely\ntransparent.\nReturn value\nReturns 1 if it succeeds and -1 if an error occurs. If any argument's value is null,\nSetSeriesTransparency returns null.\nUsage\nSetSeriesTransparency sets the transparency value for a series in a DirectX 3D graph (those\nwith 3D rendering).\nExamples\nThese statements set the transparency percentage to 50% for the series named Costs in the\ngraph gr_1 in the DataWindow control dw_employee:\ninteger SeriesNbr, ItemNbr, TransNbr\nstring ls_SeriesName\ngrObjectType clickedtype\n \n// Get the number of the series and datapoint\nclickedtype = this.ObjectAtPointer(\"gr_1\", &\n      SeriesNbr, ItemNbr)\n \n//Get the name of series      \nls_SeriesName = dw_employee.SeriesName(\"gr_1\", &\n      SeriesNbr)\n \n//The following statement sets Transparency to 50%\nTransNbr = 50   \n \ndw_employee.SetSeriesTransparency(\"gr_1\", &\n      ls_SeriesName, TransNbr)\nSee also\nFindSeries\nGetSeriesTransparency\nGetDataTransparency\nSetDataTransparency\n"}
{"page": 977, "text": "Index\nPage 977\nIndex\nA\nAboutBox method (DataWindows), 579\nAbs (DataWindow expression function), 43\nAccelerator property (DataWindow object),\n196\nAcceptText method (DataWindows), 579\nAccessibleDescription property\n(DataWindow object), 197\nAccessibleName property (DataWindow\nobject), 198\nAccessibleRole constant (DataWindows),\n509\nAccessibleRole property (DataWindow\nobject), 198\nACos (DataWindow expression function), 43\nAction property (DataWindow object), 199\nActivation property (DataWindow object),\n202\naggregate functions\nAvg, 47\nCount, 54\nCrosstabAvg, 56\nCrosstabAvgDec, 60\nCrosstabCount, 60\nCrosstabMax, 62\nCrosstabMaxDec, 64\nCrosstabMin, 64\nCrosstabMinDec, 66\nCrosstabSum, 67\nCrosstabSumDec, 69\nCumulativePercent, 69\nCumulativeSum, 71\nFirst, 83\nLarge, 97\nLast, 99\nMax, 111\nMedian, 113\nMin, 117\nMode, 120\nPercent, 128\nSmall, 149\nStDev, 152\nStDevP, 154\nSum, 158\nVar, 164\nVarP, 167\nAlignment constant (DataWindows), 511\nAlignment property (DataWindow object),\n203\nArguments property (DataWindow object),\n204\nAsc (DataWindow expression function), 44\nAscA (DataWindow expression function), 45\nASin (DataWindow expression function), 45\nATan (DataWindow expression function), 46\nAttributes property (DataWindow object),\n204\nAvg (DataWindow expression function), 47\nAxis property (DataWindow object), 205\nAxis.property (DataWindow object), 206\nB\nBackColor property (DataWindow object),\n211\nBackground.property (DataWindow object),\n211\nBackImage property (DataWindow object),\n214\nBackTabOut event (DataWindows), 530\nBand constant (DataWindows), 512\nBand property (DataWindow object), 215\nBandname.property (DataWindow object),\n216\nBandname.Text (DataWindow object), 220\nBands property (DataWindow object), 221\nBinaryIndex property (DataWindow object),\n221\nBitmap (DataWindow expression function),\n49\nBitmapName property (DataWindow object),\n222\nBorder constant (DataWindows), 512\nBorder property (DataWindow object), 222\nBorderStyle constant (DataWindows), 513\nBrush.property (DataWindow object), 224\nBrushmode property (DataWindow object),\n225\nButton controls\nin DataWindow objects, 179\nButtonClicked event (DataWindows), 531\nButtonClicking event (DataWindows), 532\nC\nCanUndo method (DataWindows), 582\nCase (DataWindow expression function), 50\n"}
{"page": 978, "text": "Index\nPage 978\nCategory property (DataWindow object), 227\nCategoryCount method (Graphs in\nDataWindows), 914\nCategoryName method (Graphs in\nDataWindows), 915\nCeiling (DataWindow expression function),\n51\nChar (DataWindow expression function), 52\nCharA (DataWindow expression function),\n53\nCharSet constant (DataWindows), 513\nCheckBox.property (DataWindow object),\n227\nClassName method (DataWindows), 583\nClear method (DataWindows), 583\nClearValues method (DataWindows), 584\nClicked event (DataWindows), 533\nClientName property (DataWindow object),\n229\nClipboard method (Graphs in DataWindows),\n915\nCollapse method (DataWindows), 585\nCollapseAll method (DataWindows), 586\nCollapseAllChildren method\n(DataWindows), 587\nCollapsed event (DataWindows), 535\nCollapseLevel method (DataWindows), 588\nCollapsing event (DataWindows), 536\nColor property (DataWindow object), 229\nColType property (DataWindow object), 231\nColumn controls\nin DataWindow objects, 180\nColumn.Count (DataWindow object), 232\nComputed Field controls\nin DataWindow objects, 182\nConstructor event (DataWindows), 536\nContentsAllowed property (DataWindow\nobject), 233\nCopy method (DataWindows), 590\nCopyRTF method (DataWindows), 591\nCos (DataWindow expression function), 53\nCount (DataWindow expression function), 54\nCreate method (DataWindows), 593\nCreateError method (DataWindows), 595\nCreateFrom method (DataWindows), 596\nCriteria property (DataWindow object), 233\nCriteria.property (DataWindow object), 234\nCrosstab.property (DataWindow object), 236\nCrosstabAvg (DataWindow expression\nfunction), 56\nCrosstabAvgDec (DataWindow expression\nfunction), 60\nCrosstabCount (DataWindow expression\nfunction), 60\nCrosstabDialog method (DataWindows), 598\nCrosstabMax (DataWindow expression\nfunction), 62\nCrosstabMaxDec (DataWindow expression\nfunction), 64\nCrosstabMin (DataWindow expression\nfunction), 64\nCrosstabMinDec (DataWindow expression\nfunction), 66\nCrosstabSum (DataWindow expression\nfunction), 67\nCrosstabSumDec (DataWindow expression\nfunction), 69\nCSSGen.property (DataWindow object), 237\nCumulativePercent (DataWindow expression\nfunction), 69\nCumulativeSum (DataWindow expression\nfunction), 71\nCurrentRow (DataWindow expression\nfunction), 73\nCut method (DataWindows), 599\nD\nData property (DataWindow object), 239\nData.HTML (DataWindow object), 239\nData.HTMLTable (DataWindow object), 240\nData.XHTML (DataWindow object), 242\nData.XML (DataWindow object), 243\nData.XMLDTD (DataWindow object), 244\nData.XMLSchema (DataWindow object),\n244\nData.XMLWeb property (DataWindow\nobject), 245\nData.XSLFO property (DataWindow object),\n246\nDataCount method (Graphs in\nDataWindows), 916\nDataObject property (DataWindow object),\n246\nDataStore\nproperties, 524\nDataWindow constants\n"}
{"page": 979, "text": "Index\nPage 979\nabout, 508\nlist, 508\nDataWindow Control\nproperties, 524\nDataWindow control\nmethods, 579\nDataWindow data expressions\nabout, 465\nsyntax, 471\nDataWindow events\ncategories, 528\ncross-reference, 530\nlist, 530\nDataWindow expression functions\nexamples, 34\nfunction list, 42\nuse, 32\nDataWindow expressions, 21\narithmetic operators, 23\nconcatenation operators, 28\ndecimal support, 33\nevaluate in Describe function, 30\nevaluate in scripts, 29\nevaluate with current data, 30\nlogical operators, 27\noperator precedence, 29\nrelational operators, 24\nuse as property values, 485\nDataWindow object properties, 171\naccess property values in code, 484\nModify and Describe methods, 490\nnested strings and special characters, 488\nspecify property values in the\nDataWindow painter, 484\nDataWindow operators, 21\nDataWindow property expressions\n(PowerBuilder)\nbasic structure, 493\nbasic syntax, 499\ndata type, 493\nhandle errors, 497\nsyntax for nested objects, 502\nwhen is evaluated, 497\nDate (DataWindow expression function), 74\nDateTime (DataWindow expression\nfunction), 75\nDay (DataWindow expression function), 76\nDayName (DataWindow expression\nfunction), 76\nDayNumber (DataWindow expression\nfunction), 77\nDaysAfter (DataWindow expression\nfunction), 78\ndbAlias property (DataWindow object), 247\nDBCancel method (DataWindows), 600\nDBError event (DataWindows), 537\nDBErrorCode method (DataWindows), 602\nDBErrorMessage method (DataWindows),\n603\ndbName property (DataWindow object), 248\ndddw.property (DataWindow object), 249\nddlb.property (DataWindow object), 253\nDec (DataWindow expression function), 79\nDefaultPicture property (DataWindow\nobject), 256\nDeletedCount method (DataWindows), 605\nDeleteRow method (DataWindows), 606\nDepth property (DataWindow object), 257\nDescribe (DataWindow expression function),\n80\nDescribe method (DataWindows), 607\nDestructor event (DataWindows), 539\nDetail.property (DataWindow object), 258\nDispAttr.fontproperty (DataWindow object),\n258\nDisplayType property (DataWindow object),\n262\nDoubleClicked event (DataWindows), 539\nDrag method (DataWindows), 612\nDragDrop event (DataWindows), 541\nDragEnter event (DataWindows), 542\nDragLeave event (DataWindows), 542\nDragWithin event (DataWindows), 543\nDropDown event (DataWindows), 544\nDWBuffer constant (DataWindows), 514\nDWConflictResolution constant\n(DataWindows), 514\nDWItemStatus constant (DataWindows), 515\nDWObject arguments\nfor DataWindow events in PowerBuilder,\n495\nDWObject variables\nin PowerBuilder, 495\n"}
{"page": 980, "text": "Index\nPage 980\nE\nEdit.property (DataWindow object), 263\nEditChanged event (DataWindows), 544\nEditMask.property (DataWindow object),\n267\nElevation property (DataWindow object),\n270\nEllipseHeight property (DataWindow\nobject), 271\nEllipseWidth property (DataWindow object),\n272\nEnabled property (DataWindow object), 273\nError event (DataWindows), 545\nevaluate DataWindow expressions\nin scripts, 29\nin the Describe function, 30\nwith current data, 30\nExp (DataWindow expression function), 81\nExpand method (DataWindows), 613\nExpandAll method (DataWindows), 614\nExpandAllChildren method (DataWindows),\n615\nExpanded event (DataWindows), 547\nExpanding event (DataWindows), 548\nExpandLevel method (DataWindows), 616\nExport.PDF.Distill.CustomPostScript\nproperty (DataWindow object), 273\nExport.PDF.Method property (DataWindow\nobject), 275\nExport.PDF.NativePDF.Author property\n(DataWindow object), 277\nExport.PDF.NativePDF.CustomOrientation\nproperty (DataWindow object), 278\nExport.PDF.NativePDF.CustomSize property\n(DataWindow object), 279\nExport.PDF.NativePDF.ImageFormat\nproperty (DataWindow object), 280\nExport.PDF.NativePDF.Keywords property\n(DataWindow object), 282\nExport.PDF.NativePDF.MasterPassword\nproperty (DataWindow object), 283\nExport.PDF.NativePDF.PDFStandard\nproperty (DataWindow object), 284\nExport.PDF.NativePDF.Restrictions property\n(DataWindow object), 286\nExport.PDF.NativePDF.Subject property\n(DataWindow object), 288\nExport.PDF.NativePDF.UsePrintSpec\nproperty (DataWindow object), 291\nExport.PDF.NativePDF.UserPassword\nproperty (DataWindow object), 289\nExport.PDF.XSLFOP.Print property\n(DataWindow object), 292\nExport.XHTML.TemplateCount property\n(DataWindow object), 293\nExport.XHTML.UseTemplate property\n(DataWindow object), 295\nExport.XML.HeadGroups property\n(DataWindow object), 296\nExport.XML.IncludeWhitespace property\n(DataWindow object), 296\nExport.XML.MetaDataType property\n(DataWindow object), 297\nExport.XML.SaveMetaData property\n(DataWindow object), 299\nExport.XML.TemplateCount property\n(DataWindow object), 300\nExport.XML.UseTemplate property\n(DataWindow object), 301\nExportJson method (DataWindows), 617\nExportRowAsJson method (DataWindows),\n625\nExpression property (DataWindow object),\n302\nF\nFact (DataWindow expression function), 81\nFilename property (DataWindow object), 303\nFill (DataWindow expression function), 82\nFillA (DataWindow expression function), 83\nFillPattern constant (DataWindows), 515\nFilter method (DataWindows), 627\nFilteredCount method (DataWindows), 628\nFind method (DataWindows), 629\nFindCategory method (Graphs in\nDataWindows), 917\nFindGroupChange method (DataWindows),\n633\nFindNext method (DataWindows), 635\nFindRequired method (DataWindows), 635\nFindRequiredColumn method\n(DataWindows), 639\nFindRequiredColumnName method\n(DataWindows), 639\n"}
{"page": 981, "text": "Index\nPage 981\nFindRequiredRow method (DataWindows),\n640\nFindSeries method (Graphs in\nDataWindows), 918\nFirst (DataWindow expression function), 83\nFirstRowOnPage property (DataWindow\nobject), 304\nFocusRectangle property (DataWindow\nobject), 304\nFont.Bias property (DataWindow object),\n305\nFont.property (DataWindow object), 306\nFontHeight (DataWindow expression\nfunction), 85\nFooter.property (DataWindow object), 308\nFormat property (DataWindow object), 309\nG\nGenerate method (DataWindows), 641\nGenerateHTMLForm method\n(DataWindows), 643\nGenerateResultSet method (DataWindows),\n644\nGenerateXHTML method (DataWindows),\n646\nGenerateXMLWeb method (DataWindows),\n647\nGetBandAtPointer method (DataWindows),\n648\nGetBorderStyle method (DataWindows), 650\nGetChanges method (DataWindows), 651\nGetChangesBlob method (DataWindows),\n653\nGetChild method (DataWindows), 654\nGetChildObject method (DataWindows), 656\nGetClickedColumn method (DataWindows),\n657\nGetClickedRow method (DataWindows),\n658\nGetColumn method (DataWindows), 659\nGetColumnName method (DataWindows),\n660\nGetContextService method (DataWindows),\n661\nGetData method (Graphs in DataWindows),\n919\nGetDataDateVariable method (Graphs in\nDataWindows), 920\nGetDataLabelling method (Graphs in\nDataWindows), 921\nGetDataNumberVariable method (Graphs in\nDataWindows), 922\nGetDataPieExplode method (Graphs in\nDataWindows), 923\nGetDataPieExplodePercentage method\n(Graphs in DataWindows), 924\nGetDataStringVariable method (Graphs in\nDataWindows), 925\nGetDataStyle method (Graphs in\nDataWindows), 926\nGetDataStyleColorValue method (Graphs in\nDataWindows), 931\nGetDataStyleFillPattern method (Graphs in\nDataWindows), 932\nGetDataStyleLineStyle method (Graphs in\nDataWindows), 933\nGetDataStyleLineWidth method (Graphs in\nDataWindows), 934\nGetDataStyleSymbolValue method (Graphs\nin DataWindows), 934\nGetDataTransparency method (Graphs in\nDataWindows), 935\nGetDataValue method (Graphs in\nDataWindows), 936\nGetFocus event (DataWindows), 549\nGetFormat method (DataWindows), 662\nGetFullContext method (DataWindows), 663\nGetFullState method (DataWindows), 664\nGetFullStateBlob method (DataWindows),\n665\nGetItem method (DataWindows), 666\nGetItemDate method (DataWindows), 667\nGetItemDateTime method (DataWindows),\n670\nGetItemDecimal method (DataWindows),\n672\nGetItemFormattedString method\n(DataWindows), 674\nGetItemNumber method (DataWindows),\n675\nGetItemStatus method (DataWindows), 677\nGetItemString method (DataWindows), 679\nGetItemTime method (DataWindows), 681\nGetItemUnformattedString method\n(DataWindows), 683\nGetLastError method (DataWindows), 684\n"}
{"page": 982, "text": "Index\nPage 982\nGetLastErrorString method (DataWindows),\n685\nGetMessageText method (DataWindows),\n687\nGetNextModified method (DataWindows),\n687\nGetObjectAtPointer method (DataWindows),\n689\nGetPaintDC (DataWindow expression\nfunction), 85\nGetPaintRectHeight (DataWindow\nexpression function), 86\nGetPaintRectWidth (DataWindow expression\nfunction), 87\nGetPaintRectX (DataWindow expression\nfunction), 87\nGetPaintRectY (DataWindow expression\nfunction), 87\nGetParent method (DataWindows), 690\nGetRichTextAlign method (DataWindows),\n691\nGetRichTextColor method (DataWindows),\n692\nGetRichTextFaceName method\n(DataWindows), 693\nGetRichTextSize method (DataWindows),\n694\nGetRichTextStyle method (DataWindows),\n695\nGetRow (DataWindow expression function),\n88\nGetRow method (DataWindows), 696\nGetRowFromRowId method\n(DataWindows), 697\nGetRowIdFromRow method\n(DataWindows), 698\nGetSelectedRow method (DataWindows),\n699\nGetSeriesLabelling method (Graphs in\nDataWindows), 938\nGetSeriesStyle method (Graphs in\nDataWindows), 939\nGetSeriesStyleColorValue method (Graphs\nin DataWindows), 945\nGetSeriesStyleFillPattern method (Graphs in\nDataWindows), 945\nGetSeriesStyleLineStyle method (Graphs in\nDataWindows), 946\nGetSeriesStyleLineWidth method (Graphs in\nDataWindows), 947\nGetSeriesStyleOverlayValue method (Graphs\nin DataWindows), 948\nGetSeriesStyleSymbolValue method (Graphs\nin DataWindows), 949\nGetSeriesTransparency method (Graphs in\nDataWindows), 950\nGetSQLPreview method (DataWindows),\n700\nGetSQLSelect method (DataWindows), 701\nGetStateStatus method (DataWindows), 702\nGetText (DataWindow expression function),\n89\nGetText method (DataWindows), 704\nGetTrans method (DataWindows), 705\nGetUpdateStatus method (DataWindows),\n707\nGetValidate method (DataWindows), 708\nGetValue method (DataWindows), 709\nGradient.property (DataWindow object), 309\nGraph controls\nin DataWindow objects, 184\nGraphCreate event (DataWindows), 549\nGraphs in the DataWindow Control\nmethods, 914\nGraphType property (DataWindow object),\n312\ngrColorType constant (DataWindows), 516\ngrDataType constant (DataWindows), 516\nGrid.ColumnMove property (DataWindow\nobject), 313\nGrid.Lines property (DataWindow object),\n313\ngrObjectType constant (DataWindows), 517\nGroup keyword, 187\nGroupBox controls\nin DataWindow objects, 186\nGroupBy property (DataWindow object), 314\nGroupCalc method (DataWindows), 711\ngrSymbolType constant (DataWindows), 518\nH\nHeader.property (DataWindow object), 316\nHeight property (DataWindow object), 316\nHeight.AutoSize property (DataWindow\nobject), 317\n"}
{"page": 983, "text": "Index\nPage 983\nHeight.HasMinHeight property\n(DataWindow object), 318\nHelp.property (DataWindow object), 319\nHide method (DataWindows), 712\nHideGrayLine property (DataWindow\nobject), 321\nHideSnaked property (DataWindow object),\n321\nHorizontalScrollMaximum property\n(DataWindow object), 323\nHorizontalScrollPosition property\n(DataWindow object), 324\nHorizontalScrollSplit property (DataWindow\nobject), 325\nHour (DataWindow expression function), 89\nHTextAlign property (DataWindow object),\n325\nHTML.property (DataWindow object), 326\nHTMLContextApplied event\n(DataWindows), 550\nHTMLDW property (DataWindow object),\n328\nHTMLGen.property (DataWindow object),\n330\nHTMLTable.property (DataWindow object),\n337\nI\nID property (DataWindow object), 339\nIdentity property (DataWindow object), 339\nIf (DataWindow expression function), 90\nImport.XML.Trace property (DataWindow\nobject), 340\nImport.XML.TraceFile property\n(DataWindow object), 341\nImport.XML.UseTemplate property\n(DataWindow object), 342\nImportClipboard method (DataWindows),\n712\nImportFile method (DataWindows), 715\nImportJson method (DataWindows), 719\nImportJsonByKey method (DataWindows),\n726\nImportRowFromJson method\n(DataWindows), 731\nImportString method (DataWindows), 734\nInitial property (DataWindow object), 343\nInk.property (DataWindow object), 343\nInkEdit.property (DataWindow object), 345\nInkPic.property (DataWindow object), 349\nInkPicture controls\nin DataWindow objects, 187\nInsertDocument method (DataWindows),\n737\nInsertRow method (DataWindows), 739\nInt (DataWindow expression function), 91\nInteger (DataWindow expression function),\n91\nInverse (DataWindow expression function),\nInvert property (DataWindow object), 351\nIsDate (DataWindow expression function),\n92\nIsExpanded (DataWindow expression\nfunction), 93\nIsExpanded method (DataWindows), 740\nIsNull (DataWindow expression function),\n93\nIsNumber (DataWindow expression\nfunction), 94\nIsRowModified (DataWindow expression\nfunction), 95\nIsRowNew (DataWindow expression\nfunction), 96\nIsRowSelected method (DataWindows), 741\nIsSelected (DataWindow expression\nfunction), 96\nIsSelected method (DataWindows), 742\nIsTime (DataWindow expression function),\n97\nItemChanged event (DataWindows), 551\nItemError event (DataWindows), 552\nItemFocusChanged event (DataWindows),\n554\nJ\nJSGen.property (DataWindow object), 352\nK\nKey property (DataWindow object), 353\nKeyClause property (DataWindow object),\n354\nKeyDown event (DataWindows), 555\nL\nLabel.property (DataWindow object), 355\n"}
{"page": 984, "text": "Index\nPage 984\nLabelDispAttr.fontproperty (DataWindow\nobject), 357\nLarge (DataWindow expression function), 97\nLast (DataWindow expression function), 99\nLastPos (DataWindow expression function),\n101\nLastRowOnPage property (DataWindow\nobject), 357\nLeft (DataWindow expression function), 102\nLeftA (DataWindow expression function),\n103\nLeftTrim (DataWindow expression function),\n103\nLegend property (DataWindow object), 358\nLegend.DispAttr.fontproperty (DataWindow\nobject), 359\nLen (DataWindow expression function), 104\nLenA (DataWindow expression function),\n105\nLevel property (DataWindow object), 359\nLimitation property (DataWindow object),\nLine controls\nin DataWindow objects, 188\nLineCount method (DataWindows), 743\nLineRemove property (DataWindow object),\n359\nLineStyle constant (DataWindows), 518\nLinkUpdateOptions property (DataWindow\nobject), 360\nLog (DataWindow expression function), 105\nLogTen (DataWindow expression function),\n106\nLong (DataWindow expression function),\n107\nLookUpDisplay (DataWindow expression\nfunction), 107\nLoseFocus event (DataWindows), 555\nLower (DataWindow expression function),\n108\nM\nMatch (DataWindow expression function),\n108\nMax (DataWindow expression function), 111\nMedian (DataWindow expression function),\n113\nMessage.Title property (DataWindow\nobject), 361\nMessageText event (DataWindows), 556\nMetaDataType constant (DataWindows), 519\nMid (DataWindow expression function), 115\nMidA (DataWindow expression function),\n116\nMin (DataWindow expression function), 117\nMinute (DataWindow expression function),\n118\nMod (DataWindow expression function), 119\nMode (DataWindow expression function),\n120\nModifiedCount method (DataWindows), 744\nModify and Describe methods for properties\n(JavaScript)\nadvantage and drawbacks, 505\nhandle errors, 506\nModify and Describe methods for properties\n(PowerBuilder)\nadvantage and drawbacks, 490\nhandle errors, 492\nModify method (DataWindows), 746\nMonth (DataWindow expression function),\n122\nMouseMove event (DataWindows), 557\nMouseUp event (DataWindows), 558\nMove method (DataWindows), 757\nMoveable property (DataWindow object),\n361\nMultiline property (DataWindow object), 362\nN\nName property (DataWindow object), 363\nNested property (DataWindow object), 364\nNoUserPrompt property (DataWindow\nobject), 366\nNow (DataWindow expression function), 122\nNumber (DataWindow expression function),\n123\nO\nObjectAtPointer method (Graphs in\nDataWindows), 951\nObjectAtPointerDataPoint method (Graphs\nin DataWindows), 952\nObjectAtPointerSeries method (Graphs in\nDataWindows), 952\nObjects property (DataWindow object), 367\n"}
{"page": 985, "text": "Index\nPage 985\nOLE Object controls\nin DataWindow objects, 189\nOLE.Client.property (DataWindow object),\n367\nOLEActivate method (DataWindows), 758\nOLEClass property (DataWindow object),\n368\nOneTrip method (DataWindows), 759\nOnSubmit event (DataWindows), 559\noperator\nprecedence in DataWindow expressions,\n29\noperators\nin DataWindow expressions, 23\nOriginalSize property (DataWindow object),\n369\nOval controls\nin DataWindow objects, 190\nOverlapPercent property (DataWindow\nobject), 370\nP\nPage (DataWindow expression function), 124\nPageAbs (DataWindow expression function),\n125\nPageAcross (DataWindow expression\nfunction), 125\nPageCount (DataWindow expression\nfunction), 126\nPageCountAcross (DataWindow expression\nfunction), 127\nPaint (DataWindow expression function),\n127\nPaste method (DataWindows), 762\nPasteRTF method (DataWindows), 763\nPen.property (DataWindow object), 371\nPercent (DataWindow expression function),\n128\nPerspective property (DataWindow object),\n372\nPi (DataWindow expression function), 130\nPicture controls\nin DataWindow objects, 191\nPicture.property (DataWindow object), 373\nPie.DispAttr.fontproperty (DataWindow\nobject), 375\nPlotNullData property (DataWindow object),\n376\nPointer property (DataWindow object), 376\nPointerX method (DataWindows), 764\nPointerY method (DataWindows), 765\nPos (DataWindow expression function), 131\nPosA (DataWindow expression function),\n132\nPosition method (DataWindows), 766\nPostEvent method (DataWindows), 770\nPrint method (DataWindows), 771\nPrint.Preview.property (DataWindow object),\n377\nPrint.property (DataWindow object), 379\nPrintCancel method (DataWindows), 775\nPrintend event (DataWindows), 559\nPrinter property (DataWindow object), 387\nPrintMarginChange event (DataWindows),\n560\nPrintPage event (DataWindows), 560\nPrintStart event (DataWindows), 562\nProcessEnter event (DataWindows), 562\nProcessing property (DataWindow object),\n387\nProfileInt (DataWindow expression\nfunction), 133\nProfileString (DataWindow expression\nfunction), 134\nproperties\nfor Button controls in DataWindow\nobjects, 179\nfor Column controls in DataWindow\nobjects, 180\nfor Computed Field controls in\nDataWindow objects, 182\nfor DataStore objects, 524\nfor DataWindow controls, 524\nfor Graph controls in DataWindow\nobjects, 184\nfor GroupBox controls in DataWindow\nobjects, 186\nfor InkPicture controls in DataWindow\nobjects, 187\nfor Line controls in DataWindow objects,\n188\nfor OLE Object controls in DataWindow\nobjects, 189\nfor Oval Rectangle and RoundRectangle\ncontrols in DataWindow objects, 190\n"}
{"page": 986, "text": "Index\nPage 986\nfor Picture controls in DataWindow\nobjects, 191\nfor Report controls in DataWindow\nobjects, 192\nfor TableBlob controls in DataWindow\nobjects, 193\nfor Text controls in DataWindow objects,\n194\nfor the DataWindow object, 172\nfor the Group keyword, 187\nfor the Style keyword, 193\nProtect property (DataWindow object), 388\nQ\nQueryClear property (DataWindow object),\n389\nQueryMode property (DataWindow object),\n390\nQuerySort property (DataWindow object),\n391\nR\nRadioButtons.property (DataWindow\nobject), 392\nRand (DataWindow expression function),\n136\nRange property (DataWindow object), 393\nRButtonDown event (DataWindows), 562\nReadOnly property (DataWindow object),\n394\nReal (DataWindow expression function), 136\nRectangle controls\nin DataWindow objects, 190\nRelativeDate (DataWindow expression\nfunction), 137\nRelativeTime (DataWindow expression\nfunction), 137\nReplace (DataWindow expression function),\n138\nReplaceA (DataWindow expression\nfunction), 139\nReplaceTabWithSpace property\n(DataWindow object), 396\nReplaceText method (DataWindows), 778\nReport controls\nin DataWindow objects, 192\nReport property (DataWindow object), 396\nReselectRow method (DataWindows), 779\nReset method (DataWindows), 780\nReset method (Graphs in DataWindows), 953\nResetDataColors method (Graphs in\nDataWindows), 954\nResetInk method (DataWindows), 781\nResetPageCount property (DataWindow\nobject), 397\nResetTransObject method (DataWindows),\n782\nResetUpdate method (DataWindows), 783\nResize event (DataWindows), 563\nResize method (DataWindows), 784\nResizeable property (DataWindow object),\n397\nRetrieve method (DataWindows), 785\nRetrieve property (DataWindow object), 398\nRetrieve.AsNeeded property (DataWindow\nobject), 398\nRetrieveEnd event (DataWindows), 564\nRetrieveRow event (DataWindows), 565\nRetrieveStart event (DataWindows), 566\nreturn values\nfor DataWindow events, 528\nRGB (DataWindow expression function),\n140\nRichEdit.property (DataWindow object), 399\nRichText (DataWindow expression\nfunction), 141\nRichText.property (DataWindow object), 401\nRichTextCurrentStyleChanged event\n(DataWindows), 567\nRichTextFile (DataWindow expression\nfunction), 142\nRichTextLimitError event (DataWindows),\n567\nRichTextLoseFocus event (DataWindows),\n567\nRichTextToolbarActivation constant\n(DataWindows), 519\nRight (DataWindow expression function),\n142\nRightA (DataWindow expression function),\n143\nRightToLeft property (DataWindow object),\n405\nRightTrim (DataWindow expression\nfunction), 143\nRotation property (DataWindow object), 406\n"}
{"page": 987, "text": "Index\nPage 987\nRound (DataWindow expression function),\n144\nRoundRectangle controls\nin DataWindow objects, 190\nRow.Resize property (DataWindow object),\n406\nRowCount (DataWindow expression\nfunction), 145\nRowCount method (DataWindows), 789\nRowFocusChanged event (DataWindows),\n568\nRowFocusChanging event (DataWindows),\n569\nRowFocusInd constant (DataWindows), 520\nRowHeight (DataWindow expression\nfunction), 145\nRowsCopy method (DataWindows), 790\nRowsDiscard method (DataWindows), 792\nRowsMove method (DataWindows), 793\nS\nSaveAs method (DataWindows), 795\nSaveAs method (Graphs in DataWindows),\n955\nSaveAsAscii method (DataWindows), 798\nSaveAsFormattedText method\n(DataWindows), 799\nSaveAsType constant (DataWindows), 520\nSaveInk method (DataWindows), 801\nSaveInkPic method (DataWindows), 803\nSaveMetaData constant (DataWindows), 522\nSaveNativePDFToBlob method\n(DataWindows), 804\nScroll method (DataWindows), 805\nScrollFirstPage method (DataWindows), 806\nScrollHorizontal event (DataWindows), 571\nScrollLastPage method (DataWindows), 807\nScrollNextPage method (DataWindows), 808\nScrollNextRow method (DataWindows), 811\nScrollPriorPage method (DataWindows), 813\nScrollPriorRow method (DataWindows), 816\nScrollToRow method (DataWindows), 818\nScrollVertical event (DataWindows), 571\nSecond (DataWindow expression function),\n146\nSecondsAfter (DataWindow expression\nfunction), 147\nSelected property (DataWindow object), 408\nSelected.Data property (DataWindow\nobject), 409\nSelected.Mouse property (DataWindow\nobject), 409\nSelectedLength method (DataWindows), 820\nSelectedLine method (DataWindows), 821\nSelectedStart method (DataWindows), 822\nSelectedText method (DataWindows), 823\nSelectRow method (DataWindows), 824\nSelectText method (DataWindows), 825\nSelectTextAll method (DataWindows), 828\nSelectTextLine method (DataWindows), 830\nSelectTextWord method (DataWindows),\n831\nSelectTreeNode method (DataWindows),\n832\nSeries property (DataWindow object), 410\nSeriesCount method (Graphs in\nDataWindows), 957\nSeriesName method (Graphs in\nDataWindows), 957\nSetAction method (DataWindows), 833\nSetActionCode method (DataWindows), 834\nSetBorderStyle method (DataWindows), 836\nSetBrowser method (DataWindows), 836\nSetChanges method (DataWindows), 838\nSetColumn method (DataWindows), 839\nSetColumnLink method (DataWindows), 841\nSetCultureFormat method (DataWindows),\n843\nSetDataLabelling method (Graphs in\nDataWindows), 958\nSetDataPieExplode method (Graphs in\nDataWindows), 959\nSetDataStyle method (Graphs in\nDataWindows), 961\nSetDataTransparency method (Graphs in\nDataWindows), 966\nSetDetailHeight method (DataWindows),\n843\nSetDWObject method (DataWindows), 844\nSetFilter method (DataWindows), 846\nSetFormat method (DataWindows), 848\nSetFullState method (DataWindows), 849\nSetHTMLAction method (DataWindows),\n851\nSetHTMLObjectName method\n(DataWindows), 852\n"}
{"page": 988, "text": "Index\nPage 988\nSetItem method (DataWindows), 853\nSetItemDate method (DataWindows), 856\nSetItemDateTime method (DataWindows),\n857\nSetItemNumber method (DataWindows), 858\nSetItemStatus method (DataWindows), 859\nSetItemString method (DataWindows), 862\nSetItemTime method (DataWindows), 863\nSetPageSize method (DataWindows), 864\nSetPosition method (DataWindows), 865\nSetRedraw method (DataWindows), 866\nSetRichTextAlign method (DataWindows),\n867\nSetRichTextColor method (DataWindows),\n868\nSetRichTextFaceName method\n(DataWindows), 869\nSetRichTextSize method (DataWindows),\n870\nSetRichTextStyle method (DataWindows),\n871\nSetRow method (DataWindows), 872\nSetRowFocusIndicator method\n(DataWindows), 873\nSetSelfLink method (DataWindows), 875\nSetSeriesLabelling method (Graphs in\nDataWindows), 967\nSetSeriesStyle method (Graphs in\nDataWindows), 968\nSetSeriesTransparency method (Graphs in\nDataWindows), 975\nSetServerServiceClasses method\n(DataWindows), 877\nSetServerSideState method (DataWindows),\n879\nSetSort method (DataWindows), 880\nSetSQLPreview method (DataWindows),\n882\nSetSQLSelect method (DataWindows), 883\nSetTabOrder method (DataWindows), 885\nSetText method (DataWindows), 886\nSetTrans method (DataWindows), 888\nSetTransObject method (DataWindows), 889\nSetValidate method (DataWindows), 892\nSetValue method (DataWindows), 894\nSetWeight method (DataWindows), 896\nSetWSObject method (DataWindows), 898\nShadeColor property (DataWindow object),\n410\nShareData method (DataWindows), 899\nShareDataOff method (DataWindows), 902\nShow method (DataWindows), 903\nShowBackColorOnXP property\n(DataWindow object), 411\nShowBackground property (DataWindow\nobject), 412\nShowDefinition property (DataWindow\nobject), 412\nShowHeadFoot method (DataWindows), 904\nSign (DataWindow expression function), 147\nSin (DataWindow expression function), 148\nSizeToDisplay property (DataWindow\nobject), 413\nSlideLeft property (DataWindow object), 414\nSlideUp property (DataWindow object), 415\nSmall (DataWindow expression function),\n149\nSort method (DataWindows), 905\nSort property (DataWindow object), 416\nSpace (DataWindow expression function),\n151\nSpacing property (DataWindow object), 416\nSparse property (DataWindow object), 417\nSQLPreview event (DataWindows), 572\nSQLPreviewFunction constant\n(DataWindows), 522\nSQLPreviewType constant (DataWindows),\n522\nSqrt (DataWindow expression function), 151\nStDev (DataWindow expression function),\n152\nStDevP (DataWindow expression function),\n154\nStorage property (DataWindow object), 418\nStoragePageSize property (DataWindow\nobject), 418\nString (DataWindow expression function),\n156\nStripRTF (DataWindow expression\nfunction), 158\nStyle keyword, 193\nSum (DataWindow expression function), 158\nSummary.property (DataWindow object),\n419\n"}
{"page": 989, "text": "Index\nPage 989\nSuppressEventProcessing property\n(DataWindow object), 419\nSyntax property (DataWindow object), 420\nSyntax.Data property (DataWindow object),\n420\nSyntax.Modified property (DataWindow\nobject), 421\nsyntaxes\nfor DataWindow data expressions, 471\nT\nTabDownOut event (DataWindows), 574\nTable.property (DataWindow object), 423\nTable.sqlaction.property (DataWindow\nobject), 426\nTableBlob controls\nin DataWindow objects, 193\nTabOut event (DataWindows), 574\nTabSequence property (DataWindow object),\n429\nTabUpOut event (DataWindows), 575\nTag property (DataWindow object), 430\nTan (DataWindow expression function), 160\nTarget property (DataWindow object), 430\nTemplate property (DataWindow object),\n431\nText controls\nin DataWindow objects, 194\nText property (DataWindow object), 432\nTextLine method (DataWindows), 907\nTime (DataWindow expression function),\n161\nTitle keyword, 196, 196\nTitle property (DataWindow object), 433\nTitle.DispAttr.fontproperty (DataWindow\nobject), 434\nToday (DataWindow expression function),\n162\nTooltip.property (DataWindow object), 434\nTree.Leaf.TreeNodeIconName property\n(DataWindow object), 442\nTree.property (DataWindow object), 439\nTreeNodeSelected event (DataWindows),\n575\nTreeNodeSelecting event (DataWindows),\n576\nTriggerEvent method (DataWindows), 908\nTrim (DataWindow expression function),\n162\nTruncate (DataWindow expression function),\n163\nType property (DataWindow object), 444\nTypeOf method (DataWindows), 909\nU\nUndo method (DataWindows), 909\nUnits property (DataWindow object), 445\nUpdate method (DataWindows), 910\nUpdate property (DataWindow object), 446\nUpdateEnd event (DataWindows), 576\nUpdateStart event (DataWindows), 577\nUpper (DataWindow expression function),\n164\nV\nValidation property (DataWindow object),\n446\nValidationMsg property (DataWindow\nobject), 447\nVar (DataWindow expression function), 164\nVarP (DataWindow expression function),\n167\nVerticalScrollMaximum property\n(DataWindow object), 450\nVerticalScrollPosition property\n(DataWindow object), 450\nVisible property (DataWindow object), 451\nVTextAlign property (DataWindow object),\n452\nW\nWebPagingMethod constant (DataWindows),\n523\nWidth property (DataWindow object), 453\nWidth.Autosize property (DataWindow\nobject), 453, 454\nWordCap (DataWindow expression\nfunction), 169\nWSError event (DataWindows), 577\nX\nX property (DataWindow object), 455\nXHTMLGen.Browser property\n(DataWindow object), 456\nXMLGen.property (DataWindow object),\n458\n"}
{"page": 990, "text": "Index\nPage 990\nXSLTGen.property (DataWindow object),\n459\nY\nY property (DataWindow object), 460\nYear (DataWindow expression function), 169\nZ\nZoom property (DataWindow object), 462\n"}
